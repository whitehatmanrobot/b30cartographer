This,
            /* [in] */ IHTMLDOMNode *oldChild,
            /* [out][retval] */ IHTMLDOMNode **node);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IHTMLDOMAttribute2 * This,
            /* [in] */ IHTMLDOMNode *newChild,
            /* [out][retval] */ IHTMLDOMNode **node);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IHTMLDOMAttribute2 * This,
            /* [out][retval] */ VARIANT_BOOL *fChildren);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IHTMLDOMAttribute2 * This,
            /* [in] */ VARIANT_BOOL fDeep,
            /* [out][retval] */ IHTMLDOMAttribute **clonedNode);
        
        END_INTERFACE
    } IHTMLDOMAttribute2Vtbl;

    interface IHTMLDOMAttribute2
    {
        CONST_VTBL struct IHTMLDOMAttribute2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDOMAttribute2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDOMAttribute2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDOMAttribute2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDOMAttribute2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDOMAttribute2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDOMAttribute2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDOMAttribute2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDOMAttribute2_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLDOMAttribute2_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLDOMAttribute2_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLDOMAttribute2_get_expando(This,p)	\
    (This)->lpVtbl -> get_expando(This,p)

#define IHTMLDOMAttribute2_get_nodeType(This,p)	\
    (This)->lpVtbl -> get_nodeType(This,p)

#define IHTMLDOMAttribute2_get_parentNode(This,p)	\
    (This)->lpVtbl -> get_parentNode(This,p)

#define IHTMLDOMAttribute2_get_childNodes(This,p)	\
    (This)->lpVtbl -> get_childNodes(This,p)

#define IHTMLDOMAttribute2_get_firstChild(This,p)	\
    (This)->lpVtbl -> get_firstChild(This,p)

#define IHTMLDOMAttribute2_get_lastChild(This,p)	\
    (This)->lpVtbl -> get_lastChild(This,p)

#define IHTMLDOMAttribute2_get_previousSibling(This,p)	\
    (This)->lpVtbl -> get_previousSibling(This,p)

#define IHTMLDOMAttribute2_get_nextSibling(This,p)	\
    (This)->lpVtbl -> get_nextSibling(This,p)

#define IHTMLDOMAttribute2_get_attributes(This,p)	\
    (This)->lpVtbl -> get_attributes(This,p)

#define IHTMLDOMAttribute2_get_ownerDocument(This,p)	\
    (This)->lpVtbl -> get_ownerDocument(This,p)

#define IHTMLDOMAttribute2_insertBefore(This,newChild,refChild,node)	\
    (This)->lpVtbl -> insertBefore(This,newChild,refChild,node)

#define IHTMLDOMAttribute2_replaceChild(This,newChild,oldChild,node)	\
    (This)->lpVtbl -> replaceChild(This,newChild,oldChild,node)

#define IHTMLDOMAttribute2_removeChild(This,oldChild,node)	\
    (This)->lpVtbl -> removeChild(This,oldChild,node)

#define IHTMLDOMAttribute2_appendChild(This,newChild,node)	\
    (This)->lpVtbl -> appendChild(This,newChild,node)

#define IHTMLDOMAttribute2_hasChildNodes(This,fChildren)	\
    (This)->lpVtbl -> hasChildNodes(This,fChildren)

#define IHTMLDOMAttribute2_cloneNode(This,fDeep,clonedNode)	\
    (This)->lpVtbl -> cloneNode(This,fDeep,clonedNode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_name_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDOMAttribute2_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_put_value_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDOMAttribute2_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_value_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDOMAttribute2_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_expando_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDOMAttribute2_get_expando_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_nodeType_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLDOMAttribute2_get_nodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_parentNode_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDOMAttribute2_get_parentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_childNodes_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDOMAttribute2_get_childNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_firstChild_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDOMAttribute2_get_firstChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_lastChild_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDOMAttribute2_get_lastChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_previousSibling_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDOMAttribute2_get_previousSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_nextSibling_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDOMAttribute2_get_nextSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_attributes_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDOMAttribute2_get_attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_get_ownerDocument_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDOMAttribute2_get_ownerDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_insertBefore_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ IHTMLDOMNode *newChild,
    /* [in][optional] */ VARIANT refChild,
    /* [out][retval] */ IHTMLDOMNode **node);


void __RPC_STUB IHTMLDOMAttribute2_insertBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_replaceChild_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ IHTMLDOMNode *newChild,
    /* [in] */ IHTMLDOMNode *oldChild,
    /* [out][retval] */ IHTMLDOMNode **node);


void __RPC_STUB IHTMLDOMAttribute2_replaceChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_removeChild_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ IHTMLDOMNode *oldChild,
    /* [out][retval] */ IHTMLDOMNode **node);


void __RPC_STUB IHTMLDOMAttribute2_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_appendChild_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ IHTMLDOMNode *newChild,
    /* [out][retval] */ IHTMLDOMNode **node);


void __RPC_STUB IHTMLDOMAttribute2_appendChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_hasChildNodes_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [out][retval] */ VARIANT_BOOL *fChildren);


void __RPC_STUB IHTMLDOMAttribute2_hasChildNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMAttribute2_cloneNode_Proxy( 
    IHTMLDOMAttribute2 * This,
    /* [in] */ VARIANT_BOOL fDeep,
    /* [out][retval] */ IHTMLDOMAttribute **clonedNode);


void __RPC_STUB IHTMLDOMAttribute2_cloneNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDOMAttribute2_INTERFACE_DEFINED__ */


#ifndef __IHTMLDOMTextNode_INTERFACE_DEFINED__
#define __IHTMLDOMTextNode_INTERFACE_DEFINED__

/* interface IHTMLDOMTextNode */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDOMTextNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4b1-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDOMTextNode : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_data( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_data( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *String) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE splitText( 
            /* [in] */ long offset,
            /* [out][retval] */ IHTMLDOMNode **pRetNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDOMTextNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDOMTextNode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDOMTextNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDOMTextNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDOMTextNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDOMTextNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDOMTextNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDOMTextNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IHTMLDOMTextNode * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IHTMLDOMTextNode * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IHTMLDOMTextNode * This,
            /* [out][retval] */ BSTR *String);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLDOMTextNode * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *splitText )( 
            IHTMLDOMTextNode * This,
            /* [in] */ long offset,
            /* [out][retval] */ IHTMLDOMNode **pRetNode);
        
        END_INTERFACE
    } IHTMLDOMTextNodeVtbl;

    interface IHTMLDOMTextNode
    {
        CONST_VTBL struct IHTMLDOMTextNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDOMTextNode_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDOMTextNode_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDOMTextNode_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDOMTextNode_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDOMTextNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDOMTextNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDOMTextNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDOMTextNode_put_data(This,v)	\
    (This)->lpVtbl -> put_data(This,v)

#define IHTMLDOMTextNode_get_data(This,p)	\
    (This)->lpVtbl -> get_data(This,p)

#define IHTMLDOMTextNode_toString(This,String)	\
    (This)->lpVtbl -> toString(This,String)

#define IHTMLDOMTextNode_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLDOMTextNode_splitText(This,offset,pRetNode)	\
    (This)->lpVtbl -> splitText(This,offset,pRetNode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode_put_data_Proxy( 
    IHTMLDOMTextNode * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDOMTextNode_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode_get_data_Proxy( 
    IHTMLDOMTextNode * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDOMTextNode_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode_toString_Proxy( 
    IHTMLDOMTextNode * This,
    /* [out][retval] */ BSTR *String);


void __RPC_STUB IHTMLDOMTextNode_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode_get_length_Proxy( 
    IHTMLDOMTextNode * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLDOMTextNode_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode_splitText_Proxy( 
    IHTMLDOMTextNode * This,
    /* [in] */ long offset,
    /* [out][retval] */ IHTMLDOMNode **pRetNode);


void __RPC_STUB IHTMLDOMTextNode_splitText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDOMTextNode_INTERFACE_DEFINED__ */


#ifndef __IHTMLDOMTextNode2_INTERFACE_DEFINED__
#define __IHTMLDOMTextNode2_INTERFACE_DEFINED__

/* interface IHTMLDOMTextNode2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDOMTextNode2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f809-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDOMTextNode2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE substringData( 
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [out][retval] */ BSTR *pbstrsubString) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE appendData( 
            /* [in] */ BSTR bstrstring) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE insertData( 
            /* [in] */ long offset,
            /* [in] */ BSTR bstrstring) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteData( 
            /* [in] */ long offset,
            /* [in] */ long Count) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE replaceData( 
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [in] */ BSTR bstrstring) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDOMTextNode2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDOMTextNode2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDOMTextNode2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDOMTextNode2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [out][retval] */ BSTR *pbstrsubString);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ BSTR bstrstring);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ long offset,
            /* [in] */ BSTR bstrstring);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IHTMLDOMTextNode2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [in] */ BSTR bstrstring);
        
        END_INTERFACE
    } IHTMLDOMTextNode2Vtbl;

    interface IHTMLDOMTextNode2
    {
        CONST_VTBL struct IHTMLDOMTextNode2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDOMTextNode2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDOMTextNode2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDOMTextNode2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDOMTextNode2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDOMTextNode2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDOMTextNode2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDOMTextNode2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDOMTextNode2_substringData(This,offset,Count,pbstrsubString)	\
    (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString)

#define IHTMLDOMTextNode2_appendData(This,bstrstring)	\
    (This)->lpVtbl -> appendData(This,bstrstring)

#define IHTMLDOMTextNode2_insertData(This,offset,bstrstring)	\
    (This)->lpVtbl -> insertData(This,offset,bstrstring)

#define IHTMLDOMTextNode2_deleteData(This,offset,Count)	\
    (This)->lpVtbl -> deleteData(This,offset,Count)

#define IHTMLDOMTextNode2_replaceData(This,offset,Count,bstrstring)	\
    (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode2_substringData_Proxy( 
    IHTMLDOMTextNode2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count,
    /* [out][retval] */ BSTR *pbstrsubString);


void __RPC_STUB IHTMLDOMTextNode2_substringData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode2_appendData_Proxy( 
    IHTMLDOMTextNode2 * This,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLDOMTextNode2_appendData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode2_insertData_Proxy( 
    IHTMLDOMTextNode2 * This,
    /* [in] */ long offset,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLDOMTextNode2_insertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode2_deleteData_Proxy( 
    IHTMLDOMTextNode2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count);


void __RPC_STUB IHTMLDOMTextNode2_deleteData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMTextNode2_replaceData_Proxy( 
    IHTMLDOMTextNode2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLDOMTextNode2_replaceData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDOMTextNode2_INTERFACE_DEFINED__ */


#ifndef __IHTMLDOMImplementation_INTERFACE_DEFINED__
#define __IHTMLDOMImplementation_INTERFACE_DEFINED__

/* interface IHTMLDOMImplementation */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDOMImplementation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f80d-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDOMImplementation : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE hasFeature( 
            /* [in] */ BSTR bstrfeature,
            /* [in][optional] */ VARIANT version,
            /* [out][retval] */ VARIANT_BOOL *pfHasFeature) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDOMImplementation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDOMImplementation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDOMImplementation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDOMImplementation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDOMImplementation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *hasFeature )( 
            IHTMLDOMImplementation * This,
            /* [in] */ BSTR bstrfeature,
            /* [in][optional] */ VARIANT version,
            /* [out][retval] */ VARIANT_BOOL *pfHasFeature);
        
        END_INTERFACE
    } IHTMLDOMImplementationVtbl;

    interface IHTMLDOMImplementation
    {
        CONST_VTBL struct IHTMLDOMImplementationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDOMImplementation_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDOMImplementation_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDOMImplementation_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDOMImplementation_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDOMImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDOMImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDOMImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDOMImplementation_hasFeature(This,bstrfeature,version,pfHasFeature)	\
    (This)->lpVtbl -> hasFeature(This,bstrfeature,version,pfHasFeature)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMImplementation_hasFeature_Proxy( 
    IHTMLDOMImplementation * This,
    /* [in] */ BSTR bstrfeature,
    /* [in][optional] */ VARIANT version,
    /* [out][retval] */ VARIANT_BOOL *pfHasFeature);


void __RPC_STUB IHTMLDOMImplementation_hasFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDOMImplementation_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDOMAttribute_DISPINTERFACE_DEFINED__
#define __DispHTMLDOMAttribute_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDOMAttribute */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDOMAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f564-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDOMAttribute : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDOMAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDOMAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDOMAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDOMAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDOMAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDOMAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDOMAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDOMAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDOMAttributeVtbl;

    interface DispHTMLDOMAttribute
    {
        CONST_VTBL struct DispHTMLDOMAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDOMAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDOMAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDOMAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDOMAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDOMAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDOMAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDOMAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDOMAttribute_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDOMAttribute;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4b2-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMAttribute;
#endif

#ifndef __DispHTMLDOMTextNode_DISPINTERFACE_DEFINED__
#define __DispHTMLDOMTextNode_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDOMTextNode */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDOMTextNode;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f565-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDOMTextNode : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDOMTextNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDOMTextNode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDOMTextNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDOMTextNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDOMTextNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDOMTextNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDOMTextNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDOMTextNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDOMTextNodeVtbl;

    interface DispHTMLDOMTextNode
    {
        CONST_VTBL struct DispHTMLDOMTextNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDOMTextNode_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDOMTextNode_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDOMTextNode_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDOMTextNode_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDOMTextNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDOMTextNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDOMTextNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDOMTextNode_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDOMTextNode;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4ba-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMTextNode;
#endif

#ifndef __DispHTMLDOMImplementation_DISPINTERFACE_DEFINED__
#define __DispHTMLDOMImplementation_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDOMImplementation */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDOMImplementation;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f58f-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDOMImplementation : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDOMImplementation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDOMImplementation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDOMImplementation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDOMImplementation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDOMImplementation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDOMImplementationVtbl;

    interface DispHTMLDOMImplementation
    {
        CONST_VTBL struct DispHTMLDOMImplementationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDOMImplementation_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDOMImplementation_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDOMImplementation_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDOMImplementation_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDOMImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDOMImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDOMImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDOMImplementation_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDOMImplementation;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f80e-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMImplementation;
#endif

#ifndef __IHTMLAttributeCollection_INTERFACE_DEFINED__
#define __IHTMLAttributeCollection_INTERFACE_DEFINED__

/* interface IHTMLAttributeCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAttributeCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4c3-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAttributeCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT *name,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAttributeCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAttributeCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAttributeCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAttributeCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAttributeCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAttributeCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAttributeCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAttributeCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLAttributeCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLAttributeCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLAttributeCollection * This,
            /* [in][optional] */ VARIANT *name,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLAttributeCollectionVtbl;

    interface IHTMLAttributeCollection
    {
        CONST_VTBL struct IHTMLAttributeCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAttributeCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAttributeCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAttributeCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAttributeCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAttributeCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAttributeCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAttributeCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAttributeCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLAttributeCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLAttributeCollection_item(This,name,pdisp)	\
    (This)->lpVtbl -> item(This,name,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection_get_length_Proxy( 
    IHTMLAttributeCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLAttributeCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection_get__newEnum_Proxy( 
    IHTMLAttributeCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLAttributeCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection_item_Proxy( 
    IHTMLAttributeCollection * This,
    /* [in][optional] */ VARIANT *name,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLAttributeCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAttributeCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLAttributeCollection2_INTERFACE_DEFINED__
#define __IHTMLAttributeCollection2_INTERFACE_DEFINED__

/* interface IHTMLAttributeCollection2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAttributeCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f80a-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAttributeCollection2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getNamedItem( 
            /* [in] */ BSTR bstrName,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setNamedItem( 
            /* [in] */ IHTMLDOMAttribute *ppNode,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeNamedItem( 
            /* [in] */ BSTR bstrName,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAttributeCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAttributeCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAttributeCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAttributeCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getNamedItem )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ BSTR bstrName,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setNamedItem )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ IHTMLDOMAttribute *ppNode,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeNamedItem )( 
            IHTMLAttributeCollection2 * This,
            /* [in] */ BSTR bstrName,
            /* [out][retval] */ IHTMLDOMAttribute **newretNode);
        
        END_INTERFACE
    } IHTMLAttributeCollection2Vtbl;

    interface IHTMLAttributeCollection2
    {
        CONST_VTBL struct IHTMLAttributeCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAttributeCollection2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAttributeCollection2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAttributeCollection2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAttributeCollection2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAttributeCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAttributeCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAttributeCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAttributeCollection2_getNamedItem(This,bstrName,newretNode)	\
    (This)->lpVtbl -> getNamedItem(This,bstrName,newretNode)

#define IHTMLAttributeCollection2_setNamedItem(This,ppNode,newretNode)	\
    (This)->lpVtbl -> setNamedItem(This,ppNode,newretNode)

#define IHTMLAttributeCollection2_removeNamedItem(This,bstrName,newretNode)	\
    (This)->lpVtbl -> removeNamedItem(This,bstrName,newretNode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection2_getNamedItem_Proxy( 
    IHTMLAttributeCollection2 * This,
    /* [in] */ BSTR bstrName,
    /* [out][retval] */ IHTMLDOMAttribute **newretNode);


void __RPC_STUB IHTMLAttributeCollection2_getNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection2_setNamedItem_Proxy( 
    IHTMLAttributeCollection2 * This,
    /* [in] */ IHTMLDOMAttribute *ppNode,
    /* [out][retval] */ IHTMLDOMAttribute **newretNode);


void __RPC_STUB IHTMLAttributeCollection2_setNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAttributeCollection2_removeNamedItem_Proxy( 
    IHTMLAttributeCollection2 * This,
    /* [in] */ BSTR bstrName,
    /* [out][retval] */ IHTMLDOMAttribute **newretNode);


void __RPC_STUB IHTMLAttributeCollection2_removeNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAttributeCollection2_INTERFACE_DEFINED__ */


#ifndef __IHTMLDOMChildrenCollection_INTERFACE_DEFINED__
#define __IHTMLDOMChildrenCollection_INTERFACE_DEFINED__

/* interface IHTMLDOMChildrenCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDOMChildrenCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5ab-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDOMChildrenCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ IDispatch **ppItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDOMChildrenCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDOMChildrenCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDOMChildrenCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDOMChildrenCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDOMChildrenCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDOMChildrenCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDOMChildrenCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDOMChildrenCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLDOMChildrenCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLDOMChildrenCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLDOMChildrenCollection * This,
            /* [in] */ long index,
            /* [out][retval] */ IDispatch **ppItem);
        
        END_INTERFACE
    } IHTMLDOMChildrenCollectionVtbl;

    interface IHTMLDOMChildrenCollection
    {
        CONST_VTBL struct IHTMLDOMChildrenCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDOMChildrenCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDOMChildrenCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDOMChildrenCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDOMChildrenCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDOMChildrenCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDOMChildrenCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDOMChildrenCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDOMChildrenCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLDOMChildrenCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLDOMChildrenCollection_item(This,index,ppItem)	\
    (This)->lpVtbl -> item(This,index,ppItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMChildrenCollection_get_length_Proxy( 
    IHTMLDOMChildrenCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLDOMChildrenCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDOMChildrenCollection_get__newEnum_Proxy( 
    IHTMLDOMChildrenCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLDOMChildrenCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDOMChildrenCollection_item_Proxy( 
    IHTMLDOMChildrenCollection * This,
    /* [in] */ long index,
    /* [out][retval] */ IDispatch **ppItem);


void __RPC_STUB IHTMLDOMChildrenCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDOMChildrenCollection_INTERFACE_DEFINED__ */


#ifndef __DispHTMLAttributeCollection_DISPINTERFACE_DEFINED__
#define __DispHTMLAttributeCollection_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLAttributeCollection */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLAttributeCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f56c-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLAttributeCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLAttributeCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLAttributeCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLAttributeCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLAttributeCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLAttributeCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLAttributeCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLAttributeCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLAttributeCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLAttributeCollectionVtbl;

    interface DispHTMLAttributeCollection
    {
        CONST_VTBL struct DispHTMLAttributeCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLAttributeCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLAttributeCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLAttributeCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLAttributeCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLAttributeCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLAttributeCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLAttributeCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLAttributeCollection_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLAttributeCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4cc-98b5-11cf-bb82-00aa00bdce0b")
HTMLAttributeCollection;
#endif

#ifndef __DispDOMChildrenCollection_DISPINTERFACE_DEFINED__
#define __DispDOMChildrenCollection_DISPINTERFACE_DEFINED__

/* dispinterface DispDOMChildrenCollection */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispDOMChildrenCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f577-98b5-11cf-bb82-00aa00bdce0b")
    DispDOMChildrenCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispDOMChildrenCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispDOMChildrenCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispDOMChildrenCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispDOMChildrenCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispDOMChildrenCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispDOMChildrenCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispDOMChildrenCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispDOMChildrenCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispDOMChildrenCollectionVtbl;

    interface DispDOMChildrenCollection
    {
        CONST_VTBL struct DispDOMChildrenCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispDOMChildrenCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispDOMChildrenCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispDOMChildrenCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispDOMChildrenCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispDOMChildrenCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispDOMChildrenCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispDOMChildrenCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispDOMChildrenCollection_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DOMChildrenCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5aa-98b5-11cf-bb82-00aa00bdce0b")
DOMChildrenCollection;
#endif

#ifndef __HTMLElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f60f-98b5-11cf-bb82-00aa00bdce0b")
    HTMLElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLElementEvents2Vtbl;

    interface HTMLElementEvents2
    {
        CONST_VTBL struct HTMLElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f33c-98b5-11cf-bb82-00aa00bdce0b")
    HTMLElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLElementEventsVtbl;

    interface HTMLElementEvents
    {
        CONST_VTBL struct HTMLElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLElementCollection_INTERFACE_DEFINED__
#define __IHTMLElementCollection_INTERFACE_DEFINED__

/* interface IHTMLElementCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElementCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f21f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElementCollection : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *String) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_length( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElementCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElementCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElementCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElementCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElementCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElementCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElementCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElementCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IHTMLElementCollection * This,
            /* [out][retval] */ BSTR *String);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_length )( 
            IHTMLElementCollection * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLElementCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLElementCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLElementCollection * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *tags )( 
            IHTMLElementCollection * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLElementCollectionVtbl;

    interface IHTMLElementCollection
    {
        CONST_VTBL struct IHTMLElementCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElementCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElementCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElementCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElementCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElementCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElementCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElementCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElementCollection_toString(This,String)	\
    (This)->lpVtbl -> toString(This,String)

#define IHTMLElementCollection_put_length(This,v)	\
    (This)->lpVtbl -> put_length(This,v)

#define IHTMLElementCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLElementCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLElementCollection_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IHTMLElementCollection_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_toString_Proxy( 
    IHTMLElementCollection * This,
    /* [out][retval] */ BSTR *String);


void __RPC_STUB IHTMLElementCollection_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_put_length_Proxy( 
    IHTMLElementCollection * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLElementCollection_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_get_length_Proxy( 
    IHTMLElementCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElementCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_get__newEnum_Proxy( 
    IHTMLElementCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLElementCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_item_Proxy( 
    IHTMLElementCollection * This,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT index,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLElementCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection_tags_Proxy( 
    IHTMLElementCollection * This,
    /* [in] */ VARIANT tagName,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLElementCollection_tags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElementCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLElement2_INTERFACE_DEFINED__
#define __IHTMLElement2_INTERFACE_DEFINED__

/* interface IHTMLElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f434-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElement2 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scopeName( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setCapture( 
            /* [in][defaultvalue] */ VARIANT_BOOL containerCapture = -1) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE releaseCapture( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onlosecapture( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onlosecapture( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE componentFromPoint( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [out][retval] */ BSTR *component) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE doScroll( 
            /* [in][optional] */ VARIANT component) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onscroll( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onscroll( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondrag( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondrag( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondragend( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondragend( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondragenter( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondragenter( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondragover( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondragover( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondragleave( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondragleave( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondrop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondrop( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforecut( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforecut( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncut( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncut( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforecopy( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforecopy( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncopy( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncopy( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforepaste( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforepaste( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onpaste( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onpaste( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE get_currentStyle( 
            /* [out][retval] */ IHTMLCurrentStyle **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onpropertychange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onpropertychange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getClientRects( 
            /* [out][retval] */ IHTMLRectCollection **pRectCol) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getBoundingClientRect( 
            /* [out][retval] */ IHTMLRect **pRect) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setExpression( 
            /* [in] */ BSTR propname,
            /* [in] */ BSTR expression,
            /* [in][defaultvalue] */ BSTR language = L"") = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getExpression( 
            /* [in] */ BSTR propname,
            /* [out][retval] */ VARIANT *expression) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeExpression( 
            /* [in] */ BSTR propname,
            /* [out][retval] */ VARIANT_BOOL *pfSuccess) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_tabIndex( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_tabIndex( 
            /* [out][retval] */ short *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accessKey( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accessKey( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onblur( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onblur( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onresize( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onresize( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addFilter( 
            /* [in] */ IUnknown *pUnk) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeFilter( 
            /* [in] */ IUnknown *pUnk) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientHeight( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE attachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE detachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreadystatechange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onreadystatechange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowsdelete( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowsdelete( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowsinserted( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowsinserted( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncellchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncellchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dir( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dir( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createControlRange( 
            /* [out][retval] */ IDispatch **range) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollHeight( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollTop( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollLeft( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearAttributes( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE mergeAttributes( 
            /* [in] */ IHTMLElement *mergeThis) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncontextmenu( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncontextmenu( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE insertAdjacentElement( 
            /* [in] */ BSTR where,
            /* [in] */ IHTMLElement *insertedElement,
            /* [out][retval] */ IHTMLElement **inserted) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE applyElement( 
            /* [in] */ IHTMLElement *apply,
            /* [in] */ BSTR where,
            /* [out][retval] */ IHTMLElement **applied) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAdjacentText( 
            /* [in] */ BSTR where,
            /* [out][retval] */ BSTR *text) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE replaceAdjacentText( 
            /* [in] */ BSTR where,
            /* [in] */ BSTR newText,
            /* [out][retval] */ BSTR *oldText) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canHaveChildren( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addBehavior( 
            /* [in] */ BSTR bstrUrl,
            /* [in][optional] */ VARIANT *pvarFactory,
            /* [out][retval] */ long *pCookie) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeBehavior( 
            /* [in] */ long cookie,
            /* [out][retval] */ VARIANT_BOOL *pfResult) = 0;
        
        virtual /* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE get_runtimeStyle( 
            /* [out][retval] */ IHTMLStyle **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_behaviorUrns( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_tagUrn( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tagUrn( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeeditfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeeditfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_readyStateValue( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scopeName )( 
            IHTMLElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setCapture )( 
            IHTMLElement2 * This,
            /* [in][defaultvalue] */ VARIANT_BOOL containerCapture);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *releaseCapture )( 
            IHTMLElement2 * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onlosecapture )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onlosecapture )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *componentFromPoint )( 
            IHTMLElement2 * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [out][retval] */ BSTR *component);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *doScroll )( 
            IHTMLElement2 * This,
            /* [in][optional] */ VARIANT component);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onscroll )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onscroll )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondrag )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondrag )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondragend )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondragend )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondragenter )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondragenter )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondragover )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondragover )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondragleave )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondragleave )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondrop )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondrop )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforecut )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforecut )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncut )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncut )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforecopy )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforecopy )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncopy )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncopy )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforepaste )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforepaste )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onpaste )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onpaste )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [nonbrowsable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentStyle )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IHTMLCurrentStyle **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onpropertychange )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onpropertychange )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getClientRects )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IHTMLRectCollection **pRectCol);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getBoundingClientRect )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IHTMLRect **pRect);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setExpression )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR propname,
            /* [in] */ BSTR expression,
            /* [in][defaultvalue] */ BSTR language);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getExpression )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR propname,
            /* [out][retval] */ VARIANT *expression);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeExpression )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR propname,
            /* [out][retval] */ VARIANT_BOOL *pfSuccess);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tabIndex )( 
            IHTMLElement2 * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tabIndex )( 
            IHTMLElement2 * This,
            /* [out][retval] */ short *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLElement2 * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accessKey )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accessKey )( 
            IHTMLElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onblur )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onblur )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocus )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocus )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onresize )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onresize )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *blur )( 
            IHTMLElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addFilter )( 
            IHTMLElement2 * This,
            /* [in] */ IUnknown *pUnk);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeFilter )( 
            IHTMLElement2 * This,
            /* [in] */ IUnknown *pUnk);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientHeight )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientWidth )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientTop )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientLeft )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *attachEvent )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *detachEvent )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowsdelete )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowsdelete )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowsinserted )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowsinserted )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncellchange )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncellchange )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dir )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dir )( 
            IHTMLElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createControlRange )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IDispatch **range);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollHeight )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollWidth )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollTop )( 
            IHTMLElement2 * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollTop )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollLeft )( 
            IHTMLElement2 * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollLeft )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearAttributes )( 
            IHTMLElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *mergeAttributes )( 
            IHTMLElement2 * This,
            /* [in] */ IHTMLElement *mergeThis);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncontextmenu )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncontextmenu )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *insertAdjacentElement )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR where,
            /* [in] */ IHTMLElement *insertedElement,
            /* [out][retval] */ IHTMLElement **inserted);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *applyElement )( 
            IHTMLElement2 * This,
            /* [in] */ IHTMLElement *apply,
            /* [in] */ BSTR where,
            /* [out][retval] */ IHTMLElement **applied);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAdjacentText )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR where,
            /* [out][retval] */ BSTR *text);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *replaceAdjacentText )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR where,
            /* [in] */ BSTR newText,
            /* [out][retval] */ BSTR *oldText);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canHaveChildren )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addBehavior )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR bstrUrl,
            /* [in][optional] */ VARIANT *pvarFactory,
            /* [out][retval] */ long *pCookie);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeBehavior )( 
            IHTMLElement2 * This,
            /* [in] */ long cookie,
            /* [out][retval] */ VARIANT_BOOL *pfResult);
        
        /* [nonbrowsable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_runtimeStyle )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IHTMLStyle **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_behaviorUrns )( 
            IHTMLElement2 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tagUrn )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tagUrn )( 
            IHTMLElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeeditfocus )( 
            IHTMLElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeeditfocus )( 
            IHTMLElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyStateValue )( 
            IHTMLElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IHTMLElement2 * This,
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl);
        
        END_INTERFACE
    } IHTMLElement2Vtbl;

    interface IHTMLElement2
    {
        CONST_VTBL struct IHTMLElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElement2_get_scopeName(This,p)	\
    (This)->lpVtbl -> get_scopeName(This,p)

#define IHTMLElement2_setCapture(This,containerCapture)	\
    (This)->lpVtbl -> setCapture(This,containerCapture)

#define IHTMLElement2_releaseCapture(This)	\
    (This)->lpVtbl -> releaseCapture(This)

#define IHTMLElement2_put_onlosecapture(This,v)	\
    (This)->lpVtbl -> put_onlosecapture(This,v)

#define IHTMLElement2_get_onlosecapture(This,p)	\
    (This)->lpVtbl -> get_onlosecapture(This,p)

#define IHTMLElement2_componentFromPoint(This,x,y,component)	\
    (This)->lpVtbl -> componentFromPoint(This,x,y,component)

#define IHTMLElement2_doScroll(This,component)	\
    (This)->lpVtbl -> doScroll(This,component)

#define IHTMLElement2_put_onscroll(This,v)	\
    (This)->lpVtbl -> put_onscroll(This,v)

#define IHTMLElement2_get_onscroll(This,p)	\
    (This)->lpVtbl -> get_onscroll(This,p)

#define IHTMLElement2_put_ondrag(This,v)	\
    (This)->lpVtbl -> put_ondrag(This,v)

#define IHTMLElement2_get_ondrag(This,p)	\
    (This)->lpVtbl -> get_ondrag(This,p)

#define IHTMLElement2_put_ondragend(This,v)	\
    (This)->lpVtbl -> put_ondragend(This,v)

#define IHTMLElement2_get_ondragend(This,p)	\
    (This)->lpVtbl -> get_ondragend(This,p)

#define IHTMLElement2_put_ondragenter(This,v)	\
    (This)->lpVtbl -> put_ondragenter(This,v)

#define IHTMLElement2_get_ondragenter(This,p)	\
    (This)->lpVtbl -> get_ondragenter(This,p)

#define IHTMLElement2_put_ondragover(This,v)	\
    (This)->lpVtbl -> put_ondragover(This,v)

#define IHTMLElement2_get_ondragover(This,p)	\
    (This)->lpVtbl -> get_ondragover(This,p)

#define IHTMLElement2_put_ondragleave(This,v)	\
    (This)->lpVtbl -> put_ondragleave(This,v)

#define IHTMLElement2_get_ondragleave(This,p)	\
    (This)->lpVtbl -> get_ondragleave(This,p)

#define IHTMLElement2_put_ondrop(This,v)	\
    (This)->lpVtbl -> put_ondrop(This,v)

#define IHTMLElement2_get_ondrop(This,p)	\
    (This)->lpVtbl -> get_ondrop(This,p)

#define IHTMLElement2_put_onbeforecut(This,v)	\
    (This)->lpVtbl -> put_onbeforecut(This,v)

#define IHTMLElement2_get_onbeforecut(This,p)	\
    (This)->lpVtbl -> get_onbeforecut(This,p)

#define IHTMLElement2_put_oncut(This,v)	\
    (This)->lpVtbl -> put_oncut(This,v)

#define IHTMLElement2_get_oncut(This,p)	\
    (This)->lpVtbl -> get_oncut(This,p)

#define IHTMLElement2_put_onbeforecopy(This,v)	\
    (This)->lpVtbl -> put_onbeforecopy(This,v)

#define IHTMLElement2_get_onbeforecopy(This,p)	\
    (This)->lpVtbl -> get_onbeforecopy(This,p)

#define IHTMLElement2_put_oncopy(This,v)	\
    (This)->lpVtbl -> put_oncopy(This,v)

#define IHTMLElement2_get_oncopy(This,p)	\
    (This)->lpVtbl -> get_oncopy(This,p)

#define IHTMLElement2_put_onbeforepaste(This,v)	\
    (This)->lpVtbl -> put_onbeforepaste(This,v)

#define IHTMLElement2_get_onbeforepaste(This,p)	\
    (This)->lpVtbl -> get_onbeforepaste(This,p)

#define IHTMLElement2_put_onpaste(This,v)	\
    (This)->lpVtbl -> put_onpaste(This,v)

#define IHTMLElement2_get_onpaste(This,p)	\
    (This)->lpVtbl -> get_onpaste(This,p)

#define IHTMLElement2_get_currentStyle(This,p)	\
    (This)->lpVtbl -> get_currentStyle(This,p)

#define IHTMLElement2_put_onpropertychange(This,v)	\
    (This)->lpVtbl -> put_onpropertychange(This,v)

#define IHTMLElement2_get_onpropertychange(This,p)	\
    (This)->lpVtbl -> get_onpropertychange(This,p)

#define IHTMLElement2_getClientRects(This,pRectCol)	\
    (This)->lpVtbl -> getClientRects(This,pRectCol)

#define IHTMLElement2_getBoundingClientRect(This,pRect)	\
    (This)->lpVtbl -> getBoundingClientRect(This,pRect)

#define IHTMLElement2_setExpression(This,propname,expression,language)	\
    (This)->lpVtbl -> setExpression(This,propname,expression,language)

#define IHTMLElement2_getExpression(This,propname,expression)	\
    (This)->lpVtbl -> getExpression(This,propname,expression)

#define IHTMLElement2_removeExpression(This,propname,pfSuccess)	\
    (This)->lpVtbl -> removeExpression(This,propname,pfSuccess)

#define IHTMLElement2_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IHTMLElement2_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IHTMLElement2_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLElement2_put_accessKey(This,v)	\
    (This)->lpVtbl -> put_accessKey(This,v)

#define IHTMLElement2_get_accessKey(This,p)	\
    (This)->lpVtbl -> get_accessKey(This,p)

#define IHTMLElement2_put_onblur(This,v)	\
    (This)->lpVtbl -> put_onblur(This,v)

#define IHTMLElement2_get_onblur(This,p)	\
    (This)->lpVtbl -> get_onblur(This,p)

#define IHTMLElement2_put_onfocus(This,v)	\
    (This)->lpVtbl -> put_onfocus(This,v)

#define IHTMLElement2_get_onfocus(This,p)	\
    (This)->lpVtbl -> get_onfocus(This,p)

#define IHTMLElement2_put_onresize(This,v)	\
    (This)->lpVtbl -> put_onresize(This,v)

#define IHTMLElement2_get_onresize(This,p)	\
    (This)->lpVtbl -> get_onresize(This,p)

#define IHTMLElement2_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define IHTMLElement2_addFilter(This,pUnk)	\
    (This)->lpVtbl -> addFilter(This,pUnk)

#define IHTMLElement2_removeFilter(This,pUnk)	\
    (This)->lpVtbl -> removeFilter(This,pUnk)

#define IHTMLElement2_get_clientHeight(This,p)	\
    (This)->lpVtbl -> get_clientHeight(This,p)

#define IHTMLElement2_get_clientWidth(This,p)	\
    (This)->lpVtbl -> get_clientWidth(This,p)

#define IHTMLElement2_get_clientTop(This,p)	\
    (This)->lpVtbl -> get_clientTop(This,p)

#define IHTMLElement2_get_clientLeft(This,p)	\
    (This)->lpVtbl -> get_clientLeft(This,p)

#define IHTMLElement2_attachEvent(This,event,pDisp,pfResult)	\
    (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult)

#define IHTMLElement2_detachEvent(This,event,pDisp)	\
    (This)->lpVtbl -> detachEvent(This,event,pDisp)

#define IHTMLElement2_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLElement2_put_onreadystatechange(This,v)	\
    (This)->lpVtbl -> put_onreadystatechange(This,v)

#define IHTMLElement2_get_onreadystatechange(This,p)	\
    (This)->lpVtbl -> get_onreadystatechange(This,p)

#define IHTMLElement2_put_onrowsdelete(This,v)	\
    (This)->lpVtbl -> put_onrowsdelete(This,v)

#define IHTMLElement2_get_onrowsdelete(This,p)	\
    (This)->lpVtbl -> get_onrowsdelete(This,p)

#define IHTMLElement2_put_onrowsinserted(This,v)	\
    (This)->lpVtbl -> put_onrowsinserted(This,v)

#define IHTMLElement2_get_onrowsinserted(This,p)	\
    (This)->lpVtbl -> get_onrowsinserted(This,p)

#define IHTMLElement2_put_oncellchange(This,v)	\
    (This)->lpVtbl -> put_oncellchange(This,v)

#define IHTMLElement2_get_oncellchange(This,p)	\
    (This)->lpVtbl -> get_oncellchange(This,p)

#define IHTMLElement2_put_dir(This,v)	\
    (This)->lpVtbl -> put_dir(This,v)

#define IHTMLElement2_get_dir(This,p)	\
    (This)->lpVtbl -> get_dir(This,p)

#define IHTMLElement2_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)

#define IHTMLElement2_get_scrollHeight(This,p)	\
    (This)->lpVtbl -> get_scrollHeight(This,p)

#define IHTMLElement2_get_scrollWidth(This,p)	\
    (This)->lpVtbl -> get_scrollWidth(This,p)

#define IHTMLElement2_put_scrollTop(This,v)	\
    (This)->lpVtbl -> put_scrollTop(This,v)

#define IHTMLElement2_get_scrollTop(This,p)	\
    (This)->lpVtbl -> get_scrollTop(This,p)

#define IHTMLElement2_put_scrollLeft(This,v)	\
    (This)->lpVtbl -> put_scrollLeft(This,v)

#define IHTMLElement2_get_scrollLeft(This,p)	\
    (This)->lpVtbl -> get_scrollLeft(This,p)

#define IHTMLElement2_clearAttributes(This)	\
    (This)->lpVtbl -> clearAttributes(This)

#define IHTMLElement2_mergeAttributes(This,mergeThis)	\
    (This)->lpVtbl -> mergeAttributes(This,mergeThis)

#define IHTMLElement2_put_oncontextmenu(This,v)	\
    (This)->lpVtbl -> put_oncontextmenu(This,v)

#define IHTMLElement2_get_oncontextmenu(This,p)	\
    (This)->lpVtbl -> get_oncontextmenu(This,p)

#define IHTMLElement2_insertAdjacentElement(This,where,insertedElement,inserted)	\
    (This)->lpVtbl -> insertAdjacentElement(This,where,insertedElement,inserted)

#define IHTMLElement2_applyElement(This,apply,where,applied)	\
    (This)->lpVtbl -> applyElement(This,apply,where,applied)

#define IHTMLElement2_getAdjacentText(This,where,text)	\
    (This)->lpVtbl -> getAdjacentText(This,where,text)

#define IHTMLElement2_replaceAdjacentText(This,where,newText,oldText)	\
    (This)->lpVtbl -> replaceAdjacentText(This,where,newText,oldText)

#define IHTMLElement2_get_canHaveChildren(This,p)	\
    (This)->lpVtbl -> get_canHaveChildren(This,p)

#define IHTMLElement2_addBehavior(This,bstrUrl,pvarFactory,pCookie)	\
    (This)->lpVtbl -> addBehavior(This,bstrUrl,pvarFactory,pCookie)

#define IHTMLElement2_removeBehavior(This,cookie,pfResult)	\
    (This)->lpVtbl -> removeBehavior(This,cookie,pfResult)

#define IHTMLElement2_get_runtimeStyle(This,p)	\
    (This)->lpVtbl -> get_runtimeStyle(This,p)

#define IHTMLElement2_get_behaviorUrns(This,p)	\
    (This)->lpVtbl -> get_behaviorUrns(This,p)

#define IHTMLElement2_put_tagUrn(This,v)	\
    (This)->lpVtbl -> put_tagUrn(This,v)

#define IHTMLElement2_get_tagUrn(This,p)	\
    (This)->lpVtbl -> get_tagUrn(This,p)

#define IHTMLElement2_put_onbeforeeditfocus(This,v)	\
    (This)->lpVtbl -> put_onbeforeeditfocus(This,v)

#define IHTMLElement2_get_onbeforeeditfocus(This,p)	\
    (This)->lpVtbl -> get_onbeforeeditfocus(This,p)

#define IHTMLElement2_get_readyStateValue(This,p)	\
    (This)->lpVtbl -> get_readyStateValue(This,p)

#define IHTMLElement2_getElementsByTagName(This,v,pelColl)	\
    (This)->lpVtbl -> getElementsByTagName(This,v,pelColl)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_scopeName_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElement2_get_scopeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_setCapture_Proxy( 
    IHTMLElement2 * This,
    /* [in][defaultvalue] */ VARIANT_BOOL containerCapture);


void __RPC_STUB IHTMLElement2_setCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_releaseCapture_Proxy( 
    IHTMLElement2 * This);


void __RPC_STUB IHTMLElement2_releaseCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onlosecapture_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onlosecapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onlosecapture_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onlosecapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_componentFromPoint_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ long x,
    /* [in] */ long y,
    /* [out][retval] */ BSTR *component);


void __RPC_STUB IHTMLElement2_componentFromPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_doScroll_Proxy( 
    IHTMLElement2 * This,
    /* [in][optional] */ VARIANT component);


void __RPC_STUB IHTMLElement2_doScroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onscroll_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onscroll_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondrag_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondrag_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondragend_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondragend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondragend_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondragend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondragenter_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondragenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondragenter_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondragenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondragover_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondragover_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondragover_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondragover_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondragleave_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondragleave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondragleave_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondragleave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_ondrop_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_ondrop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_ondrop_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_ondrop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onbeforecut_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onbeforecut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onbeforecut_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onbeforecut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_oncut_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_oncut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_oncut_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_oncut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onbeforecopy_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onbeforecopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onbeforecopy_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onbeforecopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_oncopy_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_oncopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_oncopy_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_oncopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onbeforepaste_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onbeforepaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onbeforepaste_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onbeforepaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onpaste_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onpaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onpaste_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onpaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_currentStyle_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IHTMLCurrentStyle **p);


void __RPC_STUB IHTMLElement2_get_currentStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onpropertychange_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onpropertychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onpropertychange_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onpropertychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_getClientRects_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IHTMLRectCollection **pRectCol);


void __RPC_STUB IHTMLElement2_getClientRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_getBoundingClientRect_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IHTMLRect **pRect);


void __RPC_STUB IHTMLElement2_getBoundingClientRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_setExpression_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR propname,
    /* [in] */ BSTR expression,
    /* [in][defaultvalue] */ BSTR language);


void __RPC_STUB IHTMLElement2_setExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_getExpression_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR propname,
    /* [out][retval] */ VARIANT *expression);


void __RPC_STUB IHTMLElement2_getExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_removeExpression_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR propname,
    /* [out][retval] */ VARIANT_BOOL *pfSuccess);


void __RPC_STUB IHTMLElement2_removeExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_tabIndex_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ short v);


void __RPC_STUB IHTMLElement2_put_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_tabIndex_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ short *p);


void __RPC_STUB IHTMLElement2_get_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_focus_Proxy( 
    IHTMLElement2 * This);


void __RPC_STUB IHTMLElement2_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_accessKey_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLElement2_put_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_accessKey_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElement2_get_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onblur_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onblur_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onfocus_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onfocus_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onresize_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onresize_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_blur_Proxy( 
    IHTMLElement2 * This);


void __RPC_STUB IHTMLElement2_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_addFilter_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ IUnknown *pUnk);


void __RPC_STUB IHTMLElement2_addFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_removeFilter_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ IUnknown *pUnk);


void __RPC_STUB IHTMLElement2_removeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_clientHeight_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_clientHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_clientWidth_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_clientWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_clientTop_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_clientTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_clientLeft_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_clientLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_attachEvent_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp,
    /* [out][retval] */ VARIANT_BOOL *pfResult);


void __RPC_STUB IHTMLElement2_attachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_detachEvent_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp);


void __RPC_STUB IHTMLElement2_detachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_readyState_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onreadystatechange_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onreadystatechange_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onrowsdelete_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onrowsdelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onrowsdelete_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onrowsdelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onrowsinserted_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onrowsinserted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onrowsinserted_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onrowsinserted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_oncellchange_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_oncellchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_oncellchange_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_oncellchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_dir_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLElement2_put_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_dir_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElement2_get_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_createControlRange_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IDispatch **range);


void __RPC_STUB IHTMLElement2_createControlRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_scrollHeight_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_scrollHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_scrollWidth_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_scrollWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_scrollTop_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLElement2_put_scrollTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_scrollTop_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_scrollTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_scrollLeft_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLElement2_put_scrollLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_scrollLeft_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_scrollLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_clearAttributes_Proxy( 
    IHTMLElement2 * This);


void __RPC_STUB IHTMLElement2_clearAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_mergeAttributes_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ IHTMLElement *mergeThis);


void __RPC_STUB IHTMLElement2_mergeAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_oncontextmenu_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_oncontextmenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_oncontextmenu_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_oncontextmenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_insertAdjacentElement_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR where,
    /* [in] */ IHTMLElement *insertedElement,
    /* [out][retval] */ IHTMLElement **inserted);


void __RPC_STUB IHTMLElement2_insertAdjacentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_applyElement_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ IHTMLElement *apply,
    /* [in] */ BSTR where,
    /* [out][retval] */ IHTMLElement **applied);


void __RPC_STUB IHTMLElement2_applyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_getAdjacentText_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR where,
    /* [out][retval] */ BSTR *text);


void __RPC_STUB IHTMLElement2_getAdjacentText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_replaceAdjacentText_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR where,
    /* [in] */ BSTR newText,
    /* [out][retval] */ BSTR *oldText);


void __RPC_STUB IHTMLElement2_replaceAdjacentText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_canHaveChildren_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement2_get_canHaveChildren_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_addBehavior_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR bstrUrl,
    /* [in][optional] */ VARIANT *pvarFactory,
    /* [out][retval] */ long *pCookie);


void __RPC_STUB IHTMLElement2_addBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_removeBehavior_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ long cookie,
    /* [out][retval] */ VARIANT_BOOL *pfResult);


void __RPC_STUB IHTMLElement2_removeBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_runtimeStyle_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IHTMLStyle **p);


void __RPC_STUB IHTMLElement2_get_runtimeStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_behaviorUrns_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLElement2_get_behaviorUrns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_tagUrn_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLElement2_put_tagUrn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_tagUrn_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElement2_get_tagUrn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_put_onbeforeeditfocus_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement2_put_onbeforeeditfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_onbeforeeditfocus_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement2_get_onbeforeeditfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_get_readyStateValue_Proxy( 
    IHTMLElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElement2_get_readyStateValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement2_getElementsByTagName_Proxy( 
    IHTMLElement2 * This,
    /* [in] */ BSTR v,
    /* [out][retval] */ IHTMLElementCollection **pelColl);


void __RPC_STUB IHTMLElement2_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLElement3_INTERFACE_DEFINED__
#define __IHTMLElement3_INTERFACE_DEFINED__

/* interface IHTMLElement3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElement3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f673-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElement3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE mergeAttributes( 
            /* [in] */ IHTMLElement *mergeThis,
            /* [in][optional] */ VARIANT *pvarFlags) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isMultiLine( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canHaveHTML( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onlayoutcomplete( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onlayoutcomplete( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onpage( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onpage( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_inflateBlock( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_inflateBlock( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforedeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforedeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setActive( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_contentEditable( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_contentEditable( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isContentEditable( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hideFocus( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hideFocus( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isDisabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmove( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmove( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncontrolselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncontrolselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fireEvent( 
            /* [in] */ BSTR bstrEventName,
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ VARIANT_BOOL *pfCancelled) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onresizestart( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onresizestart( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onresizeend( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onresizeend( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmovestart( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmovestart( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmoveend( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmoveend( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmouseenter( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmouseenter( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmouseleave( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmouseleave( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE dragDrop( 
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_glyphMode( 
            /* [out][retval] */ LONG *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElement3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElement3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElement3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElement3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElement3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElement3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElement3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElement3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *mergeAttributes )( 
            IHTMLElement3 * This,
            /* [in] */ IHTMLElement *mergeThis,
            /* [in][optional] */ VARIANT *pvarFlags);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isMultiLine )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canHaveHTML )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onlayoutcomplete )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onlayoutcomplete )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onpage )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onpage )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [nonbrowsable][restricted][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_inflateBlock )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_inflateBlock )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforedeactivate )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforedeactivate )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setActive )( 
            IHTMLElement3 * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_contentEditable )( 
            IHTMLElement3 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_contentEditable )( 
            IHTMLElement3 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isContentEditable )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hideFocus )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hideFocus )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isDisabled )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmove )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmove )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncontrolselect )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncontrolselect )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fireEvent )( 
            IHTMLElement3 * This,
            /* [in] */ BSTR bstrEventName,
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ VARIANT_BOOL *pfCancelled);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onresizestart )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onresizestart )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onresizeend )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onresizeend )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmovestart )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmovestart )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmoveend )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmoveend )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmouseenter )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmouseenter )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmouseleave )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmouseleave )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onactivate )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onactivate )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondeactivate )( 
            IHTMLElement3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondeactivate )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *dragDrop )( 
            IHTMLElement3 * This,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_glyphMode )( 
            IHTMLElement3 * This,
            /* [out][retval] */ LONG *p);
        
        END_INTERFACE
    } IHTMLElement3Vtbl;

    interface IHTMLElement3
    {
        CONST_VTBL struct IHTMLElement3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElement3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElement3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElement3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElement3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElement3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElement3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElement3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElement3_mergeAttributes(This,mergeThis,pvarFlags)	\
    (This)->lpVtbl -> mergeAttributes(This,mergeThis,pvarFlags)

#define IHTMLElement3_get_isMultiLine(This,p)	\
    (This)->lpVtbl -> get_isMultiLine(This,p)

#define IHTMLElement3_get_canHaveHTML(This,p)	\
    (This)->lpVtbl -> get_canHaveHTML(This,p)

#define IHTMLElement3_put_onlayoutcomplete(This,v)	\
    (This)->lpVtbl -> put_onlayoutcomplete(This,v)

#define IHTMLElement3_get_onlayoutcomplete(This,p)	\
    (This)->lpVtbl -> get_onlayoutcomplete(This,p)

#define IHTMLElement3_put_onpage(This,v)	\
    (This)->lpVtbl -> put_onpage(This,v)

#define IHTMLElement3_get_onpage(This,p)	\
    (This)->lpVtbl -> get_onpage(This,p)

#define IHTMLElement3_put_inflateBlock(This,v)	\
    (This)->lpVtbl -> put_inflateBlock(This,v)

#define IHTMLElement3_get_inflateBlock(This,p)	\
    (This)->lpVtbl -> get_inflateBlock(This,p)

#define IHTMLElement3_put_onbeforedeactivate(This,v)	\
    (This)->lpVtbl -> put_onbeforedeactivate(This,v)

#define IHTMLElement3_get_onbeforedeactivate(This,p)	\
    (This)->lpVtbl -> get_onbeforedeactivate(This,p)

#define IHTMLElement3_setActive(This)	\
    (This)->lpVtbl -> setActive(This)

#define IHTMLElement3_put_contentEditable(This,v)	\
    (This)->lpVtbl -> put_contentEditable(This,v)

#define IHTMLElement3_get_contentEditable(This,p)	\
    (This)->lpVtbl -> get_contentEditable(This,p)

#define IHTMLElement3_get_isContentEditable(This,p)	\
    (This)->lpVtbl -> get_isContentEditable(This,p)

#define IHTMLElement3_put_hideFocus(This,v)	\
    (This)->lpVtbl -> put_hideFocus(This,v)

#define IHTMLElement3_get_hideFocus(This,p)	\
    (This)->lpVtbl -> get_hideFocus(This,p)

#define IHTMLElement3_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLElement3_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLElement3_get_isDisabled(This,p)	\
    (This)->lpVtbl -> get_isDisabled(This,p)

#define IHTMLElement3_put_onmove(This,v)	\
    (This)->lpVtbl -> put_onmove(This,v)

#define IHTMLElement3_get_onmove(This,p)	\
    (This)->lpVtbl -> get_onmove(This,p)

#define IHTMLElement3_put_oncontrolselect(This,v)	\
    (This)->lpVtbl -> put_oncontrolselect(This,v)

#define IHTMLElement3_get_oncontrolselect(This,p)	\
    (This)->lpVtbl -> get_oncontrolselect(This,p)

#define IHTMLElement3_fireEvent(This,bstrEventName,pvarEventObject,pfCancelled)	\
    (This)->lpVtbl -> fireEvent(This,bstrEventName,pvarEventObject,pfCancelled)

#define IHTMLElement3_put_onresizestart(This,v)	\
    (This)->lpVtbl -> put_onresizestart(This,v)

#define IHTMLElement3_get_onresizestart(This,p)	\
    (This)->lpVtbl -> get_onresizestart(This,p)

#define IHTMLElement3_put_onresizeend(This,v)	\
    (This)->lpVtbl -> put_onresizeend(This,v)

#define IHTMLElement3_get_onresizeend(This,p)	\
    (This)->lpVtbl -> get_onresizeend(This,p)

#define IHTMLElement3_put_onmovestart(This,v)	\
    (This)->lpVtbl -> put_onmovestart(This,v)

#define IHTMLElement3_get_onmovestart(This,p)	\
    (This)->lpVtbl -> get_onmovestart(This,p)

#define IHTMLElement3_put_onmoveend(This,v)	\
    (This)->lpVtbl -> put_onmoveend(This,v)

#define IHTMLElement3_get_onmoveend(This,p)	\
    (This)->lpVtbl -> get_onmoveend(This,p)

#define IHTMLElement3_put_onmouseenter(This,v)	\
    (This)->lpVtbl -> put_onmouseenter(This,v)

#define IHTMLElement3_get_onmouseenter(This,p)	\
    (This)->lpVtbl -> get_onmouseenter(This,p)

#define IHTMLElement3_put_onmouseleave(This,v)	\
    (This)->lpVtbl -> put_onmouseleave(This,v)

#define IHTMLElement3_get_onmouseleave(This,p)	\
    (This)->lpVtbl -> get_onmouseleave(This,p)

#define IHTMLElement3_put_onactivate(This,v)	\
    (This)->lpVtbl -> put_onactivate(This,v)

#define IHTMLElement3_get_onactivate(This,p)	\
    (This)->lpVtbl -> get_onactivate(This,p)

#define IHTMLElement3_put_ondeactivate(This,v)	\
    (This)->lpVtbl -> put_ondeactivate(This,v)

#define IHTMLElement3_get_ondeactivate(This,p)	\
    (This)->lpVtbl -> get_ondeactivate(This,p)

#define IHTMLElement3_dragDrop(This,pfRet)	\
    (This)->lpVtbl -> dragDrop(This,pfRet)

#define IHTMLElement3_get_glyphMode(This,p)	\
    (This)->lpVtbl -> get_glyphMode(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_mergeAttributes_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ IHTMLElement *mergeThis,
    /* [in][optional] */ VARIANT *pvarFlags);


void __RPC_STUB IHTMLElement3_mergeAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_isMultiLine_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_isMultiLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_canHaveHTML_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_canHaveHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onlayoutcomplete_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onlayoutcomplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onlayoutcomplete_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onlayoutcomplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onpage_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onpage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onpage_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onpage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_inflateBlock_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElement3_put_inflateBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_inflateBlock_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_inflateBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onbeforedeactivate_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onbeforedeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onbeforedeactivate_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onbeforedeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_setActive_Proxy( 
    IHTMLElement3 * This);


void __RPC_STUB IHTMLElement3_setActive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_contentEditable_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLElement3_put_contentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_contentEditable_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElement3_get_contentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_isContentEditable_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_isContentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_hideFocus_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElement3_put_hideFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_hideFocus_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_hideFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_disabled_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElement3_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_disabled_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_isDisabled_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElement3_get_isDisabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onmove_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onmove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onmove_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onmove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_oncontrolselect_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_oncontrolselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_oncontrolselect_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_oncontrolselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_fireEvent_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ BSTR bstrEventName,
    /* [in][optional] */ VARIANT *pvarEventObject,
    /* [out][retval] */ VARIANT_BOOL *pfCancelled);


void __RPC_STUB IHTMLElement3_fireEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onresizestart_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onresizestart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onresizestart_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onresizestart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onresizeend_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onresizeend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onresizeend_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onresizeend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onmovestart_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onmovestart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onmovestart_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onmovestart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onmoveend_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onmoveend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onmoveend_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onmoveend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onmouseenter_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onmouseenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onmouseenter_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onmouseenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onmouseleave_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onmouseleave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onmouseleave_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onmouseleave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_onactivate_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_onactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_onactivate_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_onactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_put_ondeactivate_Proxy( 
    IHTMLElement3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement3_put_ondeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_ondeactivate_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement3_get_ondeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_dragDrop_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLElement3_dragDrop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement3_get_glyphMode_Proxy( 
    IHTMLElement3 * This,
    /* [out][retval] */ LONG *p);


void __RPC_STUB IHTMLElement3_get_glyphMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElement3_INTERFACE_DEFINED__ */


#ifndef __IHTMLElement4_INTERFACE_DEFINED__
#define __IHTMLElement4_INTERFACE_DEFINED__

/* interface IHTMLElement4 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElement4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f80f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElement4 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmousewheel( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmousewheel( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE normalize( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttributeNode( 
            /* [in] */ BSTR bstrname,
            /* [out][retval] */ IHTMLDOMAttribute **ppAttribute) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setAttributeNode( 
            /* [in] */ IHTMLDOMAttribute *pattr,
            /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeAttributeNode( 
            /* [in] */ IHTMLDOMAttribute *pattr,
            /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocusin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocusin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocusout( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocusout( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElement4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElement4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElement4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElement4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElement4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElement4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElement4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElement4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmousewheel )( 
            IHTMLElement4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmousewheel )( 
            IHTMLElement4 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IHTMLElement4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IHTMLElement4 * This,
            /* [in] */ BSTR bstrname,
            /* [out][retval] */ IHTMLDOMAttribute **ppAttribute);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IHTMLElement4 * This,
            /* [in] */ IHTMLDOMAttribute *pattr,
            /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IHTMLElement4 * This,
            /* [in] */ IHTMLDOMAttribute *pattr,
            /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeactivate )( 
            IHTMLElement4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeactivate )( 
            IHTMLElement4 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocusin )( 
            IHTMLElement4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocusin )( 
            IHTMLElement4 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocusout )( 
            IHTMLElement4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocusout )( 
            IHTMLElement4 * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLElement4Vtbl;

    interface IHTMLElement4
    {
        CONST_VTBL struct IHTMLElement4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElement4_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElement4_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElement4_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElement4_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElement4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElement4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElement4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElement4_put_onmousewheel(This,v)	\
    (This)->lpVtbl -> put_onmousewheel(This,v)

#define IHTMLElement4_get_onmousewheel(This,p)	\
    (This)->lpVtbl -> get_onmousewheel(This,p)

#define IHTMLElement4_normalize(This)	\
    (This)->lpVtbl -> normalize(This)

#define IHTMLElement4_getAttributeNode(This,bstrname,ppAttribute)	\
    (This)->lpVtbl -> getAttributeNode(This,bstrname,ppAttribute)

#define IHTMLElement4_setAttributeNode(This,pattr,ppretAttribute)	\
    (This)->lpVtbl -> setAttributeNode(This,pattr,ppretAttribute)

#define IHTMLElement4_removeAttributeNode(This,pattr,ppretAttribute)	\
    (This)->lpVtbl -> removeAttributeNode(This,pattr,ppretAttribute)

#define IHTMLElement4_put_onbeforeactivate(This,v)	\
    (This)->lpVtbl -> put_onbeforeactivate(This,v)

#define IHTMLElement4_get_onbeforeactivate(This,p)	\
    (This)->lpVtbl -> get_onbeforeactivate(This,p)

#define IHTMLElement4_put_onfocusin(This,v)	\
    (This)->lpVtbl -> put_onfocusin(This,v)

#define IHTMLElement4_get_onfocusin(This,p)	\
    (This)->lpVtbl -> get_onfocusin(This,p)

#define IHTMLElement4_put_onfocusout(This,v)	\
    (This)->lpVtbl -> put_onfocusout(This,v)

#define IHTMLElement4_get_onfocusout(This,p)	\
    (This)->lpVtbl -> get_onfocusout(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_put_onmousewheel_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement4_put_onmousewheel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_get_onmousewheel_Proxy( 
    IHTMLElement4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement4_get_onmousewheel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_normalize_Proxy( 
    IHTMLElement4 * This);


void __RPC_STUB IHTMLElement4_normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_getAttributeNode_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ BSTR bstrname,
    /* [out][retval] */ IHTMLDOMAttribute **ppAttribute);


void __RPC_STUB IHTMLElement4_getAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_setAttributeNode_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ IHTMLDOMAttribute *pattr,
    /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute);


void __RPC_STUB IHTMLElement4_setAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_removeAttributeNode_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ IHTMLDOMAttribute *pattr,
    /* [out][retval] */ IHTMLDOMAttribute **ppretAttribute);


void __RPC_STUB IHTMLElement4_removeAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_put_onbeforeactivate_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement4_put_onbeforeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_get_onbeforeactivate_Proxy( 
    IHTMLElement4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement4_get_onbeforeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_put_onfocusin_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement4_put_onfocusin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_get_onfocusin_Proxy( 
    IHTMLElement4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement4_get_onfocusin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_put_onfocusout_Proxy( 
    IHTMLElement4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLElement4_put_onfocusout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElement4_get_onfocusout_Proxy( 
    IHTMLElement4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLElement4_get_onfocusout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElement4_INTERFACE_DEFINED__ */


#ifndef __IHTMLElementRender_INTERFACE_DEFINED__
#define __IHTMLElementRender_INTERFACE_DEFINED__

/* interface IHTMLElementRender */
/* [uuid][unique][object] */ 


EXTERN_C const IID IID_IHTMLElementRender;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f669-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElementRender : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DrawToDC( 
            /* [in] */ HDC hDC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDocumentPrinter( 
            /* [in] */ BSTR bstrPrinterName,
            /* [in] */ HDC hDC) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElementRenderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElementRender * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElementRender * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElementRender * This);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToDC )( 
            IHTMLElementRender * This,
            /* [in] */ HDC hDC);
        
        HRESULT ( STDMETHODCALLTYPE *SetDocumentPrinter )( 
            IHTMLElementRender * This,
            /* [in] */ BSTR bstrPrinterName,
            /* [in] */ HDC hDC);
        
        END_INTERFACE
    } IHTMLElementRenderVtbl;

    interface IHTMLElementRender
    {
        CONST_VTBL struct IHTMLElementRenderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElementRender_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElementRender_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElementRender_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElementRender_DrawToDC(This,hDC)	\
    (This)->lpVtbl -> DrawToDC(This,hDC)

#define IHTMLElementRender_SetDocumentPrinter(This,bstrPrinterName,hDC)	\
    (This)->lpVtbl -> SetDocumentPrinter(This,bstrPrinterName,hDC)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IHTMLElementRender_DrawToDC_Proxy( 
    IHTMLElementRender * This,
    /* [in] */ HDC hDC);


void __RPC_STUB IHTMLElementRender_DrawToDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IHTMLElementRender_SetDocumentPrinter_Proxy( 
    IHTMLElementRender * This,
    /* [in] */ BSTR bstrPrinterName,
    /* [in] */ HDC hDC);


void __RPC_STUB IHTMLElementRender_SetDocumentPrinter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElementRender_INTERFACE_DEFINED__ */


#ifndef __IHTMLUniqueName_INTERFACE_DEFINED__
#define __IHTMLUniqueName_INTERFACE_DEFINED__

/* interface IHTMLUniqueName */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLUniqueName;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4d0-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLUniqueName : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_uniqueNumber( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_uniqueID( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLUniqueNameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLUniqueName * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLUniqueName * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLUniqueName * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLUniqueName * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLUniqueName * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLUniqueName * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLUniqueName * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_uniqueNumber )( 
            IHTMLUniqueName * This,
            /* [out][retval] */ long *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_uniqueID )( 
            IHTMLUniqueName * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLUniqueNameVtbl;

    interface IHTMLUniqueName
    {
        CONST_VTBL struct IHTMLUniqueNameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLUniqueName_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLUniqueName_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLUniqueName_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLUniqueName_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLUniqueName_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLUniqueName_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLUniqueName_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLUniqueName_get_uniqueNumber(This,p)	\
    (This)->lpVtbl -> get_uniqueNumber(This,p)

#define IHTMLUniqueName_get_uniqueID(This,p)	\
    (This)->lpVtbl -> get_uniqueID(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLUniqueName_get_uniqueNumber_Proxy( 
    IHTMLUniqueName * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLUniqueName_get_uniqueNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLUniqueName_get_uniqueID_Proxy( 
    IHTMLUniqueName * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLUniqueName_get_uniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLUniqueName_INTERFACE_DEFINED__ */


#ifndef __IHTMLDatabinding_INTERFACE_DEFINED__
#define __IHTMLDatabinding_INTERFACE_DEFINED__

/* interface IHTMLDatabinding */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDatabinding;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f3f2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDatabinding : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dataFld( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataFld( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dataSrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataSrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dataFormatAs( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataFormatAs( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDatabindingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDatabinding * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDatabinding * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDatabinding * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDatabinding * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDatabinding * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDatabinding * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDatabinding * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataFld )( 
            IHTMLDatabinding * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataFld )( 
            IHTMLDatabinding * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataSrc )( 
            IHTMLDatabinding * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataSrc )( 
            IHTMLDatabinding * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataFormatAs )( 
            IHTMLDatabinding * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataFormatAs )( 
            IHTMLDatabinding * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLDatabindingVtbl;

    interface IHTMLDatabinding
    {
        CONST_VTBL struct IHTMLDatabindingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDatabinding_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDatabinding_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDatabinding_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDatabinding_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDatabinding_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDatabinding_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDatabinding_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDatabinding_put_dataFld(This,v)	\
    (This)->lpVtbl -> put_dataFld(This,v)

#define IHTMLDatabinding_get_dataFld(This,p)	\
    (This)->lpVtbl -> get_dataFld(This,p)

#define IHTMLDatabinding_put_dataSrc(This,v)	\
    (This)->lpVtbl -> put_dataSrc(This,v)

#define IHTMLDatabinding_get_dataSrc(This,p)	\
    (This)->lpVtbl -> get_dataSrc(This,p)

#define IHTMLDatabinding_put_dataFormatAs(This,v)	\
    (This)->lpVtbl -> put_dataFormatAs(This,v)

#define IHTMLDatabinding_get_dataFormatAs(This,p)	\
    (This)->lpVtbl -> get_dataFormatAs(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_put_dataFld_Proxy( 
    IHTMLDatabinding * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDatabinding_put_dataFld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_get_dataFld_Proxy( 
    IHTMLDatabinding * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDatabinding_get_dataFld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_put_dataSrc_Proxy( 
    IHTMLDatabinding * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDatabinding_put_dataSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_get_dataSrc_Proxy( 
    IHTMLDatabinding * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDatabinding_get_dataSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_put_dataFormatAs_Proxy( 
    IHTMLDatabinding * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDatabinding_put_dataFormatAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDatabinding_get_dataFormatAs_Proxy( 
    IHTMLDatabinding * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDatabinding_get_dataFormatAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDatabinding_INTERFACE_DEFINED__ */


#ifndef __IHTMLDocument_INTERFACE_DEFINED__
#define __IHTMLDocument_INTERFACE_DEFINED__

/* interface IHTMLDocument */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("626FC520-A41E-11cf-A731-00A0C9082637")
    IHTMLDocument : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [out][retval] */ IDispatch **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            IHTMLDocument * This,
            /* [out][retval] */ IDispatch **p);
        
        END_INTERFACE
    } IHTMLDocumentVtbl;

    interface IHTMLDocument
    {
        CONST_VTBL struct IHTMLDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDocument_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDocument_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDocument_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDocument_get_Script(This,p)	\
    (This)->lpVtbl -> get_Script(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument_get_Script_Proxy( 
    IHTMLDocument * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDocument_get_Script_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDocument_INTERFACE_DEFINED__ */


#ifndef __IHTMLElementDefaults_INTERFACE_DEFINED__
#define __IHTMLElementDefaults_INTERFACE_DEFINED__

/* interface IHTMLElementDefaults */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElementDefaults;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f6c9-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElementDefaults : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE get_style( 
            /* [out][retval] */ IHTMLStyle **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_tabStop( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tabStop( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_viewInheritStyle( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_viewInheritStyle( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_viewMasterTab( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_viewMasterTab( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollSegmentX( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollSegmentX( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollSegmentY( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollSegmentY( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_isMultiLine( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isMultiLine( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_contentEditable( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_contentEditable( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_canHaveHTML( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canHaveHTML( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_viewLink( 
            /* [in] */ IHTMLDocument *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_viewLink( 
            /* [out][retval] */ IHTMLDocument **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frozen( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frozen( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElementDefaultsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElementDefaults * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElementDefaults * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElementDefaults * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElementDefaults * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElementDefaults * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElementDefaults * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElementDefaults * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_style )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ IHTMLStyle **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tabStop )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tabStop )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_viewInheritStyle )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_viewInheritStyle )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_viewMasterTab )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_viewMasterTab )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollSegmentX )( 
            IHTMLElementDefaults * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollSegmentX )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollSegmentY )( 
            IHTMLElementDefaults * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollSegmentY )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_isMultiLine )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isMultiLine )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_contentEditable )( 
            IHTMLElementDefaults * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_contentEditable )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_canHaveHTML )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canHaveHTML )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_viewLink )( 
            IHTMLElementDefaults * This,
            /* [in] */ IHTMLDocument *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_viewLink )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ IHTMLDocument **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frozen )( 
            IHTMLElementDefaults * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frozen )( 
            IHTMLElementDefaults * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLElementDefaultsVtbl;

    interface IHTMLElementDefaults
    {
        CONST_VTBL struct IHTMLElementDefaultsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElementDefaults_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElementDefaults_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElementDefaults_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElementDefaults_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElementDefaults_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElementDefaults_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElementDefaults_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElementDefaults_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IHTMLElementDefaults_put_tabStop(This,v)	\
    (This)->lpVtbl -> put_tabStop(This,v)

#define IHTMLElementDefaults_get_tabStop(This,p)	\
    (This)->lpVtbl -> get_tabStop(This,p)

#define IHTMLElementDefaults_put_viewInheritStyle(This,v)	\
    (This)->lpVtbl -> put_viewInheritStyle(This,v)

#define IHTMLElementDefaults_get_viewInheritStyle(This,p)	\
    (This)->lpVtbl -> get_viewInheritStyle(This,p)

#define IHTMLElementDefaults_put_viewMasterTab(This,v)	\
    (This)->lpVtbl -> put_viewMasterTab(This,v)

#define IHTMLElementDefaults_get_viewMasterTab(This,p)	\
    (This)->lpVtbl -> get_viewMasterTab(This,p)

#define IHTMLElementDefaults_put_scrollSegmentX(This,v)	\
    (This)->lpVtbl -> put_scrollSegmentX(This,v)

#define IHTMLElementDefaults_get_scrollSegmentX(This,p)	\
    (This)->lpVtbl -> get_scrollSegmentX(This,p)

#define IHTMLElementDefaults_put_scrollSegmentY(This,v)	\
    (This)->lpVtbl -> put_scrollSegmentY(This,v)

#define IHTMLElementDefaults_get_scrollSegmentY(This,p)	\
    (This)->lpVtbl -> get_scrollSegmentY(This,p)

#define IHTMLElementDefaults_put_isMultiLine(This,v)	\
    (This)->lpVtbl -> put_isMultiLine(This,v)

#define IHTMLElementDefaults_get_isMultiLine(This,p)	\
    (This)->lpVtbl -> get_isMultiLine(This,p)

#define IHTMLElementDefaults_put_contentEditable(This,v)	\
    (This)->lpVtbl -> put_contentEditable(This,v)

#define IHTMLElementDefaults_get_contentEditable(This,p)	\
    (This)->lpVtbl -> get_contentEditable(This,p)

#define IHTMLElementDefaults_put_canHaveHTML(This,v)	\
    (This)->lpVtbl -> put_canHaveHTML(This,v)

#define IHTMLElementDefaults_get_canHaveHTML(This,p)	\
    (This)->lpVtbl -> get_canHaveHTML(This,p)

#define IHTMLElementDefaults_putref_viewLink(This,v)	\
    (This)->lpVtbl -> putref_viewLink(This,v)

#define IHTMLElementDefaults_get_viewLink(This,p)	\
    (This)->lpVtbl -> get_viewLink(This,p)

#define IHTMLElementDefaults_put_frozen(This,v)	\
    (This)->lpVtbl -> put_frozen(This,v)

#define IHTMLElementDefaults_get_frozen(This,p)	\
    (This)->lpVtbl -> get_frozen(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_style_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ IHTMLStyle **p);


void __RPC_STUB IHTMLElementDefaults_get_style_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_tabStop_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_tabStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_tabStop_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_tabStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_viewInheritStyle_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_viewInheritStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_viewInheritStyle_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_viewInheritStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_viewMasterTab_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_viewMasterTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_viewMasterTab_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_viewMasterTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_scrollSegmentX_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLElementDefaults_put_scrollSegmentX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_scrollSegmentX_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElementDefaults_get_scrollSegmentX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_scrollSegmentY_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLElementDefaults_put_scrollSegmentY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_scrollSegmentY_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLElementDefaults_get_scrollSegmentY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_isMultiLine_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_isMultiLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_isMultiLine_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_isMultiLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_contentEditable_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLElementDefaults_put_contentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_contentEditable_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLElementDefaults_get_contentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_canHaveHTML_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_canHaveHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_canHaveHTML_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_canHaveHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_putref_viewLink_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ IHTMLDocument *v);


void __RPC_STUB IHTMLElementDefaults_putref_viewLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_viewLink_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ IHTMLDocument **p);


void __RPC_STUB IHTMLElementDefaults_get_viewLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_put_frozen_Proxy( 
    IHTMLElementDefaults * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLElementDefaults_put_frozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLElementDefaults_get_frozen_Proxy( 
    IHTMLElementDefaults * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLElementDefaults_get_frozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElementDefaults_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDefaults_DISPINTERFACE_DEFINED__
#define __DispHTMLDefaults_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDefaults */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDefaults;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f58c-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDefaults : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDefaultsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDefaults * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDefaults * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDefaults * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDefaults * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDefaults * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDefaults * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDefaults * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDefaultsVtbl;

    interface DispHTMLDefaults
    {
        CONST_VTBL struct DispHTMLDefaultsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDefaults_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDefaults_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDefaults_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDefaults_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDefaults_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDefaults_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDefaults_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDefaults_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDefaults;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f6c8-98b5-11cf-bb82-00aa00bdce0b")
HTMLDefaults;
#endif

#ifndef __IHTCDefaultDispatch_INTERFACE_DEFINED__
#define __IHTCDefaultDispatch_INTERFACE_DEFINED__

/* interface IHTCDefaultDispatch */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCDefaultDispatch;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4fd-98b5-11cf-bb82-00aa00bdce0b")
    IHTCDefaultDispatch : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_element( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createEventObject( 
            /* [out][retval] */ IHTMLEventObj **eventObj) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_defaults( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_document( 
            /* [out][retval] */ IDispatch **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCDefaultDispatchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCDefaultDispatch * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCDefaultDispatch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCDefaultDispatch * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCDefaultDispatch * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCDefaultDispatch * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCDefaultDispatch * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCDefaultDispatch * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_element )( 
            IHTCDefaultDispatch * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createEventObject )( 
            IHTCDefaultDispatch * This,
            /* [out][retval] */ IHTMLEventObj **eventObj);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaults )( 
            IHTCDefaultDispatch * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_document )( 
            IHTCDefaultDispatch * This,
            /* [out][retval] */ IDispatch **p);
        
        END_INTERFACE
    } IHTCDefaultDispatchVtbl;

    interface IHTCDefaultDispatch
    {
        CONST_VTBL struct IHTCDefaultDispatchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCDefaultDispatch_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCDefaultDispatch_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCDefaultDispatch_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCDefaultDispatch_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCDefaultDispatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCDefaultDispatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCDefaultDispatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCDefaultDispatch_get_element(This,p)	\
    (This)->lpVtbl -> get_element(This,p)

#define IHTCDefaultDispatch_createEventObject(This,eventObj)	\
    (This)->lpVtbl -> createEventObject(This,eventObj)

#define IHTCDefaultDispatch_get_defaults(This,p)	\
    (This)->lpVtbl -> get_defaults(This,p)

#define IHTCDefaultDispatch_get_document(This,p)	\
    (This)->lpVtbl -> get_document(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTCDefaultDispatch_get_element_Proxy( 
    IHTCDefaultDispatch * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTCDefaultDispatch_get_element_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTCDefaultDispatch_createEventObject_Proxy( 
    IHTCDefaultDispatch * This,
    /* [out][retval] */ IHTMLEventObj **eventObj);


void __RPC_STUB IHTCDefaultDispatch_createEventObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTCDefaultDispatch_get_defaults_Proxy( 
    IHTCDefaultDispatch * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTCDefaultDispatch_get_defaults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTCDefaultDispatch_get_document_Proxy( 
    IHTCDefaultDispatch * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTCDefaultDispatch_get_document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCDefaultDispatch_INTERFACE_DEFINED__ */


#ifndef __IHTCPropertyBehavior_INTERFACE_DEFINED__
#define __IHTCPropertyBehavior_INTERFACE_DEFINED__

/* interface IHTCPropertyBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCPropertyBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5df-98b5-11cf-bb82-00aa00bdce0b")
    IHTCPropertyBehavior : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fireChange( void) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCPropertyBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCPropertyBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCPropertyBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCPropertyBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCPropertyBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCPropertyBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCPropertyBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCPropertyBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fireChange )( 
            IHTCPropertyBehavior * This);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTCPropertyBehavior * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTCPropertyBehavior * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTCPropertyBehaviorVtbl;

    interface IHTCPropertyBehavior
    {
        CONST_VTBL struct IHTCPropertyBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCPropertyBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCPropertyBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCPropertyBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCPropertyBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCPropertyBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCPropertyBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCPropertyBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCPropertyBehavior_fireChange(This)	\
    (This)->lpVtbl -> fireChange(This)

#define IHTCPropertyBehavior_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTCPropertyBehavior_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTCPropertyBehavior_fireChange_Proxy( 
    IHTCPropertyBehavior * This);


void __RPC_STUB IHTCPropertyBehavior_fireChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTCPropertyBehavior_put_value_Proxy( 
    IHTCPropertyBehavior * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTCPropertyBehavior_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTCPropertyBehavior_get_value_Proxy( 
    IHTCPropertyBehavior * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTCPropertyBehavior_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCPropertyBehavior_INTERFACE_DEFINED__ */


#ifndef __IHTCMethodBehavior_INTERFACE_DEFINED__
#define __IHTCMethodBehavior_INTERFACE_DEFINED__

/* interface IHTCMethodBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCMethodBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f631-98b5-11cf-bb82-00aa00bdce0b")
    IHTCMethodBehavior : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTCMethodBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCMethodBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCMethodBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCMethodBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCMethodBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCMethodBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCMethodBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCMethodBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTCMethodBehaviorVtbl;

    interface IHTCMethodBehavior
    {
        CONST_VTBL struct IHTCMethodBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCMethodBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCMethodBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCMethodBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCMethodBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCMethodBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCMethodBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCMethodBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTCMethodBehavior_INTERFACE_DEFINED__ */


#ifndef __IHTCEventBehavior_INTERFACE_DEFINED__
#define __IHTCEventBehavior_INTERFACE_DEFINED__

/* interface IHTCEventBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCEventBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4ff-98b5-11cf-bb82-00aa00bdce0b")
    IHTCEventBehavior : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fire( 
            /* [in] */ IHTMLEventObj *pvar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCEventBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCEventBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCEventBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCEventBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCEventBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCEventBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCEventBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCEventBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fire )( 
            IHTCEventBehavior * This,
            /* [in] */ IHTMLEventObj *pvar);
        
        END_INTERFACE
    } IHTCEventBehaviorVtbl;

    interface IHTCEventBehavior
    {
        CONST_VTBL struct IHTCEventBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCEventBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCEventBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCEventBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCEventBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCEventBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCEventBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCEventBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCEventBehavior_fire(This,pvar)	\
    (This)->lpVtbl -> fire(This,pvar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTCEventBehavior_fire_Proxy( 
    IHTCEventBehavior * This,
    /* [in] */ IHTMLEventObj *pvar);


void __RPC_STUB IHTCEventBehavior_fire_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCEventBehavior_INTERFACE_DEFINED__ */


#ifndef __IHTCAttachBehavior_INTERFACE_DEFINED__
#define __IHTCAttachBehavior_INTERFACE_DEFINED__

/* interface IHTCAttachBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCAttachBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5f4-98b5-11cf-bb82-00aa00bdce0b")
    IHTCAttachBehavior : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fireEvent( 
            /* [in] */ IDispatch *evt) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE detachEvent( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCAttachBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCAttachBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCAttachBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCAttachBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCAttachBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCAttachBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCAttachBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCAttachBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fireEvent )( 
            IHTCAttachBehavior * This,
            /* [in] */ IDispatch *evt);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *detachEvent )( 
            IHTCAttachBehavior * This);
        
        END_INTERFACE
    } IHTCAttachBehaviorVtbl;

    interface IHTCAttachBehavior
    {
        CONST_VTBL struct IHTCAttachBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCAttachBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCAttachBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCAttachBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCAttachBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCAttachBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCAttachBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCAttachBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCAttachBehavior_fireEvent(This,evt)	\
    (This)->lpVtbl -> fireEvent(This,evt)

#define IHTCAttachBehavior_detachEvent(This)	\
    (This)->lpVtbl -> detachEvent(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTCAttachBehavior_fireEvent_Proxy( 
    IHTCAttachBehavior * This,
    /* [in] */ IDispatch *evt);


void __RPC_STUB IHTCAttachBehavior_fireEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTCAttachBehavior_detachEvent_Proxy( 
    IHTCAttachBehavior * This);


void __RPC_STUB IHTCAttachBehavior_detachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCAttachBehavior_INTERFACE_DEFINED__ */


#ifndef __IHTCAttachBehavior2_INTERFACE_DEFINED__
#define __IHTCAttachBehavior2_INTERFACE_DEFINED__

/* interface IHTCAttachBehavior2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCAttachBehavior2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f7eb-98b5-11cf-bb82-00aa00bdce0b")
    IHTCAttachBehavior2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fireEvent( 
            /* [in] */ VARIANT evt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCAttachBehavior2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCAttachBehavior2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCAttachBehavior2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCAttachBehavior2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCAttachBehavior2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCAttachBehavior2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCAttachBehavior2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCAttachBehavior2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fireEvent )( 
            IHTCAttachBehavior2 * This,
            /* [in] */ VARIANT evt);
        
        END_INTERFACE
    } IHTCAttachBehavior2Vtbl;

    interface IHTCAttachBehavior2
    {
        CONST_VTBL struct IHTCAttachBehavior2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCAttachBehavior2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCAttachBehavior2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCAttachBehavior2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCAttachBehavior2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCAttachBehavior2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCAttachBehavior2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCAttachBehavior2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCAttachBehavior2_fireEvent(This,evt)	\
    (This)->lpVtbl -> fireEvent(This,evt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTCAttachBehavior2_fireEvent_Proxy( 
    IHTCAttachBehavior2 * This,
    /* [in] */ VARIANT evt);


void __RPC_STUB IHTCAttachBehavior2_fireEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCAttachBehavior2_INTERFACE_DEFINED__ */


#ifndef __IHTCDescBehavior_INTERFACE_DEFINED__
#define __IHTCDescBehavior_INTERFACE_DEFINED__

/* interface IHTCDescBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTCDescBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5dc-98b5-11cf-bb82-00aa00bdce0b")
    IHTCDescBehavior : public IDispatch
    {
    public:
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_urn( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTCDescBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTCDescBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTCDescBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTCDescBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTCDescBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTCDescBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTCDescBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTCDescBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_urn )( 
            IHTCDescBehavior * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTCDescBehavior * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTCDescBehaviorVtbl;

    interface IHTCDescBehavior
    {
        CONST_VTBL struct IHTCDescBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTCDescBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTCDescBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTCDescBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTCDescBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTCDescBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTCDescBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTCDescBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTCDescBehavior_get_urn(This,p)	\
    (This)->lpVtbl -> get_urn(This,p)

#define IHTCDescBehavior_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTCDescBehavior_get_urn_Proxy( 
    IHTCDescBehavior * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTCDescBehavior_get_urn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTCDescBehavior_get_name_Proxy( 
    IHTCDescBehavior * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTCDescBehavior_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTCDescBehavior_INTERFACE_DEFINED__ */


#ifndef __DispHTCDefaultDispatch_DISPINTERFACE_DEFINED__
#define __DispHTCDefaultDispatch_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCDefaultDispatch */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCDefaultDispatch;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f573-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCDefaultDispatch : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCDefaultDispatchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCDefaultDispatch * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCDefaultDispatch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCDefaultDispatch * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCDefaultDispatch * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCDefaultDispatch * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCDefaultDispatch * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCDefaultDispatch * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCDefaultDispatchVtbl;

    interface DispHTCDefaultDispatch
    {
        CONST_VTBL struct DispHTCDefaultDispatchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCDefaultDispatch_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCDefaultDispatch_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCDefaultDispatch_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCDefaultDispatch_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCDefaultDispatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCDefaultDispatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCDefaultDispatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCDefaultDispatch_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCDefaultDispatch;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4fc-98b5-11cf-bb82-00aa00bdce0b")
HTCDefaultDispatch;
#endif

#ifndef __DispHTCPropertyBehavior_DISPINTERFACE_DEFINED__
#define __DispHTCPropertyBehavior_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCPropertyBehavior */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCPropertyBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f57f-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCPropertyBehavior : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCPropertyBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCPropertyBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCPropertyBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCPropertyBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCPropertyBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCPropertyBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCPropertyBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCPropertyBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCPropertyBehaviorVtbl;

    interface DispHTCPropertyBehavior
    {
        CONST_VTBL struct DispHTCPropertyBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCPropertyBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCPropertyBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCPropertyBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCPropertyBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCPropertyBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCPropertyBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCPropertyBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCPropertyBehavior_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCPropertyBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5de-98b5-11cf-bb82-00aa00bdce0b")
HTCPropertyBehavior;
#endif

#ifndef __DispHTCMethodBehavior_DISPINTERFACE_DEFINED__
#define __DispHTCMethodBehavior_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCMethodBehavior */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCMethodBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f587-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCMethodBehavior : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCMethodBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCMethodBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCMethodBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCMethodBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCMethodBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCMethodBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCMethodBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCMethodBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCMethodBehaviorVtbl;

    interface DispHTCMethodBehavior
    {
        CONST_VTBL struct DispHTCMethodBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCMethodBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCMethodBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCMethodBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCMethodBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCMethodBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCMethodBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCMethodBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCMethodBehavior_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCMethodBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f630-98b5-11cf-bb82-00aa00bdce0b")
HTCMethodBehavior;
#endif

#ifndef __DispHTCEventBehavior_DISPINTERFACE_DEFINED__
#define __DispHTCEventBehavior_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCEventBehavior */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCEventBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f574-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCEventBehavior : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCEventBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCEventBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCEventBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCEventBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCEventBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCEventBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCEventBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCEventBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCEventBehaviorVtbl;

    interface DispHTCEventBehavior
    {
        CONST_VTBL struct DispHTCEventBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCEventBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCEventBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCEventBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCEventBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCEventBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCEventBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCEventBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCEventBehavior_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCEventBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4fe-98b5-11cf-bb82-00aa00bdce0b")
HTCEventBehavior;
#endif

#ifndef __DispHTCAttachBehavior_DISPINTERFACE_DEFINED__
#define __DispHTCAttachBehavior_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCAttachBehavior */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCAttachBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f583-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCAttachBehavior : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCAttachBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCAttachBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCAttachBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCAttachBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCAttachBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCAttachBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCAttachBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCAttachBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCAttachBehaviorVtbl;

    interface DispHTCAttachBehavior
    {
        CONST_VTBL struct DispHTCAttachBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCAttachBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCAttachBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCAttachBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCAttachBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCAttachBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCAttachBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCAttachBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCAttachBehavior_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCAttachBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5f5-98b5-11cf-bb82-00aa00bdce0b")
HTCAttachBehavior;
#endif

#ifndef __DispHTCDescBehavior_DISPINTERFACE_DEFINED__
#define __DispHTCDescBehavior_DISPINTERFACE_DEFINED__

/* dispinterface DispHTCDescBehavior */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTCDescBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f57e-98b5-11cf-bb82-00aa00bdce0b")
    DispHTCDescBehavior : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTCDescBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTCDescBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTCDescBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTCDescBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTCDescBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTCDescBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTCDescBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTCDescBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTCDescBehaviorVtbl;

    interface DispHTCDescBehavior
    {
        CONST_VTBL struct DispHTCDescBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTCDescBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTCDescBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTCDescBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTCDescBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTCDescBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTCDescBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTCDescBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTCDescBehavior_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTCDescBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5dd-98b5-11cf-bb82-00aa00bdce0b")
HTCDescBehavior;
#endif

#ifndef __IHTMLUrnCollection_INTERFACE_DEFINED__
#define __IHTMLUrnCollection_INTERFACE_DEFINED__

/* interface IHTMLUrnCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLUrnCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5e2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLUrnCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ BSTR *ppUrn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLUrnCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLUrnCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLUrnCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLUrnCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLUrnCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLUrnCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLUrnCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLUrnCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLUrnCollection * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLUrnCollection * This,
            /* [in] */ long index,
            /* [out][retval] */ BSTR *ppUrn);
        
        END_INTERFACE
    } IHTMLUrnCollectionVtbl;

    interface IHTMLUrnCollection
    {
        CONST_VTBL struct IHTMLUrnCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLUrnCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLUrnCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLUrnCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLUrnCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLUrnCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLUrnCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLUrnCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLUrnCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLUrnCollection_item(This,index,ppUrn)	\
    (This)->lpVtbl -> item(This,index,ppUrn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLUrnCollection_get_length_Proxy( 
    IHTMLUrnCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLUrnCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLUrnCollection_item_Proxy( 
    IHTMLUrnCollection * This,
    /* [in] */ long index,
    /* [out][retval] */ BSTR *ppUrn);


void __RPC_STUB IHTMLUrnCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLUrnCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLUrnCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f580-98b5-11cf-bb82-00aa00bdce0b")
HTMLUrnCollection;
#endif

#ifndef __IHTMLGenericElement_INTERFACE_DEFINED__
#define __IHTMLGenericElement_INTERFACE_DEFINED__

/* interface IHTMLGenericElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLGenericElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4b7-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLGenericElement : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_recordset( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE namedRecordset( 
            /* [in] */ BSTR dataMember,
            /* [in][optional] */ VARIANT *hierarchy,
            /* [out][retval] */ IDispatch **ppRecordset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLGenericElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLGenericElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLGenericElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLGenericElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLGenericElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLGenericElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLGenericElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLGenericElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_recordset )( 
            IHTMLGenericElement * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *namedRecordset )( 
            IHTMLGenericElement * This,
            /* [in] */ BSTR dataMember,
            /* [in][optional] */ VARIANT *hierarchy,
            /* [out][retval] */ IDispatch **ppRecordset);
        
        END_INTERFACE
    } IHTMLGenericElementVtbl;

    interface IHTMLGenericElement
    {
        CONST_VTBL struct IHTMLGenericElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLGenericElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLGenericElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLGenericElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLGenericElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLGenericElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLGenericElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLGenericElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLGenericElement_get_recordset(This,p)	\
    (This)->lpVtbl -> get_recordset(This,p)

#define IHTMLGenericElement_namedRecordset(This,dataMember,hierarchy,ppRecordset)	\
    (This)->lpVtbl -> namedRecordset(This,dataMember,hierarchy,ppRecordset)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLGenericElement_get_recordset_Proxy( 
    IHTMLGenericElement * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLGenericElement_get_recordset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLGenericElement_namedRecordset_Proxy( 
    IHTMLGenericElement * This,
    /* [in] */ BSTR dataMember,
    /* [in][optional] */ VARIANT *hierarchy,
    /* [out][retval] */ IDispatch **ppRecordset);


void __RPC_STUB IHTMLGenericElement_namedRecordset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLGenericElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLGenericElement_DISPINTERFACE_DEFINED__
#define __DispHTMLGenericElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLGenericElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLGenericElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f563-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLGenericElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLGenericElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLGenericElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLGenericElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLGenericElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLGenericElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLGenericElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLGenericElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLGenericElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLGenericElementVtbl;

    interface DispHTMLGenericElement
    {
        CONST_VTBL struct DispHTMLGenericElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLGenericElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLGenericElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLGenericElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLGenericElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLGenericElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLGenericElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLGenericElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLGenericElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLGenericElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4b8-98b5-11cf-bb82-00aa00bdce0b")
HTMLGenericElement;
#endif

#ifndef __IHTMLStyleSheetRule_INTERFACE_DEFINED__
#define __IHTMLStyleSheetRule_INTERFACE_DEFINED__

/* interface IHTMLStyleSheetRule */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheetRule;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f357-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheetRule : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectorText( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectorText( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE get_style( 
            /* [out][retval] */ IHTMLRuleStyle **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readOnly( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetRuleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheetRule * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheetRule * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheetRule * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheetRule * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheetRule * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheetRule * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheetRule * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectorText )( 
            IHTMLStyleSheetRule * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectorText )( 
            IHTMLStyleSheetRule * This,
            /* [out][retval] */ BSTR *p);
        
        /* [nonbrowsable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_style )( 
            IHTMLStyleSheetRule * This,
            /* [out][retval] */ IHTMLRuleStyle **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readOnly )( 
            IHTMLStyleSheetRule * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLStyleSheetRuleVtbl;

    interface IHTMLStyleSheetRule
    {
        CONST_VTBL struct IHTMLStyleSheetRuleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheetRule_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheetRule_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheetRule_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheetRule_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheetRule_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheetRule_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheetRule_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheetRule_put_selectorText(This,v)	\
    (This)->lpVtbl -> put_selectorText(This,v)

#define IHTMLStyleSheetRule_get_selectorText(This,p)	\
    (This)->lpVtbl -> get_selectorText(This,p)

#define IHTMLStyleSheetRule_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IHTMLStyleSheetRule_get_readOnly(This,p)	\
    (This)->lpVtbl -> get_readOnly(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRule_put_selectorText_Proxy( 
    IHTMLStyleSheetRule * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLStyleSheetRule_put_selectorText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRule_get_selectorText_Proxy( 
    IHTMLStyleSheetRule * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheetRule_get_selectorText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRule_get_style_Proxy( 
    IHTMLStyleSheetRule * This,
    /* [out][retval] */ IHTMLRuleStyle **p);


void __RPC_STUB IHTMLStyleSheetRule_get_style_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRule_get_readOnly_Proxy( 
    IHTMLStyleSheetRule * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLStyleSheetRule_get_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheetRule_INTERFACE_DEFINED__ */


#ifndef __IHTMLStyleSheetRulesCollection_INTERFACE_DEFINED__
#define __IHTMLStyleSheetRulesCollection_INTERFACE_DEFINED__

/* interface IHTMLStyleSheetRulesCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheetRulesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2e5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheetRulesCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ IHTMLStyleSheetRule **ppHTMLStyleSheetRule) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetRulesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheetRulesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheetRulesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLStyleSheetRulesCollection * This,
            /* [in] */ long index,
            /* [out][retval] */ IHTMLStyleSheetRule **ppHTMLStyleSheetRule);
        
        END_INTERFACE
    } IHTMLStyleSheetRulesCollectionVtbl;

    interface IHTMLStyleSheetRulesCollection
    {
        CONST_VTBL struct IHTMLStyleSheetRulesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheetRulesCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheetRulesCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheetRulesCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheetRulesCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheetRulesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheetRulesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheetRulesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheetRulesCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLStyleSheetRulesCollection_item(This,index,ppHTMLStyleSheetRule)	\
    (This)->lpVtbl -> item(This,index,ppHTMLStyleSheetRule)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRulesCollection_get_length_Proxy( 
    IHTMLStyleSheetRulesCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLStyleSheetRulesCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetRulesCollection_item_Proxy( 
    IHTMLStyleSheetRulesCollection * This,
    /* [in] */ long index,
    /* [out][retval] */ IHTMLStyleSheetRule **ppHTMLStyleSheetRule);


void __RPC_STUB IHTMLStyleSheetRulesCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheetRulesCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLStyleSheetRule;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f3ce-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetRule;
#endif

EXTERN_C const CLSID CLSID_HTMLStyleSheetRulesCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f3cd-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetRulesCollection;
#endif

#ifndef __IHTMLStyleSheetPage_INTERFACE_DEFINED__
#define __IHTMLStyleSheetPage_INTERFACE_DEFINED__

/* interface IHTMLStyleSheetPage */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheetPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f7ee-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheetPage : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selector( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pseudoClass( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheetPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheetPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheetPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheetPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheetPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheetPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheetPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selector )( 
            IHTMLStyleSheetPage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pseudoClass )( 
            IHTMLStyleSheetPage * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLStyleSheetPageVtbl;

    interface IHTMLStyleSheetPage
    {
        CONST_VTBL struct IHTMLStyleSheetPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheetPage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheetPage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheetPage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheetPage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheetPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheetPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheetPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheetPage_get_selector(This,p)	\
    (This)->lpVtbl -> get_selector(This,p)

#define IHTMLStyleSheetPage_get_pseudoClass(This,p)	\
    (This)->lpVtbl -> get_pseudoClass(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetPage_get_selector_Proxy( 
    IHTMLStyleSheetPage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheetPage_get_selector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetPage_get_pseudoClass_Proxy( 
    IHTMLStyleSheetPage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheetPage_get_pseudoClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheetPage_INTERFACE_DEFINED__ */


#ifndef __IHTMLStyleSheetPagesCollection_INTERFACE_DEFINED__
#define __IHTMLStyleSheetPagesCollection_INTERFACE_DEFINED__

/* interface IHTMLStyleSheetPagesCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheetPagesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f7f0-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheetPagesCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ IHTMLStyleSheetPage **ppHTMLStyleSheetPage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetPagesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheetPagesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheetPagesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLStyleSheetPagesCollection * This,
            /* [in] */ long index,
            /* [out][retval] */ IHTMLStyleSheetPage **ppHTMLStyleSheetPage);
        
        END_INTERFACE
    } IHTMLStyleSheetPagesCollectionVtbl;

    interface IHTMLStyleSheetPagesCollection
    {
        CONST_VTBL struct IHTMLStyleSheetPagesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheetPagesCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheetPagesCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheetPagesCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheetPagesCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheetPagesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheetPagesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheetPagesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheetPagesCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLStyleSheetPagesCollection_item(This,index,ppHTMLStyleSheetPage)	\
    (This)->lpVtbl -> item(This,index,ppHTMLStyleSheetPage)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetPagesCollection_get_length_Proxy( 
    IHTMLStyleSheetPagesCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLStyleSheetPagesCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetPagesCollection_item_Proxy( 
    IHTMLStyleSheetPagesCollection * This,
    /* [in] */ long index,
    /* [out][retval] */ IHTMLStyleSheetPage **ppHTMLStyleSheetPage);


void __RPC_STUB IHTMLStyleSheetPagesCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheetPagesCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLStyleSheetPage;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f7ef-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetPage;
#endif

EXTERN_C const CLSID CLSID_HTMLStyleSheetPagesCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f7f1-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetPagesCollection;
#endif

#ifndef __IHTMLStyleSheetsCollection_INTERFACE_DEFINED__
#define __IHTMLStyleSheetsCollection_INTERFACE_DEFINED__

/* interface IHTMLStyleSheetsCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheetsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f37e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheetsCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheetsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheetsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheetsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheetsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheetsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheetsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheetsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLStyleSheetsCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLStyleSheetsCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLStyleSheetsCollection * This,
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult);
        
        END_INTERFACE
    } IHTMLStyleSheetsCollectionVtbl;

    interface IHTMLStyleSheetsCollection
    {
        CONST_VTBL struct IHTMLStyleSheetsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheetsCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheetsCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheetsCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheetsCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheetsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheetsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheetsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheetsCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLStyleSheetsCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLStyleSheetsCollection_item(This,pvarIndex,pvarResult)	\
    (This)->lpVtbl -> item(This,pvarIndex,pvarResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetsCollection_get_length_Proxy( 
    IHTMLStyleSheetsCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLStyleSheetsCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetsCollection_get__newEnum_Proxy( 
    IHTMLStyleSheetsCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLStyleSheetsCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheetsCollection_item_Proxy( 
    IHTMLStyleSheetsCollection * This,
    /* [in] */ VARIANT *pvarIndex,
    /* [out][retval] */ VARIANT *pvarResult);


void __RPC_STUB IHTMLStyleSheetsCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheetsCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLStyleSheet_INTERFACE_DEFINED__
#define __IHTMLStyleSheet_INTERFACE_DEFINED__

/* interface IHTMLStyleSheet */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2e3-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheet : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parentStyleSheet( 
            /* [out][retval] */ IHTMLStyleSheet **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_owningElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readOnly( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_imports( 
            /* [out][retval] */ IHTMLStyleSheetsCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_id( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addImport( 
            /* [in] */ BSTR bstrURL,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plIndex) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addRule( 
            /* [in] */ BSTR bstrSelector,
            /* [in] */ BSTR bstrStyle,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plNewIndex) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeImport( 
            /* [in] */ long lIndex) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeRule( 
            /* [in] */ long lIndex) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_media( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_media( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cssText( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cssText( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rules( 
            /* [out][retval] */ IHTMLStyleSheetRulesCollection **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheet * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheet * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheet * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheet * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheet * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_title )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentStyleSheet )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ IHTMLStyleSheet **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_owningElement )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLStyleSheet * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readOnly )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imports )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ IHTMLStyleSheetsCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_id )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addImport )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR bstrURL,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plIndex);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addRule )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR bstrSelector,
            /* [in] */ BSTR bstrStyle,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plNewIndex);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeImport )( 
            IHTMLStyleSheet * This,
            /* [in] */ long lIndex);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeRule )( 
            IHTMLStyleSheet * This,
            /* [in] */ long lIndex);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_media )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_media )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cssText )( 
            IHTMLStyleSheet * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cssText )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rules )( 
            IHTMLStyleSheet * This,
            /* [out][retval] */ IHTMLStyleSheetRulesCollection **p);
        
        END_INTERFACE
    } IHTMLStyleSheetVtbl;

    interface IHTMLStyleSheet
    {
        CONST_VTBL struct IHTMLStyleSheetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheet_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheet_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheet_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheet_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheet_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IHTMLStyleSheet_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IHTMLStyleSheet_get_parentStyleSheet(This,p)	\
    (This)->lpVtbl -> get_parentStyleSheet(This,p)

#define IHTMLStyleSheet_get_owningElement(This,p)	\
    (This)->lpVtbl -> get_owningElement(This,p)

#define IHTMLStyleSheet_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLStyleSheet_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLStyleSheet_get_readOnly(This,p)	\
    (This)->lpVtbl -> get_readOnly(This,p)

#define IHTMLStyleSheet_get_imports(This,p)	\
    (This)->lpVtbl -> get_imports(This,p)

#define IHTMLStyleSheet_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLStyleSheet_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLStyleSheet_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLStyleSheet_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IHTMLStyleSheet_addImport(This,bstrURL,lIndex,plIndex)	\
    (This)->lpVtbl -> addImport(This,bstrURL,lIndex,plIndex)

#define IHTMLStyleSheet_addRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex)	\
    (This)->lpVtbl -> addRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex)

#define IHTMLStyleSheet_removeImport(This,lIndex)	\
    (This)->lpVtbl -> removeImport(This,lIndex)

#define IHTMLStyleSheet_removeRule(This,lIndex)	\
    (This)->lpVtbl -> removeRule(This,lIndex)

#define IHTMLStyleSheet_put_media(This,v)	\
    (This)->lpVtbl -> put_media(This,v)

#define IHTMLStyleSheet_get_media(This,p)	\
    (This)->lpVtbl -> get_media(This,p)

#define IHTMLStyleSheet_put_cssText(This,v)	\
    (This)->lpVtbl -> put_cssText(This,v)

#define IHTMLStyleSheet_get_cssText(This,p)	\
    (This)->lpVtbl -> get_cssText(This,p)

#define IHTMLStyleSheet_get_rules(This,p)	\
    (This)->lpVtbl -> get_rules(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_put_title_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLStyleSheet_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_title_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_parentStyleSheet_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ IHTMLStyleSheet **p);


void __RPC_STUB IHTMLStyleSheet_get_parentStyleSheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_owningElement_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLStyleSheet_get_owningElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_put_disabled_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLStyleSheet_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_disabled_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLStyleSheet_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_readOnly_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLStyleSheet_get_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_imports_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ IHTMLStyleSheetsCollection **p);


void __RPC_STUB IHTMLStyleSheet_get_imports_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_put_href_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLStyleSheet_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_href_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_type_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_id_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_id_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_addImport_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR bstrURL,
    /* [in][defaultvalue] */ long lIndex,
    /* [out][retval] */ long *plIndex);


void __RPC_STUB IHTMLStyleSheet_addImport_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_addRule_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR bstrSelector,
    /* [in] */ BSTR bstrStyle,
    /* [in][defaultvalue] */ long lIndex,
    /* [out][retval] */ long *plNewIndex);


void __RPC_STUB IHTMLStyleSheet_addRule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_removeImport_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ long lIndex);


void __RPC_STUB IHTMLStyleSheet_removeImport_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_removeRule_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ long lIndex);


void __RPC_STUB IHTMLStyleSheet_removeRule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_put_media_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLStyleSheet_put_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_media_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_put_cssText_Proxy( 
    IHTMLStyleSheet * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLStyleSheet_put_cssText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_cssText_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLStyleSheet_get_cssText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet_get_rules_Proxy( 
    IHTMLStyleSheet * This,
    /* [out][retval] */ IHTMLStyleSheetRulesCollection **p);


void __RPC_STUB IHTMLStyleSheet_get_rules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheet_INTERFACE_DEFINED__ */


#ifndef __IHTMLStyleSheet2_INTERFACE_DEFINED__
#define __IHTMLStyleSheet2_INTERFACE_DEFINED__

/* interface IHTMLStyleSheet2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLStyleSheet2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f3d1-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLStyleSheet2 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pages( 
            /* [out][retval] */ IHTMLStyleSheetPagesCollection **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addPageRule( 
            /* [in] */ BSTR bstrSelector,
            /* [in] */ BSTR bstrStyle,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plNewIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLStyleSheet2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLStyleSheet2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLStyleSheet2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLStyleSheet2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLStyleSheet2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLStyleSheet2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLStyleSheet2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLStyleSheet2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pages )( 
            IHTMLStyleSheet2 * This,
            /* [out][retval] */ IHTMLStyleSheetPagesCollection **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addPageRule )( 
            IHTMLStyleSheet2 * This,
            /* [in] */ BSTR bstrSelector,
            /* [in] */ BSTR bstrStyle,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ long *plNewIndex);
        
        END_INTERFACE
    } IHTMLStyleSheet2Vtbl;

    interface IHTMLStyleSheet2
    {
        CONST_VTBL struct IHTMLStyleSheet2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLStyleSheet2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLStyleSheet2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLStyleSheet2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLStyleSheet2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLStyleSheet2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLStyleSheet2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLStyleSheet2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLStyleSheet2_get_pages(This,p)	\
    (This)->lpVtbl -> get_pages(This,p)

#define IHTMLStyleSheet2_addPageRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex)	\
    (This)->lpVtbl -> addPageRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet2_get_pages_Proxy( 
    IHTMLStyleSheet2 * This,
    /* [out][retval] */ IHTMLStyleSheetPagesCollection **p);


void __RPC_STUB IHTMLStyleSheet2_get_pages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLStyleSheet2_addPageRule_Proxy( 
    IHTMLStyleSheet2 * This,
    /* [in] */ BSTR bstrSelector,
    /* [in] */ BSTR bstrStyle,
    /* [in][defaultvalue] */ long lIndex,
    /* [out][retval] */ long *plNewIndex);


void __RPC_STUB IHTMLStyleSheet2_addPageRule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLStyleSheet2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLStyleSheet_DISPINTERFACE_DEFINED__
#define __DispHTMLStyleSheet_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLStyleSheet */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLStyleSheet;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f58d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLStyleSheet : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLStyleSheetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLStyleSheet * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLStyleSheet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLStyleSheet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLStyleSheet * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLStyleSheet * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLStyleSheet * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLStyleSheet * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLStyleSheetVtbl;

    interface DispHTMLStyleSheet
    {
        CONST_VTBL struct DispHTMLStyleSheetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLStyleSheet_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLStyleSheet_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLStyleSheet_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLStyleSheet_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLStyleSheet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLStyleSheet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLStyleSheet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLStyleSheet_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLStyleSheet;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2e4-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheet;
#endif

EXTERN_C const CLSID CLSID_HTMLStyleSheetsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f37f-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetsCollection;
#endif

#ifndef __HTMLLinkElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLLinkElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLLinkElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLLinkElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61d-98b5-11cf-bb82-00aa00bdce0b")
    HTMLLinkElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLLinkElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLLinkElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLLinkElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLLinkElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLLinkElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLLinkElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLLinkElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLLinkElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLLinkElementEvents2Vtbl;

    interface HTMLLinkElementEvents2
    {
        CONST_VTBL struct HTMLLinkElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLLinkElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLLinkElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLLinkElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLLinkElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLLinkElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLLinkElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLLinkElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLLinkElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLLinkElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLLinkElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLLinkElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLLinkElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f3cc-98b5-11cf-bb82-00aa00bdce0b")
    HTMLLinkElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLLinkElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLLinkElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLLinkElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLLinkElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLLinkElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLLinkElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLLinkElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLLinkElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLLinkElementEventsVtbl;

    interface HTMLLinkElementEvents
    {
        CONST_VTBL struct HTMLLinkElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLLinkElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLLinkElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLLinkElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLLinkElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLLinkElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLLinkElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLLinkElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLLinkElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLLinkElement_INTERFACE_DEFINED__
#define __IHTMLLinkElement_INTERFACE_DEFINED__

/* interface IHTMLLinkElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLinkElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f205-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLinkElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rel( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rel( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rev( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rev( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreadystatechange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onreadystatechange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerror( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerror( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_styleSheet( 
            /* [out][retval] */ IHTMLStyleSheet **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_media( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_media( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLinkElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLinkElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLinkElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLinkElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLinkElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLinkElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLinkElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLinkElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLLinkElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rel )( 
            IHTMLLinkElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rel )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rev )( 
            IHTMLLinkElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rev )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLLinkElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IHTMLLinkElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLLinkElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerror )( 
            IHTMLLinkElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerror )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_styleSheet )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ IHTMLStyleSheet **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLLinkElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_media )( 
            IHTMLLinkElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_media )( 
            IHTMLLinkElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLLinkElementVtbl;

    interface IHTMLLinkElement
    {
        CONST_VTBL struct IHTMLLinkElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLinkElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLinkElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLinkElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLinkElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLinkElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLinkElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLinkElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLinkElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLLinkElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLLinkElement_put_rel(This,v)	\
    (This)->lpVtbl -> put_rel(This,v)

#define IHTMLLinkElement_get_rel(This,p)	\
    (This)->lpVtbl -> get_rel(This,p)

#define IHTMLLinkElement_put_rev(This,v)	\
    (This)->lpVtbl -> put_rev(This,v)

#define IHTMLLinkElement_get_rev(This,p)	\
    (This)->lpVtbl -> get_rev(This,p)

#define IHTMLLinkElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLLinkElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLLinkElement_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLLinkElement_put_onreadystatechange(This,v)	\
    (This)->lpVtbl -> put_onreadystatechange(This,v)

#define IHTMLLinkElement_get_onreadystatechange(This,p)	\
    (This)->lpVtbl -> get_onreadystatechange(This,p)

#define IHTMLLinkElement_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLLinkElement_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLLinkElement_put_onerror(This,v)	\
    (This)->lpVtbl -> put_onerror(This,v)

#define IHTMLLinkElement_get_onerror(This,p)	\
    (This)->lpVtbl -> get_onerror(This,p)

#define IHTMLLinkElement_get_styleSheet(This,p)	\
    (This)->lpVtbl -> get_styleSheet(This,p)

#define IHTMLLinkElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLLinkElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLLinkElement_put_media(This,v)	\
    (This)->lpVtbl -> put_media(This,v)

#define IHTMLLinkElement_get_media(This,p)	\
    (This)->lpVtbl -> get_media(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_href_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_href_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_rel_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement_put_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_rel_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_rev_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement_put_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_rev_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_type_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_type_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_readyState_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_onreadystatechange_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLLinkElement_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_onreadystatechange_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLLinkElement_get_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_onload_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLLinkElement_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_onload_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLLinkElement_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_onerror_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLLinkElement_put_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_onerror_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLLinkElement_get_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_styleSheet_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ IHTMLStyleSheet **p);


void __RPC_STUB IHTMLLinkElement_get_styleSheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_disabled_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLLinkElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_disabled_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLLinkElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_put_media_Proxy( 
    IHTMLLinkElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement_put_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement_get_media_Proxy( 
    IHTMLLinkElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement_get_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLinkElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLLinkElement2_INTERFACE_DEFINED__
#define __IHTMLLinkElement2_INTERFACE_DEFINED__

/* interface IHTMLLinkElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLinkElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4e5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLinkElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLinkElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLinkElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLinkElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLinkElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLinkElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLinkElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLinkElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLinkElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_target )( 
            IHTMLLinkElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IHTMLLinkElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLLinkElement2Vtbl;

    interface IHTMLLinkElement2
    {
        CONST_VTBL struct IHTMLLinkElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLinkElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLinkElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLinkElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLinkElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLinkElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLinkElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLinkElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLinkElement2_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IHTMLLinkElement2_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement2_put_target_Proxy( 
    IHTMLLinkElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement2_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement2_get_target_Proxy( 
    IHTMLLinkElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement2_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLinkElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLLinkElement3_INTERFACE_DEFINED__
#define __IHTMLLinkElement3_INTERFACE_DEFINED__

/* interface IHTMLLinkElement3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLinkElement3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f81e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLinkElement3 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_charset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_charset( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hreflang( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hreflang( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLinkElement3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLinkElement3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLinkElement3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLinkElement3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLinkElement3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLinkElement3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLinkElement3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLinkElement3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_charset )( 
            IHTMLLinkElement3 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_charset )( 
            IHTMLLinkElement3 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hreflang )( 
            IHTMLLinkElement3 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hreflang )( 
            IHTMLLinkElement3 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLLinkElement3Vtbl;

    interface IHTMLLinkElement3
    {
        CONST_VTBL struct IHTMLLinkElement3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLinkElement3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLinkElement3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLinkElement3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLinkElement3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLinkElement3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLinkElement3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLinkElement3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLinkElement3_put_charset(This,v)	\
    (This)->lpVtbl -> put_charset(This,v)

#define IHTMLLinkElement3_get_charset(This,p)	\
    (This)->lpVtbl -> get_charset(This,p)

#define IHTMLLinkElement3_put_hreflang(This,v)	\
    (This)->lpVtbl -> put_hreflang(This,v)

#define IHTMLLinkElement3_get_hreflang(This,p)	\
    (This)->lpVtbl -> get_hreflang(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement3_put_charset_Proxy( 
    IHTMLLinkElement3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement3_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement3_get_charset_Proxy( 
    IHTMLLinkElement3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement3_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement3_put_hreflang_Proxy( 
    IHTMLLinkElement3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLinkElement3_put_hreflang_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLinkElement3_get_hreflang_Proxy( 
    IHTMLLinkElement3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLinkElement3_get_hreflang_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLinkElement3_INTERFACE_DEFINED__ */


#ifndef __DispHTMLLinkElement_DISPINTERFACE_DEFINED__
#define __DispHTMLLinkElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLLinkElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLLinkElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f524-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLLinkElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLLinkElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLLinkElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLLinkElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLLinkElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLLinkElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLLinkElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLLinkElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLLinkElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLLinkElementVtbl;

    interface DispHTMLLinkElement
    {
        CONST_VTBL struct DispHTMLLinkElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLLinkElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLLinkElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLLinkElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLLinkElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLLinkElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLLinkElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLLinkElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLLinkElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLLinkElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f277-98b5-11cf-bb82-00aa00bdce0b")
HTMLLinkElement;
#endif

#ifndef __IHTMLTxtRange_INTERFACE_DEFINED__
#define __IHTMLTxtRange_INTERFACE_DEFINED__

/* interface IHTMLTxtRange */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTxtRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f220-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTxtRange : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlText( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE parentElement( 
            /* [out][retval] */ IHTMLElement **parent) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE duplicate( 
            /* [out][retval] */ IHTMLTxtRange **Duplicate) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE inRange( 
            /* [in] */ IHTMLTxtRange *Range,
            /* [out][retval] */ VARIANT_BOOL *InRange) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE isEqual( 
            /* [in] */ IHTMLTxtRange *Range,
            /* [out][retval] */ VARIANT_BOOL *IsEqual) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in][defaultvalue] */ VARIANT_BOOL fStart = -1) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE collapse( 
            /* [in][defaultvalue] */ VARIANT_BOOL Start = -1) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE expand( 
            /* [in] */ BSTR Unit,
            /* [out][retval] */ VARIANT_BOOL *Success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE move( 
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveStart( 
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveEnd( 
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE pasteHTML( 
            /* [in] */ BSTR html) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveToElementText( 
            /* [in] */ IHTMLElement *element) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setEndPoint( 
            /* [in] */ BSTR how,
            /* [in] */ IHTMLTxtRange *SourceRange) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE compareEndPoints( 
            /* [in] */ BSTR how,
            /* [in] */ IHTMLTxtRange *SourceRange,
            /* [out][retval] */ long *ret) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE findText( 
            /* [in] */ BSTR String,
            /* [in][defaultvalue] */ long count,
            /* [in][defaultvalue] */ long Flags,
            /* [out][retval] */ VARIANT_BOOL *Success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveToPoint( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getBookmark( 
            /* [out][retval] */ BSTR *Boolmark) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveToBookmark( 
            /* [in] */ BSTR Bookmark,
            /* [out][retval] */ VARIANT_BOOL *Success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandSupported( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandEnabled( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandState( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandIndeterm( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandText( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandValue( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommandShowHelp( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTxtRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTxtRange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTxtRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTxtRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTxtRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTxtRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTxtRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTxtRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlText )( 
            IHTMLTxtRange * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IHTMLTxtRange * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentElement )( 
            IHTMLTxtRange * This,
            /* [out][retval] */ IHTMLElement **parent);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *duplicate )( 
            IHTMLTxtRange * This,
            /* [out][retval] */ IHTMLTxtRange **Duplicate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *inRange )( 
            IHTMLTxtRange * This,
            /* [in] */ IHTMLTxtRange *Range,
            /* [out][retval] */ VARIANT_BOOL *InRange);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *isEqual )( 
            IHTMLTxtRange * This,
            /* [in] */ IHTMLTxtRange *Range,
            /* [out][retval] */ VARIANT_BOOL *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *scrollIntoView )( 
            IHTMLTxtRange * This,
            /* [in][defaultvalue] */ VARIANT_BOOL fStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *collapse )( 
            IHTMLTxtRange * This,
            /* [in][defaultvalue] */ VARIANT_BOOL Start);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *expand )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR Unit,
            /* [out][retval] */ VARIANT_BOOL *Success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *move )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveStart )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveEnd )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLTxtRange * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pasteHTML )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR html);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveToElementText )( 
            IHTMLTxtRange * This,
            /* [in] */ IHTMLElement *element);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setEndPoint )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR how,
            /* [in] */ IHTMLTxtRange *SourceRange);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *compareEndPoints )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR how,
            /* [in] */ IHTMLTxtRange *SourceRange,
            /* [out][retval] */ long *ret);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *findText )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR String,
            /* [in][defaultvalue] */ long count,
            /* [in][defaultvalue] */ long Flags,
            /* [out][retval] */ VARIANT_BOOL *Success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveToPoint )( 
            IHTMLTxtRange * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getBookmark )( 
            IHTMLTxtRange * This,
            /* [out][retval] */ BSTR *Boolmark);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveToBookmark )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR Bookmark,
            /* [out][retval] */ VARIANT_BOOL *Success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandState )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandText )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandValue )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommand )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )( 
            IHTMLTxtRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        END_INTERFACE
    } IHTMLTxtRangeVtbl;

    interface IHTMLTxtRange
    {
        CONST_VTBL struct IHTMLTxtRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTxtRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTxtRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTxtRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTxtRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTxtRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTxtRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTxtRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTxtRange_get_htmlText(This,p)	\
    (This)->lpVtbl -> get_htmlText(This,p)

#define IHTMLTxtRange_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IHTMLTxtRange_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IHTMLTxtRange_parentElement(This,parent)	\
    (This)->lpVtbl -> parentElement(This,parent)

#define IHTMLTxtRange_duplicate(This,Duplicate)	\
    (This)->lpVtbl -> duplicate(This,Duplicate)

#define IHTMLTxtRange_inRange(This,Range,InRange)	\
    (This)->lpVtbl -> inRange(This,Range,InRange)

#define IHTMLTxtRange_isEqual(This,Range,IsEqual)	\
    (This)->lpVtbl -> isEqual(This,Range,IsEqual)

#define IHTMLTxtRange_scrollIntoView(This,fStart)	\
    (This)->lpVtbl -> scrollIntoView(This,fStart)

#define IHTMLTxtRange_collapse(This,Start)	\
    (This)->lpVtbl -> collapse(This,Start)

#define IHTMLTxtRange_expand(This,Unit,Success)	\
    (This)->lpVtbl -> expand(This,Unit,Success)

#define IHTMLTxtRange_move(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> move(This,Unit,Count,ActualCount)

#define IHTMLTxtRange_moveStart(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> moveStart(This,Unit,Count,ActualCount)

#define IHTMLTxtRange_moveEnd(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> moveEnd(This,Unit,Count,ActualCount)

#define IHTMLTxtRange_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLTxtRange_pasteHTML(This,html)	\
    (This)->lpVtbl -> pasteHTML(This,html)

#define IHTMLTxtRange_moveToElementText(This,element)	\
    (This)->lpVtbl -> moveToElementText(This,element)

#define IHTMLTxtRange_setEndPoint(This,how,SourceRange)	\
    (This)->lpVtbl -> setEndPoint(This,how,SourceRange)

#define IHTMLTxtRange_compareEndPoints(This,how,SourceRange,ret)	\
    (This)->lpVtbl -> compareEndPoints(This,how,SourceRange,ret)

#define IHTMLTxtRange_findText(This,String,count,Flags,Success)	\
    (This)->lpVtbl -> findText(This,String,count,Flags,Success)

#define IHTMLTxtRange_moveToPoint(This,x,y)	\
    (This)->lpVtbl -> moveToPoint(This,x,y)

#define IHTMLTxtRange_getBookmark(This,Boolmark)	\
    (This)->lpVtbl -> getBookmark(This,Boolmark)

#define IHTMLTxtRange_moveToBookmark(This,Bookmark,Success)	\
    (This)->lpVtbl -> moveToBookmark(This,Bookmark,Success)

#define IHTMLTxtRange_queryCommandSupported(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet)

#define IHTMLTxtRange_queryCommandEnabled(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet)

#define IHTMLTxtRange_queryCommandState(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet)

#define IHTMLTxtRange_queryCommandIndeterm(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet)

#define IHTMLTxtRange_queryCommandText(This,cmdID,pcmdText)	\
    (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText)

#define IHTMLTxtRange_queryCommandValue(This,cmdID,pcmdValue)	\
    (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue)

#define IHTMLTxtRange_execCommand(This,cmdID,showUI,value,pfRet)	\
    (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet)

#define IHTMLTxtRange_execCommandShowHelp(This,cmdID,pfRet)	\
    (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_get_htmlText_Proxy( 
    IHTMLTxtRange * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTxtRange_get_htmlText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_put_text_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTxtRange_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_get_text_Proxy( 
    IHTMLTxtRange * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTxtRange_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_parentElement_Proxy( 
    IHTMLTxtRange * This,
    /* [out][retval] */ IHTMLElement **parent);


void __RPC_STUB IHTMLTxtRange_parentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_duplicate_Proxy( 
    IHTMLTxtRange * This,
    /* [out][retval] */ IHTMLTxtRange **Duplicate);


void __RPC_STUB IHTMLTxtRange_duplicate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_inRange_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ IHTMLTxtRange *Range,
    /* [out][retval] */ VARIANT_BOOL *InRange);


void __RPC_STUB IHTMLTxtRange_inRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_isEqual_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ IHTMLTxtRange *Range,
    /* [out][retval] */ VARIANT_BOOL *IsEqual);


void __RPC_STUB IHTMLTxtRange_isEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_scrollIntoView_Proxy( 
    IHTMLTxtRange * This,
    /* [in][defaultvalue] */ VARIANT_BOOL fStart);


void __RPC_STUB IHTMLTxtRange_scrollIntoView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_collapse_Proxy( 
    IHTMLTxtRange * This,
    /* [in][defaultvalue] */ VARIANT_BOOL Start);


void __RPC_STUB IHTMLTxtRange_collapse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_expand_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR Unit,
    /* [out][retval] */ VARIANT_BOOL *Success);


void __RPC_STUB IHTMLTxtRange_expand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_move_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval] */ long *ActualCount);


void __RPC_STUB IHTMLTxtRange_move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_moveStart_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval] */ long *ActualCount);


void __RPC_STUB IHTMLTxtRange_moveStart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_moveEnd_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval] */ long *ActualCount);


void __RPC_STUB IHTMLTxtRange_moveEnd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_select_Proxy( 
    IHTMLTxtRange * This);


void __RPC_STUB IHTMLTxtRange_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_pasteHTML_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR html);


void __RPC_STUB IHTMLTxtRange_pasteHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_moveToElementText_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ IHTMLElement *element);


void __RPC_STUB IHTMLTxtRange_moveToElementText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_setEndPoint_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR how,
    /* [in] */ IHTMLTxtRange *SourceRange);


void __RPC_STUB IHTMLTxtRange_setEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_compareEndPoints_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR how,
    /* [in] */ IHTMLTxtRange *SourceRange,
    /* [out][retval] */ long *ret);


void __RPC_STUB IHTMLTxtRange_compareEndPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_findText_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR String,
    /* [in][defaultvalue] */ long count,
    /* [in][defaultvalue] */ long Flags,
    /* [out][retval] */ VARIANT_BOOL *Success);


void __RPC_STUB IHTMLTxtRange_findText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_moveToPoint_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLTxtRange_moveToPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_getBookmark_Proxy( 
    IHTMLTxtRange * This,
    /* [out][retval] */ BSTR *Boolmark);


void __RPC_STUB IHTMLTxtRange_getBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_moveToBookmark_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR Bookmark,
    /* [out][retval] */ VARIANT_BOOL *Success);


void __RPC_STUB IHTMLTxtRange_moveToBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandSupported_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_queryCommandSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandEnabled_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_queryCommandEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandState_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_queryCommandState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandIndeterm_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_queryCommandIndeterm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandText_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ BSTR *pcmdText);


void __RPC_STUB IHTMLTxtRange_queryCommandText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_queryCommandValue_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT *pcmdValue);


void __RPC_STUB IHTMLTxtRange_queryCommandValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_execCommand_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [in][defaultvalue] */ VARIANT_BOOL showUI,
    /* [in][optional] */ VARIANT value,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRange_execCommandShowHelp_Proxy( 
    IHTMLTxtRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLTxtRange_execCommandShowHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTxtRange_INTERFACE_DEFINED__ */


#ifndef __IHTMLTextRangeMetrics_INTERFACE_DEFINED__
#define __IHTMLTextRangeMetrics_INTERFACE_DEFINED__

/* interface IHTMLTextRangeMetrics */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTextRangeMetrics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f40b-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTextRangeMetrics : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_offsetTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_offsetLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_boundingTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_boundingLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_boundingWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_boundingHeight( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTextRangeMetricsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTextRangeMetrics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTextRangeMetrics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTextRangeMetrics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTextRangeMetrics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTextRangeMetrics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTextRangeMetrics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTextRangeMetrics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_offsetTop )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_offsetLeft )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_boundingTop )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_boundingLeft )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_boundingWidth )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_boundingHeight )( 
            IHTMLTextRangeMetrics * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLTextRangeMetricsVtbl;

    interface IHTMLTextRangeMetrics
    {
        CONST_VTBL struct IHTMLTextRangeMetricsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTextRangeMetrics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTextRangeMetrics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTextRangeMetrics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTextRangeMetrics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTextRangeMetrics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTextRangeMetrics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTextRangeMetrics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTextRangeMetrics_get_offsetTop(This,p)	\
    (This)->lpVtbl -> get_offsetTop(This,p)

#define IHTMLTextRangeMetrics_get_offsetLeft(This,p)	\
    (This)->lpVtbl -> get_offsetLeft(This,p)

#define IHTMLTextRangeMetrics_get_boundingTop(This,p)	\
    (This)->lpVtbl -> get_boundingTop(This,p)

#define IHTMLTextRangeMetrics_get_boundingLeft(This,p)	\
    (This)->lpVtbl -> get_boundingLeft(This,p)

#define IHTMLTextRangeMetrics_get_boundingWidth(This,p)	\
    (This)->lpVtbl -> get_boundingWidth(This,p)

#define IHTMLTextRangeMetrics_get_boundingHeight(This,p)	\
    (This)->lpVtbl -> get_boundingHeight(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_offsetTop_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_offsetTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_offsetLeft_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_offsetLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_boundingTop_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_boundingTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_boundingLeft_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_boundingLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_boundingWidth_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_boundingWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics_get_boundingHeight_Proxy( 
    IHTMLTextRangeMetrics * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextRangeMetrics_get_boundingHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTextRangeMetrics_INTERFACE_DEFINED__ */


#ifndef __IHTMLTextRangeMetrics2_INTERFACE_DEFINED__
#define __IHTMLTextRangeMetrics2_INTERFACE_DEFINED__

/* interface IHTMLTextRangeMetrics2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTextRangeMetrics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4a6-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTextRangeMetrics2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getClientRects( 
            /* [out][retval] */ IHTMLRectCollection **pRectCol) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getBoundingClientRect( 
            /* [out][retval] */ IHTMLRect **pRect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTextRangeMetrics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTextRangeMetrics2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTextRangeMetrics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTextRangeMetrics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTextRangeMetrics2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTextRangeMetrics2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTextRangeMetrics2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTextRangeMetrics2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getClientRects )( 
            IHTMLTextRangeMetrics2 * This,
            /* [out][retval] */ IHTMLRectCollection **pRectCol);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getBoundingClientRect )( 
            IHTMLTextRangeMetrics2 * This,
            /* [out][retval] */ IHTMLRect **pRect);
        
        END_INTERFACE
    } IHTMLTextRangeMetrics2Vtbl;

    interface IHTMLTextRangeMetrics2
    {
        CONST_VTBL struct IHTMLTextRangeMetrics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTextRangeMetrics2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTextRangeMetrics2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTextRangeMetrics2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTextRangeMetrics2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTextRangeMetrics2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTextRangeMetrics2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTextRangeMetrics2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTextRangeMetrics2_getClientRects(This,pRectCol)	\
    (This)->lpVtbl -> getClientRects(This,pRectCol)

#define IHTMLTextRangeMetrics2_getBoundingClientRect(This,pRect)	\
    (This)->lpVtbl -> getBoundingClientRect(This,pRect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics2_getClientRects_Proxy( 
    IHTMLTextRangeMetrics2 * This,
    /* [out][retval] */ IHTMLRectCollection **pRectCol);


void __RPC_STUB IHTMLTextRangeMetrics2_getClientRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTextRangeMetrics2_getBoundingClientRect_Proxy( 
    IHTMLTextRangeMetrics2 * This,
    /* [out][retval] */ IHTMLRect **pRect);


void __RPC_STUB IHTMLTextRangeMetrics2_getBoundingClientRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTextRangeMetrics2_INTERFACE_DEFINED__ */


#ifndef __IHTMLTxtRangeCollection_INTERFACE_DEFINED__
#define __IHTMLTxtRangeCollection_INTERFACE_DEFINED__

/* interface IHTMLTxtRangeCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTxtRangeCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f7ed-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTxtRangeCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTxtRangeCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTxtRangeCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTxtRangeCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTxtRangeCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTxtRangeCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTxtRangeCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTxtRangeCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTxtRangeCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLTxtRangeCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLTxtRangeCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLTxtRangeCollection * This,
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult);
        
        END_INTERFACE
    } IHTMLTxtRangeCollectionVtbl;

    interface IHTMLTxtRangeCollection
    {
        CONST_VTBL struct IHTMLTxtRangeCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTxtRangeCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTxtRangeCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTxtRangeCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTxtRangeCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTxtRangeCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTxtRangeCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTxtRangeCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTxtRangeCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLTxtRangeCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLTxtRangeCollection_item(This,pvarIndex,pvarResult)	\
    (This)->lpVtbl -> item(This,pvarIndex,pvarResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRangeCollection_get_length_Proxy( 
    IHTMLTxtRangeCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTxtRangeCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRangeCollection_get__newEnum_Proxy( 
    IHTMLTxtRangeCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLTxtRangeCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTxtRangeCollection_item_Proxy( 
    IHTMLTxtRangeCollection * This,
    /* [in] */ VARIANT *pvarIndex,
    /* [out][retval] */ VARIANT *pvarResult);


void __RPC_STUB IHTMLTxtRangeCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTxtRangeCollection_INTERFACE_DEFINED__ */


#ifndef __HTMLFormElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLFormElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLFormElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLFormElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f614-98b5-11cf-bb82-00aa00bdce0b")
    HTMLFormElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLFormElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLFormElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLFormElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLFormElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLFormElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLFormElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLFormElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLFormElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLFormElementEvents2Vtbl;

    interface HTMLFormElementEvents2
    {
        CONST_VTBL struct HTMLFormElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLFormElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLFormElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLFormElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLFormElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLFormElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLFormElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLFormElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLFormElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLFormElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLFormElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLFormElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLFormElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f364-98b5-11cf-bb82-00aa00bdce0b")
    HTMLFormElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLFormElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLFormElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLFormElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLFormElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLFormElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLFormElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLFormElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLFormElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLFormElementEventsVtbl;

    interface HTMLFormElementEvents
    {
        CONST_VTBL struct HTMLFormElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLFormElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLFormElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLFormElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLFormElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLFormElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLFormElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLFormElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLFormElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLFormElement_INTERFACE_DEFINED__
#define __IHTMLFormElement_INTERFACE_DEFINED__

/* interface IHTMLFormElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFormElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f7-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLFormElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_action( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_action( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dir( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dir( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_encoding( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_encoding( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_method( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_method( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_elements( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onsubmit( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onsubmit( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreset( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onreset( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE submit( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_length( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFormElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFormElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFormElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFormElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFormElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFormElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFormElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_action )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_action )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dir )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dir )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_encoding )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_encoding )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_method )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_method )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_elements )( 
            IHTMLFormElement * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_target )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLFormElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLFormElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onsubmit )( 
            IHTMLFormElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onsubmit )( 
            IHTMLFormElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreset )( 
            IHTMLFormElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onreset )( 
            IHTMLFormElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *submit )( 
            IHTMLFormElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            IHTMLFormElement * This);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_length )( 
            IHTMLFormElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLFormElement * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLFormElement * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLFormElement * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *tags )( 
            IHTMLFormElement * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLFormElementVtbl;

    interface IHTMLFormElement
    {
        CONST_VTBL struct IHTMLFormElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFormElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFormElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFormElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFormElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFormElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFormElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFormElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFormElement_put_action(This,v)	\
    (This)->lpVtbl -> put_action(This,v)

#define IHTMLFormElement_get_action(This,p)	\
    (This)->lpVtbl -> get_action(This,p)

#define IHTMLFormElement_put_dir(This,v)	\
    (This)->lpVtbl -> put_dir(This,v)

#define IHTMLFormElement_get_dir(This,p)	\
    (This)->lpVtbl -> get_dir(This,p)

#define IHTMLFormElement_put_encoding(This,v)	\
    (This)->lpVtbl -> put_encoding(This,v)

#define IHTMLFormElement_get_encoding(This,p)	\
    (This)->lpVtbl -> get_encoding(This,p)

#define IHTMLFormElement_put_method(This,v)	\
    (This)->lpVtbl -> put_method(This,v)

#define IHTMLFormElement_get_method(This,p)	\
    (This)->lpVtbl -> get_method(This,p)

#define IHTMLFormElement_get_elements(This,p)	\
    (This)->lpVtbl -> get_elements(This,p)

#define IHTMLFormElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IHTMLFormElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IHTMLFormElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLFormElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLFormElement_put_onsubmit(This,v)	\
    (This)->lpVtbl -> put_onsubmit(This,v)

#define IHTMLFormElement_get_onsubmit(This,p)	\
    (This)->lpVtbl -> get_onsubmit(This,p)

#define IHTMLFormElement_put_onreset(This,v)	\
    (This)->lpVtbl -> put_onreset(This,v)

#define IHTMLFormElement_get_onreset(This,p)	\
    (This)->lpVtbl -> get_onreset(This,p)

#define IHTMLFormElement_submit(This)	\
    (This)->lpVtbl -> submit(This)

#define IHTMLFormElement_reset(This)	\
    (This)->lpVtbl -> reset(This)

#define IHTMLFormElement_put_length(This,v)	\
    (This)->lpVtbl -> put_length(This,v)

#define IHTMLFormElement_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLFormElement_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLFormElement_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IHTMLFormElement_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_action_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_action_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_dir_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_dir_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_encoding_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_encoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_encoding_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_encoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_method_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_method_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_method_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_method_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_elements_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLFormElement_get_elements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_target_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_target_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_name_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_name_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_onsubmit_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFormElement_put_onsubmit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_onsubmit_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFormElement_get_onsubmit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_onreset_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFormElement_put_onreset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_onreset_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFormElement_get_onreset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_submit_Proxy( 
    IHTMLFormElement * This);


void __RPC_STUB IHTMLFormElement_submit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_reset_Proxy( 
    IHTMLFormElement * This);


void __RPC_STUB IHTMLFormElement_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_put_length_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLFormElement_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get_length_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLFormElement_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_get__newEnum_Proxy( 
    IHTMLFormElement * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLFormElement_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_item_Proxy( 
    IHTMLFormElement * This,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT index,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLFormElement_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement_tags_Proxy( 
    IHTMLFormElement * This,
    /* [in] */ VARIANT tagName,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLFormElement_tags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFormElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLFormElement2_INTERFACE_DEFINED__
#define __IHTMLFormElement2_INTERFACE_DEFINED__

/* interface IHTMLFormElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFormElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4f6-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLFormElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_acceptCharset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_acceptCharset( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE urns( 
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFormElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFormElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFormElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFormElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFormElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFormElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFormElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFormElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_acceptCharset )( 
            IHTMLFormElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_acceptCharset )( 
            IHTMLFormElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *urns )( 
            IHTMLFormElement2 * This,
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLFormElement2Vtbl;

    interface IHTMLFormElement2
    {
        CONST_VTBL struct IHTMLFormElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFormElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFormElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFormElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFormElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFormElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFormElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFormElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFormElement2_put_acceptCharset(This,v)	\
    (This)->lpVtbl -> put_acceptCharset(This,v)

#define IHTMLFormElement2_get_acceptCharset(This,p)	\
    (This)->lpVtbl -> get_acceptCharset(This,p)

#define IHTMLFormElement2_urns(This,urn,pdisp)	\
    (This)->lpVtbl -> urns(This,urn,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement2_put_acceptCharset_Proxy( 
    IHTMLFormElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFormElement2_put_acceptCharset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement2_get_acceptCharset_Proxy( 
    IHTMLFormElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFormElement2_get_acceptCharset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement2_urns_Proxy( 
    IHTMLFormElement2 * This,
    /* [in] */ VARIANT urn,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLFormElement2_urns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFormElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLFormElement3_INTERFACE_DEFINED__
#define __IHTMLFormElement3_INTERFACE_DEFINED__

/* interface IHTMLFormElement3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFormElement3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f836-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLFormElement3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFormElement3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFormElement3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFormElement3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFormElement3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFormElement3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFormElement3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFormElement3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFormElement3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IHTMLFormElement3 * This,
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLFormElement3Vtbl;

    interface IHTMLFormElement3
    {
        CONST_VTBL struct IHTMLFormElement3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFormElement3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFormElement3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFormElement3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFormElement3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFormElement3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFormElement3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFormElement3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFormElement3_namedItem(This,name,pdisp)	\
    (This)->lpVtbl -> namedItem(This,name,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFormElement3_namedItem_Proxy( 
    IHTMLFormElement3 * This,
    /* [in] */ BSTR name,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLFormElement3_namedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFormElement3_INTERFACE_DEFINED__ */


#ifndef __IHTMLSubmitData_INTERFACE_DEFINED__
#define __IHTMLSubmitData_INTERFACE_DEFINED__

/* interface IHTMLSubmitData */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSubmitData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f645-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSubmitData : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE appendNameValuePair( 
            /* [in][defaultvalue] */ BSTR name = L"",
            /* [in][defaultvalue] */ BSTR value = L"") = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE appendNameFilePair( 
            /* [in][defaultvalue] */ BSTR name = L"",
            /* [in][defaultvalue] */ BSTR filename = L"") = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE appendItemSeparator( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSubmitDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSubmitData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSubmitData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSubmitData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSubmitData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSubmitData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSubmitData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSubmitData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendNameValuePair )( 
            IHTMLSubmitData * This,
            /* [in][defaultvalue] */ BSTR name,
            /* [in][defaultvalue] */ BSTR value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendNameFilePair )( 
            IHTMLSubmitData * This,
            /* [in][defaultvalue] */ BSTR name,
            /* [in][defaultvalue] */ BSTR filename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendItemSeparator )( 
            IHTMLSubmitData * This);
        
        END_INTERFACE
    } IHTMLSubmitDataVtbl;

    interface IHTMLSubmitData
    {
        CONST_VTBL struct IHTMLSubmitDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSubmitData_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSubmitData_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSubmitData_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSubmitData_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSubmitData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSubmitData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSubmitData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSubmitData_appendNameValuePair(This,name,value)	\
    (This)->lpVtbl -> appendNameValuePair(This,name,value)

#define IHTMLSubmitData_appendNameFilePair(This,name,filename)	\
    (This)->lpVtbl -> appendNameFilePair(This,name,filename)

#define IHTMLSubmitData_appendItemSeparator(This)	\
    (This)->lpVtbl -> appendItemSeparator(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSubmitData_appendNameValuePair_Proxy( 
    IHTMLSubmitData * This,
    /* [in][defaultvalue] */ BSTR name,
    /* [in][defaultvalue] */ BSTR value);


void __RPC_STUB IHTMLSubmitData_appendNameValuePair_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSubmitData_appendNameFilePair_Proxy( 
    IHTMLSubmitData * This,
    /* [in][defaultvalue] */ BSTR name,
    /* [in][defaultvalue] */ BSTR filename);


void __RPC_STUB IHTMLSubmitData_appendNameFilePair_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSubmitData_appendItemSeparator_Proxy( 
    IHTMLSubmitData * This);


void __RPC_STUB IHTMLSubmitData_appendItemSeparator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSubmitData_INTERFACE_DEFINED__ */


#ifndef __DispHTMLFormElement_DISPINTERFACE_DEFINED__
#define __DispHTMLFormElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLFormElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLFormElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f510-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLFormElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLFormElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLFormElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLFormElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLFormElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLFormElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLFormElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLFormElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLFormElementVtbl;

    interface DispHTMLFormElement
    {
        CONST_VTBL struct DispHTMLFormElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLFormElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLFormElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLFormElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLFormElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLFormElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLFormElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLFormElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLFormElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLFormElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f251-98b5-11cf-bb82-00aa00bdce0b")
HTMLFormElement;
#endif

#ifndef __HTMLControlElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLControlElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLControlElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLControlElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f612-98b5-11cf-bb82-00aa00bdce0b")
    HTMLControlElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLControlElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLControlElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLControlElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLControlElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLControlElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLControlElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLControlElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLControlElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLControlElementEvents2Vtbl;

    interface HTMLControlElementEvents2
    {
        CONST_VTBL struct HTMLControlElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLControlElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLControlElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLControlElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLControlElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLControlElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLControlElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLControlElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLControlElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLControlElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLControlElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLControlElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLControlElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f4ea-98b5-11cf-bb82-00aa00bdce0b")
    HTMLControlElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLControlElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLControlElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLControlElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLControlElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLControlElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLControlElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLControlElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLControlElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLControlElementEventsVtbl;

    interface HTMLControlElementEvents
    {
        CONST_VTBL struct HTMLControlElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLControlElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLControlElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLControlElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLControlElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLControlElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLControlElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLControlElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLControlElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLControlElement_INTERFACE_DEFINED__
#define __IHTMLControlElement_INTERFACE_DEFINED__

/* interface IHTMLControlElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLControlElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4e9-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLControlElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_tabIndex( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_tabIndex( 
            /* [out][retval] */ short *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accessKey( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accessKey( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onblur( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onblur( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onresize( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onresize( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addFilter( 
            /* [in] */ IUnknown *pUnk) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeFilter( 
            /* [in] */ IUnknown *pUnk) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientHeight( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clientLeft( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLControlElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLControlElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLControlElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLControlElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLControlElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLControlElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLControlElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLControlElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tabIndex )( 
            IHTMLControlElement * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tabIndex )( 
            IHTMLControlElement * This,
            /* [out][retval] */ short *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLControlElement * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accessKey )( 
            IHTMLControlElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accessKey )( 
            IHTMLControlElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onblur )( 
            IHTMLControlElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onblur )( 
            IHTMLControlElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocus )( 
            IHTMLControlElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocus )( 
            IHTMLControlElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onresize )( 
            IHTMLControlElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onresize )( 
            IHTMLControlElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *blur )( 
            IHTMLControlElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addFilter )( 
            IHTMLControlElement * This,
            /* [in] */ IUnknown *pUnk);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeFilter )( 
            IHTMLControlElement * This,
            /* [in] */ IUnknown *pUnk);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientHeight )( 
            IHTMLControlElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientWidth )( 
            IHTMLControlElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientTop )( 
            IHTMLControlElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientLeft )( 
            IHTMLControlElement * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLControlElementVtbl;

    interface IHTMLControlElement
    {
        CONST_VTBL struct IHTMLControlElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLControlElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLControlElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLControlElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLControlElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLControlElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLControlElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLControlElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLControlElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IHTMLControlElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IHTMLControlElement_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLControlElement_put_accessKey(This,v)	\
    (This)->lpVtbl -> put_accessKey(This,v)

#define IHTMLControlElement_get_accessKey(This,p)	\
    (This)->lpVtbl -> get_accessKey(This,p)

#define IHTMLControlElement_put_onblur(This,v)	\
    (This)->lpVtbl -> put_onblur(This,v)

#define IHTMLControlElement_get_onblur(This,p)	\
    (This)->lpVtbl -> get_onblur(This,p)

#define IHTMLControlElement_put_onfocus(This,v)	\
    (This)->lpVtbl -> put_onfocus(This,v)

#define IHTMLControlElement_get_onfocus(This,p)	\
    (This)->lpVtbl -> get_onfocus(This,p)

#define IHTMLControlElement_put_onresize(This,v)	\
    (This)->lpVtbl -> put_onresize(This,v)

#define IHTMLControlElement_get_onresize(This,p)	\
    (This)->lpVtbl -> get_onresize(This,p)

#define IHTMLControlElement_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define IHTMLControlElement_addFilter(This,pUnk)	\
    (This)->lpVtbl -> addFilter(This,pUnk)

#define IHTMLControlElement_removeFilter(This,pUnk)	\
    (This)->lpVtbl -> removeFilter(This,pUnk)

#define IHTMLControlElement_get_clientHeight(This,p)	\
    (This)->lpVtbl -> get_clientHeight(This,p)

#define IHTMLControlElement_get_clientWidth(This,p)	\
    (This)->lpVtbl -> get_clientWidth(This,p)

#define IHTMLControlElement_get_clientTop(This,p)	\
    (This)->lpVtbl -> get_clientTop(This,p)

#define IHTMLControlElement_get_clientLeft(This,p)	\
    (This)->lpVtbl -> get_clientLeft(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_put_tabIndex_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ short v);


void __RPC_STUB IHTMLControlElement_put_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_tabIndex_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ short *p);


void __RPC_STUB IHTMLControlElement_get_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_focus_Proxy( 
    IHTMLControlElement * This);


void __RPC_STUB IHTMLControlElement_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_put_accessKey_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLControlElement_put_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_accessKey_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLControlElement_get_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_put_onblur_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLControlElement_put_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_onblur_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLControlElement_get_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_put_onfocus_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLControlElement_put_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_onfocus_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLControlElement_get_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_put_onresize_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLControlElement_put_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_onresize_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLControlElement_get_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_blur_Proxy( 
    IHTMLControlElement * This);


void __RPC_STUB IHTMLControlElement_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_addFilter_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ IUnknown *pUnk);


void __RPC_STUB IHTMLControlElement_addFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_removeFilter_Proxy( 
    IHTMLControlElement * This,
    /* [in] */ IUnknown *pUnk);


void __RPC_STUB IHTMLControlElement_removeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_clientHeight_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLControlElement_get_clientHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_clientWidth_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLControlElement_get_clientWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_clientTop_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLControlElement_get_clientTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlElement_get_clientLeft_Proxy( 
    IHTMLControlElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLControlElement_get_clientLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLControlElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLTextElement_INTERFACE_DEFINED__
#define __IHTMLTextElement_INTERFACE_DEFINED__

/* interface IHTMLTextElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f218-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTextElement : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTextElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTextElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTextElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTextElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTextElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTextElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTextElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTMLTextElementVtbl;

    interface IHTMLTextElement
    {
        CONST_VTBL struct IHTMLTextElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTextElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTextElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTextElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTextElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTextElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTextElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTextElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLTextElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLTextElement_DISPINTERFACE_DEFINED__
#define __DispHTMLTextElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLTextElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLTextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f537-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLTextElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLTextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLTextElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLTextElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLTextElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLTextElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLTextElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLTextElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLTextElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLTextElementVtbl;

    interface DispHTMLTextElement
    {
        CONST_VTBL struct DispHTMLTextElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLTextElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLTextElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLTextElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLTextElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLTextElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLTextElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLTextElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLTextElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLTextElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f26a-98b5-11cf-bb82-00aa00bdce0b")
HTMLTextElement;
#endif

#ifndef __HTMLTextContainerEvents2_DISPINTERFACE_DEFINED__
#define __HTMLTextContainerEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLTextContainerEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLTextContainerEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f624-98b5-11cf-bb82-00aa00bdce0b")
    HTMLTextContainerEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLTextContainerEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLTextContainerEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLTextContainerEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLTextContainerEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLTextContainerEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLTextContainerEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLTextContainerEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLTextContainerEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLTextContainerEvents2Vtbl;

    interface HTMLTextContainerEvents2
    {
        CONST_VTBL struct HTMLTextContainerEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLTextContainerEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLTextContainerEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLTextContainerEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLTextContainerEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLTextContainerEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLTextContainerEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLTextContainerEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLTextContainerEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLTextContainerEvents_DISPINTERFACE_DEFINED__
#define __HTMLTextContainerEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLTextContainerEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLTextContainerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1FF6AA72-5842-11cf-A707-00AA00C0098D")
    HTMLTextContainerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLTextContainerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLTextContainerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLTextContainerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLTextContainerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLTextContainerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLTextContainerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLTextContainerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLTextContainerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLTextContainerEventsVtbl;

    interface HTMLTextContainerEvents
    {
        CONST_VTBL struct HTMLTextContainerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLTextContainerEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLTextContainerEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLTextContainerEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLTextContainerEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLTextContainerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLTextContainerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLTextContainerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLTextContainerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLTextContainer_INTERFACE_DEFINED__
#define __IHTMLTextContainer_INTERFACE_DEFINED__

/* interface IHTMLTextContainer */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTextContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f230-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTextContainer : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createControlRange( 
            /* [out][retval] */ IDispatch **range) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollHeight( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollTop( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollLeft( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onscroll( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onscroll( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTextContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTextContainer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTextContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTextContainer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTextContainer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTextContainer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTextContainer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTextContainer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createControlRange )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ IDispatch **range);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollHeight )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollWidth )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollTop )( 
            IHTMLTextContainer * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollTop )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollLeft )( 
            IHTMLTextContainer * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollLeft )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onscroll )( 
            IHTMLTextContainer * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onscroll )( 
            IHTMLTextContainer * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLTextContainerVtbl;

    interface IHTMLTextContainer
    {
        CONST_VTBL struct IHTMLTextContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTextContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTextContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTextContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTextContainer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTextContainer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTextContainer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTextContainer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTextContainer_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)

#define IHTMLTextContainer_get_scrollHeight(This,p)	\
    (This)->lpVtbl -> get_scrollHeight(This,p)

#define IHTMLTextContainer_get_scrollWidth(This,p)	\
    (This)->lpVtbl -> get_scrollWidth(This,p)

#define IHTMLTextContainer_put_scrollTop(This,v)	\
    (This)->lpVtbl -> put_scrollTop(This,v)

#define IHTMLTextContainer_get_scrollTop(This,p)	\
    (This)->lpVtbl -> get_scrollTop(This,p)

#define IHTMLTextContainer_put_scrollLeft(This,v)	\
    (This)->lpVtbl -> put_scrollLeft(This,v)

#define IHTMLTextContainer_get_scrollLeft(This,p)	\
    (This)->lpVtbl -> get_scrollLeft(This,p)

#define IHTMLTextContainer_put_onscroll(This,v)	\
    (This)->lpVtbl -> put_onscroll(This,v)

#define IHTMLTextContainer_get_onscroll(This,p)	\
    (This)->lpVtbl -> get_onscroll(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_createControlRange_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ IDispatch **range);


void __RPC_STUB IHTMLTextContainer_createControlRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_get_scrollHeight_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextContainer_get_scrollHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_get_scrollWidth_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextContainer_get_scrollWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_put_scrollTop_Proxy( 
    IHTMLTextContainer * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTextContainer_put_scrollTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_get_scrollTop_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextContainer_get_scrollTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_put_scrollLeft_Proxy( 
    IHTMLTextContainer * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTextContainer_put_scrollLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_get_scrollLeft_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextContainer_get_scrollLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_put_onscroll_Proxy( 
    IHTMLTextContainer * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTextContainer_put_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextContainer_get_onscroll_Proxy( 
    IHTMLTextContainer * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTextContainer_get_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTextContainer_INTERFACE_DEFINED__ */


#ifndef __IHTMLControlRange_INTERFACE_DEFINED__
#define __IHTMLControlRange_INTERFACE_DEFINED__

/* interface IHTMLControlRange */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLControlRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f29c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLControlRange : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IHTMLControlElement *item) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ IHTMLElement **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in][optional] */ VARIANT varargStart) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandSupported( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandEnabled( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandState( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandIndeterm( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandText( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandValue( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommandShowHelp( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE commonParentElement( 
            /* [out][retval] */ IHTMLElement **parent) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLControlRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLControlRange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLControlRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLControlRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLControlRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLControlRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLControlRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLControlRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLControlRange * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IHTMLControlRange * This,
            /* [in] */ IHTMLControlElement *item);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IHTMLControlRange * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLControlRange * This,
            /* [in] */ long index,
            /* [out][retval] */ IHTMLElement **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *scrollIntoView )( 
            IHTMLControlRange * This,
            /* [in][optional] */ VARIANT varargStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandState )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandText )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandValue )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommand )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )( 
            IHTMLControlRange * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *commonParentElement )( 
            IHTMLControlRange * This,
            /* [out][retval] */ IHTMLElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLControlRange * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLControlRangeVtbl;

    interface IHTMLControlRange
    {
        CONST_VTBL struct IHTMLControlRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLControlRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLControlRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLControlRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLControlRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLControlRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLControlRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLControlRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLControlRange_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLControlRange_add(This,item)	\
    (This)->lpVtbl -> add(This,item)

#define IHTMLControlRange_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IHTMLControlRange_item(This,index,pdisp)	\
    (This)->lpVtbl -> item(This,index,pdisp)

#define IHTMLControlRange_scrollIntoView(This,varargStart)	\
    (This)->lpVtbl -> scrollIntoView(This,varargStart)

#define IHTMLControlRange_queryCommandSupported(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet)

#define IHTMLControlRange_queryCommandEnabled(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet)

#define IHTMLControlRange_queryCommandState(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet)

#define IHTMLControlRange_queryCommandIndeterm(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet)

#define IHTMLControlRange_queryCommandText(This,cmdID,pcmdText)	\
    (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText)

#define IHTMLControlRange_queryCommandValue(This,cmdID,pcmdValue)	\
    (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue)

#define IHTMLControlRange_execCommand(This,cmdID,showUI,value,pfRet)	\
    (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet)

#define IHTMLControlRange_execCommandShowHelp(This,cmdID,pfRet)	\
    (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet)

#define IHTMLControlRange_commonParentElement(This,parent)	\
    (This)->lpVtbl -> commonParentElement(This,parent)

#define IHTMLControlRange_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_select_Proxy( 
    IHTMLControlRange * This);


void __RPC_STUB IHTMLControlRange_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_add_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ IHTMLControlElement *item);


void __RPC_STUB IHTMLControlRange_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_remove_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ long index);


void __RPC_STUB IHTMLControlRange_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_item_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ long index,
    /* [out][retval] */ IHTMLElement **pdisp);


void __RPC_STUB IHTMLControlRange_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_scrollIntoView_Proxy( 
    IHTMLControlRange * This,
    /* [in][optional] */ VARIANT varargStart);


void __RPC_STUB IHTMLControlRange_scrollIntoView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandSupported_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_queryCommandSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandEnabled_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_queryCommandEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandState_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_queryCommandState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandIndeterm_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_queryCommandIndeterm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandText_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ BSTR *pcmdText);


void __RPC_STUB IHTMLControlRange_queryCommandText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_queryCommandValue_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT *pcmdValue);


void __RPC_STUB IHTMLControlRange_queryCommandValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_execCommand_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [in][defaultvalue] */ VARIANT_BOOL showUI,
    /* [in][optional] */ VARIANT value,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_execCommandShowHelp_Proxy( 
    IHTMLControlRange * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLControlRange_execCommandShowHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_commonParentElement_Proxy( 
    IHTMLControlRange * This,
    /* [out][retval] */ IHTMLElement **parent);


void __RPC_STUB IHTMLControlRange_commonParentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange_get_length_Proxy( 
    IHTMLControlRange * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLControlRange_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLControlRange_INTERFACE_DEFINED__ */


#ifndef __IHTMLControlRange2_INTERFACE_DEFINED__
#define __IHTMLControlRange2_INTERFACE_DEFINED__

/* interface IHTMLControlRange2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLControlRange2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f65e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLControlRange2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addElement( 
            /* [in] */ IHTMLElement *item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLControlRange2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLControlRange2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLControlRange2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLControlRange2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLControlRange2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLControlRange2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLControlRange2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLControlRange2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addElement )( 
            IHTMLControlRange2 * This,
            /* [in] */ IHTMLElement *item);
        
        END_INTERFACE
    } IHTMLControlRange2Vtbl;

    interface IHTMLControlRange2
    {
        CONST_VTBL struct IHTMLControlRange2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLControlRange2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLControlRange2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLControlRange2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLControlRange2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLControlRange2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLControlRange2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLControlRange2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLControlRange2_addElement(This,item)	\
    (This)->lpVtbl -> addElement(This,item)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLControlRange2_addElement_Proxy( 
    IHTMLControlRange2 * This,
    /* [in] */ IHTMLElement *item);


void __RPC_STUB IHTMLControlRange2_addElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLControlRange2_INTERFACE_DEFINED__ */


#ifndef __HTMLImgEvents2_DISPINTERFACE_DEFINED__
#define __HTMLImgEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLImgEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLImgEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f616-98b5-11cf-bb82-00aa00bdce0b")
    HTMLImgEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLImgEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLImgEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLImgEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLImgEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLImgEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLImgEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLImgEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLImgEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLImgEvents2Vtbl;

    interface HTMLImgEvents2
    {
        CONST_VTBL struct HTMLImgEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLImgEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLImgEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLImgEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLImgEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLImgEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLImgEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLImgEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLImgEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLImgEvents_DISPINTERFACE_DEFINED__
#define __HTMLImgEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLImgEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLImgEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f25b-98b5-11cf-bb82-00aa00bdce0b")
    HTMLImgEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLImgEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLImgEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLImgEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLImgEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLImgEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLImgEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLImgEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLImgEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLImgEventsVtbl;

    interface HTMLImgEvents
    {
        CONST_VTBL struct HTMLImgEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLImgEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLImgEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLImgEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLImgEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLImgEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLImgEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLImgEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLImgEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLImgElement_INTERFACE_DEFINED__
#define __IHTMLImgElement_INTERFACE_DEFINED__

/* interface IHTMLImgElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLImgElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f240-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLImgElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_isMap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_isMap( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_useMap( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_useMap( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mimeType( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileSize( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileCreatedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileModifiedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileUpdatedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nameProp( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_border( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_lowsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_lowsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vrml( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vrml( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dynsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dynsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_complete( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerror( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerror( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onabort( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onabort( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLImgElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLImgElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLImgElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLImgElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLImgElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLImgElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLImgElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLImgElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_isMap )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isMap )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_useMap )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_useMap )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mimeType )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileSize )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileCreatedDate )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileModifiedDate )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileUpdatedDate )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocol )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nameProp )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_border )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_border )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vspace )( 
            IHTMLImgElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vspace )( 
            IHTMLImgElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hspace )( 
            IHTMLImgElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hspace )( 
            IHTMLImgElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_alt )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_alt )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_lowsrc )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lowsrc )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vrml )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vrml )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dynsrc )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dynsrc )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_complete )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_loop )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_loop )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerror )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerror )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onabort )( 
            IHTMLImgElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onabort )( 
            IHTMLImgElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLImgElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLImgElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLImgElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLImgElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_start )( 
            IHTMLImgElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_start )( 
            IHTMLImgElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLImgElementVtbl;

    interface IHTMLImgElement
    {
        CONST_VTBL struct IHTMLImgElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLImgElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLImgElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLImgElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLImgElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLImgElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLImgElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLImgElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLImgElement_put_isMap(This,v)	\
    (This)->lpVtbl -> put_isMap(This,v)

#define IHTMLImgElement_get_isMap(This,p)	\
    (This)->lpVtbl -> get_isMap(This,p)

#define IHTMLImgElement_put_useMap(This,v)	\
    (This)->lpVtbl -> put_useMap(This,v)

#define IHTMLImgElement_get_useMap(This,p)	\
    (This)->lpVtbl -> get_useMap(This,p)

#define IHTMLImgElement_get_mimeType(This,p)	\
    (This)->lpVtbl -> get_mimeType(This,p)

#define IHTMLImgElement_get_fileSize(This,p)	\
    (This)->lpVtbl -> get_fileSize(This,p)

#define IHTMLImgElement_get_fileCreatedDate(This,p)	\
    (This)->lpVtbl -> get_fileCreatedDate(This,p)

#define IHTMLImgElement_get_fileModifiedDate(This,p)	\
    (This)->lpVtbl -> get_fileModifiedDate(This,p)

#define IHTMLImgElement_get_fileUpdatedDate(This,p)	\
    (This)->lpVtbl -> get_fileUpdatedDate(This,p)

#define IHTMLImgElement_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IHTMLImgElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLImgElement_get_nameProp(This,p)	\
    (This)->lpVtbl -> get_nameProp(This,p)

#define IHTMLImgElement_put_border(This,v)	\
    (This)->lpVtbl -> put_border(This,v)

#define IHTMLImgElement_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IHTMLImgElement_put_vspace(This,v)	\
    (This)->lpVtbl -> put_vspace(This,v)

#define IHTMLImgElement_get_vspace(This,p)	\
    (This)->lpVtbl -> get_vspace(This,p)

#define IHTMLImgElement_put_hspace(This,v)	\
    (This)->lpVtbl -> put_hspace(This,v)

#define IHTMLImgElement_get_hspace(This,p)	\
    (This)->lpVtbl -> get_hspace(This,p)

#define IHTMLImgElement_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IHTMLImgElement_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IHTMLImgElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IHTMLImgElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IHTMLImgElement_put_lowsrc(This,v)	\
    (This)->lpVtbl -> put_lowsrc(This,v)

#define IHTMLImgElement_get_lowsrc(This,p)	\
    (This)->lpVtbl -> get_lowsrc(This,p)

#define IHTMLImgElement_put_vrml(This,v)	\
    (This)->lpVtbl -> put_vrml(This,v)

#define IHTMLImgElement_get_vrml(This,p)	\
    (This)->lpVtbl -> get_vrml(This,p)

#define IHTMLImgElement_put_dynsrc(This,v)	\
    (This)->lpVtbl -> put_dynsrc(This,v)

#define IHTMLImgElement_get_dynsrc(This,p)	\
    (This)->lpVtbl -> get_dynsrc(This,p)

#define IHTMLImgElement_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLImgElement_get_complete(This,p)	\
    (This)->lpVtbl -> get_complete(This,p)

#define IHTMLImgElement_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IHTMLImgElement_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IHTMLImgElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLImgElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLImgElement_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLImgElement_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLImgElement_put_onerror(This,v)	\
    (This)->lpVtbl -> put_onerror(This,v)

#define IHTMLImgElement_get_onerror(This,p)	\
    (This)->lpVtbl -> get_onerror(This,p)

#define IHTMLImgElement_put_onabort(This,v)	\
    (This)->lpVtbl -> put_onabort(This,v)

#define IHTMLImgElement_get_onabort(This,p)	\
    (This)->lpVtbl -> get_onabort(This,p)

#define IHTMLImgElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLImgElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLImgElement_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLImgElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLImgElement_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLImgElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLImgElement_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define IHTMLImgElement_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_isMap_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLImgElement_put_isMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_isMap_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLImgElement_get_isMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_useMap_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_useMap_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_mimeType_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_fileSize_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_fileCreatedDate_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_fileCreatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_fileModifiedDate_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_fileUpdatedDate_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_protocol_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_href_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_nameProp_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_nameProp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_border_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLImgElement_put_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_border_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLImgElement_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_vspace_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLImgElement_put_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_vspace_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLImgElement_get_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_hspace_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLImgElement_put_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_hspace_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLImgElement_get_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_alt_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_alt_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_src_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_src_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_lowsrc_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_lowsrc_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_vrml_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_vrml_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_dynsrc_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_dynsrc_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_readyState_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_complete_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLImgElement_get_complete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_loop_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLImgElement_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_loop_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLImgElement_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_align_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_align_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_onload_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLImgElement_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_onload_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLImgElement_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_onerror_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLImgElement_put_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_onerror_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLImgElement_get_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_onabort_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLImgElement_put_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_onabort_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLImgElement_get_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_name_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_name_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_width_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLImgElement_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_width_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLImgElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_height_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLImgElement_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_height_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLImgElement_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_put_start_Proxy( 
    IHTMLImgElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement_get_start_Proxy( 
    IHTMLImgElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLImgElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLImgElement2_INTERFACE_DEFINED__
#define __IHTMLImgElement2_INTERFACE_DEFINED__

/* interface IHTMLImgElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLImgElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f826-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLImgElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_longDesc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_longDesc( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLImgElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLImgElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLImgElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLImgElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLImgElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLImgElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLImgElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLImgElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_longDesc )( 
            IHTMLImgElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_longDesc )( 
            IHTMLImgElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLImgElement2Vtbl;

    interface IHTMLImgElement2
    {
        CONST_VTBL struct IHTMLImgElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLImgElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLImgElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLImgElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLImgElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLImgElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLImgElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLImgElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLImgElement2_put_longDesc(This,v)	\
    (This)->lpVtbl -> put_longDesc(This,v)

#define IHTMLImgElement2_get_longDesc(This,p)	\
    (This)->lpVtbl -> get_longDesc(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement2_put_longDesc_Proxy( 
    IHTMLImgElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLImgElement2_put_longDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLImgElement2_get_longDesc_Proxy( 
    IHTMLImgElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLImgElement2_get_longDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLImgElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLImageElementFactory_INTERFACE_DEFINED__
#define __IHTMLImageElementFactory_INTERFACE_DEFINED__

/* interface IHTMLImageElementFactory */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLImageElementFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f38e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLImageElementFactory : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE create( 
            /* [in][optional] */ VARIANT width,
            /* [in][optional] */ VARIANT height,
            /* [out][retval] */ IHTMLImgElement **__MIDL_0011) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLImageElementFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLImageElementFactory * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLImageElementFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLImageElementFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLImageElementFactory * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLImageElementFactory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLImageElementFactory * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLImageElementFactory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *create )( 
            IHTMLImageElementFactory * This,
            /* [in][optional] */ VARIANT width,
            /* [in][optional] */ VARIANT height,
            /* [out][retval] */ IHTMLImgElement **__MIDL_0011);
        
        END_INTERFACE
    } IHTMLImageElementFactoryVtbl;

    interface IHTMLImageElementFactory
    {
        CONST_VTBL struct IHTMLImageElementFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLImageElementFactory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLImageElementFactory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLImageElementFactory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLImageElementFactory_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLImageElementFactory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLImageElementFactory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLImageElementFactory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLImageElementFactory_create(This,width,height,__MIDL_0011)	\
    (This)->lpVtbl -> create(This,width,height,__MIDL_0011)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLImageElementFactory_create_Proxy( 
    IHTMLImageElementFactory * This,
    /* [in][optional] */ VARIANT width,
    /* [in][optional] */ VARIANT height,
    /* [out][retval] */ IHTMLImgElement **__MIDL_0011);


void __RPC_STUB IHTMLImageElementFactory_create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLImageElementFactory_INTERFACE_DEFINED__ */


#ifndef __DispHTMLImg_DISPINTERFACE_DEFINED__
#define __DispHTMLImg_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLImg */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLImg;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f51c-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLImg : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLImgVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLImg * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLImg * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLImg * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLImg * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLImg * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLImg * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLImg * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLImgVtbl;

    interface DispHTMLImg
    {
        CONST_VTBL struct DispHTMLImgVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLImg_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLImg_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLImg_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLImg_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLImg_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLImg_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLImg_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLImg_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLImg;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f241-98b5-11cf-bb82-00aa00bdce0b")
HTMLImg;
#endif

EXTERN_C const CLSID CLSID_HTMLImageElementFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f38f-98b5-11cf-bb82-00aa00bdce0b")
HTMLImageElementFactory;
#endif

#ifndef __IHTMLBodyElement_INTERFACE_DEFINED__
#define __IHTMLBodyElement_INTERFACE_DEFINED__

/* interface IHTMLBodyElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBodyElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1d8-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBodyElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_background( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_background( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bgProperties( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bgProperties( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_leftMargin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_leftMargin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_topMargin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_topMargin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rightMargin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rightMargin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bottomMargin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bottomMargin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_link( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_link( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vLink( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vLink( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_aLink( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_aLink( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onunload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onunload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scroll( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scroll( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeunload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeunload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBodyElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBodyElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBodyElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBodyElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBodyElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBodyElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBodyElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBodyElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_background )( 
            IHTMLBodyElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_background )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgProperties )( 
            IHTMLBodyElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgProperties )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_leftMargin )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_leftMargin )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_topMargin )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_topMargin )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rightMargin )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rightMargin )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bottomMargin )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bottomMargin )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noWrap )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noWrap )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgColor )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgColor )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_link )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_link )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vLink )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vLink )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_aLink )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_aLink )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onunload )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onunload )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scroll )( 
            IHTMLBodyElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scroll )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselect )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselect )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeunload )( 
            IHTMLBodyElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeunload )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLBodyElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLBodyElementVtbl;

    interface IHTMLBodyElement
    {
        CONST_VTBL struct IHTMLBodyElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBodyElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBodyElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBodyElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBodyElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBodyElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBodyElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBodyElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBodyElement_put_background(This,v)	\
    (This)->lpVtbl -> put_background(This,v)

#define IHTMLBodyElement_get_background(This,p)	\
    (This)->lpVtbl -> get_background(This,p)

#define IHTMLBodyElement_put_bgProperties(This,v)	\
    (This)->lpVtbl -> put_bgProperties(This,v)

#define IHTMLBodyElement_get_bgProperties(This,p)	\
    (This)->lpVtbl -> get_bgProperties(This,p)

#define IHTMLBodyElement_put_leftMargin(This,v)	\
    (This)->lpVtbl -> put_leftMargin(This,v)

#define IHTMLBodyElement_get_leftMargin(This,p)	\
    (This)->lpVtbl -> get_leftMargin(This,p)

#define IHTMLBodyElement_put_topMargin(This,v)	\
    (This)->lpVtbl -> put_topMargin(This,v)

#define IHTMLBodyElement_get_topMargin(This,p)	\
    (This)->lpVtbl -> get_topMargin(This,p)

#define IHTMLBodyElement_put_rightMargin(This,v)	\
    (This)->lpVtbl -> put_rightMargin(This,v)

#define IHTMLBodyElement_get_rightMargin(This,p)	\
    (This)->lpVtbl -> get_rightMargin(This,p)

#define IHTMLBodyElement_put_bottomMargin(This,v)	\
    (This)->lpVtbl -> put_bottomMargin(This,v)

#define IHTMLBodyElement_get_bottomMargin(This,p)	\
    (This)->lpVtbl -> get_bottomMargin(This,p)

#define IHTMLBodyElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IHTMLBodyElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#define IHTMLBodyElement_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IHTMLBodyElement_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IHTMLBodyElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IHTMLBodyElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IHTMLBodyElement_put_link(This,v)	\
    (This)->lpVtbl -> put_link(This,v)

#define IHTMLBodyElement_get_link(This,p)	\
    (This)->lpVtbl -> get_link(This,p)

#define IHTMLBodyElement_put_vLink(This,v)	\
    (This)->lpVtbl -> put_vLink(This,v)

#define IHTMLBodyElement_get_vLink(This,p)	\
    (This)->lpVtbl -> get_vLink(This,p)

#define IHTMLBodyElement_put_aLink(This,v)	\
    (This)->lpVtbl -> put_aLink(This,v)

#define IHTMLBodyElement_get_aLink(This,p)	\
    (This)->lpVtbl -> get_aLink(This,p)

#define IHTMLBodyElement_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLBodyElement_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLBodyElement_put_onunload(This,v)	\
    (This)->lpVtbl -> put_onunload(This,v)

#define IHTMLBodyElement_get_onunload(This,p)	\
    (This)->lpVtbl -> get_onunload(This,p)

#define IHTMLBodyElement_put_scroll(This,v)	\
    (This)->lpVtbl -> put_scroll(This,v)

#define IHTMLBodyElement_get_scroll(This,p)	\
    (This)->lpVtbl -> get_scroll(This,p)

#define IHTMLBodyElement_put_onselect(This,v)	\
    (This)->lpVtbl -> put_onselect(This,v)

#define IHTMLBodyElement_get_onselect(This,p)	\
    (This)->lpVtbl -> get_onselect(This,p)

#define IHTMLBodyElement_put_onbeforeunload(This,v)	\
    (This)->lpVtbl -> put_onbeforeunload(This,v)

#define IHTMLBodyElement_get_onbeforeunload(This,p)	\
    (This)->lpVtbl -> get_onbeforeunload(This,p)

#define IHTMLBodyElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_background_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBodyElement_put_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_background_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBodyElement_get_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_bgProperties_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBodyElement_put_bgProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_bgProperties_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBodyElement_get_bgProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_leftMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_leftMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_leftMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_leftMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_topMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_topMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_topMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_topMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_rightMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_rightMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_rightMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_rightMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_bottomMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_bottomMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_bottomMargin_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_bottomMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_noWrap_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLBodyElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_noWrap_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLBodyElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_bgColor_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_bgColor_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_text_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_text_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_link_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_link_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_link_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_link_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_vLink_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_vLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_vLink_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_vLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_aLink_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_aLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_aLink_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_aLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_onload_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_onload_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_onunload_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_onunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_onunload_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_onunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_scroll_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBodyElement_put_scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_scroll_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBodyElement_get_scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_onselect_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_onselect_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_put_onbeforeunload_Proxy( 
    IHTMLBodyElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement_put_onbeforeunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_get_onbeforeunload_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement_get_onbeforeunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement_createTextRange_Proxy( 
    IHTMLBodyElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLBodyElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBodyElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLBodyElement2_INTERFACE_DEFINED__
#define __IHTMLBodyElement2_INTERFACE_DEFINED__

/* interface IHTMLBodyElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBodyElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5c5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBodyElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeprint( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeprint( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onafterprint( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onafterprint( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBodyElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBodyElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBodyElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBodyElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBodyElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBodyElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBodyElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBodyElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeprint )( 
            IHTMLBodyElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeprint )( 
            IHTMLBodyElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onafterprint )( 
            IHTMLBodyElement2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onafterprint )( 
            IHTMLBodyElement2 * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLBodyElement2Vtbl;

    interface IHTMLBodyElement2
    {
        CONST_VTBL struct IHTMLBodyElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBodyElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBodyElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBodyElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBodyElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBodyElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBodyElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBodyElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBodyElement2_put_onbeforeprint(This,v)	\
    (This)->lpVtbl -> put_onbeforeprint(This,v)

#define IHTMLBodyElement2_get_onbeforeprint(This,p)	\
    (This)->lpVtbl -> get_onbeforeprint(This,p)

#define IHTMLBodyElement2_put_onafterprint(This,v)	\
    (This)->lpVtbl -> put_onafterprint(This,v)

#define IHTMLBodyElement2_get_onafterprint(This,p)	\
    (This)->lpVtbl -> get_onafterprint(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement2_put_onbeforeprint_Proxy( 
    IHTMLBodyElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement2_put_onbeforeprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement2_get_onbeforeprint_Proxy( 
    IHTMLBodyElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement2_get_onbeforeprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement2_put_onafterprint_Proxy( 
    IHTMLBodyElement2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBodyElement2_put_onafterprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBodyElement2_get_onafterprint_Proxy( 
    IHTMLBodyElement2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBodyElement2_get_onafterprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBodyElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLBody_DISPINTERFACE_DEFINED__
#define __DispHTMLBody_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLBody */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLBody;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f507-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLBody : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLBodyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLBody * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLBody * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLBody * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLBody * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLBody * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLBody * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLBody * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLBodyVtbl;

    interface DispHTMLBody
    {
        CONST_VTBL struct DispHTMLBodyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLBody_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLBody_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLBody_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLBody_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLBody_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLBody_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLBody_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLBody_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLBody;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f24a-98b5-11cf-bb82-00aa00bdce0b")
HTMLBody;
#endif

#ifndef __IHTMLFontElement_INTERFACE_DEFINED__
#define __IHTMLFontElement_INTERFACE_DEFINED__

/* interface IHTMLFontElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1d9-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLFontElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_face( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_face( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFontElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFontElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFontElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFontElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFontElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFontElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFontElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IHTMLFontElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IHTMLFontElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_face )( 
            IHTMLFontElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_face )( 
            IHTMLFontElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLFontElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLFontElement * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLFontElementVtbl;

    interface IHTMLFontElement
    {
        CONST_VTBL struct IHTMLFontElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFontElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IHTMLFontElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IHTMLFontElement_put_face(This,v)	\
    (This)->lpVtbl -> put_face(This,v)

#define IHTMLFontElement_get_face(This,p)	\
    (This)->lpVtbl -> get_face(This,p)

#define IHTMLFontElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLFontElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_put_color_Proxy( 
    IHTMLFontElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFontElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_get_color_Proxy( 
    IHTMLFontElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFontElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_put_face_Proxy( 
    IHTMLFontElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFontElement_put_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_get_face_Proxy( 
    IHTMLFontElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFontElement_get_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_put_size_Proxy( 
    IHTMLFontElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFontElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFontElement_get_size_Proxy( 
    IHTMLFontElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFontElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFontElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLFontElement_DISPINTERFACE_DEFINED__
#define __DispHTMLFontElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLFontElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f512-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLFontElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLFontElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLFontElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLFontElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLFontElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLFontElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLFontElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLFontElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLFontElementVtbl;

    interface DispHTMLFontElement
    {
        CONST_VTBL struct DispHTMLFontElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLFontElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLFontElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27b-98b5-11cf-bb82-00aa00bdce0b")
HTMLFontElement;
#endif

#ifndef __HTMLAnchorEvents2_DISPINTERFACE_DEFINED__
#define __HTMLAnchorEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLAnchorEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLAnchorEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f610-98b5-11cf-bb82-00aa00bdce0b")
    HTMLAnchorEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLAnchorEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLAnchorEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLAnchorEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLAnchorEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLAnchorEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLAnchorEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLAnchorEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLAnchorEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLAnchorEvents2Vtbl;

    interface HTMLAnchorEvents2
    {
        CONST_VTBL struct HTMLAnchorEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLAnchorEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLAnchorEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLAnchorEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLAnchorEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLAnchorEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLAnchorEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLAnchorEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLAnchorEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLAnchorEvents_DISPINTERFACE_DEFINED__
#define __HTMLAnchorEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLAnchorEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLAnchorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f29d-98b5-11cf-bb82-00aa00bdce0b")
    HTMLAnchorEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLAnchorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLAnchorEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLAnchorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLAnchorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLAnchorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLAnchorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLAnchorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLAnchorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLAnchorEventsVtbl;

    interface HTMLAnchorEvents
    {
        CONST_VTBL struct HTMLAnchorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLAnchorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLAnchorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLAnchorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLAnchorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLAnchorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLAnchorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLAnchorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLAnchorEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLAnchorElement_INTERFACE_DEFINED__
#define __IHTMLAnchorElement_INTERFACE_DEFINED__

/* interface IHTMLAnchorElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAnchorElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1da-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAnchorElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rel( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rel( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rev( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rev( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_urn( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_urn( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_Methods( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_Methods( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_host( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_host( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hostname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hostname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pathname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pathname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_port( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_port( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_protocol( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_search( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_search( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hash( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hash( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onblur( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onblur( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accessKey( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accessKey( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocolLong( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mimeType( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nameProp( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_tabIndex( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_tabIndex( 
            /* [out][retval] */ short *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAnchorElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAnchorElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAnchorElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAnchorElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAnchorElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAnchorElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAnchorElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAnchorElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_target )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rel )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rel )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rev )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rev )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_urn )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_urn )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Methods )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Methods )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_host )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_host )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hostname )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hostname )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pathname )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pathname )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_port )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_port )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_protocol )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocol )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_search )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_search )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hash )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hash )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onblur )( 
            IHTMLAnchorElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onblur )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocus )( 
            IHTMLAnchorElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocus )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accessKey )( 
            IHTMLAnchorElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accessKey )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocolLong )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mimeType )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nameProp )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tabIndex )( 
            IHTMLAnchorElement * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tabIndex )( 
            IHTMLAnchorElement * This,
            /* [out][retval] */ short *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLAnchorElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *blur )( 
            IHTMLAnchorElement * This);
        
        END_INTERFACE
    } IHTMLAnchorElementVtbl;

    interface IHTMLAnchorElement
    {
        CONST_VTBL struct IHTMLAnchorElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAnchorElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAnchorElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAnchorElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAnchorElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAnchorElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAnchorElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAnchorElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAnchorElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLAnchorElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLAnchorElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IHTMLAnchorElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IHTMLAnchorElement_put_rel(This,v)	\
    (This)->lpVtbl -> put_rel(This,v)

#define IHTMLAnchorElement_get_rel(This,p)	\
    (This)->lpVtbl -> get_rel(This,p)

#define IHTMLAnchorElement_put_rev(This,v)	\
    (This)->lpVtbl -> put_rev(This,v)

#define IHTMLAnchorElement_get_rev(This,p)	\
    (This)->lpVtbl -> get_rev(This,p)

#define IHTMLAnchorElement_put_urn(This,v)	\
    (This)->lpVtbl -> put_urn(This,v)

#define IHTMLAnchorElement_get_urn(This,p)	\
    (This)->lpVtbl -> get_urn(This,p)

#define IHTMLAnchorElement_put_Methods(This,v)	\
    (This)->lpVtbl -> put_Methods(This,v)

#define IHTMLAnchorElement_get_Methods(This,p)	\
    (This)->lpVtbl -> get_Methods(This,p)

#define IHTMLAnchorElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLAnchorElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLAnchorElement_put_host(This,v)	\
    (This)->lpVtbl -> put_host(This,v)

#define IHTMLAnchorElement_get_host(This,p)	\
    (This)->lpVtbl -> get_host(This,p)

#define IHTMLAnchorElement_put_hostname(This,v)	\
    (This)->lpVtbl -> put_hostname(This,v)

#define IHTMLAnchorElement_get_hostname(This,p)	\
    (This)->lpVtbl -> get_hostname(This,p)

#define IHTMLAnchorElement_put_pathname(This,v)	\
    (This)->lpVtbl -> put_pathname(This,v)

#define IHTMLAnchorElement_get_pathname(This,p)	\
    (This)->lpVtbl -> get_pathname(This,p)

#define IHTMLAnchorElement_put_port(This,v)	\
    (This)->lpVtbl -> put_port(This,v)

#define IHTMLAnchorElement_get_port(This,p)	\
    (This)->lpVtbl -> get_port(This,p)

#define IHTMLAnchorElement_put_protocol(This,v)	\
    (This)->lpVtbl -> put_protocol(This,v)

#define IHTMLAnchorElement_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IHTMLAnchorElement_put_search(This,v)	\
    (This)->lpVtbl -> put_search(This,v)

#define IHTMLAnchorElement_get_search(This,p)	\
    (This)->lpVtbl -> get_search(This,p)

#define IHTMLAnchorElement_put_hash(This,v)	\
    (This)->lpVtbl -> put_hash(This,v)

#define IHTMLAnchorElement_get_hash(This,p)	\
    (This)->lpVtbl -> get_hash(This,p)

#define IHTMLAnchorElement_put_onblur(This,v)	\
    (This)->lpVtbl -> put_onblur(This,v)

#define IHTMLAnchorElement_get_onblur(This,p)	\
    (This)->lpVtbl -> get_onblur(This,p)

#define IHTMLAnchorElement_put_onfocus(This,v)	\
    (This)->lpVtbl -> put_onfocus(This,v)

#define IHTMLAnchorElement_get_onfocus(This,p)	\
    (This)->lpVtbl -> get_onfocus(This,p)

#define IHTMLAnchorElement_put_accessKey(This,v)	\
    (This)->lpVtbl -> put_accessKey(This,v)

#define IHTMLAnchorElement_get_accessKey(This,p)	\
    (This)->lpVtbl -> get_accessKey(This,p)

#define IHTMLAnchorElement_get_protocolLong(This,p)	\
    (This)->lpVtbl -> get_protocolLong(This,p)

#define IHTMLAnchorElement_get_mimeType(This,p)	\
    (This)->lpVtbl -> get_mimeType(This,p)

#define IHTMLAnchorElement_get_nameProp(This,p)	\
    (This)->lpVtbl -> get_nameProp(This,p)

#define IHTMLAnchorElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IHTMLAnchorElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IHTMLAnchorElement_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLAnchorElement_blur(This)	\
    (This)->lpVtbl -> blur(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_href_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_href_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_target_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_target_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_rel_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_rel_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_rev_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_rev_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_urn_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_urn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_urn_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_urn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_Methods_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_Methods_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_Methods_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_Methods_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_name_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_name_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_host_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_host_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_hostname_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_hostname_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_pathname_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_pathname_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_port_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_port_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_protocol_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_protocol_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_search_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_search_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_hash_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_hash_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_onblur_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLAnchorElement_put_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_onblur_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLAnchorElement_get_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_onfocus_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLAnchorElement_put_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_onfocus_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLAnchorElement_get_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_accessKey_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement_put_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_accessKey_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_protocolLong_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_protocolLong_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_mimeType_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_nameProp_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement_get_nameProp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_put_tabIndex_Proxy( 
    IHTMLAnchorElement * This,
    /* [in] */ short v);


void __RPC_STUB IHTMLAnchorElement_put_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_get_tabIndex_Proxy( 
    IHTMLAnchorElement * This,
    /* [out][retval] */ short *p);


void __RPC_STUB IHTMLAnchorElement_get_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_focus_Proxy( 
    IHTMLAnchorElement * This);


void __RPC_STUB IHTMLAnchorElement_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement_blur_Proxy( 
    IHTMLAnchorElement * This);


void __RPC_STUB IHTMLAnchorElement_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAnchorElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLAnchorElement2_INTERFACE_DEFINED__
#define __IHTMLAnchorElement2_INTERFACE_DEFINED__

/* interface IHTMLAnchorElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAnchorElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f825-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAnchorElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_charset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_charset( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_coords( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_coords( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hreflang( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hreflang( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_shape( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_shape( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAnchorElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAnchorElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAnchorElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAnchorElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_charset )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_charset )( 
            IHTMLAnchorElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_coords )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_coords )( 
            IHTMLAnchorElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hreflang )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hreflang )( 
            IHTMLAnchorElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_shape )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_shape )( 
            IHTMLAnchorElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLAnchorElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLAnchorElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLAnchorElement2Vtbl;

    interface IHTMLAnchorElement2
    {
        CONST_VTBL struct IHTMLAnchorElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAnchorElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAnchorElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAnchorElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAnchorElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAnchorElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAnchorElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAnchorElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAnchorElement2_put_charset(This,v)	\
    (This)->lpVtbl -> put_charset(This,v)

#define IHTMLAnchorElement2_get_charset(This,p)	\
    (This)->lpVtbl -> get_charset(This,p)

#define IHTMLAnchorElement2_put_coords(This,v)	\
    (This)->lpVtbl -> put_coords(This,v)

#define IHTMLAnchorElement2_get_coords(This,p)	\
    (This)->lpVtbl -> get_coords(This,p)

#define IHTMLAnchorElement2_put_hreflang(This,v)	\
    (This)->lpVtbl -> put_hreflang(This,v)

#define IHTMLAnchorElement2_get_hreflang(This,p)	\
    (This)->lpVtbl -> get_hreflang(This,p)

#define IHTMLAnchorElement2_put_shape(This,v)	\
    (This)->lpVtbl -> put_shape(This,v)

#define IHTMLAnchorElement2_get_shape(This,p)	\
    (This)->lpVtbl -> get_shape(This,p)

#define IHTMLAnchorElement2_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLAnchorElement2_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_put_charset_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement2_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_get_charset_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement2_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_put_coords_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement2_put_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_get_coords_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement2_get_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_put_hreflang_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement2_put_hreflang_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_get_hreflang_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement2_get_hreflang_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_put_shape_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement2_put_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_get_shape_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement2_get_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_put_type_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAnchorElement2_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAnchorElement2_get_type_Proxy( 
    IHTMLAnchorElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAnchorElement2_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAnchorElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLAnchorElement_DISPINTERFACE_DEFINED__
#define __DispHTMLAnchorElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLAnchorElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLAnchorElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f502-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLAnchorElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLAnchorElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLAnchorElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLAnchorElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLAnchorElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLAnchorElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLAnchorElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLAnchorElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLAnchorElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLAnchorElementVtbl;

    interface DispHTMLAnchorElement
    {
        CONST_VTBL struct DispHTMLAnchorElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLAnchorElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLAnchorElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLAnchorElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLAnchorElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLAnchorElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLAnchorElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLAnchorElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLAnchorElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLAnchorElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f248-98b5-11cf-bb82-00aa00bdce0b")
HTMLAnchorElement;
#endif

#ifndef __HTMLLabelEvents2_DISPINTERFACE_DEFINED__
#define __HTMLLabelEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLLabelEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLLabelEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61c-98b5-11cf-bb82-00aa00bdce0b")
    HTMLLabelEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLLabelEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLLabelEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLLabelEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLLabelEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLLabelEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLLabelEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLLabelEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLLabelEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLLabelEvents2Vtbl;

    interface HTMLLabelEvents2
    {
        CONST_VTBL struct HTMLLabelEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLLabelEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLLabelEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLLabelEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLLabelEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLLabelEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLLabelEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLLabelEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLLabelEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLLabelEvents_DISPINTERFACE_DEFINED__
#define __HTMLLabelEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLLabelEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLLabelEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f329-98b5-11cf-bb82-00aa00bdce0b")
    HTMLLabelEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLLabelEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLLabelEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLLabelEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLLabelEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLLabelEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLLabelEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLLabelEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLLabelEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLLabelEventsVtbl;

    interface HTMLLabelEvents
    {
        CONST_VTBL struct HTMLLabelEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLLabelEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLLabelEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLLabelEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLLabelEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLLabelEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLLabelEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLLabelEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLLabelEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLLabelElement_INTERFACE_DEFINED__
#define __IHTMLLabelElement_INTERFACE_DEFINED__

/* interface IHTMLLabelElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLabelElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f32a-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLabelElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_htmlFor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlFor( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accessKey( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accessKey( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLabelElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLabelElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLabelElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLabelElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLabelElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLabelElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLabelElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLabelElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_htmlFor )( 
            IHTMLLabelElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlFor )( 
            IHTMLLabelElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accessKey )( 
            IHTMLLabelElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accessKey )( 
            IHTMLLabelElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLLabelElementVtbl;

    interface IHTMLLabelElement
    {
        CONST_VTBL struct IHTMLLabelElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLabelElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLabelElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLabelElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLabelElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLabelElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLabelElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLabelElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLabelElement_put_htmlFor(This,v)	\
    (This)->lpVtbl -> put_htmlFor(This,v)

#define IHTMLLabelElement_get_htmlFor(This,p)	\
    (This)->lpVtbl -> get_htmlFor(This,p)

#define IHTMLLabelElement_put_accessKey(This,v)	\
    (This)->lpVtbl -> put_accessKey(This,v)

#define IHTMLLabelElement_get_accessKey(This,p)	\
    (This)->lpVtbl -> get_accessKey(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLabelElement_put_htmlFor_Proxy( 
    IHTMLLabelElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLabelElement_put_htmlFor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLabelElement_get_htmlFor_Proxy( 
    IHTMLLabelElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLabelElement_get_htmlFor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLabelElement_put_accessKey_Proxy( 
    IHTMLLabelElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLabelElement_put_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLabelElement_get_accessKey_Proxy( 
    IHTMLLabelElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLabelElement_get_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLabelElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLLabelElement2_INTERFACE_DEFINED__
#define __IHTMLLabelElement2_INTERFACE_DEFINED__

/* interface IHTMLLabelElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLabelElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f832-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLabelElement2 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLabelElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLabelElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLabelElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLabelElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLabelElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLabelElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLabelElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLabelElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLLabelElement2 * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        END_INTERFACE
    } IHTMLLabelElement2Vtbl;

    interface IHTMLLabelElement2
    {
        CONST_VTBL struct IHTMLLabelElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLabelElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLabelElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLabelElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLabelElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLabelElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLabelElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLabelElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLabelElement2_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLabelElement2_get_form_Proxy( 
    IHTMLLabelElement2 * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLLabelElement2_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLabelElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLLabelElement_DISPINTERFACE_DEFINED__
#define __DispHTMLLabelElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLLabelElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLLabelElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f522-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLLabelElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLLabelElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLLabelElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLLabelElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLLabelElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLLabelElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLLabelElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLLabelElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLLabelElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLLabelElementVtbl;

    interface DispHTMLLabelElement
    {
        CONST_VTBL struct DispHTMLLabelElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLLabelElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLLabelElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLLabelElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLLabelElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLLabelElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLLabelElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLLabelElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLLabelElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLLabelElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f32b-98b5-11cf-bb82-00aa00bdce0b")
HTMLLabelElement;
#endif

#ifndef __IHTMLListElement_INTERFACE_DEFINED__
#define __IHTMLListElement_INTERFACE_DEFINED__

/* interface IHTMLListElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f20e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLListElement : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTMLListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTMLListElementVtbl;

    interface IHTMLListElement
    {
        CONST_VTBL struct IHTMLListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLListElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLListElement2_INTERFACE_DEFINED__
#define __IHTMLListElement2_INTERFACE_DEFINED__

/* interface IHTMLListElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLListElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f822-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLListElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLListElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLListElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLListElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLListElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLListElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLListElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLListElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLListElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_compact )( 
            IHTMLListElement2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_compact )( 
            IHTMLListElement2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLListElement2Vtbl;

    interface IHTMLListElement2
    {
        CONST_VTBL struct IHTMLListElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLListElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLListElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLListElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLListElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLListElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLListElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLListElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLListElement2_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IHTMLListElement2_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLListElement2_put_compact_Proxy( 
    IHTMLListElement2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLListElement2_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLListElement2_get_compact_Proxy( 
    IHTMLListElement2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLListElement2_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLListElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLListElement_DISPINTERFACE_DEFINED__
#define __DispHTMLListElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLListElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f525-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLListElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLListElementVtbl;

    interface DispHTMLListElement
    {
        CONST_VTBL struct DispHTMLListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLListElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLListElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f272-98b5-11cf-bb82-00aa00bdce0b")
HTMLListElement;
#endif

#ifndef __IHTMLUListElement_INTERFACE_DEFINED__
#define __IHTMLUListElement_INTERFACE_DEFINED__

/* interface IHTMLUListElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLUListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1dd-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLUListElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLUListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLUListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLUListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLUListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLUListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLUListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLUListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLUListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_compact )( 
            IHTMLUListElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_compact )( 
            IHTMLUListElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLUListElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLUListElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLUListElementVtbl;

    interface IHTMLUListElement
    {
        CONST_VTBL struct IHTMLUListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLUListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLUListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLUListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLUListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLUListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLUListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLUListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLUListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IHTMLUListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#define IHTMLUListElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLUListElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLUListElement_put_compact_Proxy( 
    IHTMLUListElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLUListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLUListElement_get_compact_Proxy( 
    IHTMLUListElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLUListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLUListElement_put_type_Proxy( 
    IHTMLUListElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLUListElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLUListElement_get_type_Proxy( 
    IHTMLUListElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLUListElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLUListElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLUListElement_DISPINTERFACE_DEFINED__
#define __DispHTMLUListElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLUListElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLUListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f538-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLUListElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLUListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLUListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLUListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLUListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLUListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLUListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLUListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLUListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLUListElementVtbl;

    interface DispHTMLUListElement
    {
        CONST_VTBL struct DispHTMLUListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLUListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLUListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLUListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLUListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLUListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLUListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLUListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLUListElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLUListElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f269-98b5-11cf-bb82-00aa00bdce0b")
HTMLUListElement;
#endif

#ifndef __IHTMLOListElement_INTERFACE_DEFINED__
#define __IHTMLOListElement_INTERFACE_DEFINED__

/* interface IHTMLOListElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1de-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOListElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_compact )( 
            IHTMLOListElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_compact )( 
            IHTMLOListElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_start )( 
            IHTMLOListElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_start )( 
            IHTMLOListElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLOListElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLOListElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLOListElementVtbl;

    interface IHTMLOListElement
    {
        CONST_VTBL struct IHTMLOListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IHTMLOListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#define IHTMLOListElement_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define IHTMLOListElement_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#define IHTMLOListElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLOListElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_put_compact_Proxy( 
    IHTMLOListElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_get_compact_Proxy( 
    IHTMLOListElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_put_start_Proxy( 
    IHTMLOListElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLOListElement_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_get_start_Proxy( 
    IHTMLOListElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLOListElement_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_put_type_Proxy( 
    IHTMLOListElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOListElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOListElement_get_type_Proxy( 
    IHTMLOListElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOListElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOListElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLOListElement_DISPINTERFACE_DEFINED__
#define __DispHTMLOListElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLOListElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLOListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f52a-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLOListElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLOListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLOListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLOListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLOListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLOListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLOListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLOListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLOListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLOListElementVtbl;

    interface DispHTMLOListElement
    {
        CONST_VTBL struct DispHTMLOListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLOListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLOListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLOListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLOListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLOListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLOListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLOListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLOListElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLOListElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f270-98b5-11cf-bb82-00aa00bdce0b")
HTMLOListElement;
#endif

#ifndef __IHTMLLIElement_INTERFACE_DEFINED__
#define __IHTMLLIElement_INTERFACE_DEFINED__

/* interface IHTMLLIElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1e0-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLLIElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLIElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLIElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLIElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLIElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLIElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLLIElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLLIElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLLIElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLLIElement * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLLIElementVtbl;

    interface IHTMLLIElement
    {
        CONST_VTBL struct IHTMLLIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLIElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLIElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLIElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLIElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLIElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLIElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLIElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLIElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLLIElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLLIElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLLIElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLIElement_put_type_Proxy( 
    IHTMLLIElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLIElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLIElement_get_type_Proxy( 
    IHTMLLIElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLIElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLIElement_put_value_Proxy( 
    IHTMLLIElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLLIElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLIElement_get_value_Proxy( 
    IHTMLLIElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLLIElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLIElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLLIElement_DISPINTERFACE_DEFINED__
#define __DispHTMLLIElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLLIElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLLIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f523-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLLIElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLLIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLLIElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLLIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLLIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLLIElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLLIElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLLIElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLLIElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLLIElementVtbl;

    interface DispHTMLLIElement
    {
        CONST_VTBL struct DispHTMLLIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLLIElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLLIElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLLIElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLLIElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLLIElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLLIElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLLIElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLLIElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLLIElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f273-98b5-11cf-bb82-00aa00bdce0b")
HTMLLIElement;
#endif

#ifndef __IHTMLBlockElement_INTERFACE_DEFINED__
#define __IHTMLBlockElement_INTERFACE_DEFINED__

/* interface IHTMLBlockElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBlockElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f208-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBlockElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_clear( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clear( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBlockElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBlockElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBlockElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBlockElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBlockElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBlockElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBlockElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBlockElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clear )( 
            IHTMLBlockElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clear )( 
            IHTMLBlockElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLBlockElementVtbl;

    interface IHTMLBlockElement
    {
        CONST_VTBL struct IHTMLBlockElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBlockElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBlockElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBlockElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBlockElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBlockElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBlockElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBlockElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBlockElement_put_clear(This,v)	\
    (This)->lpVtbl -> put_clear(This,v)

#define IHTMLBlockElement_get_clear(This,p)	\
    (This)->lpVtbl -> get_clear(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement_put_clear_Proxy( 
    IHTMLBlockElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBlockElement_put_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement_get_clear_Proxy( 
    IHTMLBlockElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBlockElement_get_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBlockElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLBlockElement2_INTERFACE_DEFINED__
#define __IHTMLBlockElement2_INTERFACE_DEFINED__

/* interface IHTMLBlockElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBlockElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f823-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBlockElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_cite( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_cite( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBlockElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBlockElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBlockElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBlockElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBlockElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBlockElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBlockElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBlockElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cite )( 
            IHTMLBlockElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cite )( 
            IHTMLBlockElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLBlockElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLBlockElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLBlockElement2Vtbl;

    interface IHTMLBlockElement2
    {
        CONST_VTBL struct IHTMLBlockElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBlockElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBlockElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBlockElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBlockElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBlockElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBlockElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBlockElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBlockElement2_put_cite(This,v)	\
    (This)->lpVtbl -> put_cite(This,v)

#define IHTMLBlockElement2_get_cite(This,p)	\
    (This)->lpVtbl -> get_cite(This,p)

#define IHTMLBlockElement2_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLBlockElement2_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement2_put_cite_Proxy( 
    IHTMLBlockElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBlockElement2_put_cite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement2_get_cite_Proxy( 
    IHTMLBlockElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBlockElement2_get_cite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement2_put_width_Proxy( 
    IHTMLBlockElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBlockElement2_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBlockElement2_get_width_Proxy( 
    IHTMLBlockElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBlockElement2_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBlockElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLBlockElement_DISPINTERFACE_DEFINED__
#define __DispHTMLBlockElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLBlockElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLBlockElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f506-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLBlockElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLBlockElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLBlockElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLBlockElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLBlockElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLBlockElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLBlockElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLBlockElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLBlockElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLBlockElementVtbl;

    interface DispHTMLBlockElement
    {
        CONST_VTBL struct DispHTMLBlockElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLBlockElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLBlockElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLBlockElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLBlockElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLBlockElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLBlockElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLBlockElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLBlockElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLBlockElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f281-98b5-11cf-bb82-00aa00bdce0b")
HTMLBlockElement;
#endif

#ifndef __IHTMLDivElement_INTERFACE_DEFINED__
#define __IHTMLDivElement_INTERFACE_DEFINED__

/* interface IHTMLDivElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDivElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f200-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDivElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDivElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDivElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDivElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDivElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDivElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDivElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDivElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDivElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLDivElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLDivElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noWrap )( 
            IHTMLDivElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noWrap )( 
            IHTMLDivElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLDivElementVtbl;

    interface IHTMLDivElement
    {
        CONST_VTBL struct IHTMLDivElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDivElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDivElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDivElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDivElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDivElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDivElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDivElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDivElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLDivElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLDivElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IHTMLDivElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDivElement_put_align_Proxy( 
    IHTMLDivElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDivElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDivElement_get_align_Proxy( 
    IHTMLDivElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDivElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDivElement_put_noWrap_Proxy( 
    IHTMLDivElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDivElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDivElement_get_noWrap_Proxy( 
    IHTMLDivElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDivElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDivElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDivElement_DISPINTERFACE_DEFINED__
#define __DispHTMLDivElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDivElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDivElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f50c-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDivElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDivElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDivElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDivElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDivElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDivElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDivElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDivElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDivElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDivElementVtbl;

    interface DispHTMLDivElement
    {
        CONST_VTBL struct DispHTMLDivElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDivElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDivElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDivElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDivElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDivElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDivElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDivElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDivElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDivElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27e-98b5-11cf-bb82-00aa00bdce0b")
HTMLDivElement;
#endif

#ifndef __IHTMLDDElement_INTERFACE_DEFINED__
#define __IHTMLDDElement_INTERFACE_DEFINED__

/* interface IHTMLDDElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDDElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDDElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDDElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDDElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDDElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDDElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDDElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDDElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDDElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDDElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noWrap )( 
            IHTMLDDElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noWrap )( 
            IHTMLDDElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLDDElementVtbl;

    interface IHTMLDDElement
    {
        CONST_VTBL struct IHTMLDDElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDDElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDDElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDDElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDDElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDDElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDDElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDDElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDDElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IHTMLDDElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDDElement_put_noWrap_Proxy( 
    IHTMLDDElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDDElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDDElement_get_noWrap_Proxy( 
    IHTMLDDElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDDElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDDElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDDElement_DISPINTERFACE_DEFINED__
#define __DispHTMLDDElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDDElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDDElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f50b-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDDElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDDElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDDElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDDElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDDElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDDElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDDElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDDElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDDElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDDElementVtbl;

    interface DispHTMLDDElement
    {
        CONST_VTBL struct DispHTMLDDElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDDElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDDElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDDElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDDElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDDElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDDElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDDElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDDElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDDElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27f-98b5-11cf-bb82-00aa00bdce0b")
HTMLDDElement;
#endif

#ifndef __IHTMLDTElement_INTERFACE_DEFINED__
#define __IHTMLDTElement_INTERFACE_DEFINED__

/* interface IHTMLDTElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDTElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f3-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDTElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDTElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDTElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDTElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDTElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDTElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDTElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDTElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDTElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noWrap )( 
            IHTMLDTElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noWrap )( 
            IHTMLDTElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLDTElementVtbl;

    interface IHTMLDTElement
    {
        CONST_VTBL struct IHTMLDTElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDTElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDTElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDTElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDTElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDTElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDTElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDTElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDTElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IHTMLDTElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDTElement_put_noWrap_Proxy( 
    IHTMLDTElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDTElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDTElement_get_noWrap_Proxy( 
    IHTMLDTElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDTElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDTElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDTElement_DISPINTERFACE_DEFINED__
#define __DispHTMLDTElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDTElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDTElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f50d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDTElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDTElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDTElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDTElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDTElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDTElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDTElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDTElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDTElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDTElementVtbl;

    interface DispHTMLDTElement
    {
        CONST_VTBL struct DispHTMLDTElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDTElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDTElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDTElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDTElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDTElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDTElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDTElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDTElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDTElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27c-98b5-11cf-bb82-00aa00bdce0b")
HTMLDTElement;
#endif

#ifndef __IHTMLBRElement_INTERFACE_DEFINED__
#define __IHTMLBRElement_INTERFACE_DEFINED__

/* interface IHTMLBRElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f0-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBRElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_clear( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clear( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBRElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBRElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBRElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBRElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBRElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBRElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBRElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clear )( 
            IHTMLBRElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clear )( 
            IHTMLBRElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLBRElementVtbl;

    interface IHTMLBRElement
    {
        CONST_VTBL struct IHTMLBRElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBRElement_put_clear(This,v)	\
    (This)->lpVtbl -> put_clear(This,v)

#define IHTMLBRElement_get_clear(This,p)	\
    (This)->lpVtbl -> get_clear(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBRElement_put_clear_Proxy( 
    IHTMLBRElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBRElement_put_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBRElement_get_clear_Proxy( 
    IHTMLBRElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBRElement_get_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBRElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLBRElement_DISPINTERFACE_DEFINED__
#define __DispHTMLBRElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLBRElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLBRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f53a-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLBRElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLBRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLBRElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLBRElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLBRElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLBRElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLBRElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLBRElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLBRElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLBRElementVtbl;

    interface DispHTMLBRElement
    {
        CONST_VTBL struct DispHTMLBRElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLBRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLBRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLBRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLBRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLBRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLBRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLBRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLBRElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLBRElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f280-98b5-11cf-bb82-00aa00bdce0b")
HTMLBRElement;
#endif

#ifndef __IHTMLDListElement_INTERFACE_DEFINED__
#define __IHTMLDListElement_INTERFACE_DEFINED__

/* interface IHTMLDListElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f1-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDListElement : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_compact )( 
            IHTMLDListElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_compact )( 
            IHTMLDListElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLDListElementVtbl;

    interface IHTMLDListElement
    {
        CONST_VTBL struct IHTMLDListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IHTMLDListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDListElement_put_compact_Proxy( 
    IHTMLDListElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDListElement_get_compact_Proxy( 
    IHTMLDListElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDListElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDListElement_DISPINTERFACE_DEFINED__
#define __DispHTMLDListElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDListElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f53b-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDListElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDListElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDListElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDListElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDListElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDListElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDListElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDListElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDListElementVtbl;

    interface DispHTMLDListElement
    {
        CONST_VTBL struct DispHTMLDListElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDListElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDListElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27d-98b5-11cf-bb82-00aa00bdce0b")
HTMLDListElement;
#endif

#ifndef __IHTMLHRElement_INTERFACE_DEFINED__
#define __IHTMLHRElement_INTERFACE_DEFINED__

/* interface IHTMLHRElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLHRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f4-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLHRElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_noShade( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_noShade( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLHRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLHRElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLHRElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLHRElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLHRElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLHRElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLHRElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLHRElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLHRElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLHRElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IHTMLHRElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IHTMLHRElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noShade )( 
            IHTMLHRElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noShade )( 
            IHTMLHRElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLHRElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLHRElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLHRElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLHRElement * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLHRElementVtbl;

    interface IHTMLHRElement
    {
        CONST_VTBL struct IHTMLHRElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLHRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLHRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLHRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLHRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLHRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLHRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLHRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLHRElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLHRElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLHRElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IHTMLHRElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IHTMLHRElement_put_noShade(This,v)	\
    (This)->lpVtbl -> put_noShade(This,v)

#define IHTMLHRElement_get_noShade(This,p)	\
    (This)->lpVtbl -> get_noShade(This,p)

#define IHTMLHRElement_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLHRElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLHRElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLHRElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_put_align_Proxy( 
    IHTMLHRElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLHRElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_get_align_Proxy( 
    IHTMLHRElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLHRElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_put_color_Proxy( 
    IHTMLHRElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLHRElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_get_color_Proxy( 
    IHTMLHRElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLHRElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_put_noShade_Proxy( 
    IHTMLHRElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLHRElement_put_noShade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_get_noShade_Proxy( 
    IHTMLHRElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLHRElement_get_noShade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_put_width_Proxy( 
    IHTMLHRElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLHRElement_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_get_width_Proxy( 
    IHTMLHRElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLHRElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_put_size_Proxy( 
    IHTMLHRElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLHRElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHRElement_get_size_Proxy( 
    IHTMLHRElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLHRElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLHRElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLHRElement_DISPINTERFACE_DEFINED__
#define __DispHTMLHRElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLHRElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLHRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f53d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLHRElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLHRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLHRElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLHRElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLHRElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLHRElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLHRElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLHRElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLHRElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLHRElementVtbl;

    interface DispHTMLHRElement
    {
        CONST_VTBL struct DispHTMLHRElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLHRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLHRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLHRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLHRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLHRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLHRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLHRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLHRElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLHRElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f252-98b5-11cf-bb82-00aa00bdce0b")
HTMLHRElement;
#endif

#ifndef __IHTMLParaElement_INTERFACE_DEFINED__
#define __IHTMLParaElement_INTERFACE_DEFINED__

/* interface IHTMLParaElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLParaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLParaElement : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLParaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLParaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLParaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLParaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLParaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLParaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLParaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLParaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLParaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLParaElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLParaElementVtbl;

    interface IHTMLParaElement
    {
        CONST_VTBL struct IHTMLParaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLParaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLParaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLParaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLParaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLParaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLParaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLParaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLParaElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLParaElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLParaElement_put_align_Proxy( 
    IHTMLParaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLParaElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLParaElement_get_align_Proxy( 
    IHTMLParaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLParaElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLParaElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLParaElement_DISPINTERFACE_DEFINED__
#define __DispHTMLParaElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLParaElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLParaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f52c-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLParaElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLParaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLParaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLParaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLParaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLParaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLParaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLParaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLParaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLParaElementVtbl;

    interface DispHTMLParaElement
    {
        CONST_VTBL struct DispHTMLParaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLParaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLParaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLParaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLParaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLParaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLParaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLParaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLParaElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLParaElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f26f-98b5-11cf-bb82-00aa00bdce0b")
HTMLParaElement;
#endif

#ifndef __IHTMLElementCollection2_INTERFACE_DEFINED__
#define __IHTMLElementCollection2_INTERFACE_DEFINED__

/* interface IHTMLElementCollection2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElementCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5ee-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElementCollection2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE urns( 
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElementCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElementCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElementCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElementCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElementCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElementCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElementCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElementCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *urns )( 
            IHTMLElementCollection2 * This,
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLElementCollection2Vtbl;

    interface IHTMLElementCollection2
    {
        CONST_VTBL struct IHTMLElementCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElementCollection2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElementCollection2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElementCollection2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElementCollection2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElementCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElementCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElementCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElementCollection2_urns(This,urn,pdisp)	\
    (This)->lpVtbl -> urns(This,urn,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection2_urns_Proxy( 
    IHTMLElementCollection2 * This,
    /* [in] */ VARIANT urn,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLElementCollection2_urns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElementCollection2_INTERFACE_DEFINED__ */


#ifndef __IHTMLElementCollection3_INTERFACE_DEFINED__
#define __IHTMLElementCollection3_INTERFACE_DEFINED__

/* interface IHTMLElementCollection3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLElementCollection3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f835-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLElementCollection3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLElementCollection3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLElementCollection3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLElementCollection3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLElementCollection3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLElementCollection3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLElementCollection3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLElementCollection3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLElementCollection3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IHTMLElementCollection3 * This,
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLElementCollection3Vtbl;

    interface IHTMLElementCollection3
    {
        CONST_VTBL struct IHTMLElementCollection3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLElementCollection3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLElementCollection3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLElementCollection3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLElementCollection3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLElementCollection3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLElementCollection3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLElementCollection3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLElementCollection3_namedItem(This,name,pdisp)	\
    (This)->lpVtbl -> namedItem(This,name,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLElementCollection3_namedItem_Proxy( 
    IHTMLElementCollection3 * This,
    /* [in] */ BSTR name,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLElementCollection3_namedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLElementCollection3_INTERFACE_DEFINED__ */


#ifndef __DispHTMLElementCollection_DISPINTERFACE_DEFINED__
#define __DispHTMLElementCollection_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLElementCollection */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLElementCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f56b-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLElementCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLElementCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLElementCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLElementCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLElementCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLElementCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLElementCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLElementCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLElementCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLElementCollectionVtbl;

    interface DispHTMLElementCollection
    {
        CONST_VTBL struct DispHTMLElementCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLElementCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLElementCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLElementCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLElementCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLElementCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLElementCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLElementCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLElementCollection_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLElementCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4cb-98b5-11cf-bb82-00aa00bdce0b")
HTMLElementCollection;
#endif

#ifndef __IHTMLHeaderElement_INTERFACE_DEFINED__
#define __IHTMLHeaderElement_INTERFACE_DEFINED__

/* interface IHTMLHeaderElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLHeaderElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f1f6-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLHeaderElement : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLHeaderElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLHeaderElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLHeaderElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLHeaderElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLHeaderElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLHeaderElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLHeaderElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLHeaderElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLHeaderElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLHeaderElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLHeaderElementVtbl;

    interface IHTMLHeaderElement
    {
        CONST_VTBL struct IHTMLHeaderElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLHeaderElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLHeaderElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLHeaderElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLHeaderElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLHeaderElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLHeaderElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLHeaderElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLHeaderElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLHeaderElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHeaderElement_put_align_Proxy( 
    IHTMLHeaderElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLHeaderElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHeaderElement_get_align_Proxy( 
    IHTMLHeaderElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLHeaderElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLHeaderElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLHeaderElement_DISPINTERFACE_DEFINED__
#define __DispHTMLHeaderElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLHeaderElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLHeaderElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f515-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLHeaderElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLHeaderElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLHeaderElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLHeaderElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLHeaderElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLHeaderElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLHeaderElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLHeaderElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLHeaderElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLHeaderElementVtbl;

    interface DispHTMLHeaderElement
    {
        CONST_VTBL struct DispHTMLHeaderElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLHeaderElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLHeaderElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLHeaderElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLHeaderElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLHeaderElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLHeaderElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLHeaderElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLHeaderElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLHeaderElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f27a-98b5-11cf-bb82-00aa00bdce0b")
HTMLHeaderElement;
#endif

#ifndef __HTMLSelectElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLSelectElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLSelectElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLSelectElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f622-98b5-11cf-bb82-00aa00bdce0b")
    HTMLSelectElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLSelectElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLSelectElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLSelectElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLSelectElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLSelectElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLSelectElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLSelectElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLSelectElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLSelectElementEvents2Vtbl;

    interface HTMLSelectElementEvents2
    {
        CONST_VTBL struct HTMLSelectElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLSelectElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLSelectElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLSelectElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLSelectElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLSelectElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLSelectElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLSelectElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLSelectElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLSelectElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLSelectElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLSelectElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLSelectElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f302-98b5-11cf-bb82-00aa00bdce0b")
    HTMLSelectElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLSelectElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLSelectElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLSelectElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLSelectElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLSelectElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLSelectElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLSelectElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLSelectElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLSelectElementEventsVtbl;

    interface HTMLSelectElementEvents
    {
        CONST_VTBL struct HTMLSelectElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLSelectElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLSelectElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLSelectElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLSelectElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLSelectElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLSelectElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLSelectElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLSelectElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLSelectElement_INTERFACE_DEFINED__
#define __IHTMLSelectElement_INTERFACE_DEFINED__

/* interface IHTMLSelectElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSelectElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f244-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSelectElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_multiple( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_multiple( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_options( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectedIndex( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectedIndex( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IHTMLElement *element,
            /* [in][optional] */ VARIANT before) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in][defaultvalue] */ long index = -1) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_length( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSelectElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSelectElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSelectElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSelectElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSelectElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSelectElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSelectElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLSelectElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_multiple )( 
            IHTMLSelectElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_multiple )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLSelectElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_options )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLSelectElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectedIndex )( 
            IHTMLSelectElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectedIndex )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLSelectElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLSelectElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IHTMLSelectElement * This,
            /* [in] */ IHTMLElement *element,
            /* [in][optional] */ VARIANT before);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IHTMLSelectElement * This,
            /* [in][defaultvalue] */ long index);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_length )( 
            IHTMLSelectElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLSelectElement * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLSelectElement * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *tags )( 
            IHTMLSelectElement * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLSelectElementVtbl;

    interface IHTMLSelectElement
    {
        CONST_VTBL struct IHTMLSelectElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSelectElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSelectElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSelectElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSelectElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSelectElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSelectElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSelectElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSelectElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLSelectElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IHTMLSelectElement_put_multiple(This,v)	\
    (This)->lpVtbl -> put_multiple(This,v)

#define IHTMLSelectElement_get_multiple(This,p)	\
    (This)->lpVtbl -> get_multiple(This,p)

#define IHTMLSelectElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLSelectElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLSelectElement_get_options(This,p)	\
    (This)->lpVtbl -> get_options(This,p)

#define IHTMLSelectElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLSelectElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLSelectElement_put_selectedIndex(This,v)	\
    (This)->lpVtbl -> put_selectedIndex(This,v)

#define IHTMLSelectElement_get_selectedIndex(This,p)	\
    (This)->lpVtbl -> get_selectedIndex(This,p)

#define IHTMLSelectElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLSelectElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLSelectElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLSelectElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLSelectElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLSelectElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLSelectElement_add(This,element,before)	\
    (This)->lpVtbl -> add(This,element,before)

#define IHTMLSelectElement_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IHTMLSelectElement_put_length(This,v)	\
    (This)->lpVtbl -> put_length(This,v)

#define IHTMLSelectElement_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLSelectElement_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLSelectElement_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IHTMLSelectElement_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_size_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLSelectElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_size_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLSelectElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_multiple_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLSelectElement_put_multiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_multiple_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLSelectElement_get_multiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_name_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLSelectElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_name_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLSelectElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_options_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLSelectElement_get_options_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_onchange_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLSelectElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_onchange_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLSelectElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_selectedIndex_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLSelectElement_put_selectedIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_selectedIndex_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLSelectElement_get_selectedIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_type_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLSelectElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_value_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLSelectElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_value_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLSelectElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_disabled_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLSelectElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_disabled_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLSelectElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_form_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLSelectElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_add_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ IHTMLElement *element,
    /* [in][optional] */ VARIANT before);


void __RPC_STUB IHTMLSelectElement_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_remove_Proxy( 
    IHTMLSelectElement * This,
    /* [in][defaultvalue] */ long index);


void __RPC_STUB IHTMLSelectElement_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_put_length_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLSelectElement_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get_length_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLSelectElement_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_get__newEnum_Proxy( 
    IHTMLSelectElement * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLSelectElement_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_item_Proxy( 
    IHTMLSelectElement * This,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT index,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLSelectElement_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement_tags_Proxy( 
    IHTMLSelectElement * This,
    /* [in] */ VARIANT tagName,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLSelectElement_tags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSelectElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLSelectElement2_INTERFACE_DEFINED__
#define __IHTMLSelectElement2_INTERFACE_DEFINED__

/* interface IHTMLSelectElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSelectElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5ed-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSelectElement2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE urns( 
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSelectElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSelectElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSelectElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSelectElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSelectElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSelectElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSelectElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSelectElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *urns )( 
            IHTMLSelectElement2 * This,
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLSelectElement2Vtbl;

    interface IHTMLSelectElement2
    {
        CONST_VTBL struct IHTMLSelectElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSelectElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSelectElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSelectElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSelectElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSelectElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSelectElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSelectElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSelectElement2_urns(This,urn,pdisp)	\
    (This)->lpVtbl -> urns(This,urn,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement2_urns_Proxy( 
    IHTMLSelectElement2 * This,
    /* [in] */ VARIANT urn,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLSelectElement2_urns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSelectElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLSelectElement4_INTERFACE_DEFINED__
#define __IHTMLSelectElement4_INTERFACE_DEFINED__

/* interface IHTMLSelectElement4 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSelectElement4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f838-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSelectElement4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSelectElement4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSelectElement4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSelectElement4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSelectElement4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSelectElement4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSelectElement4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSelectElement4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSelectElement4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IHTMLSelectElement4 * This,
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLSelectElement4Vtbl;

    interface IHTMLSelectElement4
    {
        CONST_VTBL struct IHTMLSelectElement4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSelectElement4_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSelectElement4_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSelectElement4_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSelectElement4_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSelectElement4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSelectElement4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSelectElement4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSelectElement4_namedItem(This,name,pdisp)	\
    (This)->lpVtbl -> namedItem(This,name,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectElement4_namedItem_Proxy( 
    IHTMLSelectElement4 * This,
    /* [in] */ BSTR name,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLSelectElement4_namedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSelectElement4_INTERFACE_DEFINED__ */


#ifndef __DispHTMLSelectElement_DISPINTERFACE_DEFINED__
#define __DispHTMLSelectElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLSelectElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLSelectElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f531-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLSelectElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLSelectElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLSelectElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLSelectElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLSelectElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLSelectElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLSelectElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLSelectElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLSelectElementVtbl;

    interface DispHTMLSelectElement
    {
        CONST_VTBL struct DispHTMLSelectElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLSelectElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLSelectElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLSelectElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLSelectElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLSelectElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLSelectElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLSelectElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLSelectElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLSelectElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f245-98b5-11cf-bb82-00aa00bdce0b")
HTMLSelectElement;
#endif

#ifndef __IHTMLSelectionObject_INTERFACE_DEFINED__
#define __IHTMLSelectionObject_INTERFACE_DEFINED__

/* interface IHTMLSelectionObject */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSelectionObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f25A-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSelectionObject : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createRange( 
            /* [out][retval] */ IDispatch **range) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE empty( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clear( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSelectionObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSelectionObject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSelectionObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSelectionObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSelectionObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSelectionObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSelectionObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSelectionObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createRange )( 
            IHTMLSelectionObject * This,
            /* [out][retval] */ IDispatch **range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *empty )( 
            IHTMLSelectionObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clear )( 
            IHTMLSelectionObject * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLSelectionObject * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLSelectionObjectVtbl;

    interface IHTMLSelectionObject
    {
        CONST_VTBL struct IHTMLSelectionObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSelectionObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSelectionObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSelectionObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSelectionObject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSelectionObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSelectionObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSelectionObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSelectionObject_createRange(This,range)	\
    (This)->lpVtbl -> createRange(This,range)

#define IHTMLSelectionObject_empty(This)	\
    (This)->lpVtbl -> empty(This)

#define IHTMLSelectionObject_clear(This)	\
    (This)->lpVtbl -> clear(This)

#define IHTMLSelectionObject_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject_createRange_Proxy( 
    IHTMLSelectionObject * This,
    /* [out][retval] */ IDispatch **range);


void __RPC_STUB IHTMLSelectionObject_createRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject_empty_Proxy( 
    IHTMLSelectionObject * This);


void __RPC_STUB IHTMLSelectionObject_empty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject_clear_Proxy( 
    IHTMLSelectionObject * This);


void __RPC_STUB IHTMLSelectionObject_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject_get_type_Proxy( 
    IHTMLSelectionObject * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLSelectionObject_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSelectionObject_INTERFACE_DEFINED__ */


#ifndef __IHTMLSelectionObject2_INTERFACE_DEFINED__
#define __IHTMLSelectionObject2_INTERFACE_DEFINED__

/* interface IHTMLSelectionObject2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSelectionObject2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f7ec-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSelectionObject2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createRangeCollection( 
            /* [out][retval] */ IDispatch **rangeCollection) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_typeDetail( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSelectionObject2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSelectionObject2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSelectionObject2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSelectionObject2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSelectionObject2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSelectionObject2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSelectionObject2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSelectionObject2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createRangeCollection )( 
            IHTMLSelectionObject2 * This,
            /* [out][retval] */ IDispatch **rangeCollection);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_typeDetail )( 
            IHTMLSelectionObject2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLSelectionObject2Vtbl;

    interface IHTMLSelectionObject2
    {
        CONST_VTBL struct IHTMLSelectionObject2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSelectionObject2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSelectionObject2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSelectionObject2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSelectionObject2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSelectionObject2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSelectionObject2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSelectionObject2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLSelectionObject2_createRangeCollection(This,rangeCollection)	\
    (This)->lpVtbl -> createRangeCollection(This,rangeCollection)

#define IHTMLSelectionObject2_get_typeDetail(This,p)	\
    (This)->lpVtbl -> get_typeDetail(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject2_createRangeCollection_Proxy( 
    IHTMLSelectionObject2 * This,
    /* [out][retval] */ IDispatch **rangeCollection);


void __RPC_STUB IHTMLSelectionObject2_createRangeCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLSelectionObject2_get_typeDetail_Proxy( 
    IHTMLSelectionObject2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLSelectionObject2_get_typeDetail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLSelectionObject2_INTERFACE_DEFINED__ */


#ifndef __IHTMLOptionElement_INTERFACE_DEFINED__
#define __IHTMLOptionElement_INTERFACE_DEFINED__

/* interface IHTMLOptionElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOptionElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f211-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOptionElement : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selected( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selected( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultSelected( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultSelected( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_index( 
            /* [in] */ LONG v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_index( 
            /* [out][retval] */ LONG *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOptionElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOptionElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOptionElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOptionElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOptionElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOptionElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOptionElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selected )( 
            IHTMLOptionElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selected )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLOptionElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultSelected )( 
            IHTMLOptionElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultSelected )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_index )( 
            IHTMLOptionElement * This,
            /* [in] */ LONG v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_index )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ LONG *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IHTMLOptionElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLOptionElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        END_INTERFACE
    } IHTMLOptionElementVtbl;

    interface IHTMLOptionElement
    {
        CONST_VTBL struct IHTMLOptionElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOptionElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOptionElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOptionElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOptionElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOptionElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOptionElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOptionElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOptionElement_put_selected(This,v)	\
    (This)->lpVtbl -> put_selected(This,v)

#define IHTMLOptionElement_get_selected(This,p)	\
    (This)->lpVtbl -> get_selected(This,p)

#define IHTMLOptionElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLOptionElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLOptionElement_put_defaultSelected(This,v)	\
    (This)->lpVtbl -> put_defaultSelected(This,v)

#define IHTMLOptionElement_get_defaultSelected(This,p)	\
    (This)->lpVtbl -> get_defaultSelected(This,p)

#define IHTMLOptionElement_put_index(This,v)	\
    (This)->lpVtbl -> put_index(This,v)

#define IHTMLOptionElement_get_index(This,p)	\
    (This)->lpVtbl -> get_index(This,p)

#define IHTMLOptionElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IHTMLOptionElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IHTMLOptionElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_put_selected_Proxy( 
    IHTMLOptionElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionElement_put_selected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_selected_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionElement_get_selected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_put_value_Proxy( 
    IHTMLOptionElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOptionElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_value_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_put_defaultSelected_Proxy( 
    IHTMLOptionElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionElement_put_defaultSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_defaultSelected_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionElement_get_defaultSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_put_index_Proxy( 
    IHTMLOptionElement * This,
    /* [in] */ LONG v);


void __RPC_STUB IHTMLOptionElement_put_index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_index_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ LONG *p);


void __RPC_STUB IHTMLOptionElement_get_index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_put_text_Proxy( 
    IHTMLOptionElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOptionElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_text_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement_get_form_Proxy( 
    IHTMLOptionElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLOptionElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOptionElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLOptionElement3_INTERFACE_DEFINED__
#define __IHTMLOptionElement3_INTERFACE_DEFINED__

/* interface IHTMLOptionElement3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOptionElement3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f820-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOptionElement3 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_label( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_label( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOptionElement3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOptionElement3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOptionElement3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOptionElement3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOptionElement3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOptionElement3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOptionElement3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOptionElement3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_label )( 
            IHTMLOptionElement3 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_label )( 
            IHTMLOptionElement3 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLOptionElement3Vtbl;

    interface IHTMLOptionElement3
    {
        CONST_VTBL struct IHTMLOptionElement3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOptionElement3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOptionElement3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOptionElement3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOptionElement3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOptionElement3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOptionElement3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOptionElement3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOptionElement3_put_label(This,v)	\
    (This)->lpVtbl -> put_label(This,v)

#define IHTMLOptionElement3_get_label(This,p)	\
    (This)->lpVtbl -> get_label(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement3_put_label_Proxy( 
    IHTMLOptionElement3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOptionElement3_put_label_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElement3_get_label_Proxy( 
    IHTMLOptionElement3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionElement3_get_label_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOptionElement3_INTERFACE_DEFINED__ */


#ifndef __IHTMLOptionElementFactory_INTERFACE_DEFINED__
#define __IHTMLOptionElementFactory_INTERFACE_DEFINED__

/* interface IHTMLOptionElementFactory */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOptionElementFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f38c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOptionElementFactory : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE create( 
            /* [in][optional] */ VARIANT text,
            /* [in][optional] */ VARIANT value,
            /* [in][optional] */ VARIANT defaultselected,
            /* [in][optional] */ VARIANT selected,
            /* [out][retval] */ IHTMLOptionElement **__MIDL_0012) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOptionElementFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOptionElementFactory * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOptionElementFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOptionElementFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOptionElementFactory * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOptionElementFactory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOptionElementFactory * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOptionElementFactory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *create )( 
            IHTMLOptionElementFactory * This,
            /* [in][optional] */ VARIANT text,
            /* [in][optional] */ VARIANT value,
            /* [in][optional] */ VARIANT defaultselected,
            /* [in][optional] */ VARIANT selected,
            /* [out][retval] */ IHTMLOptionElement **__MIDL_0012);
        
        END_INTERFACE
    } IHTMLOptionElementFactoryVtbl;

    interface IHTMLOptionElementFactory
    {
        CONST_VTBL struct IHTMLOptionElementFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOptionElementFactory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOptionElementFactory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOptionElementFactory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOptionElementFactory_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOptionElementFactory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOptionElementFactory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOptionElementFactory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOptionElementFactory_create(This,text,value,defaultselected,selected,__MIDL_0012)	\
    (This)->lpVtbl -> create(This,text,value,defaultselected,selected,__MIDL_0012)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOptionElementFactory_create_Proxy( 
    IHTMLOptionElementFactory * This,
    /* [in][optional] */ VARIANT text,
    /* [in][optional] */ VARIANT value,
    /* [in][optional] */ VARIANT defaultselected,
    /* [in][optional] */ VARIANT selected,
    /* [out][retval] */ IHTMLOptionElement **__MIDL_0012);


void __RPC_STUB IHTMLOptionElementFactory_create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOptionElementFactory_INTERFACE_DEFINED__ */


#ifndef __DispHTMLOptionElement_DISPINTERFACE_DEFINED__
#define __DispHTMLOptionElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLOptionElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLOptionElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f52b-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLOptionElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLOptionElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLOptionElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLOptionElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLOptionElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLOptionElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLOptionElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLOptionElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLOptionElementVtbl;

    interface DispHTMLOptionElement
    {
        CONST_VTBL struct DispHTMLOptionElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLOptionElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLOptionElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLOptionElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLOptionElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLOptionElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLOptionElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLOptionElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLOptionElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLOptionElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f24d-98b5-11cf-bb82-00aa00bdce0b")
HTMLOptionElement;
#endif

EXTERN_C const CLSID CLSID_HTMLOptionElementFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f38d-98b5-11cf-bb82-00aa00bdce0b")
HTMLOptionElementFactory;
#endif

#ifndef __HTMLButtonElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLButtonElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLButtonElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLButtonElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f617-98b5-11cf-bb82-00aa00bdce0b")
    HTMLButtonElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLButtonElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLButtonElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLButtonElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLButtonElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLButtonElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLButtonElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLButtonElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLButtonElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLButtonElementEvents2Vtbl;

    interface HTMLButtonElementEvents2
    {
        CONST_VTBL struct HTMLButtonElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLButtonElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLButtonElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLButtonElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLButtonElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLButtonElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLButtonElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLButtonElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLButtonElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLButtonElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLButtonElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLButtonElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLButtonElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2b3-98b5-11cf-bb82-00aa00bdce0b")
    HTMLButtonElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLButtonElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLButtonElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLButtonElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLButtonElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLButtonElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLButtonElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLButtonElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLButtonElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLButtonElementEventsVtbl;

    interface HTMLButtonElementEvents
    {
        CONST_VTBL struct HTMLButtonElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLButtonElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLButtonElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLButtonElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLButtonElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLButtonElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLButtonElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLButtonElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLButtonElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputTextElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLInputTextElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputTextElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputTextElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f618-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputTextElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputTextElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputTextElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputTextElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputTextElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputTextElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputTextElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputTextElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputTextElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputTextElementEvents2Vtbl;

    interface HTMLInputTextElementEvents2
    {
        CONST_VTBL struct HTMLInputTextElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputTextElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputTextElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputTextElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputTextElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputTextElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputTextElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputTextElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputTextElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLOptionButtonElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLOptionButtonElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLOptionButtonElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLOptionButtonElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f619-98b5-11cf-bb82-00aa00bdce0b")
    HTMLOptionButtonElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLOptionButtonElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLOptionButtonElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLOptionButtonElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLOptionButtonElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLOptionButtonElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLOptionButtonElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLOptionButtonElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLOptionButtonElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLOptionButtonElementEvents2Vtbl;

    interface HTMLOptionButtonElementEvents2
    {
        CONST_VTBL struct HTMLOptionButtonElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLOptionButtonElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLOptionButtonElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLOptionButtonElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLOptionButtonElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLOptionButtonElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLOptionButtonElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLOptionButtonElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLOptionButtonElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputFileElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLInputFileElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputFileElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputFileElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61a-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputFileElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputFileElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputFileElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputFileElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputFileElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputFileElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputFileElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputFileElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputFileElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputFileElementEvents2Vtbl;

    interface HTMLInputFileElementEvents2
    {
        CONST_VTBL struct HTMLInputFileElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputFileElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputFileElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputFileElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputFileElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputFileElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputFileElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputFileElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputFileElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputImageEvents2_DISPINTERFACE_DEFINED__
#define __HTMLInputImageEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputImageEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputImageEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61b-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputImageEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputImageEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputImageEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputImageEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputImageEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputImageEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputImageEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputImageEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputImageEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputImageEvents2Vtbl;

    interface HTMLInputImageEvents2
    {
        CONST_VTBL struct HTMLInputImageEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputImageEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputImageEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputImageEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputImageEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputImageEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputImageEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputImageEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputImageEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputTextElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLInputTextElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputTextElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputTextElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2a7-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputTextElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputTextElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputTextElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputTextElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputTextElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputTextElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputTextElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputTextElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputTextElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputTextElementEventsVtbl;

    interface HTMLInputTextElementEvents
    {
        CONST_VTBL struct HTMLInputTextElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputTextElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputTextElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputTextElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputTextElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputTextElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputTextElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputTextElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputTextElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLOptionButtonElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLOptionButtonElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLOptionButtonElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLOptionButtonElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2bd-98b5-11cf-bb82-00aa00bdce0b")
    HTMLOptionButtonElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLOptionButtonElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLOptionButtonElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLOptionButtonElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLOptionButtonElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLOptionButtonElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLOptionButtonElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLOptionButtonElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLOptionButtonElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLOptionButtonElementEventsVtbl;

    interface HTMLOptionButtonElementEvents
    {
        CONST_VTBL struct HTMLOptionButtonElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLOptionButtonElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLOptionButtonElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLOptionButtonElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLOptionButtonElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLOptionButtonElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLOptionButtonElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLOptionButtonElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLOptionButtonElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputFileElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLInputFileElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputFileElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputFileElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2af-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputFileElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputFileElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputFileElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputFileElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputFileElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputFileElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputFileElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputFileElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputFileElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputFileElementEventsVtbl;

    interface HTMLInputFileElementEvents
    {
        CONST_VTBL struct HTMLInputFileElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputFileElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputFileElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputFileElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputFileElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputFileElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputFileElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputFileElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputFileElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLInputImageEvents_DISPINTERFACE_DEFINED__
#define __HTMLInputImageEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLInputImageEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLInputImageEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2c3-98b5-11cf-bb82-00aa00bdce0b")
    HTMLInputImageEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLInputImageEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLInputImageEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLInputImageEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLInputImageEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLInputImageEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLInputImageEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLInputImageEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLInputImageEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLInputImageEventsVtbl;

    interface HTMLInputImageEvents
    {
        CONST_VTBL struct HTMLInputImageEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLInputImageEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLInputImageEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLInputImageEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLInputImageEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLInputImageEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLInputImageEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLInputImageEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLInputImageEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLInputElement_INTERFACE_DEFINED__
#define __IHTMLInputElement_INTERFACE_DEFINED__

/* interface IHTMLInputElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5d2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputElement : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_maxLength( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_maxLength( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultValue( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultValue( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_readOnly( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_readOnly( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_indeterminate( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_indeterminate( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultChecked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultChecked( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_checked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_checked( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_border( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_lowsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_lowsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vrml( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vrml( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dynsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dynsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_complete( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerror( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerror( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onabort( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onabort( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLInputElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_maxLength )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_maxLength )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLInputElement * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselect )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselect )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultValue )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultValue )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_readOnly )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readOnly )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLInputElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_indeterminate )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_indeterminate )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultChecked )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultChecked )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_checked )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_checked )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_border )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_border )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vspace )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vspace )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hspace )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hspace )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_alt )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_alt )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_lowsrc )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lowsrc )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vrml )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vrml )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dynsrc )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dynsrc )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_complete )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_loop )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_loop )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerror )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerror )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onabort )( 
            IHTMLInputElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onabort )( 
            IHTMLInputElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLInputElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLInputElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_start )( 
            IHTMLInputElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_start )( 
            IHTMLInputElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLInputElementVtbl;

    interface IHTMLInputElement
    {
        CONST_VTBL struct IHTMLInputElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLInputElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLInputElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLInputElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLInputElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLInputElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLInputElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLInputElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IHTMLInputElement_put_maxLength(This,v)	\
    (This)->lpVtbl -> put_maxLength(This,v)

#define IHTMLInputElement_get_maxLength(This,p)	\
    (This)->lpVtbl -> get_maxLength(This,p)

#define IHTMLInputElement_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLInputElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLInputElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLInputElement_put_onselect(This,v)	\
    (This)->lpVtbl -> put_onselect(This,v)

#define IHTMLInputElement_get_onselect(This,p)	\
    (This)->lpVtbl -> get_onselect(This,p)

#define IHTMLInputElement_put_defaultValue(This,v)	\
    (This)->lpVtbl -> put_defaultValue(This,v)

#define IHTMLInputElement_get_defaultValue(This,p)	\
    (This)->lpVtbl -> get_defaultValue(This,p)

#define IHTMLInputElement_put_readOnly(This,v)	\
    (This)->lpVtbl -> put_readOnly(This,v)

#define IHTMLInputElement_get_readOnly(This,p)	\
    (This)->lpVtbl -> get_readOnly(This,p)

#define IHTMLInputElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#define IHTMLInputElement_put_indeterminate(This,v)	\
    (This)->lpVtbl -> put_indeterminate(This,v)

#define IHTMLInputElement_get_indeterminate(This,p)	\
    (This)->lpVtbl -> get_indeterminate(This,p)

#define IHTMLInputElement_put_defaultChecked(This,v)	\
    (This)->lpVtbl -> put_defaultChecked(This,v)

#define IHTMLInputElement_get_defaultChecked(This,p)	\
    (This)->lpVtbl -> get_defaultChecked(This,p)

#define IHTMLInputElement_put_checked(This,v)	\
    (This)->lpVtbl -> put_checked(This,v)

#define IHTMLInputElement_get_checked(This,p)	\
    (This)->lpVtbl -> get_checked(This,p)

#define IHTMLInputElement_put_border(This,v)	\
    (This)->lpVtbl -> put_border(This,v)

#define IHTMLInputElement_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IHTMLInputElement_put_vspace(This,v)	\
    (This)->lpVtbl -> put_vspace(This,v)

#define IHTMLInputElement_get_vspace(This,p)	\
    (This)->lpVtbl -> get_vspace(This,p)

#define IHTMLInputElement_put_hspace(This,v)	\
    (This)->lpVtbl -> put_hspace(This,v)

#define IHTMLInputElement_get_hspace(This,p)	\
    (This)->lpVtbl -> get_hspace(This,p)

#define IHTMLInputElement_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IHTMLInputElement_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IHTMLInputElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IHTMLInputElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IHTMLInputElement_put_lowsrc(This,v)	\
    (This)->lpVtbl -> put_lowsrc(This,v)

#define IHTMLInputElement_get_lowsrc(This,p)	\
    (This)->lpVtbl -> get_lowsrc(This,p)

#define IHTMLInputElement_put_vrml(This,v)	\
    (This)->lpVtbl -> put_vrml(This,v)

#define IHTMLInputElement_get_vrml(This,p)	\
    (This)->lpVtbl -> get_vrml(This,p)

#define IHTMLInputElement_put_dynsrc(This,v)	\
    (This)->lpVtbl -> put_dynsrc(This,v)

#define IHTMLInputElement_get_dynsrc(This,p)	\
    (This)->lpVtbl -> get_dynsrc(This,p)

#define IHTMLInputElement_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLInputElement_get_complete(This,p)	\
    (This)->lpVtbl -> get_complete(This,p)

#define IHTMLInputElement_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IHTMLInputElement_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IHTMLInputElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLInputElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLInputElement_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLInputElement_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLInputElement_put_onerror(This,v)	\
    (This)->lpVtbl -> put_onerror(This,v)

#define IHTMLInputElement_get_onerror(This,p)	\
    (This)->lpVtbl -> get_onerror(This,p)

#define IHTMLInputElement_put_onabort(This,v)	\
    (This)->lpVtbl -> put_onabort(This,v)

#define IHTMLInputElement_get_onabort(This,p)	\
    (This)->lpVtbl -> get_onabort(This,p)

#define IHTMLInputElement_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLInputElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLInputElement_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLInputElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLInputElement_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define IHTMLInputElement_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_type_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_type_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_value_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_value_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_name_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_name_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_status_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_status_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_disabled_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_disabled_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_form_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLInputElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_size_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_size_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_maxLength_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_maxLength_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_select_Proxy( 
    IHTMLInputElement * This);


void __RPC_STUB IHTMLInputElement_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_onchange_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_onchange_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_onselect_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_onselect_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_defaultValue_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_defaultValue_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_readOnly_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_readOnly_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_createTextRange_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLInputElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_indeterminate_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_indeterminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_indeterminate_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_indeterminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_defaultChecked_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_defaultChecked_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_checked_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputElement_put_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_checked_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_border_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_border_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_vspace_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_vspace_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_hspace_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_hspace_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_alt_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_alt_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_src_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_src_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_lowsrc_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_lowsrc_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_vrml_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_vrml_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_dynsrc_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_dynsrc_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_readyState_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_complete_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputElement_get_complete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_loop_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_loop_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_align_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_align_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_onload_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_onload_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_onerror_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_onerror_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_onabort_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputElement_put_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_onabort_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputElement_get_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_width_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_width_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_height_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputElement_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_height_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputElement_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_put_start_Proxy( 
    IHTMLInputElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement_get_start_Proxy( 
    IHTMLInputElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputElement2_INTERFACE_DEFINED__
#define __IHTMLInputElement2_INTERFACE_DEFINED__

/* interface IHTMLInputElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f821-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accept( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accept( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_useMap( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_useMap( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accept )( 
            IHTMLInputElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accept )( 
            IHTMLInputElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_useMap )( 
            IHTMLInputElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_useMap )( 
            IHTMLInputElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLInputElement2Vtbl;

    interface IHTMLInputElement2
    {
        CONST_VTBL struct IHTMLInputElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputElement2_put_accept(This,v)	\
    (This)->lpVtbl -> put_accept(This,v)

#define IHTMLInputElement2_get_accept(This,p)	\
    (This)->lpVtbl -> get_accept(This,p)

#define IHTMLInputElement2_put_useMap(This,v)	\
    (This)->lpVtbl -> put_useMap(This,v)

#define IHTMLInputElement2_get_useMap(This,p)	\
    (This)->lpVtbl -> get_useMap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement2_put_accept_Proxy( 
    IHTMLInputElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement2_put_accept_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement2_get_accept_Proxy( 
    IHTMLInputElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement2_get_accept_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement2_put_useMap_Proxy( 
    IHTMLInputElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputElement2_put_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputElement2_get_useMap_Proxy( 
    IHTMLInputElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputElement2_get_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputButtonElement_INTERFACE_DEFINED__
#define __IHTMLInputButtonElement_INTERFACE_DEFINED__

/* interface IHTMLInputButtonElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputButtonElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2b2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputButtonElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputButtonElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputButtonElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputButtonElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputButtonElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputButtonElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputButtonElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputButtonElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputButtonElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLInputButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLInputButtonElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLInputButtonElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLInputButtonElementVtbl;

    interface IHTMLInputButtonElement
    {
        CONST_VTBL struct IHTMLInputButtonElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputButtonElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputButtonElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputButtonElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputButtonElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputButtonElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputButtonElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputButtonElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputButtonElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputButtonElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLInputButtonElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLInputButtonElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputButtonElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputButtonElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLInputButtonElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLInputButtonElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputButtonElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputButtonElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLInputButtonElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_type_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputButtonElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_put_value_Proxy( 
    IHTMLInputButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputButtonElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_value_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputButtonElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_put_name_Proxy( 
    IHTMLInputButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputButtonElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_name_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputButtonElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_put_status_Proxy( 
    IHTMLInputButtonElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputButtonElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_status_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputButtonElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_put_disabled_Proxy( 
    IHTMLInputButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputButtonElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_disabled_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputButtonElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_get_form_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLInputButtonElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputButtonElement_createTextRange_Proxy( 
    IHTMLInputButtonElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLInputButtonElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputButtonElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputHiddenElement_INTERFACE_DEFINED__
#define __IHTMLInputHiddenElement_INTERFACE_DEFINED__

/* interface IHTMLInputHiddenElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputHiddenElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2a4-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputHiddenElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputHiddenElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputHiddenElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputHiddenElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputHiddenElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputHiddenElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLInputHiddenElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLInputHiddenElementVtbl;

    interface IHTMLInputHiddenElement
    {
        CONST_VTBL struct IHTMLInputHiddenElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputHiddenElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputHiddenElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputHiddenElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputHiddenElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputHiddenElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputHiddenElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputHiddenElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputHiddenElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputHiddenElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLInputHiddenElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLInputHiddenElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputHiddenElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputHiddenElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLInputHiddenElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLInputHiddenElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputHiddenElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputHiddenElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLInputHiddenElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_type_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputHiddenElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_put_value_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputHiddenElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_value_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputHiddenElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_put_name_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputHiddenElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_name_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputHiddenElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_put_status_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputHiddenElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_status_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputHiddenElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_put_disabled_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputHiddenElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_disabled_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputHiddenElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_get_form_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLInputHiddenElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputHiddenElement_createTextRange_Proxy( 
    IHTMLInputHiddenElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLInputHiddenElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputHiddenElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputTextElement_INTERFACE_DEFINED__
#define __IHTMLInputTextElement_INTERFACE_DEFINED__

/* interface IHTMLInputTextElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputTextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2a6-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputTextElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultValue( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultValue( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_maxLength( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_maxLength( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_readOnly( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_readOnly( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputTextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputTextElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputTextElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputTextElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputTextElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputTextElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputTextElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputTextElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLInputTextElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputTextElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLInputTextElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputTextElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultValue )( 
            IHTMLInputTextElement * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultValue )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLInputTextElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_maxLength )( 
            IHTMLInputTextElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_maxLength )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLInputTextElement * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLInputTextElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselect )( 
            IHTMLInputTextElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselect )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_readOnly )( 
            IHTMLInputTextElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readOnly )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLInputTextElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLInputTextElementVtbl;

    interface IHTMLInputTextElement
    {
        CONST_VTBL struct IHTMLInputTextElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputTextElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputTextElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputTextElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputTextElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputTextElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputTextElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputTextElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputTextElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputTextElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLInputTextElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLInputTextElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputTextElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputTextElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLInputTextElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLInputTextElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputTextElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputTextElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLInputTextElement_put_defaultValue(This,v)	\
    (This)->lpVtbl -> put_defaultValue(This,v)

#define IHTMLInputTextElement_get_defaultValue(This,p)	\
    (This)->lpVtbl -> get_defaultValue(This,p)

#define IHTMLInputTextElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLInputTextElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IHTMLInputTextElement_put_maxLength(This,v)	\
    (This)->lpVtbl -> put_maxLength(This,v)

#define IHTMLInputTextElement_get_maxLength(This,p)	\
    (This)->lpVtbl -> get_maxLength(This,p)

#define IHTMLInputTextElement_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLInputTextElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLInputTextElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLInputTextElement_put_onselect(This,v)	\
    (This)->lpVtbl -> put_onselect(This,v)

#define IHTMLInputTextElement_get_onselect(This,p)	\
    (This)->lpVtbl -> get_onselect(This,p)

#define IHTMLInputTextElement_put_readOnly(This,v)	\
    (This)->lpVtbl -> put_readOnly(This,v)

#define IHTMLInputTextElement_get_readOnly(This,p)	\
    (This)->lpVtbl -> get_readOnly(This,p)

#define IHTMLInputTextElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_type_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputTextElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_value_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputTextElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_value_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputTextElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_name_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputTextElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_name_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputTextElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_status_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputTextElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_status_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputTextElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_disabled_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputTextElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_disabled_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputTextElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_form_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLInputTextElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_defaultValue_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputTextElement_put_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_defaultValue_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputTextElement_get_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_size_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputTextElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_size_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputTextElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_maxLength_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputTextElement_put_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_maxLength_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputTextElement_get_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_select_Proxy( 
    IHTMLInputTextElement * This);


void __RPC_STUB IHTMLInputTextElement_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_onchange_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputTextElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_onchange_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputTextElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_onselect_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputTextElement_put_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_onselect_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputTextElement_get_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_put_readOnly_Proxy( 
    IHTMLInputTextElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputTextElement_put_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_get_readOnly_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputTextElement_get_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputTextElement_createTextRange_Proxy( 
    IHTMLInputTextElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLInputTextElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputTextElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputFileElement_INTERFACE_DEFINED__
#define __IHTMLInputFileElement_INTERFACE_DEFINED__

/* interface IHTMLInputFileElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputFileElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2ad-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputFileElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_maxLength( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_maxLength( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputFileElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputFileElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputFileElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputFileElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputFileElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputFileElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputFileElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputFileElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputFileElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLInputFileElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputFileElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLInputFileElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_maxLength )( 
            IHTMLInputFileElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_maxLength )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLInputFileElement * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLInputFileElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselect )( 
            IHTMLInputFileElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselect )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLInputFileElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLInputFileElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLInputFileElementVtbl;

    interface IHTMLInputFileElement
    {
        CONST_VTBL struct IHTMLInputFileElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputFileElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputFileElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputFileElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputFileElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputFileElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputFileElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputFileElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputFileElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputFileElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputFileElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputFileElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLInputFileElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLInputFileElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputFileElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputFileElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLInputFileElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLInputFileElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IHTMLInputFileElement_put_maxLength(This,v)	\
    (This)->lpVtbl -> put_maxLength(This,v)

#define IHTMLInputFileElement_get_maxLength(This,p)	\
    (This)->lpVtbl -> get_maxLength(This,p)

#define IHTMLInputFileElement_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLInputFileElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLInputFileElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLInputFileElement_put_onselect(This,v)	\
    (This)->lpVtbl -> put_onselect(This,v)

#define IHTMLInputFileElement_get_onselect(This,p)	\
    (This)->lpVtbl -> get_onselect(This,p)

#define IHTMLInputFileElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLInputFileElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_type_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputFileElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_name_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputFileElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_name_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputFileElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_status_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputFileElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_status_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputFileElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_disabled_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputFileElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_disabled_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputFileElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_form_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLInputFileElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_size_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputFileElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_size_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputFileElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_maxLength_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputFileElement_put_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_maxLength_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputFileElement_get_maxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_select_Proxy( 
    IHTMLInputFileElement * This);


void __RPC_STUB IHTMLInputFileElement_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_onchange_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputFileElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_onchange_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputFileElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_onselect_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputFileElement_put_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_onselect_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputFileElement_get_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_put_value_Proxy( 
    IHTMLInputFileElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputFileElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputFileElement_get_value_Proxy( 
    IHTMLInputFileElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputFileElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputFileElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLOptionButtonElement_INTERFACE_DEFINED__
#define __IHTMLOptionButtonElement_INTERFACE_DEFINED__

/* interface IHTMLOptionButtonElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOptionButtonElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2bc-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOptionButtonElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_checked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_checked( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultChecked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultChecked( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_indeterminate( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_indeterminate( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOptionButtonElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOptionButtonElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOptionButtonElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOptionButtonElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_checked )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_checked )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultChecked )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultChecked )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_indeterminate )( 
            IHTMLOptionButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_indeterminate )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLOptionButtonElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        END_INTERFACE
    } IHTMLOptionButtonElementVtbl;

    interface IHTMLOptionButtonElement
    {
        CONST_VTBL struct IHTMLOptionButtonElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOptionButtonElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOptionButtonElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOptionButtonElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOptionButtonElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOptionButtonElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOptionButtonElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOptionButtonElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOptionButtonElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLOptionButtonElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLOptionButtonElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLOptionButtonElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLOptionButtonElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLOptionButtonElement_put_checked(This,v)	\
    (This)->lpVtbl -> put_checked(This,v)

#define IHTMLOptionButtonElement_get_checked(This,p)	\
    (This)->lpVtbl -> get_checked(This,p)

#define IHTMLOptionButtonElement_put_defaultChecked(This,v)	\
    (This)->lpVtbl -> put_defaultChecked(This,v)

#define IHTMLOptionButtonElement_get_defaultChecked(This,p)	\
    (This)->lpVtbl -> get_defaultChecked(This,p)

#define IHTMLOptionButtonElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLOptionButtonElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLOptionButtonElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLOptionButtonElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLOptionButtonElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLOptionButtonElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLOptionButtonElement_put_indeterminate(This,v)	\
    (This)->lpVtbl -> put_indeterminate(This,v)

#define IHTMLOptionButtonElement_get_indeterminate(This,p)	\
    (This)->lpVtbl -> get_indeterminate(This,p)

#define IHTMLOptionButtonElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_value_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOptionButtonElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_value_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionButtonElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_type_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionButtonElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_name_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLOptionButtonElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_name_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLOptionButtonElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_checked_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionButtonElement_put_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_checked_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionButtonElement_get_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_defaultChecked_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionButtonElement_put_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_defaultChecked_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionButtonElement_get_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_onchange_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLOptionButtonElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_onchange_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLOptionButtonElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_disabled_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionButtonElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_disabled_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionButtonElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_status_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionButtonElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_status_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionButtonElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_put_indeterminate_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLOptionButtonElement_put_indeterminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_indeterminate_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLOptionButtonElement_get_indeterminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLOptionButtonElement_get_form_Proxy( 
    IHTMLOptionButtonElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLOptionButtonElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOptionButtonElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLInputImage_INTERFACE_DEFINED__
#define __IHTMLInputImage_INTERFACE_DEFINED__

/* interface IHTMLInputImage */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLInputImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2c2-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLInputImage : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_border( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_lowsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_lowsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vrml( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vrml( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dynsrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dynsrc( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_complete( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerror( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerror( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onabort( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onabort( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLInputImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLInputImage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLInputImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLInputImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLInputImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLInputImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLInputImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLInputImage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_border )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_border )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vspace )( 
            IHTMLInputImage * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vspace )( 
            IHTMLInputImage * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hspace )( 
            IHTMLInputImage * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hspace )( 
            IHTMLInputImage * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_alt )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_alt )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_lowsrc )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lowsrc )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vrml )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vrml )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dynsrc )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dynsrc )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_complete )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_loop )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_loop )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerror )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerror )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onabort )( 
            IHTMLInputImage * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onabort )( 
            IHTMLInputImage * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLInputImage * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLInputImage * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLInputImage * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLInputImage * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_start )( 
            IHTMLInputImage * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_start )( 
            IHTMLInputImage * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLInputImageVtbl;

    interface IHTMLInputImage
    {
        CONST_VTBL struct IHTMLInputImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLInputImage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLInputImage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLInputImage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLInputImage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLInputImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLInputImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLInputImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLInputImage_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLInputImage_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLInputImage_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLInputImage_put_border(This,v)	\
    (This)->lpVtbl -> put_border(This,v)

#define IHTMLInputImage_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IHTMLInputImage_put_vspace(This,v)	\
    (This)->lpVtbl -> put_vspace(This,v)

#define IHTMLInputImage_get_vspace(This,p)	\
    (This)->lpVtbl -> get_vspace(This,p)

#define IHTMLInputImage_put_hspace(This,v)	\
    (This)->lpVtbl -> put_hspace(This,v)

#define IHTMLInputImage_get_hspace(This,p)	\
    (This)->lpVtbl -> get_hspace(This,p)

#define IHTMLInputImage_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IHTMLInputImage_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IHTMLInputImage_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IHTMLInputImage_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IHTMLInputImage_put_lowsrc(This,v)	\
    (This)->lpVtbl -> put_lowsrc(This,v)

#define IHTMLInputImage_get_lowsrc(This,p)	\
    (This)->lpVtbl -> get_lowsrc(This,p)

#define IHTMLInputImage_put_vrml(This,v)	\
    (This)->lpVtbl -> put_vrml(This,v)

#define IHTMLInputImage_get_vrml(This,p)	\
    (This)->lpVtbl -> get_vrml(This,p)

#define IHTMLInputImage_put_dynsrc(This,v)	\
    (This)->lpVtbl -> put_dynsrc(This,v)

#define IHTMLInputImage_get_dynsrc(This,p)	\
    (This)->lpVtbl -> get_dynsrc(This,p)

#define IHTMLInputImage_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLInputImage_get_complete(This,p)	\
    (This)->lpVtbl -> get_complete(This,p)

#define IHTMLInputImage_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IHTMLInputImage_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IHTMLInputImage_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLInputImage_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLInputImage_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLInputImage_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLInputImage_put_onerror(This,v)	\
    (This)->lpVtbl -> put_onerror(This,v)

#define IHTMLInputImage_get_onerror(This,p)	\
    (This)->lpVtbl -> get_onerror(This,p)

#define IHTMLInputImage_put_onabort(This,v)	\
    (This)->lpVtbl -> put_onabort(This,v)

#define IHTMLInputImage_get_onabort(This,p)	\
    (This)->lpVtbl -> get_onabort(This,p)

#define IHTMLInputImage_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLInputImage_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLInputImage_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLInputImage_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLInputImage_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLInputImage_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLInputImage_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define IHTMLInputImage_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_type_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_disabled_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLInputImage_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_disabled_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputImage_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_border_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputImage_put_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_border_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputImage_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_vspace_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputImage_put_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_vspace_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputImage_get_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_hspace_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputImage_put_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_hspace_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputImage_get_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_alt_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_alt_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_src_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_src_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_lowsrc_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_lowsrc_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_lowsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_vrml_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_vrml_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_dynsrc_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_dynsrc_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_dynsrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_readyState_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_complete_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLInputImage_get_complete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_loop_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputImage_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_loop_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputImage_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_align_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_align_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_onload_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputImage_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_onload_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputImage_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_onerror_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputImage_put_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_onerror_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputImage_get_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_onabort_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLInputImage_put_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_onabort_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLInputImage_get_onabort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_name_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_name_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_width_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputImage_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_width_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputImage_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_height_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLInputImage_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_height_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLInputImage_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_put_start_Proxy( 
    IHTMLInputImage * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLInputImage_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLInputImage_get_start_Proxy( 
    IHTMLInputImage * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLInputImage_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLInputImage_INTERFACE_DEFINED__ */


#ifndef __DispHTMLInputElement_DISPINTERFACE_DEFINED__
#define __DispHTMLInputElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLInputElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLInputElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f57d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLInputElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLInputElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLInputElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLInputElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLInputElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLInputElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLInputElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLInputElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLInputElementVtbl;

    interface DispHTMLInputElement
    {
        CONST_VTBL struct DispHTMLInputElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLInputElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLInputElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLInputElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLInputElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLInputElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLInputElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLInputElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLInputElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLInputElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5d8-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputElement;
#endif

#ifndef __IHTMLTextAreaElement_INTERFACE_DEFINED__
#define __IHTMLTextAreaElement_INTERFACE_DEFINED__

/* interface IHTMLTextAreaElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTextAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2aa-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTextAreaElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultValue( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultValue( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_readOnly( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_readOnly( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rows( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_cols( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_cols( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_wrap( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_wrap( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTextAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTextAreaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTextAreaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTextAreaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTextAreaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTextAreaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTextAreaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLTextAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLTextAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLTextAreaElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLTextAreaElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultValue )( 
            IHTMLTextAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultValue )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *select )( 
            IHTMLTextAreaElement * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onchange )( 
            IHTMLTextAreaElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onchange )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselect )( 
            IHTMLTextAreaElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselect )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_readOnly )( 
            IHTMLTextAreaElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readOnly )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rows )( 
            IHTMLTextAreaElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rows )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cols )( 
            IHTMLTextAreaElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cols )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_wrap )( 
            IHTMLTextAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_wrap )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLTextAreaElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLTextAreaElementVtbl;

    interface IHTMLTextAreaElement
    {
        CONST_VTBL struct IHTMLTextAreaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTextAreaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTextAreaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTextAreaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTextAreaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTextAreaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTextAreaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTextAreaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTextAreaElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLTextAreaElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLTextAreaElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLTextAreaElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLTextAreaElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLTextAreaElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLTextAreaElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLTextAreaElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLTextAreaElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLTextAreaElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLTextAreaElement_put_defaultValue(This,v)	\
    (This)->lpVtbl -> put_defaultValue(This,v)

#define IHTMLTextAreaElement_get_defaultValue(This,p)	\
    (This)->lpVtbl -> get_defaultValue(This,p)

#define IHTMLTextAreaElement_select(This)	\
    (This)->lpVtbl -> select(This)

#define IHTMLTextAreaElement_put_onchange(This,v)	\
    (This)->lpVtbl -> put_onchange(This,v)

#define IHTMLTextAreaElement_get_onchange(This,p)	\
    (This)->lpVtbl -> get_onchange(This,p)

#define IHTMLTextAreaElement_put_onselect(This,v)	\
    (This)->lpVtbl -> put_onselect(This,v)

#define IHTMLTextAreaElement_get_onselect(This,p)	\
    (This)->lpVtbl -> get_onselect(This,p)

#define IHTMLTextAreaElement_put_readOnly(This,v)	\
    (This)->lpVtbl -> put_readOnly(This,v)

#define IHTMLTextAreaElement_get_readOnly(This,p)	\
    (This)->lpVtbl -> get_readOnly(This,p)

#define IHTMLTextAreaElement_put_rows(This,v)	\
    (This)->lpVtbl -> put_rows(This,v)

#define IHTMLTextAreaElement_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#define IHTMLTextAreaElement_put_cols(This,v)	\
    (This)->lpVtbl -> put_cols(This,v)

#define IHTMLTextAreaElement_get_cols(This,p)	\
    (This)->lpVtbl -> get_cols(This,p)

#define IHTMLTextAreaElement_put_wrap(This,v)	\
    (This)->lpVtbl -> put_wrap(This,v)

#define IHTMLTextAreaElement_get_wrap(This,p)	\
    (This)->lpVtbl -> get_wrap(This,p)

#define IHTMLTextAreaElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_type_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTextAreaElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_value_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTextAreaElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_value_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTextAreaElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_name_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTextAreaElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_name_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTextAreaElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_status_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTextAreaElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_status_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTextAreaElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_disabled_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLTextAreaElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_disabled_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLTextAreaElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_form_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLTextAreaElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_defaultValue_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTextAreaElement_put_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_defaultValue_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTextAreaElement_get_defaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_select_Proxy( 
    IHTMLTextAreaElement * This);


void __RPC_STUB IHTMLTextAreaElement_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_onchange_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTextAreaElement_put_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_onchange_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTextAreaElement_get_onchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_onselect_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTextAreaElement_put_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_onselect_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTextAreaElement_get_onselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_readOnly_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLTextAreaElement_put_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_readOnly_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLTextAreaElement_get_readOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_rows_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTextAreaElement_put_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_rows_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextAreaElement_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_cols_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTextAreaElement_put_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_cols_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTextAreaElement_get_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_put_wrap_Proxy( 
    IHTMLTextAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTextAreaElement_put_wrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_get_wrap_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTextAreaElement_get_wrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTextAreaElement_createTextRange_Proxy( 
    IHTMLTextAreaElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLTextAreaElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTextAreaElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLTextAreaElement_DISPINTERFACE_DEFINED__
#define __DispHTMLTextAreaElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLTextAreaElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLTextAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f521-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLTextAreaElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLTextAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLTextAreaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLTextAreaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLTextAreaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLTextAreaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLTextAreaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLTextAreaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLTextAreaElementVtbl;

    interface DispHTMLTextAreaElement
    {
        CONST_VTBL struct DispHTMLTextAreaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLTextAreaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLTextAreaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLTextAreaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLTextAreaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLTextAreaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLTextAreaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLTextAreaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLTextAreaElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLTextAreaElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2ac-98b5-11cf-bb82-00aa00bdce0b")
HTMLTextAreaElement;
#endif

#ifndef __DispHTMLRichtextElement_DISPINTERFACE_DEFINED__
#define __DispHTMLRichtextElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLRichtextElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLRichtextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f54d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLRichtextElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLRichtextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLRichtextElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLRichtextElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLRichtextElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLRichtextElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLRichtextElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLRichtextElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLRichtextElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLRichtextElementVtbl;

    interface DispHTMLRichtextElement
    {
        CONST_VTBL struct DispHTMLRichtextElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLRichtextElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLRichtextElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLRichtextElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLRichtextElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLRichtextElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLRichtextElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLRichtextElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLRichtextElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLRichtextElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2df-98b5-11cf-bb82-00aa00bdce0b")
HTMLRichtextElement;
#endif

#ifndef __IHTMLButtonElement_INTERFACE_DEFINED__
#define __IHTMLButtonElement_INTERFACE_DEFINED__

/* interface IHTMLButtonElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLButtonElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2bb-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLButtonElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_disabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_disabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [out][retval] */ IHTMLTxtRange **range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLButtonElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLButtonElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLButtonElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLButtonElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLButtonElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLButtonElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLButtonElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLButtonElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IHTMLButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLButtonElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLButtonElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_disabled )( 
            IHTMLButtonElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_disabled )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextRange )( 
            IHTMLButtonElement * This,
            /* [out][retval] */ IHTMLTxtRange **range);
        
        END_INTERFACE
    } IHTMLButtonElementVtbl;

    interface IHTMLButtonElement
    {
        CONST_VTBL struct IHTMLButtonElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLButtonElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLButtonElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLButtonElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLButtonElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLButtonElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLButtonElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLButtonElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLButtonElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLButtonElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IHTMLButtonElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IHTMLButtonElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLButtonElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLButtonElement_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLButtonElement_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLButtonElement_put_disabled(This,v)	\
    (This)->lpVtbl -> put_disabled(This,v)

#define IHTMLButtonElement_get_disabled(This,p)	\
    (This)->lpVtbl -> get_disabled(This,p)

#define IHTMLButtonElement_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#define IHTMLButtonElement_createTextRange(This,range)	\
    (This)->lpVtbl -> createTextRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_type_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLButtonElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_put_value_Proxy( 
    IHTMLButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLButtonElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_value_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLButtonElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_put_name_Proxy( 
    IHTMLButtonElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLButtonElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_name_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLButtonElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_put_status_Proxy( 
    IHTMLButtonElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLButtonElement_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_status_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLButtonElement_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_put_disabled_Proxy( 
    IHTMLButtonElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLButtonElement_put_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_disabled_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLButtonElement_get_disabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_get_form_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLButtonElement_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLButtonElement_createTextRange_Proxy( 
    IHTMLButtonElement * This,
    /* [out][retval] */ IHTMLTxtRange **range);


void __RPC_STUB IHTMLButtonElement_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLButtonElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLButtonElement_DISPINTERFACE_DEFINED__
#define __DispHTMLButtonElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLButtonElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLButtonElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f51f-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLButtonElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLButtonElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLButtonElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLButtonElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLButtonElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLButtonElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLButtonElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLButtonElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLButtonElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLButtonElementVtbl;

    interface DispHTMLButtonElement
    {
        CONST_VTBL struct DispHTMLButtonElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLButtonElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLButtonElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLButtonElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLButtonElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLButtonElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLButtonElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLButtonElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLButtonElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLButtonElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2c6-98b5-11cf-bb82-00aa00bdce0b")
HTMLButtonElement;
#endif

#ifndef __HTMLMarqueeElementEvents2_DISPINTERFACE_DEFINED__
#define __HTMLMarqueeElementEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLMarqueeElementEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLMarqueeElementEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61f-98b5-11cf-bb82-00aa00bdce0b")
    HTMLMarqueeElementEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLMarqueeElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLMarqueeElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLMarqueeElementEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLMarqueeElementEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLMarqueeElementEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLMarqueeElementEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLMarqueeElementEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLMarqueeElementEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLMarqueeElementEvents2Vtbl;

    interface HTMLMarqueeElementEvents2
    {
        CONST_VTBL struct HTMLMarqueeElementEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLMarqueeElementEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLMarqueeElementEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLMarqueeElementEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLMarqueeElementEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLMarqueeElementEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLMarqueeElementEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLMarqueeElementEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLMarqueeElementEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLMarqueeElementEvents_DISPINTERFACE_DEFINED__
#define __HTMLMarqueeElementEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLMarqueeElementEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLMarqueeElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f2b8-98b5-11cf-bb82-00aa00bdce0b")
    HTMLMarqueeElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLMarqueeElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLMarqueeElementEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLMarqueeElementEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLMarqueeElementEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLMarqueeElementEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLMarqueeElementEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLMarqueeElementEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLMarqueeElementEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLMarqueeElementEventsVtbl;

    interface HTMLMarqueeElementEvents
    {
        CONST_VTBL struct HTMLMarqueeElementEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLMarqueeElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLMarqueeElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLMarqueeElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLMarqueeElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLMarqueeElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLMarqueeElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLMarqueeElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLMarqueeElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLMarqueeElement_INTERFACE_DEFINED__
#define __IHTMLMarqueeElement_INTERFACE_DEFINED__

/* interface IHTMLMarqueeElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLMarqueeElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2b5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLMarqueeElement : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollDelay( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollDelay( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_direction( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_direction( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_behavior( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_behavior( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollAmount( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollAmount( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hspace( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfinish( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfinish( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onstart( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onstart( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbounce( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbounce( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_trueSpeed( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_trueSpeed( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE start( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE stop( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLMarqueeElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLMarqueeElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLMarqueeElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLMarqueeElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLMarqueeElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLMarqueeElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLMarqueeElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLMarqueeElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgColor )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgColor )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollDelay )( 
            IHTMLMarqueeElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollDelay )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_direction )( 
            IHTMLMarqueeElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_direction )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_behavior )( 
            IHTMLMarqueeElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_behavior )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollAmount )( 
            IHTMLMarqueeElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollAmount )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_loop )( 
            IHTMLMarqueeElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_loop )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vspace )( 
            IHTMLMarqueeElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vspace )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hspace )( 
            IHTMLMarqueeElement * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hspace )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ long *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfinish )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfinish )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onstart )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onstart )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbounce )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbounce )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_trueSpeed )( 
            IHTMLMarqueeElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_trueSpeed )( 
            IHTMLMarqueeElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *start )( 
            IHTMLMarqueeElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *stop )( 
            IHTMLMarqueeElement * This);
        
        END_INTERFACE
    } IHTMLMarqueeElementVtbl;

    interface IHTMLMarqueeElement
    {
        CONST_VTBL struct IHTMLMarqueeElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLMarqueeElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLMarqueeElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLMarqueeElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLMarqueeElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLMarqueeElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLMarqueeElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLMarqueeElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLMarqueeElement_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IHTMLMarqueeElement_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IHTMLMarqueeElement_put_scrollDelay(This,v)	\
    (This)->lpVtbl -> put_scrollDelay(This,v)

#define IHTMLMarqueeElement_get_scrollDelay(This,p)	\
    (This)->lpVtbl -> get_scrollDelay(This,p)

#define IHTMLMarqueeElement_put_direction(This,v)	\
    (This)->lpVtbl -> put_direction(This,v)

#define IHTMLMarqueeElement_get_direction(This,p)	\
    (This)->lpVtbl -> get_direction(This,p)

#define IHTMLMarqueeElement_put_behavior(This,v)	\
    (This)->lpVtbl -> put_behavior(This,v)

#define IHTMLMarqueeElement_get_behavior(This,p)	\
    (This)->lpVtbl -> get_behavior(This,p)

#define IHTMLMarqueeElement_put_scrollAmount(This,v)	\
    (This)->lpVtbl -> put_scrollAmount(This,v)

#define IHTMLMarqueeElement_get_scrollAmount(This,p)	\
    (This)->lpVtbl -> get_scrollAmount(This,p)

#define IHTMLMarqueeElement_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IHTMLMarqueeElement_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IHTMLMarqueeElement_put_vspace(This,v)	\
    (This)->lpVtbl -> put_vspace(This,v)

#define IHTMLMarqueeElement_get_vspace(This,p)	\
    (This)->lpVtbl -> get_vspace(This,p)

#define IHTMLMarqueeElement_put_hspace(This,v)	\
    (This)->lpVtbl -> put_hspace(This,v)

#define IHTMLMarqueeElement_get_hspace(This,p)	\
    (This)->lpVtbl -> get_hspace(This,p)

#define IHTMLMarqueeElement_put_onfinish(This,v)	\
    (This)->lpVtbl -> put_onfinish(This,v)

#define IHTMLMarqueeElement_get_onfinish(This,p)	\
    (This)->lpVtbl -> get_onfinish(This,p)

#define IHTMLMarqueeElement_put_onstart(This,v)	\
    (This)->lpVtbl -> put_onstart(This,v)

#define IHTMLMarqueeElement_get_onstart(This,p)	\
    (This)->lpVtbl -> get_onstart(This,p)

#define IHTMLMarqueeElement_put_onbounce(This,v)	\
    (This)->lpVtbl -> put_onbounce(This,v)

#define IHTMLMarqueeElement_get_onbounce(This,p)	\
    (This)->lpVtbl -> get_onbounce(This,p)

#define IHTMLMarqueeElement_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLMarqueeElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLMarqueeElement_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLMarqueeElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLMarqueeElement_put_trueSpeed(This,v)	\
    (This)->lpVtbl -> put_trueSpeed(This,v)

#define IHTMLMarqueeElement_get_trueSpeed(This,p)	\
    (This)->lpVtbl -> get_trueSpeed(This,p)

#define IHTMLMarqueeElement_start(This)	\
    (This)->lpVtbl -> start(This)

#define IHTMLMarqueeElement_stop(This)	\
    (This)->lpVtbl -> stop(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_bgColor_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_bgColor_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_scrollDelay_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLMarqueeElement_put_scrollDelay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_scrollDelay_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMarqueeElement_get_scrollDelay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_direction_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMarqueeElement_put_direction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_direction_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMarqueeElement_get_direction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_behavior_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMarqueeElement_put_behavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_behavior_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMarqueeElement_get_behavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_scrollAmount_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLMarqueeElement_put_scrollAmount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_scrollAmount_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMarqueeElement_get_scrollAmount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_loop_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLMarqueeElement_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_loop_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMarqueeElement_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_vspace_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLMarqueeElement_put_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_vspace_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMarqueeElement_get_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_hspace_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLMarqueeElement_put_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_hspace_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMarqueeElement_get_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_onfinish_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_onfinish_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_onfinish_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_onfinish_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_onstart_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_onstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_onstart_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_onstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_onbounce_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_onbounce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_onbounce_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_onbounce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_width_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_width_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_height_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLMarqueeElement_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_height_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLMarqueeElement_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_put_trueSpeed_Proxy( 
    IHTMLMarqueeElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLMarqueeElement_put_trueSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_get_trueSpeed_Proxy( 
    IHTMLMarqueeElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLMarqueeElement_get_trueSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_start_Proxy( 
    IHTMLMarqueeElement * This);


void __RPC_STUB IHTMLMarqueeElement_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLMarqueeElement_stop_Proxy( 
    IHTMLMarqueeElement * This);


void __RPC_STUB IHTMLMarqueeElement_stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLMarqueeElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLMarqueeElement_DISPINTERFACE_DEFINED__
#define __DispHTMLMarqueeElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLMarqueeElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLMarqueeElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f527-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLMarqueeElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLMarqueeElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLMarqueeElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLMarqueeElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLMarqueeElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLMarqueeElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLMarqueeElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLMarqueeElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLMarqueeElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLMarqueeElementVtbl;

    interface DispHTMLMarqueeElement
    {
        CONST_VTBL struct DispHTMLMarqueeElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLMarqueeElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLMarqueeElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLMarqueeElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLMarqueeElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLMarqueeElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLMarqueeElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLMarqueeElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLMarqueeElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLMarqueeElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2b9-98b5-11cf-bb82-00aa00bdce0b")
HTMLMarqueeElement;
#endif

#ifndef __IHTMLHtmlElement_INTERFACE_DEFINED__
#define __IHTMLHtmlElement_INTERFACE_DEFINED__

/* interface IHTMLHtmlElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLHtmlElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f81c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLHtmlElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_version( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_version( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLHtmlElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLHtmlElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLHtmlElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLHtmlElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLHtmlElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLHtmlElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLHtmlElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLHtmlElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_version )( 
            IHTMLHtmlElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_version )( 
            IHTMLHtmlElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLHtmlElementVtbl;

    interface IHTMLHtmlElement
    {
        CONST_VTBL struct IHTMLHtmlElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLHtmlElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLHtmlElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLHtmlElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLHtmlElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLHtmlElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLHtmlElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLHtmlElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLHtmlElement_put_version(This,v)	\
    (This)->lpVtbl -> put_version(This,v)

#define IHTMLHtmlElement_get_version(This,p)	\
    (This)->lpVtbl -> get_version(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHtmlElement_put_version_Proxy( 
    IHTMLHtmlElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLHtmlElement_put_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHtmlElement_get_version_Proxy( 
    IHTMLHtmlElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLHtmlElement_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLHtmlElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLHeadElement_INTERFACE_DEFINED__
#define __IHTMLHeadElement_INTERFACE_DEFINED__

/* interface IHTMLHeadElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLHeadElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f81d-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLHeadElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_profile( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_profile( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLHeadElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLHeadElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLHeadElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLHeadElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLHeadElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLHeadElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLHeadElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLHeadElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_profile )( 
            IHTMLHeadElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_profile )( 
            IHTMLHeadElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLHeadElementVtbl;

    interface IHTMLHeadElement
    {
        CONST_VTBL struct IHTMLHeadElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLHeadElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLHeadElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLHeadElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLHeadElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLHeadElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLHeadElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLHeadElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLHeadElement_put_profile(This,v)	\
    (This)->lpVtbl -> put_profile(This,v)

#define IHTMLHeadElement_get_profile(This,p)	\
    (This)->lpVtbl -> get_profile(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLHeadElement_put_profile_Proxy( 
    IHTMLHeadElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLHeadElement_put_profile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLHeadElement_get_profile_Proxy( 
    IHTMLHeadElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLHeadElement_get_profile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLHeadElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLTitleElement_INTERFACE_DEFINED__
#define __IHTMLTitleElement_INTERFACE_DEFINED__

/* interface IHTMLTitleElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTitleElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f322-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTitleElement : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTitleElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTitleElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTitleElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTitleElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTitleElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTitleElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTitleElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTitleElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IHTMLTitleElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IHTMLTitleElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLTitleElementVtbl;

    interface IHTMLTitleElement
    {
        CONST_VTBL struct IHTMLTitleElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTitleElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTitleElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTitleElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTitleElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTitleElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTitleElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTitleElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTitleElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IHTMLTitleElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTitleElement_put_text_Proxy( 
    IHTMLTitleElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTitleElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTitleElement_get_text_Proxy( 
    IHTMLTitleElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTitleElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTitleElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLMetaElement_INTERFACE_DEFINED__
#define __IHTMLMetaElement_INTERFACE_DEFINED__

/* interface IHTMLMetaElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLMetaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f203-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLMetaElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_httpEquiv( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_httpEquiv( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_content( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_content( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_url( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_url( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_charset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_charset( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLMetaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLMetaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLMetaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLMetaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLMetaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLMetaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLMetaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLMetaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_httpEquiv )( 
            IHTMLMetaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_httpEquiv )( 
            IHTMLMetaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_content )( 
            IHTMLMetaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_content )( 
            IHTMLMetaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLMetaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLMetaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_url )( 
            IHTMLMetaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IHTMLMetaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_charset )( 
            IHTMLMetaElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_charset )( 
            IHTMLMetaElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLMetaElementVtbl;

    interface IHTMLMetaElement
    {
        CONST_VTBL struct IHTMLMetaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLMetaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLMetaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLMetaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLMetaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLMetaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLMetaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLMetaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLMetaElement_put_httpEquiv(This,v)	\
    (This)->lpVtbl -> put_httpEquiv(This,v)

#define IHTMLMetaElement_get_httpEquiv(This,p)	\
    (This)->lpVtbl -> get_httpEquiv(This,p)

#define IHTMLMetaElement_put_content(This,v)	\
    (This)->lpVtbl -> put_content(This,v)

#define IHTMLMetaElement_get_content(This,p)	\
    (This)->lpVtbl -> get_content(This,p)

#define IHTMLMetaElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLMetaElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLMetaElement_put_url(This,v)	\
    (This)->lpVtbl -> put_url(This,v)

#define IHTMLMetaElement_get_url(This,p)	\
    (This)->lpVtbl -> get_url(This,p)

#define IHTMLMetaElement_put_charset(This,v)	\
    (This)->lpVtbl -> put_charset(This,v)

#define IHTMLMetaElement_get_charset(This,p)	\
    (This)->lpVtbl -> get_charset(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_put_httpEquiv_Proxy( 
    IHTMLMetaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement_put_httpEquiv_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_get_httpEquiv_Proxy( 
    IHTMLMetaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement_get_httpEquiv_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_put_content_Proxy( 
    IHTMLMetaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement_put_content_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_get_content_Proxy( 
    IHTMLMetaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement_get_content_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_put_name_Proxy( 
    IHTMLMetaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_get_name_Proxy( 
    IHTMLMetaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_put_url_Proxy( 
    IHTMLMetaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement_put_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_get_url_Proxy( 
    IHTMLMetaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_put_charset_Proxy( 
    IHTMLMetaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement_get_charset_Proxy( 
    IHTMLMetaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLMetaElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLMetaElement2_INTERFACE_DEFINED__
#define __IHTMLMetaElement2_INTERFACE_DEFINED__

/* interface IHTMLMetaElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLMetaElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f81f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLMetaElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scheme( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scheme( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLMetaElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLMetaElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLMetaElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLMetaElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLMetaElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLMetaElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLMetaElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLMetaElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scheme )( 
            IHTMLMetaElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scheme )( 
            IHTMLMetaElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLMetaElement2Vtbl;

    interface IHTMLMetaElement2
    {
        CONST_VTBL struct IHTMLMetaElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLMetaElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLMetaElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLMetaElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLMetaElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLMetaElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLMetaElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLMetaElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLMetaElement2_put_scheme(This,v)	\
    (This)->lpVtbl -> put_scheme(This,v)

#define IHTMLMetaElement2_get_scheme(This,p)	\
    (This)->lpVtbl -> get_scheme(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement2_put_scheme_Proxy( 
    IHTMLMetaElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMetaElement2_put_scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMetaElement2_get_scheme_Proxy( 
    IHTMLMetaElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMetaElement2_get_scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLMetaElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLBaseElement_INTERFACE_DEFINED__
#define __IHTMLBaseElement_INTERFACE_DEFINED__

/* interface IHTMLBaseElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBaseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f204-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBaseElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBaseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBaseElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBaseElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBaseElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBaseElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBaseElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBaseElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBaseElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLBaseElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLBaseElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_target )( 
            IHTMLBaseElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IHTMLBaseElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLBaseElementVtbl;

    interface IHTMLBaseElement
    {
        CONST_VTBL struct IHTMLBaseElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBaseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBaseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBaseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBaseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBaseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBaseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBaseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBaseElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLBaseElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLBaseElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IHTMLBaseElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBaseElement_put_href_Proxy( 
    IHTMLBaseElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBaseElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBaseElement_get_href_Proxy( 
    IHTMLBaseElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBaseElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBaseElement_put_target_Proxy( 
    IHTMLBaseElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBaseElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBaseElement_get_target_Proxy( 
    IHTMLBaseElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBaseElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBaseElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLIsIndexElement_INTERFACE_DEFINED__
#define __IHTMLIsIndexElement_INTERFACE_DEFINED__

/* interface IHTMLIsIndexElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLIsIndexElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f206-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLIsIndexElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_prompt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_prompt( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_action( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_action( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLIsIndexElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLIsIndexElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLIsIndexElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLIsIndexElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLIsIndexElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLIsIndexElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLIsIndexElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLIsIndexElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_prompt )( 
            IHTMLIsIndexElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prompt )( 
            IHTMLIsIndexElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_action )( 
            IHTMLIsIndexElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_action )( 
            IHTMLIsIndexElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLIsIndexElementVtbl;

    interface IHTMLIsIndexElement
    {
        CONST_VTBL struct IHTMLIsIndexElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLIsIndexElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLIsIndexElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLIsIndexElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLIsIndexElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLIsIndexElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLIsIndexElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLIsIndexElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLIsIndexElement_put_prompt(This,v)	\
    (This)->lpVtbl -> put_prompt(This,v)

#define IHTMLIsIndexElement_get_prompt(This,p)	\
    (This)->lpVtbl -> get_prompt(This,p)

#define IHTMLIsIndexElement_put_action(This,v)	\
    (This)->lpVtbl -> put_action(This,v)

#define IHTMLIsIndexElement_get_action(This,p)	\
    (This)->lpVtbl -> get_action(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLIsIndexElement_put_prompt_Proxy( 
    IHTMLIsIndexElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLIsIndexElement_put_prompt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLIsIndexElement_get_prompt_Proxy( 
    IHTMLIsIndexElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLIsIndexElement_get_prompt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLIsIndexElement_put_action_Proxy( 
    IHTMLIsIndexElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLIsIndexElement_put_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLIsIndexElement_get_action_Proxy( 
    IHTMLIsIndexElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLIsIndexElement_get_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLIsIndexElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLIsIndexElement2_INTERFACE_DEFINED__
#define __IHTMLIsIndexElement2_INTERFACE_DEFINED__

/* interface IHTMLIsIndexElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLIsIndexElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f82f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLIsIndexElement2 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_form( 
            /* [out][retval] */ IHTMLFormElement **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLIsIndexElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLIsIndexElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLIsIndexElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLIsIndexElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLIsIndexElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLIsIndexElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLIsIndexElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLIsIndexElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_form )( 
            IHTMLIsIndexElement2 * This,
            /* [out][retval] */ IHTMLFormElement **p);
        
        END_INTERFACE
    } IHTMLIsIndexElement2Vtbl;

    interface IHTMLIsIndexElement2
    {
        CONST_VTBL struct IHTMLIsIndexElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLIsIndexElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLIsIndexElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLIsIndexElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLIsIndexElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLIsIndexElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLIsIndexElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLIsIndexElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLIsIndexElement2_get_form(This,p)	\
    (This)->lpVtbl -> get_form(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLIsIndexElement2_get_form_Proxy( 
    IHTMLIsIndexElement2 * This,
    /* [out][retval] */ IHTMLFormElement **p);


void __RPC_STUB IHTMLIsIndexElement2_get_form_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLIsIndexElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLNextIdElement_INTERFACE_DEFINED__
#define __IHTMLNextIdElement_INTERFACE_DEFINED__

/* interface IHTMLNextIdElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLNextIdElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f207-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLNextIdElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_n( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_n( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLNextIdElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLNextIdElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLNextIdElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLNextIdElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLNextIdElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLNextIdElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLNextIdElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLNextIdElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_n )( 
            IHTMLNextIdElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_n )( 
            IHTMLNextIdElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLNextIdElementVtbl;

    interface IHTMLNextIdElement
    {
        CONST_VTBL struct IHTMLNextIdElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLNextIdElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLNextIdElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLNextIdElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLNextIdElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLNextIdElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLNextIdElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLNextIdElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLNextIdElement_put_n(This,v)	\
    (This)->lpVtbl -> put_n(This,v)

#define IHTMLNextIdElement_get_n(This,p)	\
    (This)->lpVtbl -> get_n(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLNextIdElement_put_n_Proxy( 
    IHTMLNextIdElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLNextIdElement_put_n_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLNextIdElement_get_n_Proxy( 
    IHTMLNextIdElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLNextIdElement_get_n_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLNextIdElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLHtmlElement_DISPINTERFACE_DEFINED__
#define __DispHTMLHtmlElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLHtmlElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLHtmlElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f560-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLHtmlElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLHtmlElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLHtmlElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLHtmlElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLHtmlElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLHtmlElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLHtmlElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLHtmlElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLHtmlElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLHtmlElementVtbl;

    interface DispHTMLHtmlElement
    {
        CONST_VTBL struct DispHTMLHtmlElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLHtmlElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLHtmlElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLHtmlElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLHtmlElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLHtmlElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLHtmlElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLHtmlElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLHtmlElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLHtmlElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f491-98b5-11cf-bb82-00aa00bdce0b")
HTMLHtmlElement;
#endif

#ifndef __DispHTMLHeadElement_DISPINTERFACE_DEFINED__
#define __DispHTMLHeadElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLHeadElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLHeadElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f561-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLHeadElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLHeadElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLHeadElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLHeadElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLHeadElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLHeadElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLHeadElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLHeadElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLHeadElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLHeadElementVtbl;

    interface DispHTMLHeadElement
    {
        CONST_VTBL struct DispHTMLHeadElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLHeadElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLHeadElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLHeadElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLHeadElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLHeadElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLHeadElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLHeadElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLHeadElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLHeadElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f493-98b5-11cf-bb82-00aa00bdce0b")
HTMLHeadElement;
#endif

#ifndef __DispHTMLTitleElement_DISPINTERFACE_DEFINED__
#define __DispHTMLTitleElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLTitleElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLTitleElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f516-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLTitleElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLTitleElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLTitleElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLTitleElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLTitleElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLTitleElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLTitleElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLTitleElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLTitleElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLTitleElementVtbl;

    interface DispHTMLTitleElement
    {
        CONST_VTBL struct DispHTMLTitleElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLTitleElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLTitleElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLTitleElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLTitleElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLTitleElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLTitleElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLTitleElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLTitleElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLTitleElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f284-98b5-11cf-bb82-00aa00bdce0b")
HTMLTitleElement;
#endif

#ifndef __DispHTMLMetaElement_DISPINTERFACE_DEFINED__
#define __DispHTMLMetaElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLMetaElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLMetaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f517-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLMetaElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLMetaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLMetaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLMetaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLMetaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLMetaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLMetaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLMetaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLMetaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLMetaElementVtbl;

    interface DispHTMLMetaElement
    {
        CONST_VTBL struct DispHTMLMetaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLMetaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLMetaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLMetaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLMetaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLMetaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLMetaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLMetaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLMetaElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLMetaElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f275-98b5-11cf-bb82-00aa00bdce0b")
HTMLMetaElement;
#endif

#ifndef __DispHTMLBaseElement_DISPINTERFACE_DEFINED__
#define __DispHTMLBaseElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLBaseElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLBaseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f518-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLBaseElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLBaseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLBaseElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLBaseElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLBaseElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLBaseElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLBaseElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLBaseElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLBaseElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLBaseElementVtbl;

    interface DispHTMLBaseElement
    {
        CONST_VTBL struct DispHTMLBaseElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLBaseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLBaseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLBaseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLBaseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLBaseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLBaseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLBaseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLBaseElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLBaseElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f276-98b5-11cf-bb82-00aa00bdce0b")
HTMLBaseElement;
#endif

#ifndef __DispHTMLIsIndexElement_DISPINTERFACE_DEFINED__
#define __DispHTMLIsIndexElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLIsIndexElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLIsIndexElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f519-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLIsIndexElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLIsIndexElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLIsIndexElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLIsIndexElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLIsIndexElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLIsIndexElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLIsIndexElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLIsIndexElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLIsIndexElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLIsIndexElementVtbl;

    interface DispHTMLIsIndexElement
    {
        CONST_VTBL struct DispHTMLIsIndexElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLIsIndexElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLIsIndexElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLIsIndexElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLIsIndexElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLIsIndexElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLIsIndexElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLIsIndexElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLIsIndexElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLIsIndexElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f278-98b5-11cf-bb82-00aa00bdce0b")
HTMLIsIndexElement;
#endif

#ifndef __DispHTMLNextIdElement_DISPINTERFACE_DEFINED__
#define __DispHTMLNextIdElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLNextIdElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLNextIdElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f51a-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLNextIdElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLNextIdElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLNextIdElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLNextIdElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLNextIdElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLNextIdElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLNextIdElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLNextIdElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLNextIdElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLNextIdElementVtbl;

    interface DispHTMLNextIdElement
    {
        CONST_VTBL struct DispHTMLNextIdElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLNextIdElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLNextIdElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLNextIdElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLNextIdElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLNextIdElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLNextIdElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLNextIdElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLNextIdElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLNextIdElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f279-98b5-11cf-bb82-00aa00bdce0b")
HTMLNextIdElement;
#endif

#ifndef __IHTMLBaseFontElement_INTERFACE_DEFINED__
#define __IHTMLBaseFontElement_INTERFACE_DEFINED__

/* interface IHTMLBaseFontElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBaseFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f202-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBaseFontElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_face( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_face( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBaseFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBaseFontElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBaseFontElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBaseFontElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBaseFontElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBaseFontElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBaseFontElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBaseFontElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IHTMLBaseFontElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IHTMLBaseFontElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_face )( 
            IHTMLBaseFontElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_face )( 
            IHTMLBaseFontElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_size )( 
            IHTMLBaseFontElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_size )( 
            IHTMLBaseFontElement * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLBaseFontElementVtbl;

    interface IHTMLBaseFontElement
    {
        CONST_VTBL struct IHTMLBaseFontElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBaseFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBaseFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBaseFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBaseFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBaseFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBaseFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBaseFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBaseFontElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IHTMLBaseFontElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IHTMLBaseFontElement_put_face(This,v)	\
    (This)->lpVtbl -> put_face(This,v)

#define IHTMLBaseFontElement_get_face(This,p)	\
    (This)->lpVtbl -> get_face(This,p)

#define IHTMLBaseFontElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IHTMLBaseFontElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_put_color_Proxy( 
    IHTMLBaseFontElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLBaseFontElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_get_color_Proxy( 
    IHTMLBaseFontElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLBaseFontElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_put_face_Proxy( 
    IHTMLBaseFontElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLBaseFontElement_put_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_get_face_Proxy( 
    IHTMLBaseFontElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLBaseFontElement_get_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_put_size_Proxy( 
    IHTMLBaseFontElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLBaseFontElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBaseFontElement_get_size_Proxy( 
    IHTMLBaseFontElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLBaseFontElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBaseFontElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLBaseFontElement_DISPINTERFACE_DEFINED__
#define __DispHTMLBaseFontElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLBaseFontElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLBaseFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f504-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLBaseFontElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLBaseFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLBaseFontElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLBaseFontElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLBaseFontElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLBaseFontElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLBaseFontElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLBaseFontElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLBaseFontElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLBaseFontElementVtbl;

    interface DispHTMLBaseFontElement
    {
        CONST_VTBL struct DispHTMLBaseFontElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLBaseFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLBaseFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLBaseFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLBaseFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLBaseFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLBaseFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLBaseFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLBaseFontElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLBaseFontElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f282-98b5-11cf-bb82-00aa00bdce0b")
HTMLBaseFontElement;
#endif

#ifndef __IHTMLUnknownElement_INTERFACE_DEFINED__
#define __IHTMLUnknownElement_INTERFACE_DEFINED__

/* interface IHTMLUnknownElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLUnknownElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f209-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLUnknownElement : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTMLUnknownElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLUnknownElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLUnknownElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLUnknownElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLUnknownElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLUnknownElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLUnknownElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLUnknownElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTMLUnknownElementVtbl;

    interface IHTMLUnknownElement
    {
        CONST_VTBL struct IHTMLUnknownElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLUnknownElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLUnknownElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLUnknownElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLUnknownElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLUnknownElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLUnknownElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLUnknownElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLUnknownElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLUnknownElement_DISPINTERFACE_DEFINED__
#define __DispHTMLUnknownElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLUnknownElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLUnknownElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f539-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLUnknownElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLUnknownElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLUnknownElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLUnknownElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLUnknownElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLUnknownElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLUnknownElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLUnknownElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLUnknownElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLUnknownElementVtbl;

    interface DispHTMLUnknownElement
    {
        CONST_VTBL struct DispHTMLUnknownElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLUnknownElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLUnknownElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLUnknownElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLUnknownElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLUnknownElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLUnknownElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLUnknownElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLUnknownElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLUnknownElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f268-98b5-11cf-bb82-00aa00bdce0b")
HTMLUnknownElement;
#endif

#ifndef __IOmHistory_INTERFACE_DEFINED__
#define __IOmHistory_INTERFACE_DEFINED__

/* interface IOmHistory */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IOmHistory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FECEAAA2-8405-11cf-8BA1-00AA00476DA6")
    IOmHistory : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ short *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE back( 
            /* [in][optional] */ VARIANT *pvargdistance) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE forward( 
            /* [in][optional] */ VARIANT *pvargdistance) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE go( 
            /* [in][optional] */ VARIANT *pvargdistance) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOmHistoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOmHistory * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOmHistory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOmHistory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IOmHistory * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IOmHistory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IOmHistory * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IOmHistory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IOmHistory * This,
            /* [out][retval] */ short *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *back )( 
            IOmHistory * This,
            /* [in][optional] */ VARIANT *pvargdistance);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *forward )( 
            IOmHistory * This,
            /* [in][optional] */ VARIANT *pvargdistance);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *go )( 
            IOmHistory * This,
            /* [in][optional] */ VARIANT *pvargdistance);
        
        END_INTERFACE
    } IOmHistoryVtbl;

    interface IOmHistory
    {
        CONST_VTBL struct IOmHistoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOmHistory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOmHistory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOmHistory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOmHistory_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IOmHistory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IOmHistory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IOmHistory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IOmHistory_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IOmHistory_back(This,pvargdistance)	\
    (This)->lpVtbl -> back(This,pvargdistance)

#define IOmHistory_forward(This,pvargdistance)	\
    (This)->lpVtbl -> forward(This,pvargdistance)

#define IOmHistory_go(This,pvargdistance)	\
    (This)->lpVtbl -> go(This,pvargdistance)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmHistory_get_length_Proxy( 
    IOmHistory * This,
    /* [out][retval] */ short *p);


void __RPC_STUB IOmHistory_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmHistory_back_Proxy( 
    IOmHistory * This,
    /* [in][optional] */ VARIANT *pvargdistance);


void __RPC_STUB IOmHistory_back_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmHistory_forward_Proxy( 
    IOmHistory * This,
    /* [in][optional] */ VARIANT *pvargdistance);


void __RPC_STUB IOmHistory_forward_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmHistory_go_Proxy( 
    IOmHistory * This,
    /* [in][optional] */ VARIANT *pvargdistance);


void __RPC_STUB IOmHistory_go_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOmHistory_INTERFACE_DEFINED__ */


#ifndef __IHTMLMimeTypesCollection_INTERFACE_DEFINED__
#define __IHTMLMimeTypesCollection_INTERFACE_DEFINED__

/* interface IHTMLMimeTypesCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLMimeTypesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f3fc-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLMimeTypesCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLMimeTypesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLMimeTypesCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLMimeTypesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLMimeTypesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLMimeTypesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLMimeTypesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLMimeTypesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLMimeTypesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLMimeTypesCollection * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLMimeTypesCollectionVtbl;

    interface IHTMLMimeTypesCollection
    {
        CONST_VTBL struct IHTMLMimeTypesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLMimeTypesCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLMimeTypesCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLMimeTypesCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLMimeTypesCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLMimeTypesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLMimeTypesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLMimeTypesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLMimeTypesCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMimeTypesCollection_get_length_Proxy( 
    IHTMLMimeTypesCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLMimeTypesCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLMimeTypesCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLPluginsCollection_INTERFACE_DEFINED__
#define __IHTMLPluginsCollection_INTERFACE_DEFINED__

/* interface IHTMLPluginsCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLPluginsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f3fd-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLPluginsCollection : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE refresh( 
            /* [in][defaultvalue] */ VARIANT_BOOL reload = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLPluginsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLPluginsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLPluginsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLPluginsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLPluginsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLPluginsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLPluginsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLPluginsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLPluginsCollection * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *refresh )( 
            IHTMLPluginsCollection * This,
            /* [in][defaultvalue] */ VARIANT_BOOL reload);
        
        END_INTERFACE
    } IHTMLPluginsCollectionVtbl;

    interface IHTMLPluginsCollection
    {
        CONST_VTBL struct IHTMLPluginsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLPluginsCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLPluginsCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLPluginsCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLPluginsCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLPluginsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLPluginsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLPluginsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLPluginsCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLPluginsCollection_refresh(This,reload)	\
    (This)->lpVtbl -> refresh(This,reload)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLPluginsCollection_get_length_Proxy( 
    IHTMLPluginsCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLPluginsCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLPluginsCollection_refresh_Proxy( 
    IHTMLPluginsCollection * This,
    /* [in][defaultvalue] */ VARIANT_BOOL reload);


void __RPC_STUB IHTMLPluginsCollection_refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLPluginsCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLOpsProfile_INTERFACE_DEFINED__
#define __IHTMLOpsProfile_INTERFACE_DEFINED__

/* interface IHTMLOpsProfile */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLOpsProfile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f401-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLOpsProfile : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addRequest( 
            /* [in] */ BSTR name,
            /* [in][optional] */ VARIANT reserved,
            /* [out][retval] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearRequest( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE doRequest( 
            /* [in] */ VARIANT usage,
            /* [in][optional] */ VARIANT fname,
            /* [in][optional] */ VARIANT domain,
            /* [in][optional] */ VARIANT path,
            /* [in][optional] */ VARIANT expire,
            /* [in][optional] */ VARIANT reserved) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ BSTR name,
            /* [out][retval] */ BSTR *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ BSTR name,
            /* [in] */ BSTR value,
            /* [in][optional] */ VARIANT prefs,
            /* [out][retval] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE commitChanges( 
            /* [out][retval] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addReadRequest( 
            /* [in] */ BSTR name,
            /* [in][optional] */ VARIANT reserved,
            /* [out][retval] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE doReadRequest( 
            /* [in] */ VARIANT usage,
            /* [in][optional] */ VARIANT fname,
            /* [in][optional] */ VARIANT domain,
            /* [in][optional] */ VARIANT path,
            /* [in][optional] */ VARIANT expire,
            /* [in][optional] */ VARIANT reserved) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE doWriteRequest( 
            /* [out][retval] */ VARIANT_BOOL *success) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLOpsProfileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLOpsProfile * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLOpsProfile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLOpsProfile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLOpsProfile * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLOpsProfile * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLOpsProfile * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLOpsProfile * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addRequest )( 
            IHTMLOpsProfile * This,
            /* [in] */ BSTR name,
            /* [in][optional] */ VARIANT reserved,
            /* [out][retval] */ VARIANT_BOOL *success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearRequest )( 
            IHTMLOpsProfile * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *doRequest )( 
            IHTMLOpsProfile * This,
            /* [in] */ VARIANT usage,
            /* [in][optional] */ VARIANT fname,
            /* [in][optional] */ VARIANT domain,
            /* [in][optional] */ VARIANT path,
            /* [in][optional] */ VARIANT expire,
            /* [in][optional] */ VARIANT reserved);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IHTMLOpsProfile * This,
            /* [in] */ BSTR name,
            /* [out][retval] */ BSTR *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IHTMLOpsProfile * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value,
            /* [in][optional] */ VARIANT prefs,
            /* [out][retval] */ VARIANT_BOOL *success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *commitChanges )( 
            IHTMLOpsProfile * This,
            /* [out][retval] */ VARIANT_BOOL *success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addReadRequest )( 
            IHTMLOpsProfile * This,
            /* [in] */ BSTR name,
            /* [in][optional] */ VARIANT reserved,
            /* [out][retval] */ VARIANT_BOOL *success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *doReadRequest )( 
            IHTMLOpsProfile * This,
            /* [in] */ VARIANT usage,
            /* [in][optional] */ VARIANT fname,
            /* [in][optional] */ VARIANT domain,
            /* [in][optional] */ VARIANT path,
            /* [in][optional] */ VARIANT expire,
            /* [in][optional] */ VARIANT reserved);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *doWriteRequest )( 
            IHTMLOpsProfile * This,
            /* [out][retval] */ VARIANT_BOOL *success);
        
        END_INTERFACE
    } IHTMLOpsProfileVtbl;

    interface IHTMLOpsProfile
    {
        CONST_VTBL struct IHTMLOpsProfileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLOpsProfile_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLOpsProfile_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLOpsProfile_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLOpsProfile_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLOpsProfile_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLOpsProfile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLOpsProfile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLOpsProfile_addRequest(This,name,reserved,success)	\
    (This)->lpVtbl -> addRequest(This,name,reserved,success)

#define IHTMLOpsProfile_clearRequest(This)	\
    (This)->lpVtbl -> clearRequest(This)

#define IHTMLOpsProfile_doRequest(This,usage,fname,domain,path,expire,reserved)	\
    (This)->lpVtbl -> doRequest(This,usage,fname,domain,path,expire,reserved)

#define IHTMLOpsProfile_getAttribute(This,name,value)	\
    (This)->lpVtbl -> getAttribute(This,name,value)

#define IHTMLOpsProfile_setAttribute(This,name,value,prefs,success)	\
    (This)->lpVtbl -> setAttribute(This,name,value,prefs,success)

#define IHTMLOpsProfile_commitChanges(This,success)	\
    (This)->lpVtbl -> commitChanges(This,success)

#define IHTMLOpsProfile_addReadRequest(This,name,reserved,success)	\
    (This)->lpVtbl -> addReadRequest(This,name,reserved,success)

#define IHTMLOpsProfile_doReadRequest(This,usage,fname,domain,path,expire,reserved)	\
    (This)->lpVtbl -> doReadRequest(This,usage,fname,domain,path,expire,reserved)

#define IHTMLOpsProfile_doWriteRequest(This,success)	\
    (This)->lpVtbl -> doWriteRequest(This,success)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_addRequest_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ BSTR name,
    /* [in][optional] */ VARIANT reserved,
    /* [out][retval] */ VARIANT_BOOL *success);


void __RPC_STUB IHTMLOpsProfile_addRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_clearRequest_Proxy( 
    IHTMLOpsProfile * This);


void __RPC_STUB IHTMLOpsProfile_clearRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_doRequest_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ VARIANT usage,
    /* [in][optional] */ VARIANT fname,
    /* [in][optional] */ VARIANT domain,
    /* [in][optional] */ VARIANT path,
    /* [in][optional] */ VARIANT expire,
    /* [in][optional] */ VARIANT reserved);


void __RPC_STUB IHTMLOpsProfile_doRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_getAttribute_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ BSTR name,
    /* [out][retval] */ BSTR *value);


void __RPC_STUB IHTMLOpsProfile_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_setAttribute_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ BSTR name,
    /* [in] */ BSTR value,
    /* [in][optional] */ VARIANT prefs,
    /* [out][retval] */ VARIANT_BOOL *success);


void __RPC_STUB IHTMLOpsProfile_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_commitChanges_Proxy( 
    IHTMLOpsProfile * This,
    /* [out][retval] */ VARIANT_BOOL *success);


void __RPC_STUB IHTMLOpsProfile_commitChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_addReadRequest_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ BSTR name,
    /* [in][optional] */ VARIANT reserved,
    /* [out][retval] */ VARIANT_BOOL *success);


void __RPC_STUB IHTMLOpsProfile_addReadRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_doReadRequest_Proxy( 
    IHTMLOpsProfile * This,
    /* [in] */ VARIANT usage,
    /* [in][optional] */ VARIANT fname,
    /* [in][optional] */ VARIANT domain,
    /* [in][optional] */ VARIANT path,
    /* [in][optional] */ VARIANT expire,
    /* [in][optional] */ VARIANT reserved);


void __RPC_STUB IHTMLOpsProfile_doReadRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLOpsProfile_doWriteRequest_Proxy( 
    IHTMLOpsProfile * This,
    /* [out][retval] */ VARIANT_BOOL *success);


void __RPC_STUB IHTMLOpsProfile_doWriteRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLOpsProfile_INTERFACE_DEFINED__ */


#ifndef __IOmNavigator_INTERFACE_DEFINED__
#define __IOmNavigator_INTERFACE_DEFINED__

/* interface IOmNavigator */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IOmNavigator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FECEAAA5-8405-11cf-8BA1-00AA00476DA6")
    IOmNavigator : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_appCodeName( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_appName( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_appVersion( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_userAgent( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE javaEnabled( 
            /* [out][retval] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE taintEnabled( 
            /* [out][retval] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mimeTypes( 
            /* [out][retval] */ IHTMLMimeTypesCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_plugins( 
            /* [out][retval] */ IHTMLPluginsCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cookieEnabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_opsProfile( 
            /* [out][retval] */ IHTMLOpsProfile **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *string) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cpuClass( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_systemLanguage( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_browserLanguage( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_userLanguage( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_platform( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_appMinorVersion( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_connectionSpeed( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_onLine( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_userProfile( 
            /* [out][retval] */ IHTMLOpsProfile **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOmNavigatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOmNavigator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOmNavigator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOmNavigator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IOmNavigator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IOmNavigator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IOmNavigator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IOmNavigator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_appCodeName )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_appName )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_appVersion )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_userAgent )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *javaEnabled )( 
            IOmNavigator * This,
            /* [out][retval] */ VARIANT_BOOL *enabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *taintEnabled )( 
            IOmNavigator * This,
            /* [out][retval] */ VARIANT_BOOL *enabled);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mimeTypes )( 
            IOmNavigator * This,
            /* [out][retval] */ IHTMLMimeTypesCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_plugins )( 
            IOmNavigator * This,
            /* [out][retval] */ IHTMLPluginsCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cookieEnabled )( 
            IOmNavigator * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_opsProfile )( 
            IOmNavigator * This,
            /* [out][retval] */ IHTMLOpsProfile **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *string);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cpuClass )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_systemLanguage )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_browserLanguage )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_userLanguage )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_platform )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_appMinorVersion )( 
            IOmNavigator * This,
            /* [out][retval] */ BSTR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_connectionSpeed )( 
            IOmNavigator * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onLine )( 
            IOmNavigator * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_userProfile )( 
            IOmNavigator * This,
            /* [out][retval] */ IHTMLOpsProfile **p);
        
        END_INTERFACE
    } IOmNavigatorVtbl;

    interface IOmNavigator
    {
        CONST_VTBL struct IOmNavigatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOmNavigator_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOmNavigator_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOmNavigator_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOmNavigator_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IOmNavigator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IOmNavigator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IOmNavigator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IOmNavigator_get_appCodeName(This,p)	\
    (This)->lpVtbl -> get_appCodeName(This,p)

#define IOmNavigator_get_appName(This,p)	\
    (This)->lpVtbl -> get_appName(This,p)

#define IOmNavigator_get_appVersion(This,p)	\
    (This)->lpVtbl -> get_appVersion(This,p)

#define IOmNavigator_get_userAgent(This,p)	\
    (This)->lpVtbl -> get_userAgent(This,p)

#define IOmNavigator_javaEnabled(This,enabled)	\
    (This)->lpVtbl -> javaEnabled(This,enabled)

#define IOmNavigator_taintEnabled(This,enabled)	\
    (This)->lpVtbl -> taintEnabled(This,enabled)

#define IOmNavigator_get_mimeTypes(This,p)	\
    (This)->lpVtbl -> get_mimeTypes(This,p)

#define IOmNavigator_get_plugins(This,p)	\
    (This)->lpVtbl -> get_plugins(This,p)

#define IOmNavigator_get_cookieEnabled(This,p)	\
    (This)->lpVtbl -> get_cookieEnabled(This,p)

#define IOmNavigator_get_opsProfile(This,p)	\
    (This)->lpVtbl -> get_opsProfile(This,p)

#define IOmNavigator_toString(This,string)	\
    (This)->lpVtbl -> toString(This,string)

#define IOmNavigator_get_cpuClass(This,p)	\
    (This)->lpVtbl -> get_cpuClass(This,p)

#define IOmNavigator_get_systemLanguage(This,p)	\
    (This)->lpVtbl -> get_systemLanguage(This,p)

#define IOmNavigator_get_browserLanguage(This,p)	\
    (This)->lpVtbl -> get_browserLanguage(This,p)

#define IOmNavigator_get_userLanguage(This,p)	\
    (This)->lpVtbl -> get_userLanguage(This,p)

#define IOmNavigator_get_platform(This,p)	\
    (This)->lpVtbl -> get_platform(This,p)

#define IOmNavigator_get_appMinorVersion(This,p)	\
    (This)->lpVtbl -> get_appMinorVersion(This,p)

#define IOmNavigator_get_connectionSpeed(This,p)	\
    (This)->lpVtbl -> get_connectionSpeed(This,p)

#define IOmNavigator_get_onLine(This,p)	\
    (This)->lpVtbl -> get_onLine(This,p)

#define IOmNavigator_get_userProfile(This,p)	\
    (This)->lpVtbl -> get_userProfile(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_appCodeName_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_appCodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_appName_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_appName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_appVersion_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_appVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_userAgent_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_userAgent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmNavigator_javaEnabled_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ VARIANT_BOOL *enabled);


void __RPC_STUB IOmNavigator_javaEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmNavigator_taintEnabled_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ VARIANT_BOOL *enabled);


void __RPC_STUB IOmNavigator_taintEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_mimeTypes_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ IHTMLMimeTypesCollection **p);


void __RPC_STUB IOmNavigator_get_mimeTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_plugins_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ IHTMLPluginsCollection **p);


void __RPC_STUB IOmNavigator_get_plugins_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_cookieEnabled_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IOmNavigator_get_cookieEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_opsProfile_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ IHTMLOpsProfile **p);


void __RPC_STUB IOmNavigator_get_opsProfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IOmNavigator_toString_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *string);


void __RPC_STUB IOmNavigator_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_cpuClass_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_cpuClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_systemLanguage_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_systemLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_browserLanguage_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_browserLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_userLanguage_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_userLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_platform_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_platform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_appMinorVersion_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IOmNavigator_get_appMinorVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_connectionSpeed_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IOmNavigator_get_connectionSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_onLine_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IOmNavigator_get_onLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOmNavigator_get_userProfile_Proxy( 
    IOmNavigator * This,
    /* [out][retval] */ IHTMLOpsProfile **p);


void __RPC_STUB IOmNavigator_get_userProfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOmNavigator_INTERFACE_DEFINED__ */


#ifndef __IHTMLLocation_INTERFACE_DEFINED__
#define __IHTMLLocation_INTERFACE_DEFINED__

/* interface IHTMLLocation */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLLocation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("163BB1E0-6E00-11cf-837A-48DC04C10000")
    IHTMLLocation : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_protocol( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_host( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_host( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hostname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hostname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_port( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_port( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pathname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pathname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_search( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_search( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hash( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hash( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reload( 
            /* [in][defaultvalue] */ VARIANT_BOOL flag = 0) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE replace( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE assign( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *string) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLLocationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLLocation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLLocation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLLocation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLLocation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLLocation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLLocation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLLocation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_protocol )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocol )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_host )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_host )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hostname )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hostname )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_port )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_port )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pathname )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pathname )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_search )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_search )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hash )( 
            IHTMLLocation * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hash )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *reload )( 
            IHTMLLocation * This,
            /* [in][defaultvalue] */ VARIANT_BOOL flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *replace )( 
            IHTMLLocation * This,
            /* [in] */ BSTR bstr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *assign )( 
            IHTMLLocation * This,
            /* [in] */ BSTR bstr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IHTMLLocation * This,
            /* [out][retval] */ BSTR *string);
        
        END_INTERFACE
    } IHTMLLocationVtbl;

    interface IHTMLLocation
    {
        CONST_VTBL struct IHTMLLocationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLLocation_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLLocation_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLLocation_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLLocation_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLLocation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLLocation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLLocation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLLocation_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLLocation_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLLocation_put_protocol(This,v)	\
    (This)->lpVtbl -> put_protocol(This,v)

#define IHTMLLocation_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IHTMLLocation_put_host(This,v)	\
    (This)->lpVtbl -> put_host(This,v)

#define IHTMLLocation_get_host(This,p)	\
    (This)->lpVtbl -> get_host(This,p)

#define IHTMLLocation_put_hostname(This,v)	\
    (This)->lpVtbl -> put_hostname(This,v)

#define IHTMLLocation_get_hostname(This,p)	\
    (This)->lpVtbl -> get_hostname(This,p)

#define IHTMLLocation_put_port(This,v)	\
    (This)->lpVtbl -> put_port(This,v)

#define IHTMLLocation_get_port(This,p)	\
    (This)->lpVtbl -> get_port(This,p)

#define IHTMLLocation_put_pathname(This,v)	\
    (This)->lpVtbl -> put_pathname(This,v)

#define IHTMLLocation_get_pathname(This,p)	\
    (This)->lpVtbl -> get_pathname(This,p)

#define IHTMLLocation_put_search(This,v)	\
    (This)->lpVtbl -> put_search(This,v)

#define IHTMLLocation_get_search(This,p)	\
    (This)->lpVtbl -> get_search(This,p)

#define IHTMLLocation_put_hash(This,v)	\
    (This)->lpVtbl -> put_hash(This,v)

#define IHTMLLocation_get_hash(This,p)	\
    (This)->lpVtbl -> get_hash(This,p)

#define IHTMLLocation_reload(This,flag)	\
    (This)->lpVtbl -> reload(This,flag)

#define IHTMLLocation_replace(This,bstr)	\
    (This)->lpVtbl -> replace(This,bstr)

#define IHTMLLocation_assign(This,bstr)	\
    (This)->lpVtbl -> assign(This,bstr)

#define IHTMLLocation_toString(This,string)	\
    (This)->lpVtbl -> toString(This,string)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_href_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_href_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_protocol_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_protocol_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_host_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_host_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_hostname_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_hostname_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_port_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_port_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_pathname_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_pathname_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_search_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_search_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_put_hash_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLLocation_put_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_get_hash_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLLocation_get_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_reload_Proxy( 
    IHTMLLocation * This,
    /* [in][defaultvalue] */ VARIANT_BOOL flag);


void __RPC_STUB IHTMLLocation_reload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_replace_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB IHTMLLocation_replace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_assign_Proxy( 
    IHTMLLocation * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB IHTMLLocation_assign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLLocation_toString_Proxy( 
    IHTMLLocation * This,
    /* [out][retval] */ BSTR *string);


void __RPC_STUB IHTMLLocation_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLLocation_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLHistory;

#ifdef __cplusplus

class DECLSPEC_UUID("FECEAAA3-8405-11cf-8BA1-00AA00476DA6")
HTMLHistory;
#endif

EXTERN_C const CLSID CLSID_CMimeTypes;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f3fe-98b5-11cf-bb82-00aa00bdce0b")
CMimeTypes;
#endif

EXTERN_C const CLSID CLSID_CPlugins;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f3ff-98b5-11cf-bb82-00aa00bdce0b")
CPlugins;
#endif

EXTERN_C const CLSID CLSID_COpsProfile;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f402-98b5-11cf-bb82-00aa00bdce0b")
COpsProfile;
#endif

EXTERN_C const CLSID CLSID_HTMLNavigator;

#ifdef __cplusplus

class DECLSPEC_UUID("FECEAAA6-8405-11cf-8BA1-00AA00476DA6")
HTMLNavigator;
#endif

EXTERN_C const CLSID CLSID_HTMLLocation;

#ifdef __cplusplus

class DECLSPEC_UUID("163BB1E1-6E00-11cf-837A-48DC04C10000")
HTMLLocation;
#endif

#ifndef __IHTMLBookmarkCollection_INTERFACE_DEFINED__
#define __IHTMLBookmarkCollection_INTERFACE_DEFINED__

/* interface IHTMLBookmarkCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLBookmarkCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4ce-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLBookmarkCollection : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long index,
            /* [out][retval] */ VARIANT *pVarBookmark) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLBookmarkCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLBookmarkCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLBookmarkCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLBookmarkCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLBookmarkCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLBookmarkCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLBookmarkCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLBookmarkCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLBookmarkCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLBookmarkCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLBookmarkCollection * This,
            /* [in] */ long index,
            /* [out][retval] */ VARIANT *pVarBookmark);
        
        END_INTERFACE
    } IHTMLBookmarkCollectionVtbl;

    interface IHTMLBookmarkCollection
    {
        CONST_VTBL struct IHTMLBookmarkCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLBookmarkCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLBookmarkCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLBookmarkCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLBookmarkCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLBookmarkCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLBookmarkCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLBookmarkCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLBookmarkCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLBookmarkCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLBookmarkCollection_item(This,index,pVarBookmark)	\
    (This)->lpVtbl -> item(This,index,pVarBookmark)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBookmarkCollection_get_length_Proxy( 
    IHTMLBookmarkCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLBookmarkCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLBookmarkCollection_get__newEnum_Proxy( 
    IHTMLBookmarkCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLBookmarkCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLBookmarkCollection_item_Proxy( 
    IHTMLBookmarkCollection * This,
    /* [in] */ long index,
    /* [out][retval] */ VARIANT *pVarBookmark);


void __RPC_STUB IHTMLBookmarkCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLBookmarkCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLDataTransfer_INTERFACE_DEFINED__
#define __IHTMLDataTransfer_INTERFACE_DEFINED__

/* interface IHTMLDataTransfer */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDataTransfer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4b3-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDataTransfer : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setData( 
            /* [in] */ BSTR format,
            /* [in] */ VARIANT *data,
            /* [out][retval] */ VARIANT_BOOL *pret) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getData( 
            /* [in] */ BSTR format,
            /* [out][retval] */ VARIANT *pvarRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearData( 
            /* [in] */ BSTR format,
            /* [out][retval] */ VARIANT_BOOL *pret) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dropEffect( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dropEffect( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_effectAllowed( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_effectAllowed( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDataTransferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDataTransfer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDataTransfer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDataTransfer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDataTransfer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDataTransfer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDataTransfer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDataTransfer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setData )( 
            IHTMLDataTransfer * This,
            /* [in] */ BSTR format,
            /* [in] */ VARIANT *data,
            /* [out][retval] */ VARIANT_BOOL *pret);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getData )( 
            IHTMLDataTransfer * This,
            /* [in] */ BSTR format,
            /* [out][retval] */ VARIANT *pvarRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearData )( 
            IHTMLDataTransfer * This,
            /* [in] */ BSTR format,
            /* [out][retval] */ VARIANT_BOOL *pret);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dropEffect )( 
            IHTMLDataTransfer * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dropEffect )( 
            IHTMLDataTransfer * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_effectAllowed )( 
            IHTMLDataTransfer * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_effectAllowed )( 
            IHTMLDataTransfer * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLDataTransferVtbl;

    interface IHTMLDataTransfer
    {
        CONST_VTBL struct IHTMLDataTransferVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDataTransfer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDataTransfer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDataTransfer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDataTransfer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDataTransfer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDataTransfer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDataTransfer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDataTransfer_setData(This,format,data,pret)	\
    (This)->lpVtbl -> setData(This,format,data,pret)

#define IHTMLDataTransfer_getData(This,format,pvarRet)	\
    (This)->lpVtbl -> getData(This,format,pvarRet)

#define IHTMLDataTransfer_clearData(This,format,pret)	\
    (This)->lpVtbl -> clearData(This,format,pret)

#define IHTMLDataTransfer_put_dropEffect(This,v)	\
    (This)->lpVtbl -> put_dropEffect(This,v)

#define IHTMLDataTransfer_get_dropEffect(This,p)	\
    (This)->lpVtbl -> get_dropEffect(This,p)

#define IHTMLDataTransfer_put_effectAllowed(This,v)	\
    (This)->lpVtbl -> put_effectAllowed(This,v)

#define IHTMLDataTransfer_get_effectAllowed(This,p)	\
    (This)->lpVtbl -> get_effectAllowed(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_setData_Proxy( 
    IHTMLDataTransfer * This,
    /* [in] */ BSTR format,
    /* [in] */ VARIANT *data,
    /* [out][retval] */ VARIANT_BOOL *pret);


void __RPC_STUB IHTMLDataTransfer_setData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_getData_Proxy( 
    IHTMLDataTransfer * This,
    /* [in] */ BSTR format,
    /* [out][retval] */ VARIANT *pvarRet);


void __RPC_STUB IHTMLDataTransfer_getData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_clearData_Proxy( 
    IHTMLDataTransfer * This,
    /* [in] */ BSTR format,
    /* [out][retval] */ VARIANT_BOOL *pret);


void __RPC_STUB IHTMLDataTransfer_clearData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_put_dropEffect_Proxy( 
    IHTMLDataTransfer * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDataTransfer_put_dropEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_get_dropEffect_Proxy( 
    IHTMLDataTransfer * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDataTransfer_get_dropEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_put_effectAllowed_Proxy( 
    IHTMLDataTransfer * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDataTransfer_put_effectAllowed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDataTransfer_get_effectAllowed_Proxy( 
    IHTMLDataTransfer * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDataTransfer_get_effectAllowed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDataTransfer_INTERFACE_DEFINED__ */


#ifndef __IHTMLEventObj2_INTERFACE_DEFINED__
#define __IHTMLEventObj2_INTERFACE_DEFINED__

/* interface IHTMLEventObj2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLEventObj2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f48B-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLEventObj2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ BSTR strAttributeName,
            /* [in] */ VARIANT AttributeValue,
            /* [in][defaultvalue] */ LONG lFlags = 1) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ BSTR strAttributeName,
            /* [in][defaultvalue] */ LONG lFlags,
            /* [out][retval] */ VARIANT *AttributeValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeAttribute( 
            /* [in] */ BSTR strAttributeName,
            /* [in][defaultvalue] */ LONG lFlags,
            /* [out][retval] */ VARIANT_BOOL *pfSuccess) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_propertyName( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_propertyName( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_bookmarks( 
            /* [in] */ IHTMLBookmarkCollection *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bookmarks( 
            /* [out][retval] */ IHTMLBookmarkCollection **p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_recordset( 
            /* [in] */ IDispatch *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_recordset( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dataFld( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataFld( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_boundElements( 
            /* [in] */ IHTMLElementCollection *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_boundElements( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_repeat( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_repeat( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_srcUrn( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_srcUrn( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_srcElement( 
            /* [in] */ IHTMLElement *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_srcElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_altKey( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_altKey( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ctrlKey( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ctrlKey( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_shiftKey( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_shiftKey( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_fromElement( 
            /* [in] */ IHTMLElement *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fromElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_toElement( 
            /* [in] */ IHTMLElement *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_toElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_button( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_button( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_qualifier( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_qualifier( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_reason( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_reason( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_x( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_x( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_y( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_y( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clientX( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clientX( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clientY( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clientY( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_offsetX( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_offsetX( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_offsetY( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_offsetY( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_screenX( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_screenX( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_screenY( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_screenY( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propputref] */ HRESULT STDMETHODCALLTYPE putref_srcFilter( 
            /* [in] */ IDispatch *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_srcFilter( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataTransfer( 
            /* [out][retval] */ IHTMLDataTransfer **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLEventObj2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLEventObj2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLEventObj2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLEventObj2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLEventObj2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLEventObj2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLEventObj2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLEventObj2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR strAttributeName,
            /* [in] */ VARIANT AttributeValue,
            /* [in][defaultvalue] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR strAttributeName,
            /* [in][defaultvalue] */ LONG lFlags,
            /* [out][retval] */ VARIANT *AttributeValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR strAttributeName,
            /* [in][defaultvalue] */ LONG lFlags,
            /* [out][retval] */ VARIANT_BOOL *pfSuccess);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_propertyName )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_propertyName )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_bookmarks )( 
            IHTMLEventObj2 * This,
            /* [in] */ IHTMLBookmarkCollection *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bookmarks )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLBookmarkCollection **p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_recordset )( 
            IHTMLEventObj2 * This,
            /* [in] */ IDispatch *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_recordset )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataFld )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataFld )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_boundElements )( 
            IHTMLEventObj2 * This,
            /* [in] */ IHTMLElementCollection *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_boundElements )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeat )( 
            IHTMLEventObj2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeat )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_srcUrn )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_srcUrn )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_srcElement )( 
            IHTMLEventObj2 * This,
            /* [in] */ IHTMLElement *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_srcElement )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_altKey )( 
            IHTMLEventObj2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_altKey )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ctrlKey )( 
            IHTMLEventObj2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ctrlKey )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_shiftKey )( 
            IHTMLEventObj2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_shiftKey )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_fromElement )( 
            IHTMLEventObj2 * This,
            /* [in] */ IHTMLElement *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fromElement )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_toElement )( 
            IHTMLEventObj2 * This,
            /* [in] */ IHTMLElement *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_toElement )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_button )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_button )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_qualifier )( 
            IHTMLEventObj2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_qualifier )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_reason )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_reason )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_x )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_x )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_y )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_y )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clientX )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientX )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clientY )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientY )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_offsetX )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_offsetX )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_offsetY )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_offsetY )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_screenX )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_screenX )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_screenY )( 
            IHTMLEventObj2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_screenY )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_srcFilter )( 
            IHTMLEventObj2 * This,
            /* [in] */ IDispatch *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_srcFilter )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataTransfer )( 
            IHTMLEventObj2 * This,
            /* [out][retval] */ IHTMLDataTransfer **p);
        
        END_INTERFACE
    } IHTMLEventObj2Vtbl;

    interface IHTMLEventObj2
    {
        CONST_VTBL struct IHTMLEventObj2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLEventObj2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLEventObj2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLEventObj2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLEventObj2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLEventObj2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLEventObj2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLEventObj2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLEventObj2_setAttribute(This,strAttributeName,AttributeValue,lFlags)	\
    (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue,lFlags)

#define IHTMLEventObj2_getAttribute(This,strAttributeName,lFlags,AttributeValue)	\
    (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue)

#define IHTMLEventObj2_removeAttribute(This,strAttributeName,lFlags,pfSuccess)	\
    (This)->lpVtbl -> removeAttribute(This,strAttributeName,lFlags,pfSuccess)

#define IHTMLEventObj2_put_propertyName(This,v)	\
    (This)->lpVtbl -> put_propertyName(This,v)

#define IHTMLEventObj2_get_propertyName(This,p)	\
    (This)->lpVtbl -> get_propertyName(This,p)

#define IHTMLEventObj2_putref_bookmarks(This,v)	\
    (This)->lpVtbl -> putref_bookmarks(This,v)

#define IHTMLEventObj2_get_bookmarks(This,p)	\
    (This)->lpVtbl -> get_bookmarks(This,p)

#define IHTMLEventObj2_putref_recordset(This,v)	\
    (This)->lpVtbl -> putref_recordset(This,v)

#define IHTMLEventObj2_get_recordset(This,p)	\
    (This)->lpVtbl -> get_recordset(This,p)

#define IHTMLEventObj2_put_dataFld(This,v)	\
    (This)->lpVtbl -> put_dataFld(This,v)

#define IHTMLEventObj2_get_dataFld(This,p)	\
    (This)->lpVtbl -> get_dataFld(This,p)

#define IHTMLEventObj2_putref_boundElements(This,v)	\
    (This)->lpVtbl -> putref_boundElements(This,v)

#define IHTMLEventObj2_get_boundElements(This,p)	\
    (This)->lpVtbl -> get_boundElements(This,p)

#define IHTMLEventObj2_put_repeat(This,v)	\
    (This)->lpVtbl -> put_repeat(This,v)

#define IHTMLEventObj2_get_repeat(This,p)	\
    (This)->lpVtbl -> get_repeat(This,p)

#define IHTMLEventObj2_put_srcUrn(This,v)	\
    (This)->lpVtbl -> put_srcUrn(This,v)

#define IHTMLEventObj2_get_srcUrn(This,p)	\
    (This)->lpVtbl -> get_srcUrn(This,p)

#define IHTMLEventObj2_putref_srcElement(This,v)	\
    (This)->lpVtbl -> putref_srcElement(This,v)

#define IHTMLEventObj2_get_srcElement(This,p)	\
    (This)->lpVtbl -> get_srcElement(This,p)

#define IHTMLEventObj2_put_altKey(This,v)	\
    (This)->lpVtbl -> put_altKey(This,v)

#define IHTMLEventObj2_get_altKey(This,p)	\
    (This)->lpVtbl -> get_altKey(This,p)

#define IHTMLEventObj2_put_ctrlKey(This,v)	\
    (This)->lpVtbl -> put_ctrlKey(This,v)

#define IHTMLEventObj2_get_ctrlKey(This,p)	\
    (This)->lpVtbl -> get_ctrlKey(This,p)

#define IHTMLEventObj2_put_shiftKey(This,v)	\
    (This)->lpVtbl -> put_shiftKey(This,v)

#define IHTMLEventObj2_get_shiftKey(This,p)	\
    (This)->lpVtbl -> get_shiftKey(This,p)

#define IHTMLEventObj2_putref_fromElement(This,v)	\
    (This)->lpVtbl -> putref_fromElement(This,v)

#define IHTMLEventObj2_get_fromElement(This,p)	\
    (This)->lpVtbl -> get_fromElement(This,p)

#define IHTMLEventObj2_putref_toElement(This,v)	\
    (This)->lpVtbl -> putref_toElement(This,v)

#define IHTMLEventObj2_get_toElement(This,p)	\
    (This)->lpVtbl -> get_toElement(This,p)

#define IHTMLEventObj2_put_button(This,v)	\
    (This)->lpVtbl -> put_button(This,v)

#define IHTMLEventObj2_get_button(This,p)	\
    (This)->lpVtbl -> get_button(This,p)

#define IHTMLEventObj2_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IHTMLEventObj2_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IHTMLEventObj2_put_qualifier(This,v)	\
    (This)->lpVtbl -> put_qualifier(This,v)

#define IHTMLEventObj2_get_qualifier(This,p)	\
    (This)->lpVtbl -> get_qualifier(This,p)

#define IHTMLEventObj2_put_reason(This,v)	\
    (This)->lpVtbl -> put_reason(This,v)

#define IHTMLEventObj2_get_reason(This,p)	\
    (This)->lpVtbl -> get_reason(This,p)

#define IHTMLEventObj2_put_x(This,v)	\
    (This)->lpVtbl -> put_x(This,v)

#define IHTMLEventObj2_get_x(This,p)	\
    (This)->lpVtbl -> get_x(This,p)

#define IHTMLEventObj2_put_y(This,v)	\
    (This)->lpVtbl -> put_y(This,v)

#define IHTMLEventObj2_get_y(This,p)	\
    (This)->lpVtbl -> get_y(This,p)

#define IHTMLEventObj2_put_clientX(This,v)	\
    (This)->lpVtbl -> put_clientX(This,v)

#define IHTMLEventObj2_get_clientX(This,p)	\
    (This)->lpVtbl -> get_clientX(This,p)

#define IHTMLEventObj2_put_clientY(This,v)	\
    (This)->lpVtbl -> put_clientY(This,v)

#define IHTMLEventObj2_get_clientY(This,p)	\
    (This)->lpVtbl -> get_clientY(This,p)

#define IHTMLEventObj2_put_offsetX(This,v)	\
    (This)->lpVtbl -> put_offsetX(This,v)

#define IHTMLEventObj2_get_offsetX(This,p)	\
    (This)->lpVtbl -> get_offsetX(This,p)

#define IHTMLEventObj2_put_offsetY(This,v)	\
    (This)->lpVtbl -> put_offsetY(This,v)

#define IHTMLEventObj2_get_offsetY(This,p)	\
    (This)->lpVtbl -> get_offsetY(This,p)

#define IHTMLEventObj2_put_screenX(This,v)	\
    (This)->lpVtbl -> put_screenX(This,v)

#define IHTMLEventObj2_get_screenX(This,p)	\
    (This)->lpVtbl -> get_screenX(This,p)

#define IHTMLEventObj2_put_screenY(This,v)	\
    (This)->lpVtbl -> put_screenY(This,v)

#define IHTMLEventObj2_get_screenY(This,p)	\
    (This)->lpVtbl -> get_screenY(This,p)

#define IHTMLEventObj2_putref_srcFilter(This,v)	\
    (This)->lpVtbl -> putref_srcFilter(This,v)

#define IHTMLEventObj2_get_srcFilter(This,p)	\
    (This)->lpVtbl -> get_srcFilter(This,p)

#define IHTMLEventObj2_get_dataTransfer(This,p)	\
    (This)->lpVtbl -> get_dataTransfer(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_setAttribute_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR strAttributeName,
    /* [in] */ VARIANT AttributeValue,
    /* [in][defaultvalue] */ LONG lFlags);


void __RPC_STUB IHTMLEventObj2_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_getAttribute_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR strAttributeName,
    /* [in][defaultvalue] */ LONG lFlags,
    /* [out][retval] */ VARIANT *AttributeValue);


void __RPC_STUB IHTMLEventObj2_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_removeAttribute_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR strAttributeName,
    /* [in][defaultvalue] */ LONG lFlags,
    /* [out][retval] */ VARIANT_BOOL *pfSuccess);


void __RPC_STUB IHTMLEventObj2_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_propertyName_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEventObj2_put_propertyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_propertyName_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj2_get_propertyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_bookmarks_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IHTMLBookmarkCollection *v);


void __RPC_STUB IHTMLEventObj2_putref_bookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_bookmarks_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLBookmarkCollection **p);


void __RPC_STUB IHTMLEventObj2_get_bookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_recordset_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IDispatch *v);


void __RPC_STUB IHTMLEventObj2_putref_recordset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_recordset_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLEventObj2_get_recordset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_dataFld_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEventObj2_put_dataFld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_dataFld_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj2_get_dataFld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_boundElements_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IHTMLElementCollection *v);


void __RPC_STUB IHTMLEventObj2_putref_boundElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_boundElements_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLEventObj2_get_boundElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_repeat_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj2_put_repeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_repeat_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj2_get_repeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_srcUrn_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEventObj2_put_srcUrn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_srcUrn_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj2_get_srcUrn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_srcElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IHTMLElement *v);


void __RPC_STUB IHTMLEventObj2_putref_srcElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_srcElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLEventObj2_get_srcElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_altKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj2_put_altKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_altKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj2_get_altKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_ctrlKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj2_put_ctrlKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_ctrlKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj2_get_ctrlKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_shiftKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj2_put_shiftKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_shiftKey_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj2_get_shiftKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_fromElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IHTMLElement *v);


void __RPC_STUB IHTMLEventObj2_putref_fromElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_fromElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLEventObj2_get_fromElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_toElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IHTMLElement *v);


void __RPC_STUB IHTMLEventObj2_putref_toElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_toElement_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLEventObj2_get_toElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_button_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_button_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_button_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_button_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_type_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEventObj2_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_type_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj2_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_qualifier_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEventObj2_put_qualifier_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_qualifier_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj2_get_qualifier_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_reason_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_reason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_reason_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_reason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_x_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_x_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_x_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_x_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_y_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_y_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_clientX_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_clientX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_clientX_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_clientX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_clientY_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_clientY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_clientY_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_clientY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_offsetX_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_offsetX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_offsetX_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_offsetX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_offsetY_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_offsetY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_offsetY_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_offsetY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_screenX_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_screenX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_screenX_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_screenX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_put_screenY_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLEventObj2_put_screenY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_screenY_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj2_get_screenY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propputref] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_putref_srcFilter_Proxy( 
    IHTMLEventObj2 * This,
    /* [in] */ IDispatch *v);


void __RPC_STUB IHTMLEventObj2_putref_srcFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_srcFilter_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLEventObj2_get_srcFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj2_get_dataTransfer_Proxy( 
    IHTMLEventObj2 * This,
    /* [out][retval] */ IHTMLDataTransfer **p);


void __RPC_STUB IHTMLEventObj2_get_dataTransfer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLEventObj2_INTERFACE_DEFINED__ */


#ifndef __IHTMLEventObj3_INTERFACE_DEFINED__
#define __IHTMLEventObj3_INTERFACE_DEFINED__

/* interface IHTMLEventObj3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLEventObj3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f680-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLEventObj3 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_contentOverflow( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_shiftLeft( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_shiftLeft( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_altLeft( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_altLeft( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ctrlLeft( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ctrlLeft( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_imeCompositionChange( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_imeNotifyCommand( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_imeNotifyData( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_imeRequest( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_imeRequestData( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_keyboardLayout( 
            /* [out][retval] */ LONG_PTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_behaviorCookie( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_behaviorPart( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nextPage( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLEventObj3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLEventObj3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLEventObj3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLEventObj3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLEventObj3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLEventObj3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLEventObj3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLEventObj3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_contentOverflow )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_shiftLeft )( 
            IHTMLEventObj3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_shiftLeft )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_altLeft )( 
            IHTMLEventObj3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_altLeft )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ctrlLeft )( 
            IHTMLEventObj3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ctrlLeft )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imeCompositionChange )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imeNotifyCommand )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imeNotifyData )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imeRequest )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_imeRequestData )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_keyboardLayout )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ LONG_PTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_behaviorCookie )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_behaviorPart )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextPage )( 
            IHTMLEventObj3 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLEventObj3Vtbl;

    interface IHTMLEventObj3
    {
        CONST_VTBL struct IHTMLEventObj3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLEventObj3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLEventObj3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLEventObj3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLEventObj3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLEventObj3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLEventObj3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLEventObj3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLEventObj3_get_contentOverflow(This,p)	\
    (This)->lpVtbl -> get_contentOverflow(This,p)

#define IHTMLEventObj3_put_shiftLeft(This,v)	\
    (This)->lpVtbl -> put_shiftLeft(This,v)

#define IHTMLEventObj3_get_shiftLeft(This,p)	\
    (This)->lpVtbl -> get_shiftLeft(This,p)

#define IHTMLEventObj3_put_altLeft(This,v)	\
    (This)->lpVtbl -> put_altLeft(This,v)

#define IHTMLEventObj3_get_altLeft(This,p)	\
    (This)->lpVtbl -> get_altLeft(This,p)

#define IHTMLEventObj3_put_ctrlLeft(This,v)	\
    (This)->lpVtbl -> put_ctrlLeft(This,v)

#define IHTMLEventObj3_get_ctrlLeft(This,p)	\
    (This)->lpVtbl -> get_ctrlLeft(This,p)

#define IHTMLEventObj3_get_imeCompositionChange(This,p)	\
    (This)->lpVtbl -> get_imeCompositionChange(This,p)

#define IHTMLEventObj3_get_imeNotifyCommand(This,p)	\
    (This)->lpVtbl -> get_imeNotifyCommand(This,p)

#define IHTMLEventObj3_get_imeNotifyData(This,p)	\
    (This)->lpVtbl -> get_imeNotifyData(This,p)

#define IHTMLEventObj3_get_imeRequest(This,p)	\
    (This)->lpVtbl -> get_imeRequest(This,p)

#define IHTMLEventObj3_get_imeRequestData(This,p)	\
    (This)->lpVtbl -> get_imeRequestData(This,p)

#define IHTMLEventObj3_get_keyboardLayout(This,p)	\
    (This)->lpVtbl -> get_keyboardLayout(This,p)

#define IHTMLEventObj3_get_behaviorCookie(This,p)	\
    (This)->lpVtbl -> get_behaviorCookie(This,p)

#define IHTMLEventObj3_get_behaviorPart(This,p)	\
    (This)->lpVtbl -> get_behaviorPart(This,p)

#define IHTMLEventObj3_get_nextPage(This,p)	\
    (This)->lpVtbl -> get_nextPage(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_contentOverflow_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj3_get_contentOverflow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_put_shiftLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj3_put_shiftLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_shiftLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj3_get_shiftLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_put_altLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj3_put_altLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_altLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj3_get_altLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_put_ctrlLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLEventObj3_put_ctrlLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_ctrlLeft_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLEventObj3_get_ctrlLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_imeCompositionChange_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_imeCompositionChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_imeNotifyCommand_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_imeNotifyCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_imeNotifyData_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_imeNotifyData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_imeRequest_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_imeRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_imeRequestData_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_imeRequestData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_keyboardLayout_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ LONG_PTR *p);


void __RPC_STUB IHTMLEventObj3_get_keyboardLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_behaviorCookie_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj3_get_behaviorCookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_behaviorPart_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj3_get_behaviorPart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj3_get_nextPage_Proxy( 
    IHTMLEventObj3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEventObj3_get_nextPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLEventObj3_INTERFACE_DEFINED__ */


#ifndef __IHTMLEventObj4_INTERFACE_DEFINED__
#define __IHTMLEventObj4_INTERFACE_DEFINED__

/* interface IHTMLEventObj4 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLEventObj4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f814-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLEventObj4 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_wheelDelta( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLEventObj4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLEventObj4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLEventObj4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLEventObj4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLEventObj4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLEventObj4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLEventObj4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLEventObj4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_wheelDelta )( 
            IHTMLEventObj4 * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLEventObj4Vtbl;

    interface IHTMLEventObj4
    {
        CONST_VTBL struct IHTMLEventObj4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLEventObj4_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLEventObj4_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLEventObj4_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLEventObj4_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLEventObj4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLEventObj4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLEventObj4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLEventObj4_get_wheelDelta(This,p)	\
    (This)->lpVtbl -> get_wheelDelta(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEventObj4_get_wheelDelta_Proxy( 
    IHTMLEventObj4 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLEventObj4_get_wheelDelta_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLEventObj4_INTERFACE_DEFINED__ */


#ifndef __DispCEventObj_DISPINTERFACE_DEFINED__
#define __DispCEventObj_DISPINTERFACE_DEFINED__

/* dispinterface DispCEventObj */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispCEventObj;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f558-98b5-11cf-bb82-00aa00bdce0b")
    DispCEventObj : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispCEventObjVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispCEventObj * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispCEventObj * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispCEventObj * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispCEventObj * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispCEventObj * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispCEventObj * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispCEventObj * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispCEventObjVtbl;

    interface DispCEventObj
    {
        CONST_VTBL struct DispCEventObjVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispCEventObj_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispCEventObj_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispCEventObj_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispCEventObj_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispCEventObj_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispCEventObj_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispCEventObj_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispCEventObj_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CEventObj;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f48A-98b5-11cf-bb82-00aa00bdce0b")
CEventObj;
#endif

#ifndef __HTMLWindowEvents2_DISPINTERFACE_DEFINED__
#define __HTMLWindowEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLWindowEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLWindowEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f625-98b5-11cf-bb82-00aa00bdce0b")
    HTMLWindowEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLWindowEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLWindowEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLWindowEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLWindowEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLWindowEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLWindowEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLWindowEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLWindowEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLWindowEvents2Vtbl;

    interface HTMLWindowEvents2
    {
        CONST_VTBL struct HTMLWindowEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLWindowEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLWindowEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLWindowEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLWindowEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLWindowEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLWindowEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLWindowEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLWindowEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLWindowEvents_DISPINTERFACE_DEFINED__
#define __HTMLWindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLWindowEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("96A0A4E0-D062-11cf-94B6-00AA0060275C")
    HTMLWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLWindowEventsVtbl;

    interface HTMLWindowEvents
    {
        CONST_VTBL struct HTMLWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLWindowEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLDocument2_INTERFACE_DEFINED__
#define __IHTMLDocument2_INTERFACE_DEFINED__

/* interface IHTMLDocument2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDocument2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("332c4425-26cb-11d0-b483-00c04fd90119")
    IHTMLDocument2 : public IHTMLDocument
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_all( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_body( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_activeElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_images( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_applets( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_links( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_forms( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_anchors( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scripts( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_designMode( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_designMode( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selection( 
            /* [out][retval] */ IHTMLSelectionObject **p) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frames( 
            /* [out][retval] */ IHTMLFramesCollection2 **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_embeds( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_plugins( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_alinkColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_alinkColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_fgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_linkColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_linkColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vlinkColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vlinkColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_referrer( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_location( 
            /* [out][retval] */ IHTMLLocation **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_lastModified( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_URL( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_domain( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_domain( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cookie( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cookie( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [hidden][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_expando( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [hidden][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_expando( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_charset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_charset( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultCharset( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultCharset( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mimeType( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileSize( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileCreatedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileModifiedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fileUpdatedDate( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_security( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nameProp( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][vararg] */ HRESULT STDMETHODCALLTYPE write( 
            /* [in] */ SAFEARRAY * psarray) = 0;
        
        virtual /* [id][vararg] */ HRESULT STDMETHODCALLTYPE writeln( 
            /* [in] */ SAFEARRAY * psarray) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE open( 
            /* [in][defaultvalue] */ BSTR url,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT features,
            /* [in][optional] */ VARIANT replace,
            /* [out][retval] */ IDispatch **pomWindowResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clear( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandSupported( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandEnabled( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandState( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandIndeterm( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandText( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandValue( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommandShowHelp( 
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createElement( 
            /* [in] */ BSTR eTag,
            /* [out][retval] */ IHTMLElement **newElem) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onhelp( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onhelp( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onclick( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onclick( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondblclick( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondblclick( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onkeyup( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onkeyup( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onkeydown( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onkeydown( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onkeypress( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onkeypress( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmouseup( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmouseup( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmousedown( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmousedown( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmousemove( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmousemove( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmouseout( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmouseout( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmouseover( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmouseover( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreadystatechange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onreadystatechange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onafterupdate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onafterupdate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowexit( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowexit( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowenter( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowenter( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondragstart( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondragstart( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselectstart( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselectstart( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE elementFromPoint( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [out][retval] */ IHTMLElement **elementHit) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parentWindow( 
            /* [out][retval] */ IHTMLWindow2 **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_styleSheets( 
            /* [out][retval] */ IHTMLStyleSheetsCollection **p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeupdate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeupdate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerrorupdate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerrorupdate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *String) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createStyleSheet( 
            /* [in][defaultvalue] */ BSTR bstrHref,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ IHTMLStyleSheet **ppnewStyleSheet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDocument2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDocument2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDocument2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDocument2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDocument2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDocument2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDocument2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDocument2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_all )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_body )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElement )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_images )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_applets )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_links )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_forms )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_anchors )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_title )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scripts )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_designMode )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_designMode )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selection )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLSelectionObject **p);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frames )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLFramesCollection2 **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_embeds )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_plugins )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_alinkColor )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_alinkColor )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgColor )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgColor )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fgColor )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fgColor )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_linkColor )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_linkColor )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vlinkColor )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vlinkColor )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_referrer )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_location )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLLocation **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastModified )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_domain )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_domain )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cookie )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cookie )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [hidden][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_expando )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_expando )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_charset )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_charset )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultCharset )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultCharset )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mimeType )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileSize )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileCreatedDate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileModifiedDate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fileUpdatedDate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_security )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocol )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nameProp )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][vararg] */ HRESULT ( STDMETHODCALLTYPE *write )( 
            IHTMLDocument2 * This,
            /* [in] */ SAFEARRAY * psarray);
        
        /* [id][vararg] */ HRESULT ( STDMETHODCALLTYPE *writeln )( 
            IHTMLDocument2 * This,
            /* [in] */ SAFEARRAY * psarray);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *open )( 
            IHTMLDocument2 * This,
            /* [in][defaultvalue] */ BSTR url,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT features,
            /* [in][optional] */ VARIANT replace,
            /* [out][retval] */ IDispatch **pomWindowResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IHTMLDocument2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clear )( 
            IHTMLDocument2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandState )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandText )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ BSTR *pcmdText);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryCommandValue )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT *pcmdValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommand )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [in][defaultvalue] */ VARIANT_BOOL showUI,
            /* [in][optional] */ VARIANT value,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR cmdID,
            /* [out][retval] */ VARIANT_BOOL *pfRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IHTMLDocument2 * This,
            /* [in] */ BSTR eTag,
            /* [out][retval] */ IHTMLElement **newElem);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onhelp )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onhelp )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onclick )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onclick )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondblclick )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondblclick )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onkeyup )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onkeyup )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onkeydown )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onkeydown )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onkeypress )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onkeypress )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmouseup )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmouseup )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmousedown )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmousedown )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmousemove )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmousemove )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmouseout )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmouseout )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmouseover )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmouseover )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onafterupdate )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onafterupdate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowexit )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowexit )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowenter )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowenter )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondragstart )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondragstart )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselectstart )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselectstart )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *elementFromPoint )( 
            IHTMLDocument2 * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [out][retval] */ IHTMLElement **elementHit);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentWindow )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLWindow2 **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_styleSheets )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ IHTMLStyleSheetsCollection **p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeupdate )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeupdate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerrorupdate )( 
            IHTMLDocument2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerrorupdate )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IHTMLDocument2 * This,
            /* [out][retval] */ BSTR *String);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createStyleSheet )( 
            IHTMLDocument2 * This,
            /* [in][defaultvalue] */ BSTR bstrHref,
            /* [in][defaultvalue] */ long lIndex,
            /* [out][retval] */ IHTMLStyleSheet **ppnewStyleSheet);
        
        END_INTERFACE
    } IHTMLDocument2Vtbl;

    interface IHTMLDocument2
    {
        CONST_VTBL struct IHTMLDocument2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDocument2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDocument2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDocument2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDocument2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDocument2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDocument2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDocument2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDocument2_get_Script(This,p)	\
    (This)->lpVtbl -> get_Script(This,p)


#define IHTMLDocument2_get_all(This,p)	\
    (This)->lpVtbl -> get_all(This,p)

#define IHTMLDocument2_get_body(This,p)	\
    (This)->lpVtbl -> get_body(This,p)

#define IHTMLDocument2_get_activeElement(This,p)	\
    (This)->lpVtbl -> get_activeElement(This,p)

#define IHTMLDocument2_get_images(This,p)	\
    (This)->lpVtbl -> get_images(This,p)

#define IHTMLDocument2_get_applets(This,p)	\
    (This)->lpVtbl -> get_applets(This,p)

#define IHTMLDocument2_get_links(This,p)	\
    (This)->lpVtbl -> get_links(This,p)

#define IHTMLDocument2_get_forms(This,p)	\
    (This)->lpVtbl -> get_forms(This,p)

#define IHTMLDocument2_get_anchors(This,p)	\
    (This)->lpVtbl -> get_anchors(This,p)

#define IHTMLDocument2_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IHTMLDocument2_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IHTMLDocument2_get_scripts(This,p)	\
    (This)->lpVtbl -> get_scripts(This,p)

#define IHTMLDocument2_put_designMode(This,v)	\
    (This)->lpVtbl -> put_designMode(This,v)

#define IHTMLDocument2_get_designMode(This,p)	\
    (This)->lpVtbl -> get_designMode(This,p)

#define IHTMLDocument2_get_selection(This,p)	\
    (This)->lpVtbl -> get_selection(This,p)

#define IHTMLDocument2_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLDocument2_get_frames(This,p)	\
    (This)->lpVtbl -> get_frames(This,p)

#define IHTMLDocument2_get_embeds(This,p)	\
    (This)->lpVtbl -> get_embeds(This,p)

#define IHTMLDocument2_get_plugins(This,p)	\
    (This)->lpVtbl -> get_plugins(This,p)

#define IHTMLDocument2_put_alinkColor(This,v)	\
    (This)->lpVtbl -> put_alinkColor(This,v)

#define IHTMLDocument2_get_alinkColor(This,p)	\
    (This)->lpVtbl -> get_alinkColor(This,p)

#define IHTMLDocument2_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IHTMLDocument2_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IHTMLDocument2_put_fgColor(This,v)	\
    (This)->lpVtbl -> put_fgColor(This,v)

#define IHTMLDocument2_get_fgColor(This,p)	\
    (This)->lpVtbl -> get_fgColor(This,p)

#define IHTMLDocument2_put_linkColor(This,v)	\
    (This)->lpVtbl -> put_linkColor(This,v)

#define IHTMLDocument2_get_linkColor(This,p)	\
    (This)->lpVtbl -> get_linkColor(This,p)

#define IHTMLDocument2_put_vlinkColor(This,v)	\
    (This)->lpVtbl -> put_vlinkColor(This,v)

#define IHTMLDocument2_get_vlinkColor(This,p)	\
    (This)->lpVtbl -> get_vlinkColor(This,p)

#define IHTMLDocument2_get_referrer(This,p)	\
    (This)->lpVtbl -> get_referrer(This,p)

#define IHTMLDocument2_get_location(This,p)	\
    (This)->lpVtbl -> get_location(This,p)

#define IHTMLDocument2_get_lastModified(This,p)	\
    (This)->lpVtbl -> get_lastModified(This,p)

#define IHTMLDocument2_put_URL(This,v)	\
    (This)->lpVtbl -> put_URL(This,v)

#define IHTMLDocument2_get_URL(This,p)	\
    (This)->lpVtbl -> get_URL(This,p)

#define IHTMLDocument2_put_domain(This,v)	\
    (This)->lpVtbl -> put_domain(This,v)

#define IHTMLDocument2_get_domain(This,p)	\
    (This)->lpVtbl -> get_domain(This,p)

#define IHTMLDocument2_put_cookie(This,v)	\
    (This)->lpVtbl -> put_cookie(This,v)

#define IHTMLDocument2_get_cookie(This,p)	\
    (This)->lpVtbl -> get_cookie(This,p)

#define IHTMLDocument2_put_expando(This,v)	\
    (This)->lpVtbl -> put_expando(This,v)

#define IHTMLDocument2_get_expando(This,p)	\
    (This)->lpVtbl -> get_expando(This,p)

#define IHTMLDocument2_put_charset(This,v)	\
    (This)->lpVtbl -> put_charset(This,v)

#define IHTMLDocument2_get_charset(This,p)	\
    (This)->lpVtbl -> get_charset(This,p)

#define IHTMLDocument2_put_defaultCharset(This,v)	\
    (This)->lpVtbl -> put_defaultCharset(This,v)

#define IHTMLDocument2_get_defaultCharset(This,p)	\
    (This)->lpVtbl -> get_defaultCharset(This,p)

#define IHTMLDocument2_get_mimeType(This,p)	\
    (This)->lpVtbl -> get_mimeType(This,p)

#define IHTMLDocument2_get_fileSize(This,p)	\
    (This)->lpVtbl -> get_fileSize(This,p)

#define IHTMLDocument2_get_fileCreatedDate(This,p)	\
    (This)->lpVtbl -> get_fileCreatedDate(This,p)

#define IHTMLDocument2_get_fileModifiedDate(This,p)	\
    (This)->lpVtbl -> get_fileModifiedDate(This,p)

#define IHTMLDocument2_get_fileUpdatedDate(This,p)	\
    (This)->lpVtbl -> get_fileUpdatedDate(This,p)

#define IHTMLDocument2_get_security(This,p)	\
    (This)->lpVtbl -> get_security(This,p)

#define IHTMLDocument2_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IHTMLDocument2_get_nameProp(This,p)	\
    (This)->lpVtbl -> get_nameProp(This,p)

#define IHTMLDocument2_write(This,psarray)	\
    (This)->lpVtbl -> write(This,psarray)

#define IHTMLDocument2_writeln(This,psarray)	\
    (This)->lpVtbl -> writeln(This,psarray)

#define IHTMLDocument2_open(This,url,name,features,replace,pomWindowResult)	\
    (This)->lpVtbl -> open(This,url,name,features,replace,pomWindowResult)

#define IHTMLDocument2_close(This)	\
    (This)->lpVtbl -> close(This)

#define IHTMLDocument2_clear(This)	\
    (This)->lpVtbl -> clear(This)

#define IHTMLDocument2_queryCommandSupported(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet)

#define IHTMLDocument2_queryCommandEnabled(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet)

#define IHTMLDocument2_queryCommandState(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet)

#define IHTMLDocument2_queryCommandIndeterm(This,cmdID,pfRet)	\
    (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet)

#define IHTMLDocument2_queryCommandText(This,cmdID,pcmdText)	\
    (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText)

#define IHTMLDocument2_queryCommandValue(This,cmdID,pcmdValue)	\
    (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue)

#define IHTMLDocument2_execCommand(This,cmdID,showUI,value,pfRet)	\
    (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet)

#define IHTMLDocument2_execCommandShowHelp(This,cmdID,pfRet)	\
    (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet)

#define IHTMLDocument2_createElement(This,eTag,newElem)	\
    (This)->lpVtbl -> createElement(This,eTag,newElem)

#define IHTMLDocument2_put_onhelp(This,v)	\
    (This)->lpVtbl -> put_onhelp(This,v)

#define IHTMLDocument2_get_onhelp(This,p)	\
    (This)->lpVtbl -> get_onhelp(This,p)

#define IHTMLDocument2_put_onclick(This,v)	\
    (This)->lpVtbl -> put_onclick(This,v)

#define IHTMLDocument2_get_onclick(This,p)	\
    (This)->lpVtbl -> get_onclick(This,p)

#define IHTMLDocument2_put_ondblclick(This,v)	\
    (This)->lpVtbl -> put_ondblclick(This,v)

#define IHTMLDocument2_get_ondblclick(This,p)	\
    (This)->lpVtbl -> get_ondblclick(This,p)

#define IHTMLDocument2_put_onkeyup(This,v)	\
    (This)->lpVtbl -> put_onkeyup(This,v)

#define IHTMLDocument2_get_onkeyup(This,p)	\
    (This)->lpVtbl -> get_onkeyup(This,p)

#define IHTMLDocument2_put_onkeydown(This,v)	\
    (This)->lpVtbl -> put_onkeydown(This,v)

#define IHTMLDocument2_get_onkeydown(This,p)	\
    (This)->lpVtbl -> get_onkeydown(This,p)

#define IHTMLDocument2_put_onkeypress(This,v)	\
    (This)->lpVtbl -> put_onkeypress(This,v)

#define IHTMLDocument2_get_onkeypress(This,p)	\
    (This)->lpVtbl -> get_onkeypress(This,p)

#define IHTMLDocument2_put_onmouseup(This,v)	\
    (This)->lpVtbl -> put_onmouseup(This,v)

#define IHTMLDocument2_get_onmouseup(This,p)	\
    (This)->lpVtbl -> get_onmouseup(This,p)

#define IHTMLDocument2_put_onmousedown(This,v)	\
    (This)->lpVtbl -> put_onmousedown(This,v)

#define IHTMLDocument2_get_onmousedown(This,p)	\
    (This)->lpVtbl -> get_onmousedown(This,p)

#define IHTMLDocument2_put_onmousemove(This,v)	\
    (This)->lpVtbl -> put_onmousemove(This,v)

#define IHTMLDocument2_get_onmousemove(This,p)	\
    (This)->lpVtbl -> get_onmousemove(This,p)

#define IHTMLDocument2_put_onmouseout(This,v)	\
    (This)->lpVtbl -> put_onmouseout(This,v)

#define IHTMLDocument2_get_onmouseout(This,p)	\
    (This)->lpVtbl -> get_onmouseout(This,p)

#define IHTMLDocument2_put_onmouseover(This,v)	\
    (This)->lpVtbl -> put_onmouseover(This,v)

#define IHTMLDocument2_get_onmouseover(This,p)	\
    (This)->lpVtbl -> get_onmouseover(This,p)

#define IHTMLDocument2_put_onreadystatechange(This,v)	\
    (This)->lpVtbl -> put_onreadystatechange(This,v)

#define IHTMLDocument2_get_onreadystatechange(This,p)	\
    (This)->lpVtbl -> get_onreadystatechange(This,p)

#define IHTMLDocument2_put_onafterupdate(This,v)	\
    (This)->lpVtbl -> put_onafterupdate(This,v)

#define IHTMLDocument2_get_onafterupdate(This,p)	\
    (This)->lpVtbl -> get_onafterupdate(This,p)

#define IHTMLDocument2_put_onrowexit(This,v)	\
    (This)->lpVtbl -> put_onrowexit(This,v)

#define IHTMLDocument2_get_onrowexit(This,p)	\
    (This)->lpVtbl -> get_onrowexit(This,p)

#define IHTMLDocument2_put_onrowenter(This,v)	\
    (This)->lpVtbl -> put_onrowenter(This,v)

#define IHTMLDocument2_get_onrowenter(This,p)	\
    (This)->lpVtbl -> get_onrowenter(This,p)

#define IHTMLDocument2_put_ondragstart(This,v)	\
    (This)->lpVtbl -> put_ondragstart(This,v)

#define IHTMLDocument2_get_ondragstart(This,p)	\
    (This)->lpVtbl -> get_ondragstart(This,p)

#define IHTMLDocument2_put_onselectstart(This,v)	\
    (This)->lpVtbl -> put_onselectstart(This,v)

#define IHTMLDocument2_get_onselectstart(This,p)	\
    (This)->lpVtbl -> get_onselectstart(This,p)

#define IHTMLDocument2_elementFromPoint(This,x,y,elementHit)	\
    (This)->lpVtbl -> elementFromPoint(This,x,y,elementHit)

#define IHTMLDocument2_get_parentWindow(This,p)	\
    (This)->lpVtbl -> get_parentWindow(This,p)

#define IHTMLDocument2_get_styleSheets(This,p)	\
    (This)->lpVtbl -> get_styleSheets(This,p)

#define IHTMLDocument2_put_onbeforeupdate(This,v)	\
    (This)->lpVtbl -> put_onbeforeupdate(This,v)

#define IHTMLDocument2_get_onbeforeupdate(This,p)	\
    (This)->lpVtbl -> get_onbeforeupdate(This,p)

#define IHTMLDocument2_put_onerrorupdate(This,v)	\
    (This)->lpVtbl -> put_onerrorupdate(This,v)

#define IHTMLDocument2_get_onerrorupdate(This,p)	\
    (This)->lpVtbl -> get_onerrorupdate(This,p)

#define IHTMLDocument2_toString(This,String)	\
    (This)->lpVtbl -> toString(This,String)

#define IHTMLDocument2_createStyleSheet(This,bstrHref,lIndex,ppnewStyleSheet)	\
    (This)->lpVtbl -> createStyleSheet(This,bstrHref,lIndex,ppnewStyleSheet)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_all_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_all_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_body_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLDocument2_get_body_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_activeElement_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLDocument2_get_activeElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_images_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_images_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_applets_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_applets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_links_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_links_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_forms_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_forms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_anchors_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_anchors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_title_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_title_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_scripts_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_scripts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_designMode_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_designMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_designMode_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_designMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_selection_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLSelectionObject **p);


void __RPC_STUB IHTMLDocument2_get_selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_readyState_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_frames_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLFramesCollection2 **p);


void __RPC_STUB IHTMLDocument2_get_frames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_embeds_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_embeds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_plugins_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLDocument2_get_plugins_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_alinkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_alinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_alinkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_alinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_bgColor_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_bgColor_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_fgColor_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_fgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_fgColor_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_fgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_linkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_linkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_linkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_linkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_vlinkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_vlinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_vlinkColor_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_vlinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_referrer_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_referrer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_location_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLLocation **p);


void __RPC_STUB IHTMLDocument2_get_location_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_lastModified_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_lastModified_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_URL_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_URL_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_domain_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_domain_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_domain_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_domain_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_cookie_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_cookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_cookie_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_cookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_expando_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDocument2_put_expando_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_expando_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDocument2_get_expando_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_charset_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_charset_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_defaultCharset_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument2_put_defaultCharset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_defaultCharset_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_defaultCharset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_mimeType_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_fileSize_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_fileCreatedDate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_fileCreatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_fileModifiedDate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_fileUpdatedDate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_security_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_security_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_protocol_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_nameProp_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument2_get_nameProp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][vararg] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_write_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ SAFEARRAY * psarray);


void __RPC_STUB IHTMLDocument2_write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][vararg] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_writeln_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ SAFEARRAY * psarray);


void __RPC_STUB IHTMLDocument2_writeln_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_open_Proxy( 
    IHTMLDocument2 * This,
    /* [in][defaultvalue] */ BSTR url,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT features,
    /* [in][optional] */ VARIANT replace,
    /* [out][retval] */ IDispatch **pomWindowResult);


void __RPC_STUB IHTMLDocument2_open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_close_Proxy( 
    IHTMLDocument2 * This);


void __RPC_STUB IHTMLDocument2_close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_clear_Proxy( 
    IHTMLDocument2 * This);


void __RPC_STUB IHTMLDocument2_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandSupported_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_queryCommandSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandEnabled_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_queryCommandEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandState_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_queryCommandState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandIndeterm_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_queryCommandIndeterm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandText_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ BSTR *pcmdText);


void __RPC_STUB IHTMLDocument2_queryCommandText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_queryCommandValue_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT *pcmdValue);


void __RPC_STUB IHTMLDocument2_queryCommandValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_execCommand_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [in][defaultvalue] */ VARIANT_BOOL showUI,
    /* [in][optional] */ VARIANT value,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_execCommandShowHelp_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR cmdID,
    /* [out][retval] */ VARIANT_BOOL *pfRet);


void __RPC_STUB IHTMLDocument2_execCommandShowHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_createElement_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ BSTR eTag,
    /* [out][retval] */ IHTMLElement **newElem);


void __RPC_STUB IHTMLDocument2_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onhelp_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onhelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onhelp_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onhelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onclick_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onclick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onclick_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onclick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_ondblclick_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_ondblclick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_ondblclick_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_ondblclick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onkeyup_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onkeyup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onkeyup_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onkeyup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onkeydown_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onkeydown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onkeydown_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onkeydown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onkeypress_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onkeypress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onkeypress_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onkeypress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onmouseup_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onmouseup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onmouseup_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onmouseup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onmousedown_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onmousedown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onmousedown_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onmousedown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onmousemove_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onmousemove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onmousemove_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onmousemove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onmouseout_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onmouseout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onmouseout_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onmouseout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onmouseover_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onmouseover_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onmouseover_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onmouseover_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onreadystatechange_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onreadystatechange_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onafterupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onafterupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onafterupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onafterupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onrowexit_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onrowexit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onrowexit_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onrowexit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onrowenter_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onrowenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onrowenter_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onrowenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_ondragstart_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_ondragstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_ondragstart_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_ondragstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onselectstart_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onselectstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onselectstart_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onselectstart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_elementFromPoint_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ long x,
    /* [in] */ long y,
    /* [out][retval] */ IHTMLElement **elementHit);


void __RPC_STUB IHTMLDocument2_elementFromPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_parentWindow_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLWindow2 **p);


void __RPC_STUB IHTMLDocument2_get_parentWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_styleSheets_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ IHTMLStyleSheetsCollection **p);


void __RPC_STUB IHTMLDocument2_get_styleSheets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onbeforeupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onbeforeupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onbeforeupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onbeforeupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_put_onerrorupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument2_put_onerrorupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_get_onerrorupdate_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument2_get_onerrorupdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_toString_Proxy( 
    IHTMLDocument2 * This,
    /* [out][retval] */ BSTR *String);


void __RPC_STUB IHTMLDocument2_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument2_createStyleSheet_Proxy( 
    IHTMLDocument2 * This,
    /* [in][defaultvalue] */ BSTR bstrHref,
    /* [in][defaultvalue] */ long lIndex,
    /* [out][retval] */ IHTMLStyleSheet **ppnewStyleSheet);


void __RPC_STUB IHTMLDocument2_createStyleSheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDocument2_INTERFACE_DEFINED__ */


#ifndef __IHTMLFramesCollection2_INTERFACE_DEFINED__
#define __IHTMLFramesCollection2_INTERFACE_DEFINED__

/* interface IHTMLFramesCollection2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFramesCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("332c4426-26cb-11d0-b483-00c04fd90119")
    IHTMLFramesCollection2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFramesCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFramesCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFramesCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFramesCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFramesCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFramesCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFramesCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFramesCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLFramesCollection2 * This,
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLFramesCollection2 * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLFramesCollection2Vtbl;

    interface IHTMLFramesCollection2
    {
        CONST_VTBL struct IHTMLFramesCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFramesCollection2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFramesCollection2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFramesCollection2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFramesCollection2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFramesCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFramesCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFramesCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFramesCollection2_item(This,pvarIndex,pvarResult)	\
    (This)->lpVtbl -> item(This,pvarIndex,pvarResult)

#define IHTMLFramesCollection2_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLFramesCollection2_item_Proxy( 
    IHTMLFramesCollection2 * This,
    /* [in] */ VARIANT *pvarIndex,
    /* [out][retval] */ VARIANT *pvarResult);


void __RPC_STUB IHTMLFramesCollection2_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFramesCollection2_get_length_Proxy( 
    IHTMLFramesCollection2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLFramesCollection2_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFramesCollection2_INTERFACE_DEFINED__ */


#ifndef __IHTMLWindow2_INTERFACE_DEFINED__
#define __IHTMLWindow2_INTERFACE_DEFINED__

/* interface IHTMLWindow2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLWindow2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("332c4427-26cb-11d0-b483-00c04fd90119")
    IHTMLWindow2 : public IHTMLFramesCollection2
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frames( 
            /* [out][retval] */ IHTMLFramesCollection2 **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultStatus( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultStatus( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_status( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setTimeout( 
            /* [in] */ BSTR expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearTimeout( 
            /* [in] */ long timerID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE alert( 
            /* [in][defaultvalue] */ BSTR message = L"") = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE confirm( 
            /* [in][defaultvalue] */ BSTR message,
            /* [out][retval] */ VARIANT_BOOL *confirmed) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE prompt( 
            /* [in][defaultvalue] */ BSTR message,
            /* [in][defaultvalue] */ BSTR defstr,
            /* [out][retval] */ VARIANT *textdata) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [out][retval] */ IHTMLImageElementFactory **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_location( 
            /* [out][retval] */ IHTMLLocation **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_history( 
            /* [out][retval] */ IOmHistory **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_opener( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_opener( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_navigator( 
            /* [out][retval] */ IOmNavigator **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parent( 
            /* [out][retval] */ IHTMLWindow2 **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE open( 
            /* [in][defaultvalue] */ BSTR url,
            /* [in][defaultvalue] */ BSTR name,
            /* [in][defaultvalue] */ BSTR features,
            /* [in][defaultvalue] */ VARIANT_BOOL replace,
            /* [out][retval] */ IHTMLWindow2 **pomWindowResult) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_self( 
            /* [out][retval] */ IHTMLWindow2 **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_top( 
            /* [out][retval] */ IHTMLWindow2 **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_window( 
            /* [out][retval] */ IHTMLWindow2 **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE navigate( 
            /* [in] */ BSTR url) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onblur( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onblur( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeunload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeunload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onunload( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onunload( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onhelp( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onhelp( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onerror( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onerror( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onresize( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onresize( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onscroll( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onscroll( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [source][id][propget] */ HRESULT STDMETHODCALLTYPE get_document( 
            /* [out][retval] */ IHTMLDocument2 **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_event( 
            /* [out][retval] */ IHTMLEventObj **p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showModalDialog( 
            /* [in] */ BSTR dialog,
            /* [in][optional] */ VARIANT *varArgIn,
            /* [in][optional] */ VARIANT *varOptions,
            /* [out][retval] */ VARIANT *varArgOut) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showHelp( 
            /* [in] */ BSTR helpURL,
            /* [in][optional] */ VARIANT helpArg,
            /* [in][defaultvalue] */ BSTR features = L"") = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_screen( 
            /* [out][retval] */ IHTMLScreen **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Option( 
            /* [out][retval] */ IHTMLOptionElementFactory **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_closed( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scroll( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clientInformation( 
            /* [out][retval] */ IOmNavigator **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setInterval( 
            /* [in] */ BSTR expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearInterval( 
            /* [in] */ long timerID) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_offscreenBuffering( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_offscreenBuffering( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execScript( 
            /* [in] */ BSTR code,
            /* [in][defaultvalue] */ BSTR language,
            /* [out][retval] */ VARIANT *pvarRet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE toString( 
            /* [out][retval] */ BSTR *String) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollBy( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollTo( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveTo( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveBy( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE resizeTo( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE resizeBy( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_external( 
            /* [out][retval] */ IDispatch **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLWindow2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLWindow2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLWindow2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLWindow2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLWindow2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLWindow2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLWindow2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLWindow2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT *pvarIndex,
            /* [out][retval] */ VARIANT *pvarResult);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frames )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLFramesCollection2 **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_defaultStatus )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_defaultStatus )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_status )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setTimeout )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearTimeout )( 
            IHTMLWindow2 * This,
            /* [in] */ long timerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *alert )( 
            IHTMLWindow2 * This,
            /* [in][defaultvalue] */ BSTR message);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *confirm )( 
            IHTMLWindow2 * This,
            /* [in][defaultvalue] */ BSTR message,
            /* [out][retval] */ VARIANT_BOOL *confirmed);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prompt )( 
            IHTMLWindow2 * This,
            /* [in][defaultvalue] */ BSTR message,
            /* [in][defaultvalue] */ BSTR defstr,
            /* [out][retval] */ VARIANT *textdata);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLImageElementFactory **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_location )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLLocation **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_history )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IOmHistory **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IHTMLWindow2 * This);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_opener )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_opener )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_navigator )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IOmNavigator **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parent )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLWindow2 **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *open )( 
            IHTMLWindow2 * This,
            /* [in][defaultvalue] */ BSTR url,
            /* [in][defaultvalue] */ BSTR name,
            /* [in][defaultvalue] */ BSTR features,
            /* [in][defaultvalue] */ VARIANT_BOOL replace,
            /* [out][retval] */ IHTMLWindow2 **pomWindowResult);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_self )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLWindow2 **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_top )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLWindow2 **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_window )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLWindow2 **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *navigate )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR url);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocus )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocus )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onblur )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onblur )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onload )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onload )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeunload )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeunload )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onunload )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onunload )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onhelp )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onhelp )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onerror )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onerror )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onresize )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onresize )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onscroll )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onscroll )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [source][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_document )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLDocument2 **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_event )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLEventObj **p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showModalDialog )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR dialog,
            /* [in][optional] */ VARIANT *varArgIn,
            /* [in][optional] */ VARIANT *varOptions,
            /* [out][retval] */ VARIANT *varArgOut);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showHelp )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR helpURL,
            /* [in][optional] */ VARIANT helpArg,
            /* [in][defaultvalue] */ BSTR features);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_screen )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLScreen **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Option )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IHTMLOptionElementFactory **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLWindow2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_closed )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *blur )( 
            IHTMLWindow2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *scroll )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clientInformation )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IOmNavigator **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setInterval )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearInterval )( 
            IHTMLWindow2 * This,
            /* [in] */ long timerID);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_offscreenBuffering )( 
            IHTMLWindow2 * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_offscreenBuffering )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *execScript )( 
            IHTMLWindow2 * This,
            /* [in] */ BSTR code,
            /* [in][defaultvalue] */ BSTR language,
            /* [out][retval] */ VARIANT *pvarRet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *toString )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ BSTR *String);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *scrollBy )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *scrollTo )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveTo )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *moveBy )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resizeTo )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resizeBy )( 
            IHTMLWindow2 * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_external )( 
            IHTMLWindow2 * This,
            /* [out][retval] */ IDispatch **p);
        
        END_INTERFACE
    } IHTMLWindow2Vtbl;

    interface IHTMLWindow2
    {
        CONST_VTBL struct IHTMLWindow2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLWindow2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLWindow2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLWindow2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLWindow2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLWindow2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLWindow2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLWindow2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLWindow2_item(This,pvarIndex,pvarResult)	\
    (This)->lpVtbl -> item(This,pvarIndex,pvarResult)

#define IHTMLWindow2_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)


#define IHTMLWindow2_get_frames(This,p)	\
    (This)->lpVtbl -> get_frames(This,p)

#define IHTMLWindow2_put_defaultStatus(This,v)	\
    (This)->lpVtbl -> put_defaultStatus(This,v)

#define IHTMLWindow2_get_defaultStatus(This,p)	\
    (This)->lpVtbl -> get_defaultStatus(This,p)

#define IHTMLWindow2_put_status(This,v)	\
    (This)->lpVtbl -> put_status(This,v)

#define IHTMLWindow2_get_status(This,p)	\
    (This)->lpVtbl -> get_status(This,p)

#define IHTMLWindow2_setTimeout(This,expression,msec,language,timerID)	\
    (This)->lpVtbl -> setTimeout(This,expression,msec,language,timerID)

#define IHTMLWindow2_clearTimeout(This,timerID)	\
    (This)->lpVtbl -> clearTimeout(This,timerID)

#define IHTMLWindow2_alert(This,message)	\
    (This)->lpVtbl -> alert(This,message)

#define IHTMLWindow2_confirm(This,message,confirmed)	\
    (This)->lpVtbl -> confirm(This,message,confirmed)

#define IHTMLWindow2_prompt(This,message,defstr,textdata)	\
    (This)->lpVtbl -> prompt(This,message,defstr,textdata)

#define IHTMLWindow2_get_Image(This,p)	\
    (This)->lpVtbl -> get_Image(This,p)

#define IHTMLWindow2_get_location(This,p)	\
    (This)->lpVtbl -> get_location(This,p)

#define IHTMLWindow2_get_history(This,p)	\
    (This)->lpVtbl -> get_history(This,p)

#define IHTMLWindow2_close(This)	\
    (This)->lpVtbl -> close(This)

#define IHTMLWindow2_put_opener(This,v)	\
    (This)->lpVtbl -> put_opener(This,v)

#define IHTMLWindow2_get_opener(This,p)	\
    (This)->lpVtbl -> get_opener(This,p)

#define IHTMLWindow2_get_navigator(This,p)	\
    (This)->lpVtbl -> get_navigator(This,p)

#define IHTMLWindow2_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLWindow2_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLWindow2_get_parent(This,p)	\
    (This)->lpVtbl -> get_parent(This,p)

#define IHTMLWindow2_open(This,url,name,features,replace,pomWindowResult)	\
    (This)->lpVtbl -> open(This,url,name,features,replace,pomWindowResult)

#define IHTMLWindow2_get_self(This,p)	\
    (This)->lpVtbl -> get_self(This,p)

#define IHTMLWindow2_get_top(This,p)	\
    (This)->lpVtbl -> get_top(This,p)

#define IHTMLWindow2_get_window(This,p)	\
    (This)->lpVtbl -> get_window(This,p)

#define IHTMLWindow2_navigate(This,url)	\
    (This)->lpVtbl -> navigate(This,url)

#define IHTMLWindow2_put_onfocus(This,v)	\
    (This)->lpVtbl -> put_onfocus(This,v)

#define IHTMLWindow2_get_onfocus(This,p)	\
    (This)->lpVtbl -> get_onfocus(This,p)

#define IHTMLWindow2_put_onblur(This,v)	\
    (This)->lpVtbl -> put_onblur(This,v)

#define IHTMLWindow2_get_onblur(This,p)	\
    (This)->lpVtbl -> get_onblur(This,p)

#define IHTMLWindow2_put_onload(This,v)	\
    (This)->lpVtbl -> put_onload(This,v)

#define IHTMLWindow2_get_onload(This,p)	\
    (This)->lpVtbl -> get_onload(This,p)

#define IHTMLWindow2_put_onbeforeunload(This,v)	\
    (This)->lpVtbl -> put_onbeforeunload(This,v)

#define IHTMLWindow2_get_onbeforeunload(This,p)	\
    (This)->lpVtbl -> get_onbeforeunload(This,p)

#define IHTMLWindow2_put_onunload(This,v)	\
    (This)->lpVtbl -> put_onunload(This,v)

#define IHTMLWindow2_get_onunload(This,p)	\
    (This)->lpVtbl -> get_onunload(This,p)

#define IHTMLWindow2_put_onhelp(This,v)	\
    (This)->lpVtbl -> put_onhelp(This,v)

#define IHTMLWindow2_get_onhelp(This,p)	\
    (This)->lpVtbl -> get_onhelp(This,p)

#define IHTMLWindow2_put_onerror(This,v)	\
    (This)->lpVtbl -> put_onerror(This,v)

#define IHTMLWindow2_get_onerror(This,p)	\
    (This)->lpVtbl -> get_onerror(This,p)

#define IHTMLWindow2_put_onresize(This,v)	\
    (This)->lpVtbl -> put_onresize(This,v)

#define IHTMLWindow2_get_onresize(This,p)	\
    (This)->lpVtbl -> get_onresize(This,p)

#define IHTMLWindow2_put_onscroll(This,v)	\
    (This)->lpVtbl -> put_onscroll(This,v)

#define IHTMLWindow2_get_onscroll(This,p)	\
    (This)->lpVtbl -> get_onscroll(This,p)

#define IHTMLWindow2_get_document(This,p)	\
    (This)->lpVtbl -> get_document(This,p)

#define IHTMLWindow2_get_event(This,p)	\
    (This)->lpVtbl -> get_event(This,p)

#define IHTMLWindow2_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLWindow2_showModalDialog(This,dialog,varArgIn,varOptions,varArgOut)	\
    (This)->lpVtbl -> showModalDialog(This,dialog,varArgIn,varOptions,varArgOut)

#define IHTMLWindow2_showHelp(This,helpURL,helpArg,features)	\
    (This)->lpVtbl -> showHelp(This,helpURL,helpArg,features)

#define IHTMLWindow2_get_screen(This,p)	\
    (This)->lpVtbl -> get_screen(This,p)

#define IHTMLWindow2_get_Option(This,p)	\
    (This)->lpVtbl -> get_Option(This,p)

#define IHTMLWindow2_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLWindow2_get_closed(This,p)	\
    (This)->lpVtbl -> get_closed(This,p)

#define IHTMLWindow2_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define IHTMLWindow2_scroll(This,x,y)	\
    (This)->lpVtbl -> scroll(This,x,y)

#define IHTMLWindow2_get_clientInformation(This,p)	\
    (This)->lpVtbl -> get_clientInformation(This,p)

#define IHTMLWindow2_setInterval(This,expression,msec,language,timerID)	\
    (This)->lpVtbl -> setInterval(This,expression,msec,language,timerID)

#define IHTMLWindow2_clearInterval(This,timerID)	\
    (This)->lpVtbl -> clearInterval(This,timerID)

#define IHTMLWindow2_put_offscreenBuffering(This,v)	\
    (This)->lpVtbl -> put_offscreenBuffering(This,v)

#define IHTMLWindow2_get_offscreenBuffering(This,p)	\
    (This)->lpVtbl -> get_offscreenBuffering(This,p)

#define IHTMLWindow2_execScript(This,code,language,pvarRet)	\
    (This)->lpVtbl -> execScript(This,code,language,pvarRet)

#define IHTMLWindow2_toString(This,String)	\
    (This)->lpVtbl -> toString(This,String)

#define IHTMLWindow2_scrollBy(This,x,y)	\
    (This)->lpVtbl -> scrollBy(This,x,y)

#define IHTMLWindow2_scrollTo(This,x,y)	\
    (This)->lpVtbl -> scrollTo(This,x,y)

#define IHTMLWindow2_moveTo(This,x,y)	\
    (This)->lpVtbl -> moveTo(This,x,y)

#define IHTMLWindow2_moveBy(This,x,y)	\
    (This)->lpVtbl -> moveBy(This,x,y)

#define IHTMLWindow2_resizeTo(This,x,y)	\
    (This)->lpVtbl -> resizeTo(This,x,y)

#define IHTMLWindow2_resizeBy(This,x,y)	\
    (This)->lpVtbl -> resizeBy(This,x,y)

#define IHTMLWindow2_get_external(This,p)	\
    (This)->lpVtbl -> get_external(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_frames_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLFramesCollection2 **p);


void __RPC_STUB IHTMLWindow2_get_frames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_defaultStatus_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLWindow2_put_defaultStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_defaultStatus_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLWindow2_get_defaultStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_status_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLWindow2_put_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_status_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLWindow2_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_setTimeout_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR expression,
    /* [in] */ long msec,
    /* [in][optional] */ VARIANT *language,
    /* [out][retval] */ long *timerID);


void __RPC_STUB IHTMLWindow2_setTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_clearTimeout_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long timerID);


void __RPC_STUB IHTMLWindow2_clearTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_alert_Proxy( 
    IHTMLWindow2 * This,
    /* [in][defaultvalue] */ BSTR message);


void __RPC_STUB IHTMLWindow2_alert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_confirm_Proxy( 
    IHTMLWindow2 * This,
    /* [in][defaultvalue] */ BSTR message,
    /* [out][retval] */ VARIANT_BOOL *confirmed);


void __RPC_STUB IHTMLWindow2_confirm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_prompt_Proxy( 
    IHTMLWindow2 * This,
    /* [in][defaultvalue] */ BSTR message,
    /* [in][defaultvalue] */ BSTR defstr,
    /* [out][retval] */ VARIANT *textdata);


void __RPC_STUB IHTMLWindow2_prompt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_Image_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLImageElementFactory **p);


void __RPC_STUB IHTMLWindow2_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_location_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLLocation **p);


void __RPC_STUB IHTMLWindow2_get_location_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_history_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IOmHistory **p);


void __RPC_STUB IHTMLWindow2_get_history_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_close_Proxy( 
    IHTMLWindow2 * This);


void __RPC_STUB IHTMLWindow2_close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_opener_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_opener_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_opener_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_opener_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_navigator_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IOmNavigator **p);


void __RPC_STUB IHTMLWindow2_get_navigator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_name_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLWindow2_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_name_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLWindow2_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_parent_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLWindow2 **p);


void __RPC_STUB IHTMLWindow2_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_open_Proxy( 
    IHTMLWindow2 * This,
    /* [in][defaultvalue] */ BSTR url,
    /* [in][defaultvalue] */ BSTR name,
    /* [in][defaultvalue] */ BSTR features,
    /* [in][defaultvalue] */ VARIANT_BOOL replace,
    /* [out][retval] */ IHTMLWindow2 **pomWindowResult);


void __RPC_STUB IHTMLWindow2_open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_self_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLWindow2 **p);


void __RPC_STUB IHTMLWindow2_get_self_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_top_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLWindow2 **p);


void __RPC_STUB IHTMLWindow2_get_top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_window_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLWindow2 **p);


void __RPC_STUB IHTMLWindow2_get_window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_navigate_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR url);


void __RPC_STUB IHTMLWindow2_navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onfocus_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onfocus_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onblur_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onblur_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onload_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onload_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onbeforeunload_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onbeforeunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onbeforeunload_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onbeforeunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onunload_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onunload_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onunload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onhelp_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onhelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onhelp_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onhelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onerror_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onerror_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onerror_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onresize_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onresize_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onresize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_onscroll_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_onscroll_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_onscroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [source][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_document_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLDocument2 **p);


void __RPC_STUB IHTMLWindow2_get_document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_event_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLEventObj **p);


void __RPC_STUB IHTMLWindow2_get_event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get__newEnum_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLWindow2_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_showModalDialog_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR dialog,
    /* [in][optional] */ VARIANT *varArgIn,
    /* [in][optional] */ VARIANT *varOptions,
    /* [out][retval] */ VARIANT *varArgOut);


void __RPC_STUB IHTMLWindow2_showModalDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_showHelp_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR helpURL,
    /* [in][optional] */ VARIANT helpArg,
    /* [in][defaultvalue] */ BSTR features);


void __RPC_STUB IHTMLWindow2_showHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_screen_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLScreen **p);


void __RPC_STUB IHTMLWindow2_get_screen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_Option_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IHTMLOptionElementFactory **p);


void __RPC_STUB IHTMLWindow2_get_Option_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_focus_Proxy( 
    IHTMLWindow2 * This);


void __RPC_STUB IHTMLWindow2_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_closed_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLWindow2_get_closed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_blur_Proxy( 
    IHTMLWindow2 * This);


void __RPC_STUB IHTMLWindow2_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_scroll_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_clientInformation_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IOmNavigator **p);


void __RPC_STUB IHTMLWindow2_get_clientInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_setInterval_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR expression,
    /* [in] */ long msec,
    /* [in][optional] */ VARIANT *language,
    /* [out][retval] */ long *timerID);


void __RPC_STUB IHTMLWindow2_setInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_clearInterval_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long timerID);


void __RPC_STUB IHTMLWindow2_clearInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_put_offscreenBuffering_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow2_put_offscreenBuffering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_offscreenBuffering_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow2_get_offscreenBuffering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_execScript_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ BSTR code,
    /* [in][defaultvalue] */ BSTR language,
    /* [out][retval] */ VARIANT *pvarRet);


void __RPC_STUB IHTMLWindow2_execScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_toString_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ BSTR *String);


void __RPC_STUB IHTMLWindow2_toString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_scrollBy_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_scrollBy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_scrollTo_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_scrollTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_moveTo_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_moveTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_moveBy_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_moveBy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_resizeTo_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_resizeTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_resizeBy_Proxy( 
    IHTMLWindow2 * This,
    /* [in] */ long x,
    /* [in] */ long y);


void __RPC_STUB IHTMLWindow2_resizeBy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow2_get_external_Proxy( 
    IHTMLWindow2 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLWindow2_get_external_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLWindow2_INTERFACE_DEFINED__ */


#ifndef __IHTMLWindow3_INTERFACE_DEFINED__
#define __IHTMLWindow3_INTERFACE_DEFINED__

/* interface IHTMLWindow3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLWindow3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4ae-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLWindow3 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_screenLeft( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_screenTop( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE attachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE detachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setTimeout( 
            /* [in] */ VARIANT *expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setInterval( 
            /* [in] */ VARIANT *expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE print( void) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeprint( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeprint( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onafterprint( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onafterprint( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clipboardData( 
            /* [out][retval] */ IHTMLDataTransfer **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showModelessDialog( 
            /* [in][defaultvalue] */ BSTR url,
            /* [in][optional] */ VARIANT *varArgIn,
            /* [in][optional] */ VARIANT *options,
            /* [out][retval] */ IHTMLWindow2 **pDialog) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLWindow3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLWindow3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLWindow3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLWindow3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLWindow3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLWindow3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLWindow3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLWindow3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_screenLeft )( 
            IHTMLWindow3 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_screenTop )( 
            IHTMLWindow3 * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *attachEvent )( 
            IHTMLWindow3 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *detachEvent )( 
            IHTMLWindow3 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setTimeout )( 
            IHTMLWindow3 * This,
            /* [in] */ VARIANT *expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setInterval )( 
            IHTMLWindow3 * This,
            /* [in] */ VARIANT *expression,
            /* [in] */ long msec,
            /* [in][optional] */ VARIANT *language,
            /* [out][retval] */ long *timerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *print )( 
            IHTMLWindow3 * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeprint )( 
            IHTMLWindow3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeprint )( 
            IHTMLWindow3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onafterprint )( 
            IHTMLWindow3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onafterprint )( 
            IHTMLWindow3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipboardData )( 
            IHTMLWindow3 * This,
            /* [out][retval] */ IHTMLDataTransfer **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showModelessDialog )( 
            IHTMLWindow3 * This,
            /* [in][defaultvalue] */ BSTR url,
            /* [in][optional] */ VARIANT *varArgIn,
            /* [in][optional] */ VARIANT *options,
            /* [out][retval] */ IHTMLWindow2 **pDialog);
        
        END_INTERFACE
    } IHTMLWindow3Vtbl;

    interface IHTMLWindow3
    {
        CONST_VTBL struct IHTMLWindow3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLWindow3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLWindow3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLWindow3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLWindow3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLWindow3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLWindow3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLWindow3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLWindow3_get_screenLeft(This,p)	\
    (This)->lpVtbl -> get_screenLeft(This,p)

#define IHTMLWindow3_get_screenTop(This,p)	\
    (This)->lpVtbl -> get_screenTop(This,p)

#define IHTMLWindow3_attachEvent(This,event,pDisp,pfResult)	\
    (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult)

#define IHTMLWindow3_detachEvent(This,event,pDisp)	\
    (This)->lpVtbl -> detachEvent(This,event,pDisp)

#define IHTMLWindow3_setTimeout(This,expression,msec,language,timerID)	\
    (This)->lpVtbl -> setTimeout(This,expression,msec,language,timerID)

#define IHTMLWindow3_setInterval(This,expression,msec,language,timerID)	\
    (This)->lpVtbl -> setInterval(This,expression,msec,language,timerID)

#define IHTMLWindow3_print(This)	\
    (This)->lpVtbl -> print(This)

#define IHTMLWindow3_put_onbeforeprint(This,v)	\
    (This)->lpVtbl -> put_onbeforeprint(This,v)

#define IHTMLWindow3_get_onbeforeprint(This,p)	\
    (This)->lpVtbl -> get_onbeforeprint(This,p)

#define IHTMLWindow3_put_onafterprint(This,v)	\
    (This)->lpVtbl -> put_onafterprint(This,v)

#define IHTMLWindow3_get_onafterprint(This,p)	\
    (This)->lpVtbl -> get_onafterprint(This,p)

#define IHTMLWindow3_get_clipboardData(This,p)	\
    (This)->lpVtbl -> get_clipboardData(This,p)

#define IHTMLWindow3_showModelessDialog(This,url,varArgIn,options,pDialog)	\
    (This)->lpVtbl -> showModelessDialog(This,url,varArgIn,options,pDialog)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_get_screenLeft_Proxy( 
    IHTMLWindow3 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLWindow3_get_screenLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_get_screenTop_Proxy( 
    IHTMLWindow3 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLWindow3_get_screenTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_attachEvent_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp,
    /* [out][retval] */ VARIANT_BOOL *pfResult);


void __RPC_STUB IHTMLWindow3_attachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_detachEvent_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp);


void __RPC_STUB IHTMLWindow3_detachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_setTimeout_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ VARIANT *expression,
    /* [in] */ long msec,
    /* [in][optional] */ VARIANT *language,
    /* [out][retval] */ long *timerID);


void __RPC_STUB IHTMLWindow3_setTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_setInterval_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ VARIANT *expression,
    /* [in] */ long msec,
    /* [in][optional] */ VARIANT *language,
    /* [out][retval] */ long *timerID);


void __RPC_STUB IHTMLWindow3_setInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_print_Proxy( 
    IHTMLWindow3 * This);


void __RPC_STUB IHTMLWindow3_print_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_put_onbeforeprint_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow3_put_onbeforeprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_get_onbeforeprint_Proxy( 
    IHTMLWindow3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow3_get_onbeforeprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_put_onafterprint_Proxy( 
    IHTMLWindow3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLWindow3_put_onafterprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_get_onafterprint_Proxy( 
    IHTMLWindow3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLWindow3_get_onafterprint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_get_clipboardData_Proxy( 
    IHTMLWindow3 * This,
    /* [out][retval] */ IHTMLDataTransfer **p);


void __RPC_STUB IHTMLWindow3_get_clipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow3_showModelessDialog_Proxy( 
    IHTMLWindow3 * This,
    /* [in][defaultvalue] */ BSTR url,
    /* [in][optional] */ VARIANT *varArgIn,
    /* [in][optional] */ VARIANT *options,
    /* [out][retval] */ IHTMLWindow2 **pDialog);


void __RPC_STUB IHTMLWindow3_showModelessDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLWindow3_INTERFACE_DEFINED__ */


#ifndef __IHTMLFrameBase_INTERFACE_DEFINED__
#define __IHTMLFrameBase_INTERFACE_DEFINED__

/* interface IHTMLFrameBase */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLFrameBase;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f311-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLFrameBase : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_border( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameBorder( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameBorder( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameSpacing( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameSpacing( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginWidth( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginWidth( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginHeight( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginHeight( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_noResize( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_noResize( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrolling( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrolling( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLFrameBaseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLFrameBase * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLFrameBase * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLFrameBase * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLFrameBase * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLFrameBase * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLFrameBase * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLFrameBase * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            IHTMLFrameBase * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLFrameBase * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_border )( 
            IHTMLFrameBase * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_border )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameBorder )( 
            IHTMLFrameBase * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameBorder )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameSpacing )( 
            IHTMLFrameBase * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameSpacing )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginWidth )( 
            IHTMLFrameBase * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginWidth )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginHeight )( 
            IHTMLFrameBase * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginHeight )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noResize )( 
            IHTMLFrameBase * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noResize )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrolling )( 
            IHTMLFrameBase * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrolling )( 
            IHTMLFrameBase * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLFrameBaseVtbl;

    interface IHTMLFrameBase
    {
        CONST_VTBL struct IHTMLFrameBaseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLFrameBase_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLFrameBase_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLFrameBase_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLFrameBase_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLFrameBase_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLFrameBase_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLFrameBase_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLFrameBase_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IHTMLFrameBase_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IHTMLFrameBase_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLFrameBase_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLFrameBase_put_border(This,v)	\
    (This)->lpVtbl -> put_border(This,v)

#define IHTMLFrameBase_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IHTMLFrameBase_put_frameBorder(This,v)	\
    (This)->lpVtbl -> put_frameBorder(This,v)

#define IHTMLFrameBase_get_frameBorder(This,p)	\
    (This)->lpVtbl -> get_frameBorder(This,p)

#define IHTMLFrameBase_put_frameSpacing(This,v)	\
    (This)->lpVtbl -> put_frameSpacing(This,v)

#define IHTMLFrameBase_get_frameSpacing(This,p)	\
    (This)->lpVtbl -> get_frameSpacing(This,p)

#define IHTMLFrameBase_put_marginWidth(This,v)	\
    (This)->lpVtbl -> put_marginWidth(This,v)

#define IHTMLFrameBase_get_marginWidth(This,p)	\
    (This)->lpVtbl -> get_marginWidth(This,p)

#define IHTMLFrameBase_put_marginHeight(This,v)	\
    (This)->lpVtbl -> put_marginHeight(This,v)

#define IHTMLFrameBase_get_marginHeight(This,p)	\
    (This)->lpVtbl -> get_marginHeight(This,p)

#define IHTMLFrameBase_put_noResize(This,v)	\
    (This)->lpVtbl -> put_noResize(This,v)

#define IHTMLFrameBase_get_noResize(This,p)	\
    (This)->lpVtbl -> get_noResize(This,p)

#define IHTMLFrameBase_put_scrolling(This,v)	\
    (This)->lpVtbl -> put_scrolling(This,v)

#define IHTMLFrameBase_get_scrolling(This,p)	\
    (This)->lpVtbl -> get_scrolling(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_src_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFrameBase_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_src_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFrameBase_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_name_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFrameBase_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_name_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFrameBase_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_border_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFrameBase_put_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_border_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFrameBase_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_frameBorder_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFrameBase_put_frameBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_frameBorder_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFrameBase_get_frameBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_frameSpacing_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFrameBase_put_frameSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_frameSpacing_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFrameBase_get_frameSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_marginWidth_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFrameBase_put_marginWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_marginWidth_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFrameBase_get_marginWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_marginHeight_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLFrameBase_put_marginHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_marginHeight_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLFrameBase_get_marginHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_noResize_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLFrameBase_put_noResize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_noResize_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLFrameBase_get_noResize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_put_scrolling_Proxy( 
    IHTMLFrameBase * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLFrameBase_put_scrolling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLFrameBase_get_scrolling_Proxy( 
    IHTMLFrameBase * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLFrameBase_get_scrolling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLFrameBase_INTERFACE_DEFINED__ */


#ifndef __IHTMLScreen_INTERFACE_DEFINED__
#define __IHTMLScreen_INTERFACE_DEFINED__

/* interface IHTMLScreen */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLScreen;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f35c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLScreen : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_colorDepth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bufferDepth( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bufferDepth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_updateInterval( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_updateInterval( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_availHeight( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_availWidth( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fontSmoothingEnabled( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLScreenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLScreen * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLScreen * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLScreen * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLScreen * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLScreen * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLScreen * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLScreen * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_colorDepth )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bufferDepth )( 
            IHTMLScreen * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bufferDepth )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateInterval )( 
            IHTMLScreen * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateInterval )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_availHeight )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_availWidth )( 
            IHTMLScreen * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fontSmoothingEnabled )( 
            IHTMLScreen * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHTMLScreenVtbl;

    interface IHTMLScreen
    {
        CONST_VTBL struct IHTMLScreenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLScreen_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLScreen_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLScreen_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLScreen_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLScreen_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLScreen_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLScreen_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLScreen_get_colorDepth(This,p)	\
    (This)->lpVtbl -> get_colorDepth(This,p)

#define IHTMLScreen_put_bufferDepth(This,v)	\
    (This)->lpVtbl -> put_bufferDepth(This,v)

#define IHTMLScreen_get_bufferDepth(This,p)	\
    (This)->lpVtbl -> get_bufferDepth(This,p)

#define IHTMLScreen_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLScreen_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLScreen_put_updateInterval(This,v)	\
    (This)->lpVtbl -> put_updateInterval(This,v)

#define IHTMLScreen_get_updateInterval(This,p)	\
    (This)->lpVtbl -> get_updateInterval(This,p)

#define IHTMLScreen_get_availHeight(This,p)	\
    (This)->lpVtbl -> get_availHeight(This,p)

#define IHTMLScreen_get_availWidth(This,p)	\
    (This)->lpVtbl -> get_availWidth(This,p)

#define IHTMLScreen_get_fontSmoothingEnabled(This,p)	\
    (This)->lpVtbl -> get_fontSmoothingEnabled(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_colorDepth_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_colorDepth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_put_bufferDepth_Proxy( 
    IHTMLScreen * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLScreen_put_bufferDepth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_bufferDepth_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_bufferDepth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_width_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_height_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_put_updateInterval_Proxy( 
    IHTMLScreen * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLScreen_put_updateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_updateInterval_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_updateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_availHeight_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_availHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_availWidth_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen_get_availWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen_get_fontSmoothingEnabled_Proxy( 
    IHTMLScreen * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLScreen_get_fontSmoothingEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLScreen_INTERFACE_DEFINED__ */


#ifndef __IHTMLScreen2_INTERFACE_DEFINED__
#define __IHTMLScreen2_INTERFACE_DEFINED__

/* interface IHTMLScreen2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLScreen2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f84a-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLScreen2 : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_logicalXDPI( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_logicalYDPI( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_deviceXDPI( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_deviceYDPI( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLScreen2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLScreen2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLScreen2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLScreen2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLScreen2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLScreen2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLScreen2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLScreen2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_logicalXDPI )( 
            IHTMLScreen2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_logicalYDPI )( 
            IHTMLScreen2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceXDPI )( 
            IHTMLScreen2 * This,
            /* [out][retval] */ long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceYDPI )( 
            IHTMLScreen2 * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLScreen2Vtbl;

    interface IHTMLScreen2
    {
        CONST_VTBL struct IHTMLScreen2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLScreen2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLScreen2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLScreen2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLScreen2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLScreen2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLScreen2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLScreen2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLScreen2_get_logicalXDPI(This,p)	\
    (This)->lpVtbl -> get_logicalXDPI(This,p)

#define IHTMLScreen2_get_logicalYDPI(This,p)	\
    (This)->lpVtbl -> get_logicalYDPI(This,p)

#define IHTMLScreen2_get_deviceXDPI(This,p)	\
    (This)->lpVtbl -> get_deviceXDPI(This,p)

#define IHTMLScreen2_get_deviceYDPI(This,p)	\
    (This)->lpVtbl -> get_deviceYDPI(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen2_get_logicalXDPI_Proxy( 
    IHTMLScreen2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen2_get_logicalXDPI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen2_get_logicalYDPI_Proxy( 
    IHTMLScreen2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen2_get_logicalYDPI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen2_get_deviceXDPI_Proxy( 
    IHTMLScreen2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen2_get_deviceXDPI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLScreen2_get_deviceYDPI_Proxy( 
    IHTMLScreen2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLScreen2_get_deviceYDPI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLScreen2_INTERFACE_DEFINED__ */


#ifndef __IHTMLWindow4_INTERFACE_DEFINED__
#define __IHTMLWindow4_INTERFACE_DEFINED__

/* interface IHTMLWindow4 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLWindow4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f6cf-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLWindow4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createPopup( 
            /* [in][optional] */ VARIANT *varArgIn,
            /* [out][retval] */ IDispatch **ppPopup) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameElement( 
            /* [out][retval] */ IHTMLFrameBase **p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLWindow4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLWindow4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLWindow4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLWindow4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLWindow4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLWindow4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLWindow4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLWindow4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createPopup )( 
            IHTMLWindow4 * This,
            /* [in][optional] */ VARIANT *varArgIn,
            /* [out][retval] */ IDispatch **ppPopup);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameElement )( 
            IHTMLWindow4 * This,
            /* [out][retval] */ IHTMLFrameBase **p);
        
        END_INTERFACE
    } IHTMLWindow4Vtbl;

    interface IHTMLWindow4
    {
        CONST_VTBL struct IHTMLWindow4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLWindow4_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLWindow4_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLWindow4_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLWindow4_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLWindow4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLWindow4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLWindow4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLWindow4_createPopup(This,varArgIn,ppPopup)	\
    (This)->lpVtbl -> createPopup(This,varArgIn,ppPopup)

#define IHTMLWindow4_get_frameElement(This,p)	\
    (This)->lpVtbl -> get_frameElement(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLWindow4_createPopup_Proxy( 
    IHTMLWindow4 * This,
    /* [in][optional] */ VARIANT *varArgIn,
    /* [out][retval] */ IDispatch **ppPopup);


void __RPC_STUB IHTMLWindow4_createPopup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLWindow4_get_frameElement_Proxy( 
    IHTMLWindow4 * This,
    /* [out][retval] */ IHTMLFrameBase **p);


void __RPC_STUB IHTMLWindow4_get_frameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLWindow4_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FramesCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f7f6-98b5-11cf-bb82-00aa00bdce0b")
FramesCollection;
#endif

#ifndef __DispHTMLScreen_DISPINTERFACE_DEFINED__
#define __DispHTMLScreen_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLScreen */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLScreen;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f591-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLScreen : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLScreenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLScreen * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLScreen * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLScreen * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLScreen * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLScreen * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLScreen * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLScreen * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLScreenVtbl;

    interface DispHTMLScreen
    {
        CONST_VTBL struct DispHTMLScreenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLScreen_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLScreen_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLScreen_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLScreen_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLScreen_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLScreen_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLScreen_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLScreen_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLScreen;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f35d-98b5-11cf-bb82-00aa00bdce0b")
HTMLScreen;
#endif

#ifndef __DispHTMLWindow2_DISPINTERFACE_DEFINED__
#define __DispHTMLWindow2_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLWindow2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLWindow2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f55d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLWindow2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLWindow2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLWindow2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLWindow2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLWindow2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLWindow2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLWindow2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLWindow2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLWindow2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLWindow2Vtbl;

    interface DispHTMLWindow2
    {
        CONST_VTBL struct DispHTMLWindow2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLWindow2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLWindow2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLWindow2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLWindow2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLWindow2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLWindow2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLWindow2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLWindow2_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLWindow2;

#ifdef __cplusplus

class DECLSPEC_UUID("D48A6EC6-6A4A-11cf-94A7-444553540000")
HTMLWindow2;
#endif

#ifndef __DispHTMLWindowProxy_DISPINTERFACE_DEFINED__
#define __DispHTMLWindowProxy_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLWindowProxy */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLWindowProxy;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f55e-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLWindowProxy : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLWindowProxyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLWindowProxy * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLWindowProxy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLWindowProxy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLWindowProxy * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLWindowProxy * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLWindowProxy * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLWindowProxy * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLWindowProxyVtbl;

    interface DispHTMLWindowProxy
    {
        CONST_VTBL struct DispHTMLWindowProxyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLWindowProxy_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLWindowProxy_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLWindowProxy_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLWindowProxy_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLWindowProxy_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLWindowProxy_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLWindowProxy_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLWindowProxy_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLWindowProxy;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f391-98b5-11cf-bb82-00aa00bdce0b")
HTMLWindowProxy;
#endif

#ifndef __HTMLDocumentEvents2_DISPINTERFACE_DEFINED__
#define __HTMLDocumentEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLDocumentEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLDocumentEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f613-98b5-11cf-bb82-00aa00bdce0b")
    HTMLDocumentEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLDocumentEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLDocumentEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLDocumentEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLDocumentEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLDocumentEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLDocumentEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLDocumentEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLDocumentEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLDocumentEvents2Vtbl;

    interface HTMLDocumentEvents2
    {
        CONST_VTBL struct HTMLDocumentEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLDocumentEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLDocumentEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLDocumentEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLDocumentEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLDocumentEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLDocumentEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLDocumentEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLDocumentEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLDocumentEvents_DISPINTERFACE_DEFINED__
#define __HTMLDocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLDocumentEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f260-98b5-11cf-bb82-00aa00bdce0b")
    HTMLDocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLDocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLDocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLDocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLDocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLDocumentEventsVtbl;

    interface HTMLDocumentEvents
    {
        CONST_VTBL struct HTMLDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLDocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLDocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLDocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLDocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLDocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLDocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLDocumentEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLDocument3_INTERFACE_DEFINED__
#define __IHTMLDocument3_INTERFACE_DEFINED__

/* interface IHTMLDocument3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDocument3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f485-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDocument3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE releaseCapture( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE recalc( 
            /* [in][defaultvalue] */ VARIANT_BOOL fForce = 0) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextNode( 
            /* [in] */ BSTR text,
            /* [out][retval] */ IHTMLDOMNode **newTextNode) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_documentElement( 
            /* [out][retval] */ IHTMLElement **p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_uniqueID( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE attachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE detachEvent( 
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowsdelete( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowsdelete( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onrowsinserted( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onrowsinserted( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncellchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncellchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondatasetchanged( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondatasetchanged( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondataavailable( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondataavailable( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondatasetcomplete( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondatasetcomplete( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onpropertychange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onpropertychange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dir( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dir( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncontextmenu( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncontextmenu( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onstop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onstop( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createDocumentFragment( 
            /* [out][retval] */ IHTMLDocument2 **pNewDoc) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_parentDocument( 
            /* [out][retval] */ IHTMLDocument2 **p) = 0;
        
        virtual /* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_enableDownload( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_enableDownload( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_baseUrl( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_baseUrl( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_childNodes( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_inheritStyleSheets( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_inheritStyleSheets( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeeditfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeeditfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getElementsByName( 
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getElementById( 
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElement **pel) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDocument3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDocument3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDocument3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDocument3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDocument3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDocument3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDocument3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDocument3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *releaseCapture )( 
            IHTMLDocument3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *recalc )( 
            IHTMLDocument3 * This,
            /* [in][defaultvalue] */ VARIANT_BOOL fForce);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR text,
            /* [out][retval] */ IHTMLDOMNode **newTextNode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_documentElement )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ IHTMLElement **p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_uniqueID )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *attachEvent )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp,
            /* [out][retval] */ VARIANT_BOOL *pfResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *detachEvent )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR event,
            /* [in] */ IDispatch *pDisp);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowsdelete )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowsdelete )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onrowsinserted )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onrowsinserted )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncellchange )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncellchange )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondatasetchanged )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondatasetchanged )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondataavailable )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondatasetcomplete )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondatasetcomplete )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onpropertychange )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onpropertychange )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dir )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dir )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncontextmenu )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncontextmenu )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onstop )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onstop )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ IHTMLDocument2 **pNewDoc);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentDocument )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ IHTMLDocument2 **p);
        
        /* [restricted][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_enableDownload )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_enableDownload )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [restricted][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_baseUrl )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR v);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseUrl )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [restricted][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_inheritStyleSheets )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_inheritStyleSheets )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeeditfocus )( 
            IHTMLDocument3 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeeditfocus )( 
            IHTMLDocument3 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByName )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getElementById )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElement **pel);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IHTMLDocument3 * This,
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLElementCollection **pelColl);
        
        END_INTERFACE
    } IHTMLDocument3Vtbl;

    interface IHTMLDocument3
    {
        CONST_VTBL struct IHTMLDocument3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDocument3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDocument3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDocument3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDocument3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDocument3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDocument3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDocument3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDocument3_releaseCapture(This)	\
    (This)->lpVtbl -> releaseCapture(This)

#define IHTMLDocument3_recalc(This,fForce)	\
    (This)->lpVtbl -> recalc(This,fForce)

#define IHTMLDocument3_createTextNode(This,text,newTextNode)	\
    (This)->lpVtbl -> createTextNode(This,text,newTextNode)

#define IHTMLDocument3_get_documentElement(This,p)	\
    (This)->lpVtbl -> get_documentElement(This,p)

#define IHTMLDocument3_get_uniqueID(This,p)	\
    (This)->lpVtbl -> get_uniqueID(This,p)

#define IHTMLDocument3_attachEvent(This,event,pDisp,pfResult)	\
    (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult)

#define IHTMLDocument3_detachEvent(This,event,pDisp)	\
    (This)->lpVtbl -> detachEvent(This,event,pDisp)

#define IHTMLDocument3_put_onrowsdelete(This,v)	\
    (This)->lpVtbl -> put_onrowsdelete(This,v)

#define IHTMLDocument3_get_onrowsdelete(This,p)	\
    (This)->lpVtbl -> get_onrowsdelete(This,p)

#define IHTMLDocument3_put_onrowsinserted(This,v)	\
    (This)->lpVtbl -> put_onrowsinserted(This,v)

#define IHTMLDocument3_get_onrowsinserted(This,p)	\
    (This)->lpVtbl -> get_onrowsinserted(This,p)

#define IHTMLDocument3_put_oncellchange(This,v)	\
    (This)->lpVtbl -> put_oncellchange(This,v)

#define IHTMLDocument3_get_oncellchange(This,p)	\
    (This)->lpVtbl -> get_oncellchange(This,p)

#define IHTMLDocument3_put_ondatasetchanged(This,v)	\
    (This)->lpVtbl -> put_ondatasetchanged(This,v)

#define IHTMLDocument3_get_ondatasetchanged(This,p)	\
    (This)->lpVtbl -> get_ondatasetchanged(This,p)

#define IHTMLDocument3_put_ondataavailable(This,v)	\
    (This)->lpVtbl -> put_ondataavailable(This,v)

#define IHTMLDocument3_get_ondataavailable(This,p)	\
    (This)->lpVtbl -> get_ondataavailable(This,p)

#define IHTMLDocument3_put_ondatasetcomplete(This,v)	\
    (This)->lpVtbl -> put_ondatasetcomplete(This,v)

#define IHTMLDocument3_get_ondatasetcomplete(This,p)	\
    (This)->lpVtbl -> get_ondatasetcomplete(This,p)

#define IHTMLDocument3_put_onpropertychange(This,v)	\
    (This)->lpVtbl -> put_onpropertychange(This,v)

#define IHTMLDocument3_get_onpropertychange(This,p)	\
    (This)->lpVtbl -> get_onpropertychange(This,p)

#define IHTMLDocument3_put_dir(This,v)	\
    (This)->lpVtbl -> put_dir(This,v)

#define IHTMLDocument3_get_dir(This,p)	\
    (This)->lpVtbl -> get_dir(This,p)

#define IHTMLDocument3_put_oncontextmenu(This,v)	\
    (This)->lpVtbl -> put_oncontextmenu(This,v)

#define IHTMLDocument3_get_oncontextmenu(This,p)	\
    (This)->lpVtbl -> get_oncontextmenu(This,p)

#define IHTMLDocument3_put_onstop(This,v)	\
    (This)->lpVtbl -> put_onstop(This,v)

#define IHTMLDocument3_get_onstop(This,p)	\
    (This)->lpVtbl -> get_onstop(This,p)

#define IHTMLDocument3_createDocumentFragment(This,pNewDoc)	\
    (This)->lpVtbl -> createDocumentFragment(This,pNewDoc)

#define IHTMLDocument3_get_parentDocument(This,p)	\
    (This)->lpVtbl -> get_parentDocument(This,p)

#define IHTMLDocument3_put_enableDownload(This,v)	\
    (This)->lpVtbl -> put_enableDownload(This,v)

#define IHTMLDocument3_get_enableDownload(This,p)	\
    (This)->lpVtbl -> get_enableDownload(This,p)

#define IHTMLDocument3_put_baseUrl(This,v)	\
    (This)->lpVtbl -> put_baseUrl(This,v)

#define IHTMLDocument3_get_baseUrl(This,p)	\
    (This)->lpVtbl -> get_baseUrl(This,p)

#define IHTMLDocument3_get_childNodes(This,p)	\
    (This)->lpVtbl -> get_childNodes(This,p)

#define IHTMLDocument3_put_inheritStyleSheets(This,v)	\
    (This)->lpVtbl -> put_inheritStyleSheets(This,v)

#define IHTMLDocument3_get_inheritStyleSheets(This,p)	\
    (This)->lpVtbl -> get_inheritStyleSheets(This,p)

#define IHTMLDocument3_put_onbeforeeditfocus(This,v)	\
    (This)->lpVtbl -> put_onbeforeeditfocus(This,v)

#define IHTMLDocument3_get_onbeforeeditfocus(This,p)	\
    (This)->lpVtbl -> get_onbeforeeditfocus(This,p)

#define IHTMLDocument3_getElementsByName(This,v,pelColl)	\
    (This)->lpVtbl -> getElementsByName(This,v,pelColl)

#define IHTMLDocument3_getElementById(This,v,pel)	\
    (This)->lpVtbl -> getElementById(This,v,pel)

#define IHTMLDocument3_getElementsByTagName(This,v,pelColl)	\
    (This)->lpVtbl -> getElementsByTagName(This,v,pelColl)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_releaseCapture_Proxy( 
    IHTMLDocument3 * This);


void __RPC_STUB IHTMLDocument3_releaseCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_recalc_Proxy( 
    IHTMLDocument3 * This,
    /* [in][defaultvalue] */ VARIANT_BOOL fForce);


void __RPC_STUB IHTMLDocument3_recalc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_createTextNode_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR text,
    /* [out][retval] */ IHTMLDOMNode **newTextNode);


void __RPC_STUB IHTMLDocument3_createTextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_documentElement_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ IHTMLElement **p);


void __RPC_STUB IHTMLDocument3_get_documentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_uniqueID_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument3_get_uniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_attachEvent_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp,
    /* [out][retval] */ VARIANT_BOOL *pfResult);


void __RPC_STUB IHTMLDocument3_attachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_detachEvent_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR event,
    /* [in] */ IDispatch *pDisp);


void __RPC_STUB IHTMLDocument3_detachEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_onrowsdelete_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_onrowsdelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_onrowsdelete_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_onrowsdelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_onrowsinserted_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_onrowsinserted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_onrowsinserted_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_onrowsinserted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_oncellchange_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_oncellchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_oncellchange_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_oncellchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_ondatasetchanged_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_ondatasetchanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_ondatasetchanged_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_ondatasetchanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_ondataavailable_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_ondataavailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_ondataavailable_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_ondataavailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_ondatasetcomplete_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_ondatasetcomplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_ondatasetcomplete_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_ondatasetcomplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_onpropertychange_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_onpropertychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_onpropertychange_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_onpropertychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_dir_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument3_put_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_dir_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument3_get_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_oncontextmenu_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_oncontextmenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_oncontextmenu_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_oncontextmenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_onstop_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_onstop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_onstop_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_onstop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_createDocumentFragment_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ IHTMLDocument2 **pNewDoc);


void __RPC_STUB IHTMLDocument3_createDocumentFragment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_parentDocument_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ IHTMLDocument2 **p);


void __RPC_STUB IHTMLDocument3_get_parentDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_enableDownload_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDocument3_put_enableDownload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_enableDownload_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDocument3_get_enableDownload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_baseUrl_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument3_put_baseUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_baseUrl_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument3_get_baseUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_childNodes_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDocument3_get_childNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_inheritStyleSheets_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLDocument3_put_inheritStyleSheets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_inheritStyleSheets_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLDocument3_get_inheritStyleSheets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_put_onbeforeeditfocus_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument3_put_onbeforeeditfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_get_onbeforeeditfocus_Proxy( 
    IHTMLDocument3 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument3_get_onbeforeeditfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_getElementsByName_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR v,
    /* [out][retval] */ IHTMLElementCollection **pelColl);


void __RPC_STUB IHTMLDocument3_getElementsByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_getElementById_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR v,
    /* [out][retval] */ IHTMLElement **pel);


void __RPC_STUB IHTMLDocument3_getElementById_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument3_getElementsByTagName_Proxy( 
    IHTMLDocument3 * This,
    /* [in] */ BSTR v,
    /* [out][retval] */ IHTMLElementCollection **pelColl);


void __RPC_STUB IHTMLDocument3_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDocument3_INTERFACE_DEFINED__ */


#ifndef __IHTMLDocument4_INTERFACE_DEFINED__
#define __IHTMLDocument4_INTERFACE_DEFINED__

/* interface IHTMLDocument4 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDocument4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f69a-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDocument4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE hasFocus( 
            /* [out][retval] */ VARIANT_BOOL *pfFocus) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onselectionchange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onselectionchange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_namespaces( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createDocumentFromUrl( 
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BSTR bstrOptions,
            /* [out][retval] */ IHTMLDocument2 **newDoc) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_media( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_media( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createEventObject( 
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ IHTMLEventObj **ppEventObj) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE fireEvent( 
            /* [in] */ BSTR bstrEventName,
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ VARIANT_BOOL *pfCancelled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createRenderStyle( 
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLRenderStyle **ppIHTMLRenderStyle) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_oncontrolselect( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_oncontrolselect( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_URLUnencoded( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDocument4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDocument4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDocument4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDocument4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDocument4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDocument4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDocument4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDocument4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLDocument4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *hasFocus )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ VARIANT_BOOL *pfFocus);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onselectionchange )( 
            IHTMLDocument4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onselectionchange )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaces )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFromUrl )( 
            IHTMLDocument4 * This,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BSTR bstrOptions,
            /* [out][retval] */ IHTMLDocument2 **newDoc);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_media )( 
            IHTMLDocument4 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_media )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createEventObject )( 
            IHTMLDocument4 * This,
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ IHTMLEventObj **ppEventObj);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *fireEvent )( 
            IHTMLDocument4 * This,
            /* [in] */ BSTR bstrEventName,
            /* [in][optional] */ VARIANT *pvarEventObject,
            /* [out][retval] */ VARIANT_BOOL *pfCancelled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createRenderStyle )( 
            IHTMLDocument4 * This,
            /* [in] */ BSTR v,
            /* [out][retval] */ IHTMLRenderStyle **ppIHTMLRenderStyle);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_oncontrolselect )( 
            IHTMLDocument4 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_oncontrolselect )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_URLUnencoded )( 
            IHTMLDocument4 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLDocument4Vtbl;

    interface IHTMLDocument4
    {
        CONST_VTBL struct IHTMLDocument4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDocument4_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDocument4_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDocument4_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDocument4_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDocument4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDocument4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDocument4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDocument4_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLDocument4_hasFocus(This,pfFocus)	\
    (This)->lpVtbl -> hasFocus(This,pfFocus)

#define IHTMLDocument4_put_onselectionchange(This,v)	\
    (This)->lpVtbl -> put_onselectionchange(This,v)

#define IHTMLDocument4_get_onselectionchange(This,p)	\
    (This)->lpVtbl -> get_onselectionchange(This,p)

#define IHTMLDocument4_get_namespaces(This,p)	\
    (This)->lpVtbl -> get_namespaces(This,p)

#define IHTMLDocument4_createDocumentFromUrl(This,bstrUrl,bstrOptions,newDoc)	\
    (This)->lpVtbl -> createDocumentFromUrl(This,bstrUrl,bstrOptions,newDoc)

#define IHTMLDocument4_put_media(This,v)	\
    (This)->lpVtbl -> put_media(This,v)

#define IHTMLDocument4_get_media(This,p)	\
    (This)->lpVtbl -> get_media(This,p)

#define IHTMLDocument4_createEventObject(This,pvarEventObject,ppEventObj)	\
    (This)->lpVtbl -> createEventObject(This,pvarEventObject,ppEventObj)

#define IHTMLDocument4_fireEvent(This,bstrEventName,pvarEventObject,pfCancelled)	\
    (This)->lpVtbl -> fireEvent(This,bstrEventName,pvarEventObject,pfCancelled)

#define IHTMLDocument4_createRenderStyle(This,v,ppIHTMLRenderStyle)	\
    (This)->lpVtbl -> createRenderStyle(This,v,ppIHTMLRenderStyle)

#define IHTMLDocument4_put_oncontrolselect(This,v)	\
    (This)->lpVtbl -> put_oncontrolselect(This,v)

#define IHTMLDocument4_get_oncontrolselect(This,p)	\
    (This)->lpVtbl -> get_oncontrolselect(This,p)

#define IHTMLDocument4_get_URLUnencoded(This,p)	\
    (This)->lpVtbl -> get_URLUnencoded(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_focus_Proxy( 
    IHTMLDocument4 * This);


void __RPC_STUB IHTMLDocument4_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_hasFocus_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ VARIANT_BOOL *pfFocus);


void __RPC_STUB IHTMLDocument4_hasFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_put_onselectionchange_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument4_put_onselectionchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_get_onselectionchange_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument4_get_onselectionchange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_get_namespaces_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IHTMLDocument4_get_namespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_createDocumentFromUrl_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BSTR bstrOptions,
    /* [out][retval] */ IHTMLDocument2 **newDoc);


void __RPC_STUB IHTMLDocument4_createDocumentFromUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_put_media_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLDocument4_put_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_get_media_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument4_get_media_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_createEventObject_Proxy( 
    IHTMLDocument4 * This,
    /* [in][optional] */ VARIANT *pvarEventObject,
    /* [out][retval] */ IHTMLEventObj **ppEventObj);


void __RPC_STUB IHTMLDocument4_createEventObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_fireEvent_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ BSTR bstrEventName,
    /* [in][optional] */ VARIANT *pvarEventObject,
    /* [out][retval] */ VARIANT_BOOL *pfCancelled);


void __RPC_STUB IHTMLDocument4_fireEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_createRenderStyle_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ BSTR v,
    /* [out][retval] */ IHTMLRenderStyle **ppIHTMLRenderStyle);


void __RPC_STUB IHTMLDocument4_createRenderStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_put_oncontrolselect_Proxy( 
    IHTMLDocument4 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument4_put_oncontrolselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_get_oncontrolselect_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument4_get_oncontrolselect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument4_get_URLUnencoded_Proxy( 
    IHTMLDocument4 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument4_get_URLUnencoded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDocument4_INTERFACE_DEFINED__ */


#ifndef __IHTMLDocument5_INTERFACE_DEFINED__
#define __IHTMLDocument5_INTERFACE_DEFINED__

/* interface IHTMLDocument5 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLDocument5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f80c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLDocument5 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onmousewheel( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onmousewheel( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_doctype( 
            /* [out][retval] */ IHTMLDOMNode **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_implementation( 
            /* [out][retval] */ IHTMLDOMImplementation **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createAttribute( 
            /* [in] */ BSTR bstrattrName,
            /* [out][retval] */ IHTMLDOMAttribute **ppattribute) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createComment( 
            /* [in] */ BSTR bstrdata,
            /* [out][retval] */ IHTMLDOMNode **ppRetNode) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocusin( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocusin( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocusout( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocusout( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ondeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onbeforedeactivate( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onbeforedeactivate( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_compatMode( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDocument5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLDocument5 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLDocument5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLDocument5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLDocument5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLDocument5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLDocument5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLDocument5 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onmousewheel )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onmousewheel )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_doctype )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ IHTMLDOMNode **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_implementation )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ IHTMLDOMImplementation **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IHTMLDocument5 * This,
            /* [in] */ BSTR bstrattrName,
            /* [out][retval] */ IHTMLDOMAttribute **ppattribute);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IHTMLDocument5 * This,
            /* [in] */ BSTR bstrdata,
            /* [out][retval] */ IHTMLDOMNode **ppRetNode);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocusin )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocusin )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocusout )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocusout )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onactivate )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onactivate )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondeactivate )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ondeactivate )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforeactivate )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforeactivate )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onbeforedeactivate )( 
            IHTMLDocument5 * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onbeforedeactivate )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_compatMode )( 
            IHTMLDocument5 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLDocument5Vtbl;

    interface IHTMLDocument5
    {
        CONST_VTBL struct IHTMLDocument5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDocument5_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDocument5_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDocument5_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDocument5_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDocument5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDocument5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDocument5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDocument5_put_onmousewheel(This,v)	\
    (This)->lpVtbl -> put_onmousewheel(This,v)

#define IHTMLDocument5_get_onmousewheel(This,p)	\
    (This)->lpVtbl -> get_onmousewheel(This,p)

#define IHTMLDocument5_get_doctype(This,p)	\
    (This)->lpVtbl -> get_doctype(This,p)

#define IHTMLDocument5_get_implementation(This,p)	\
    (This)->lpVtbl -> get_implementation(This,p)

#define IHTMLDocument5_createAttribute(This,bstrattrName,ppattribute)	\
    (This)->lpVtbl -> createAttribute(This,bstrattrName,ppattribute)

#define IHTMLDocument5_createComment(This,bstrdata,ppRetNode)	\
    (This)->lpVtbl -> createComment(This,bstrdata,ppRetNode)

#define IHTMLDocument5_put_onfocusin(This,v)	\
    (This)->lpVtbl -> put_onfocusin(This,v)

#define IHTMLDocument5_get_onfocusin(This,p)	\
    (This)->lpVtbl -> get_onfocusin(This,p)

#define IHTMLDocument5_put_onfocusout(This,v)	\
    (This)->lpVtbl -> put_onfocusout(This,v)

#define IHTMLDocument5_get_onfocusout(This,p)	\
    (This)->lpVtbl -> get_onfocusout(This,p)

#define IHTMLDocument5_put_onactivate(This,v)	\
    (This)->lpVtbl -> put_onactivate(This,v)

#define IHTMLDocument5_get_onactivate(This,p)	\
    (This)->lpVtbl -> get_onactivate(This,p)

#define IHTMLDocument5_put_ondeactivate(This,v)	\
    (This)->lpVtbl -> put_ondeactivate(This,v)

#define IHTMLDocument5_get_ondeactivate(This,p)	\
    (This)->lpVtbl -> get_ondeactivate(This,p)

#define IHTMLDocument5_put_onbeforeactivate(This,v)	\
    (This)->lpVtbl -> put_onbeforeactivate(This,v)

#define IHTMLDocument5_get_onbeforeactivate(This,p)	\
    (This)->lpVtbl -> get_onbeforeactivate(This,p)

#define IHTMLDocument5_put_onbeforedeactivate(This,v)	\
    (This)->lpVtbl -> put_onbeforedeactivate(This,v)

#define IHTMLDocument5_get_onbeforedeactivate(This,p)	\
    (This)->lpVtbl -> get_onbeforedeactivate(This,p)

#define IHTMLDocument5_get_compatMode(This,p)	\
    (This)->lpVtbl -> get_compatMode(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onmousewheel_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onmousewheel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onmousewheel_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onmousewheel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_doctype_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ IHTMLDOMNode **p);


void __RPC_STUB IHTMLDocument5_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_implementation_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ IHTMLDOMImplementation **p);


void __RPC_STUB IHTMLDocument5_get_implementation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_createAttribute_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ BSTR bstrattrName,
    /* [out][retval] */ IHTMLDOMAttribute **ppattribute);


void __RPC_STUB IHTMLDocument5_createAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_createComment_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ BSTR bstrdata,
    /* [out][retval] */ IHTMLDOMNode **ppRetNode);


void __RPC_STUB IHTMLDocument5_createComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onfocusin_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onfocusin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onfocusin_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onfocusin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onfocusout_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onfocusout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onfocusout_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onfocusout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_ondeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_ondeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_ondeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_ondeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onbeforeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onbeforeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onbeforeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onbeforeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_put_onbeforedeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLDocument5_put_onbeforedeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_onbeforedeactivate_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLDocument5_get_onbeforedeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDocument5_get_compatMode_Proxy( 
    IHTMLDocument5 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLDocument5_get_compatMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDocument5_INTERFACE_DEFINED__ */


#ifndef __DispHTMLDocument_DISPINTERFACE_DEFINED__
#define __DispHTMLDocument_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLDocument */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f55f-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLDocument : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLDocumentVtbl;

    interface DispHTMLDocument
    {
        CONST_VTBL struct DispHTMLDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLDocument_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLDocument_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLDocument_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLDocument_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLDocument;

#ifdef __cplusplus

class DECLSPEC_UUID("25336920-03F9-11cf-8FD0-00AA00686F13")
HTMLDocument;
#endif

#ifndef __DWebBridgeEvents_DISPINTERFACE_DEFINED__
#define __DWebBridgeEvents_DISPINTERFACE_DEFINED__

/* dispinterface DWebBridgeEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DWebBridgeEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A6D897FF-0A95-11d1-B0BA-006008166E11")
    DWebBridgeEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DWebBridgeEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DWebBridgeEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DWebBridgeEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DWebBridgeEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DWebBridgeEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DWebBridgeEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DWebBridgeEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DWebBridgeEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DWebBridgeEventsVtbl;

    interface DWebBridgeEvents
    {
        CONST_VTBL struct DWebBridgeEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DWebBridgeEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DWebBridgeEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DWebBridgeEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DWebBridgeEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DWebBridgeEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DWebBridgeEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DWebBridgeEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DWebBridgeEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IWebBridge_INTERFACE_DEFINED__
#define __IWebBridge_INTERFACE_DEFINED__

/* interface IWebBridge */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IWebBridge;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AE24FDAD-03C6-11D1-8B76-0080C744F389")
    IWebBridge : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_URL( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Scrollbar( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Scrollbar( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_embed( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_embed( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_event( 
            /* [out][retval] */ IDispatch **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AboutBox( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebBridgeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebBridge * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebBridge * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebBridge * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWebBridge * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWebBridge * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWebBridge * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWebBridge * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWebBridge * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWebBridge * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scrollbar )( 
            IWebBridge * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scrollbar )( 
            IWebBridge * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_embed )( 
            IWebBridge * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_embed )( 
            IWebBridge * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_event )( 
            IWebBridge * This,
            /* [out][retval] */ IDispatch **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IWebBridge * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AboutBox )( 
            IWebBridge * This);
        
        END_INTERFACE
    } IWebBridgeVtbl;

    interface IWebBridge
    {
        CONST_VTBL struct IWebBridgeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebBridge_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IWebBridge_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IWebBridge_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IWebBridge_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IWebBridge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IWebBridge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IWebBridge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IWebBridge_put_URL(This,v)	\
    (This)->lpVtbl -> put_URL(This,v)

#define IWebBridge_get_URL(This,p)	\
    (This)->lpVtbl -> get_URL(This,p)

#define IWebBridge_put_Scrollbar(This,v)	\
    (This)->lpVtbl -> put_Scrollbar(This,v)

#define IWebBridge_get_Scrollbar(This,p)	\
    (This)->lpVtbl -> get_Scrollbar(This,p)

#define IWebBridge_put_embed(This,v)	\
    (This)->lpVtbl -> put_embed(This,v)

#define IWebBridge_get_embed(This,p)	\
    (This)->lpVtbl -> get_embed(This,p)

#define IWebBridge_get_event(This,p)	\
    (This)->lpVtbl -> get_event(This,p)

#define IWebBridge_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IWebBridge_AboutBox(This)	\
    (This)->lpVtbl -> AboutBox(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWebBridge_put_URL_Proxy( 
    IWebBridge * This,
    /* [in] */ BSTR v);


void __RPC_STUB IWebBridge_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWebBridge_get_URL_Proxy( 
    IWebBridge * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IWebBridge_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWebBridge_put_Scrollbar_Proxy( 
    IWebBridge * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IWebBridge_put_Scrollbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWebBridge_get_Scrollbar_Proxy( 
    IWebBridge * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWebBridge_get_Scrollbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWebBridge_put_embed_Proxy( 
    IWebBridge * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IWebBridge_put_embed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWebBridge_get_embed_Proxy( 
    IWebBridge * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWebBridge_get_embed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWebBridge_get_event_Proxy( 
    IWebBridge * This,
    /* [out][retval] */ IDispatch **p);


void __RPC_STUB IWebBridge_get_event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWebBridge_get_readyState_Proxy( 
    IWebBridge * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IWebBridge_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IWebBridge_AboutBox_Proxy( 
    IWebBridge * This);


void __RPC_STUB IWebBridge_AboutBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWebBridge_INTERFACE_DEFINED__ */


#ifndef __IWBScriptControl_INTERFACE_DEFINED__
#define __IWBScriptControl_INTERFACE_DEFINED__

/* interface IWBScriptControl */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IWBScriptControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A5170870-0CF8-11D1-8B91-0080C744F389")
    IWBScriptControl : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE raiseEvent( 
            /* [in] */ BSTR name,
            /* [in] */ VARIANT eventData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE bubbleEvent( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setContextMenu( 
            /* [in] */ VARIANT menuItemPairs) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectableContent( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectableContent( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frozen( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollbar( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollbar( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_version( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_visibility( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_onvisibilitychange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_onvisibilitychange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWBScriptControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWBScriptControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWBScriptControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWBScriptControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWBScriptControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWBScriptControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWBScriptControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWBScriptControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *raiseEvent )( 
            IWBScriptControl * This,
            /* [in] */ BSTR name,
            /* [in] */ VARIANT eventData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *bubbleEvent )( 
            IWBScriptControl * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setContextMenu )( 
            IWBScriptControl * This,
            /* [in] */ VARIANT menuItemPairs);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectableContent )( 
            IWBScriptControl * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectableContent )( 
            IWBScriptControl * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frozen )( 
            IWBScriptControl * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_scrollbar )( 
            IWBScriptControl * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_scrollbar )( 
            IWBScriptControl * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_version )( 
            IWBScriptControl * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_visibility )( 
            IWBScriptControl * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onvisibilitychange )( 
            IWBScriptControl * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onvisibilitychange )( 
            IWBScriptControl * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IWBScriptControlVtbl;

    interface IWBScriptControl
    {
        CONST_VTBL struct IWBScriptControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWBScriptControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IWBScriptControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IWBScriptControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IWBScriptControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IWBScriptControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IWBScriptControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IWBScriptControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IWBScriptControl_raiseEvent(This,name,eventData)	\
    (This)->lpVtbl -> raiseEvent(This,name,eventData)

#define IWBScriptControl_bubbleEvent(This)	\
    (This)->lpVtbl -> bubbleEvent(This)

#define IWBScriptControl_setContextMenu(This,menuItemPairs)	\
    (This)->lpVtbl -> setContextMenu(This,menuItemPairs)

#define IWBScriptControl_put_selectableContent(This,v)	\
    (This)->lpVtbl -> put_selectableContent(This,v)

#define IWBScriptControl_get_selectableContent(This,p)	\
    (This)->lpVtbl -> get_selectableContent(This,p)

#define IWBScriptControl_get_frozen(This,p)	\
    (This)->lpVtbl -> get_frozen(This,p)

#define IWBScriptControl_put_scrollbar(This,v)	\
    (This)->lpVtbl -> put_scrollbar(This,v)

#define IWBScriptControl_get_scrollbar(This,p)	\
    (This)->lpVtbl -> get_scrollbar(This,p)

#define IWBScriptControl_get_version(This,p)	\
    (This)->lpVtbl -> get_version(This,p)

#define IWBScriptControl_get_visibility(This,p)	\
    (This)->lpVtbl -> get_visibility(This,p)

#define IWBScriptControl_put_onvisibilitychange(This,v)	\
    (This)->lpVtbl -> put_onvisibilitychange(This,v)

#define IWBScriptControl_get_onvisibilitychange(This,p)	\
    (This)->lpVtbl -> get_onvisibilitychange(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_raiseEvent_Proxy( 
    IWBScriptControl * This,
    /* [in] */ BSTR name,
    /* [in] */ VARIANT eventData);


void __RPC_STUB IWBScriptControl_raiseEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_bubbleEvent_Proxy( 
    IWBScriptControl * This);


void __RPC_STUB IWBScriptControl_bubbleEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_setContextMenu_Proxy( 
    IWBScriptControl * This,
    /* [in] */ VARIANT menuItemPairs);


void __RPC_STUB IWBScriptControl_setContextMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_put_selectableContent_Proxy( 
    IWBScriptControl * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IWBScriptControl_put_selectableContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_selectableContent_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWBScriptControl_get_selectableContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_frozen_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWBScriptControl_get_frozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_put_scrollbar_Proxy( 
    IWBScriptControl * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IWBScriptControl_put_scrollbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_scrollbar_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWBScriptControl_get_scrollbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_version_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IWBScriptControl_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_visibility_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IWBScriptControl_get_visibility_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_put_onvisibilitychange_Proxy( 
    IWBScriptControl * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IWBScriptControl_put_onvisibilitychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IWBScriptControl_get_onvisibilitychange_Proxy( 
    IWBScriptControl * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IWBScriptControl_get_onvisibilitychange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWBScriptControl_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Scriptlet;

#ifdef __cplusplus

class DECLSPEC_UUID("AE24FDAE-03C6-11D1-8B76-0080C744F389")
Scriptlet;
#endif

#ifndef __IHTMLEmbedElement_INTERFACE_DEFINED__
#define __IHTMLEmbedElement_INTERFACE_DEFINED__

/* interface IHTMLEmbedElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLEmbedElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f25f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLEmbedElement : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hidden( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hidden( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_palette( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pluginspage( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_units( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_units( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLEmbedElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLEmbedElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLEmbedElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLEmbedElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLEmbedElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLEmbedElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLEmbedElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLEmbedElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hidden )( 
            IHTMLEmbedElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hidden )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_palette )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pluginspage )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            IHTMLEmbedElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_units )( 
            IHTMLEmbedElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_units )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLEmbedElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLEmbedElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLEmbedElement * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLEmbedElement * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLEmbedElementVtbl;

    interface IHTMLEmbedElement
    {
        CONST_VTBL struct IHTMLEmbedElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLEmbedElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLEmbedElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLEmbedElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLEmbedElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLEmbedElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLEmbedElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLEmbedElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLEmbedElement_put_hidden(This,v)	\
    (This)->lpVtbl -> put_hidden(This,v)

#define IHTMLEmbedElement_get_hidden(This,p)	\
    (This)->lpVtbl -> get_hidden(This,p)

#define IHTMLEmbedElement_get_palette(This,p)	\
    (This)->lpVtbl -> get_palette(This,p)

#define IHTMLEmbedElement_get_pluginspage(This,p)	\
    (This)->lpVtbl -> get_pluginspage(This,p)

#define IHTMLEmbedElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IHTMLEmbedElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IHTMLEmbedElement_put_units(This,v)	\
    (This)->lpVtbl -> put_units(This,v)

#define IHTMLEmbedElement_get_units(This,p)	\
    (This)->lpVtbl -> get_units(This,p)

#define IHTMLEmbedElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLEmbedElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IHTMLEmbedElement_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLEmbedElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLEmbedElement_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLEmbedElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_hidden_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEmbedElement_put_hidden_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_hidden_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_hidden_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_palette_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_palette_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_pluginspage_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_pluginspage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_src_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEmbedElement_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_src_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_units_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEmbedElement_put_units_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_units_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_units_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_name_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLEmbedElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_name_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLEmbedElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_width_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLEmbedElement_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_width_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLEmbedElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_put_height_Proxy( 
    IHTMLEmbedElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLEmbedElement_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLEmbedElement_get_height_Proxy( 
    IHTMLEmbedElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLEmbedElement_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLEmbedElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLEmbed_DISPINTERFACE_DEFINED__
#define __DispHTMLEmbed_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLEmbed */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLEmbed;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f52e-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLEmbed : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLEmbedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLEmbed * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLEmbed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLEmbed * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLEmbed * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLEmbed * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLEmbed * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLEmbed * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLEmbedVtbl;

    interface DispHTMLEmbed
    {
        CONST_VTBL struct DispHTMLEmbedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLEmbed_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLEmbed_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLEmbed_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLEmbed_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLEmbed_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLEmbed_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLEmbed_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLEmbed_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLEmbed;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f25d-98b5-11cf-bb82-00aa00bdce0b")
HTMLEmbed;
#endif

#ifndef __HTMLMapEvents2_DISPINTERFACE_DEFINED__
#define __HTMLMapEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLMapEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLMapEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f61e-98b5-11cf-bb82-00aa00bdce0b")
    HTMLMapEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLMapEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLMapEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLMapEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLMapEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLMapEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLMapEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLMapEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLMapEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLMapEvents2Vtbl;

    interface HTMLMapEvents2
    {
        CONST_VTBL struct HTMLMapEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLMapEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLMapEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLMapEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLMapEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLMapEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLMapEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLMapEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLMapEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLMapEvents_DISPINTERFACE_DEFINED__
#define __HTMLMapEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLMapEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLMapEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f3ba-98b5-11cf-bb82-00aa00bdce0b")
    HTMLMapEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLMapEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLMapEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLMapEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLMapEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLMapEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLMapEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLMapEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLMapEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLMapEventsVtbl;

    interface HTMLMapEvents
    {
        CONST_VTBL struct HTMLMapEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLMapEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLMapEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLMapEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLMapEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLMapEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLMapEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLMapEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLMapEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLAreasCollection_INTERFACE_DEFINED__
#define __IHTMLAreasCollection_INTERFACE_DEFINED__

/* interface IHTMLAreasCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAreasCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f383-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAreasCollection : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_length( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IHTMLElement *element,
            /* [in][optional] */ VARIANT before) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in][defaultvalue] */ long index = -1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAreasCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAreasCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAreasCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAreasCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAreasCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAreasCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAreasCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAreasCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_length )( 
            IHTMLAreasCollection * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLAreasCollection * This,
            /* [out][retval] */ long *p);
        
        /* [restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IHTMLAreasCollection * This,
            /* [out][retval] */ IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IHTMLAreasCollection * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ IDispatch **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *tags )( 
            IHTMLAreasCollection * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch **pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IHTMLAreasCollection * This,
            /* [in] */ IHTMLElement *element,
            /* [in][optional] */ VARIANT before);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IHTMLAreasCollection * This,
            /* [in][defaultvalue] */ long index);
        
        END_INTERFACE
    } IHTMLAreasCollectionVtbl;

    interface IHTMLAreasCollection
    {
        CONST_VTBL struct IHTMLAreasCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAreasCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAreasCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAreasCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAreasCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAreasCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAreasCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAreasCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAreasCollection_put_length(This,v)	\
    (This)->lpVtbl -> put_length(This,v)

#define IHTMLAreasCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLAreasCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#define IHTMLAreasCollection_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IHTMLAreasCollection_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#define IHTMLAreasCollection_add(This,element,before)	\
    (This)->lpVtbl -> add(This,element,before)

#define IHTMLAreasCollection_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_put_length_Proxy( 
    IHTMLAreasCollection * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLAreasCollection_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_get_length_Proxy( 
    IHTMLAreasCollection * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLAreasCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_get__newEnum_Proxy( 
    IHTMLAreasCollection * This,
    /* [out][retval] */ IUnknown **p);


void __RPC_STUB IHTMLAreasCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_item_Proxy( 
    IHTMLAreasCollection * This,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT index,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLAreasCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_tags_Proxy( 
    IHTMLAreasCollection * This,
    /* [in] */ VARIANT tagName,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLAreasCollection_tags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_add_Proxy( 
    IHTMLAreasCollection * This,
    /* [in] */ IHTMLElement *element,
    /* [in][optional] */ VARIANT before);


void __RPC_STUB IHTMLAreasCollection_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection_remove_Proxy( 
    IHTMLAreasCollection * This,
    /* [in][defaultvalue] */ long index);


void __RPC_STUB IHTMLAreasCollection_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAreasCollection_INTERFACE_DEFINED__ */


#ifndef __IHTMLAreasCollection2_INTERFACE_DEFINED__
#define __IHTMLAreasCollection2_INTERFACE_DEFINED__

/* interface IHTMLAreasCollection2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAreasCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5ec-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAreasCollection2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE urns( 
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAreasCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAreasCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAreasCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAreasCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAreasCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAreasCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAreasCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAreasCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *urns )( 
            IHTMLAreasCollection2 * This,
            /* [in] */ VARIANT urn,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLAreasCollection2Vtbl;

    interface IHTMLAreasCollection2
    {
        CONST_VTBL struct IHTMLAreasCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAreasCollection2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAreasCollection2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAreasCollection2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAreasCollection2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAreasCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAreasCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAreasCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAreasCollection2_urns(This,urn,pdisp)	\
    (This)->lpVtbl -> urns(This,urn,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection2_urns_Proxy( 
    IHTMLAreasCollection2 * This,
    /* [in] */ VARIANT urn,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLAreasCollection2_urns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAreasCollection2_INTERFACE_DEFINED__ */


#ifndef __IHTMLAreasCollection3_INTERFACE_DEFINED__
#define __IHTMLAreasCollection3_INTERFACE_DEFINED__

/* interface IHTMLAreasCollection3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAreasCollection3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f837-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAreasCollection3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAreasCollection3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAreasCollection3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAreasCollection3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAreasCollection3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAreasCollection3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAreasCollection3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAreasCollection3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAreasCollection3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IHTMLAreasCollection3 * This,
            /* [in] */ BSTR name,
            /* [out][retval] */ IDispatch **pdisp);
        
        END_INTERFACE
    } IHTMLAreasCollection3Vtbl;

    interface IHTMLAreasCollection3
    {
        CONST_VTBL struct IHTMLAreasCollection3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAreasCollection3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAreasCollection3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAreasCollection3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAreasCollection3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAreasCollection3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAreasCollection3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAreasCollection3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAreasCollection3_namedItem(This,name,pdisp)	\
    (This)->lpVtbl -> namedItem(This,name,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreasCollection3_namedItem_Proxy( 
    IHTMLAreasCollection3 * This,
    /* [in] */ BSTR name,
    /* [out][retval] */ IDispatch **pdisp);


void __RPC_STUB IHTMLAreasCollection3_namedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAreasCollection3_INTERFACE_DEFINED__ */


#ifndef __IHTMLMapElement_INTERFACE_DEFINED__
#define __IHTMLMapElement_INTERFACE_DEFINED__

/* interface IHTMLMapElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f266-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLMapElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_areas( 
            /* [out][retval] */ IHTMLAreasCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLMapElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLMapElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLMapElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLMapElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLMapElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_areas )( 
            IHTMLMapElement * This,
            /* [out][retval] */ IHTMLAreasCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IHTMLMapElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IHTMLMapElement * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLMapElementVtbl;

    interface IHTMLMapElement
    {
        CONST_VTBL struct IHTMLMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLMapElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLMapElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLMapElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLMapElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLMapElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLMapElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLMapElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLMapElement_get_areas(This,p)	\
    (This)->lpVtbl -> get_areas(This,p)

#define IHTMLMapElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IHTMLMapElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMapElement_get_areas_Proxy( 
    IHTMLMapElement * This,
    /* [out][retval] */ IHTMLAreasCollection **p);


void __RPC_STUB IHTMLMapElement_get_areas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLMapElement_put_name_Proxy( 
    IHTMLMapElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLMapElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLMapElement_get_name_Proxy( 
    IHTMLMapElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLMapElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLMapElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLAreasCollection_DISPINTERFACE_DEFINED__
#define __DispHTMLAreasCollection_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLAreasCollection */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLAreasCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f56a-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLAreasCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLAreasCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLAreasCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLAreasCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLAreasCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLAreasCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLAreasCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLAreasCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLAreasCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLAreasCollectionVtbl;

    interface DispHTMLAreasCollection
    {
        CONST_VTBL struct DispHTMLAreasCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLAreasCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLAreasCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLAreasCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLAreasCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLAreasCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLAreasCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLAreasCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLAreasCollection_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLAreasCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4ca-98b5-11cf-bb82-00aa00bdce0b")
HTMLAreasCollection;
#endif

#ifndef __DispHTMLMapElement_DISPINTERFACE_DEFINED__
#define __DispHTMLMapElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLMapElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f526-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLMapElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLMapElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLMapElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLMapElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLMapElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLMapElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLMapElementVtbl;

    interface DispHTMLMapElement
    {
        CONST_VTBL struct DispHTMLMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLMapElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLMapElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLMapElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLMapElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLMapElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLMapElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLMapElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLMapElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLMapElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f271-98b5-11cf-bb82-00aa00bdce0b")
HTMLMapElement;
#endif

#ifndef __HTMLAreaEvents2_DISPINTERFACE_DEFINED__
#define __HTMLAreaEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLAreaEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLAreaEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f611-98b5-11cf-bb82-00aa00bdce0b")
    HTMLAreaEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLAreaEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLAreaEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLAreaEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLAreaEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLAreaEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLAreaEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLAreaEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLAreaEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLAreaEvents2Vtbl;

    interface HTMLAreaEvents2
    {
        CONST_VTBL struct HTMLAreaEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLAreaEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLAreaEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLAreaEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLAreaEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLAreaEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLAreaEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLAreaEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLAreaEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLAreaEvents_DISPINTERFACE_DEFINED__
#define __HTMLAreaEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLAreaEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLAreaEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f366-98b5-11cf-bb82-00aa00bdce0b")
    HTMLAreaEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLAreaEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLAreaEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLAreaEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLAreaEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLAreaEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLAreaEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLAreaEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLAreaEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLAreaEventsVtbl;

    interface HTMLAreaEvents
    {
        CONST_VTBL struct HTMLAreaEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLAreaEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLAreaEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLAreaEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLAreaEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLAreaEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLAreaEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLAreaEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLAreaEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLAreaElement_INTERFACE_DEFINED__
#define __IHTMLAreaElement_INTERFACE_DEFINED__

/* interface IHTMLAreaElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f265-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLAreaElement : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_shape( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_shape( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_coords( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_coords( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_noHref( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_noHref( 
            /* [out][retval] */ VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_host( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_host( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hostname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hostname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pathname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pathname( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_port( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_port( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_protocol( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_search( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_search( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hash( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hash( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onblur( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onblur( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onfocus( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onfocus( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_tabIndex( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_tabIndex( 
            /* [out][retval] */ short *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLAreaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLAreaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLAreaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLAreaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLAreaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLAreaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_shape )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_shape )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_coords )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_coords )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_href )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_href )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_target )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_alt )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_alt )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_noHref )( 
            IHTMLAreaElement * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_noHref )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_host )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_host )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hostname )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hostname )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pathname )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pathname )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_port )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_port )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_protocol )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_protocol )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_search )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_search )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hash )( 
            IHTMLAreaElement * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hash )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onblur )( 
            IHTMLAreaElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onblur )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onfocus )( 
            IHTMLAreaElement * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onfocus )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tabIndex )( 
            IHTMLAreaElement * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tabIndex )( 
            IHTMLAreaElement * This,
            /* [out][retval] */ short *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *focus )( 
            IHTMLAreaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *blur )( 
            IHTMLAreaElement * This);
        
        END_INTERFACE
    } IHTMLAreaElementVtbl;

    interface IHTMLAreaElement
    {
        CONST_VTBL struct IHTMLAreaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLAreaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLAreaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLAreaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLAreaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLAreaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLAreaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLAreaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLAreaElement_put_shape(This,v)	\
    (This)->lpVtbl -> put_shape(This,v)

#define IHTMLAreaElement_get_shape(This,p)	\
    (This)->lpVtbl -> get_shape(This,p)

#define IHTMLAreaElement_put_coords(This,v)	\
    (This)->lpVtbl -> put_coords(This,v)

#define IHTMLAreaElement_get_coords(This,p)	\
    (This)->lpVtbl -> get_coords(This,p)

#define IHTMLAreaElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IHTMLAreaElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IHTMLAreaElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IHTMLAreaElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IHTMLAreaElement_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IHTMLAreaElement_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IHTMLAreaElement_put_noHref(This,v)	\
    (This)->lpVtbl -> put_noHref(This,v)

#define IHTMLAreaElement_get_noHref(This,p)	\
    (This)->lpVtbl -> get_noHref(This,p)

#define IHTMLAreaElement_put_host(This,v)	\
    (This)->lpVtbl -> put_host(This,v)

#define IHTMLAreaElement_get_host(This,p)	\
    (This)->lpVtbl -> get_host(This,p)

#define IHTMLAreaElement_put_hostname(This,v)	\
    (This)->lpVtbl -> put_hostname(This,v)

#define IHTMLAreaElement_get_hostname(This,p)	\
    (This)->lpVtbl -> get_hostname(This,p)

#define IHTMLAreaElement_put_pathname(This,v)	\
    (This)->lpVtbl -> put_pathname(This,v)

#define IHTMLAreaElement_get_pathname(This,p)	\
    (This)->lpVtbl -> get_pathname(This,p)

#define IHTMLAreaElement_put_port(This,v)	\
    (This)->lpVtbl -> put_port(This,v)

#define IHTMLAreaElement_get_port(This,p)	\
    (This)->lpVtbl -> get_port(This,p)

#define IHTMLAreaElement_put_protocol(This,v)	\
    (This)->lpVtbl -> put_protocol(This,v)

#define IHTMLAreaElement_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IHTMLAreaElement_put_search(This,v)	\
    (This)->lpVtbl -> put_search(This,v)

#define IHTMLAreaElement_get_search(This,p)	\
    (This)->lpVtbl -> get_search(This,p)

#define IHTMLAreaElement_put_hash(This,v)	\
    (This)->lpVtbl -> put_hash(This,v)

#define IHTMLAreaElement_get_hash(This,p)	\
    (This)->lpVtbl -> get_hash(This,p)

#define IHTMLAreaElement_put_onblur(This,v)	\
    (This)->lpVtbl -> put_onblur(This,v)

#define IHTMLAreaElement_get_onblur(This,p)	\
    (This)->lpVtbl -> get_onblur(This,p)

#define IHTMLAreaElement_put_onfocus(This,v)	\
    (This)->lpVtbl -> put_onfocus(This,v)

#define IHTMLAreaElement_get_onfocus(This,p)	\
    (This)->lpVtbl -> get_onfocus(This,p)

#define IHTMLAreaElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IHTMLAreaElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IHTMLAreaElement_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IHTMLAreaElement_blur(This)	\
    (This)->lpVtbl -> blur(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_shape_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_shape_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_coords_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_coords_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_href_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_href_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_target_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_target_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_alt_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_alt_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_noHref_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHTMLAreaElement_put_noHref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_noHref_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ VARIANT_BOOL *p);


void __RPC_STUB IHTMLAreaElement_get_noHref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_host_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_host_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_hostname_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_hostname_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_pathname_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_pathname_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_port_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_port_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_protocol_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_protocol_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_search_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_search_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_hash_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLAreaElement_put_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_hash_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLAreaElement_get_hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_onblur_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLAreaElement_put_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_onblur_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLAreaElement_get_onblur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_onfocus_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLAreaElement_put_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_onfocus_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLAreaElement_get_onfocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_put_tabIndex_Proxy( 
    IHTMLAreaElement * This,
    /* [in] */ short v);


void __RPC_STUB IHTMLAreaElement_put_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_get_tabIndex_Proxy( 
    IHTMLAreaElement * This,
    /* [out][retval] */ short *p);


void __RPC_STUB IHTMLAreaElement_get_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_focus_Proxy( 
    IHTMLAreaElement * This);


void __RPC_STUB IHTMLAreaElement_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLAreaElement_blur_Proxy( 
    IHTMLAreaElement * This);


void __RPC_STUB IHTMLAreaElement_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLAreaElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLAreaElement_DISPINTERFACE_DEFINED__
#define __DispHTMLAreaElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLAreaElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f503-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLAreaElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLAreaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLAreaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLAreaElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLAreaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLAreaElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLAreaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLAreaElementVtbl;

    interface DispHTMLAreaElement
    {
        CONST_VTBL struct DispHTMLAreaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLAreaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLAreaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLAreaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLAreaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLAreaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLAreaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLAreaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLAreaElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLAreaElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f283-98b5-11cf-bb82-00aa00bdce0b")
HTMLAreaElement;
#endif

#ifndef __IHTMLTableCaption_INTERFACE_DEFINED__
#define __IHTMLTableCaption_INTERFACE_DEFINED__

/* interface IHTMLTableCaption */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTableCaption;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f2eb-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTableCaption : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTableCaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTableCaption * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTableCaption * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTableCaption * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTableCaption * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTableCaption * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTableCaption * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTableCaption * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLTableCaption * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLTableCaption * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vAlign )( 
            IHTMLTableCaption * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vAlign )( 
            IHTMLTableCaption * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLTableCaptionVtbl;

    interface IHTMLTableCaption
    {
        CONST_VTBL struct IHTMLTableCaptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTableCaption_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTableCaption_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTableCaption_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTableCaption_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTableCaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTableCaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTableCaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTableCaption_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLTableCaption_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLTableCaption_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define IHTMLTableCaption_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTableCaption_put_align_Proxy( 
    IHTMLTableCaption * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTableCaption_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableCaption_get_align_Proxy( 
    IHTMLTableCaption * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTableCaption_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTableCaption_put_vAlign_Proxy( 
    IHTMLTableCaption * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTableCaption_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableCaption_get_vAlign_Proxy( 
    IHTMLTableCaption * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTableCaption_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTableCaption_INTERFACE_DEFINED__ */


#ifndef __DispHTMLTableCaption_DISPINTERFACE_DEFINED__
#define __DispHTMLTableCaption_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLTableCaption */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLTableCaption;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f508-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLTableCaption : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLTableCaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLTableCaption * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLTableCaption * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLTableCaption * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLTableCaption * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLTableCaption * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLTableCaption * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLTableCaption * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLTableCaptionVtbl;

    interface DispHTMLTableCaption
    {
        CONST_VTBL struct DispHTMLTableCaptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLTableCaption_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLTableCaption_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLTableCaption_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLTableCaption_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLTableCaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLTableCaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLTableCaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLTableCaption_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLTableCaption;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f2ec-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableCaption;
#endif

#ifndef __IHTMLCommentElement_INTERFACE_DEFINED__
#define __IHTMLCommentElement_INTERFACE_DEFINED__

/* interface IHTMLCommentElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLCommentElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f20c-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLCommentElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_atomic( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_atomic( 
            /* [out][retval] */ long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLCommentElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLCommentElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLCommentElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLCommentElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLCommentElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLCommentElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLCommentElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLCommentElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IHTMLCommentElement * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IHTMLCommentElement * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_atomic )( 
            IHTMLCommentElement * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_atomic )( 
            IHTMLCommentElement * This,
            /* [out][retval] */ long *p);
        
        END_INTERFACE
    } IHTMLCommentElementVtbl;

    interface IHTMLCommentElement
    {
        CONST_VTBL struct IHTMLCommentElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLCommentElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLCommentElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLCommentElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLCommentElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLCommentElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLCommentElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLCommentElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLCommentElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IHTMLCommentElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IHTMLCommentElement_put_atomic(This,v)	\
    (This)->lpVtbl -> put_atomic(This,v)

#define IHTMLCommentElement_get_atomic(This,p)	\
    (This)->lpVtbl -> get_atomic(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement_put_text_Proxy( 
    IHTMLCommentElement * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLCommentElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement_get_text_Proxy( 
    IHTMLCommentElement * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLCommentElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement_put_atomic_Proxy( 
    IHTMLCommentElement * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLCommentElement_put_atomic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement_get_atomic_Proxy( 
    IHTMLCommentElement * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLCommentElement_get_atomic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLCommentElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLCommentElement2_INTERFACE_DEFINED__
#define __IHTMLCommentElement2_INTERFACE_DEFINED__

/* interface IHTMLCommentElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLCommentElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f813-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLCommentElement2 : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_data( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_data( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE substringData( 
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [out][retval] */ BSTR *pbstrsubString) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE appendData( 
            /* [in] */ BSTR bstrstring) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE insertData( 
            /* [in] */ long offset,
            /* [in] */ BSTR bstrstring) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteData( 
            /* [in] */ long offset,
            /* [in] */ long Count) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE replaceData( 
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [in] */ BSTR bstrstring) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLCommentElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLCommentElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLCommentElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLCommentElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLCommentElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLCommentElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLCommentElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLCommentElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IHTMLCommentElement2 * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IHTMLCommentElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IHTMLCommentElement2 * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IHTMLCommentElement2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [out][retval] */ BSTR *pbstrsubString);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IHTMLCommentElement2 * This,
            /* [in] */ BSTR bstrstring);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IHTMLCommentElement2 * This,
            /* [in] */ long offset,
            /* [in] */ BSTR bstrstring);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IHTMLCommentElement2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IHTMLCommentElement2 * This,
            /* [in] */ long offset,
            /* [in] */ long Count,
            /* [in] */ BSTR bstrstring);
        
        END_INTERFACE
    } IHTMLCommentElement2Vtbl;

    interface IHTMLCommentElement2
    {
        CONST_VTBL struct IHTMLCommentElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLCommentElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLCommentElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLCommentElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLCommentElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLCommentElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLCommentElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLCommentElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLCommentElement2_put_data(This,v)	\
    (This)->lpVtbl -> put_data(This,v)

#define IHTMLCommentElement2_get_data(This,p)	\
    (This)->lpVtbl -> get_data(This,p)

#define IHTMLCommentElement2_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IHTMLCommentElement2_substringData(This,offset,Count,pbstrsubString)	\
    (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString)

#define IHTMLCommentElement2_appendData(This,bstrstring)	\
    (This)->lpVtbl -> appendData(This,bstrstring)

#define IHTMLCommentElement2_insertData(This,offset,bstrstring)	\
    (This)->lpVtbl -> insertData(This,offset,bstrstring)

#define IHTMLCommentElement2_deleteData(This,offset,Count)	\
    (This)->lpVtbl -> deleteData(This,offset,Count)

#define IHTMLCommentElement2_replaceData(This,offset,Count,bstrstring)	\
    (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_put_data_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLCommentElement2_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_get_data_Proxy( 
    IHTMLCommentElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLCommentElement2_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_get_length_Proxy( 
    IHTMLCommentElement2 * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLCommentElement2_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_substringData_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count,
    /* [out][retval] */ BSTR *pbstrsubString);


void __RPC_STUB IHTMLCommentElement2_substringData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_appendData_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLCommentElement2_appendData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_insertData_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ long offset,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLCommentElement2_insertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_deleteData_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count);


void __RPC_STUB IHTMLCommentElement2_deleteData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLCommentElement2_replaceData_Proxy( 
    IHTMLCommentElement2 * This,
    /* [in] */ long offset,
    /* [in] */ long Count,
    /* [in] */ BSTR bstrstring);


void __RPC_STUB IHTMLCommentElement2_replaceData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLCommentElement2_INTERFACE_DEFINED__ */


#ifndef __DispHTMLCommentElement_DISPINTERFACE_DEFINED__
#define __DispHTMLCommentElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLCommentElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLCommentElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f50a-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLCommentElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLCommentElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLCommentElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLCommentElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLCommentElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLCommentElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLCommentElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLCommentElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLCommentElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLCommentElementVtbl;

    interface DispHTMLCommentElement
    {
        CONST_VTBL struct DispHTMLCommentElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLCommentElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLCommentElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLCommentElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLCommentElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLCommentElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLCommentElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLCommentElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLCommentElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLCommentElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f317-98b5-11cf-bb82-00aa00bdce0b")
HTMLCommentElement;
#endif

#ifndef __IHTMLPhraseElement_INTERFACE_DEFINED__
#define __IHTMLPhraseElement_INTERFACE_DEFINED__

/* interface IHTMLPhraseElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLPhraseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f20a-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLPhraseElement : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTMLPhraseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLPhraseElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLPhraseElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLPhraseElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLPhraseElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLPhraseElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLPhraseElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLPhraseElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTMLPhraseElementVtbl;

    interface IHTMLPhraseElement
    {
        CONST_VTBL struct IHTMLPhraseElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLPhraseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLPhraseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLPhraseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLPhraseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLPhraseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLPhraseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLPhraseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLPhraseElement_INTERFACE_DEFINED__ */


#ifndef __IHTMLPhraseElement2_INTERFACE_DEFINED__
#define __IHTMLPhraseElement2_INTERFACE_DEFINED__

/* interface IHTMLPhraseElement2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLPhraseElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f824-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLPhraseElement2 : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_cite( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_cite( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dateTime( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dateTime( 
            /* [out][retval] */ BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLPhraseElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLPhraseElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLPhraseElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLPhraseElement2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cite )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cite )( 
            IHTMLPhraseElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dateTime )( 
            IHTMLPhraseElement2 * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dateTime )( 
            IHTMLPhraseElement2 * This,
            /* [out][retval] */ BSTR *p);
        
        END_INTERFACE
    } IHTMLPhraseElement2Vtbl;

    interface IHTMLPhraseElement2
    {
        CONST_VTBL struct IHTMLPhraseElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLPhraseElement2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLPhraseElement2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLPhraseElement2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLPhraseElement2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLPhraseElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLPhraseElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLPhraseElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLPhraseElement2_put_cite(This,v)	\
    (This)->lpVtbl -> put_cite(This,v)

#define IHTMLPhraseElement2_get_cite(This,p)	\
    (This)->lpVtbl -> get_cite(This,p)

#define IHTMLPhraseElement2_put_dateTime(This,v)	\
    (This)->lpVtbl -> put_dateTime(This,v)

#define IHTMLPhraseElement2_get_dateTime(This,p)	\
    (This)->lpVtbl -> get_dateTime(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLPhraseElement2_put_cite_Proxy( 
    IHTMLPhraseElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLPhraseElement2_put_cite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLPhraseElement2_get_cite_Proxy( 
    IHTMLPhraseElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLPhraseElement2_get_cite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLPhraseElement2_put_dateTime_Proxy( 
    IHTMLPhraseElement2 * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLPhraseElement2_put_dateTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLPhraseElement2_get_dateTime_Proxy( 
    IHTMLPhraseElement2 * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLPhraseElement2_get_dateTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLPhraseElement2_INTERFACE_DEFINED__ */


#ifndef __IHTMLSpanElement_INTERFACE_DEFINED__
#define __IHTMLSpanElement_INTERFACE_DEFINED__

/* interface IHTMLSpanElement */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLSpanElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f3f3-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLSpanElement : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHTMLSpanElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLSpanElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLSpanElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLSpanElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLSpanElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLSpanElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLSpanElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLSpanElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IHTMLSpanElementVtbl;

    interface IHTMLSpanElement
    {
        CONST_VTBL struct IHTMLSpanElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLSpanElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLSpanElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLSpanElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLSpanElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLSpanElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLSpanElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLSpanElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLSpanElement_INTERFACE_DEFINED__ */


#ifndef __DispHTMLPhraseElement_DISPINTERFACE_DEFINED__
#define __DispHTMLPhraseElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLPhraseElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLPhraseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f52d-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLPhraseElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLPhraseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLPhraseElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLPhraseElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLPhraseElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLPhraseElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLPhraseElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLPhraseElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLPhraseElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLPhraseElementVtbl;

    interface DispHTMLPhraseElement
    {
        CONST_VTBL struct DispHTMLPhraseElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLPhraseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLPhraseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLPhraseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLPhraseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLPhraseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLPhraseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLPhraseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLPhraseElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLPhraseElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f26e-98b5-11cf-bb82-00aa00bdce0b")
HTMLPhraseElement;
#endif

#ifndef __DispHTMLSpanElement_DISPINTERFACE_DEFINED__
#define __DispHTMLSpanElement_DISPINTERFACE_DEFINED__

/* dispinterface DispHTMLSpanElement */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_DispHTMLSpanElement;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f548-98b5-11cf-bb82-00aa00bdce0b")
    DispHTMLSpanElement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DispHTMLSpanElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DispHTMLSpanElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DispHTMLSpanElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DispHTMLSpanElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DispHTMLSpanElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DispHTMLSpanElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DispHTMLSpanElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DispHTMLSpanElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DispHTMLSpanElementVtbl;

    interface DispHTMLSpanElement
    {
        CONST_VTBL struct DispHTMLSpanElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DispHTMLSpanElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DispHTMLSpanElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DispHTMLSpanElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DispHTMLSpanElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DispHTMLSpanElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DispHTMLSpanElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DispHTMLSpanElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DispHTMLSpanElement_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLSpanElement;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f3f5-98b4-11cf-bb82-00aa00bdce0b")
HTMLSpanElement;
#endif

#ifndef __HTMLTableEvents2_DISPINTERFACE_DEFINED__
#define __HTMLTableEvents2_DISPINTERFACE_DEFINED__

/* dispinterface HTMLTableEvents2 */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLTableEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f623-98b5-11cf-bb82-00aa00bdce0b")
    HTMLTableEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLTableEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLTableEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLTableEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLTableEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLTableEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLTableEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLTableEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLTableEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLTableEvents2Vtbl;

    interface HTMLTableEvents2
    {
        CONST_VTBL struct HTMLTableEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLTableEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLTableEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLTableEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLTableEvents2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLTableEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLTableEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLTableEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLTableEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __HTMLTableEvents_DISPINTERFACE_DEFINED__
#define __HTMLTableEvents_DISPINTERFACE_DEFINED__

/* dispinterface HTMLTableEvents */
/* [uuid][hidden] */ 


EXTERN_C const IID DIID_HTMLTableEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3050f407-98b5-11cf-bb82-00aa00bdce0b")
    HTMLTableEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLTableEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLTableEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLTableEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLTableEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLTableEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLTableEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLTableEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLTableEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } HTMLTableEventsVtbl;

    interface HTMLTableEvents
    {
        CONST_VTBL struct HTMLTableEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLTableEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLTableEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLTableEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLTableEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLTableEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLTableEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLTableEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLTableEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLTableSection_INTERFACE_DEFINED__
#define __IHTMLTableSection_INTERFACE_DEFINED__

/* interface IHTMLTableSection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTableSection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f23b-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTableSection : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE insertRow( 
            /* [in][defaultvalue] */ long index,
            /* [out][retval] */ IDispatch **row) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteRow( 
            /* [in][defaultvalue] */ long index = -1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTableSectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTableSection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTableSection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTableSection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTableSection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTableSection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTableSection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTableSection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLTableSection * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLTableSection * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_vAlign )( 
            IHTMLTableSection * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_vAlign )( 
            IHTMLTableSection * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgColor )( 
            IHTMLTableSection * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgColor )( 
            IHTMLTableSection * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rows )( 
            IHTMLTableSection * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *insertRow )( 
            IHTMLTableSection * This,
            /* [in][defaultvalue] */ long index,
            /* [out][retval] */ IDispatch **row);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteRow )( 
            IHTMLTableSection * This,
            /* [in][defaultvalue] */ long index);
        
        END_INTERFACE
    } IHTMLTableSectionVtbl;

    interface IHTMLTableSection
    {
        CONST_VTBL struct IHTMLTableSectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTableSection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTableSection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTableSection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTableSection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTableSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTableSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTableSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTableSection_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLTableSection_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLTableSection_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define IHTMLTableSection_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#define IHTMLTableSection_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IHTMLTableSection_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IHTMLTableSection_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#define IHTMLTableSection_insertRow(This,index,row)	\
    (This)->lpVtbl -> insertRow(This,index,row)

#define IHTMLTableSection_deleteRow(This,index)	\
    (This)->lpVtbl -> deleteRow(This,index)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_put_align_Proxy( 
    IHTMLTableSection * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTableSection_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_get_align_Proxy( 
    IHTMLTableSection * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTableSection_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_put_vAlign_Proxy( 
    IHTMLTableSection * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTableSection_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_get_vAlign_Proxy( 
    IHTMLTableSection * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTableSection_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_put_bgColor_Proxy( 
    IHTMLTableSection * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTableSection_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_get_bgColor_Proxy( 
    IHTMLTableSection * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTableSection_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_get_rows_Proxy( 
    IHTMLTableSection * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLTableSection_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_insertRow_Proxy( 
    IHTMLTableSection * This,
    /* [in][defaultvalue] */ long index,
    /* [out][retval] */ IDispatch **row);


void __RPC_STUB IHTMLTableSection_insertRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTableSection_deleteRow_Proxy( 
    IHTMLTableSection * This,
    /* [in][defaultvalue] */ long index);


void __RPC_STUB IHTMLTableSection_deleteRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTableSection_INTERFACE_DEFINED__ */


#ifndef __IHTMLTable_INTERFACE_DEFINED__
#define __IHTMLTable_INTERFACE_DEFINED__

/* interface IHTMLTable */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f21e-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTable : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cols( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cols( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_border( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frame( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frame( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_rules( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rules( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cellSpacing( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cellSpacing( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cellPadding( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cellPadding( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_background( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_background( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColor( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColor( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorLight( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorLight( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorDark( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorDark( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE refresh( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ VARIANT *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dataPageSize( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dataPageSize( 
            /* [out][retval] */ long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE nextPage( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE previousPage( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tHead( 
            /* [out][retval] */ IHTMLTableSection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tFoot( 
            /* [out][retval] */ IHTMLTableSection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tBodies( 
            /* [out][retval] */ IHTMLElementCollection **p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_caption( 
            /* [out][retval] */ IHTMLTableCaption **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTHead( 
            /* [out][retval] */ IDispatch **head) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteTHead( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTFoot( 
            /* [out][retval] */ IDispatch **foot) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteTFoot( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createCaption( 
            /* [out][retval] */ IHTMLTableCaption **caption) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteCaption( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE insertRow( 
            /* [in][defaultvalue] */ long index,
            /* [out][retval] */ IDispatch **row) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deleteRow( 
            /* [in][defaultvalue] */ long index = -1) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ BSTR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreadystatechange( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onreadystatechange( 
            /* [out][retval] */ VARIANT *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLTable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLTable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLTable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLTable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLTable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLTable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cols )( 
            IHTMLTable * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cols )( 
            IHTMLTable * This,
            /* [out][retval] */ long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_border )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_border )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frame )( 
            IHTMLTable * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frame )( 
            IHTMLTable * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_rules )( 
            IHTMLTable * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rules )( 
            IHTMLTable * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cellSpacing )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cellSpacing )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_cellPadding )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cellPadding )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_background )( 
            IHTMLTable * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_background )( 
            IHTMLTable * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_bgColor )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bgColor )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_borderColor )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_borderColor )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_borderColorLight )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_borderColorLight )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_borderColorDark )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_borderColorDark )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_align )( 
            IHTMLTable * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_align )( 
            IHTMLTable * This,
            /* [out][retval] */ BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *refresh )( 
            IHTMLTable * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rows )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_width )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_height )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataPageSize )( 
            IHTMLTable * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataPageSize )( 
            IHTMLTable * This,
            /* [out][retval] */ long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextPage )( 
            IHTMLTable * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *previousPage )( 
            IHTMLTable * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tHead )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLTableSection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tFoot )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLTableSection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tBodies )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLElementCollection **p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_caption )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLTableCaption **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTHead )( 
            IHTMLTable * This,
            /* [out][retval] */ IDispatch **head);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteTHead )( 
            IHTMLTable * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createTFoot )( 
            IHTMLTable * This,
            /* [out][retval] */ IDispatch **foot);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteTFoot )( 
            IHTMLTable * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *createCaption )( 
            IHTMLTable * This,
            /* [out][retval] */ IHTMLTableCaption **caption);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteCaption )( 
            IHTMLTable * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *insertRow )( 
            IHTMLTable * This,
            /* [in][defaultvalue] */ long index,
            /* [out][retval] */ IDispatch **row);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deleteRow )( 
            IHTMLTable * This,
            /* [in][defaultvalue] */ long index);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IHTMLTable * This,
            /* [out][retval] */ BSTR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IHTMLTable * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )( 
            IHTMLTable * This,
            /* [out][retval] */ VARIANT *p);
        
        END_INTERFACE
    } IHTMLTableVtbl;

    interface IHTMLTable
    {
        CONST_VTBL struct IHTMLTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLTable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLTable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLTable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLTable_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLTable_put_cols(This,v)	\
    (This)->lpVtbl -> put_cols(This,v)

#define IHTMLTable_get_cols(This,p)	\
    (This)->lpVtbl -> get_cols(This,p)

#define IHTMLTable_put_border(This,v)	\
    (This)->lpVtbl -> put_border(This,v)

#define IHTMLTable_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IHTMLTable_put_frame(This,v)	\
    (This)->lpVtbl -> put_frame(This,v)

#define IHTMLTable_get_frame(This,p)	\
    (This)->lpVtbl -> get_frame(This,p)

#define IHTMLTable_put_rules(This,v)	\
    (This)->lpVtbl -> put_rules(This,v)

#define IHTMLTable_get_rules(This,p)	\
    (This)->lpVtbl -> get_rules(This,p)

#define IHTMLTable_put_cellSpacing(This,v)	\
    (This)->lpVtbl -> put_cellSpacing(This,v)

#define IHTMLTable_get_cellSpacing(This,p)	\
    (This)->lpVtbl -> get_cellSpacing(This,p)

#define IHTMLTable_put_cellPadding(This,v)	\
    (This)->lpVtbl -> put_cellPadding(This,v)

#define IHTMLTable_get_cellPadding(This,p)	\
    (This)->lpVtbl -> get_cellPadding(This,p)

#define IHTMLTable_put_background(This,v)	\
    (This)->lpVtbl -> put_background(This,v)

#define IHTMLTable_get_background(This,p)	\
    (This)->lpVtbl -> get_background(This,p)

#define IHTMLTable_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IHTMLTable_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IHTMLTable_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define IHTMLTable_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define IHTMLTable_put_borderColorLight(This,v)	\
    (This)->lpVtbl -> put_borderColorLight(This,v)

#define IHTMLTable_get_borderColorLight(This,p)	\
    (This)->lpVtbl -> get_borderColorLight(This,p)

#define IHTMLTable_put_borderColorDark(This,v)	\
    (This)->lpVtbl -> put_borderColorDark(This,v)

#define IHTMLTable_get_borderColorDark(This,p)	\
    (This)->lpVtbl -> get_borderColorDark(This,p)

#define IHTMLTable_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHTMLTable_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHTMLTable_refresh(This)	\
    (This)->lpVtbl -> refresh(This)

#define IHTMLTable_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#define IHTMLTable_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLTable_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLTable_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLTable_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLTable_put_dataPageSize(This,v)	\
    (This)->lpVtbl -> put_dataPageSize(This,v)

#define IHTMLTable_get_dataPageSize(This,p)	\
    (This)->lpVtbl -> get_dataPageSize(This,p)

#define IHTMLTable_nextPage(This)	\
    (This)->lpVtbl -> nextPage(This)

#define IHTMLTable_previousPage(This)	\
    (This)->lpVtbl -> previousPage(This)

#define IHTMLTable_get_tHead(This,p)	\
    (This)->lpVtbl -> get_tHead(This,p)

#define IHTMLTable_get_tFoot(This,p)	\
    (This)->lpVtbl -> get_tFoot(This,p)

#define IHTMLTable_get_tBodies(This,p)	\
    (This)->lpVtbl -> get_tBodies(This,p)

#define IHTMLTable_get_caption(This,p)	\
    (This)->lpVtbl -> get_caption(This,p)

#define IHTMLTable_createTHead(This,head)	\
    (This)->lpVtbl -> createTHead(This,head)

#define IHTMLTable_deleteTHead(This)	\
    (This)->lpVtbl -> deleteTHead(This)

#define IHTMLTable_createTFoot(This,foot)	\
    (This)->lpVtbl -> createTFoot(This,foot)

#define IHTMLTable_deleteTFoot(This)	\
    (This)->lpVtbl -> deleteTFoot(This)

#define IHTMLTable_createCaption(This,caption)	\
    (This)->lpVtbl -> createCaption(This,caption)

#define IHTMLTable_deleteCaption(This)	\
    (This)->lpVtbl -> deleteCaption(This)

#define IHTMLTable_insertRow(This,index,row)	\
    (This)->lpVtbl -> insertRow(This,index,row)

#define IHTMLTable_deleteRow(This,index)	\
    (This)->lpVtbl -> deleteRow(This,index)

#define IHTMLTable_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IHTMLTable_put_onreadystatechange(This,v)	\
    (This)->lpVtbl -> put_onreadystatechange(This,v)

#define IHTMLTable_get_onreadystatechange(This,p)	\
    (This)->lpVtbl -> get_onreadystatechange(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_cols_Proxy( 
    IHTMLTable * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTable_put_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_cols_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTable_get_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_border_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_border_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_frame_Proxy( 
    IHTMLTable * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTable_put_frame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_frame_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTable_get_frame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_rules_Proxy( 
    IHTMLTable * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTable_put_rules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_rules_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTable_get_rules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_cellSpacing_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_cellSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_cellSpacing_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_cellSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_cellPadding_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_cellPadding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_cellPadding_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_cellPadding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_background_Proxy( 
    IHTMLTable * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTable_put_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_background_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTable_get_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_bgColor_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_bgColor_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_borderColor_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_borderColor_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_borderColorLight_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_borderColorLight_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_borderColorDark_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_borderColorDark_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_align_Proxy( 
    IHTMLTable * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHTMLTable_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_align_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTable_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_refresh_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_rows_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLTable_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_width_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_width_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_height_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_height_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_dataPageSize_Proxy( 
    IHTMLTable * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLTable_put_dataPageSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_dataPageSize_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ long *p);


void __RPC_STUB IHTMLTable_get_dataPageSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_nextPage_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_nextPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_previousPage_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_previousPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_tHead_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLTableSection **p);


void __RPC_STUB IHTMLTable_get_tHead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_tFoot_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLTableSection **p);


void __RPC_STUB IHTMLTable_get_tFoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_tBodies_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLElementCollection **p);


void __RPC_STUB IHTMLTable_get_tBodies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_caption_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLTableCaption **p);


void __RPC_STUB IHTMLTable_get_caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_createTHead_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IDispatch **head);


void __RPC_STUB IHTMLTable_createTHead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_deleteTHead_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_deleteTHead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_createTFoot_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IDispatch **foot);


void __RPC_STUB IHTMLTable_createTFoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_deleteTFoot_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_deleteTFoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_createCaption_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ IHTMLTableCaption **caption);


void __RPC_STUB IHTMLTable_createCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_deleteCaption_Proxy( 
    IHTMLTable * This);


void __RPC_STUB IHTMLTable_deleteCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_insertRow_Proxy( 
    IHTMLTable * This,
    /* [in][defaultvalue] */ long index,
    /* [out][retval] */ IDispatch **row);


void __RPC_STUB IHTMLTable_insertRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLTable_deleteRow_Proxy( 
    IHTMLTable * This,
    /* [in][defaultvalue] */ long index);


void __RPC_STUB IHTMLTable_deleteRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_readyState_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ BSTR *p);


void __RPC_STUB IHTMLTable_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLTable_put_onreadystatechange_Proxy( 
    IHTMLTable * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IHTMLTable_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLTable_get_onreadystatechange_Proxy( 
    IHTMLTable * This,
    /* [out][retval] */ VARIANT *p);


void __RPC_STUB IHTMLTable_get_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLTable_INTERFACE_DEFINED__ */


#ifndef __IHTMLTable2_INTERFACE_DEFINED__
#define __IHTMLTable2_INTERFACE_DEFINED__

/* interface IHTMLTable2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLTable2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4ad-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLTable2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE firstPage( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE lastPage( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cells( 
            /* [out][r