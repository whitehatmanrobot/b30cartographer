SULT STDMETHODCALLTYPE put_EraserMode( 
            /* [in] */ InkOverlayEraserMode EraserMode) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EraserWidth( 
            /* [retval][out] */ __RPC__out long *EraserWidth) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EraserWidth( 
            /* [in] */ long newEraserWidth) = 0;
        
        virtual /* [helpcontext][helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Picture( 
            /* [in] */ __RPC__in_opt IPictureDisp *pPicture) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Picture( 
            /* [in] */ __RPC__in_opt IPictureDisp *pPicture) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Picture( 
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **ppPicture) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SizeMode( 
            /* [in] */ InkPictureSizeMode smNewSizeMode) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SizeMode( 
            /* [retval][out] */ __RPC__out InkPictureSizeMode *smSizeMode) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ OLE_COLOR newColor) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ __RPC__out OLE_COLOR *pColor) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cursors( 
            /* [retval][out] */ __RPC__deref_out_opt IInkCursors **Cursors) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MarginX( 
            /* [retval][out] */ __RPC__out long *MarginX) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_MarginX( 
            /* [in] */ long MarginX) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MarginY( 
            /* [retval][out] */ __RPC__out long *MarginY) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_MarginY( 
            /* [in] */ long MarginY) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tablet( 
            /* [retval][out] */ __RPC__deref_out_opt IInkTablet **SingleTablet) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupportHighContrastInk( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Support) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SupportHighContrastInk( 
            /* [in] */ VARIANT_BOOL Support) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupportHighContrastSelectionUI( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Support) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SupportHighContrastSelectionUI( 
            /* [in] */ VARIANT_BOOL Support) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE HitTestSelection( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ __RPC__out SelectionHitResult *SelArea) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGestureStatus( 
            /* [in] */ InkApplicationGesture Gesture,
            /* [in] */ VARIANT_BOOL Listen) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGestureStatus( 
            /* [in] */ InkApplicationGesture Gesture,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Listening) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetWindowInputRectangle( 
            /* [out][in] */ __RPC__deref_inout_opt IInkRectangle **WindowInputRectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetWindowInputRectangle( 
            /* [in] */ __RPC__in_opt IInkRectangle *WindowInputRectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetAllTabletsMode( 
            /* [defaultvalue][in] */ VARIANT_BOOL UseMouseForInput = -1) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSingleTabletIntegratedMode( 
            /* [in] */ __RPC__in_opt IInkTablet *Tablet) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetEventInterest( 
            /* [in] */ InkCollectorEventInterest EventId,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Listen) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetEventInterest( 
            /* [in] */ InkCollectorEventInterest EventId,
            /* [in] */ VARIANT_BOOL Listen) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_InkEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Collecting) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_InkEnabled( 
            /* [in] */ VARIANT_BOOL Collecting) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL vbool) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkPictureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkPicture * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkPicture * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkPicture * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkPicture * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkPicture * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hWnd )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out LONG_PTR *CurrentWindow);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultDrawingAttributes )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkDrawingAttributes **CurrentAttributes);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_DefaultDrawingAttributes )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkDrawingAttributes *NewAttributes);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Renderer )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRenderer **CurrentInkRenderer);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Renderer )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkRenderer *NewInkRenderer);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Ink )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkDisp **Ink);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Ink )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkDisp *NewInk);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRedraw )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *AutoRedraw);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRedraw )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL AutoRedraw);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CollectingInk )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Collecting);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CollectionMode )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out InkCollectionMode *Mode);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CollectionMode )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkCollectionMode Mode);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DynamicRendering )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Enabled);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DynamicRendering )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL Enabled);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesiredPacketDescription )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT *PacketGuids);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DesiredPacketDescription )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT PacketGuids);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MouseIcon )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **MouseIcon);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MouseIcon )( 
            __RPC__in IInkPicture * This,
            /* [unique][in] */ __RPC__in_opt IPictureDisp *MouseIcon);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_MouseIcon )( 
            __RPC__in IInkPicture * This,
            /* [unique][in] */ __RPC__in_opt IPictureDisp *MouseIcon);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePointer )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out InkMousePointer *MousePointer);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MousePointer )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkMousePointer MousePointer);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EditingMode )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out InkOverlayEditingMode *EditingMode);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EditingMode )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkOverlayEditingMode EditingMode);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Selection);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Selection )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkStrokes *Selection);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EraserMode )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out InkOverlayEraserMode *EraserMode);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EraserMode )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkOverlayEraserMode EraserMode);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EraserWidth )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out long *EraserWidth);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EraserWidth )( 
            __RPC__in IInkPicture * This,
            /* [in] */ long newEraserWidth);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Picture )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IPictureDisp *pPicture);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Picture )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IPictureDisp *pPicture);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Picture )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IPictureDisp **ppPicture);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SizeMode )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkPictureSizeMode smNewSizeMode);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeMode )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out InkPictureSizeMode *smSizeMode);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackColor )( 
            __RPC__in IInkPicture * This,
            /* [in] */ OLE_COLOR newColor);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out OLE_COLOR *pColor);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cursors )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkCursors **Cursors);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MarginX )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out long *MarginX);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MarginX )( 
            __RPC__in IInkPicture * This,
            /* [in] */ long MarginX);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MarginY )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out long *MarginY);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MarginY )( 
            __RPC__in IInkPicture * This,
            /* [in] */ long MarginY);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tablet )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkTablet **SingleTablet);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportHighContrastInk )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Support);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SupportHighContrastInk )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL Support);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportHighContrastSelectionUI )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Support);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SupportHighContrastSelectionUI )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL Support);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *HitTestSelection )( 
            __RPC__in IInkPicture * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ __RPC__out SelectionHitResult *SelArea);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGestureStatus )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkApplicationGesture Gesture,
            /* [in] */ VARIANT_BOOL Listen);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGestureStatus )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkApplicationGesture Gesture,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Listening);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWindowInputRectangle )( 
            __RPC__in IInkPicture * This,
            /* [out][in] */ __RPC__deref_inout_opt IInkRectangle **WindowInputRectangle);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWindowInputRectangle )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkRectangle *WindowInputRectangle);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetAllTabletsMode )( 
            __RPC__in IInkPicture * This,
            /* [defaultvalue][in] */ VARIANT_BOOL UseMouseForInput);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSingleTabletIntegratedMode )( 
            __RPC__in IInkPicture * This,
            /* [in] */ __RPC__in_opt IInkTablet *Tablet);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetEventInterest )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkCollectorEventInterest EventId,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Listen);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetEventInterest )( 
            __RPC__in IInkPicture * This,
            /* [in] */ InkCollectorEventInterest EventId,
            /* [in] */ VARIANT_BOOL Listen);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InkEnabled )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Collecting);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InkEnabled )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL Collecting);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            __RPC__in IInkPicture * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            __RPC__in IInkPicture * This,
            /* [in] */ VARIANT_BOOL vbool);
        
        END_INTERFACE
    } IInkPictureVtbl;

    interface IInkPicture
    {
        CONST_VTBL struct IInkPictureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkPicture_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkPicture_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkPicture_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkPicture_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkPicture_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkPicture_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkPicture_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkPicture_get_hWnd(This,CurrentWindow)	\
    ( (This)->lpVtbl -> get_hWnd(This,CurrentWindow) ) 

#define IInkPicture_get_DefaultDrawingAttributes(This,CurrentAttributes)	\
    ( (This)->lpVtbl -> get_DefaultDrawingAttributes(This,CurrentAttributes) ) 

#define IInkPicture_putref_DefaultDrawingAttributes(This,NewAttributes)	\
    ( (This)->lpVtbl -> putref_DefaultDrawingAttributes(This,NewAttributes) ) 

#define IInkPicture_get_Renderer(This,CurrentInkRenderer)	\
    ( (This)->lpVtbl -> get_Renderer(This,CurrentInkRenderer) ) 

#define IInkPicture_putref_Renderer(This,NewInkRenderer)	\
    ( (This)->lpVtbl -> putref_Renderer(This,NewInkRenderer) ) 

#define IInkPicture_get_Ink(This,Ink)	\
    ( (This)->lpVtbl -> get_Ink(This,Ink) ) 

#define IInkPicture_putref_Ink(This,NewInk)	\
    ( (This)->lpVtbl -> putref_Ink(This,NewInk) ) 

#define IInkPicture_get_AutoRedraw(This,AutoRedraw)	\
    ( (This)->lpVtbl -> get_AutoRedraw(This,AutoRedraw) ) 

#define IInkPicture_put_AutoRedraw(This,AutoRedraw)	\
    ( (This)->lpVtbl -> put_AutoRedraw(This,AutoRedraw) ) 

#define IInkPicture_get_CollectingInk(This,Collecting)	\
    ( (This)->lpVtbl -> get_CollectingInk(This,Collecting) ) 

#define IInkPicture_get_CollectionMode(This,Mode)	\
    ( (This)->lpVtbl -> get_CollectionMode(This,Mode) ) 

#define IInkPicture_put_CollectionMode(This,Mode)	\
    ( (This)->lpVtbl -> put_CollectionMode(This,Mode) ) 

#define IInkPicture_get_DynamicRendering(This,Enabled)	\
    ( (This)->lpVtbl -> get_DynamicRendering(This,Enabled) ) 

#define IInkPicture_put_DynamicRendering(This,Enabled)	\
    ( (This)->lpVtbl -> put_DynamicRendering(This,Enabled) ) 

#define IInkPicture_get_DesiredPacketDescription(This,PacketGuids)	\
    ( (This)->lpVtbl -> get_DesiredPacketDescription(This,PacketGuids) ) 

#define IInkPicture_put_DesiredPacketDescription(This,PacketGuids)	\
    ( (This)->lpVtbl -> put_DesiredPacketDescription(This,PacketGuids) ) 

#define IInkPicture_get_MouseIcon(This,MouseIcon)	\
    ( (This)->lpVtbl -> get_MouseIcon(This,MouseIcon) ) 

#define IInkPicture_put_MouseIcon(This,MouseIcon)	\
    ( (This)->lpVtbl -> put_MouseIcon(This,MouseIcon) ) 

#define IInkPicture_putref_MouseIcon(This,MouseIcon)	\
    ( (This)->lpVtbl -> putref_MouseIcon(This,MouseIcon) ) 

#define IInkPicture_get_MousePointer(This,MousePointer)	\
    ( (This)->lpVtbl -> get_MousePointer(This,MousePointer) ) 

#define IInkPicture_put_MousePointer(This,MousePointer)	\
    ( (This)->lpVtbl -> put_MousePointer(This,MousePointer) ) 

#define IInkPicture_get_EditingMode(This,EditingMode)	\
    ( (This)->lpVtbl -> get_EditingMode(This,EditingMode) ) 

#define IInkPicture_put_EditingMode(This,EditingMode)	\
    ( (This)->lpVtbl -> put_EditingMode(This,EditingMode) ) 

#define IInkPicture_get_Selection(This,Selection)	\
    ( (This)->lpVtbl -> get_Selection(This,Selection) ) 

#define IInkPicture_put_Selection(This,Selection)	\
    ( (This)->lpVtbl -> put_Selection(This,Selection) ) 

#define IInkPicture_get_EraserMode(This,EraserMode)	\
    ( (This)->lpVtbl -> get_EraserMode(This,EraserMode) ) 

#define IInkPicture_put_EraserMode(This,EraserMode)	\
    ( (This)->lpVtbl -> put_EraserMode(This,EraserMode) ) 

#define IInkPicture_get_EraserWidth(This,EraserWidth)	\
    ( (This)->lpVtbl -> get_EraserWidth(This,EraserWidth) ) 

#define IInkPicture_put_EraserWidth(This,newEraserWidth)	\
    ( (This)->lpVtbl -> put_EraserWidth(This,newEraserWidth) ) 

#define IInkPicture_putref_Picture(This,pPicture)	\
    ( (This)->lpVtbl -> putref_Picture(This,pPicture) ) 

#define IInkPicture_put_Picture(This,pPicture)	\
    ( (This)->lpVtbl -> put_Picture(This,pPicture) ) 

#define IInkPicture_get_Picture(This,ppPicture)	\
    ( (This)->lpVtbl -> get_Picture(This,ppPicture) ) 

#define IInkPicture_put_SizeMode(This,smNewSizeMode)	\
    ( (This)->lpVtbl -> put_SizeMode(This,smNewSizeMode) ) 

#define IInkPicture_get_SizeMode(This,smSizeMode)	\
    ( (This)->lpVtbl -> get_SizeMode(This,smSizeMode) ) 

#define IInkPicture_put_BackColor(This,newColor)	\
    ( (This)->lpVtbl -> put_BackColor(This,newColor) ) 

#define IInkPicture_get_BackColor(This,pColor)	\
    ( (This)->lpVtbl -> get_BackColor(This,pColor) ) 

#define IInkPicture_get_Cursors(This,Cursors)	\
    ( (This)->lpVtbl -> get_Cursors(This,Cursors) ) 

#define IInkPicture_get_MarginX(This,MarginX)	\
    ( (This)->lpVtbl -> get_MarginX(This,MarginX) ) 

#define IInkPicture_put_MarginX(This,MarginX)	\
    ( (This)->lpVtbl -> put_MarginX(This,MarginX) ) 

#define IInkPicture_get_MarginY(This,MarginY)	\
    ( (This)->lpVtbl -> get_MarginY(This,MarginY) ) 

#define IInkPicture_put_MarginY(This,MarginY)	\
    ( (This)->lpVtbl -> put_MarginY(This,MarginY) ) 

#define IInkPicture_get_Tablet(This,SingleTablet)	\
    ( (This)->lpVtbl -> get_Tablet(This,SingleTablet) ) 

#define IInkPicture_get_SupportHighContrastInk(This,Support)	\
    ( (This)->lpVtbl -> get_SupportHighContrastInk(This,Support) ) 

#define IInkPicture_put_SupportHighContrastInk(This,Support)	\
    ( (This)->lpVtbl -> put_SupportHighContrastInk(This,Support) ) 

#define IInkPicture_get_SupportHighContrastSelectionUI(This,Support)	\
    ( (This)->lpVtbl -> get_SupportHighContrastSelectionUI(This,Support) ) 

#define IInkPicture_put_SupportHighContrastSelectionUI(This,Support)	\
    ( (This)->lpVtbl -> put_SupportHighContrastSelectionUI(This,Support) ) 

#define IInkPicture_HitTestSelection(This,x,y,SelArea)	\
    ( (This)->lpVtbl -> HitTestSelection(This,x,y,SelArea) ) 

#define IInkPicture_SetGestureStatus(This,Gesture,Listen)	\
    ( (This)->lpVtbl -> SetGestureStatus(This,Gesture,Listen) ) 

#define IInkPicture_GetGestureStatus(This,Gesture,Listening)	\
    ( (This)->lpVtbl -> GetGestureStatus(This,Gesture,Listening) ) 

#define IInkPicture_GetWindowInputRectangle(This,WindowInputRectangle)	\
    ( (This)->lpVtbl -> GetWindowInputRectangle(This,WindowInputRectangle) ) 

#define IInkPicture_SetWindowInputRectangle(This,WindowInputRectangle)	\
    ( (This)->lpVtbl -> SetWindowInputRectangle(This,WindowInputRectangle) ) 

#define IInkPicture_SetAllTabletsMode(This,UseMouseForInput)	\
    ( (This)->lpVtbl -> SetAllTabletsMode(This,UseMouseForInput) ) 

#define IInkPicture_SetSingleTabletIntegratedMode(This,Tablet)	\
    ( (This)->lpVtbl -> SetSingleTabletIntegratedMode(This,Tablet) ) 

#define IInkPicture_GetEventInterest(This,EventId,Listen)	\
    ( (This)->lpVtbl -> GetEventInterest(This,EventId,Listen) ) 

#define IInkPicture_SetEventInterest(This,EventId,Listen)	\
    ( (This)->lpVtbl -> SetEventInterest(This,EventId,Listen) ) 

#define IInkPicture_get_InkEnabled(This,Collecting)	\
    ( (This)->lpVtbl -> get_InkEnabled(This,Collecting) ) 

#define IInkPicture_put_InkEnabled(This,Collecting)	\
    ( (This)->lpVtbl -> put_InkEnabled(This,Collecting) ) 

#define IInkPicture_get_Enabled(This,pbool)	\
    ( (This)->lpVtbl -> get_Enabled(This,pbool) ) 

#define IInkPicture_put_Enabled(This,vbool)	\
    ( (This)->lpVtbl -> put_Enabled(This,vbool) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkPicture_INTERFACE_DEFINED__ */


#ifndef ___IInkPictureEvents_DISPINTERFACE_DEFINED__
#define ___IInkPictureEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IInkPictureEvents */
/* [helpcontext][helpstring][uuid] */ 


EXTERN_C const IID DIID__IInkPictureEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("60ff4fee-22ff-4484-acc1-d308d9cd7ea3")
    _IInkPictureEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IInkPictureEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in _IInkPictureEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in _IInkPictureEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in _IInkPictureEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in _IInkPictureEvents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in _IInkPictureEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in _IInkPictureEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IInkPictureEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IInkPictureEventsVtbl;

    interface _IInkPictureEvents
    {
        CONST_VTBL struct _IInkPictureEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IInkPictureEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IInkPictureEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IInkPictureEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IInkPictureEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IInkPictureEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IInkPictureEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IInkPictureEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IInkPictureEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IInkRecognizer_INTERFACE_DEFINED__
#define __IInkRecognizer_INTERFACE_DEFINED__

/* interface IInkRecognizer */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("782BF7CF-034B-4396-8A32-3A1833CF6B56")
    IInkRecognizer : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Vendor( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Vendor) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Capabilities( 
            /* [retval][out] */ __RPC__out InkRecognizerCapabilities *CapabilitiesFlags) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ __RPC__out VARIANT *Languages) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupportedProperties( 
            /* [retval][out] */ __RPC__out VARIANT *SupportedProperties) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredPacketDescription( 
            /* [retval][out] */ __RPC__out VARIANT *PreferredPacketDescription) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateRecognizerContext( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerContext **Context) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizer * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Name);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Vendor )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Vendor);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Capabilities )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__out InkRecognizerCapabilities *CapabilitiesFlags);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__out VARIANT *Languages);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportedProperties )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__out VARIANT *SupportedProperties);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredPacketDescription )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__out VARIANT *PreferredPacketDescription);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRecognizerContext )( 
            __RPC__in IInkRecognizer * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerContext **Context);
        
        END_INTERFACE
    } IInkRecognizerVtbl;

    interface IInkRecognizer
    {
        CONST_VTBL struct IInkRecognizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizer_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IInkRecognizer_get_Vendor(This,Vendor)	\
    ( (This)->lpVtbl -> get_Vendor(This,Vendor) ) 

#define IInkRecognizer_get_Capabilities(This,CapabilitiesFlags)	\
    ( (This)->lpVtbl -> get_Capabilities(This,CapabilitiesFlags) ) 

#define IInkRecognizer_get_Languages(This,Languages)	\
    ( (This)->lpVtbl -> get_Languages(This,Languages) ) 

#define IInkRecognizer_get_SupportedProperties(This,SupportedProperties)	\
    ( (This)->lpVtbl -> get_SupportedProperties(This,SupportedProperties) ) 

#define IInkRecognizer_get_PreferredPacketDescription(This,PreferredPacketDescription)	\
    ( (This)->lpVtbl -> get_PreferredPacketDescription(This,PreferredPacketDescription) ) 

#define IInkRecognizer_CreateRecognizerContext(This,Context)	\
    ( (This)->lpVtbl -> CreateRecognizerContext(This,Context) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizer_INTERFACE_DEFINED__ */


#ifndef __IInkRecognizer2_INTERFACE_DEFINED__
#define __IInkRecognizer2_INTERFACE_DEFINED__

/* interface IInkRecognizer2 */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6110118A-3A75-4ad6-B2AA-04B2B72BBE65")
    IInkRecognizer2 : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrId) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UnicodeRanges( 
            /* [retval][out] */ __RPC__out VARIANT *UnicodeRanges) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizer2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizer2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizer2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __RPC__in IInkRecognizer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrId);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnicodeRanges )( 
            __RPC__in IInkRecognizer2 * This,
            /* [retval][out] */ __RPC__out VARIANT *UnicodeRanges);
        
        END_INTERFACE
    } IInkRecognizer2Vtbl;

    interface IInkRecognizer2
    {
        CONST_VTBL struct IInkRecognizer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizer2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizer2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizer2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizer2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizer2_get_Id(This,pbstrId)	\
    ( (This)->lpVtbl -> get_Id(This,pbstrId) ) 

#define IInkRecognizer2_get_UnicodeRanges(This,UnicodeRanges)	\
    ( (This)->lpVtbl -> get_UnicodeRanges(This,UnicodeRanges) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizer2_INTERFACE_DEFINED__ */


#ifndef __IInkRecognizers_INTERFACE_DEFINED__
#define __IInkRecognizers_INTERFACE_DEFINED__

/* interface IInkRecognizers */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9CCC4F12-B0B7-4a8b-BF58-4AECA4E8CEFD")
    IInkRecognizers : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *Count) = 0;
        
        virtual /* [helpcontext][helpstring][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDefaultRecognizer( 
            /* [defaultvalue][in] */ long lcid,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **DefaultRecognizer) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **InkRecognizer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizers * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizers * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizers * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IInkRecognizers * This,
            /* [retval][out] */ __RPC__out long *Count);
        
        /* [helpcontext][helpstring][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IInkRecognizers * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **_NewEnum);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultRecognizer )( 
            __RPC__in IInkRecognizers * This,
            /* [defaultvalue][in] */ long lcid,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **DefaultRecognizer);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            __RPC__in IInkRecognizers * This,
            /* [in] */ long Index,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **InkRecognizer);
        
        END_INTERFACE
    } IInkRecognizersVtbl;

    interface IInkRecognizers
    {
        CONST_VTBL struct IInkRecognizersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizers_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define IInkRecognizers_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define IInkRecognizers_GetDefaultRecognizer(This,lcid,DefaultRecognizer)	\
    ( (This)->lpVtbl -> GetDefaultRecognizer(This,lcid,DefaultRecognizer) ) 

#define IInkRecognizers_Item(This,Index,InkRecognizer)	\
    ( (This)->lpVtbl -> Item(This,Index,InkRecognizer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizers_INTERFACE_DEFINED__ */


#ifndef ___IInkRecognitionEvents_DISPINTERFACE_DEFINED__
#define ___IInkRecognitionEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IInkRecognitionEvents */
/* [helpcontext][helpstring][uuid] */ 


EXTERN_C const IID DIID__IInkRecognitionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("17BCE92F-2E21-47FD-9D33-3C6AFBFD8C59")
    _IInkRecognitionEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IInkRecognitionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in _IInkRecognitionEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in _IInkRecognitionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in _IInkRecognitionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in _IInkRecognitionEvents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in _IInkRecognitionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in _IInkRecognitionEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IInkRecognitionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IInkRecognitionEventsVtbl;

    interface _IInkRecognitionEvents
    {
        CONST_VTBL struct _IInkRecognitionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IInkRecognitionEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IInkRecognitionEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IInkRecognitionEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IInkRecognitionEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IInkRecognitionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IInkRecognitionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IInkRecognitionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IInkRecognitionEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IInkRecognizerContext_INTERFACE_DEFINED__
#define __IInkRecognizerContext_INTERFACE_DEFINED__

/* interface IInkRecognizerContext */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizerContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C68F52F9-32A3-4625-906C-44FC23B40958")
    IInkRecognizerContext : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strokes( 
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes) = 0;
        
        virtual /* [helpcontext][helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Strokes( 
            /* [unique][in] */ __RPC__in_opt IInkStrokes *Strokes) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterAutoCompletionMode( 
            /* [retval][out] */ __RPC__out InkRecognizerCharacterAutoCompletionMode *Mode) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharacterAutoCompletionMode( 
            /* [in] */ InkRecognizerCharacterAutoCompletionMode Mode) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Factoid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Factoid) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Factoid( 
            /* [in] */ __RPC__in BSTR factoid) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Guide( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerGuide **RecognizerGuide) = 0;
        
        virtual /* [helpcontext][helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Guide( 
            /* [in] */ __RPC__in_opt IInkRecognizerGuide *RecognizerGuide) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrefixText( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Prefix) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PrefixText( 
            /* [in] */ __RPC__in BSTR Prefix) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SuffixText( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Suffix) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SuffixText( 
            /* [in] */ __RPC__in BSTR Suffix) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognitionFlags( 
            /* [retval][out] */ __RPC__out InkRecognitionModes *Modes) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognitionFlags( 
            /* [in] */ InkRecognitionModes Modes) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WordList( 
            /* [retval][out] */ __RPC__deref_out_opt IInkWordList **WordList) = 0;
        
        virtual /* [helpcontext][helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_WordList( 
            /* [in] */ __RPC__in_opt IInkWordList *WordList) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Recognizer( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **Recognizer) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE Recognize( 
            /* [out][in] */ __RPC__inout InkRecognitionStatus *RecognitionStatus,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionResult **RecognitionResult) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE StopBackgroundRecognition( void) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE EndInkInput( void) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE BackgroundRecognize( 
            /* [optional][in] */ VARIANT CustomData) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE BackgroundRecognizeWithAlternates( 
            /* [optional][in] */ VARIANT CustomData) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerContext **RecoContext) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE IsStringSupported( 
            /* [in] */ __RPC__in BSTR String,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Supported) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizerContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizerContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizerContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizerContext * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizerContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strokes )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Strokes )( 
            __RPC__in IInkRecognizerContext * This,
            /* [unique][in] */ __RPC__in_opt IInkStrokes *Strokes);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterAutoCompletionMode )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__out InkRecognizerCharacterAutoCompletionMode *Mode);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterAutoCompletionMode )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ InkRecognizerCharacterAutoCompletionMode Mode);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Factoid )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Factoid);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Factoid )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in BSTR factoid);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Guide )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerGuide **RecognizerGuide);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Guide )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in_opt IInkRecognizerGuide *RecognizerGuide);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrefixText )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Prefix);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrefixText )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in BSTR Prefix);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuffixText )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *Suffix);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuffixText )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in BSTR Suffix);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognitionFlags )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__out InkRecognitionModes *Modes);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognitionFlags )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ InkRecognitionModes Modes);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordList )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkWordList **WordList);
        
        /* [helpcontext][helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_WordList )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in_opt IInkWordList *WordList);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Recognizer )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizer **Recognizer);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Recognize )( 
            __RPC__in IInkRecognizerContext * This,
            /* [out][in] */ __RPC__inout InkRecognitionStatus *RecognitionStatus,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionResult **RecognitionResult);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StopBackgroundRecognition )( 
            __RPC__in IInkRecognizerContext * This);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EndInkInput )( 
            __RPC__in IInkRecognizerContext * This);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BackgroundRecognize )( 
            __RPC__in IInkRecognizerContext * This,
            /* [optional][in] */ VARIANT CustomData);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BackgroundRecognizeWithAlternates )( 
            __RPC__in IInkRecognizerContext * This,
            /* [optional][in] */ VARIANT CustomData);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IInkRecognizerContext * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognizerContext **RecoContext);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsStringSupported )( 
            __RPC__in IInkRecognizerContext * This,
            /* [in] */ __RPC__in BSTR String,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *Supported);
        
        END_INTERFACE
    } IInkRecognizerContextVtbl;

    interface IInkRecognizerContext
    {
        CONST_VTBL struct IInkRecognizerContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizerContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizerContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizerContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizerContext_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizerContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizerContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizerContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizerContext_get_Strokes(This,Strokes)	\
    ( (This)->lpVtbl -> get_Strokes(This,Strokes) ) 

#define IInkRecognizerContext_putref_Strokes(This,Strokes)	\
    ( (This)->lpVtbl -> putref_Strokes(This,Strokes) ) 

#define IInkRecognizerContext_get_CharacterAutoCompletionMode(This,Mode)	\
    ( (This)->lpVtbl -> get_CharacterAutoCompletionMode(This,Mode) ) 

#define IInkRecognizerContext_put_CharacterAutoCompletionMode(This,Mode)	\
    ( (This)->lpVtbl -> put_CharacterAutoCompletionMode(This,Mode) ) 

#define IInkRecognizerContext_get_Factoid(This,Factoid)	\
    ( (This)->lpVtbl -> get_Factoid(This,Factoid) ) 

#define IInkRecognizerContext_put_Factoid(This,factoid)	\
    ( (This)->lpVtbl -> put_Factoid(This,factoid) ) 

#define IInkRecognizerContext_get_Guide(This,RecognizerGuide)	\
    ( (This)->lpVtbl -> get_Guide(This,RecognizerGuide) ) 

#define IInkRecognizerContext_putref_Guide(This,RecognizerGuide)	\
    ( (This)->lpVtbl -> putref_Guide(This,RecognizerGuide) ) 

#define IInkRecognizerContext_get_PrefixText(This,Prefix)	\
    ( (This)->lpVtbl -> get_PrefixText(This,Prefix) ) 

#define IInkRecognizerContext_put_PrefixText(This,Prefix)	\
    ( (This)->lpVtbl -> put_PrefixText(This,Prefix) ) 

#define IInkRecognizerContext_get_SuffixText(This,Suffix)	\
    ( (This)->lpVtbl -> get_SuffixText(This,Suffix) ) 

#define IInkRecognizerContext_put_SuffixText(This,Suffix)	\
    ( (This)->lpVtbl -> put_SuffixText(This,Suffix) ) 

#define IInkRecognizerContext_get_RecognitionFlags(This,Modes)	\
    ( (This)->lpVtbl -> get_RecognitionFlags(This,Modes) ) 

#define IInkRecognizerContext_put_RecognitionFlags(This,Modes)	\
    ( (This)->lpVtbl -> put_RecognitionFlags(This,Modes) ) 

#define IInkRecognizerContext_get_WordList(This,WordList)	\
    ( (This)->lpVtbl -> get_WordList(This,WordList) ) 

#define IInkRecognizerContext_putref_WordList(This,WordList)	\
    ( (This)->lpVtbl -> putref_WordList(This,WordList) ) 

#define IInkRecognizerContext_get_Recognizer(This,Recognizer)	\
    ( (This)->lpVtbl -> get_Recognizer(This,Recognizer) ) 

#define IInkRecognizerContext_Recognize(This,RecognitionStatus,RecognitionResult)	\
    ( (This)->lpVtbl -> Recognize(This,RecognitionStatus,RecognitionResult) ) 

#define IInkRecognizerContext_StopBackgroundRecognition(This)	\
    ( (This)->lpVtbl -> StopBackgroundRecognition(This) ) 

#define IInkRecognizerContext_EndInkInput(This)	\
    ( (This)->lpVtbl -> EndInkInput(This) ) 

#define IInkRecognizerContext_BackgroundRecognize(This,CustomData)	\
    ( (This)->lpVtbl -> BackgroundRecognize(This,CustomData) ) 

#define IInkRecognizerContext_BackgroundRecognizeWithAlternates(This,CustomData)	\
    ( (This)->lpVtbl -> BackgroundRecognizeWithAlternates(This,CustomData) ) 

#define IInkRecognizerContext_Clone(This,RecoContext)	\
    ( (This)->lpVtbl -> Clone(This,RecoContext) ) 

#define IInkRecognizerContext_IsStringSupported(This,String,Supported)	\
    ( (This)->lpVtbl -> IsStringSupported(This,String,Supported) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizerContext_INTERFACE_DEFINED__ */


#ifndef __IInkRecognizerContext2_INTERFACE_DEFINED__
#define __IInkRecognizerContext2_INTERFACE_DEFINED__

/* interface IInkRecognizerContext2 */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizerContext2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D6F0E32F-73D8-408e-8E9F-5FEA592C363F")
    IInkRecognizerContext2 : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnabledUnicodeRanges( 
            /* [retval][out] */ __RPC__out VARIANT *UnicodeRanges) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnabledUnicodeRanges( 
            /* [in] */ VARIANT UnicodeRanges) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizerContext2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizerContext2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizerContext2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizerContext2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnabledUnicodeRanges )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [retval][out] */ __RPC__out VARIANT *UnicodeRanges);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnabledUnicodeRanges )( 
            __RPC__in IInkRecognizerContext2 * This,
            /* [in] */ VARIANT UnicodeRanges);
        
        END_INTERFACE
    } IInkRecognizerContext2Vtbl;

    interface IInkRecognizerContext2
    {
        CONST_VTBL struct IInkRecognizerContext2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizerContext2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizerContext2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizerContext2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizerContext2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizerContext2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizerContext2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizerContext2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizerContext2_get_EnabledUnicodeRanges(This,UnicodeRanges)	\
    ( (This)->lpVtbl -> get_EnabledUnicodeRanges(This,UnicodeRanges) ) 

#define IInkRecognizerContext2_put_EnabledUnicodeRanges(This,UnicodeRanges)	\
    ( (This)->lpVtbl -> put_EnabledUnicodeRanges(This,UnicodeRanges) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizerContext2_INTERFACE_DEFINED__ */


#ifndef __IInkRecognitionResult_INTERFACE_DEFINED__
#define __IInkRecognitionResult_INTERFACE_DEFINED__

/* interface IInkRecognitionResult */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognitionResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3BC129A8-86CD-45ad-BDE8-E0D32D61C16D")
    IInkRecognitionResult : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopString( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *TopString) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopAlternate( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternate **TopAlternate) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopConfidence( 
            /* [retval][out] */ __RPC__out InkRecognitionConfidence *TopConfidence) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strokes( 
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE AlternatesFromSelection( 
            /* [defaultvalue][in] */ long selectionStart,
            /* [defaultvalue][in] */ long selectionLength,
            /* [defaultvalue][in] */ long maximumAlternates,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **AlternatesFromSelection) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE ModifyTopAlternate( 
            /* [in] */ __RPC__in_opt IInkRecognitionAlternate *Alternate) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE SetResultOnStrokes( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognitionResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognitionResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognitionResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognitionResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognitionResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognitionResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognitionResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognitionResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopString )( 
            __RPC__in IInkRecognitionResult * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *TopString);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopAlternate )( 
            __RPC__in IInkRecognitionResult * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternate **TopAlternate);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopConfidence )( 
            __RPC__in IInkRecognitionResult * This,
            /* [retval][out] */ __RPC__out InkRecognitionConfidence *TopConfidence);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strokes )( 
            __RPC__in IInkRecognitionResult * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AlternatesFromSelection )( 
            __RPC__in IInkRecognitionResult * This,
            /* [defaultvalue][in] */ long selectionStart,
            /* [defaultvalue][in] */ long selectionLength,
            /* [defaultvalue][in] */ long maximumAlternates,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **AlternatesFromSelection);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ModifyTopAlternate )( 
            __RPC__in IInkRecognitionResult * This,
            /* [in] */ __RPC__in_opt IInkRecognitionAlternate *Alternate);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetResultOnStrokes )( 
            __RPC__in IInkRecognitionResult * This);
        
        END_INTERFACE
    } IInkRecognitionResultVtbl;

    interface IInkRecognitionResult
    {
        CONST_VTBL struct IInkRecognitionResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognitionResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognitionResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognitionResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognitionResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognitionResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognitionResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognitionResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognitionResult_get_TopString(This,TopString)	\
    ( (This)->lpVtbl -> get_TopString(This,TopString) ) 

#define IInkRecognitionResult_get_TopAlternate(This,TopAlternate)	\
    ( (This)->lpVtbl -> get_TopAlternate(This,TopAlternate) ) 

#define IInkRecognitionResult_get_TopConfidence(This,TopConfidence)	\
    ( (This)->lpVtbl -> get_TopConfidence(This,TopConfidence) ) 

#define IInkRecognitionResult_get_Strokes(This,Strokes)	\
    ( (This)->lpVtbl -> get_Strokes(This,Strokes) ) 

#define IInkRecognitionResult_AlternatesFromSelection(This,selectionStart,selectionLength,maximumAlternates,AlternatesFromSelection)	\
    ( (This)->lpVtbl -> AlternatesFromSelection(This,selectionStart,selectionLength,maximumAlternates,AlternatesFromSelection) ) 

#define IInkRecognitionResult_ModifyTopAlternate(This,Alternate)	\
    ( (This)->lpVtbl -> ModifyTopAlternate(This,Alternate) ) 

#define IInkRecognitionResult_SetResultOnStrokes(This)	\
    ( (This)->lpVtbl -> SetResultOnStrokes(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognitionResult_INTERFACE_DEFINED__ */


#ifndef __IInkRecognitionAlternate_INTERFACE_DEFINED__
#define __IInkRecognitionAlternate_INTERFACE_DEFINED__

/* interface IInkRecognitionAlternate */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognitionAlternate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7E660AD-77E4-429b-ADDA-873780D1FC4A")
    IInkRecognitionAlternate : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_String( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *RecoString) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Confidence( 
            /* [retval][out] */ __RPC__out InkRecognitionConfidence *Confidence) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Baseline( 
            /* [retval][out] */ __RPC__out VARIANT *Baseline) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Midline( 
            /* [retval][out] */ __RPC__out VARIANT *Midline) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Ascender( 
            /* [retval][out] */ __RPC__out VARIANT *Ascender) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Descender( 
            /* [retval][out] */ __RPC__out VARIANT *Descender) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineNumber( 
            /* [retval][out] */ __RPC__out long *LineNumber) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strokes( 
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineAlternates( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **LineAlternates) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConfidenceAlternates( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **ConfidenceAlternates) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetStrokesFromStrokeRanges( 
            /* [in] */ __RPC__in_opt IInkStrokes *Strokes,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **GetStrokesFromStrokeRanges) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetStrokesFromTextRange( 
            /* [out][in] */ __RPC__inout long *selectionStart,
            /* [out][in] */ __RPC__inout long *selectionLength,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **GetStrokesFromTextRange) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTextRangeFromStrokes( 
            /* [in] */ __RPC__in_opt IInkStrokes *Strokes,
            /* [out][in] */ __RPC__inout long *selectionStart,
            /* [out][in] */ __RPC__inout long *selectionLength) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE AlternatesWithConstantPropertyValues( 
            /* [in] */ __RPC__in BSTR PropertyType,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **AlternatesWithConstantPropertyValues) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPropertyValue( 
            /* [in] */ __RPC__in BSTR PropertyType,
            /* [retval][out] */ __RPC__out VARIANT *PropertyValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognitionAlternateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognitionAlternate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognitionAlternate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognitionAlternate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_String )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *RecoString);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Confidence )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out InkRecognitionConfidence *Confidence);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Baseline )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out VARIANT *Baseline);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Midline )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out VARIANT *Midline);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Ascender )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out VARIANT *Ascender);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descender )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out VARIANT *Descender);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineNumber )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__out long *LineNumber);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strokes )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineAlternates )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **LineAlternates);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConfidenceAlternates )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **ConfidenceAlternates);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetStrokesFromStrokeRanges )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in_opt IInkStrokes *Strokes,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **GetStrokesFromStrokeRanges);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetStrokesFromTextRange )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [out][in] */ __RPC__inout long *selectionStart,
            /* [out][in] */ __RPC__inout long *selectionLength,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **GetStrokesFromTextRange);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTextRangeFromStrokes )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in_opt IInkStrokes *Strokes,
            /* [out][in] */ __RPC__inout long *selectionStart,
            /* [out][in] */ __RPC__inout long *selectionLength);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AlternatesWithConstantPropertyValues )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in BSTR PropertyType,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternates **AlternatesWithConstantPropertyValues);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyValue )( 
            __RPC__in IInkRecognitionAlternate * This,
            /* [in] */ __RPC__in BSTR PropertyType,
            /* [retval][out] */ __RPC__out VARIANT *PropertyValue);
        
        END_INTERFACE
    } IInkRecognitionAlternateVtbl;

    interface IInkRecognitionAlternate
    {
        CONST_VTBL struct IInkRecognitionAlternateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognitionAlternate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognitionAlternate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognitionAlternate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognitionAlternate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognitionAlternate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognitionAlternate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognitionAlternate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognitionAlternate_get_String(This,RecoString)	\
    ( (This)->lpVtbl -> get_String(This,RecoString) ) 

#define IInkRecognitionAlternate_get_Confidence(This,Confidence)	\
    ( (This)->lpVtbl -> get_Confidence(This,Confidence) ) 

#define IInkRecognitionAlternate_get_Baseline(This,Baseline)	\
    ( (This)->lpVtbl -> get_Baseline(This,Baseline) ) 

#define IInkRecognitionAlternate_get_Midline(This,Midline)	\
    ( (This)->lpVtbl -> get_Midline(This,Midline) ) 

#define IInkRecognitionAlternate_get_Ascender(This,Ascender)	\
    ( (This)->lpVtbl -> get_Ascender(This,Ascender) ) 

#define IInkRecognitionAlternate_get_Descender(This,Descender)	\
    ( (This)->lpVtbl -> get_Descender(This,Descender) ) 

#define IInkRecognitionAlternate_get_LineNumber(This,LineNumber)	\
    ( (This)->lpVtbl -> get_LineNumber(This,LineNumber) ) 

#define IInkRecognitionAlternate_get_Strokes(This,Strokes)	\
    ( (This)->lpVtbl -> get_Strokes(This,Strokes) ) 

#define IInkRecognitionAlternate_get_LineAlternates(This,LineAlternates)	\
    ( (This)->lpVtbl -> get_LineAlternates(This,LineAlternates) ) 

#define IInkRecognitionAlternate_get_ConfidenceAlternates(This,ConfidenceAlternates)	\
    ( (This)->lpVtbl -> get_ConfidenceAlternates(This,ConfidenceAlternates) ) 

#define IInkRecognitionAlternate_GetStrokesFromStrokeRanges(This,Strokes,GetStrokesFromStrokeRanges)	\
    ( (This)->lpVtbl -> GetStrokesFromStrokeRanges(This,Strokes,GetStrokesFromStrokeRanges) ) 

#define IInkRecognitionAlternate_GetStrokesFromTextRange(This,selectionStart,selectionLength,GetStrokesFromTextRange)	\
    ( (This)->lpVtbl -> GetStrokesFromTextRange(This,selectionStart,selectionLength,GetStrokesFromTextRange) ) 

#define IInkRecognitionAlternate_GetTextRangeFromStrokes(This,Strokes,selectionStart,selectionLength)	\
    ( (This)->lpVtbl -> GetTextRangeFromStrokes(This,Strokes,selectionStart,selectionLength) ) 

#define IInkRecognitionAlternate_AlternatesWithConstantPropertyValues(This,PropertyType,AlternatesWithConstantPropertyValues)	\
    ( (This)->lpVtbl -> AlternatesWithConstantPropertyValues(This,PropertyType,AlternatesWithConstantPropertyValues) ) 

#define IInkRecognitionAlternate_GetPropertyValue(This,PropertyType,PropertyValue)	\
    ( (This)->lpVtbl -> GetPropertyValue(This,PropertyType,PropertyValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognitionAlternate_INTERFACE_DEFINED__ */


#ifndef __IInkRecognitionAlternates_INTERFACE_DEFINED__
#define __IInkRecognitionAlternates_INTERFACE_DEFINED__

/* interface IInkRecognitionAlternates */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognitionAlternates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("286A167F-9F19-4c61-9D53-4F07BE622B84")
    IInkRecognitionAlternates : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *Count) = 0;
        
        virtual /* [helpcontext][helpstring][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strokes( 
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternate **InkRecoAlternate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognitionAlternatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognitionAlternates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognitionAlternates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognitionAlternates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [retval][out] */ __RPC__out long *Count);
        
        /* [helpcontext][helpstring][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **_NewEnum);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strokes )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkStrokes **Strokes);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            __RPC__in IInkRecognitionAlternates * This,
            /* [in] */ long Index,
            /* [retval][out] */ __RPC__deref_out_opt IInkRecognitionAlternate **InkRecoAlternate);
        
        END_INTERFACE
    } IInkRecognitionAlternatesVtbl;

    interface IInkRecognitionAlternates
    {
        CONST_VTBL struct IInkRecognitionAlternatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognitionAlternates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognitionAlternates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognitionAlternates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognitionAlternates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognitionAlternates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognitionAlternates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognitionAlternates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognitionAlternates_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define IInkRecognitionAlternates_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define IInkRecognitionAlternates_get_Strokes(This,Strokes)	\
    ( (This)->lpVtbl -> get_Strokes(This,Strokes) ) 

#define IInkRecognitionAlternates_Item(This,Index,InkRecoAlternate)	\
    ( (This)->lpVtbl -> Item(This,Index,InkRecoAlternate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognitionAlternates_INTERFACE_DEFINED__ */


#ifndef __IInkRecognizerGuide_INTERFACE_DEFINED__
#define __IInkRecognizerGuide_INTERFACE_DEFINED__

/* interface IInkRecognizerGuide */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkRecognizerGuide;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D934BE07-7B84-4208-9136-83C20994E905")
    IInkRecognizerGuide : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritingBox( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRectangle **Rectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritingBox( 
            /* [in] */ __RPC__in_opt IInkRectangle *Rectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DrawnBox( 
            /* [retval][out] */ __RPC__deref_out_opt IInkRectangle **Rectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DrawnBox( 
            /* [in] */ __RPC__in_opt IInkRectangle *Rectangle) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ __RPC__out long *Units) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rows( 
            /* [in] */ long Units) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ __RPC__out long *Units) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Columns( 
            /* [in] */ long Units) = 0;
        
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Midline( 
            /* [retval][out] */ __RPC__out long *Units) = 0;
        
        virtual /* [helpcontext][helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Midline( 
            /* [in] */ long Units) = 0;
        
        virtual /* [helpcontext][helpstring][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_GuideData( 
            /* [retval][out] */ __RPC__out InkRecoGuide *pRecoGuide) = 0;
        
        virtual /* [helpcontext][helpstring][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_GuideData( 
            /* [in] */ InkRecoGuide recoGuide) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkRecognizerGuideVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkRecognizerGuide * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkRecognizerGuide * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkRecognizerGuide * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritingBox )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRectangle **Rectangle);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritingBox )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ __RPC__in_opt IInkRectangle *Rectangle);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawnBox )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__deref_out_opt IInkRectangle **Rectangle);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DrawnBox )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ __RPC__in_opt IInkRectangle *Rectangle);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__out long *Units);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rows )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ long Units);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__out long *Units);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Columns )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ long Units);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Midline )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__out long *Units);
        
        /* [helpcontext][helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Midline )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ long Units);
        
        /* [helpcontext][helpstring][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GuideData )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [retval][out] */ __RPC__out InkRecoGuide *pRecoGuide);
        
        /* [helpcontext][helpstring][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GuideData )( 
            __RPC__in IInkRecognizerGuide * This,
            /* [in] */ InkRecoGuide recoGuide);
        
        END_INTERFACE
    } IInkRecognizerGuideVtbl;

    interface IInkRecognizerGuide
    {
        CONST_VTBL struct IInkRecognizerGuideVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkRecognizerGuide_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkRecognizerGuide_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkRecognizerGuide_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkRecognizerGuide_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkRecognizerGuide_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkRecognizerGuide_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkRecognizerGuide_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkRecognizerGuide_get_WritingBox(This,Rectangle)	\
    ( (This)->lpVtbl -> get_WritingBox(This,Rectangle) ) 

#define IInkRecognizerGuide_put_WritingBox(This,Rectangle)	\
    ( (This)->lpVtbl -> put_WritingBox(This,Rectangle) ) 

#define IInkRecognizerGuide_get_DrawnBox(This,Rectangle)	\
    ( (This)->lpVtbl -> get_DrawnBox(This,Rectangle) ) 

#define IInkRecognizerGuide_put_DrawnBox(This,Rectangle)	\
    ( (This)->lpVtbl -> put_DrawnBox(This,Rectangle) ) 

#define IInkRecognizerGuide_get_Rows(This,Units)	\
    ( (This)->lpVtbl -> get_Rows(This,Units) ) 

#define IInkRecognizerGuide_put_Rows(This,Units)	\
    ( (This)->lpVtbl -> put_Rows(This,Units) ) 

#define IInkRecognizerGuide_get_Columns(This,Units)	\
    ( (This)->lpVtbl -> get_Columns(This,Units) ) 

#define IInkRecognizerGuide_put_Columns(This,Units)	\
    ( (This)->lpVtbl -> put_Columns(This,Units) ) 

#define IInkRecognizerGuide_get_Midline(This,Units)	\
    ( (This)->lpVtbl -> get_Midline(This,Units) ) 

#define IInkRecognizerGuide_put_Midline(This,Units)	\
    ( (This)->lpVtbl -> put_Midline(This,Units) ) 

#define IInkRecognizerGuide_get_GuideData(This,pRecoGuide)	\
    ( (This)->lpVtbl -> get_GuideData(This,pRecoGuide) ) 

#define IInkRecognizerGuide_put_GuideData(This,recoGuide)	\
    ( (This)->lpVtbl -> put_GuideData(This,recoGuide) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkRecognizerGuide_INTERFACE_DEFINED__ */


#ifndef __IInkWordList_INTERFACE_DEFINED__
#define __IInkWordList_INTERFACE_DEFINED__

/* interface IInkWordList */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkWordList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76BA3491-CB2F-406b-9961-0E0C4CDAAEF2")
    IInkWordList : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE AddWord( 
            /* [in] */ __RPC__in BSTR NewWord) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveWord( 
            /* [in] */ __RPC__in BSTR RemoveWord) = 0;
        
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ __RPC__in_opt IInkWordList *MergeWordList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkWordListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkWordList * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkWordList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkWordList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkWordList * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkWordList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkWordList * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkWordList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddWord )( 
            __RPC__in IInkWordList * This,
            /* [in] */ __RPC__in BSTR NewWord);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveWord )( 
            __RPC__in IInkWordList * This,
            /* [in] */ __RPC__in BSTR RemoveWord);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            __RPC__in IInkWordList * This,
            /* [in] */ __RPC__in_opt IInkWordList *MergeWordList);
        
        END_INTERFACE
    } IInkWordListVtbl;

    interface IInkWordList
    {
        CONST_VTBL struct IInkWordListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkWordList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkWordList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkWordList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkWordList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkWordList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkWordList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkWordList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkWordList_AddWord(This,NewWord)	\
    ( (This)->lpVtbl -> AddWord(This,NewWord) ) 

#define IInkWordList_RemoveWord(This,RemoveWord)	\
    ( (This)->lpVtbl -> RemoveWord(This,RemoveWord) ) 

#define IInkWordList_Merge(This,MergeWordList)	\
    ( (This)->lpVtbl -> Merge(This,MergeWordList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkWordList_INTERFACE_DEFINED__ */


#ifndef __IInkWordList2_INTERFACE_DEFINED__
#define __IInkWordList2_INTERFACE_DEFINED__

/* interface IInkWordList2 */
/* [unique][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInkWordList2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("14542586-11BF-4f5f-B6E7-49D0744AAB6E")
    IInkWordList2 : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id] */ HRESULT STDMETHODCALLTYPE AddWords( 
            /* [in] */ __RPC__in BSTR NewWords) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkWordList2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkWordList2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkWordList2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkWordList2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInkWordList2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInkWordList2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInkWordList2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInkWordList2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddWords )( 
            __RPC__in IInkWordList2 * This,
            /* [in] */ __RPC__in BSTR NewWords);
        
        END_INTERFACE
    } IInkWordList2Vtbl;

    interface IInkWordList2
    {
        CONST_VTBL struct IInkWordList2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkWordList2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkWordList2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkWordList2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkWordList2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInkWordList2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInkWordList2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInkWordList2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInkWordList2_AddWords(This,NewWords)	\
    ( (This)->lpVtbl -> AddWords(This,NewWords) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkWordList2_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_InkDisp;

#ifdef __cplusplus

class DECLSPEC_UUID("937C1A34-151D-4610-9CA6-A8CC9BDB5D83")
InkDisp;
#endif

EXTERN_C const CLSID CLSID_InkOverlay;

#ifdef __cplusplus

class DECLSPEC_UUID("65d00646-cde3-4a88-9163-6769f0f1a97d")
InkOverlay;
#endif

EXTERN_C const CLSID CLSID_InkPicture;

#ifdef __cplusplus

class DECLSPEC_UUID("04a1e553-fe36-4fde-865e-344194e69424")
InkPicture;
#endif

EXTERN_C const CLSID CLSID_InkCollector;

#ifdef __cplusplus

class DECLSPEC_UUID("43FB1553-AD74-4ee8-88E4-3E6DAAC915DB")
InkCollector;
#endif

EXTERN_C const CLSID CLSID_InkDrawingAttributes;

#ifdef __cplusplus

class DECLSPEC_UUID("D8BF32A2-05A5-44c3-B3AA-5E80AC7D2576")
InkDrawingAttributes;
#endif

EXTERN_C const CLSID CLSID_InkRectangle;

#ifdef __cplusplus

class DECLSPEC_UUID("43B07326-AAE0-4B62-A83D-5FD768B7353C")
InkRectangle;
#endif

EXTERN_C const CLSID CLSID_InkRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("9C1CC6E4-D7EB-4eeb-9091-15A7C8791ED9")
InkRenderer;
#endif

EXTERN_C const CLSID CLSID_InkTransform;

#ifdef __cplusplus

class DECLSPEC_UUID("E3D5D93C-1663-4A78-A1A7-22375DFEBAEE")
InkTransform;
#endif

EXTERN_C const CLSID CLSID_InkRecognizers;

#ifdef __cplusplus

class DECLSPEC_UUID("9FD4E808-F6E6-4e65-98D3-AA39054C1255")
InkRecognizers;
#endif

EXTERN_C const CLSID CLSID_InkRecognizerContext;

#ifdef __cplusplus

class DECLSPEC_UUID("AAC46A37-9229-4fc0-8CCE-4497569BF4D1")
InkRecognizerContext;
#endif

EXTERN_C const CLSID CLSID_InkRecognizerGuide;

#ifdef __cplusplus

class DECLSPEC_UUID("8770D941-A63A-4671-A375-2855A18EBA73")
InkRecognizerGuide;
#endif

EXTERN_C const CLSID CLSID_InkTablets;

#ifdef __cplusplus

class DECLSPEC_UUID("6E4FCB12-510A-4d40-9304-1DA10AE9147C")
InkTablets;
#endif

EXTERN_C const CLSID CLSID_InkWordList;

#ifdef __cplusplus

class DECLSPEC_UUID("9DE85094-F71F-44f1-8471-15A2FA76FCF3")
InkWordList;
#endif

EXTERN_C const CLSID CLSID_InkStrokes;

#ifdef __cplusplus

class DECLSPEC_UUID("48F491BC-240E-4860-B079-A1E94D3D2C86")
InkStrokes;
#endif

#ifndef __IInk_INTERFACE_DEFINED__
#define __IInk_INTERFACE_DEFINED__

/* interface IInk */
/* [unique][hidden][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IInk;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03F8E511-43A1-11D3-8BB6-0080C7D6BAD5")
    IInk : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IInkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInk * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInk * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInk * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInk * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInk * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IInkVtbl;

    interface IInk
    {
        CONST_VTBL struct IInkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInk_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInk_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInk_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInk_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInk_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInk_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInk_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInk_INTERFACE_DEFINED__ */


#ifndef __IInkLineInfo_INTERFACE_DEFINED__
#define __IInkLineInfo_INTERFACE_DEFINED__

/* interface IInkLineInfo */
/* [unique][hidden][helpcontext][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IInkLineInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9C1C5AD6-F22F-4DE4-B453-A2CC482E7C33")
    IInkLineInfo : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetFormat( 
            __RPC__in INKMETRIC *pim) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetFormat( 
            __RPC__in INKMETRIC *pim) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetInkExtent( 
            __RPC__in INKMETRIC *pim,
            __RPC__in UINT *pnWidth) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCandidate( 
            UINT nCandidateNum,
            __RPC__in LPWSTR pwcRecogWord,
            __RPC__in UINT *pcwcRecogWord,
            DWORD dwFlags) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetCandidate( 
            UINT nCandidateNum,
            __RPC__in LPWSTR strRecogWord) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Recognize( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkLineInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInkLineInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInkLineInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInkLineInfo * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetFormat )( 
            __RPC__in IInkLineInfo * This,
            __RPC__in INKMETRIC *pim);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFormat )( 
            __RPC__in IInkLineInfo * This,
            __RPC__in INKMETRIC *pim);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetInkExtent )( 
            __RPC__in IInkLineInfo * This,
            __RPC__in INKMETRIC *pim,
            __RPC__in UINT *pnWidth);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCandidate )( 
            __RPC__in IInkLineInfo * This,
            UINT nCandidateNum,
            __RPC__in LPWSTR pwcRecogWord,
            __RPC__in UINT *pcwcRecogWord,
            DWORD dwFlags);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetCandidate )( 
            __RPC__in IInkLineInfo * This,
            UINT nCandidateNum,
            __RPC__in LPWSTR strRecogWord);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Recognize )( 
            __RPC__in IInkLineInfo * This);
        
        END_INTERFACE
    } IInkLineInfoVtbl;

    interface IInkLineInfo
    {
        CONST_VTBL struct IInkLineInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkLineInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInkLineInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInkLineInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInkLineInfo_SetFormat(This,pim)	\
    ( (This)->lpVtbl -> SetFormat(This,pim) ) 

#define IInkLineInfo_GetFormat(This,pim)	\
    ( (This)->lpVtbl -> GetFormat(This,pim) ) 

#define IInkLineInfo_GetInkExtent(This,pim,pnWidth)	\
    ( (This)->lpVtbl -> GetInkExtent(This,pim,pnWidth) ) 

#define IInkLineInfo_GetCandidate(This,nCandidateNum,pwcRecogWord,pcwcRecogWord,dwFlags)	\
    ( (This)->lpVtbl -> GetCandidate(This,nCandidateNum,pwcRecogWord,pcwcRecogWord,dwFlags) ) 

#define IInkLineInfo_SetCandidate(This,nCandidateNum,strRecogWord)	\
    ( (This)->lpVtbl -> SetCandidate(This,nCandidateNum,strRecogWord) ) 

#define IInkLineInfo_Recognize(This)	\
    ( (This)->lpVtbl -> Recognize(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInkLineInfo_INTERFACE_DEFINED__ */


#ifndef __ISketchInk_INTERFACE_DEFINED__
#define __ISketchInk_INTERFACE_DEFINED__

/* interface ISketchInk */
/* [unique][hidden][helpcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_ISketchInk;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B4563688-98EB-4646-B279-44DA14D45748")
    ISketchInk : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISketchInkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISketchInk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISketchInk * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISketchInk * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISketchInk * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISketchInk * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISketchInk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISketchInk * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ISketchInkVtbl;

    interface ISketchInk
    {
        CONST_VTBL struct ISketchInkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISketchInk_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISketchInk_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISketchInk_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISketchInk_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISketchInk_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISketchInk_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISketchInk_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISketchInk_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Ink;

#ifdef __cplusplus

class DECLSPEC_UUID("13DE4A42-8D21-4C8E-BF9C-8F69CB068FCA")
Ink;
#endif

EXTERN_C const CLSID CLSID_SketchInk;

#ifdef __cplusplus

class DECLSPEC_UUID("F0291081-E87C-4E07-97DA-A0A03761E586")
SketchInk;
#endif
#endif /* __MSINKAUTLib_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_msinkaut_0001_0108 */
/* [local] */ 

#endif /* of #define _MSINKAUT_IDL_H_*/


extern RPC_IF_HANDLE __MIDL_itf_msinkaut_0001_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msinkaut_0001_0108_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msinkaut_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msinkaut.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_MSINKAUTLib,0x7D868ACD,0x1A5D,0x4a47,0xA2,0x47,0xF3,0x97,0x41,0x35,0x30,0x12);


MIDL_DEFINE_GUID(IID, IID_IInkRectangle,0x9794FF82,0x6071,0x4717,0x8A,0x8B,0x6A,0xC7,0xC6,0x4A,0x68,0x6E);


MIDL_DEFINE_GUID(IID, IID_IInkExtendedProperty,0xDB489209,0xB7C3,0x411D,0x90,0xF6,0x15,0x48,0xCF,0xFF,0x27,0x1E);


MIDL_DEFINE_GUID(IID, IID_IInkExtendedProperties,0x89F2A8BE,0x95A9,0x4530,0x8B,0x8F,0x88,0xE9,0x71,0xE3,0xE2,0x5F);


MIDL_DEFINE_GUID(IID, IID_IInkDrawingAttributes,0xBF519B75,0x0A15,0x4623,0xAD,0xC9,0xC0,0x0D,0x43,0x6A,0x80,0x92);


MIDL_DEFINE_GUID(IID, IID_IInkTransform,0x615F1D43,0x8703,0x4565,0x88,0xE2,0x82,0x01,0xD2,0xEC,0xD7,0xB7);


MIDL_DEFINE_GUID(IID, IID_IInkGesture,0x3BDC0A97,0x04E5,0x4e26,0xB8,0x13,0x18,0xF0,0x52,0xD4,0x1D,0xEF);


MIDL_DEFINE_GUID(IID, IID_IInkCursor,0xAD30C630,0x40C5,0x4350,0x84,0x05,0x9C,0x71,0x01,0x2F,0xC5,0x58);


MIDL_DEFINE_GUID(IID, IID_IInkCursors,0xA248C1AC,0xC698,0x4e06,0x9E,0x5C,0xD5,0x7F,0x77,0xC7,0xE6,0x47);


MIDL_DEFINE_GUID(IID, IID_IInkCursorButton,0x85EF9417,0x1D59,0x49b2,0xA1,0x3C,0x70,0x2C,0x85,0x43,0x08,0x94);


MIDL_DEFINE_GUID(IID, IID_IInkCursorButtons,0x3671CC40,0xB624,0x4671,0x9F,0xA0,0xDB,0x11,0x9D,0x95,0x2D,0x54);


MIDL_DEFINE_GUID(IID, IID_IInkTablet,0x2DE25EAA,0x6EF8,0x42d5,0xAE,0xE9,0x18,0x5B,0xC8,0x1B,0x91,0x2D);


MIDL_DEFINE_GUID(IID, IID_IInkTablet2,0x90c91ad2,0xfa36,0x49d6,0x95,0x16,0xce,0x8d,0x57,0x0f,0x6f,0x85);


MIDL_DEFINE_GUID(IID, IID_IInkTablet3,0x7e313997,0x1327,0x41dd,0x8c,0xa9,0x79,0xf2,0x4b,0xe1,0x72,0x50);


MIDL_DEFINE_GUID(IID, IID_IInkTablets,0x112086D9,0x7779,0x4535,0xA6,0x99,0x86,0x2B,0x43,0xAC,0x18,0x63);


MIDL_DEFINE_GUID(IID, IID_IInkStrokeDisp,0x43242FEA,0x91D1,0x4a72,0x96,0x3E,0xFB,0xB9,0x18,0x29,0xCF,0xA2);


MIDL_DEFINE_GUID(IID, IID_IInkStrokes,0xF1F4C9D8,0x590A,0x4963,0xB3,0xAE,0x19,0x35,0x67,0x1B,0xB6,0xF3);


MIDL_DEFINE_GUID(IID, IID_IInkCustomStrokes,0x7E23A88F,0xC30E,0x420f,0x9B,0xDB,0x28,0x90,0x25,0x43,0xF0,0xC1);


MIDL_DEFINE_GUID(IID, DIID__IInkStrokesEvents,0xF33053EC,0x5D25,0x430a,0x92,0x8F,0x76,0xA6,0x49,0x1D,0xDE,0x15);


MIDL_DEFINE_GUID(IID, IID_IInkDisp,0x9D398FA0,0xC4E2,0x4fcd,0x99,0x73,0x97,0x5C,0xAA,0xF4,0x7E,0xA6);


MIDL_DEFINE_GUID(IID, DIID__IInkEvents,0x427B1865,0xCA3F,0x479a,0x83,0xA9,0x0F,0x42,0x0F,0x2A,0x00,0x73);


MIDL_DEFINE_GUID(IID, IID_IInkRenderer,0xE6257A9C,0xB511,0x4f4c,0xA8,0xB0,0xA7,0xDB,0xC9,0x50,0x6B,0x83);


MIDL_DEFINE_GUID(IID, IID_IInkCollector,0xF0F060B5,0x8B1F,0x4a7c,0x89,0xEC,0x88,0x06,0x92,0x58,0x8A,0x4F);


MIDL_DEFINE_GUID(IID, DIID__IInkCollectorEvents,0x11A583F2,0x712D,0x4fea,0xAB,0xCF,0xAB,0x4A,0xF3,0x8E,0xA0,0x6B);


MIDL_DEFINE_GUID(IID, IID_IInkOverlay,0xb82a463b,0xc1c5,0x45a3,0x99,0x7c,0xde,0xab,0x56,0x51,0xb6,0x7a);


MIDL_DEFINE_GUID(IID, DIID__IInkOverlayEvents,0x31179b69,0xe563,0x489e,0xb1,0x6f,0x71,0x2f,0x1e,0x8a,0x06,0x51);


MIDL_DEFINE_GUID(IID, IID_IInkPicture,0xe85662e0,0x379a,0x40d7,0x9b,0x5c,0x75,0x7d,0x23,0x3f,0x99,0x23);


MIDL_DEFINE_GUID(IID, DIID__IInkPictureEvents,0x60ff4fee,0x22ff,0x4484,0xac,0xc1,0xd3,0x08,0xd9,0xcd,0x7e,0xa3);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizer,0x782BF7CF,0x034B,0x4396,0x8A,0x32,0x3A,0x18,0x33,0xCF,0x6B,0x56);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizer2,0x6110118A,0x3A75,0x4ad6,0xB2,0xAA,0x04,0xB2,0xB7,0x2B,0xBE,0x65);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizers,0x9CCC4F12,0xB0B7,0x4a8b,0xBF,0x58,0x4A,0xEC,0xA4,0xE8,0xCE,0xFD);


MIDL_DEFINE_GUID(IID, DIID__IInkRecognitionEvents,0x17BCE92F,0x2E21,0x47FD,0x9D,0x33,0x3C,0x6A,0xFB,0xFD,0x8C,0x59);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizerContext,0xC68F52F9,0x32A3,0x4625,0x90,0x6C,0x44,0xFC,0x23,0xB4,0x09,0x58);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizerContext2,0xD6F0E32F,0x73D8,0x408e,0x8E,0x9F,0x5F,0xEA,0x59,0x2C,0x36,0x3F);


MIDL_DEFINE_GUID(IID, IID_IInkRecognitionResult,0x3BC129A8,0x86CD,0x45ad,0xBD,0xE8,0xE0,0xD3,0x2D,0x61,0xC1,0x6D);


MIDL_DEFINE_GUID(IID, IID_IInkRecognitionAlternate,0xB7E660AD,0x77E4,0x429b,0xAD,0xDA,0x87,0x37,0x80,0xD1,0xFC,0x4A);


MIDL_DEFINE_GUID(IID, IID_IInkRecognitionAlternates,0x286A167F,0x9F19,0x4c61,0x9D,0x53,0x4F,0x07,0xBE,0x62,0x2B,0x84);


MIDL_DEFINE_GUID(IID, IID_IInkRecognizerGuide,0xD934BE07,0x7B84,0x4208,0x91,0x36,0x83,0xC2,0x09,0x94,0xE9,0x05);


MIDL_DEFINE_GUID(IID, IID_IInkWordList,0x76BA3491,0xCB2F,0x406b,0x99,0x61,0x0E,0x0C,0x4C,0xDA,0xAE,0xF2);


MIDL_DEFINE_GUID(IID, IID_IInkWordList2,0x14542586,0x11BF,0x4f5f,0xB6,0xE7,0x49,0xD0,0x74,0x4A,0xAB,0x6E);


MIDL_DEFINE_GUID(CLSID, CLSID_InkDisp,0x937C1A34,0x151D,0x4610,0x9C,0xA6,0xA8,0xCC,0x9B,0xDB,0x5D,0x83);


MIDL_DEFINE_GUID(CLSID, CLSID_InkOverlay,0x65d00646,0xcde3,0x4a88,0x91,0x63,0x67,0x69,0xf0,0xf1,0xa9,0x7d);


MIDL_DEFINE_GUID(CLSID, CLSID_InkPicture,0x04a1e553,0xfe36,0x4fde,0x86,0x5e,0x34,0x41,0x94,0xe6,0x94,0x24);


MIDL_DEFINE_GUID(CLSID, CLSID_InkCollector,0x43FB1553,0xAD74,0x4ee8,0x88,0xE4,0x3E,0x6D,0xAA,0xC9,0x15,0xDB);


MIDL_DEFINE_GUID(CLSID, CLSID_InkDrawingAttributes,0xD8BF32A2,0x05A5,0x44c3,0xB3,0xAA,0x5E,0x80,0xAC,0x7D,0x25,0x76);


MIDL_DEFINE_GUID(CLSID, CLSID_InkRectangle,0x43B07326,0xAAE0,0x4B62,0xA8,0x3D,0x5F,0xD7,0x68,0xB7,0x35,0x3C);


MIDL_DEFINE_GUID(CLSID, CLSID_InkRenderer,0x9C1CC6E4,0xD7EB,0x4eeb,0x90,0x91,0x15,0xA7,0xC8,0x79,0x1E,0xD9);


MIDL_DEFINE_GUID(CLSID, CLSID_InkTransform,0xE3D5D93C,0x1663,0x4A78,0xA1,0xA7,0x22,0x37,0x5D,0xFE,0xBA,0xEE);


MIDL_DEFINE_GUID(CLSID, CLSID_InkRecognizers,0x9FD4E808,0xF6E6,0x4e65,0x98,0xD3,0xAA,0x39,0x05,0x4C,0x12,0x55);


MIDL_DEFINE_GUID(CLSID, CLSID_InkRecognizerContext,0xAAC46A37,0x9229,0x4fc0,0x8C,0xCE,0x44,0x97,0x56,0x9B,0xF4,0xD1);


MIDL_DEFINE_GUID(CLSID, CLSID_InkRecognizerGuide,0x8770D941,0xA63A,0x4671,0xA3,0x75,0x28,0x55,0xA1,0x8E,0xBA,0x73);


MIDL_DEFINE_GUID(CLSID, CLSID_InkTablets,0x6E4FCB12,0x510A,0x4d40,0x93,0x04,0x1D,0xA1,0x0A,0xE9,0x14,0x7C);


MIDL_DEFINE_GUID(CLSID, CLSID_InkWordList,0x9DE85094,0xF71F,0x44f1,0x84,0x71,0x15,0xA2,0xFA,0x76,0xFC,0xF3);


MIDL_DEFINE_GUID(CLSID, CLSID_InkStrokes,0x48F491BC,0x240E,0x4860,0xB0,0x79,0xA1,0xE9,0x4D,0x3D,0x2C,0x86);


MIDL_DEFINE_GUID(IID, IID_IInk,0x03F8E511,0x43A1,0x11D3,0x8B,0xB6,0x00,0x80,0xC7,0xD6,0xBA,0xD5);


MIDL_DEFINE_GUID(IID, IID_IInkLineInfo,0x9C1C5AD6,0xF22F,0x4DE4,0xB4,0x53,0xA2,0xCC,0x48,0x2E,0x7C,0x33);


MIDL_DEFINE_GUID(IID, IID_ISketchInk,0xB4563688,0x98EB,0x4646,0xB2,0x79,0x44,0xDA,0x14,0xD4,0x57,0x48);


MIDL_DEFINE_GUID(CLSID, CLSID_Ink,0x13DE4A42,0x8D21,0x4C8E,0xBF,0x9C,0x8F,0x69,0xCB,0x06,0x8F,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_SketchInk,0xF0291081,0xE87C,0x4E07,0x97,0xDA,0xA0,0xA0,0x37,0x61,0xE5,0x86);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msoav.h ===
#pragma once

#ifndef _MSOAV_H
#define _MSOAV_H

typedef struct _msoavinfo
{
int cbsize;			//size of this struct
struct {
	ULONG fPath:1;			//when true use pwzFullPath else use lpstg
	ULONG fReadOnlyRequest:1;	//user requests file to be opened read/only
	ULONG fInstalled:1;	//the file at pwzFullPath is an installed file
	ULONG fHttpDownload:1;	//the file at pwzFullPath is a temp file downloaded from http/ftp
	};
HWND hwnd;			//parent window of the Office9 app
union {
	WCHAR *pwzFullPath;	//full path to the file about to be opened
	LPSTORAGE lpstg;	//OLE Storage of the doc about to be opened
	}u;
WCHAR *pwzHostName;	 // Host Office 9 apps name
WCHAR *pwzOrigURL;	 		// URL of the origin of this downloaded file.
}MSOAVINFO;

 // {56FFCC30-D398-11d0-B2AE-00A0C908FA49}
DEFINE_GUID(IID_IOfficeAntiVirus,
0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x0, 0xa0, 0xc9, 0x8, 0xfa, 0x49);

 // {56FFCC31-D398-11d0-B2AE-00A0C908FA49}
DEFINE_GUID(CATID_MSOfficeAntiVirus,
0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x0, 0xa0, 0xc9, 0x8, 0xfa, 0x49);



#undef  INTERFACE
#define INTERFACE  IOfficeAntiVirus
DECLARE_INTERFACE_(IOfficeAntiVirus, IUnknown)
{
    BEGIN_INTERFACE

    // *** IUnknown methods ***

    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;

    STDMETHOD_(ULONG, AddRef)(THIS) PURE;

    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // *** IOfficeAntiVirus methods ***

	STDMETHOD_(HRESULT, Scan)(THIS_ MSOAVINFO *pmsoavinfo ) PURE;
};

#ifndef AVVENDOR
MSOAPI_(BOOL) MsoFAnyAntiVirus(HMSOINST hmsoinst);
MSOAPI_(BOOL) MsoFDoAntiVirusScan(HMSOINST hmsoinst, MSOAVINFO *msoavinfo);
MSOAPI_(void) MsoFreeMsoavStuff(HMSOINST hmsoinst);
MSOAPI_(BOOL) MsoFDoSecurityLevelDlg(HMSOINST hmsoinst,DWORD msorid, int *pSecurityLevel, 
	BOOL *pfTrustInstalled, HWND hwndParent, BOOL fShowVirusCheckers,
	WCHAR *wzHelpFile, DWORD dwHelpId);

//output of the Enable/disable macro (edm) dialog
#define msoedmEnable	1
#define	msoedmDisable	2
#define	msoedmDontOpen	3

MSOAPI_(int) MsoMsoedmDialog(HMSOINST hmsoinst, BOOL fAppIsActive, BOOL fHasVBMacros, 
	BOOL fHasXLMMacros, void *pvDigSigStore, void *pvMacro, int nAppID, HWND hwnd, 
	const WCHAR *pwtzPath, int iClient, int iSecurityLevel, int *pmsodsv, 
	WCHAR *wzHelpFile, DWORD dwHelpId, HANDLE hFileDLL, BOOL fUserControl);


//Security level
#define	msoslUndefined	0
#define msoslNone   1
#define	msoslMedium	2
#define msoslHigh	3

MSOAPI_(int) MsoMsoslGetSL(HMSOINST hmsoinst);
MSOAPI_(int) MsoMsoslSetSL(DWORD msorid, HMSOINST hmsoinst);

//output of the digital signature verification (dsv)
#define	msodsvNoMacros	0
#define msodsvUnsigned	1
// msodsvPassedTrusted is very unfortunately named because it has nothing to do with
// trust - it just means that the doc is signed and the signature matched. Too late 
// to change the name now so I'm adding a msodsvPassedTrustedCert to mean the doc was
// signed and cert was trusted.
#define	msodsvPassedTrusted	2
#define	msodsvFailed		3
#define	msodsvLowSecurityLevel 4
#define msodsvPassedTrustedCert 5

#endif //!AVVENDOR


#endif // _MSOAV_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msp_h__
#define __msp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITPluggableTerminalEventSink_FWD_DEFINED__
#define __ITPluggableTerminalEventSink_FWD_DEFINED__
typedef interface ITPluggableTerminalEventSink ITPluggableTerminalEventSink;
#endif 	/* __ITPluggableTerminalEventSink_FWD_DEFINED__ */


#ifndef __ITPluggableTerminalEventSinkRegistration_FWD_DEFINED__
#define __ITPluggableTerminalEventSinkRegistration_FWD_DEFINED__
typedef interface ITPluggableTerminalEventSinkRegistration ITPluggableTerminalEventSinkRegistration;
#endif 	/* __ITPluggableTerminalEventSinkRegistration_FWD_DEFINED__ */


#ifndef __ITMSPAddress_FWD_DEFINED__
#define __ITMSPAddress_FWD_DEFINED__
typedef interface ITMSPAddress ITMSPAddress;
#endif 	/* __ITMSPAddress_FWD_DEFINED__ */


/* header files for imported files */
#include "tapi3if.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msp_0000_0000 */
/* [local] */ 

/* Copyright (c) Microsoft Corporation. All rights reserved.*/
typedef long *MSP_HANDLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msp_0000_0000_0001
    {	ADDRESS_TERMINAL_AVAILABLE	= 0,
	ADDRESS_TERMINAL_UNAVAILABLE	= ( ADDRESS_TERMINAL_AVAILABLE + 1 ) 
    } 	MSP_ADDRESS_EVENT;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msp_0000_0000_0002
    {	CALL_NEW_STREAM	= 0,
	CALL_STREAM_FAIL	= ( CALL_NEW_STREAM + 1 ) ,
	CALL_TERMINAL_FAIL	= ( CALL_STREAM_FAIL + 1 ) ,
	CALL_STREAM_NOT_USED	= ( CALL_TERMINAL_FAIL + 1 ) ,
	CALL_STREAM_ACTIVE	= ( CALL_STREAM_NOT_USED + 1 ) ,
	CALL_STREAM_INACTIVE	= ( CALL_STREAM_ACTIVE + 1 ) 
    } 	MSP_CALL_EVENT;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msp_0000_0000_0003
    {	CALL_CAUSE_UNKNOWN	= 0,
	CALL_CAUSE_BAD_DEVICE	= ( CALL_CAUSE_UNKNOWN + 1 ) ,
	CALL_CAUSE_CONNECT_FAIL	= ( CALL_CAUSE_BAD_DEVICE + 1 ) ,
	CALL_CAUSE_LOCAL_REQUEST	= ( CALL_CAUSE_CONNECT_FAIL + 1 ) ,
	CALL_CAUSE_REMOTE_REQUEST	= ( CALL_CAUSE_LOCAL_REQUEST + 1 ) ,
	CALL_CAUSE_MEDIA_TIMEOUT	= ( CALL_CAUSE_REMOTE_REQUEST + 1 ) ,
	CALL_CAUSE_MEDIA_RECOVERED	= ( CALL_CAUSE_MEDIA_TIMEOUT + 1 ) ,
	CALL_CAUSE_QUALITY_OF_SERVICE	= ( CALL_CAUSE_MEDIA_RECOVERED + 1 ) 
    } 	MSP_CALL_EVENT_CAUSE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msp_0000_0000_0004
    {	ME_ADDRESS_EVENT	= 0,
	ME_CALL_EVENT	= ( ME_ADDRESS_EVENT + 1 ) ,
	ME_TSP_DATA	= ( ME_CALL_EVENT + 1 ) ,
	ME_PRIVATE_EVENT	= ( ME_TSP_DATA + 1 ) ,
	ME_ASR_TERMINAL_EVENT	= ( ME_PRIVATE_EVENT + 1 ) ,
	ME_TTS_TERMINAL_EVENT	= ( ME_ASR_TERMINAL_EVENT + 1 ) ,
	ME_FILE_TERMINAL_EVENT	= ( ME_TTS_TERMINAL_EVENT + 1 ) ,
	ME_TONE_TERMINAL_EVENT	= ( ME_FILE_TERMINAL_EVENT + 1 ) 
    } 	MSP_EVENT;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msp_0000_0000_0005
    {
    DWORD dwSize;
    MSP_EVENT Event;
    MSP_HANDLE hCall;
    union 
        {
        struct 
            {
            MSP_ADDRESS_EVENT Type;
            ITTerminal *pTerminal;
            } 	MSP_ADDRESS_EVENT_INFO;
        struct 
            {
            MSP_CALL_EVENT Type;
            MSP_CALL_EVENT_CAUSE Cause;
            ITStream *pStream;
            ITTerminal *pTerminal;
            HRESULT hrError;
            } 	MSP_CALL_EVENT_INFO;
        struct 
            {
            DWORD dwBufferSize;
            BYTE pBuffer[ 1 ];
            } 	MSP_TSP_DATA;
        struct 
            {
            IDispatch *pEvent;
            long lEventCode;
            } 	MSP_PRIVATE_EVENT_INFO;
        struct 
            {
            ITTerminal *pParentFileTerminal;
            ITFileTrack *pFileTrack;
            TERMINAL_MEDIA_STATE TerminalMediaState;
            FT_STATE_EVENT_CAUSE ftecEventCause;
            HRESULT hrErrorCode;
            } 	MSP_FILE_TERMINAL_EVENT_INFO;
        struct 
            {
            ITTerminal *pASRTerminal;
            HRESULT hrErrorCode;
            } 	MSP_ASR_TERMINAL_EVENT_INFO;
        struct 
            {
            ITTerminal *pTTSTerminal;
            HRESULT hrErrorCode;
            } 	MSP_TTS_TERMINAL_EVENT_INFO;
        struct 
            {
            ITTerminal *pToneTerminal;
            HRESULT hrErrorCode;
            } 	MSP_TONE_TERMINAL_EVENT_INFO;
        } 	;
    } 	MSP_EVENT_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msp_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msp_0000_0000_v0_0_s_ifspec;

#ifndef __ITPluggableTerminalEventSink_INTERFACE_DEFINED__
#define __ITPluggableTerminalEventSink_INTERFACE_DEFINED__

/* interface ITPluggableTerminalEventSink */
/* [object][unique][helpstring][uuid] */ 


EXTERN_C const IID IID_ITPluggableTerminalEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6E0887BE-BA1A-492e-BD10-4020EC5E33E0")
    ITPluggableTerminalEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FireEvent( 
            /* [in] */ __RPC__in const MSP_EVENT_INFO *pMspEventInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITPluggableTerminalEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITPluggableTerminalEventSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITPluggableTerminalEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITPluggableTerminalEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *FireEvent )( 
            __RPC__in ITPluggableTerminalEventSink * This,
            /* [in] */ __RPC__in const MSP_EVENT_INFO *pMspEventInfo);
        
        END_INTERFACE
    } ITPluggableTerminalEventSinkVtbl;

    interface ITPluggableTerminalEventSink
    {
        CONST_VTBL struct ITPluggableTerminalEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITPluggableTerminalEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITPluggableTerminalEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITPluggableTerminalEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITPluggableTerminalEventSink_FireEvent(This,pMspEventInfo)	\
    ( (This)->lpVtbl -> FireEvent(This,pMspEventInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITPluggableTerminalEventSink_INTERFACE_DEFINED__ */


#ifndef __ITPluggableTerminalEventSinkRegistration_INTERFACE_DEFINED__
#define __ITPluggableTerminalEventSinkRegistration_INTERFACE_DEFINED__

/* interface ITPluggableTerminalEventSinkRegistration */
/* [object][unique][helpstring][uuid] */ 


EXTERN_C const IID IID_ITPluggableTerminalEventSinkRegistration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F7115709-A216-4957-A759-060AB32A90D1")
    ITPluggableTerminalEventSinkRegistration : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterSink( 
            /* [in] */ __RPC__in_opt ITPluggableTerminalEventSink *pEventSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterSink( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITPluggableTerminalEventSinkRegistrationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITPluggableTerminalEventSinkRegistration * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITPluggableTerminalEventSinkRegistration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITPluggableTerminalEventSinkRegistration * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterSink )( 
            __RPC__in ITPluggableTerminalEventSinkRegistration * This,
            /* [in] */ __RPC__in_opt ITPluggableTerminalEventSink *pEventSink);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterSink )( 
            __RPC__in ITPluggableTerminalEventSinkRegistration * This);
        
        END_INTERFACE
    } ITPluggableTerminalEventSinkRegistrationVtbl;

    interface ITPluggableTerminalEventSinkRegistration
    {
        CONST_VTBL struct ITPluggableTerminalEventSinkRegistrationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITPluggableTerminalEventSinkRegistration_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITPluggableTerminalEventSinkRegistration_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITPluggableTerminalEventSinkRegistration_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITPluggableTerminalEventSinkRegistration_RegisterSink(This,pEventSink)	\
    ( (This)->lpVtbl -> RegisterSink(This,pEventSink) ) 

#define ITPluggableTerminalEventSinkRegistration_UnregisterSink(This)	\
    ( (This)->lpVtbl -> UnregisterSink(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITPluggableTerminalEventSinkRegistration_INTERFACE_DEFINED__ */


#ifndef __ITMSPAddress_INTERFACE_DEFINED__
#define __ITMSPAddress_INTERFACE_DEFINED__

/* interface ITMSPAddress */
/* [object][unique][helpstring][uuid] */ 


EXTERN_C const IID IID_ITMSPAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EE3BD600-3868-11D2-A045-00C04FB6809F")
    ITMSPAddress : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ __RPC__in MSP_HANDLE hEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateMSPCall( 
            /* [in] */ __RPC__in MSP_HANDLE hCall,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwMediaType,
            /* [in] */ __RPC__in_opt IUnknown *pOuterUnknown,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppStreamControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutdownMSPCall( 
            /* [in] */ __RPC__in_opt IUnknown *pStreamControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReceiveTSPData( 
            /* [in] */ __RPC__in_opt IUnknown *pMSPCall,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pBuffer,
            /* [in] */ DWORD dwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEvent( 
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) byte *pEventBuffer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITMSPAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITMSPAddress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITMSPAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITMSPAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in ITMSPAddress * This,
            /* [in] */ __RPC__in MSP_HANDLE hEvent);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            __RPC__in ITMSPAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateMSPCall )( 
            __RPC__in ITMSPAddress * This,
            /* [in] */ __RPC__in MSP_HANDLE hCall,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwMediaType,
            /* [in] */ __RPC__in_opt IUnknown *pOuterUnknown,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppStreamControl);
        
        HRESULT ( STDMETHODCALLTYPE *ShutdownMSPCall )( 
            __RPC__in ITMSPAddress * This,
            /* [in] */ __RPC__in_opt IUnknown *pStreamControl);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveTSPData )( 
            __RPC__in ITMSPAddress * This,
            /* [in] */ __RPC__in_opt IUnknown *pMSPCall,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pBuffer,
            /* [in] */ DWORD dwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            __RPC__in ITMSPAddress * This,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) byte *pEventBuffer);
        
        END_INTERFACE
    } ITMSPAddressVtbl;

    interface ITMSPAddress
    {
        CONST_VTBL struct ITMSPAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITMSPAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITMSPAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITMSPAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITMSPAddress_Initialize(This,hEvent)	\
    ( (This)->lpVtbl -> Initialize(This,hEvent) ) 

#define ITMSPAddress_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#define ITMSPAddress_CreateMSPCall(This,hCall,dwReserved,dwMediaType,pOuterUnknown,ppStreamControl)	\
    ( (This)->lpVtbl -> CreateMSPCall(This,hCall,dwReserved,dwMediaType,pOuterUnknown,ppStreamControl) ) 

#define ITMSPAddress_ShutdownMSPCall(This,pStreamControl)	\
    ( (This)->lpVtbl -> ShutdownMSPCall(This,pStreamControl) ) 

#define ITMSPAddress_ReceiveTSPData(This,pMSPCall,pBuffer,dwSize)	\
    ( (This)->lpVtbl -> ReceiveTSPData(This,pMSPCall,pBuffer,dwSize) ) 

#define ITMSPAddress_GetEvent(This,pdwSize,pEventBuffer)	\
    ( (This)->lpVtbl -> GetEvent(This,pdwSize,pEventBuffer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITMSPAddress_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msopc.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msopc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __msopc_h__
#define __msopc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IOpcUri_FWD_DEFINED__
#define __IOpcUri_FWD_DEFINED__
typedef interface IOpcUri IOpcUri;
#endif 	/* __IOpcUri_FWD_DEFINED__ */


#ifndef __IOpcPartUri_FWD_DEFINED__
#define __IOpcPartUri_FWD_DEFINED__
typedef interface IOpcPartUri IOpcPartUri;
#endif 	/* __IOpcPartUri_FWD_DEFINED__ */


#ifndef __IOpcPackage_FWD_DEFINED__
#define __IOpcPackage_FWD_DEFINED__
typedef interface IOpcPackage IOpcPackage;
#endif 	/* __IOpcPackage_FWD_DEFINED__ */


#ifndef __IOpcPart_FWD_DEFINED__
#define __IOpcPart_FWD_DEFINED__
typedef interface IOpcPart IOpcPart;
#endif 	/* __IOpcPart_FWD_DEFINED__ */


#ifndef __IOpcRelationship_FWD_DEFINED__
#define __IOpcRelationship_FWD_DEFINED__
typedef interface IOpcRelationship IOpcRelationship;
#endif 	/* __IOpcRelationship_FWD_DEFINED__ */


#ifndef __IOpcPartSet_FWD_DEFINED__
#define __IOpcPartSet_FWD_DEFINED__
typedef interface IOpcPartSet IOpcPartSet;
#endif 	/* __IOpcPartSet_FWD_DEFINED__ */


#ifndef __IOpcRelationshipSet_FWD_DEFINED__
#define __IOpcRelationshipSet_FWD_DEFINED__
typedef interface IOpcRelationshipSet IOpcRelationshipSet;
#endif 	/* __IOpcRelationshipSet_FWD_DEFINED__ */


#ifndef __IOpcPartEnumerator_FWD_DEFINED__
#define __IOpcPartEnumerator_FWD_DEFINED__
typedef interface IOpcPartEnumerator IOpcPartEnumerator;
#endif 	/* __IOpcPartEnumerator_FWD_DEFINED__ */


#ifndef __IOpcRelationshipEnumerator_FWD_DEFINED__
#define __IOpcRelationshipEnumerator_FWD_DEFINED__
typedef interface IOpcRelationshipEnumerator IOpcRelationshipEnumerator;
#endif 	/* __IOpcRelationshipEnumerator_FWD_DEFINED__ */


#ifndef __IOpcSignaturePartReference_FWD_DEFINED__
#define __IOpcSignaturePartReference_FWD_DEFINED__
typedef interface IOpcSignaturePartReference IOpcSignaturePartReference;
#endif 	/* __IOpcSignaturePartReference_FWD_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReference_FWD_DEFINED__
#define __IOpcSignatureRelationshipReference_FWD_DEFINED__
typedef interface IOpcSignatureRelationshipReference IOpcSignatureRelationshipReference;
#endif 	/* __IOpcSignatureRelationshipReference_FWD_DEFINED__ */


#ifndef __IOpcRelationshipSelector_FWD_DEFINED__
#define __IOpcRelationshipSelector_FWD_DEFINED__
typedef interface IOpcRelationshipSelector IOpcRelationshipSelector;
#endif 	/* __IOpcRelationshipSelector_FWD_DEFINED__ */


#ifndef __IOpcSignatureReference_FWD_DEFINED__
#define __IOpcSignatureReference_FWD_DEFINED__
typedef interface IOpcSignatureReference IOpcSignatureReference;
#endif 	/* __IOpcSignatureReference_FWD_DEFINED__ */


#ifndef __IOpcSignatureCustomObject_FWD_DEFINED__
#define __IOpcSignatureCustomObject_FWD_DEFINED__
typedef interface IOpcSignatureCustomObject IOpcSignatureCustomObject;
#endif 	/* __IOpcSignatureCustomObject_FWD_DEFINED__ */


#ifndef __IOpcDigitalSignature_FWD_DEFINED__
#define __IOpcDigitalSignature_FWD_DEFINED__
typedef interface IOpcDigitalSignature IOpcDigitalSignature;
#endif 	/* __IOpcDigitalSignature_FWD_DEFINED__ */


#ifndef __IOpcSigningOptions_FWD_DEFINED__
#define __IOpcSigningOptions_FWD_DEFINED__
typedef interface IOpcSigningOptions IOpcSigningOptions;
#endif 	/* __IOpcSigningOptions_FWD_DEFINED__ */


#ifndef __IOpcDigitalSignatureManager_FWD_DEFINED__
#define __IOpcDigitalSignatureManager_FWD_DEFINED__
typedef interface IOpcDigitalSignatureManager IOpcDigitalSignatureManager;
#endif 	/* __IOpcDigitalSignatureManager_FWD_DEFINED__ */


#ifndef __IOpcSignaturePartReferenceEnumerator_FWD_DEFINED__
#define __IOpcSignaturePartReferenceEnumerator_FWD_DEFINED__
typedef interface IOpcSignaturePartReferenceEnumerator IOpcSignaturePartReferenceEnumerator;
#endif 	/* __IOpcSignaturePartReferenceEnumerator_FWD_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReferenceEnumerator_FWD_DEFINED__
#define __IOpcSignatureRelationshipReferenceEnumerator_FWD_DEFINED__
typedef interface IOpcSignatureRelationshipReferenceEnumerator IOpcSignatureRelationshipReferenceEnumerator;
#endif 	/* __IOpcSignatureRelationshipReferenceEnumerator_FWD_DEFINED__ */


#ifndef __IOpcRelationshipSelectorEnumerator_FWD_DEFINED__
#define __IOpcRelationshipSelectorEnumerator_FWD_DEFINED__
typedef interface IOpcRelationshipSelectorEnumerator IOpcRelationshipSelectorEnumerator;
#endif 	/* __IOpcRelationshipSelectorEnumerator_FWD_DEFINED__ */


#ifndef __IOpcSignatureReferenceEnumerator_FWD_DEFINED__
#define __IOpcSignatureReferenceEnumerator_FWD_DEFINED__
typedef interface IOpcSignatureReferenceEnumerator IOpcSignatureReferenceEnumerator;
#endif 	/* __IOpcSignatureReferenceEnumerator_FWD_DEFINED__ */


#ifndef __IOpcSignatureCustomObjectEnumerator_FWD_DEFINED__
#define __IOpcSignatureCustomObjectEnumerator_FWD_DEFINED__
typedef interface IOpcSignatureCustomObjectEnumerator IOpcSignatureCustomObjectEnumerator;
#endif 	/* __IOpcSignatureCustomObjectEnumerator_FWD_DEFINED__ */


#ifndef __IOpcCertificateEnumerator_FWD_DEFINED__
#define __IOpcCertificateEnumerator_FWD_DEFINED__
typedef interface IOpcCertificateEnumerator IOpcCertificateEnumerator;
#endif 	/* __IOpcCertificateEnumerator_FWD_DEFINED__ */


#ifndef __IOpcDigitalSignatureEnumerator_FWD_DEFINED__
#define __IOpcDigitalSignatureEnumerator_FWD_DEFINED__
typedef interface IOpcDigitalSignatureEnumerator IOpcDigitalSignatureEnumerator;
#endif 	/* __IOpcDigitalSignatureEnumerator_FWD_DEFINED__ */


#ifndef __IOpcSignaturePartReferenceSet_FWD_DEFINED__
#define __IOpcSignaturePartReferenceSet_FWD_DEFINED__
typedef interface IOpcSignaturePartReferenceSet IOpcSignaturePartReferenceSet;
#endif 	/* __IOpcSignaturePartReferenceSet_FWD_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReferenceSet_FWD_DEFINED__
#define __IOpcSignatureRelationshipReferenceSet_FWD_DEFINED__
typedef interface IOpcSignatureRelationshipReferenceSet IOpcSignatureRelationshipReferenceSet;
#endif 	/* __IOpcSignatureRelationshipReferenceSet_FWD_DEFINED__ */


#ifndef __IOpcRelationshipSelectorSet_FWD_DEFINED__
#define __IOpcRelationshipSelectorSet_FWD_DEFINED__
typedef interface IOpcRelationshipSelectorSet IOpcRelationshipSelectorSet;
#endif 	/* __IOpcRelationshipSelectorSet_FWD_DEFINED__ */


#ifndef __IOpcSignatureReferenceSet_FWD_DEFINED__
#define __IOpcSignatureReferenceSet_FWD_DEFINED__
typedef interface IOpcSignatureReferenceSet IOpcSignatureReferenceSet;
#endif 	/* __IOpcSignatureReferenceSet_FWD_DEFINED__ */


#ifndef __IOpcSignatureCustomObjectSet_FWD_DEFINED__
#define __IOpcSignatureCustomObjectSet_FWD_DEFINED__
typedef interface IOpcSignatureCustomObjectSet IOpcSignatureCustomObjectSet;
#endif 	/* __IOpcSignatureCustomObjectSet_FWD_DEFINED__ */


#ifndef __IOpcCertificateSet_FWD_DEFINED__
#define __IOpcCertificateSet_FWD_DEFINED__
typedef interface IOpcCertificateSet IOpcCertificateSet;
#endif 	/* __IOpcCertificateSet_FWD_DEFINED__ */


#ifndef __IOpcFactory_FWD_DEFINED__
#define __IOpcFactory_FWD_DEFINED__
typedef interface IOpcFactory IOpcFactory;
#endif 	/* __IOpcFactory_FWD_DEFINED__ */


#ifndef __OpcFactory_FWD_DEFINED__
#define __OpcFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class OpcFactory OpcFactory;
#else
typedef struct OpcFactory OpcFactory;
#endif /* __cplusplus */

#endif 	/* __OpcFactory_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wincrypt.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msopc_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if (NTDDI_VERSION >= NTDDI_WIN7)


extern RPC_IF_HANDLE __MIDL_itf_msopc_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msopc_0000_0000_v0_0_s_ifspec;


#ifndef __MSOPC_LIBRARY_DEFINED__
#define __MSOPC_LIBRARY_DEFINED__

/* library MSOPC */
/* [lcid][version][uuid] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef /* [public][public][public][v1_enum] */ 
enum __MIDL___MIDL_itf_msopc_0000_0000_0001
    {	OPC_URI_TARGET_MODE_INTERNAL	= 0,
	OPC_URI_TARGET_MODE_EXTERNAL	= 1
    } 	OPC_URI_TARGET_MODE;

typedef /* [public][public][public][v1_enum] */ 
enum __MIDL___MIDL_itf_msopc_0000_0000_0002
    {	OPC_COMPRESSION_NONE	= -1,
	OPC_COMPRESSION_NORMAL	= 0,
	OPC_COMPRESSION_MAXIMUM	= 1,
	OPC_COMPRESSION_FAST	= 2,
	OPC_COMPRESSION_SUPERFAST	= 3
    } 	OPC_COMPRESSION_OPTIONS;

typedef /* [public][public][v1_enum] */ 
enum __MIDL___MIDL_itf_msopc_0000_0000_0003
    {	OPC_STREAM_IO_READ	= 1,
	OPC_STREAM_IO_WRITE	= 2
    } 	OPC_STREAM_IO_MODE;

#define IS_OPC_CONFORMANCE_ERROR(x) (((x) & 0x1FFFF000) == (0x0000+(FACILITY_OPC << 16)))
#define IS_ZIP_CONFORMANCE_ERROR(x) (((x) & 0x1FFFF000) == (0x1000+(FACILITY_OPC << 16)))
#define OPC_E_NONCONFORMING_URI MAKE_HRESULT(1, FACILITY_OPC, 0x1)
#define OPC_E_RELATIVE_URI_REQUIRED MAKE_HRESULT(1, FACILITY_OPC, 0x2)
#define OPC_E_RELATIONSHIP_URI_REQUIRED MAKE_HRESULT(1, FACILITY_OPC, 0x3)
#define OPC_E_PART_CANNOT_BE_DIRECTORY MAKE_HRESULT(1, FACILITY_OPC, 0x4)
#define OPC_E_UNEXPECTED_CONTENT_TYPE MAKE_HRESULT(1, FACILITY_OPC, 0x5)
#define OPC_E_INVALID_CONTENT_TYPE_XML MAKE_HRESULT(1, FACILITY_OPC, 0x6)
#define OPC_E_MISSING_CONTENT_TYPES MAKE_HRESULT(1, FACILITY_OPC, 0x7)
#define OPC_E_NONCONFORMING_CONTENT_TYPES_XML MAKE_HRESULT(1, FACILITY_OPC, 0x8)
#define OPC_E_NONCONFORMING_RELS_XML MAKE_HRESULT(1, FACILITY_OPC, 0x9)
#define OPC_E_INVALID_RELS_XML MAKE_HRESULT(1, FACILITY_OPC, 0xA)
#define OPC_E_DUPLICATE_PART MAKE_HRESULT(1, FACILITY_OPC, 0xB)
#define OPC_E_INVALID_OVERRIDE_PART_NAME MAKE_HRESULT(1, FACILITY_OPC, 0xC)
#define OPC_E_DUPLICATE_OVERRIDE_PART MAKE_HRESULT(1, FACILITY_OPC, 0xD)
#define OPC_E_INVALID_DEFAULT_EXTENSION MAKE_HRESULT(1, FACILITY_OPC, 0xE)
#define OPC_E_DUPLICATE_DEFAULT_EXTENSION MAKE_HRESULT(1, FACILITY_OPC, 0xF)
#define OPC_E_INVALID_RELATIONSHIP_ID MAKE_HRESULT(1, FACILITY_OPC, 0x10)
#define OPC_E_INVALID_RELATIONSHIP_TYPE MAKE_HRESULT(1, FACILITY_OPC, 0x11)
#define OPC_E_INVALID_RELATIONSHIP_TARGET MAKE_HRESULT(1, FACILITY_OPC, 0x12)
#define OPC_E_DUPLICATE_RELATIONSHIP MAKE_HRESULT(1, FACILITY_OPC, 0x13)
#define OPC_E_CONFLICTING_SETTINGS MAKE_HRESULT(1, FACILITY_OPC, 0x14)
#define OPC_E_DUPLICATE_PIECE MAKE_HRESULT(1, FACILITY_OPC, 0x15)
#define OPC_E_INVALID_PIECE MAKE_HRESULT(1, FACILITY_OPC, 0x16)
#define OPC_E_MISSING_PIECE MAKE_HRESULT(1, FACILITY_OPC, 0x17)
#define OPC_E_NO_SUCH_PART MAKE_HRESULT(1, FACILITY_OPC, 0x18)
#define OPC_E_DS_SIGNATURE_CORRUPT MAKE_HRESULT(1, FACILITY_OPC, 0x19)
#define OPC_E_DS_DIGEST_VALUE_ERROR MAKE_HRESULT(1, FACILITY_OPC, 0x1A)
#define OPC_E_DS_DUPLICATE_SIGNATURE_ORIGIN_RELATIONSHIP MAKE_HRESULT(1, FACILITY_OPC, 0x1B)
#define OPC_E_DS_INVALID_SIGNATURE_ORIGIN_RELATIONSHIP MAKE_HRESULT(1, FACILITY_OPC, 0x1C)
#define OPC_E_DS_INVALID_CERTIFICATE_RELATIONSHIP MAKE_HRESULT(1, FACILITY_OPC, 0x1D)
#define OPC_E_DS_EXTERNAL_SIGNATURE MAKE_HRESULT(1, FACILITY_OPC, 0x1E)
#define OPC_E_DS_MISSING_SIGNATURE_ORIGIN_PART MAKE_HRESULT(1, FACILITY_OPC, 0x1F)
#define OPC_E_DS_MISSING_SIGNATURE_PART MAKE_HRESULT(1, FACILITY_OPC, 0x20)
#define OPC_E_DS_INVALID_RELATIONSHIP_TRANSFORM_XML MAKE_HRESULT(1, FACILITY_OPC, 0x21)
#define OPC_E_DS_INVALID_CANONICALIZATION_METHOD MAKE_HRESULT(1, FACILITY_OPC, 0x22)
#define OPC_E_DS_INVALID_RELATIONSHIPS_SIGNING_OPTION MAKE_HRESULT(1, FACILITY_OPC, 0x23)
#define OPC_E_DS_INVALID_OPC_SIGNATURE_TIME_FORMAT MAKE_HRESULT(1, FACILITY_OPC, 0x24)
#define OPC_E_DS_PACKAGE_REFERENCE_URI_RESERVED MAKE_HRESULT(1, FACILITY_OPC, 0x25)
#define OPC_E_DS_MISSING_SIGNATURE_PROPERTIES_ELEMENT MAKE_HRESULT(1, FACILITY_OPC, 0x26)
#define OPC_E_DS_MISSING_SIGNATURE_PROPERTY_ELEMENT MAKE_HRESULT(1, FACILITY_OPC, 0x27)
#define OPC_E_DS_DUPLICATE_SIGNATURE_PROPERTY_ELEMENT MAKE_HRESULT(1, FACILITY_OPC, 0x28)
#define OPC_E_DS_MISSING_SIGNATURE_TIME_PROPERTY MAKE_HRESULT(1, FACILITY_OPC, 0x29)
#define OPC_E_DS_INVALID_SIGNATURE_XML MAKE_HRESULT(1, FACILITY_OPC, 0x2A)
#define OPC_E_DS_INVALID_SIGNATURE_COUNT MAKE_HRESULT(1, FACILITY_OPC, 0x2B)
#define OPC_E_DS_MISSING_SIGNATURE_ALGORITHM MAKE_HRESULT(1, FACILITY_OPC, 0x2C)
#define OPC_E_DS_DUPLICATE_PACKAGE_OBJECT_REFERENCES MAKE_HRESULT(1, FACILITY_OPC, 0x2D)
#define OPC_E_DS_MISSING_PACKAGE_OBJECT_REFERENCE MAKE_HRESULT(1, FACILITY_OPC, 0x2E)
#define OPC_E_DS_EXTERNAL_SIGNATURE_REFERENCE MAKE_HRESULT(1, FACILITY_OPC, 0x2F)
#define OPC_E_DS_REFERENCE_MISSING_CONTENT_TYPE MAKE_HRESULT(1, FACILITY_OPC, 0x30)
#define OPC_E_DS_MULTIPLE_RELATIONSHIP_TRANSFORMS MAKE_HRESULT(1, FACILITY_OPC, 0x31)
#define OPC_E_DS_MISSING_CANONICALIZATION_TRANSFORM MAKE_HRESULT(1, FACILITY_OPC, 0x32)
#define OPC_E_MC_UNEXPECTED_ELEMENT MAKE_HRESULT(1, FACILITY_OPC, 0x33)
#define OPC_E_MC_UNEXPECTED_REQUIRES_ATTR MAKE_HRESULT(1, FACILITY_OPC, 0x34)
#define OPC_E_MC_MISSING_REQUIRES_ATTR MAKE_HRESULT(1, FACILITY_OPC, 0x35)
#define OPC_E_MC_UNEXPECTED_ATTR MAKE_HRESULT(1, FACILITY_OPC, 0x36)
#define OPC_E_MC_INVALID_PREFIX_LIST MAKE_HRESULT(1, FACILITY_OPC, 0x37)
#define OPC_E_MC_INVALID_QNAME_LIST MAKE_HRESULT(1, FACILITY_OPC, 0x38)
#define OPC_E_MC_NESTED_ALTERNATE_CONTENT MAKE_HRESULT(1, FACILITY_OPC, 0x39)
#define OPC_E_MC_UNEXPECTED_CHOICE MAKE_HRESULT(1, FACILITY_OPC, 0x3A)
#define OPC_E_MC_MISSING_CHOICE MAKE_HRESULT(1, FACILITY_OPC, 0x3B)
#define OPC_E_MC_INVALID_ENUM_TYPE MAKE_HRESULT(1, FACILITY_OPC, 0x3C)
#define OPC_E_MC_UNKNOWN_NAMESPACE MAKE_HRESULT(1, FACILITY_OPC, 0x3E)
#define OPC_E_MC_UNKNOWN_PREFIX MAKE_HRESULT(1, FACILITY_OPC, 0x3F)
#define OPC_E_MC_INVALID_ATTRIBUTES_ON_IGNORABLE_ELEMENT MAKE_HRESULT(1, FACILITY_OPC, 0x40)
#define OPC_E_MC_INVALID_XMLNS_ATTRIBUTE MAKE_HRESULT(1, FACILITY_OPC, 0x41)
#define OPC_E_INVALID_XML_ENCODING MAKE_HRESULT(1, FACILITY_OPC, 0x42)
#define OPC_E_DS_SIGNATURE_REFERENCE_MISSING_URI MAKE_HRESULT(1, FACILITY_OPC, 0x43)
#define OPC_E_INVALID_CONTENT_TYPE MAKE_HRESULT(1, FACILITY_OPC, 0x44)
#define OPC_E_DS_SIGNATURE_PROPERTY_MISSING_TARGET MAKE_HRESULT(1, FACILITY_OPC, 0x45)
#define OPC_E_DS_SIGNATURE_METHOD_NOT_SET MAKE_HRESULT(1, FACILITY_OPC, 0x46)
#define OPC_E_DS_DEFAULT_DIGEST_METHOD_NOT_SET MAKE_HRESULT(1, FACILITY_OPC, 0x47)
#define OPC_E_NO_SUCH_RELATIONSHIP MAKE_HRESULT(1, FACILITY_OPC, 0x48)
#define OPC_E_MC_MULTIPLE_FALLBACK_ELEMENTS MAKE_HRESULT(1, FACILITY_OPC, 0x49)
#define OPC_E_MC_INCONSISTENT_PROCESS_CONTENT MAKE_HRESULT(1, FACILITY_OPC, 0x4A)
#define OPC_E_MC_INCONSISTENT_PRESERVE_ATTRIBUTES MAKE_HRESULT(1, FACILITY_OPC, 0x4B)
#define OPC_E_MC_INCONSISTENT_PRESERVE_ELEMENTS MAKE_HRESULT(1, FACILITY_OPC, 0x4C)
#define OPC_E_INVALID_RELATIONSHIP_TARGET_MODE MAKE_HRESULT(1, FACILITY_OPC, 0x4D)
#define OPC_E_COULD_NOT_RECOVER MAKE_HRESULT(1, FACILITY_OPC, 0x4E)
#define OPC_E_UNSUPPORTED_PACKAGE MAKE_HRESULT(1, FACILITY_OPC, 0x4F)
#define OPC_E_ENUM_COLLECTION_CHANGED MAKE_HRESULT(1, FACILITY_OPC, 0x50)
#define OPC_E_ENUM_CANNOT_MOVE_NEXT MAKE_HRESULT(1, FACILITY_OPC, 0x51)
#define OPC_E_ENUM_CANNOT_MOVE_PREVIOUS MAKE_HRESULT(1, FACILITY_OPC, 0x52)
#define OPC_E_ENUM_INVALID_POSITION MAKE_HRESULT(1, FACILITY_OPC, 0x53)
#define OPC_E_DS_SIGNATURE_ORIGIN_EXISTS MAKE_HRESULT(1, FACILITY_OPC, 0x54)
#define OPC_E_DS_UNSIGNED_PACKAGE MAKE_HRESULT(1, FACILITY_OPC, 0x55)
#define OPC_E_DS_MISSING_CERTIFICATE_PART MAKE_HRESULT(1, FACILITY_OPC, 0x56)
#define OPC_E_ZIP_INCORRECT_DATA_SIZE MAKE_HRESULT(1, FACILITY_OPC, 0x1001)
#define OPC_E_ZIP_CORRUPTED_ARCHIVE MAKE_HRESULT(1, FACILITY_OPC, 0x1002)
#define OPC_E_ZIP_COMPRESSION_FAILED MAKE_HRESULT(1, FACILITY_OPC, 0x1003)
#define OPC_E_ZIP_DECOMPRESSION_FAILED MAKE_HRESULT(1, FACILITY_OPC, 0x1004)
#define OPC_E_ZIP_INCONSISTENT_FILEITEM MAKE_HRESULT(1, FACILITY_OPC, 0x1005)
#define OPC_E_ZIP_INCONSISTENT_DIRECTORY MAKE_HRESULT(1, FACILITY_OPC, 0x1006)
#define OPC_E_ZIP_MISSING_DATA_DESCRIPTOR MAKE_HRESULT(1, FACILITY_OPC, 0x1007)
#define OPC_E_ZIP_UNSUPPORTEDARCHIVE MAKE_HRESULT(1, FACILITY_OPC, 0x1008)
#define OPC_E_ZIP_CENTRAL_DIRECTORY_TOO_LARGE MAKE_HRESULT(1, FACILITY_OPC, 0x1009)
#define OPC_E_ZIP_NAME_TOO_LARGE MAKE_HRESULT(1, FACILITY_OPC, 0x100A)
#define OPC_E_ZIP_DUPLICATE_NAME MAKE_HRESULT(1, FACILITY_OPC, 0x100B)
#define OPC_E_ZIP_COMMENT_TOO_LARGE MAKE_HRESULT(1, FACILITY_OPC, 0x100C)
#define OPC_E_ZIP_EXTRA_FIELDS_TOO_LARGE MAKE_HRESULT(1, FACILITY_OPC, 0x100D)
#define OPC_E_ZIP_FILE_HEADER_TOO_LARGE MAKE_HRESULT(1, FACILITY_OPC, 0x100E)
#define OPC_E_ZIP_MISSING_END_OF_CENTRAL_DIRECTORY MAKE_HRESULT(1, FACILITY_OPC, 0x100F)
#define OPC_E_ZIP_REQUIRES_64_BIT MAKE_HRESULT(1, FACILITY_OPC, 0x1010)
#endif // (NTDDI >= NTDDI_WIN7)
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if (NTDDI_VERSION >= NTDDI_WIN7)


#endif // (NTDDI >= NTDDI_WIN7)
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if (NTDDI_VERSION >= NTDDI_WIN7)







typedef /* [public][public][v1_enum] */ 
enum __MIDL___MIDL_itf_msopc_0001_0067_0001
    {	OPC_READ_DEFAULT	= 0,
	OPC_VALIDATE_ON_LOAD	= 0x1,
	OPC_CACHE_ON_ACCESS	= 0x2
    } 	OPC_READ_FLAGS;

DEFINE_ENUM_FLAG_OPERATORS(OPC_READ_FLAGS);
typedef /* [public][public][v1_enum] */ 
enum __MIDL___MIDL_itf_msopc_0001_0067_0002
    {	OPC_WRITE_DEFAULT	= 0,
	OPC_WRITE_FORCE_ZIP32	= 0x1
    } 	OPC_WRITE_FLAGS;

DEFINE_ENUM_FLAG_OPERATORS(OPC_WRITE_FLAGS);
#endif // (NTDDI >= NTDDI_WIN7)
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if (NTDDI_VERSION >= NTDDI_WIN7)





















typedef 
enum OPC_SIGNATURE_VALIDATION_RESULT
    {	OPC_SIGNATURE_VALID	= 0,
	OPC_SIGNATURE_INVALID	= -1
    } 	OPC_SIGNATURE_VALIDATION_RESULT;

typedef /* [public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msopc_0001_0074_0001
    {	OPC_CANONICALIZATION_NONE	= 0,
	OPC_CANONICALIZATION_C14N	= 1,
	OPC_CANONICALIZATION_C14N_WITH_COMMENTS	= 2
    } 	OPC_CANONICALIZATION_METHOD;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msopc_0001_0074_0002
    {	OPC_RELATIONSHIP_SELECT_BY_ID	= 0,
	OPC_RELATIONSHIP_SELECT_BY_TYPE	= 1
    } 	OPC_RELATIONSHIP_SELECTOR;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msopc_0001_0074_0003
    {	OPC_RELATIONSHIP_SIGN_USING_SELECTORS	= 0,
	OPC_RELATIONSHIP_SIGN_PART	= 1
    } 	OPC_RELATIONSHIPS_SIGNING_OPTION;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msopc_0001_0074_0004
    {	OPC_CERTIFICATE_IN_CERTIFICATE_PART	= 0,
	OPC_CERTIFICATE_IN_SIGNATURE_PART	= 1,
	OPC_CERTIFICATE_NOT_EMBEDDED	= 2
    } 	OPC_CERTIFICATE_EMBEDDING_OPTION;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msopc_0001_0074_0005
    {	OPC_SIGNATURE_TIME_FORMAT_MILLISECONDS	= 0,
	OPC_SIGNATURE_TIME_FORMAT_SECONDS	= 1,
	OPC_SIGNATURE_TIME_FORMAT_MINUTES	= 2,
	OPC_SIGNATURE_TIME_FORMAT_DAYS	= 3,
	OPC_SIGNATURE_TIME_FORMAT_MONTHS	= 4,
	OPC_SIGNATURE_TIME_FORMAT_YEARS	= 5
    } 	OPC_SIGNATURE_TIME_FORMAT;

#endif // (NTDDI >= NTDDI_WIN7)

EXTERN_C const IID LIBID_MSOPC;

#ifndef __IOpcUri_INTERFACE_DEFINED__
#define __IOpcUri_INTERFACE_DEFINED__

/* interface IOpcUri */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcUri;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc9c1b9b-d62c-49eb-aef0-3b4e0b28ebed")
    IOpcUri : public IUri
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipsPartUri( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **relationshipPartUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelativeUri( 
            /* [in] */ __RPC__in_opt IOpcPartUri *targetPartUri,
            /* [retval][out] */ __RPC__deref_out_opt IUri **relativeUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CombinePartUri( 
            /* [in] */ __RPC__in_opt IUri *relativeUri,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **combinedUri) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcUriVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcUri * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcUri * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcUri * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyBSTR )( 
            __RPC__in IOpcUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyLength )( 
            __RPC__in IOpcUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out DWORD *pcchProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyDWORD )( 
            __RPC__in IOpcUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out DWORD *pdwProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasProperty )( 
            __RPC__in IOpcUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out BOOL *pfHasProperty);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAbsoluteUri )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrAbsoluteUri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAuthority )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrAuthority);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayUri )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDisplayString);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDomain )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDomain);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetExtension )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrExtension);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFragment )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrFragment);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHost )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrHost);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPassword )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPassword);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPath);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPathAndQuery )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPathAndQuery);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetQuery )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrQuery);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRawUri )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrRawUri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSchemeName )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrSchemeName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUserInfo )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrUserInfo);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUserName )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrUserName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHostType )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__out DWORD *pdwHostType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__out DWORD *pdwPort);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetScheme )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__out DWORD *pdwScheme);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetZone )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__out DWORD *pdwZone);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
            __RPC__in IOpcUri * This,
            /* [out] */ __RPC__out LPDWORD pdwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsEqual )( 
            __RPC__in IOpcUri * This,
            /* [in] */ __RPC__in_opt IUri *pUri,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipsPartUri )( 
            __RPC__in IOpcUri * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **relationshipPartUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelativeUri )( 
            __RPC__in IOpcUri * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *targetPartUri,
            /* [retval][out] */ __RPC__deref_out_opt IUri **relativeUri);
        
        HRESULT ( STDMETHODCALLTYPE *CombinePartUri )( 
            __RPC__in IOpcUri * This,
            /* [in] */ __RPC__in_opt IUri *relativeUri,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **combinedUri);
        
        END_INTERFACE
    } IOpcUriVtbl;

    interface IOpcUri
    {
        CONST_VTBL struct IOpcUriVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcUri_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcUri_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcUri_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcUri_GetPropertyBSTR(This,uriProp,pbstrProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyBSTR(This,uriProp,pbstrProperty,dwFlags) ) 

#define IOpcUri_GetPropertyLength(This,uriProp,pcchProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyLength(This,uriProp,pcchProperty,dwFlags) ) 

#define IOpcUri_GetPropertyDWORD(This,uriProp,pdwProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyDWORD(This,uriProp,pdwProperty,dwFlags) ) 

#define IOpcUri_HasProperty(This,uriProp,pfHasProperty)	\
    ( (This)->lpVtbl -> HasProperty(This,uriProp,pfHasProperty) ) 

#define IOpcUri_GetAbsoluteUri(This,pbstrAbsoluteUri)	\
    ( (This)->lpVtbl -> GetAbsoluteUri(This,pbstrAbsoluteUri) ) 

#define IOpcUri_GetAuthority(This,pbstrAuthority)	\
    ( (This)->lpVtbl -> GetAuthority(This,pbstrAuthority) ) 

#define IOpcUri_GetDisplayUri(This,pbstrDisplayString)	\
    ( (This)->lpVtbl -> GetDisplayUri(This,pbstrDisplayString) ) 

#define IOpcUri_GetDomain(This,pbstrDomain)	\
    ( (This)->lpVtbl -> GetDomain(This,pbstrDomain) ) 

#define IOpcUri_GetExtension(This,pbstrExtension)	\
    ( (This)->lpVtbl -> GetExtension(This,pbstrExtension) ) 

#define IOpcUri_GetFragment(This,pbstrFragment)	\
    ( (This)->lpVtbl -> GetFragment(This,pbstrFragment) ) 

#define IOpcUri_GetHost(This,pbstrHost)	\
    ( (This)->lpVtbl -> GetHost(This,pbstrHost) ) 

#define IOpcUri_GetPassword(This,pbstrPassword)	\
    ( (This)->lpVtbl -> GetPassword(This,pbstrPassword) ) 

#define IOpcUri_GetPath(This,pbstrPath)	\
    ( (This)->lpVtbl -> GetPath(This,pbstrPath) ) 

#define IOpcUri_GetPathAndQuery(This,pbstrPathAndQuery)	\
    ( (This)->lpVtbl -> GetPathAndQuery(This,pbstrPathAndQuery) ) 

#define IOpcUri_GetQuery(This,pbstrQuery)	\
    ( (This)->lpVtbl -> GetQuery(This,pbstrQuery) ) 

#define IOpcUri_GetRawUri(This,pbstrRawUri)	\
    ( (This)->lpVtbl -> GetRawUri(This,pbstrRawUri) ) 

#define IOpcUri_GetSchemeName(This,pbstrSchemeName)	\
    ( (This)->lpVtbl -> GetSchemeName(This,pbstrSchemeName) ) 

#define IOpcUri_GetUserInfo(This,pbstrUserInfo)	\
    ( (This)->lpVtbl -> GetUserInfo(This,pbstrUserInfo) ) 

#define IOpcUri_GetUserName(This,pbstrUserName)	\
    ( (This)->lpVtbl -> GetUserName(This,pbstrUserName) ) 

#define IOpcUri_GetHostType(This,pdwHostType)	\
    ( (This)->lpVtbl -> GetHostType(This,pdwHostType) ) 

#define IOpcUri_GetPort(This,pdwPort)	\
    ( (This)->lpVtbl -> GetPort(This,pdwPort) ) 

#define IOpcUri_GetScheme(This,pdwScheme)	\
    ( (This)->lpVtbl -> GetScheme(This,pdwScheme) ) 

#define IOpcUri_GetZone(This,pdwZone)	\
    ( (This)->lpVtbl -> GetZone(This,pdwZone) ) 

#define IOpcUri_GetProperties(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetProperties(This,pdwFlags) ) 

#define IOpcUri_IsEqual(This,pUri,pfEqual)	\
    ( (This)->lpVtbl -> IsEqual(This,pUri,pfEqual) ) 


#define IOpcUri_GetRelationshipsPartUri(This,relationshipPartUri)	\
    ( (This)->lpVtbl -> GetRelationshipsPartUri(This,relationshipPartUri) ) 

#define IOpcUri_GetRelativeUri(This,targetPartUri,relativeUri)	\
    ( (This)->lpVtbl -> GetRelativeUri(This,targetPartUri,relativeUri) ) 

#define IOpcUri_CombinePartUri(This,relativeUri,combinedUri)	\
    ( (This)->lpVtbl -> CombinePartUri(This,relativeUri,combinedUri) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcUri_INTERFACE_DEFINED__ */


#ifndef __IOpcPartUri_INTERFACE_DEFINED__
#define __IOpcPartUri_INTERFACE_DEFINED__

/* interface IOpcPartUri */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcPartUri;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7d3babe7-88b2-46ba-85cb-4203cb016c87")
    IOpcPartUri : public IOpcUri
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ComparePartUri( 
            /* [in] */ __RPC__in_opt IOpcPartUri *partUri,
            /* [retval][out] */ __RPC__out INT32 *comparisonResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceUri( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRelationshipsPartUri( 
            /* [retval][out] */ __RPC__out BOOL *isRelationshipUri) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcPartUriVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcPartUri * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcPartUri * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcPartUri * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyBSTR )( 
            __RPC__in IOpcPartUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyLength )( 
            __RPC__in IOpcPartUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out DWORD *pcchProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyDWORD )( 
            __RPC__in IOpcPartUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out DWORD *pdwProperty,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasProperty )( 
            __RPC__in IOpcPartUri * This,
            /* [range][in] */ Uri_PROPERTY uriProp,
            /* [out] */ __RPC__out BOOL *pfHasProperty);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAbsoluteUri )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrAbsoluteUri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAuthority )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrAuthority);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayUri )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDisplayString);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDomain )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDomain);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetExtension )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrExtension);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFragment )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrFragment);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHost )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrHost);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPassword )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPassword);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPath);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPathAndQuery )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPathAndQuery);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetQuery )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrQuery);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRawUri )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrRawUri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSchemeName )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrSchemeName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUserInfo )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrUserInfo);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUserName )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrUserName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHostType )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__out DWORD *pdwHostType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__out DWORD *pdwPort);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetScheme )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__out DWORD *pdwScheme);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetZone )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__out DWORD *pdwZone);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
            __RPC__in IOpcPartUri * This,
            /* [out] */ __RPC__out LPDWORD pdwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsEqual )( 
            __RPC__in IOpcPartUri * This,
            /* [in] */ __RPC__in_opt IUri *pUri,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipsPartUri )( 
            __RPC__in IOpcPartUri * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **relationshipPartUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelativeUri )( 
            __RPC__in IOpcPartUri * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *targetPartUri,
            /* [retval][out] */ __RPC__deref_out_opt IUri **relativeUri);
        
        HRESULT ( STDMETHODCALLTYPE *CombinePartUri )( 
            __RPC__in IOpcPartUri * This,
            /* [in] */ __RPC__in_opt IUri *relativeUri,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **combinedUri);
        
        HRESULT ( STDMETHODCALLTYPE *ComparePartUri )( 
            __RPC__in IOpcPartUri * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *partUri,
            /* [retval][out] */ __RPC__out INT32 *comparisonResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceUri )( 
            __RPC__in IOpcPartUri * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri);
        
        HRESULT ( STDMETHODCALLTYPE *IsRelationshipsPartUri )( 
            __RPC__in IOpcPartUri * This,
            /* [retval][out] */ __RPC__out BOOL *isRelationshipUri);
        
        END_INTERFACE
    } IOpcPartUriVtbl;

    interface IOpcPartUri
    {
        CONST_VTBL struct IOpcPartUriVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcPartUri_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcPartUri_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcPartUri_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcPartUri_GetPropertyBSTR(This,uriProp,pbstrProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyBSTR(This,uriProp,pbstrProperty,dwFlags) ) 

#define IOpcPartUri_GetPropertyLength(This,uriProp,pcchProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyLength(This,uriProp,pcchProperty,dwFlags) ) 

#define IOpcPartUri_GetPropertyDWORD(This,uriProp,pdwProperty,dwFlags)	\
    ( (This)->lpVtbl -> GetPropertyDWORD(This,uriProp,pdwProperty,dwFlags) ) 

#define IOpcPartUri_HasProperty(This,uriProp,pfHasProperty)	\
    ( (This)->lpVtbl -> HasProperty(This,uriProp,pfHasProperty) ) 

#define IOpcPartUri_GetAbsoluteUri(This,pbstrAbsoluteUri)	\
    ( (This)->lpVtbl -> GetAbsoluteUri(This,pbstrAbsoluteUri) ) 

#define IOpcPartUri_GetAuthority(This,pbstrAuthority)	\
    ( (This)->lpVtbl -> GetAuthority(This,pbstrAuthority) ) 

#define IOpcPartUri_GetDisplayUri(This,pbstrDisplayString)	\
    ( (This)->lpVtbl -> GetDisplayUri(This,pbstrDisplayString) ) 

#define IOpcPartUri_GetDomain(This,pbstrDomain)	\
    ( (This)->lpVtbl -> GetDomain(This,pbstrDomain) ) 

#define IOpcPartUri_GetExtension(This,pbstrExtension)	\
    ( (This)->lpVtbl -> GetExtension(This,pbstrExtension) ) 

#define IOpcPartUri_GetFragment(This,pbstrFragment)	\
    ( (This)->lpVtbl -> GetFragment(This,pbstrFragment) ) 

#define IOpcPartUri_GetHost(This,pbstrHost)	\
    ( (This)->lpVtbl -> GetHost(This,pbstrHost) ) 

#define IOpcPartUri_GetPassword(This,pbstrPassword)	\
    ( (This)->lpVtbl -> GetPassword(This,pbstrPassword) ) 

#define IOpcPartUri_GetPath(This,pbstrPath)	\
    ( (This)->lpVtbl -> GetPath(This,pbstrPath) ) 

#define IOpcPartUri_GetPathAndQuery(This,pbstrPathAndQuery)	\
    ( (This)->lpVtbl -> GetPathAndQuery(This,pbstrPathAndQuery) ) 

#define IOpcPartUri_GetQuery(This,pbstrQuery)	\
    ( (This)->lpVtbl -> GetQuery(This,pbstrQuery) ) 

#define IOpcPartUri_GetRawUri(This,pbstrRawUri)	\
    ( (This)->lpVtbl -> GetRawUri(This,pbstrRawUri) ) 

#define IOpcPartUri_GetSchemeName(This,pbstrSchemeName)	\
    ( (This)->lpVtbl -> GetSchemeName(This,pbstrSchemeName) ) 

#define IOpcPartUri_GetUserInfo(This,pbstrUserInfo)	\
    ( (This)->lpVtbl -> GetUserInfo(This,pbstrUserInfo) ) 

#define IOpcPartUri_GetUserName(This,pbstrUserName)	\
    ( (This)->lpVtbl -> GetUserName(This,pbstrUserName) ) 

#define IOpcPartUri_GetHostType(This,pdwHostType)	\
    ( (This)->lpVtbl -> GetHostType(This,pdwHostType) ) 

#define IOpcPartUri_GetPort(This,pdwPort)	\
    ( (This)->lpVtbl -> GetPort(This,pdwPort) ) 

#define IOpcPartUri_GetScheme(This,pdwScheme)	\
    ( (This)->lpVtbl -> GetScheme(This,pdwScheme) ) 

#define IOpcPartUri_GetZone(This,pdwZone)	\
    ( (This)->lpVtbl -> GetZone(This,pdwZone) ) 

#define IOpcPartUri_GetProperties(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetProperties(This,pdwFlags) ) 

#define IOpcPartUri_IsEqual(This,pUri,pfEqual)	\
    ( (This)->lpVtbl -> IsEqual(This,pUri,pfEqual) ) 


#define IOpcPartUri_GetRelationshipsPartUri(This,relationshipPartUri)	\
    ( (This)->lpVtbl -> GetRelationshipsPartUri(This,relationshipPartUri) ) 

#define IOpcPartUri_GetRelativeUri(This,targetPartUri,relativeUri)	\
    ( (This)->lpVtbl -> GetRelativeUri(This,targetPartUri,relativeUri) ) 

#define IOpcPartUri_CombinePartUri(This,relativeUri,combinedUri)	\
    ( (This)->lpVtbl -> CombinePartUri(This,relativeUri,combinedUri) ) 


#define IOpcPartUri_ComparePartUri(This,partUri,comparisonResult)	\
    ( (This)->lpVtbl -> ComparePartUri(This,partUri,comparisonResult) ) 

#define IOpcPartUri_GetSourceUri(This,sourceUri)	\
    ( (This)->lpVtbl -> GetSourceUri(This,sourceUri) ) 

#define IOpcPartUri_IsRelationshipsPartUri(This,isRelationshipUri)	\
    ( (This)->lpVtbl -> IsRelationshipsPartUri(This,isRelationshipUri) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcPartUri_INTERFACE_DEFINED__ */


#ifndef __IOpcPackage_INTERFACE_DEFINED__
#define __IOpcPackage_INTERFACE_DEFINED__

/* interface IOpcPackage */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcPackage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE70")
    IOpcPackage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPartSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartSet **partSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSet **relationshipSet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcPackageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcPackage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcPackage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcPackage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPartSet )( 
            __RPC__in IOpcPackage * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartSet **partSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipSet )( 
            __RPC__in IOpcPackage * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSet **relationshipSet);
        
        END_INTERFACE
    } IOpcPackageVtbl;

    interface IOpcPackage
    {
        CONST_VTBL struct IOpcPackageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcPackage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcPackage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcPackage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcPackage_GetPartSet(This,partSet)	\
    ( (This)->lpVtbl -> GetPartSet(This,partSet) ) 

#define IOpcPackage_GetRelationshipSet(This,relationshipSet)	\
    ( (This)->lpVtbl -> GetRelationshipSet(This,relationshipSet) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcPackage_INTERFACE_DEFINED__ */


#ifndef __IOpcPart_INTERFACE_DEFINED__
#define __IOpcPart_INTERFACE_DEFINED__

/* interface IOpcPart */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcPart;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE71")
    IOpcPart : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSet **relationshipSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentStream( 
            /* [retval][out] */ __RPC__deref_out_opt IStream **stream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentType( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *contentType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCompressionOptions( 
            /* [retval][out] */ __RPC__out OPC_COMPRESSION_OPTIONS *compressionOptions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcPartVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcPart * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcPart * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcPart * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipSet )( 
            __RPC__in IOpcPart * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSet **relationshipSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetContentStream )( 
            __RPC__in IOpcPart * This,
            /* [retval][out] */ __RPC__deref_out_opt IStream **stream);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IOpcPart * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **name);
        
        HRESULT ( STDMETHODCALLTYPE *GetContentType )( 
            __RPC__in IOpcPart * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *contentType);
        
        HRESULT ( STDMETHODCALLTYPE *GetCompressionOptions )( 
            __RPC__in IOpcPart * This,
            /* [retval][out] */ __RPC__out OPC_COMPRESSION_OPTIONS *compressionOptions);
        
        END_INTERFACE
    } IOpcPartVtbl;

    interface IOpcPart
    {
        CONST_VTBL struct IOpcPartVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcPart_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcPart_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcPart_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcPart_GetRelationshipSet(This,relationshipSet)	\
    ( (This)->lpVtbl -> GetRelationshipSet(This,relationshipSet) ) 

#define IOpcPart_GetContentStream(This,stream)	\
    ( (This)->lpVtbl -> GetContentStream(This,stream) ) 

#define IOpcPart_GetName(This,name)	\
    ( (This)->lpVtbl -> GetName(This,name) ) 

#define IOpcPart_GetContentType(This,contentType)	\
    ( (This)->lpVtbl -> GetContentType(This,contentType) ) 

#define IOpcPart_GetCompressionOptions(This,compressionOptions)	\
    ( (This)->lpVtbl -> GetCompressionOptions(This,compressionOptions) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcPart_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationship_INTERFACE_DEFINED__
#define __IOpcRelationship_INTERFACE_DEFINED__

/* interface IOpcRelationship */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationship;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE72")
    IOpcRelationship : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetId( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *relationshipIdentifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipType( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *relationshipType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceUri( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTargetUri( 
            /* [retval][out] */ __RPC__deref_out_opt IUri **targetUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTargetMode( 
            /* [retval][out] */ __RPC__out OPC_URI_TARGET_MODE *targetMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationship * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationship * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationship * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetId )( 
            __RPC__in IOpcRelationship * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *relationshipIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipType )( 
            __RPC__in IOpcRelationship * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *relationshipType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceUri )( 
            __RPC__in IOpcRelationship * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetTargetUri )( 
            __RPC__in IOpcRelationship * This,
            /* [retval][out] */ __RPC__deref_out_opt IUri **targetUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetTargetMode )( 
            __RPC__in IOpcRelationship * This,
            /* [retval][out] */ __RPC__out OPC_URI_TARGET_MODE *targetMode);
        
        END_INTERFACE
    } IOpcRelationshipVtbl;

    interface IOpcRelationship
    {
        CONST_VTBL struct IOpcRelationshipVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationship_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationship_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationship_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationship_GetId(This,relationshipIdentifier)	\
    ( (This)->lpVtbl -> GetId(This,relationshipIdentifier) ) 

#define IOpcRelationship_GetRelationshipType(This,relationshipType)	\
    ( (This)->lpVtbl -> GetRelationshipType(This,relationshipType) ) 

#define IOpcRelationship_GetSourceUri(This,sourceUri)	\
    ( (This)->lpVtbl -> GetSourceUri(This,sourceUri) ) 

#define IOpcRelationship_GetTargetUri(This,targetUri)	\
    ( (This)->lpVtbl -> GetTargetUri(This,targetUri) ) 

#define IOpcRelationship_GetTargetMode(This,targetMode)	\
    ( (This)->lpVtbl -> GetTargetMode(This,targetMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationship_INTERFACE_DEFINED__ */


#ifndef __IOpcPartSet_INTERFACE_DEFINED__
#define __IOpcPartSet_INTERFACE_DEFINED__

/* interface IOpcPartSet */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcPartSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE73")
    IOpcPartSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPart( 
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePart( 
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [string][in] */ __RPC__in_string LPCWSTR contentType,
            /* [in] */ OPC_COMPRESSION_OPTIONS compressionOptions,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeletePart( 
            /* [in] */ __RPC__in_opt IOpcPartUri *name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PartExists( 
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [retval][out] */ __RPC__out BOOL *partExists) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartEnumerator **partEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcPartSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcPartSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcPartSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcPartSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPart )( 
            __RPC__in IOpcPartSet * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePart )( 
            __RPC__in IOpcPartSet * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [string][in] */ __RPC__in_string LPCWSTR contentType,
            /* [in] */ OPC_COMPRESSION_OPTIONS compressionOptions,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part);
        
        HRESULT ( STDMETHODCALLTYPE *DeletePart )( 
            __RPC__in IOpcPartSet * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *name);
        
        HRESULT ( STDMETHODCALLTYPE *PartExists )( 
            __RPC__in IOpcPartSet * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *name,
            /* [retval][out] */ __RPC__out BOOL *partExists);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcPartSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartEnumerator **partEnumerator);
        
        END_INTERFACE
    } IOpcPartSetVtbl;

    interface IOpcPartSet
    {
        CONST_VTBL struct IOpcPartSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcPartSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcPartSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcPartSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcPartSet_GetPart(This,name,part)	\
    ( (This)->lpVtbl -> GetPart(This,name,part) ) 

#define IOpcPartSet_CreatePart(This,name,contentType,compressionOptions,part)	\
    ( (This)->lpVtbl -> CreatePart(This,name,contentType,compressionOptions,part) ) 

#define IOpcPartSet_DeletePart(This,name)	\
    ( (This)->lpVtbl -> DeletePart(This,name) ) 

#define IOpcPartSet_PartExists(This,name,partExists)	\
    ( (This)->lpVtbl -> PartExists(This,name,partExists) ) 

#define IOpcPartSet_GetEnumerator(This,partEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,partEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcPartSet_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationshipSet_INTERFACE_DEFINED__
#define __IOpcRelationshipSet_INTERFACE_DEFINED__

/* interface IOpcRelationshipSet */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationshipSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE74")
    IOpcRelationshipSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRelationship( 
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRelationship( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR relationshipIdentifier,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipType,
            /* [in] */ __RPC__in_opt IUri *targetUri,
            /* [in] */ OPC_URI_TARGET_MODE targetMode,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteRelationship( 
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RelationshipExists( 
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier,
            /* [retval][out] */ __RPC__out BOOL *relationshipExists) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **relationshipEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumeratorForType( 
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipType,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **relationshipEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipsContentStream( 
            /* [retval][out] */ __RPC__deref_out_opt IStream **contents) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationshipSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationshipSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationship )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRelationship )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR relationshipIdentifier,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipType,
            /* [in] */ __RPC__in_opt IUri *targetUri,
            /* [in] */ OPC_URI_TARGET_MODE targetMode,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteRelationship )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *RelationshipExists )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipIdentifier,
            /* [retval][out] */ __RPC__out BOOL *relationshipExists);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **relationshipEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumeratorForType )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [string][in] */ __RPC__in_string LPCWSTR relationshipType,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **relationshipEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipsContentStream )( 
            __RPC__in IOpcRelationshipSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IStream **contents);
        
        END_INTERFACE
    } IOpcRelationshipSetVtbl;

    interface IOpcRelationshipSet
    {
        CONST_VTBL struct IOpcRelationshipSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationshipSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationshipSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationshipSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationshipSet_GetRelationship(This,relationshipIdentifier,relationship)	\
    ( (This)->lpVtbl -> GetRelationship(This,relationshipIdentifier,relationship) ) 

#define IOpcRelationshipSet_CreateRelationship(This,relationshipIdentifier,relationshipType,targetUri,targetMode,relationship)	\
    ( (This)->lpVtbl -> CreateRelationship(This,relationshipIdentifier,relationshipType,targetUri,targetMode,relationship) ) 

#define IOpcRelationshipSet_DeleteRelationship(This,relationshipIdentifier)	\
    ( (This)->lpVtbl -> DeleteRelationship(This,relationshipIdentifier) ) 

#define IOpcRelationshipSet_RelationshipExists(This,relationshipIdentifier,relationshipExists)	\
    ( (This)->lpVtbl -> RelationshipExists(This,relationshipIdentifier,relationshipExists) ) 

#define IOpcRelationshipSet_GetEnumerator(This,relationshipEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,relationshipEnumerator) ) 

#define IOpcRelationshipSet_GetEnumeratorForType(This,relationshipType,relationshipEnumerator)	\
    ( (This)->lpVtbl -> GetEnumeratorForType(This,relationshipType,relationshipEnumerator) ) 

#define IOpcRelationshipSet_GetRelationshipsContentStream(This,contents)	\
    ( (This)->lpVtbl -> GetRelationshipsContentStream(This,contents) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationshipSet_INTERFACE_DEFINED__ */


#ifndef __IOpcPartEnumerator_INTERFACE_DEFINED__
#define __IOpcPartEnumerator_INTERFACE_DEFINED__

/* interface IOpcPartEnumerator */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcPartEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE75")
    IOpcPartEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcPartEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcPartEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcPartEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcPartEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcPartEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcPartEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcPartEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPart **part);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcPartEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartEnumerator **copy);
        
        END_INTERFACE
    } IOpcPartEnumeratorVtbl;

    interface IOpcPartEnumerator
    {
        CONST_VTBL struct IOpcPartEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcPartEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcPartEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcPartEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcPartEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcPartEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcPartEnumerator_GetCurrent(This,part)	\
    ( (This)->lpVtbl -> GetCurrent(This,part) ) 

#define IOpcPartEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcPartEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationshipEnumerator_INTERFACE_DEFINED__
#define __IOpcRelationshipEnumerator_INTERFACE_DEFINED__

/* interface IOpcRelationshipEnumerator */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationshipEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42195949-3B79-4fc8-89C6-FC7FB979EE76")
    IOpcRelationshipEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationshipEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationshipEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationshipEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcRelationshipEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcRelationshipEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcRelationshipEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationship **relationship);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcRelationshipEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipEnumerator **copy);
        
        END_INTERFACE
    } IOpcRelationshipEnumeratorVtbl;

    interface IOpcRelationshipEnumerator
    {
        CONST_VTBL struct IOpcRelationshipEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationshipEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationshipEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationshipEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationshipEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcRelationshipEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcRelationshipEnumerator_GetCurrent(This,relationship)	\
    ( (This)->lpVtbl -> GetCurrent(This,relationship) ) 

#define IOpcRelationshipEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationshipEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcSignaturePartReference_INTERFACE_DEFINED__
#define __IOpcSignaturePartReference_INTERFACE_DEFINED__

/* interface IOpcSignaturePartReference */
/* [unique][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignaturePartReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e24231ca-59f4-484e-b64b-36eeda36072c")
    IOpcSignaturePartReference : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPartName( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **partName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentType( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *contentType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestMethod( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestValue( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTransformMethod( 
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignaturePartReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignaturePartReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignaturePartReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPartName )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **partName);
        
        HRESULT ( STDMETHODCALLTYPE *GetContentType )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *contentType);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestMethod )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestValue )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransformMethod )( 
            __RPC__in IOpcSignaturePartReference * This,
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod);
        
        END_INTERFACE
    } IOpcSignaturePartReferenceVtbl;

    interface IOpcSignaturePartReference
    {
        CONST_VTBL struct IOpcSignaturePartReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignaturePartReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignaturePartReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignaturePartReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignaturePartReference_GetPartName(This,partName)	\
    ( (This)->lpVtbl -> GetPartName(This,partName) ) 

#define IOpcSignaturePartReference_GetContentType(This,contentType)	\
    ( (This)->lpVtbl -> GetContentType(This,contentType) ) 

#define IOpcSignaturePartReference_GetDigestMethod(This,digestMethod)	\
    ( (This)->lpVtbl -> GetDigestMethod(This,digestMethod) ) 

#define IOpcSignaturePartReference_GetDigestValue(This,digestValue,count)	\
    ( (This)->lpVtbl -> GetDigestValue(This,digestValue,count) ) 

#define IOpcSignaturePartReference_GetTransformMethod(This,transformMethod)	\
    ( (This)->lpVtbl -> GetTransformMethod(This,transformMethod) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignaturePartReference_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReference_INTERFACE_DEFINED__
#define __IOpcSignatureRelationshipReference_INTERFACE_DEFINED__

/* interface IOpcSignatureRelationshipReference */
/* [unique][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureRelationshipReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("57babac6-9d4a-4e50-8b86-e5d4051eae7c")
    IOpcSignatureRelationshipReference : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSourceUri( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestMethod( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestValue( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTransformMethod( 
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipSigningOption( 
            /* [retval][out] */ __RPC__out OPC_RELATIONSHIPS_SIGNING_OPTION *relationshipSigningOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelationshipSelectorEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **selectorEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureRelationshipReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureRelationshipReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureRelationshipReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceUri )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **sourceUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestMethod )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestValue )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransformMethod )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipSigningOption )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [retval][out] */ __RPC__out OPC_RELATIONSHIPS_SIGNING_OPTION *relationshipSigningOption);
        
        HRESULT ( STDMETHODCALLTYPE *GetRelationshipSelectorEnumerator )( 
            __RPC__in IOpcSignatureRelationshipReference * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **selectorEnumerator);
        
        END_INTERFACE
    } IOpcSignatureRelationshipReferenceVtbl;

    interface IOpcSignatureRelationshipReference
    {
        CONST_VTBL struct IOpcSignatureRelationshipReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureRelationshipReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureRelationshipReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureRelationshipReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureRelationshipReference_GetSourceUri(This,sourceUri)	\
    ( (This)->lpVtbl -> GetSourceUri(This,sourceUri) ) 

#define IOpcSignatureRelationshipReference_GetDigestMethod(This,digestMethod)	\
    ( (This)->lpVtbl -> GetDigestMethod(This,digestMethod) ) 

#define IOpcSignatureRelationshipReference_GetDigestValue(This,digestValue,count)	\
    ( (This)->lpVtbl -> GetDigestValue(This,digestValue,count) ) 

#define IOpcSignatureRelationshipReference_GetTransformMethod(This,transformMethod)	\
    ( (This)->lpVtbl -> GetTransformMethod(This,transformMethod) ) 

#define IOpcSignatureRelationshipReference_GetRelationshipSigningOption(This,relationshipSigningOption)	\
    ( (This)->lpVtbl -> GetRelationshipSigningOption(This,relationshipSigningOption) ) 

#define IOpcSignatureRelationshipReference_GetRelationshipSelectorEnumerator(This,selectorEnumerator)	\
    ( (This)->lpVtbl -> GetRelationshipSelectorEnumerator(This,selectorEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureRelationshipReference_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationshipSelector_INTERFACE_DEFINED__
#define __IOpcRelationshipSelector_INTERFACE_DEFINED__

/* interface IOpcRelationshipSelector */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationshipSelector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f8f26c7f-b28f-4899-84c8-5d5639ede75f")
    IOpcRelationshipSelector : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSelectorType( 
            /* [retval][out] */ __RPC__out OPC_RELATIONSHIP_SELECTOR *selector) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSelectionCriterion( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *selectionCriterion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipSelectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationshipSelector * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationshipSelector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationshipSelector * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelectorType )( 
            __RPC__in IOpcRelationshipSelector * This,
            /* [retval][out] */ __RPC__out OPC_RELATIONSHIP_SELECTOR *selector);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelectionCriterion )( 
            __RPC__in IOpcRelationshipSelector * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *selectionCriterion);
        
        END_INTERFACE
    } IOpcRelationshipSelectorVtbl;

    interface IOpcRelationshipSelector
    {
        CONST_VTBL struct IOpcRelationshipSelectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationshipSelector_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationshipSelector_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationshipSelector_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationshipSelector_GetSelectorType(This,selector)	\
    ( (This)->lpVtbl -> GetSelectorType(This,selector) ) 

#define IOpcRelationshipSelector_GetSelectionCriterion(This,selectionCriterion)	\
    ( (This)->lpVtbl -> GetSelectionCriterion(This,selectionCriterion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationshipSelector_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureReference_INTERFACE_DEFINED__
#define __IOpcSignatureReference_INTERFACE_DEFINED__

/* interface IOpcSignatureReference */
/* [unique][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1b47005e-3011-4edc-be6f-0f65e5ab0342")
    IOpcSignatureReference : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetId( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *referenceId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUri( 
            /* [retval][out] */ __RPC__deref_out_opt IUri **referenceUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *type) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTransformMethod( 
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestMethod( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDigestValue( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureReference * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetId )( 
            __RPC__in IOpcSignatureReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *referenceId);
        
        HRESULT ( STDMETHODCALLTYPE *GetUri )( 
            __RPC__in IOpcSignatureReference * This,
            /* [retval][out] */ __RPC__deref_out_opt IUri **referenceUri);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IOpcSignatureReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *type);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransformMethod )( 
            __RPC__in IOpcSignatureReference * This,
            /* [retval][out] */ __RPC__out OPC_CANONICALIZATION_METHOD *transformMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestMethod )( 
            __RPC__in IOpcSignatureReference * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetDigestValue )( 
            __RPC__in IOpcSignatureReference * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **digestValue,
            /* [out] */ __RPC__out UINT32 *count);
        
        END_INTERFACE
    } IOpcSignatureReferenceVtbl;

    interface IOpcSignatureReference
    {
        CONST_VTBL struct IOpcSignatureReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureReference_GetId(This,referenceId)	\
    ( (This)->lpVtbl -> GetId(This,referenceId) ) 

#define IOpcSignatureReference_GetUri(This,referenceUri)	\
    ( (This)->lpVtbl -> GetUri(This,referenceUri) ) 

#define IOpcSignatureReference_GetType(This,type)	\
    ( (This)->lpVtbl -> GetType(This,type) ) 

#define IOpcSignatureReference_GetTransformMethod(This,transformMethod)	\
    ( (This)->lpVtbl -> GetTransformMethod(This,transformMethod) ) 

#define IOpcSignatureReference_GetDigestMethod(This,digestMethod)	\
    ( (This)->lpVtbl -> GetDigestMethod(This,digestMethod) ) 

#define IOpcSignatureReference_GetDigestValue(This,digestValue,count)	\
    ( (This)->lpVtbl -> GetDigestValue(This,digestValue,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureReference_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureCustomObject_INTERFACE_DEFINED__
#define __IOpcSignatureCustomObject_INTERFACE_DEFINED__

/* interface IOpcSignatureCustomObject */
/* [unique][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureCustomObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5d77a19e-62c1-44e7-becd-45da5ae51a56")
    IOpcSignatureCustomObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetXml( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **xmlMarkup,
            /* [out] */ __RPC__out UINT32 *count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureCustomObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureCustomObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureCustomObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureCustomObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetXml )( 
            __RPC__in IOpcSignatureCustomObject * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*count) UINT8 **xmlMarkup,
            /* [out] */ __RPC__out UINT32 *count);
        
        END_INTERFACE
    } IOpcSignatureCustomObjectVtbl;

    interface IOpcSignatureCustomObject
    {
        CONST_VTBL struct IOpcSignatureCustomObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureCustomObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureCustomObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureCustomObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureCustomObject_GetXml(This,xmlMarkup,count)	\
    ( (This)->lpVtbl -> GetXml(This,xmlMarkup,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureCustomObject_INTERFACE_DEFINED__ */


#ifndef __IOpcDigitalSignature_INTERFACE_DEFINED__
#define __IOpcDigitalSignature_INTERFACE_DEFINED__

/* interface IOpcDigitalSignature */
/* [unique][nonextensible][local][uuid][object] */ 


EXTERN_C const IID IID_IOpcDigitalSignature;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("52ab21dd-1cd0-4949-bc80-0c1232d00cb4")
    IOpcDigitalSignature : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNamespaces( 
            /* [size_is][size_is][out] */ LPWSTR **prefixes,
            /* [size_is][size_is][out] */ LPWSTR **namespaces,
            /* [out] */ UINT32 *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureId( 
            /* [retval][string][out] */ LPWSTR *signatureId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignaturePartName( 
            /* [retval][out] */ IOpcPartUri **signaturePartName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureMethod( 
            /* [retval][string][out] */ LPWSTR *signatureMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCanonicalizationMethod( 
            /* [retval][out] */ OPC_CANONICALIZATION_METHOD *canonicalizationMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureValue( 
            /* [size_is][size_is][out] */ UINT8 **signatureValue,
            /* [out] */ UINT32 *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignaturePartReferenceEnumerator( 
            /* [retval][out] */ IOpcSignaturePartReferenceEnumerator **partReferenceEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureRelationshipReferenceEnumerator( 
            /* [retval][out] */ IOpcSignatureRelationshipReferenceEnumerator **relationshipReferenceEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSigningTime( 
            /* [retval][string][out] */ LPWSTR *signingTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeFormat( 
            /* [retval][out] */ OPC_SIGNATURE_TIME_FORMAT *timeFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPackageObjectReference( 
            /* [retval][out] */ IOpcSignatureReference **packageObjectReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCertificateEnumerator( 
            /* [retval][out] */ IOpcCertificateEnumerator **certificateEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomReferenceEnumerator( 
            /* [retval][out] */ IOpcSignatureReferenceEnumerator **customReferenceEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomObjectEnumerator( 
            /* [retval][out] */ IOpcSignatureCustomObjectEnumerator **customObjectEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureXml( 
            /* [size_is][size_is][out] */ UINT8 **signatureXml,
            /* [out] */ UINT32 *count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcDigitalSignatureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOpcDigitalSignature * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOpcDigitalSignature * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOpcDigitalSignature * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespaces )( 
            IOpcDigitalSignature * This,
            /* [size_is][size_is][out] */ LPWSTR **prefixes,
            /* [size_is][size_is][out] */ LPWSTR **namespaces,
            /* [out] */ UINT32 *count);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureId )( 
            IOpcDigitalSignature * This,
            /* [retval][string][out] */ LPWSTR *signatureId);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignaturePartName )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcPartUri **signaturePartName);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureMethod )( 
            IOpcDigitalSignature * This,
            /* [retval][string][out] */ LPWSTR *signatureMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanonicalizationMethod )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ OPC_CANONICALIZATION_METHOD *canonicalizationMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureValue )( 
            IOpcDigitalSignature * This,
            /* [size_is][size_is][out] */ UINT8 **signatureValue,
            /* [out] */ UINT32 *count);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignaturePartReferenceEnumerator )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcSignaturePartReferenceEnumerator **partReferenceEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureRelationshipReferenceEnumerator )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcSignatureRelationshipReferenceEnumerator **relationshipReferenceEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetSigningTime )( 
            IOpcDigitalSignature * This,
            /* [retval][string][out] */ LPWSTR *signingTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeFormat )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ OPC_SIGNATURE_TIME_FORMAT *timeFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetPackageObjectReference )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcSignatureReference **packageObjectReference);
        
        HRESULT ( STDMETHODCALLTYPE *GetCertificateEnumerator )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcCertificateEnumerator **certificateEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomReferenceEnumerator )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcSignatureReferenceEnumerator **customReferenceEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomObjectEnumerator )( 
            IOpcDigitalSignature * This,
            /* [retval][out] */ IOpcSignatureCustomObjectEnumerator **customObjectEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureXml )( 
            IOpcDigitalSignature * This,
            /* [size_is][size_is][out] */ UINT8 **signatureXml,
            /* [out] */ UINT32 *count);
        
        END_INTERFACE
    } IOpcDigitalSignatureVtbl;

    interface IOpcDigitalSignature
    {
        CONST_VTBL struct IOpcDigitalSignatureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcDigitalSignature_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcDigitalSignature_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcDigitalSignature_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcDigitalSignature_GetNamespaces(This,prefixes,namespaces,count)	\
    ( (This)->lpVtbl -> GetNamespaces(This,prefixes,namespaces,count) ) 

#define IOpcDigitalSignature_GetSignatureId(This,signatureId)	\
    ( (This)->lpVtbl -> GetSignatureId(This,signatureId) ) 

#define IOpcDigitalSignature_GetSignaturePartName(This,signaturePartName)	\
    ( (This)->lpVtbl -> GetSignaturePartName(This,signaturePartName) ) 

#define IOpcDigitalSignature_GetSignatureMethod(This,signatureMethod)	\
    ( (This)->lpVtbl -> GetSignatureMethod(This,signatureMethod) ) 

#define IOpcDigitalSignature_GetCanonicalizationMethod(This,canonicalizationMethod)	\
    ( (This)->lpVtbl -> GetCanonicalizationMethod(This,canonicalizationMethod) ) 

#define IOpcDigitalSignature_GetSignatureValue(This,signatureValue,count)	\
    ( (This)->lpVtbl -> GetSignatureValue(This,signatureValue,count) ) 

#define IOpcDigitalSignature_GetSignaturePartReferenceEnumerator(This,partReferenceEnumerator)	\
    ( (This)->lpVtbl -> GetSignaturePartReferenceEnumerator(This,partReferenceEnumerator) ) 

#define IOpcDigitalSignature_GetSignatureRelationshipReferenceEnumerator(This,relationshipReferenceEnumerator)	\
    ( (This)->lpVtbl -> GetSignatureRelationshipReferenceEnumerator(This,relationshipReferenceEnumerator) ) 

#define IOpcDigitalSignature_GetSigningTime(This,signingTime)	\
    ( (This)->lpVtbl -> GetSigningTime(This,signingTime) ) 

#define IOpcDigitalSignature_GetTimeFormat(This,timeFormat)	\
    ( (This)->lpVtbl -> GetTimeFormat(This,timeFormat) ) 

#define IOpcDigitalSignature_GetPackageObjectReference(This,packageObjectReference)	\
    ( (This)->lpVtbl -> GetPackageObjectReference(This,packageObjectReference) ) 

#define IOpcDigitalSignature_GetCertificateEnumerator(This,certificateEnumerator)	\
    ( (This)->lpVtbl -> GetCertificateEnumerator(This,certificateEnumerator) ) 

#define IOpcDigitalSignature_GetCustomReferenceEnumerator(This,customReferenceEnumerator)	\
    ( (This)->lpVtbl -> GetCustomReferenceEnumerator(This,customReferenceEnumerator) ) 

#define IOpcDigitalSignature_GetCustomObjectEnumerator(This,customObjectEnumerator)	\
    ( (This)->lpVtbl -> GetCustomObjectEnumerator(This,customObjectEnumerator) ) 

#define IOpcDigitalSignature_GetSignatureXml(This,signatureXml,count)	\
    ( (This)->lpVtbl -> GetSignatureXml(This,signatureXml,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcDigitalSignature_INTERFACE_DEFINED__ */


#ifndef __IOpcSigningOptions_INTERFACE_DEFINED__
#define __IOpcSigningOptions_INTERFACE_DEFINED__

/* interface IOpcSigningOptions */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSigningOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50d2d6a5-7aeb-46c0-b241-43ab0e9b407e")
    IOpcSigningOptions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSignatureId( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *signatureId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSignatureId( 
            /* [in] */ __RPC__in LPCWSTR signatureId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureMethod( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *signatureMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSignatureMethod( 
            /* [in] */ __RPC__in LPCWSTR signatureMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultDigestMethod( 
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultDigestMethod( 
            /* [in] */ __RPC__in LPCWSTR digestMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCertificateEmbeddingOption( 
            /* [retval][out] */ __RPC__out OPC_CERTIFICATE_EMBEDDING_OPTION *embeddingOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCertificateEmbeddingOption( 
            /* [in] */ OPC_CERTIFICATE_EMBEDDING_OPTION embeddingOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeFormat( 
            /* [retval][out] */ __RPC__out OPC_SIGNATURE_TIME_FORMAT *timeFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTimeFormat( 
            /* [in] */ OPC_SIGNATURE_TIME_FORMAT timeFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignaturePartReferenceSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceSet **partReferenceSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureRelationshipReferenceSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceSet **relationshipReferenceSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomObjectSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectSet **customObjectSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomReferenceSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceSet **customReferenceSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCertificateSet( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcCertificateSet **certificateSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignaturePartName( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **signaturePartName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSignaturePartName( 
            /* [unique][in] */ __RPC__in_opt IOpcPartUri *signaturePartName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSigningOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSigningOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSigningOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureId )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *signatureId);
        
        HRESULT ( STDMETHODCALLTYPE *SetSignatureId )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ __RPC__in LPCWSTR signatureId);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureMethod )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *signatureMethod);
        
        HRESULT ( STDMETHODCALLTYPE *SetSignatureMethod )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ __RPC__in LPCWSTR signatureMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultDigestMethod )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][string][out] */ __RPC__deref_out_opt_string LPWSTR *digestMethod);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultDigestMethod )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ __RPC__in LPCWSTR digestMethod);
        
        HRESULT ( STDMETHODCALLTYPE *GetCertificateEmbeddingOption )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__out OPC_CERTIFICATE_EMBEDDING_OPTION *embeddingOption);
        
        HRESULT ( STDMETHODCALLTYPE *SetCertificateEmbeddingOption )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ OPC_CERTIFICATE_EMBEDDING_OPTION embeddingOption);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeFormat )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__out OPC_SIGNATURE_TIME_FORMAT *timeFormat);
        
        HRESULT ( STDMETHODCALLTYPE *SetTimeFormat )( 
            __RPC__in IOpcSigningOptions * This,
            /* [in] */ OPC_SIGNATURE_TIME_FORMAT timeFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignaturePartReferenceSet )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceSet **partReferenceSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureRelationshipReferenceSet )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceSet **relationshipReferenceSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomObjectSet )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectSet **customObjectSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomReferenceSet )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceSet **customReferenceSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetCertificateSet )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcCertificateSet **certificateSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignaturePartName )( 
            __RPC__in IOpcSigningOptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **signaturePartName);
        
        HRESULT ( STDMETHODCALLTYPE *SetSignaturePartName )( 
            __RPC__in IOpcSigningOptions * This,
            /* [unique][in] */ __RPC__in_opt IOpcPartUri *signaturePartName);
        
        END_INTERFACE
    } IOpcSigningOptionsVtbl;

    interface IOpcSigningOptions
    {
        CONST_VTBL struct IOpcSigningOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSigningOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSigningOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSigningOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSigningOptions_GetSignatureId(This,signatureId)	\
    ( (This)->lpVtbl -> GetSignatureId(This,signatureId) ) 

#define IOpcSigningOptions_SetSignatureId(This,signatureId)	\
    ( (This)->lpVtbl -> SetSignatureId(This,signatureId) ) 

#define IOpcSigningOptions_GetSignatureMethod(This,signatureMethod)	\
    ( (This)->lpVtbl -> GetSignatureMethod(This,signatureMethod) ) 

#define IOpcSigningOptions_SetSignatureMethod(This,signatureMethod)	\
    ( (This)->lpVtbl -> SetSignatureMethod(This,signatureMethod) ) 

#define IOpcSigningOptions_GetDefaultDigestMethod(This,digestMethod)	\
    ( (This)->lpVtbl -> GetDefaultDigestMethod(This,digestMethod) ) 

#define IOpcSigningOptions_SetDefaultDigestMethod(This,digestMethod)	\
    ( (This)->lpVtbl -> SetDefaultDigestMethod(This,digestMethod) ) 

#define IOpcSigningOptions_GetCertificateEmbeddingOption(This,embeddingOption)	\
    ( (This)->lpVtbl -> GetCertificateEmbeddingOption(This,embeddingOption) ) 

#define IOpcSigningOptions_SetCertificateEmbeddingOption(This,embeddingOption)	\
    ( (This)->lpVtbl -> SetCertificateEmbeddingOption(This,embeddingOption) ) 

#define IOpcSigningOptions_GetTimeFormat(This,timeFormat)	\
    ( (This)->lpVtbl -> GetTimeFormat(This,timeFormat) ) 

#define IOpcSigningOptions_SetTimeFormat(This,timeFormat)	\
    ( (This)->lpVtbl -> SetTimeFormat(This,timeFormat) ) 

#define IOpcSigningOptions_GetSignaturePartReferenceSet(This,partReferenceSet)	\
    ( (This)->lpVtbl -> GetSignaturePartReferenceSet(This,partReferenceSet) ) 

#define IOpcSigningOptions_GetSignatureRelationshipReferenceSet(This,relationshipReferenceSet)	\
    ( (This)->lpVtbl -> GetSignatureRelationshipReferenceSet(This,relationshipReferenceSet) ) 

#define IOpcSigningOptions_GetCustomObjectSet(This,customObjectSet)	\
    ( (This)->lpVtbl -> GetCustomObjectSet(This,customObjectSet) ) 

#define IOpcSigningOptions_GetCustomReferenceSet(This,customReferenceSet)	\
    ( (This)->lpVtbl -> GetCustomReferenceSet(This,customReferenceSet) ) 

#define IOpcSigningOptions_GetCertificateSet(This,certificateSet)	\
    ( (This)->lpVtbl -> GetCertificateSet(This,certificateSet) ) 

#define IOpcSigningOptions_GetSignaturePartName(This,signaturePartName)	\
    ( (This)->lpVtbl -> GetSignaturePartName(This,signaturePartName) ) 

#define IOpcSigningOptions_SetSignaturePartName(This,signaturePartName)	\
    ( (This)->lpVtbl -> SetSignaturePartName(This,signaturePartName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSigningOptions_INTERFACE_DEFINED__ */


#ifndef __IOpcDigitalSignatureManager_INTERFACE_DEFINED__
#define __IOpcDigitalSignatureManager_INTERFACE_DEFINED__

/* interface IOpcDigitalSignatureManager */
/* [ref][nonextensible][local][uuid][object] */ 


EXTERN_C const IID IID_IOpcDigitalSignatureManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5e62a0b-696d-462f-94df-72e33cef2659")
    IOpcDigitalSignatureManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSignatureOriginPartName( 
            /* [retval][out] */ IOpcPartUri **signatureOriginPartName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSignatureOriginPartName( 
            /* [unique][in] */ IOpcPartUri *signatureOriginPartName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignatureEnumerator( 
            /* [retval][out] */ IOpcDigitalSignatureEnumerator **signatureEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveSignature( 
            /* [in] */ IOpcPartUri *signaturePartName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateSigningOptions( 
            /* [retval][out] */ IOpcSigningOptions **signingOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ IOpcDigitalSignature *signature,
            /* [in] */ const CERT_CONTEXT *certificate,
            /* [retval][out] */ OPC_SIGNATURE_VALIDATION_RESULT *validationResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sign( 
            /* [in] */ const CERT_CONTEXT *certificate,
            /* [in] */ IOpcSigningOptions *signingOptions,
            /* [retval][out] */ IOpcDigitalSignature **digitalSignature) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceSignatureXml( 
            /* [in] */ IOpcPartUri *signaturePartName,
            /* [size_is][in] */ const UINT8 *newSignatureXml,
            /* [in] */ UINT32 count,
            /* [retval][out] */ IOpcDigitalSignature **digitalSignature) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcDigitalSignatureManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOpcDigitalSignatureManager * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOpcDigitalSignatureManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOpcDigitalSignatureManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureOriginPartName )( 
            IOpcDigitalSignatureManager * This,
            /* [retval][out] */ IOpcPartUri **signatureOriginPartName);
        
        HRESULT ( STDMETHODCALLTYPE *SetSignatureOriginPartName )( 
            IOpcDigitalSignatureManager * This,
            /* [unique][in] */ IOpcPartUri *signatureOriginPartName);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignatureEnumerator )( 
            IOpcDigitalSignatureManager * This,
            /* [retval][out] */ IOpcDigitalSignatureEnumerator **signatureEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSignature )( 
            IOpcDigitalSignatureManager * This,
            /* [in] */ IOpcPartUri *signaturePartName);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSigningOptions )( 
            IOpcDigitalSignatureManager * This,
            /* [retval][out] */ IOpcSigningOptions **signingOptions);
        
        HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IOpcDigitalSignatureManager * This,
            /* [in] */ IOpcDigitalSignature *signature,
            /* [in] */ const CERT_CONTEXT *certificate,
            /* [retval][out] */ OPC_SIGNATURE_VALIDATION_RESULT *validationResult);
        
        HRESULT ( STDMETHODCALLTYPE *Sign )( 
            IOpcDigitalSignatureManager * This,
            /* [in] */ const CERT_CONTEXT *certificate,
            /* [in] */ IOpcSigningOptions *signingOptions,
            /* [retval][out] */ IOpcDigitalSignature **digitalSignature);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceSignatureXml )( 
            IOpcDigitalSignatureManager * This,
            /* [in] */ IOpcPartUri *signaturePartName,
            /* [size_is][in] */ const UINT8 *newSignatureXml,
            /* [in] */ UINT32 count,
            /* [retval][out] */ IOpcDigitalSignature **digitalSignature);
        
        END_INTERFACE
    } IOpcDigitalSignatureManagerVtbl;

    interface IOpcDigitalSignatureManager
    {
        CONST_VTBL struct IOpcDigitalSignatureManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcDigitalSignatureManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcDigitalSignatureManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcDigitalSignatureManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcDigitalSignatureManager_GetSignatureOriginPartName(This,signatureOriginPartName)	\
    ( (This)->lpVtbl -> GetSignatureOriginPartName(This,signatureOriginPartName) ) 

#define IOpcDigitalSignatureManager_SetSignatureOriginPartName(This,signatureOriginPartName)	\
    ( (This)->lpVtbl -> SetSignatureOriginPartName(This,signatureOriginPartName) ) 

#define IOpcDigitalSignatureManager_GetSignatureEnumerator(This,signatureEnumerator)	\
    ( (This)->lpVtbl -> GetSignatureEnumerator(This,signatureEnumerator) ) 

#define IOpcDigitalSignatureManager_RemoveSignature(This,signaturePartName)	\
    ( (This)->lpVtbl -> RemoveSignature(This,signaturePartName) ) 

#define IOpcDigitalSignatureManager_CreateSigningOptions(This,signingOptions)	\
    ( (This)->lpVtbl -> CreateSigningOptions(This,signingOptions) ) 

#define IOpcDigitalSignatureManager_Validate(This,signature,certificate,validationResult)	\
    ( (This)->lpVtbl -> Validate(This,signature,certificate,validationResult) ) 

#define IOpcDigitalSignatureManager_Sign(This,certificate,signingOptions,digitalSignature)	\
    ( (This)->lpVtbl -> Sign(This,certificate,signingOptions,digitalSignature) ) 

#define IOpcDigitalSignatureManager_ReplaceSignatureXml(This,signaturePartName,newSignatureXml,count,digitalSignature)	\
    ( (This)->lpVtbl -> ReplaceSignatureXml(This,signaturePartName,newSignatureXml,count,digitalSignature) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcDigitalSignatureManager_INTERFACE_DEFINED__ */


#ifndef __IOpcSignaturePartReferenceEnumerator_INTERFACE_DEFINED__
#define __IOpcSignaturePartReferenceEnumerator_INTERFACE_DEFINED__

/* interface IOpcSignaturePartReferenceEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignaturePartReferenceEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("80eb1561-8c77-49cf-8266-459b356ee99a")
    IOpcSignaturePartReferenceEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReference **partReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignaturePartReferenceEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReference **partReference);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcSignaturePartReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceEnumerator **copy);
        
        END_INTERFACE
    } IOpcSignaturePartReferenceEnumeratorVtbl;

    interface IOpcSignaturePartReferenceEnumerator
    {
        CONST_VTBL struct IOpcSignaturePartReferenceEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignaturePartReferenceEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignaturePartReferenceEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignaturePartReferenceEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignaturePartReferenceEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcSignaturePartReferenceEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcSignaturePartReferenceEnumerator_GetCurrent(This,partReference)	\
    ( (This)->lpVtbl -> GetCurrent(This,partReference) ) 

#define IOpcSignaturePartReferenceEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignaturePartReferenceEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReferenceEnumerator_INTERFACE_DEFINED__
#define __IOpcSignatureRelationshipReferenceEnumerator_INTERFACE_DEFINED__

/* interface IOpcSignatureRelationshipReferenceEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureRelationshipReferenceEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("773ba3e4-f021-48e4-aa04-9816db5d3495")
    IOpcSignatureRelationshipReferenceEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReference **relationshipReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureRelationshipReferenceEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReference **relationshipReference);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcSignatureRelationshipReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceEnumerator **copy);
        
        END_INTERFACE
    } IOpcSignatureRelationshipReferenceEnumeratorVtbl;

    interface IOpcSignatureRelationshipReferenceEnumerator
    {
        CONST_VTBL struct IOpcSignatureRelationshipReferenceEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureRelationshipReferenceEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureRelationshipReferenceEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureRelationshipReferenceEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureRelationshipReferenceEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcSignatureRelationshipReferenceEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcSignatureRelationshipReferenceEnumerator_GetCurrent(This,relationshipReference)	\
    ( (This)->lpVtbl -> GetCurrent(This,relationshipReference) ) 

#define IOpcSignatureRelationshipReferenceEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureRelationshipReferenceEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationshipSelectorEnumerator_INTERFACE_DEFINED__
#define __IOpcRelationshipSelectorEnumerator_INTERFACE_DEFINED__

/* interface IOpcRelationshipSelectorEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationshipSelectorEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5e50a181-a91b-48ac-88d2-bca3d8f8c0b1")
    IOpcRelationshipSelectorEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelector **relationshipSelector) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipSelectorEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelector **relationshipSelector);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcRelationshipSelectorEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **copy);
        
        END_INTERFACE
    } IOpcRelationshipSelectorEnumeratorVtbl;

    interface IOpcRelationshipSelectorEnumerator
    {
        CONST_VTBL struct IOpcRelationshipSelectorEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationshipSelectorEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationshipSelectorEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationshipSelectorEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationshipSelectorEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcRelationshipSelectorEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcRelationshipSelectorEnumerator_GetCurrent(This,relationshipSelector)	\
    ( (This)->lpVtbl -> GetCurrent(This,relationshipSelector) ) 

#define IOpcRelationshipSelectorEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationshipSelectorEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureReferenceEnumerator_INTERFACE_DEFINED__
#define __IOpcSignatureReferenceEnumerator_INTERFACE_DEFINED__

/* interface IOpcSignatureReferenceEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureReferenceEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cfa59a45-28b1-4868-969e-fa8097fdc12a")
    IOpcSignatureReferenceEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReference **reference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureReferenceEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReference **reference);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcSignatureReferenceEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceEnumerator **copy);
        
        END_INTERFACE
    } IOpcSignatureReferenceEnumeratorVtbl;

    interface IOpcSignatureReferenceEnumerator
    {
        CONST_VTBL struct IOpcSignatureReferenceEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureReferenceEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureReferenceEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureReferenceEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureReferenceEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcSignatureReferenceEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcSignatureReferenceEnumerator_GetCurrent(This,reference)	\
    ( (This)->lpVtbl -> GetCurrent(This,reference) ) 

#define IOpcSignatureReferenceEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureReferenceEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureCustomObjectEnumerator_INTERFACE_DEFINED__
#define __IOpcSignatureCustomObjectEnumerator_INTERFACE_DEFINED__

/* interface IOpcSignatureCustomObjectEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureCustomObjectEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5ee4fe1d-e1b0-4683-8079-7ea0fcf80b4c")
    IOpcSignatureCustomObjectEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObject **customObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureCustomObjectEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObject **customObject);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcSignatureCustomObjectEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectEnumerator **copy);
        
        END_INTERFACE
    } IOpcSignatureCustomObjectEnumeratorVtbl;

    interface IOpcSignatureCustomObjectEnumerator
    {
        CONST_VTBL struct IOpcSignatureCustomObjectEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureCustomObjectEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureCustomObjectEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureCustomObjectEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureCustomObjectEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcSignatureCustomObjectEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcSignatureCustomObjectEnumerator_GetCurrent(This,customObject)	\
    ( (This)->lpVtbl -> GetCurrent(This,customObject) ) 

#define IOpcSignatureCustomObjectEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureCustomObjectEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcCertificateEnumerator_INTERFACE_DEFINED__
#define __IOpcCertificateEnumerator_INTERFACE_DEFINED__

/* interface IOpcCertificateEnumerator */
/* [ref][nonextensible][local][uuid][object] */ 


EXTERN_C const IID IID_IOpcCertificateEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85131937-8f24-421f-b439-59ab24d140b8")
    IOpcCertificateEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ const CERT_CONTEXT **certificate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IOpcCertificateEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcCertificateEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOpcCertificateEnumerator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOpcCertificateEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOpcCertificateEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            IOpcCertificateEnumerator * This,
            /* [retval][out] */ BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            IOpcCertificateEnumerator * This,
            /* [retval][out] */ BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            IOpcCertificateEnumerator * This,
            /* [retval][out] */ const CERT_CONTEXT **certificate);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IOpcCertificateEnumerator * This,
            /* [retval][out] */ IOpcCertificateEnumerator **copy);
        
        END_INTERFACE
    } IOpcCertificateEnumeratorVtbl;

    interface IOpcCertificateEnumerator
    {
        CONST_VTBL struct IOpcCertificateEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcCertificateEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcCertificateEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcCertificateEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcCertificateEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcCertificateEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcCertificateEnumerator_GetCurrent(This,certificate)	\
    ( (This)->lpVtbl -> GetCurrent(This,certificate) ) 

#define IOpcCertificateEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcCertificateEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcDigitalSignatureEnumerator_INTERFACE_DEFINED__
#define __IOpcDigitalSignatureEnumerator_INTERFACE_DEFINED__

/* interface IOpcDigitalSignatureEnumerator */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcDigitalSignatureEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("967b6882-0ba3-4358-b9e7-b64c75063c5e")
    IOpcDigitalSignatureEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out BOOL *hasNext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MovePrevious( 
            /* [retval][out] */ __RPC__out BOOL *hasPrevious) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignature **digitalSignature) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignatureEnumerator **copy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcDigitalSignatureEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasNext);
        
        HRESULT ( STDMETHODCALLTYPE *MovePrevious )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This,
            /* [retval][out] */ __RPC__out BOOL *hasPrevious);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignature **digitalSignature);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IOpcDigitalSignatureEnumerator * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignatureEnumerator **copy);
        
        END_INTERFACE
    } IOpcDigitalSignatureEnumeratorVtbl;

    interface IOpcDigitalSignatureEnumerator
    {
        CONST_VTBL struct IOpcDigitalSignatureEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcDigitalSignatureEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcDigitalSignatureEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcDigitalSignatureEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcDigitalSignatureEnumerator_MoveNext(This,hasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,hasNext) ) 

#define IOpcDigitalSignatureEnumerator_MovePrevious(This,hasPrevious)	\
    ( (This)->lpVtbl -> MovePrevious(This,hasPrevious) ) 

#define IOpcDigitalSignatureEnumerator_GetCurrent(This,digitalSignature)	\
    ( (This)->lpVtbl -> GetCurrent(This,digitalSignature) ) 

#define IOpcDigitalSignatureEnumerator_Clone(This,copy)	\
    ( (This)->lpVtbl -> Clone(This,copy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcDigitalSignatureEnumerator_INTERFACE_DEFINED__ */


#ifndef __IOpcSignaturePartReferenceSet_INTERFACE_DEFINED__
#define __IOpcSignaturePartReferenceSet_INTERFACE_DEFINED__

/* interface IOpcSignaturePartReferenceSet */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignaturePartReferenceSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6c9fe28c-ecd9-4b22-9d36-7fdde670fec0")
    IOpcSignaturePartReferenceSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ __RPC__in_opt IOpcPartUri *partUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReference **partReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in_opt IOpcSignaturePartReference *partReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceEnumerator **partReferenceEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignaturePartReferenceSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignaturePartReferenceSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignaturePartReferenceSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignaturePartReferenceSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IOpcSignaturePartReferenceSet * This,
            /* [in] */ __RPC__in_opt IOpcPartUri *partUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReference **partReference);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IOpcSignaturePartReferenceSet * This,
            /* [in] */ __RPC__in_opt IOpcSignaturePartReference *partReference);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcSignaturePartReferenceSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignaturePartReferenceEnumerator **partReferenceEnumerator);
        
        END_INTERFACE
    } IOpcSignaturePartReferenceSetVtbl;

    interface IOpcSignaturePartReferenceSet
    {
        CONST_VTBL struct IOpcSignaturePartReferenceSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignaturePartReferenceSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignaturePartReferenceSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignaturePartReferenceSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignaturePartReferenceSet_Create(This,partUri,digestMethod,transformMethod,partReference)	\
    ( (This)->lpVtbl -> Create(This,partUri,digestMethod,transformMethod,partReference) ) 

#define IOpcSignaturePartReferenceSet_Delete(This,partReference)	\
    ( (This)->lpVtbl -> Delete(This,partReference) ) 

#define IOpcSignaturePartReferenceSet_GetEnumerator(This,partReferenceEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,partReferenceEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignaturePartReferenceSet_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureRelationshipReferenceSet_INTERFACE_DEFINED__
#define __IOpcSignatureRelationshipReferenceSet_INTERFACE_DEFINED__

/* interface IOpcSignatureRelationshipReferenceSet */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureRelationshipReferenceSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9f863ca5-3631-404c-828d-807e0715069b")
    IOpcSignatureRelationshipReferenceSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ __RPC__in_opt IOpcUri *sourceUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_RELATIONSHIPS_SIGNING_OPTION relationshipSigningOption,
            /* [unique][in] */ __RPC__in_opt IOpcRelationshipSelectorSet *selectorSet,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReference **relationshipReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRelationshipSelectorSet( 
            /* [out] */ __RPC__deref_out_opt IOpcRelationshipSelectorSet **selectorSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in_opt IOpcSignatureRelationshipReference *relationshipReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceEnumerator **relationshipReferenceEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureRelationshipReferenceSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This,
            /* [in] */ __RPC__in_opt IOpcUri *sourceUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_RELATIONSHIPS_SIGNING_OPTION relationshipSigningOption,
            /* [unique][in] */ __RPC__in_opt IOpcRelationshipSelectorSet *selectorSet,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReference **relationshipReference);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRelationshipSelectorSet )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This,
            /* [out] */ __RPC__deref_out_opt IOpcRelationshipSelectorSet **selectorSet);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This,
            /* [in] */ __RPC__in_opt IOpcSignatureRelationshipReference *relationshipReference);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcSignatureRelationshipReferenceSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureRelationshipReferenceEnumerator **relationshipReferenceEnumerator);
        
        END_INTERFACE
    } IOpcSignatureRelationshipReferenceSetVtbl;

    interface IOpcSignatureRelationshipReferenceSet
    {
        CONST_VTBL struct IOpcSignatureRelationshipReferenceSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureRelationshipReferenceSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureRelationshipReferenceSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureRelationshipReferenceSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureRelationshipReferenceSet_Create(This,sourceUri,digestMethod,relationshipSigningOption,selectorSet,transformMethod,relationshipReference)	\
    ( (This)->lpVtbl -> Create(This,sourceUri,digestMethod,relationshipSigningOption,selectorSet,transformMethod,relationshipReference) ) 

#define IOpcSignatureRelationshipReferenceSet_CreateRelationshipSelectorSet(This,selectorSet)	\
    ( (This)->lpVtbl -> CreateRelationshipSelectorSet(This,selectorSet) ) 

#define IOpcSignatureRelationshipReferenceSet_Delete(This,relationshipReference)	\
    ( (This)->lpVtbl -> Delete(This,relationshipReference) ) 

#define IOpcSignatureRelationshipReferenceSet_GetEnumerator(This,relationshipReferenceEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,relationshipReferenceEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureRelationshipReferenceSet_INTERFACE_DEFINED__ */


#ifndef __IOpcRelationshipSelectorSet_INTERFACE_DEFINED__
#define __IOpcRelationshipSelectorSet_INTERFACE_DEFINED__

/* interface IOpcRelationshipSelectorSet */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcRelationshipSelectorSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e34c269-a4d3-47c0-b5c4-87ff2b3b6136")
    IOpcRelationshipSelectorSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ OPC_RELATIONSHIP_SELECTOR selector,
            /* [in] */ __RPC__in LPCWSTR selectionCriterion,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelector **relationshipSelector) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in_opt IOpcRelationshipSelector *relationshipSelector) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **relationshipSelectorEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcRelationshipSelectorSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcRelationshipSelectorSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcRelationshipSelectorSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcRelationshipSelectorSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IOpcRelationshipSelectorSet * This,
            /* [in] */ OPC_RELATIONSHIP_SELECTOR selector,
            /* [in] */ __RPC__in LPCWSTR selectionCriterion,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelector **relationshipSelector);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IOpcRelationshipSelectorSet * This,
            /* [in] */ __RPC__in_opt IOpcRelationshipSelector *relationshipSelector);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcRelationshipSelectorSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcRelationshipSelectorEnumerator **relationshipSelectorEnumerator);
        
        END_INTERFACE
    } IOpcRelationshipSelectorSetVtbl;

    interface IOpcRelationshipSelectorSet
    {
        CONST_VTBL struct IOpcRelationshipSelectorSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcRelationshipSelectorSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcRelationshipSelectorSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcRelationshipSelectorSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcRelationshipSelectorSet_Create(This,selector,selectionCriterion,relationshipSelector)	\
    ( (This)->lpVtbl -> Create(This,selector,selectionCriterion,relationshipSelector) ) 

#define IOpcRelationshipSelectorSet_Delete(This,relationshipSelector)	\
    ( (This)->lpVtbl -> Delete(This,relationshipSelector) ) 

#define IOpcRelationshipSelectorSet_GetEnumerator(This,relationshipSelectorEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,relationshipSelectorEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcRelationshipSelectorSet_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureReferenceSet_INTERFACE_DEFINED__
#define __IOpcSignatureReferenceSet_INTERFACE_DEFINED__

/* interface IOpcSignatureReferenceSet */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureReferenceSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f3b02d31-ab12-42dd-9e2f-2b16761c3c1e")
    IOpcSignatureReferenceSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ __RPC__in_opt IUri *referenceUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR referenceId,
            /* [unique][in] */ __RPC__in_opt LPCWSTR type,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReference **reference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in_opt IOpcSignatureReference *reference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceEnumerator **referenceEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureReferenceSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureReferenceSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureReferenceSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureReferenceSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IOpcSignatureReferenceSet * This,
            /* [in] */ __RPC__in_opt IUri *referenceUri,
            /* [unique][in] */ __RPC__in_opt LPCWSTR referenceId,
            /* [unique][in] */ __RPC__in_opt LPCWSTR type,
            /* [unique][in] */ __RPC__in_opt LPCWSTR digestMethod,
            /* [in] */ OPC_CANONICALIZATION_METHOD transformMethod,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReference **reference);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IOpcSignatureReferenceSet * This,
            /* [in] */ __RPC__in_opt IOpcSignatureReference *reference);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcSignatureReferenceSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureReferenceEnumerator **referenceEnumerator);
        
        END_INTERFACE
    } IOpcSignatureReferenceSetVtbl;

    interface IOpcSignatureReferenceSet
    {
        CONST_VTBL struct IOpcSignatureReferenceSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureReferenceSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureReferenceSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureReferenceSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureReferenceSet_Create(This,referenceUri,referenceId,type,digestMethod,transformMethod,reference)	\
    ( (This)->lpVtbl -> Create(This,referenceUri,referenceId,type,digestMethod,transformMethod,reference) ) 

#define IOpcSignatureReferenceSet_Delete(This,reference)	\
    ( (This)->lpVtbl -> Delete(This,reference) ) 

#define IOpcSignatureReferenceSet_GetEnumerator(This,referenceEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,referenceEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureReferenceSet_INTERFACE_DEFINED__ */


#ifndef __IOpcSignatureCustomObjectSet_INTERFACE_DEFINED__
#define __IOpcSignatureCustomObjectSet_INTERFACE_DEFINED__

/* interface IOpcSignatureCustomObjectSet */
/* [ref][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IOpcSignatureCustomObjectSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f792ac5-7947-4e11-bc3d-2659ff046ae1")
    IOpcSignatureCustomObjectSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [size_is][in] */ __RPC__in_ecount_full(count) const UINT8 *xmlMarkup,
            /* [in] */ UINT32 count,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObject **customObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in_opt IOpcSignatureCustomObject *customObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectEnumerator **customObjectEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcSignatureCustomObjectSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcSignatureCustomObjectSet * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcSignatureCustomObjectSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcSignatureCustomObjectSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IOpcSignatureCustomObjectSet * This,
            /* [size_is][in] */ __RPC__in_ecount_full(count) const UINT8 *xmlMarkup,
            /* [in] */ UINT32 count,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObject **customObject);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IOpcSignatureCustomObjectSet * This,
            /* [in] */ __RPC__in_opt IOpcSignatureCustomObject *customObject);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            __RPC__in IOpcSignatureCustomObjectSet * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcSignatureCustomObjectEnumerator **customObjectEnumerator);
        
        END_INTERFACE
    } IOpcSignatureCustomObjectSetVtbl;

    interface IOpcSignatureCustomObjectSet
    {
        CONST_VTBL struct IOpcSignatureCustomObjectSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcSignatureCustomObjectSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcSignatureCustomObjectSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcSignatureCustomObjectSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcSignatureCustomObjectSet_Create(This,xmlMarkup,count,customObject)	\
    ( (This)->lpVtbl -> Create(This,xmlMarkup,count,customObject) ) 

#define IOpcSignatureCustomObjectSet_Delete(This,customObject)	\
    ( (This)->lpVtbl -> Delete(This,customObject) ) 

#define IOpcSignatureCustomObjectSet_GetEnumerator(This,customObjectEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,customObjectEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcSignatureCustomObjectSet_INTERFACE_DEFINED__ */


#ifndef __IOpcCertificateSet_INTERFACE_DEFINED__
#define __IOpcCertificateSet_INTERFACE_DEFINED__

/* interface IOpcCertificateSet */
/* [ref][nonextensible][local][uuid][object] */ 


EXTERN_C const IID IID_IOpcCertificateSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56ea4325-8e2d-4167-b1a4-e486d24c8fa7")
    IOpcCertificateSet : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ const CERT_CONTEXT *certificate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ const CERT_CONTEXT *certificate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ IOpcCertificateEnumerator **certificateEnumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcCertificateSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOpcCertificateSet * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOpcCertificateSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOpcCertificateSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IOpcCertificateSet * This,
            /* [in] */ const CERT_CONTEXT *certificate);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IOpcCertificateSet * This,
            /* [in] */ const CERT_CONTEXT *certificate);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            IOpcCertificateSet * This,
            /* [retval][out] */ IOpcCertificateEnumerator **certificateEnumerator);
        
        END_INTERFACE
    } IOpcCertificateSetVtbl;

    interface IOpcCertificateSet
    {
        CONST_VTBL struct IOpcCertificateSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcCertificateSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcCertificateSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcCertificateSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcCertificateSet_Add(This,certificate)	\
    ( (This)->lpVtbl -> Add(This,certificate) ) 

#define IOpcCertificateSet_Remove(This,certificate)	\
    ( (This)->lpVtbl -> Remove(This,certificate) ) 

#define IOpcCertificateSet_GetEnumerator(This,certificateEnumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,certificateEnumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcCertificateSet_INTERFACE_DEFINED__ */


#ifndef __IOpcFactory_INTERFACE_DEFINED__
#define __IOpcFactory_INTERFACE_DEFINED__

/* interface IOpcFactory */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IOpcFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d0b4446-cd73-4ab3-94f4-8ccdf6116154")
    IOpcFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreatePackageRootUri( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **rootUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePartUri( 
            /* [string][in] */ __RPC__in_string LPCWSTR pwzUri,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **partUri) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CreateStreamOnFile( 
            /* [string][in] */ LPCWSTR filename,
            /* [in] */ OPC_STREAM_IO_MODE ioMode,
            /* [unique][in] */ LPSECURITY_ATTRIBUTES securityAttributes,
            /* [in] */ DWORD dwFlagsAndAttributes,
            /* [retval][out] */ IStream **stream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePackage( 
            /* [retval][out] */ __RPC__deref_out_opt IOpcPackage **package) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReadPackageFromStream( 
            /* [in] */ __RPC__in_opt IStream *stream,
            /* [in] */ OPC_READ_FLAGS flags,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPackage **package) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WritePackageToStream( 
            /* [in] */ __RPC__in_opt IOpcPackage *package,
            /* [in] */ OPC_WRITE_FLAGS flags,
            /* [in] */ __RPC__in_opt IStream *stream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDigitalSignatureManager( 
            /* [in] */ __RPC__in_opt IOpcPackage *package,
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignatureManager **signatureManager) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOpcFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IOpcFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IOpcFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IOpcFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePackageRootUri )( 
            __RPC__in IOpcFactory * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcUri **rootUri);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePartUri )( 
            __RPC__in IOpcFactory * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwzUri,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPartUri **partUri);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *CreateStreamOnFile )( 
            IOpcFactory * This,
            /* [string][in] */ LPCWSTR filename,
            /* [in] */ OPC_STREAM_IO_MODE ioMode,
            /* [unique][in] */ LPSECURITY_ATTRIBUTES securityAttributes,
            /* [in] */ DWORD dwFlagsAndAttributes,
            /* [retval][out] */ IStream **stream);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePackage )( 
            __RPC__in IOpcFactory * This,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPackage **package);
        
        HRESULT ( STDMETHODCALLTYPE *ReadPackageFromStream )( 
            __RPC__in IOpcFactory * This,
            /* [in] */ __RPC__in_opt IStream *stream,
            /* [in] */ OPC_READ_FLAGS flags,
            /* [retval][out] */ __RPC__deref_out_opt IOpcPackage **package);
        
        HRESULT ( STDMETHODCALLTYPE *WritePackageToStream )( 
            __RPC__in IOpcFactory * This,
            /* [in] */ __RPC__in_opt IOpcPackage *package,
            /* [in] */ OPC_WRITE_FLAGS flags,
            /* [in] */ __RPC__in_opt IStream *stream);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDigitalSignatureManager )( 
            __RPC__in IOpcFactory * This,
            /* [in] */ __RPC__in_opt IOpcPackage *package,
            /* [retval][out] */ __RPC__deref_out_opt IOpcDigitalSignatureManager **signatureManager);
        
        END_INTERFACE
    } IOpcFactoryVtbl;

    interface IOpcFactory
    {
        CONST_VTBL struct IOpcFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOpcFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOpcFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOpcFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOpcFactory_CreatePackageRootUri(This,rootUri)	\
    ( (This)->lpVtbl -> CreatePackageRootUri(This,rootUri) ) 

#define IOpcFactory_CreatePartUri(This,pwzUri,partUri)	\
    ( (This)->lpVtbl -> CreatePartUri(This,pwzUri,partUri) ) 

#define IOpcFactory_CreateStreamOnFile(This,filename,ioMode,securityAttributes,dwFlagsAndAttributes,stream)	\
    ( (This)->lpVtbl -> CreateStreamOnFile(This,filename,ioMode,securityAttributes,dwFlagsAndAttributes,stream) ) 

#define IOpcFactory_CreatePackage(This,package)	\
    ( (This)->lpVtbl -> CreatePackage(This,package) ) 

#define IOpcFactory_ReadPackageFromStream(This,stream,flags,package)	\
    ( (This)->lpVtbl -> ReadPackageFromStream(This,stream,flags,package) ) 

#define IOpcFactory_WritePackageToStream(This,package,flags,stream)	\
    ( (This)->lpVtbl -> WritePackageToStream(This,package,flags,stream) ) 

#define IOpcFactory_CreateDigitalSignatureManager(This,package,signatureManager)	\
    ( (This)->lpVtbl -> CreateDigitalSignatureManager(This,package,signatureManager) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOpcFactory_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_OpcFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("6B2D6BA0-9F3E-4f27-920B-313CC426A39E")
OpcFactory;
#endif
#endif /* __MSOPC_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_msopc_0001_0096 */
/* [local] */ 

#endif // (NTDDI >= NTDDI_WIN7)


extern RPC_IF_HANDLE __MIDL_itf_msopc_0001_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msopc_0001_0096_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSPAB.h ===
/*
 *	M S P A B . H
 *	
 *	Public definitions for the Microsoft Personal Address Book
 *	
 *  Copyright 1986-1999 Microsoft Corporation. All Rights Reserved.
 */

/*
 *	Microsoft Personal Address Book Provider ID
 *	-------------------------------------------
 */

#if _MSC_VER > 1000
#pragma once
#endif

#define	PAB_PROVIDER_ID		\
{							\
	0xB5, 0x3b, 0xc2, 0xc0,	\
	0x2c, 0x77, 0x10, 0x1a,	\
	0xa1, 0xbc, 0x08, 0x00,	\
	0x2b, 0x2a, 0x56, 0xc2	\
}


/*
 *	Messaging Service Properties
 *	----------------------------
 *
 *	The following properties are required to completely configure
 *	the Microsoft Personal Address Book messaging service with
 *	IMsgServiceAdmin::ConfigureMsgService() if UI is not requested
 *	by passing the UI_SERVICE flag.
 */

/*
 *		Fully qualified pathname of .PAB file to use
 */
#define		PR_PAB_PATH						PROP_TAG( PT_TSTRING,	0x6600 )
#define		PR_PAB_PATH_W					PROP_TAG( PT_UNICODE,	0x6600 )
#define		PR_PAB_PATH_A					PROP_TAG( PT_STRING8,	0x6600 )

/*
 *	The following additional properties may also be passed to
 *	customize the configuration.
 */

/*
 *		PR_DISPLAY_NAME
 *			The display name to be used for the PAB in the address
 *			book hierarchy.
 *
 *		PR_COMMENT
 *			A comment to be associated with the PAB.
 *
 *		PR_PAB_DET_DIR_VIEW_BY
 *			Determines how names of entries in the PAB with separate first
 *			and last names are displayed.
 *
 *			Possible values are:
 *
 *			PAB_DIR_VIEW_FIRST_THEN_LAST	First name followed by last name
 *			(default)						(e.g. "Dave Olsen").
 *
 *			PAB_DIR_VIEW_LAST_THEN_FIRST	Last name followed by separator
 *											followed by first name
 *											(e.g. "Olsen, Dave").
 */
#define		PR_PAB_DET_DIR_VIEW_BY			PROP_TAG( PT_LONG,		0x6601 )

#define		PAB_DIR_VIEW_FIRST_THEN_LAST	0
#define		PAB_DIR_VIEW_LAST_THEN_FIRST	1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MsiQuery.h ===
/*****************************************************************************\
*                                                                             *
* MsiQuery.h - Interface to running installer for custom actions and tools    *
*                                                                             *
* Version 3.0                                                                 *
*                                                                             *
* NOTES:  All buffers sizes are TCHAR count, null included only on input      *
*         Return argument pointers may be null if not interested in value     *
*         Returned handles of all types must be closed: MsiCloseHandle(h)     *
*         Functions with UINT return type return a system error code          *
*         Designated functions will set or clear the last error record,       *
*         which is then accessible with MsiGetLastErrorRecord. However,       *
*         the following argument errors do not register an error record:      *
*         ERROR_INVALID_HANDLE, ERROR_INVALID_PARAMETER, ERROR_MORE_DATA.     *
*                                                                             *
* Copyright (c) Microsoft Corporation.  All rights reserved.                  *
*                                                                             *
\*****************************************************************************/

#ifndef _MSIQUERY_H_
#define _MSIQUERY_H_
#include "msi.h"  // INSTALLSTATE

#define MSI_NULL_INTEGER 0x80000000  // integer value reserved for null

// MsiOpenDatabase persist predefine values, otherwise output database path is used
#define MSIDBOPEN_READONLY     (LPCTSTR)0  // database open read-only, no persistent changes
#define MSIDBOPEN_TRANSACT     (LPCTSTR)1  // database read/write in transaction mode
#define MSIDBOPEN_DIRECT       (LPCTSTR)2  // database direct read/write without transaction
#define MSIDBOPEN_CREATE       (LPCTSTR)3  // create new database, transact mode read/write
#define MSIDBOPEN_CREATEDIRECT (LPCTSTR)4  // create new database, direct mode read/write
#define MSIDBOPEN_PATCHFILE    32/sizeof(*MSIDBOPEN_READONLY) // add flag to indicate patch file

typedef enum tagMSIDBSTATE
{
	MSIDBSTATE_ERROR    =-1,  // invalid database handle
	MSIDBSTATE_READ     = 0,  // database open read-only, no persistent changes
	MSIDBSTATE_WRITE    = 1,  // database readable and updatable
} MSIDBSTATE;

typedef enum tagMSIMODIFY
{
	MSIMODIFY_SEEK             =-1,  // reposition to current record primary key
	MSIMODIFY_REFRESH          = 0,  // refetch current record data
	MSIMODIFY_INSERT           = 1,  // insert new record, fails if matching key exists
	MSIMODIFY_UPDATE           = 2,  // update existing non-key data of fetched record
	MSIMODIFY_ASSIGN           = 3,  // insert record, replacing any existing record
	MSIMODIFY_REPLACE          = 4,  // update record, delete old if primary key edit
	MSIMODIFY_MERGE            = 5,  // fails if record with duplicate key not identical
	MSIMODIFY_DELETE           = 6,  // remove row referenced by this record from table
	MSIMODIFY_INSERT_TEMPORARY = 7,  // insert a temporary record
	MSIMODIFY_VALIDATE         = 8,  // validate a fetched record
	MSIMODIFY_VALIDATE_NEW     = 9,  // validate a new record
	MSIMODIFY_VALIDATE_FIELD   = 10, // validate field(s) of an incomplete record
	MSIMODIFY_VALIDATE_DELETE  = 11, // validate before deleting record
} MSIMODIFY;

typedef enum tagMSICOLINFO
{
	MSICOLINFO_NAMES = 0,  // return column names
	MSICOLINFO_TYPES = 1,  // return column definitions, datatype code followed by width
} MSICOLINFO;

typedef enum tagMSICONDITION
{
	MSICONDITION_FALSE = 0,  // expression evaluates to False
	MSICONDITION_TRUE  = 1,  // expression evaluates to True
	MSICONDITION_NONE  = 2,  // no expression present
	MSICONDITION_ERROR = 3,  // syntax error in expression
} MSICONDITION;

typedef enum tagMSICOSTTREE
{
	MSICOSTTREE_SELFONLY = 0,
	MSICOSTTREE_CHILDREN = 1,
	MSICOSTTREE_PARENTS  = 2,
	MSICOSTTREE_RESERVED = 3,	// Reserved for future use
} MSICOSTTREE;

typedef enum tagMSIDBERROR
{
	MSIDBERROR_INVALIDARG        = -3, //  invalid argument
	MSIDBERROR_MOREDATA          = -2, //  buffer too small
	MSIDBERROR_FUNCTIONERROR     = -1, //  function error
	MSIDBERROR_NOERROR           = 0,  //  no error
	MSIDBERROR_DUPLICATEKEY      = 1,  //  new record duplicates primary keys of existing record in table
	MSIDBERROR_REQUIRED          = 2,  //  non-nullable column, no null values allowed
	MSIDBERROR_BADLINK           = 3,  //  corresponding record in foreign table not found
	MSIDBERROR_OVERFLOW          = 4,  //  data greater than maximum value allowed
	MSIDBERROR_UNDERFLOW         = 5,  //  data less than minimum value allowed
	MSIDBERROR_NOTINSET          = 6,  //  data not a member of the values permitted in the set
	MSIDBERROR_BADVERSION        = 7,  //  invalid version string
	MSIDBERROR_BADCASE           = 8,  //  invalid case, must be all upper-case or all lower-case
	MSIDBERROR_BADGUID           = 9,  //  invalid GUID
	MSIDBERROR_BADWILDCARD       = 10, //  invalid wildcardfilename or use of wildcards
	MSIDBERROR_BADIDENTIFIER     = 11, //  bad identifier
	MSIDBERROR_BADLANGUAGE       = 12, //  bad language Id(s)
	MSIDBERROR_BADFILENAME       = 13, //  bad filename
	MSIDBERROR_BADPATH           = 14, //  bad path
	MSIDBERROR_BADCONDITION      = 15, //  bad conditional statement
	MSIDBERROR_BADFORMATTED      = 16, //  bad format string
	MSIDBERROR_BADTEMPLATE       = 17, //  bad template string
	MSIDBERROR_BADDEFAULTDIR     = 18, //  bad string in DefaultDir column of Directory table
	MSIDBERROR_BADREGPATH        = 19, //  bad registry path string
	MSIDBERROR_BADCUSTOMSOURCE   = 20, //  bad string in CustomSource column of CustomAction table
	MSIDBERROR_BADPROPERTY       = 21, //  bad property string
	MSIDBERROR_MISSINGDATA       = 22, //  _Validation table missing reference to column
	MSIDBERROR_BADCATEGORY       = 23, //  Category column of _Validation table for column is invalid
	MSIDBERROR_BADKEYTABLE       = 24, //  table in KeyTable column of _Validation table could not be found/loaded
	MSIDBERROR_BADMAXMINVALUES   = 25, //  value in MaxValue column of _Validation table is less than value in MinValue column
	MSIDBERROR_BADCABINET        = 26, //  bad cabinet name
	MSIDBERROR_BADSHORTCUT       = 27, //  bad shortcut target
	MSIDBERROR_STRINGOVERFLOW    = 28, //  string overflow (greater than length allowed in column def)
	MSIDBERROR_BADLOCALIZEATTRIB = 29  //  invalid localization attribute (primary keys cannot be localized)

} MSIDBERROR;

typedef enum tagMSIRUNMODE
{
	MSIRUNMODE_ADMIN           =  0, // admin mode install, else product install
	MSIRUNMODE_ADVERTISE       =  1, // installing advertisements, else installing or updating product
	MSIRUNMODE_MAINTENANCE     =  2, // modifying an existing installation, else new installation
	MSIRUNMODE_ROLLBACKENABLED =  3, // rollback is enabled
	MSIRUNMODE_LOGENABLED      =  4, // log file active, enabled prior to install session
	MSIRUNMODE_OPERATIONS      =  5, // spooling execute operations, else in determination phase
	MSIRUNMODE_REBOOTATEND     =  6, // reboot needed after successful installation (settable)
	MSIRUNMODE_REBOOTNOW       =  7, // reboot needed to continue installation (settable)
	MSIRUNMODE_CABINET         =  8, // installing files from cabinets and files using Media table
	MSIRUNMODE_SOURCESHORTNAMES=  9, // source LongFileNames suppressed via PID_MSISOURCE summary property
	MSIRUNMODE_TARGETSHORTNAMES= 10, // target LongFileNames suppressed via SHORTFILENAMES property
	MSIRUNMODE_RESERVED11      = 11, // future use
	MSIRUNMODE_WINDOWS9X       = 12, // operating systems is Windows9?, else Windows NT
	MSIRUNMODE_ZAWENABLED      = 13, // operating system supports demand installation
	MSIRUNMODE_RESERVED14      = 14, // future use
	MSIRUNMODE_RESERVED15      = 15, // future use
	MSIRUNMODE_SCHEDULED       = 16, // custom action call from install script execution
	MSIRUNMODE_ROLLBACK        = 17, // custom action call from rollback execution script
	MSIRUNMODE_COMMIT          = 18, // custom action call from commit execution script
} MSIRUNMODE;

#define INSTALLMESSAGE_TYPEMASK 0xFF000000L  // mask for type code

// Note: INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, INSTALLMESSAGE_USER are to or'd
// with a message box style to indicate the buttons to display and return:
// MB_OK,MB_OKCANCEL,MB_ABORTRETRYIGNORE,MB_YESNOCANCEL,MB_YESNO,MB_RETRYCANCEL
// the default button (MB_DEFBUTTON1 is normal default):
// MB_DEFBUTTON1, MB_DEFBUTTON2, MB_DEFBUTTON3
// and optionally an icon style:
// MB_ICONERROR, MB_ICONQUESTION, MB_ICONWARNING, MB_ICONINFORMATION

typedef enum tagMSITRANSFORM_ERROR
{
	MSITRANSFORM_ERROR_ADDEXISTINGROW   =  0x00000001,
	MSITRANSFORM_ERROR_DELMISSINGROW    =  0x00000002,
	MSITRANSFORM_ERROR_ADDEXISTINGTABLE =  0x00000004,
	MSITRANSFORM_ERROR_DELMISSINGTABLE  =  0x00000008,
	MSITRANSFORM_ERROR_UPDATEMISSINGROW =  0x00000010,
	MSITRANSFORM_ERROR_CHANGECODEPAGE   =  0x00000020,
	MSITRANSFORM_ERROR_VIEWTRANSFORM    =  0x00000100,
} MSITRANSFORM_ERROR;

typedef enum tagMSITRANSFORM_VALIDATE
{
	MSITRANSFORM_VALIDATE_LANGUAGE                   = 0x00000001,
	MSITRANSFORM_VALIDATE_PRODUCT                    = 0x00000002,
	MSITRANSFORM_VALIDATE_PLATFORM                   = 0x00000004,
	MSITRANSFORM_VALIDATE_MAJORVERSION               = 0x00000008,
	MSITRANSFORM_VALIDATE_MINORVERSION               = 0x00000010,
	MSITRANSFORM_VALIDATE_UPDATEVERSION              = 0x00000020,
	MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION         = 0x00000040,
	MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION    = 0x00000080,
	MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION        = 0x00000100,
	MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION = 0x00000200,
	MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION      = 0x00000400,
	MSITRANSFORM_VALIDATE_UPGRADECODE                = 0x00000800,
} MSITRANSFORM_VALIDATE;

#ifdef __cplusplus
extern "C" {
#endif

// --------------------------------------------------------------------------
// Installer database access functions
// --------------------------------------------------------------------------

// Prepare a database query, creating a view object
// Returns ERROR_SUCCESS if successful, and the view handle is returned,
// else ERROR_INVALID_HANDLE, ERROR_INVALID_HANDLE_STATE, ERROR_BAD_QUERY_SYNTAX, ERROR_GEN_FAILURE
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseOpenViewA(MSIHANDLE hDatabase,
	LPCSTR     szQuery,            // SQL query to be prepared
	MSIHANDLE*  phView);            // returned view if TRUE
UINT WINAPI MsiDatabaseOpenViewW(MSIHANDLE hDatabase,
	LPCWSTR     szQuery,            // SQL query to be prepared
	MSIHANDLE*  phView);            // returned view if TRUE
#ifdef UNICODE
#define MsiDatabaseOpenView  MsiDatabaseOpenViewW
#else
#define MsiDatabaseOpenView  MsiDatabaseOpenViewA
#endif // !UNICODE

// Returns the MSIDBERROR enum and name of the column corresponding to the error
// Similar to a GetLastError function, but for the view. NOT the same as MsiGetLastErrorRecord
// Returns errors of MsiViewModify.

MSIDBERROR WINAPI MsiViewGetErrorA(MSIHANDLE hView,
	__out_ecount_opt(*pcchBuf)  LPSTR szColumnNameBuffer,   // buffer to hold column name 
	__inout_opt                 LPDWORD pcchBuf);             // size of buffer
MSIDBERROR WINAPI MsiViewGetErrorW(MSIHANDLE hView,
	__out_ecount_opt(*pcchBuf)  LPWSTR szColumnNameBuffer,   // buffer to hold column name 
	__inout_opt                 LPDWORD pcchBuf);             // size of buffer
#ifdef UNICODE
#define MsiViewGetError  MsiViewGetErrorW
#else
#define MsiViewGetError  MsiViewGetErrorA
#endif // !UNICODE

// Exectute the view query, supplying parameters as required
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_HANDLE_STATE, ERROR_GEN_FAILURE
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiViewExecute(MSIHANDLE hView,
	MSIHANDLE hRecord);             // optional parameter record, or 0 if none

// Fetch the next sequential record from the view
// Result is ERROR_SUCCESS if a row is found, and its handle is returned
// else ERROR_NO_MORE_ITEMS if no records remain, and a null handle is returned
// else result is error: ERROR_INVALID_HANDLE_STATE, ERROR_INVALID_HANDLE, ERROR_GEN_FAILURE

UINT WINAPI MsiViewFetch(MSIHANDLE hView,
	MSIHANDLE  *phRecord);          // returned data record if fetch succeeds

// Modify a database record, parameters must match types in query columns
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_HANDLE_STATE, ERROR_GEN_FAILURE, ERROR_ACCESS_DENIED
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiViewModify(MSIHANDLE hView,
	MSIMODIFY eModifyMode,         // modify action to perform
	MSIHANDLE hRecord);            // record obtained from fetch, or new record

// Return the column names or specifications for the current view
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_PARAMETER, or ERROR_INVALID_HANDLE_STATE

UINT WINAPI MsiViewGetColumnInfo(MSIHANDLE hView,
	MSICOLINFO eColumnInfo,        // retrieve columns names or definitions
	MSIHANDLE *phRecord);          // returned data record containing all names or definitions

// Release the result set for an executed view, to allow re-execution
// Only needs to be called if not all records have been fetched
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_HANDLE_STATE

UINT WINAPI MsiViewClose(MSIHANDLE hView);

// Return a record containing the names of all primary key columns for a given table
// Returns an MSIHANDLE for a record containing the name of each column.
// The field count of the record corresponds to the number of primary key columns.
// Field [0] of the record contains the table name.
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_TABLE

UINT WINAPI MsiDatabaseGetPrimaryKeysA(MSIHANDLE hDatabase,
	LPCSTR    szTableName,       // the name of a specific table <case-sensitive>
	MSIHANDLE  *phRecord);         // returned record if ERROR_SUCCESS
UINT WINAPI MsiDatabaseGetPrimaryKeysW(MSIHANDLE hDatabase,
	LPCWSTR    szTableName,       // the name of a specific table <case-sensitive>
	MSIHANDLE  *phRecord);         // returned record if ERROR_SUCCESS
#ifdef UNICODE
#define MsiDatabaseGetPrimaryKeys  MsiDatabaseGetPrimaryKeysW
#else
#define MsiDatabaseGetPrimaryKeys  MsiDatabaseGetPrimaryKeysA
#endif // !UNICODE

// Return an enum defining the state of the table (temporary, unknown, or persistent).
// Returns MSICONDITION_ERROR, MSICONDITION_FALSE, MSICONDITION_TRUE, MSICONDITION_NONE

MSICONDITION WINAPI MsiDatabaseIsTablePersistentA(MSIHANDLE hDatabase,
	LPCSTR szTableName);         // the name of a specific table
MSICONDITION WINAPI MsiDatabaseIsTablePersistentW(MSIHANDLE hDatabase,
	LPCWSTR szTableName);         // the name of a specific table
#ifdef UNICODE
#define MsiDatabaseIsTablePersistent  MsiDatabaseIsTablePersistentW
#else
#define MsiDatabaseIsTablePersistent  MsiDatabaseIsTablePersistentA
#endif // !UNICODE

// --------------------------------------------------------------------------
// Summary information stream management functions
// --------------------------------------------------------------------------

// Integer Property IDs:    1, 14, 15, 16, 19 
// DateTime Property IDs:   10, 11, 12, 13
// Text Property IDs:       2, 3, 4, 5, 6, 7, 8, 9, 18
// Unsupported Propery IDs: 0 (PID_DICTIONARY), 17 (PID_THUMBNAIL)

// Obtain a handle for the _SummaryInformation stream for an MSI database     
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiGetSummaryInformationA(MSIHANDLE hDatabase, // 0 if not open
	LPCSTR  szDatabasePath,  // path to database, 0 if database handle supplied
	UINT     uiUpdateCount,    // maximium number of updated values, 0 to open read-only
	MSIHANDLE *phSummaryInfo); // returned handle to summary information data
UINT WINAPI MsiGetSummaryInformationW(MSIHANDLE hDatabase, // 0 if not open
	LPCWSTR  szDatabasePath,  // path to database, 0 if database handle supplied
	UINT     uiUpdateCount,    // maximium number of updated values, 0 to open read-only
	MSIHANDLE *phSummaryInfo); // returned handle to summary information data
#ifdef UNICODE
#define MsiGetSummaryInformation  MsiGetSummaryInformationW
#else
#define MsiGetSummaryInformation  MsiGetSummaryInformationA
#endif // !UNICODE

// Obtain the number of existing properties in the SummaryInformation stream

UINT WINAPI MsiSummaryInfoGetPropertyCount(MSIHANDLE hSummaryInfo,
	PUINT puiPropertyCount); // pointer to location to return total property count

// Set a single summary information property
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_UNKNOWN_PROPERTY

UINT WINAPI MsiSummaryInfoSetPropertyA(MSIHANDLE hSummaryInfo,
	UINT     uiProperty,     // property ID, one of allowed values for summary information
	UINT     uiDataType,     // VT_I4, VT_LPSTR, VT_FILETIME, or VT_EMPTY
	INT      iValue,         // integer value, used only if integer property
	FILETIME *pftValue,      // pointer to filetime value, used only if datetime property
	LPCSTR szValue);       // text value, used only if string property
UINT WINAPI MsiSummaryInfoSetPropertyW(MSIHANDLE hSummaryInfo,
	UINT     uiProperty,     // property ID, one of allowed values for summary information
	UINT     uiDataType,     // VT_I4, VT_LPSTR, VT_FILETIME, or VT_EMPTY
	INT      iValue,         // integer value, used only if integer property
	FILETIME *pftValue,      // pointer to filetime value, used only if datetime property
	LPCWSTR szValue);       // text value, used only if string property
#ifdef UNICODE
#define MsiSummaryInfoSetProperty  MsiSummaryInfoSetPropertyW
#else
#define MsiSummaryInfoSetProperty  MsiSummaryInfoSetPropertyA
#endif // !UNICODE

// Get a single property from the summary information
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_UNKNOWN_PROPERTY

UINT WINAPI MsiSummaryInfoGetPropertyA(MSIHANDLE hSummaryInfo,
	UINT     uiProperty,     // property ID, one of allowed values for summary information
	__out PUINT     puiDataType,   // returned type: VT_I4, VT_LPSTR, VT_FILETIME, VT_EMPTY
	__out LPINT     piValue,       // returned integer property data
	__out_opt                        FILETIME  *pftValue,      // returned datetime property data
	__out_ecount_opt(*pcchValueBuf)  LPSTR   szValueBuf,     // buffer to return string property data
	__inout_opt                      LPDWORD   pcchValueBuf);  // in/out buffer character count
UINT WINAPI MsiSummaryInfoGetPropertyW(MSIHANDLE hSummaryInfo,
	UINT     uiProperty,     // property ID, one of allowed values for summary information
	__out PUINT     puiDataType,   // returned type: VT_I4, VT_LPSTR, VT_FILETIME, VT_EMPTY
	__out LPINT     piValue,       // returned integer property data
	__out_opt                        FILETIME  *pftValue,      // returned datetime property data
	__out_ecount_opt(*pcchValueBuf)  LPWSTR   szValueBuf,     // buffer to return string property data
	__inout_opt                      LPDWORD   pcchValueBuf);  // in/out buffer character count
#ifdef UNICODE
#define MsiSummaryInfoGetProperty  MsiSummaryInfoGetPropertyW
#else
#define MsiSummaryInfoGetProperty  MsiSummaryInfoGetPropertyA
#endif // !UNICODE

// Write back changed information to summary information stream

UINT WINAPI MsiSummaryInfoPersist(MSIHANDLE hSummaryInfo);

// --------------------------------------------------------------------------
// Installer database management functions - not used by custom actions
// --------------------------------------------------------------------------

// Open an installer database, specifying the persistance mode, which is a pointer.
// Predefined persist values are reserved pointer values, requiring pointer arithmetic.
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiOpenDatabaseA(
	LPCSTR      szDatabasePath,  // path to database, 0 to create temporary database
	LPCSTR      szPersist,       // output database path or one of predefined values
	MSIHANDLE*   phDatabase);     // location to return database handle
UINT WINAPI MsiOpenDatabaseW(
	LPCWSTR      szDatabasePath,  // path to database, 0 to create temporary database
	LPCWSTR      szPersist,       // output database path or one of predefined values
	MSIHANDLE*   phDatabase);     // location to return database handle
#ifdef UNICODE
#define MsiOpenDatabase  MsiOpenDatabaseW
#else
#define MsiOpenDatabase  MsiOpenDatabaseA
#endif // !UNICODE

// Import an MSI text archive table into an open database
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseImportA(MSIHANDLE hDatabase,
	LPCSTR   szFolderPath,     // folder containing archive files
	LPCSTR   szFileName);      // table archive file to be imported
UINT WINAPI MsiDatabaseImportW(MSIHANDLE hDatabase,
	LPCWSTR   szFolderPath,     // folder containing archive files
	LPCWSTR   szFileName);      // table archive file to be imported
#ifdef UNICODE
#define MsiDatabaseImport  MsiDatabaseImportW
#else
#define MsiDatabaseImport  MsiDatabaseImportA
#endif // !UNICODE

// Export an MSI table from an open database to a text archive file
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseExportA(MSIHANDLE hDatabase,
	LPCSTR   szTableName,      // name of table in database <case-sensitive>
	LPCSTR   szFolderPath,     // folder containing archive files
	LPCSTR   szFileName);      // name of exported table archive file
UINT WINAPI MsiDatabaseExportW(MSIHANDLE hDatabase,
	LPCWSTR   szTableName,      // name of table in database <case-sensitive>
	LPCWSTR   szFolderPath,     // folder containing archive files
	LPCWSTR   szFileName);      // name of exported table archive file
#ifdef UNICODE
#define MsiDatabaseExport  MsiDatabaseExportW
#else
#define MsiDatabaseExport  MsiDatabaseExportA
#endif // !UNICODE

// Merge two database together, allowing duplicate rows
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseMergeA(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseMerge,    // database to be merged into hDatabase
	LPCSTR   szTableName);      // name of non-persistent table to receive errors
UINT WINAPI MsiDatabaseMergeW(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseMerge,    // database to be merged into hDatabase
	LPCWSTR   szTableName);      // name of non-persistent table to receive errors
#ifdef UNICODE
#define MsiDatabaseMerge  MsiDatabaseMergeW
#else
#define MsiDatabaseMerge  MsiDatabaseMergeA
#endif // !UNICODE

// Generate a transform file of differences between two databases
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseGenerateTransformA(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseReference, // base database to reference changes
	LPCSTR   szTransformFile,   // name of generated transform file
	int       iReserved1,         // reserved argument, not used
	int       iReserved2);        // reserved argument, not used
UINT WINAPI MsiDatabaseGenerateTransformW(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseReference, // base database to reference changes
	LPCWSTR   szTransformFile,   // name of generated transform file
	int       iReserved1,         // reserved argument, not used
	int       iReserved2);        // reserved argument, not used
#ifdef UNICODE
#define MsiDatabaseGenerateTransform  MsiDatabaseGenerateTransformW
#else
#define MsiDatabaseGenerateTransform  MsiDatabaseGenerateTransformA
#endif // !UNICODE

// Apply a transform file containing database difference
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseApplyTransformA(MSIHANDLE hDatabase,
	LPCSTR   szTransformFile,    // name of transform file
	int       iErrorConditions);   // errors to suppress, bits from MSITRANSFORM_ERROR
UINT WINAPI MsiDatabaseApplyTransformW(MSIHANDLE hDatabase,
	LPCWSTR   szTransformFile,    // name of transform file
	int       iErrorConditions);   // errors to suppress, bits from MSITRANSFORM_ERROR
#ifdef UNICODE
#define MsiDatabaseApplyTransform  MsiDatabaseApplyTransformW
#else
#define MsiDatabaseApplyTransform  MsiDatabaseApplyTransformA
#endif // !UNICODE

// Create summary information of existing transform to include validation and error conditions
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiCreateTransformSummaryInfoA(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseReference, // base database to reference changes
	LPCSTR   szTransformFile,    // name of generated transform file
	int       iErrorConditions,    // errors to suppress when applied, from MSITRANSFORM_ERROR
	int       iValidation);        // properties validated when applied, MSITRANSFORM_VALIDATE
UINT WINAPI MsiCreateTransformSummaryInfoW(MSIHANDLE hDatabase,
	MSIHANDLE hDatabaseReference, // base database to reference changes
	LPCWSTR   szTransformFile,    // name of generated transform file
	int       iErrorConditions,    // errors to suppress when applied, from MSITRANSFORM_ERROR
	int       iValidation);        // properties validated when applied, MSITRANSFORM_VALIDATE
#ifdef UNICODE
#define MsiCreateTransformSummaryInfo  MsiCreateTransformSummaryInfoW
#else
#define MsiCreateTransformSummaryInfo  MsiCreateTransformSummaryInfoA
#endif // !UNICODE

// Write out all persistent table data, ignored if database opened read-only
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiDatabaseCommit(MSIHANDLE hDatabase);

// Return the update state of a database

MSIDBSTATE WINAPI MsiGetDatabaseState(MSIHANDLE hDatabase);

// --------------------------------------------------------------------------
// Record object functions
// --------------------------------------------------------------------------

// Create a new record object with the requested number of fields
// Field 0, not included in count, is used for format strings and op codes
// All fields are initialized to null
// Returns a handle to the created record, or 0 if memory could not be allocated

MSIHANDLE WINAPI MsiCreateRecord(
	UINT cParams);                   // the number of data fields

// Report whether a record field is NULL
// Returns TRUE if the field is null or does not exist
// Returns FALSE if the field contains data, or the handle is invalid

BOOL WINAPI MsiRecordIsNull(MSIHANDLE hRecord,
	UINT iField);

// Return the length of a record field
// Returns 0 if field is NULL or non-existent
// Returns sizeof(int) if integer data
// Returns character count if string data (not counting null terminator)
// Returns bytes count if stream data

UINT WINAPI MsiRecordDataSize(MSIHANDLE hRecord,
	UINT iField);

// Set a record field to an integer value
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_FIELD

UINT WINAPI MsiRecordSetInteger(MSIHANDLE hRecord,
	UINT iField,
	int iValue);

// Copy a string into the designated field
// A null string pointer and an empty string both set the field to null
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_INVALID_FIELD

UINT WINAPI MsiRecordSetStringA(MSIHANDLE hRecord,
	UINT iField,
	LPCSTR      szValue);
UINT WINAPI MsiRecordSetStringW(MSIHANDLE hRecord,
	UINT iField,
	LPCWSTR      szValue);
#ifdef UNICODE
#define MsiRecordSetString  MsiRecordSetStringW
#else
#define MsiRecordSetString  MsiRecordSetStringA
#endif // !UNICODE

// Return the integer value from a record field
// Returns the value MSI_NULL_INTEGER if the field is null
// or if the field is a string that cannot be converted to an integer

int WINAPI MsiRecordGetInteger(MSIHANDLE hRecord,
	UINT iField);

// Return the string value of a record field
// Integer fields will be converted to a string
// Null and non-existent fields will report a value of 0
// Fields containing stream data will return ERROR_INVALID_DATATYPE
// Returns ERROR_SUCCESS, ERROR_MORE_DATA, 
//         ERROR_INVALID_HANDLE, ERROR_INVALID_FIELD, ERROR_BAD_ARGUMENTS

UINT WINAPI MsiRecordGetStringA(MSIHANDLE hRecord,
	                                UINT iField,
	__out_ecount_opt(*pcchValueBuf) LPSTR  szValueBuf,      // buffer for returned value
	__inout_opt                     LPDWORD  pcchValueBuf);   // in/out buffer character count
UINT WINAPI MsiRecordGetStringW(MSIHANDLE hRecord,
	                                UINT iField,
	__out_ecount_opt(*pcchValueBuf) LPWSTR  szValueBuf,      // buffer for returned value
	__inout_opt                     LPDWORD  pcchValueBuf);   // in/out buffer character count
#ifdef UNICODE
#define MsiRecordGetString  MsiRecordGetStringW
#else
#define MsiRecordGetString  MsiRecordGetStringA
#endif // !UNICODE

// Returns the number of fields allocated in the record
// Does not count field 0, used for formatting and op codes

UINT WINAPI MsiRecordGetFieldCount(MSIHANDLE hRecord);

// Set a record stream field from a file
// The contents of the specified file will be read into a stream object
// The stream will be persisted if the record is inserted into the database
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiRecordSetStreamA(MSIHANDLE hRecord,
	UINT iField,
	LPCSTR      szFilePath);   // path to file containing stream data
UINT WINAPI MsiRecordSetStreamW(MSIHANDLE hRecord,
	UINT iField,
	LPCWSTR      szFilePath);   // path to file containing stream data
#ifdef UNICODE
#define MsiRecordSetStream  MsiRecordSetStreamW
#else
#define MsiRecordSetStream  MsiRecordSetStreamA
#endif // !UNICODE

// Read bytes from a record stream field into a buffer
// Must set the in/out argument to the requested byte count to read
// The number of bytes transferred is returned through the argument
// If no more bytes are available, ERROR_SUCCESS is still returned

UINT WINAPI MsiRecordReadStream(MSIHANDLE hRecord,
	                               UINT iField,
	__out_bcount_opt(*pcbDataBuf)  char    *szDataBuf,   // buffer to receive bytes from stream
	__inout                        LPDWORD pcbDataBuf);  // in/out buffer byte count

// Clears all data fields in a record to NULL

UINT WINAPI MsiRecordClearData(MSIHANDLE hRecord);

// --------------------------------------------------------------------------
// Functions to access a running installation, called from custom actions
// The install handle is the single argument passed to custom actions
// --------------------------------------------------------------------------

// Return a handle to the database currently in use by this installer instance

MSIHANDLE WINAPI MsiGetActiveDatabase(MSIHANDLE hInstall); // returns handle to database, 0 if none active

// Set the value for an installer property
// If the property is not defined, it will be created
// If the value is null or an empty string, the property will be removed
// Returns ERROR_SUCCESS, ERROR_INVALID_HANDLE, ERROR_BAD_ARGUMENTS

UINT WINAPI MsiSetPropertyA(MSIHANDLE hInstall,
	LPCSTR   szName,       // property identifier, case-sensitive
	LPCSTR   szValue);     // property value, null to undefine property
UINT WINAPI MsiSetPropertyW(MSIHANDLE hInstall,
	LPCWSTR   szName,       // property identifier, case-sensitive
	LPCWSTR   szValue);     // property value, null to undefine property
#ifdef UNICODE
#define MsiSetProperty  MsiSetPropertyW
#else
#define MsiSetProperty  MsiSetPropertyA
#endif // !UNICODE

// Get the value for an installer property
// If the property is not defined, it is equivalent to a 0-length value, not error
// Returns ERROR_SUCCESS, ERROR_MORE_DATA, ERROR_INVALID_HANDLE, ERROR_BAD_ARGUMENTS

UINT  WINAPI MsiGetPropertyA(MSIHANDLE hInstall,
	                                 LPCSTR szName,           // property identifier, case-sensitive
	__out_ecount_opt(*pcchValueBuf)  LPSTR  szValueBuf,       // buffer for returned property value
	__inout_opt                      LPDWORD  pcchValueBuf);    // in/out buffer character count
UINT  WINAPI MsiGetPropertyW(MSIHANDLE hInstall,
	                                 LPCWSTR szName,           // property identifier, case-sensitive
	__out_ecount_opt(*pcchValueBuf)  LPWSTR  szValueBuf,       // buffer for returned property value
	__inout_opt                      LPDWORD  pcchValueBuf);    // in/out buffer character count
#ifdef UNICODE
#define MsiGetProperty  MsiGetPropertyW
#else
#define MsiGetProperty  MsiGetPropertyA
#endif // !UNICODE

// Return the numeric language for the currently running install
// Returns 0 if an install not running

LANGID WINAPI MsiGetLanguage(MSIHANDLE hInstall);

// Return one of the boolean internal installer states
// Returns FALSE if the handle is not active or if the mode is not implemented

BOOL WINAPI MsiGetMode(MSIHANDLE hInstall,
	MSIRUNMODE eRunMode);   // particular mode for which the state is returned

// Set an internal install session boolean mode - Note: most modes are read-only
// Returns ERROR_SUCCESS if the mode can be set to the desired state
// Returns ERROR_ACCESS_DENIED if the mode is not settable
// Returns ERROR_INVALID_HANDLE if the handle is not an active install session

UINT WINAPI MsiSetMode(MSIHANDLE hInstall,
	MSIRUNMODE eRunMode,    // particular mode for which state is to be set
	BOOL fState);           // new state for bit flag

// Format record data using a format string containing field markers and/or properties
// Record field 0 must contain the format string
// Other fields must contain data that may be referenced by the format string.

UINT WINAPI MsiFormatRecordA(MSIHANDLE hInstall, // non-zero for property expansion
	                                  MSIHANDLE hRecord,         // handle to record, field 0 contains format string
	__out_ecount_opt(*pcchResultBuf)  LPSTR    szResultBuf,    // buffer to return formatted string
	__inout_opt                       LPDWORD    pcchResultBuf); // in/out buffer character count
UINT WINAPI MsiFormatRecordW(MSIHANDLE hInstall, // non-zero for property expansion
	                                  MSIHANDLE hRecord,         // handle to record, field 0 contains format string
	__out_ecount_opt(*pcchResultBuf)  LPWSTR    szResultBuf,    // buffer to return formatted string
	__inout_opt                       LPDWORD    pcchResultBuf); // in/out buffer character count
#ifdef UNICODE
#define MsiFormatRecord  MsiFormatRecordW
#else
#define MsiFormatRecord  MsiFormatRecordA
#endif // !UNICODE

// Execute another action, either built-in, custom, or UI wizard
// Returns ERROR_FUNCTION_NOT_CALLED if action not found
// Returns ERROR_SUCCESS if action completed succesfully
// Returns ERROR_INSTALL_USEREXIT if user cancelled during action
// Returns ERROR_INSTALL_FAILURE if action failed
// Returns ERROR_INSTALL_SUSPEND if user suspended installation
// Returns ERROR_MORE_DATA if action wishes to skip remaining actions
// Returns ERROR_INVALID_HANDLE_STATE if install session not active
// Returns ERROR_INVALID_DATA if failure calling custom action
// Returns ERROR_INVALID_HANDLE or ERROR_INVALID_PARAMETER if arguments invalid

UINT WINAPI MsiDoActionA(MSIHANDLE hInstall,
	LPCSTR szAction);     // name of action to call, case-sensitive
UINT WINAPI MsiDoActionW(MSIHANDLE hInstall,
	LPCWSTR szAction);     // name of action to call, case-sensitive
#ifdef UNICODE
#define MsiDoAction  MsiDoActionW
#else
#define MsiDoAction  MsiDoActionA
#endif // !UNICODE

// Execute another action sequence, as descibed in the specified table
// Returns the same error codes as MsiDoAction

UINT WINAPI MsiSequenceA(MSIHANDLE hInstall,
	LPCSTR szTable,       // name of table containing action sequence
	INT iSequenceMode);     // for future use, must be 0 in MSI 1.0
UINT WINAPI MsiSequenceW(MSIHANDLE hInstall,
	LPCWSTR szTable,       // name of table containing action sequence
	INT iSequenceMode);     // for future use, must be 0 in MSI 1.0
#ifdef UNICODE
#define MsiSequence  MsiSequenceW
#else
#define MsiSequence  MsiSequenceA
#endif // !UNICODE

// Send an error record to the installer for processing.
// If field 0 (template) is not set, field 1 must be set to the error code,
//   corresponding the the error message in the Error database table,
//   and the message will be formatted using the template from the Error table
//   before passing it to the UI handler for display.
// Returns Win32 button codes: IDOK IDCANCEL IDABORT IDRETRY IDIGNORE IDYES IDNO
//   or 0 if no action taken, or -1 if invalid argument or handle

int WINAPI MsiProcessMessage(MSIHANDLE hInstall,
	INSTALLMESSAGE eMessageType, // type of message
	MSIHANDLE hRecord);          // record containing message format and data

// Evaluate a conditional expression containing property names and values

MSICONDITION WINAPI MsiEvaluateConditionA(MSIHANDLE hInstall,
	LPCSTR  szCondition);
MSICONDITION WINAPI MsiEvaluateConditionW(MSIHANDLE hInstall,
	LPCWSTR  szCondition);
#ifdef UNICODE
#define MsiEvaluateCondition  MsiEvaluateConditionW
#else
#define MsiEvaluateCondition  MsiEvaluateConditionA
#endif // !UNICODE

// Get the installed state and requested action state of a feature
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiGetFeatureStateA(MSIHANDLE hInstall,
	LPCSTR     szFeature,     // feature name within product
	INSTALLSTATE *piInstalled,  // returned current install state
	INSTALLSTATE *piAction);    // action taken during install session
UINT WINAPI MsiGetFeatureStateW(MSIHANDLE hInstall,
	LPCWSTR     szFeature,     // feature name within product
	INSTALLSTATE *piInstalled,  // returned current install state
	INSTALLSTATE *piAction);    // action taken during install session
#ifdef UNICODE
#define MsiGetFeatureState  MsiGetFeatureStateW
#else
#define MsiGetFeatureState  MsiGetFeatureStateA
#endif // !UNICODE

// Request a feature to be set to a specified state
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiSetFeatureStateA(MSIHANDLE hInstall,
	LPCSTR     szFeature,     // feature name within product
	INSTALLSTATE iState);       // requested state for feature
UINT WINAPI MsiSetFeatureStateW(MSIHANDLE hInstall,
	LPCWSTR     szFeature,     // feature name within product
	INSTALLSTATE iState);       // requested state for feature
#ifdef UNICODE
#define MsiSetFeatureState  MsiSetFeatureStateW
#else
#define MsiSetFeatureState  MsiSetFeatureStateA
#endif // !UNICODE

#if (_WIN32_MSI >=  110)

// Set the attribute bits of a specified feature at runtime.
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiSetFeatureAttributesA(MSIHANDLE hInstall,
	LPCSTR     szFeature,     // feature name within product
	DWORD dwAttributes);        // attributes bits to set for this feature
UINT WINAPI MsiSetFeatureAttributesW(MSIHANDLE hInstall,
	LPCWSTR     szFeature,     // feature name within product
	DWORD dwAttributes);        // attributes bits to set for this feature
#ifdef UNICODE
#define MsiSetFeatureAttributes  MsiSetFeatureAttributesW
#else
#define MsiSetFeatureAttributes  MsiSetFeatureAttributesA
#endif // !UNICODE

#endif //(_WIN32_MSI >=  110)

// Get the installed state and requested action state of a component
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiGetComponentStateA(MSIHANDLE hInstall,
	LPCSTR     szComponent,   // component name within product
	INSTALLSTATE *piInstalled,  // returned current install state
	INSTALLSTATE *piAction);    // action taken during install session
UINT WINAPI MsiGetComponentStateW(MSIHANDLE hInstall,
	LPCWSTR     szComponent,   // component name within product
	INSTALLSTATE *piInstalled,  // returned current install state
	INSTALLSTATE *piAction);    // action taken during install session
#ifdef UNICODE
#define MsiGetComponentState  MsiGetComponentStateW
#else
#define MsiGetComponentState  MsiGetComponentStateA
#endif // !UNICODE

// Request a component to be set to a specified state
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiSetComponentStateA(MSIHANDLE hInstall,
	LPCSTR     szComponent,   // component name within product
	INSTALLSTATE iState);       // requested state for component
UINT WINAPI MsiSetComponentStateW(MSIHANDLE hInstall,
	LPCWSTR     szComponent,   // component name within product
	INSTALLSTATE iState);       // requested state for component
#ifdef UNICODE
#define MsiSetComponentState  MsiSetComponentStateW
#else
#define MsiSetComponentState  MsiSetComponentStateA
#endif // !UNICODE

// Return the disk cost for a feature and related features
// Can specify either current feature state or proposed state
// Can specify extent of related features to cost
// Note that adding costs for several features may produce an
// excessively large cost due to shared components and parents.
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT  WINAPI MsiGetFeatureCostA(MSIHANDLE hInstall,
	LPCSTR      szFeature,      // name of feature
	MSICOSTTREE  iCostTree,     // portion of tree to cost
	INSTALLSTATE iState,        // requested state, or INSTALLSTATE_UNKNOWN
	LPINT         piCost);      // returned cost, in units of 512 bytes
UINT  WINAPI MsiGetFeatureCostW(MSIHANDLE hInstall,
	LPCWSTR      szFeature,      // name of feature
	MSICOSTTREE  iCostTree,     // portion of tree to cost
	INSTALLSTATE iState,        // requested state, or INSTALLSTATE_UNKNOWN
	LPINT         piCost);      // returned cost, in units of 512 bytes
#ifdef UNICODE
#define MsiGetFeatureCost  MsiGetFeatureCostW
#else
#define MsiGetFeatureCost  MsiGetFeatureCostA
#endif // !UNICODE

#if (_WIN32_MSI >= 150)

// Enumerates the costs and temporary costs per drives for
// szComponent. If szComponent is set to NULL, it enumerates
// the above costs for the engine, per drives.
//
// The enumeration is 0-based, i.e. it returns the data for
// the first drive when called w/ dwIndex set to 0.
//
// Can specify either current feature state or proposed state.
//
// Execution of this function sets the error record, accessible
// via MsiGetLastErrorRecord.

UINT WINAPI MsiEnumComponentCostsA(MSIHANDLE hInstall,
	LPCSTR      szComponent,     // name of component
	DWORD        dwIndex,         // 0-based index into the list of drives
	INSTALLSTATE iState,          // requested state, or INSTALLSTATE_UNKNOWN
	__out_ecount(*pcchDriveBuf)  LPSTR       szDriveBuf,     // buffer for returned value
	__inout                      LPDWORD       pcchDriveBuf,   // in/out buffer character count
	__out                        LPINT         piCost,         // returned cost, in units of 512 bytes
	__out                        LPINT         piTempCost);    // returned temporary cost, in units of 512 bytes
UINT WINAPI MsiEnumComponentCostsW(MSIHANDLE hInstall,
	LPCWSTR      szComponent,     // name of component
	DWORD        dwIndex,         // 0-based index into the list of drives
	INSTALLSTATE iState,          // requested state, or INSTALLSTATE_UNKNOWN
	__out_ecount(*pcchDriveBuf)  LPWSTR       szDriveBuf,     // buffer for returned value
	__inout                      LPDWORD       pcchDriveBuf,   // in/out buffer character count
	__out                        LPINT         piCost,         // returned cost, in units of 512 bytes
	__out                        LPINT         piTempCost);    // returned temporary cost, in units of 512 bytes
#ifdef UNICODE
#define MsiEnumComponentCosts  MsiEnumComponentCostsW
#else
#define MsiEnumComponentCosts  MsiEnumComponentCostsA
#endif // !UNICODE

#endif // (_WIN32_MSI >= 150)

// Set the install level for a full product installation (not a feature request)
// Setting the value to 0 initialized components and features to the default level
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT  WINAPI MsiSetInstallLevel(MSIHANDLE hInstall,
	int iInstallLevel);

// Get the valid install states for a feature, represented by bit flags
// For each valid install state, a bit is set of value: (1 << INSTALLSTATE)
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT  WINAPI MsiGetFeatureValidStatesA(MSIHANDLE hInstall,
	LPCSTR szFeature,
	LPDWORD  lpInstallStates);
UINT  WINAPI MsiGetFeatureValidStatesW(MSIHANDLE hInstall,
	LPCWSTR szFeature,
	LPDWORD  lpInstallStates);
#ifdef UNICODE
#define MsiGetFeatureValidStates  MsiGetFeatureValidStatesW
#else
#define MsiGetFeatureValidStates  MsiGetFeatureValidStatesA
#endif // !UNICODE

// Return the full source path for a folder in the Directory table
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiGetSourcePathA(MSIHANDLE hInstall,
	                                LPCSTR     szFolder,      // folder identifier, primary key into Directory table
	__out_ecount_opt(*pcchPathBuf)  LPSTR      szPathBuf,     // buffer to return full path
	__inout_opt                     LPDWORD      pcchPathBuf);  // in/out buffer character count
UINT WINAPI MsiGetSourcePathW(MSIHANDLE hInstall,
	                                LPCWSTR     szFolder,      // folder identifier, primary key into Directory table
	__out_ecount_opt(*pcchPathBuf)  LPWSTR      szPathBuf,     // buffer to return full path
	__inout_opt                     LPDWORD      pcchPathBuf);  // in/out buffer character count
#ifdef UNICODE
#define MsiGetSourcePath  MsiGetSourcePathW
#else
#define MsiGetSourcePath  MsiGetSourcePathA
#endif // !UNICODE

// Return the full target path for a folder in the Directory table
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiGetTargetPathA(MSIHANDLE hInstall,
	                                LPCSTR     szFolder,      // folder identifier, primary key into Directory table
	__out_ecount_opt(*pcchPathBuf)  LPSTR      szPathBuf,     // buffer to return full path
	__inout_opt                     LPDWORD      pcchPathBuf);  // in/out buffer character count
UINT WINAPI MsiGetTargetPathW(MSIHANDLE hInstall,
	                                LPCWSTR     szFolder,      // folder identifier, primary key into Directory table
	__out_ecount_opt(*pcchPathBuf)  LPWSTR      szPathBuf,     // buffer to return full path
	__inout_opt                     LPDWORD      pcchPathBuf);  // in/out buffer character count
#ifdef UNICODE
#define MsiGetTargetPath  MsiGetTargetPathW
#else
#define MsiGetTargetPath  MsiGetTargetPathA
#endif // !UNICODE

// Set the full target path for a folder in the Directory table
// Execution of this function sets the error record, accessible via MsiGetLastErrorRecord

UINT WINAPI MsiSetTargetPathA(MSIHANDLE hInstall,
	LPCSTR     szFolder,       // folder identifier, primary key into Directory table
	LPCSTR     szFolderPath);  // full path for folder, ending in directory separator
UINT WINAPI MsiSetTargetPathW(MSIHANDLE hInstall,
	LPCWSTR     szFolder,       // folder identifier, primary key into Directory table
	LPCWSTR     szFolderPath);  // full path for folder, ending in directory separator
#ifdef UNICODE
#define MsiSetTargetPath  MsiSetTargetPathW
#else
#define MsiSetTargetPath  MsiSetTargetPathA
#endif // !UNICODE

// Check to see if sufficent disk space is present for the current installation
// Returns ERROR_SUCCESS, ERROR_DISK_FULL, ERROR_INVALID_HANDLE_STATE, or ERROR_INVALID_HANDLE

UINT WINAPI MsiVerifyDiskSpace(MSIHANDLE hInstall);

// --------------------------------------------------------------------------
// Functions for rendering UI dialogs from the database representations.
// Purpose is for product development, not for use during installation.
// --------------------------------------------------------------------------

// Enable UI in preview mode to facilitate authoring of UI dialogs.
// The preview mode will end when the handle is closed.

UINT WINAPI MsiEnableUIPreview(MSIHANDLE hDatabase,
	MSIHANDLE* phPreview);       // returned handle for UI preview capability

// Display any UI dialog as modeless and inactive.
// Supplying a null name will remove any current dialog.

UINT WINAPI MsiPreviewDialogA(MSIHANDLE hPreview,
	LPCSTR szDialogName);      // dialog to display, Dialog table key
UINT WINAPI MsiPreviewDialogW(MSIHANDLE hPreview,
	LPCWSTR szDialogName);      // dialog to display, Dialog table key
#ifdef UNICODE
#define MsiPreviewDialog  MsiPreviewDialogW
#else
#define MsiPreviewDialog  MsiPreviewDialogA
#endif // !UNICODE

// Display a billboard within a host control in the displayed dialog.
// Supplying a null billboard name will remove any billboard displayed.

UINT WINAPI MsiPreviewBillboardA(MSIHANDLE hPreview,
	LPCSTR szControlName,      // name of control that accepts billboards
	LPCSTR szBillboard);       // name of billboard to display
UINT WINAPI MsiPreviewBillboardW(MSIHANDLE hPreview,
	LPCWSTR szControlName,      // name of control that accepts billboards
	LPCWSTR szBillboard);       // name of billboard to display
#ifdef UNICODE
#define MsiPreviewBillboard  MsiPreviewBillboardW
#else
#define MsiPreviewBillboard  MsiPreviewBillboardA
#endif // !UNICODE

// --------------------------------------------------------------------------
// Error handling not associated with any particular object
// --------------------------------------------------------------------------

// Return a record handle to the last function that generated an error record
// Only specified functions will set the error record, or clear it if success
// Field 1 of the record will contain the internal MSI error code
// Other fields will contain data specific to the particular error
// The error record is released internally after this function is executed

MSIHANDLE WINAPI MsiGetLastErrorRecord();  // returns 0 if no cached record

#ifdef __cplusplus
}
#endif

#endif // _MSIQUERY_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MspAddr.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    MSPaddr.h

Abstract:

Declaration of the CMSPAddress

--*/

#ifndef __MSPADDR_H_
#define __MSPADDR_H_


typedef struct 
{
   LIST_ENTRY       Link;           // The link node. See ntrtl.h for detail.
   MSP_EVENT_INFO   MSPEventInfo;   // The event code.
   
} MSPEVENTITEM, *PMSPEVENTITEM;


//
// these functions should be used to allocate and deallocate MSPEVENTITEM
// structures. In case of failure, the caller can call GetLastError()
// to get exact cause of the failure.
//

//
// nExtraBytes specifies how many extra (in addition to sizeof(MSPEVENTITEM)) 
// bytes to allocate.
//

MSPEVENTITEM *AllocateEventItem(SIZE_T nExtraBytes = 0);

BOOL FreeEventItem(MSPEVENTITEM *pEventItemToFree);


typedef HRESULT (*PFNCREATETERM) (
    IN  CComPtr<IMoniker>   pMoniker,
    IN  MSP_HANDLE          htAddress,
    OUT ITTerminal        **pTerm
    );

typedef struct
{
    DWORD                dwMediaType;
    const CLSID        * clsidClassManager;
    PFNCREATETERM        pfnCreateTerm;

} STATIC_TERMINAL_TYPE;

class ATL_NO_VTABLE CPlugTerminalClassInfo : 
    public IDispatchImpl<ITPluggableTerminalClassInfo, &IID_ITPluggableTerminalClassInfo, &LIBID_TAPI3Lib>,
    public CComObjectRootEx<CComMultiThreadModel>,
    public CMSPObjectSafetyImpl
{
public:
DECLARE_GET_CONTROLLING_UNKNOWN()
virtual HRESULT FinalConstruct(void);


BEGIN_COM_MAP(CPlugTerminalClassInfo)
    COM_INTERFACE_ENTRY(ITPluggableTerminalClassInfo)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(IObjectSafety)
        COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pFTM)
END_COM_MAP()

public:
    CPlugTerminalClassInfo() :
        m_bstrName(NULL),
        m_bstrCompany(NULL),
        m_bstrVersion(NULL),
        m_bstrCLSID(NULL),
        m_bstrTerminalClass(NULL),
        m_lMediaType(1),
        m_Direction(TD_CAPTURE),
        m_pFTM(NULL)
    {
    }

    ~CPlugTerminalClassInfo()
    {
        if( m_bstrName )
        {
            SysFreeString( m_bstrName );
        }

        if( m_bstrCompany )
        {
            SysFreeString( m_bstrCompany );
        }

        if( m_bstrVersion )
        {
            SysFreeString( m_bstrVersion );
        }

        if( m_bstrCLSID )
        {
            SysFreeString( m_bstrCLSID );
        }

        if( m_bstrTerminalClass )
        {
            SysFreeString( m_bstrTerminalClass );
        }

        if( m_pFTM )
        {
            m_pFTM->Release();
        }
    }

public:
    STDMETHOD(get_Name)(
        /*[out, retval]*/ BSTR*     pName
        );

    STDMETHOD(get_Company)(
        /*[out, retval]*/ BSTR*     pCompany
        );

    STDMETHOD(get_Version)(
        /*[out, retval]*/ BSTR*     pVersion
        );

    STDMETHOD(get_TerminalClass)(
        /*[out, retval]*/ BSTR*     pTerminalClass
        );

    STDMETHOD(get_CLSID)(
        /*[out, retval]*/ BSTR*     pCLSID
        );

    STDMETHOD(get_Direction)(
        /*[out, retval]*/ TERMINAL_DIRECTION*  pDirection
        );

    STDMETHOD(get_MediaTypes)(
        /*[out, retval]*/ long*     pMediaTypes
        );

private:
    CMSPCritSection     m_CritSect;     // Critical Section 

    BSTR    m_bstrName;
    BSTR    m_bstrCompany;
    BSTR    m_bstrVersion;
    BSTR    m_bstrTerminalClass;
    BSTR    m_bstrCLSID;
    long    m_lMediaType;
    TERMINAL_DIRECTION   m_Direction;

    IUnknown*            m_pFTM;         // pointer to the free threaded marshaler

private:
    STDMETHOD(put_Name)(
        /*[in]*/    BSTR            bstrName
        );

    STDMETHOD(put_Company)(
        /*[in]*/    BSTR            bstrCompany
        );

    STDMETHOD(put_Version)(
       /*[in]*/    BSTR            bstrVersion
        );

    STDMETHOD(put_TerminalClass)(
        /*[in]*/    BSTR            bstrTerminalClass
        );

    STDMETHOD(put_CLSID)(
        /*[in]*/    BSTR            bstrCLSID
        );

    STDMETHOD(put_Direction)(
        /*[in]*/    TERMINAL_DIRECTION  nDirection
        );

    STDMETHOD(put_MediaTypes)(
        /*[in]*/    long            nMediaTypes
        );

friend class CMSPAddress;
};

class ATL_NO_VTABLE CPlugTerminalSuperclassInfo : 
    public IDispatchImpl<ITPluggableTerminalSuperclassInfo, &IID_ITPluggableTerminalSuperclassInfo, &LIBID_TAPI3Lib>,
    public CComObjectRootEx<CComMultiThreadModel>,
    public CMSPObjectSafetyImpl
{
public:

DECLARE_GET_CONTROLLING_UNKNOWN()
virtual HRESULT FinalConstruct(void);

BEGIN_COM_MAP(CPlugTerminalSuperclassInfo)
    COM_INTERFACE_ENTRY(ITPluggableTerminalSuperclassInfo)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(IObjectSafety)
        COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pFTM)
END_COM_MAP()

public:
    CPlugTerminalSuperclassInfo() :
        m_bstrCLSID(NULL),
        m_bstrName(NULL),
        m_pFTM(NULL)
    {
    }

    ~CPlugTerminalSuperclassInfo()
    {
        if( m_bstrName )
        {
            SysFreeString( m_bstrName );
        }

        if( m_bstrCLSID )
        {
            SysFreeString( m_bstrCLSID );
        }

        if( m_pFTM )
        {
            m_pFTM->Release();
        }
    }

public:
    STDMETHOD(get_Name)(
        /*[out, retval]*/ BSTR*          pName
        );

    STDMETHOD(get_CLSID)(
        /*[out, retval]*/ BSTR*           pCLSID
        );

private:
    CMSPCritSection     m_CritSect;     // Critical Section 

    BSTR    m_bstrCLSID;
    BSTR    m_bstrName;

    IUnknown*            m_pFTM;         // pointer to the free threaded marshaler

private:
    STDMETHOD(put_Name)(
        /*[in]*/          BSTR            bstrName
        );

    STDMETHOD(put_CLSID)(
        /*[in]*/         BSTR            bstrCLSID
        );

friend class CMSPAddress;
};

/*++

Class Description:

    Represents an MSP address.

--*/

class ATL_NO_VTABLE CMSPAddress : 
    public CComObjectRootEx<CComMultiThreadModelNoCS>,
    public ITMSPAddress,
    public IDispatchImpl<ITTerminalSupport2, &IID_ITTerminalSupport2, &LIBID_TAPI3Lib>
{
public:

// No need for free thread marshaling, because the MSP address object is
// always aggregated by the TAPI3 address object.

BEGIN_COM_MAP( CMSPAddress )
    COM_INTERFACE_ENTRY( ITMSPAddress )
    COM_INTERFACE_ENTRY( IDispatch )
    COM_INTERFACE_ENTRY( ITTerminalSupport )
    COM_INTERFACE_ENTRY( ITTerminalSupport2 )
END_COM_MAP()

// The DERIVED class should DECLARE_AGGREGATABLE(className)

DECLARE_GET_CONTROLLING_UNKNOWN()

DECLARE_VQI()

    CMSPAddress();
    virtual ~CMSPAddress();
    virtual ULONG MSPAddressAddRef(void) = 0;
    virtual ULONG MSPAddressRelease(void) = 0;



// ITMSPAddress methods, called by TAPI.
    STDMETHOD (Initialize) (
        IN      MSP_HANDLE          htEvent
        );

    STDMETHOD (Shutdown) ();

    STDMETHOD (CreateMSPCall) (
        IN      MSP_HANDLE          htCall,
        IN      DWORD               dwReserved,
        IN      DWORD               dwMediaType,
        IN      IUnknown *          pOuterUnknown,
        OUT     IUnknown **         ppMSPCall
        ) = 0;

    STDMETHOD (ShutdownMSPCall) (
        IN      IUnknown *          pMSPCall
        ) = 0;

    STDMETHOD (ReceiveTSPData) (
        IN      IUnknown        *   pMSPCall,
        IN      LPBYTE              pBuffer,
        IN      DWORD               dwBufferSize
        );

    STDMETHOD (GetEvent) (
        IN OUT  DWORD *             pdwSize,
        OUT     BYTE *              pBuffer
        );

// ITTerminalSupport methods, called by TAPI and/or the app.
    STDMETHOD (get_StaticTerminals) (
            OUT  VARIANT * pVariant
            );

    STDMETHOD (EnumerateStaticTerminals) (
            OUT  IEnumTerminal ** ppTerminalEnumerator
            );

    STDMETHOD (get_DynamicTerminalClasses) (
            OUT  VARIANT * pVariant
            );

    STDMETHOD (EnumerateDynamicTerminalClasses) (
            OUT  IEnumTerminalClass ** ppTerminalClassEnumerator
            );

    STDMETHOD (CreateTerminal) (
            IN   BSTR pTerminalClass,
            IN   long lMediaType,
            IN   TERMINAL_DIRECTION Direction,
            OUT  ITTerminal ** ppTerminal
            );
    
    STDMETHOD (GetDefaultStaticTerminal) (
        IN      long                lMediaType,
        IN      TERMINAL_DIRECTION  Direction,
        OUT     ITTerminal **       ppTerminal
        );

    STDMETHOD (get_PluggableSuperclasses)( 
        OUT VARIANT * pVariant
        );

    STDMETHOD (EnumeratePluggableSuperclasses)( 
        OUT IEnumPluggableSuperclassInfo** ppSuperclassEnumerator 
        );

    STDMETHOD (get_PluggableTerminalClasses)( 
        IN  BSTR bstrTerminalSuperclass,
        IN  long lMediaType,
        OUT VARIANT * pVariant
        );

    STDMETHOD (EnumeratePluggableTerminalClasses)(
        IN  CLSID iidTerminalSuperclass,
        IN  long lMediaType,
        OUT IEnumPluggableTerminalClassInfo ** ppClassEnumerator 
        );


protected:
    // ITTerminalSupport helper methods

    virtual HRESULT GetStaticTerminals (
        IN OUT  DWORD       *       pdwNumTerminals,
        OUT     ITTerminal **       ppTerminals
        );

    virtual HRESULT GetDynamicTerminalClasses (
        IN OUT  DWORD *             pdwNumClasses,
        OUT     IID *               pTerminalClasses
        );

public:
// methods used by the MSPCall object.

    //
    // Check to see if the mediatype is non-zero and is in the mask.
    // Your MSP can override this if it needs to do special checks on
    // specific combinations of media types (e.g., can never have more
    // than one media type on a call, can never have video without
    // audio, etc.) The default implementation accepts any nonempty
    // set of media types that is a subset of the set of all supported
    // media types (specified via the GetCallMediaTypes method).
    //
    virtual BOOL IsValidSetOfMediaTypes(DWORD dwMediaType, DWORD dwMask);

    // Note: the eventItem must be allocated by malloc or new
    // (when the event is processed, it is deleted).
    virtual HRESULT PostEvent(
        IN      MSPEVENTITEM *      EventItem
        );

// method used by template function

    virtual DWORD GetCallMediaTypes(void) = 0;

protected:

    // Private helper function (protected so derived class can call it)

    virtual HRESULT IsMonikerInTerminalList(IMoniker* pMoniker);

    virtual HRESULT UpdateTerminalListForPnp(
        IN      BOOL                bDeviceArrival
        );

    virtual HRESULT UpdateTerminalList(void);

    virtual HRESULT ReceiveTSPAddressData(
        IN      PBYTE               pBuffer,
        IN      DWORD               dwSize
        );

public:
// methods used by the MSPThread object.

    virtual HRESULT PnpNotifHandler(
        IN      BOOL                bDeviceArrival
        );
    
protected:

    // The handle to TAPI's event, which is used to notify TAPI that the MSP 
    // wants to send data to it.
    HANDLE              m_htEvent;

    // List of events.
    LIST_ENTRY          m_EventList;

    // The lock that protects the data related to event handling with TAPI.
    CMSPCritSection     m_EventDataLock;


    // The pointer to the terminal manager object.
    ITTerminalManager * m_pITTerminalManager;

    // The list of static terminals that can be used on the address.
    CMSPArray <ITTerminal *>  m_Terminals;
    BOOL                m_fTerminalsUpToDate;

    // The lock that protects the data members for terminal operations.
    CMSPCritSection     m_TerminalDataLock;

private:
    static const STATIC_TERMINAL_TYPE m_saTerminalTypes[];
    static const DWORD m_sdwTerminalTypesCount;
};

template <class T>
HRESULT CreateMSPCallHelper(
    IN      CMSPAddress *       pCMSPAddress,
    IN      MSP_HANDLE          htCall,
    IN      DWORD               dwReserved,
    IN      DWORD               dwMediaType,
    IN      IUnknown *          pOuterUnknown,
    OUT     IUnknown **         ppMSPCall,
    OUT     T **                ppCMSPCall
    )
{
    LOG((MSP_TRACE, "CreateMSPCallHelper - enter"));

    HRESULT hr;
    T * pMSPCall;
    IUnknown *pUnknown = NULL;

    //
    // Check parameters.
    //
    if (!pCMSPAddress)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "bad address pointer - exit E_POINTER"));
        
        return E_POINTER;
    }
    if ( !pOuterUnknown)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "bad outer unknown - we require aggregation - exit E_POINTER"));
        
        return E_POINTER;
    }
    if (!ppMSPCall)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "bad iunknown return ptr - exit E_POINTER"));
        
        return E_POINTER;
    }

    if (!ppCMSPCall)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "bad class return ptr - exit E_POINTER"));
        
        return E_POINTER;
    }

    if ( ! pCMSPAddress->IsValidSetOfMediaTypes(
                                        dwMediaType,
                                        pCMSPAddress->GetCallMediaTypes() ) )
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "unsupported media types - exit TAPI_E_INVALIDMEDIATYPE"));
        
        return TAPI_E_INVALIDMEDIATYPE;
    }

    // dwReserved is meaningless.
    // We have no way of checking htCall.

    // the pOuterUnknown is not NULL. This object is going to be aggregated.
    CComAggObject<T> * pCall;

    pCall = new CComAggObject<T>(pOuterUnknown);

    if (pCall == NULL)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "could not create agg call instance - exit E_OUTOFMEMORY"));

        return E_OUTOFMEMORY;
    }

    // query the interface on the containing object.
    hr = pCall->QueryInterface(IID_IUnknown, (void **)&pUnknown);

    if (FAILED(hr))
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "QueryInterface failed: %x", hr));

        delete pCall;
        return hr;
    }

    hr = pCall->FinalConstruct();

    if (FAILED(hr))
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "FinalConstruct failed: %x.", hr));

        pUnknown->Release();
        return hr;
    }

    // Get a pointer to the real MSPCall object.
    pMSPCall = dynamic_cast<T *>(&(pCall->m_contained));
    if (pMSPCall == NULL)
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "can not cast to agg object to class pointer - "
            "exit E_UNEXPECTED"));
    
        pUnknown->Release();
        return E_UNEXPECTED;
    }

    //
    // initialize the call.
    //
    
    hr = pMSPCall->Init(pCMSPAddress, htCall, dwReserved, dwMediaType);

    if (FAILED(hr))
    {
        LOG((MSP_ERROR, "CreateMSPCallHelper - "
            "call init failed: %x", hr));

        pUnknown->Release();
        return hr;
    }

    *ppMSPCall = pUnknown;
    *ppCMSPCall = pMSPCall;

    LOG((MSP_TRACE, "CreateMSPCallHelper - exit S_OK"));

    return hr;
}

template <class T>
HRESULT ShutdownMSPCallHelper(
    IN      IUnknown *          pUnknown,
    OUT     T **                ppCMSPCall
    )
{
    LOG((MSP_TRACE, "ShutdownMSPCallHelper - enter"));

    if (!pUnknown)
    {
        LOG((MSP_ERROR, "ShutdownMSPCallHelper - "
            "bad IUnknown pointer - exit E_POINTER"));

        return E_POINTER;
    }

    if (!ppCMSPCall)
    {
        LOG((MSP_ERROR, "ShutdownMSPCallHelper - "
            "bad return pointer - exit E_POINTER"));

        return E_POINTER;
    }

    T * pMSPCall;

    CComAggObject<T> * pCall = dynamic_cast<CComAggObject<T> *> (pUnknown);

    if (pCall == NULL)
    {
        LOG((MSP_ERROR, "ShutdownMSPCallHelper - "
            "can't cast unknown to agg object pointer - exit E_UNEXPECTED"));
    
        return E_UNEXPECTED;
    }

    //
    // It was aggregated. Get a pointer to the real MSPCall object.
    //

    pMSPCall = dynamic_cast<T *> (&(pCall->m_contained));

    if (pMSPCall == NULL)
    {
        LOG((MSP_ERROR, "ShutdownMSPCallHelper - "
            "can't cast contained unknown to class pointer - "
            "exit E_UNEXPECTED"));
    
        return E_UNEXPECTED;
    }

    //
    // Now we have a call to shut down. Shut it down.
    //

    HRESULT hr = pMSPCall->ShutDown();

    if (FAILED(hr))
    {
        LOG((MSP_ERROR, "ShutdownMSPCallHelper - "
            "ShutDownMSPCall failed: %x", hr));
        
        return hr;
    }

    *ppCMSPCall = pMSPCall;

    LOG((MSP_TRACE, "ShutdownMSPCallHelper - exit S_OK"));

    return S_OK;
}

#endif //__MSPADDRESS_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSPST.h ===
/*
 *  M S P S T . H
 *	
 *  This file lists internal properties of the Microsoft Personal
 *  Information Store
 *	
 *  Copyright 1986-1999 Microsoft Corporation. All Rights Reserved.
 */

#ifndef _MSPST_H_
#define _MSPST_H_

#if _MSC_VER > 1000
#pragma once
#endif


/*  The following is a list of properties that may be passed in
    as the properties in the array of SPropValue structure on the
    MsgServiceConfigure function.

    Creating a PST profile section through CreateMsgService.
    The creation of the actual PST file is a two step process.  First the
    client should call CreateMsgService to setup the profile section and then
    ConfigureMsgService to create the PST file.
    The CreateMsgService call will setup the PR_DISPLAY_NAME property in the
    profile section to be used on the PST when it is created.

    Configuring an PST file through ConfigureMsgService.
    The configuration of an PST can take two forms, either configuring an
    existing PST or creating a new PST.  The Microsoft Personal Information
    Store provider will try to find the necessary properties by first looking
    in the array of SPropValue structures provided by the client and then in the
    profile section, except for PR_PST_PW_SZ_OLD for which it will only look
    in the array of properties.

    The Microsoft PST provider will try to open the file specified by the
    PR_PST_PATH property, using the password given in the PR_PST_PW_SZ_OLD
    property.  If it finds a file and it recognizes it as a PST
    file, it will start the configuration routine.  Otherwise it will start the
    creation routine.

    The configuration routine will look for the PR_DISPLAY_NAME_A and
    PR_COMMENT_A properties and set them in the message store object.  Then it
    will look for the PR_PST_REMEMBER_PW property to decide if it should
    remember the password in the profile. (If not found then it will defaut to
    the current status of the profile password.)  Then if it is supposed to
    use UI, it will display the configuration property sheet to the user.  After
    all has succeeded, it will update the profile.

    The creation routine will follow one of two paths to get the PR_PST_PATH
    property.  If it is supposed to use UI it will always display the file open
    dialog to confirm the path passed in or allow the user to change it.  If
    the user chooses an existing file and it recognizes it as an PST it will
    drop back to the configuration routine.  If the user chooses an existing
    file and it is not recognized as an PST file, the user will be given the
    option of choosing another file or  creating a new PST in its place, in
    which case is will continue with the create routine.  If the user chooses
    a new file it will continue with the create routine.  If the routine is not
    allowed to use UI, then the routine will create a file at the given path
    even if another file exists there.

    Once it decides to continue with the creation process it will get the
    PR_DISPLAY_NAME, PR_COMMENT, PR_PST_ENCRYPTION, and PR_PST_SZ_PW_NEW
    properties.  If it is supposed to use UI, it will use these to initialize
    the creation dialog and get any changes the user want.  Then it will create
    a new file and update the profile.

    PR_DISPLAY_NAME_A   display name for the PST service
    PR_COMMENT_A        comment to the place on the PST store object
    PR_PST_PATH         location the store to create or configure
    PR_PST_REMEMBER_PW  whether or not the remember the password in the profile
    PR_PST_ENCRYPTION   encryption level at which to create the file
    PR_PST_PW_SZ_OLD    password of the PST being configured
    PR_PST_PW_SZ_NEW    password to use for future access to the PST
*/

#define PST_EXTERN_PROPID_BASE          (0x6700)
#define PR_PST_PATH                     PROP_TAG(PT_STRING8, PST_EXTERN_PROPID_BASE + 0)
#define PR_PST_REMEMBER_PW              PROP_TAG(PT_BOOLEAN, PST_EXTERN_PROPID_BASE + 1)
#define PR_PST_ENCRYPTION               PROP_TAG(PT_LONG, PST_EXTERN_PROPID_BASE + 2)
#define PR_PST_PW_SZ_OLD                PROP_TAG(PT_STRING8, PST_EXTERN_PROPID_BASE + 3)
#define PR_PST_PW_SZ_NEW                PROP_TAG(PT_STRING8, PST_EXTERN_PROPID_BASE + 4)

#define PSTF_NO_ENCRYPTION              ((DWORD)0x80000000)
#define PSTF_COMPRESSABLE_ENCRYPTION    ((DWORD)0x40000000)
#define PSTF_BEST_ENCRYPTION            ((DWORD)0x20000000)

/*
 *  PR_MDB_PROVIDER is the GUID that represent the Microsoft Personal
 *  Information Store.  This guid is available as a property in the stores
 *  table and on the message store and status objects.
 */
#define MSPST_UID_PROVIDER  {   0x4e, 0x49, 0x54, 0x41, \
                                0xf9, 0xbf, 0xb8, 0x01, \
                                0x00, 0xaa, 0x00, 0x37, \
                                0xd9, 0x6e, 0x00, 0x00 }

#endif  /* _MSPST_H_ */

=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MspCall.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    MSPCall.h

Abstract:

    Definitions for CMSPCall class.

--*/

#ifndef __MSPCALL_H_
#define __MSPCALL_H_


/*++

Class Description:

    Represents a active call that has media streams.

--*/

class ATL_NO_VTABLE CMSPCallBase :
    public CComObjectRootEx<CComMultiThreadModelNoCS>,
    public IDispatchImpl<ITStreamControl, &IID_ITStreamControl, &LIBID_TAPI3Lib>
{
public:

// No need for free thread marshaling, because the MSP call object is
// always aggregated by the TAPI3 call object.

DECLARE_POLY_AGGREGATABLE(CMSPCallBase)

BEGIN_COM_MAP(CMSPCallBase)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(ITStreamControl)
END_COM_MAP()

DECLARE_GET_CONTROLLING_UNKNOWN()

DECLARE_VQI()

    CMSPCallBase();

    virtual ~CMSPCallBase();

//
// Private addref and release for the MSP call. See Platform SDK documentation.
//
    virtual ULONG MSPCallAddRef  (void) = 0;
    virtual ULONG MSPCallRelease (void) = 0;

// ITStreamControl methods, called by the app.
    STDMETHOD (CreateStream) (
        IN      long                lMediaType,
        IN      TERMINAL_DIRECTION  Direction,
        IN OUT  ITStream **         ppStream
        );

    STDMETHOD (EnumerateStreams) (
        OUT     IEnumStream **      ppEnumStream
        );

    STDMETHOD (RemoveStream) (
        IN      ITStream *          pStream
        ) = 0;

    STDMETHOD (get_Streams) (
        OUT     VARIANT *           pStreams
        );

// methods called by the MSPAddress object.
    virtual HRESULT Init(
        IN      CMSPAddress *       pMSPAddress,
        IN      MSP_HANDLE          htCall,
        IN      DWORD               dwReserved,
        IN      DWORD               dwMediaType
        ) = 0;

    virtual HRESULT ShutDown(
        ) = 0;

    virtual HRESULT ReceiveTSPCallData(
        IN      PBYTE               pBuffer,
        IN      DWORD               dwSize
        );

// methods called by the MSPstream object.
    HRESULT HandleStreamEvent(
        IN      MSPEVENTITEM *      EventItem
        ) const;

protected:
    virtual HRESULT InternalCreateStream(
        IN      DWORD               dwMediaType,
        IN      TERMINAL_DIRECTION  Direction,
        IN OUT  ITStream **         ppStream
        ) = 0;

    virtual HRESULT CreateStreamObject(
        IN      DWORD               dwMediaType,
        IN      TERMINAL_DIRECTION  Direction,
        IN      IMediaEvent *       pGraph,
        IN      ITStream **         ppStream
        ) = 0;

protected:

    // The pointer to the address object. It is used to post events to TAPI3.
    // It also carries a refcount so that the address will not go away while
    // the call is still alive.
    CMSPAddress*                m_pMSPAddress;

    // The handle to the call in TAPI3. Used in firing call events.
    MSP_HANDLE                  m_htCall;

    // The media type of this call. It is a bitmask of media types.
    DWORD                       m_dwMediaType;

    // The list of stream objects in the call.
    CMSPArray <ITStream *>      m_Streams;

    // The lock that protects the stream lists.
    CMSPCritSection             m_lock;
};


/*++

Class Description:

    Represents a call that uses one DirectShow filter graph for each stream.

--*/

class ATL_NO_VTABLE CMSPCallMultiGraph : public CMSPCallBase
{
public:
    typedef struct
    {
        CMSPCallMultiGraph *    pMSPCall;
        ITStream *              pITStream;
        IMediaEvent *           pIMediaEvent;

    } MSPSTREAMCONTEXT, *PMSPSTREAMCONTEXT;

    typedef struct _THREADPOOLWAITBLOCK
    {
        HANDLE              hWaitHandle;
        MSPSTREAMCONTEXT *  pContext;

        BOOL operator ==(struct _THREADPOOLWAITBLOCK &t)
        {
            return ((hWaitHandle == t.hWaitHandle)
                && (pContext == t.pContext));
        }

    } THREADPOOLWAITBLOCK, *PTHREADPOOLWAITBLOCK;

public:
    CMSPCallMultiGraph();

    virtual ~CMSPCallMultiGraph();

// ITStreamControl methods (overriden)

    STDMETHOD (RemoveStream) (
        IN      ITStream *          ppStream
        );

// methods called by the MSPAddress object. (overriden)
    HRESULT Init(
        IN      CMSPAddress *       pMSPAddress,
        IN      MSP_HANDLE          htCall,
        IN      DWORD               dwReserved,
        IN      DWORD               dwMediaType
        );

    HRESULT ShutDown(
        );

// methods called by the thread pool
    static VOID NTAPI DispatchGraphEvent(
        IN      VOID *              pContext,
        IN      BOOLEAN             bFlag
        );

    virtual VOID HandleGraphEvent(
        IN      MSPSTREAMCONTEXT *  pContext
    );

    virtual HRESULT ProcessGraphEvent(
        IN      ITStream *          pITStream,
        IN      long                lEventCode,
        IN      LONG_PTR            lParam1,
        IN      LONG_PTR            lParam2
    );


protected:
// helper function:
    HRESULT RegisterWaitEvent(
        IN      IMediaEvent *       pIMediaEvent,
        IN      ITStream *           pITStream
        );

    HRESULT UnregisterWaitEvent(
        IN      int                 index
        );

    virtual HRESULT InternalCreateStream(
        IN      DWORD               dwMediaType,
        IN      TERMINAL_DIRECTION  Direction,
        IN OUT  ITStream **         ppStream
        );

protected:

    // The wait blocks store the information about the wait registered to
    // the thread pool. It includes the wait handles returned by the
    // RegisterWaitForSingleObject() call and a pointer to the context
    // structure. Each block in the array is for a graph in one of the
    // stream objects. The offset of a block in this array is the same
    // as the offset of the stream that owns the graph.
    CMSPArray <THREADPOOLWAITBLOCK>      m_ThreadPoolWaitBlocks;

};

//
// Event handling definitions.
//

struct MULTI_GRAPH_EVENT_DATA
{
    CMSPCallMultiGraph * pCall;
    ITStream           * pITStream;
    long                 lEventCode;
    LONG_PTR             lParam1;
    LONG_PTR             lParam2;
    IMediaEvent        * pIMediaEvent;

    MULTI_GRAPH_EVENT_DATA()
        :pIMediaEvent(NULL),
        pITStream(NULL),
        lEventCode(0),
        lParam1(0),
        lParam2(0)
    {}

};

DWORD WINAPI AsyncMultiGraphEvent(LPVOID pVoid);

#endif // __MSPCALL_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Mspterm.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    mspterm.h

Abstract:

    Definitions for the CBaseTerminal and CSingleFilterTerminal classes.

--*/

#ifndef _MSPTERM_H_
#define _MSPTERM_H_

template <class T>
class  ITTerminalVtblBase : public ITTerminal
{
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
//                                                                         
// CBaseTerminal                                                           
//                                                                         
// This is the base terminal implementation. All terminals must derive     
// from this class.                                                         
//                                                                         
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class CBaseTerminal : 
    virtual public CComObjectRootEx<CComMultiThreadModelNoCS>, // we have our own CS implementation
    public IDispatchImpl<ITTerminalVtblBase<CBaseTerminal>, &IID_ITTerminal, &LIBID_TAPI3Lib>,
    public ITTerminalControl
{

BEGIN_COM_MAP(CBaseTerminal)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(ITTerminal)

    COM_INTERFACE_ENTRY(ITTerminalControl)
    COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pFTM)
END_COM_MAP()

DECLARE_VQI()
DECLARE_GET_CONTROLLING_UNKNOWN()

public:

    CBaseTerminal();
    virtual ~CBaseTerminal();

// ITTerminal -- COM interface for use by MSP or application
public:
    STDMETHOD(get_TerminalClass)(OUT  BSTR *pVal);
    STDMETHOD(get_TerminalType) (OUT  TERMINAL_TYPE *pVal);
    STDMETHOD(get_State)        (OUT  TERMINAL_STATE *pVal);
    STDMETHOD(get_Name)         (OUT  BSTR *pVal);
    STDMETHOD(get_MediaType)    (OUT  long * plMediaType);
    STDMETHOD(get_Direction)    (OUT  TERMINAL_DIRECTION *pDirection);


public:
    // Public methods that the MSP implementation calls.
    
    virtual HRESULT Initialize (
            IN  IID                   iidTerminalClass,
            IN  DWORD                 dwMediaType,
            IN  TERMINAL_DIRECTION    Direction,
            IN  MSP_HANDLE            htAddress
            );

public:
// ITTerminalControl -- COM interface for use by MSP only
// This has to be a COM interface rather than a set of public methods because
// the MSP needs to be able to call them for dynamic terminals as well.

    //
    // We implement get_AddressHandle, ConnectTerminal and DisconnectTerminal
    // The derived classes must implement RunRenderFilter and
    // StopRenderFilter (implementation depends on # of filters)
    //

    STDMETHOD (get_AddressHandle) (
            OUT     MSP_HANDLE    * phtAddress
            );

    //
    // enters each of the internal filters into the filter graph
    // connects the internal filters together (if applicable)
    // and returns all the filters to be used as connection points
    //

    STDMETHOD (ConnectTerminal) (
            IN      IGraphBuilder  * pGraph,
            IN      DWORD            dwTerminalDirection,
            IN OUT  DWORD          * pdwNumPins,
            OUT     IPin          ** ppPins
            );

    //
    // CompleteConnectTerminal -- called after a successful ConnectTerminal
    // so that the terminal can do post-connection intitialization
    //

    STDMETHOD (CompleteConnectTerminal) (void);

    //
    // disconnects the internal filters from each other (if applicable)
    // and removes them from the filter graph (thus breaking connections to
    // the stream). 
    // Filter graph parameter is used for validation, to make sure the terminal
    // is disconnected from the same graph that it was originally connected to.
    //

    STDMETHOD (DisconnectTerminal) (
            IN      IGraphBuilder  * pGraph,
            IN      DWORD            dwReserved
            );

    //
    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    //

    STDMETHOD (RunRenderFilter) (void) = 0;

    //
    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    //

    STDMETHOD (StopRenderFilter) (void) = 0;

protected:
    // The lock that protects the data members.
    CMSPCritSection     m_CritSec;

public:

    TERMINAL_DIRECTION  m_TerminalDirection;
    TERMINAL_TYPE       m_TerminalType;
    TERMINAL_STATE      m_TerminalState;
    TCHAR               m_szName[MAX_PATH + 1];
    IID                 m_TerminalClassID;
    DWORD               m_dwMediaType;
    MSP_HANDLE          m_htAddress;

    // Pointer to the free threaded marshaler.
    IUnknown *          m_pFTM;

    // stores the filter graph builder (derives from IFilterGraph)
    CComPtr<IGraphBuilder> m_pGraph;

    // The following functions are to be implemented by the derived terminals

    virtual HRESULT AddFiltersToGraph() = 0;

    // By default terminals do nothing for preconnect
    virtual HRESULT ConnectFilters() { return S_OK; }

    // Returns the number of pins that will be exposed by
    // GetExposedPins(). The implementation can use pGraph
    // to actually mess with filters in a graph if it needs to
    // do so in order to figure out how many pins it has, but normally
    // that's not the case.
    // Arguments are checked by the caller.

    virtual HRESULT GetNumExposedPins(
        IN   IGraphBuilder * pGraph,
        OUT  DWORD         * pdwNumPins
        ) = 0;

    // Returns an array of pins that the stream can connect to.
    // Arguments are checked by the caller.

    virtual HRESULT GetExposedPins(
        OUT    IPin  ** ppPins
        ) = 0;

    virtual DWORD GetSupportedMediaTypes(void) = 0;

    virtual HRESULT RemoveFiltersFromGraph() = 0;

    // Do we support this media?
    BOOL MediaTypeSupported(long lMediaType);
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// CSingleFilterTerminal                                                   //
//                                                                         //
// This is a base class for a terminal with a single filter and pin. The   //
// terminal could be any direction or media type, and it could be static   //
// or dynamic.                                                             //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class CSingleFilterTerminal :
    public CBaseTerminal
{

// If we add any additional interfaces to this class then
// we must uncomment and expand the following.
//
// BEGIN_COM_MAP(CSingleFilterTerminal)
//    COM_INTERFACE_ENTRY_CHAIN(CBaseTerminal)
// END_COM_MAP()


public:
    // Implementation: We know we have a single filter.
    CComPtr<IPin>        m_pIPin;
    CComPtr<IBaseFilter> m_pIFilter;


public:
// ITCoreTerminal

    // the rest of this interface is implemented by CBaseTerminal

    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    STDMETHOD(RunRenderFilter)(void);

    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    STDMETHOD(StopRenderFilter)(void);


// CBaseTerminal overrides for non-COM methods

    // AddFiltersToGraph cannot be implemented here because of the various
    // hacks regarding their names

    virtual HRESULT GetNumExposedPins(
        IN   IGraphBuilder * pGraph,
        OUT  DWORD         * pdwNumPins
        );

    virtual HRESULT GetExposedPins(
        OUT    IPin  ** ppPins
        );

    virtual HRESULT RemoveFiltersFromGraph();
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// CSingleFilterStaticTerminal                                             //
//                                                                         //
// This is a base class for a static terminal with a single filter and     //
// pin. The terminal could be any direction or media type.                 //
//                                                                         //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class CSingleFilterStaticTerminal :
    public CSingleFilterTerminal
{

// If we add any additional interfaces to this class then
// we must uncomment and expand the following.
//
// BEGIN_COM_MAP(CSingleFilterStaticTerminal)
//    COM_INTERFACE_ENTRY_CHAIN(CSingleFilterTerminal)
// END_COM_MAP()


public:
    // public because CreateTerminal and CMSPAddress::UpdateTerminalListForPnp accesses it
    CComPtr<IMoniker> m_pMoniker;

    // this flag allows CMSPAddress::UpdateTerminalListForPnp to perform a mark and sweep
    // on the terminal list
    BOOL m_bMark;

    //
    // Compares this terminal's moniker to pMoniker, returns S_OK if they match, S_FALSE if they don't
    //
    virtual HRESULT CompareMoniker(
                                    IMoniker *pMoniker
                                  );
};

#endif // _MSPTERM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MspStrm.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    MSPStrm.h

Abstract:

    Definitions for CMSPStream class.

--*/
#ifndef _MSPSTRM_H_
#define _MSPSTRM_H_


/*++

Class Description:

    Represents a stream in a call.

--*/

#define STRM_INITIAL            0x00000000
#define STRM_TERMINALSELECTED   0x00000001
#define STRM_CONFIGURED         0x00000002
#define STRM_RUNNING            0x00000004
#define STRM_PAUSED             0x00000008
#define STRM_STOPPED            0x00000010

class CMSPStream;

class ATL_NO_VTABLE CPTEventSink :
    public CComObjectRootEx<CComMultiThreadModel>,
    public ITPluggableTerminalEventSink
{

public:
    CPTEventSink();
    ~CPTEventSink();

BEGIN_COM_MAP( CPTEventSink )
    COM_INTERFACE_ENTRY( ITPluggableTerminalEventSink )
END_COM_MAP()

public:
    // --- ITDTEventSink ---
	STDMETHOD(FireEvent)(
        /* in */ const MSP_EVENT_INFO *pMspEventInfo
        );

    
public:

    //
    // set the stream which will be processing our events
    //
    // this method is called by the stream when it creates and initializes
    // the sink object, and also when the stream is going away and want to 
    // tell us that it is no longer available to process our events.
    //

    HRESULT SetSinkStream( CMSPStream *pStream );

private:


    //
    // a nested structure that is used to pass event and stream to the
    // asynchronous event processing routine.
    //

    struct AsyncEventStruct
    {

        //
        // pointer to the stream on which to fire event
        //

        CMSPStream *pMSPStream;

        
        //
        // pointer to the event item to be processed
        //

        MSPEVENTITEM *pEventItem;


        //
        // as a public service, initialize structure's data members 
        //

        AsyncEventStruct()
            :pMSPStream(NULL),
            pEventItem(NULL)
        {
            LOG((MSP_TRACE, "AsyncEventStruct::AsyncEventStruct[%p]", this));
        }


        //
        // as a safety measure, set data members to NULL's in destructor 
        // to make sure no one attemopts to use them after the strcuture is 
        // gone. 
        //
        // note: we don't free any data members here -- that's responsibility 
        // of the structure's client
        //

        ~AsyncEventStruct()
        {
            pMSPStream = NULL;
            pEventItem = NULL;
            
            LOG((MSP_TRACE, "AsyncEventStruct::~AsyncEventStruct[%p]", this));
        }

    }; // AsyncEventStruct


    //
    // the callback function that is submitted to thread pool api for async 
    // event processing. The argument is the event structure containing stream
    // and the actual event
    //
    
    static DWORD WINAPI FireEventCallBack(LPVOID pEventStructure);


private:

     CMSPStream*    m_pMSPStream;
};

class ATL_NO_VTABLE CMSPStream : 
    public CComObjectRootEx<CComMultiThreadModelNoCS>,
    public IDispatchImpl<ITStream, &IID_ITStream, &LIBID_TAPI3Lib>
{
public:

BEGIN_COM_MAP(CMSPStream)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(ITStream)
    COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pFTM)
END_COM_MAP()

DECLARE_GET_CONTROLLING_UNKNOWN()

    CMSPStream(); 
    ~CMSPStream();

// methods of the CComObject
    virtual void FinalRelease();

// ITStream methods, called by the app.
    STDMETHOD (get_MediaType) (
        OUT     long *                  plMediaType
        );

    STDMETHOD (get_Direction) (
        OUT     TERMINAL_DIRECTION *    pTerminalDirection
        );

    STDMETHOD (get_Name) (
        OUT     BSTR *                  ppName
        ) = 0;

    STDMETHOD (SelectTerminal) (
        IN      ITTerminal *            pTerminal
        );

    STDMETHOD (UnselectTerminal) (
        IN     ITTerminal *             pTerminal
        );

    STDMETHOD (EnumerateTerminals) (
        OUT     IEnumTerminal **        ppEnumTerminal
        );

    STDMETHOD (get_Terminals) (
        OUT     VARIANT *               pTerminals
        );

    STDMETHOD (StartStream) ();

    STDMETHOD (PauseStream) ();

    STDMETHOD (StopStream) ();

// methods called by the MSPCall object.
    virtual HRESULT Init(
        IN     HANDLE                   hAddress,
        IN     CMSPCallBase *           pMSPCall,
        IN     IMediaEvent *            pGraph,
        IN     DWORD                    dwMediaType,
        IN     TERMINAL_DIRECTION       Direction
        );

    virtual HRESULT ShutDown();

    virtual HRESULT GetState(
        OUT     DWORD *                  pdwStatus
        ) { return E_NOTIMPL; }

    virtual HRESULT HandleTSPData(
        IN     BYTE *                   pData,
        IN     DWORD                    dwSize
        );

    virtual HRESULT ProcessGraphEvent(
        IN  long lEventCode,
        IN  LONG_PTR lParam1,
        IN  LONG_PTR lParam2
        );

protected:
    // --- Helper functions ---
    HRESULT RegisterPluggableTerminalEventSink(
        /*[in]*/ ITTerminal*     pTerminal
        );

    HRESULT UnregisterPluggableTerminalEventSink(
        /*[in]*/ ITTerminal*     pTerminal
        );

    
    HRESULT ReleaseSink();


    //
    // we want to have control over our addref and release logic: we need to do
    // special tricks to avoid stream being accessed by the event sink while
    // the stream is being deleted.
    //

    ULONG InternalAddRef();

    ULONG InternalRelease();


public:

    
    //
    // this method is called by CPTEventSink when it has an event for us to 
    // process
    //

    HRESULT HandleSinkEvent(MSPEVENTITEM *pEventItem);


protected:
    // Pointer to the free threaded marshaler.
    IUnknown *                  m_pFTM;

    // The current state of the stream.
    DWORD                       m_dwState;

    // The media type of this stream. Audio, video, or others.
    DWORD                       m_dwMediaType;

    // The direction of this stream. Incoming or outgoing.
    TERMINAL_DIRECTION          m_Direction;

    // The address on which this stream is being used.
    HANDLE                      m_hAddress;

    // The reference to the call object.
    CMSPCallBase *              m_pMSPCall;

    // The pointers to the graph object interfaces.
    IGraphBuilder *             m_pIGraphBuilder;
    IMediaControl *             m_pIMediaControl;

    // The list of stream objects in the call.
    CMSPArray <ITTerminal *>    m_Terminals;

    // The lock that protects the stream object. The stream object 
    // should never acquire the lock and then call a MSPCall method 
    // that might lock.
    CMSPCritSection             m_lock;

    // The lock that protects refcounting on the stream object. this is a 
    // workaround needed to sync against event sink attempting to access the 
    // stream object while it is being deleted.

    CMSPCritSection             m_lockRefCount;

    // The Event Sink for pluggable terminals
    ITPluggableTerminalEventSink* m_pPTEventSink;


    //
    // we have to implement our own reference counting to work around the 
    // problem of event sink addreffing us after we saw our last release
    //

    long                        m_lMyPersonalRefcount;

    
    //
    // this is a flag that we use to distingush between first addref and the 
    // addref on the object whose refcount has gone down to 0.
    //

    BOOL                        m_bFirstAddRef;

};

#endif // __MSPSTRM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msplog.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    MSPLOG.h

Abstract:

    Definitions for logging support.

--*/

#ifndef _MSPLOG_H_
    #define _MSPLOG_H_

    #ifdef MSPLOG

        #include <rtutils.h>

        #define MSP_ERROR ((DWORD)0x00010000 | TRACE_USE_MASK)
        #define MSP_WARN  ((DWORD)0x00020000 | TRACE_USE_MASK)
        #define MSP_INFO  ((DWORD)0x00040000 | TRACE_USE_MASK)
        #define MSP_TRACE ((DWORD)0x00080000 | TRACE_USE_MASK)
        #define MSP_EVENT ((DWORD)0x00100000 | TRACE_USE_MASK)

        BOOL NTAPI MSPLogRegister(LPCTSTR szName);
        void NTAPI MSPLogDeRegister();
        void NTAPI LogPrint(IN DWORD dwDbgLevel, IN LPCSTR DbgMessage, IN ...);

        #define MSPLOGREGISTER(arg) MSPLogRegister(arg)
        #define MSPLOGDEREGISTER() MSPLogDeRegister()

        extern BOOL g_bMSPBaseTracingOn;

        #define LOG(arg) g_bMSPBaseTracingOn?LogPrint arg:0

    #else // MSPLOG

        #define MSPLOGREGISTER(arg)
        #define MSPLOGDEREGISTER() 
        #define LOG(arg)

    #endif // MSPLOG

    
    #define DECLARE_LOG_ADDREF_RELEASE(x)
    #define CMSPComObject CComObject

#endif // _MSPLOG_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Mspthrd.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    mspthrd.h

Abstract:

    Definitions for MSP thread management classes.

--*/

#ifndef __MSPTHRD_H
#define __MSPTHRD_H

//
// Commands that the worker worker thread can handle.
//

typedef enum
{
    WORK_ITEM,          // process a work item
    STOP,               // kill the worker thread.

} COMMAND;

typedef struct
{
    COMMAND                cmd;
    LPTHREAD_START_ROUTINE pfn;
    PVOID                  pContext;
    HANDLE                 hEvent;

} COMMAND_NODE;

typedef struct
{
    LIST_ENTRY  link;
    COMMAND_NODE node;

} COMMAND_QUEUE_ITEM;

typedef struct _NOTIF_LIST
{
    CMSPAddress      *addr;
    _NOTIF_LIST      *next;
} NOTIF_LIST, *PNOTIF_LIST;

class CMSPThread
{
public:
    CMSPThread()
    {
        InitializeListHead(&m_CommandQueue);

        m_hCommandEvent = NULL;
        m_hThread       = NULL;

        m_NotifList     = NULL;

        m_iStartCount = 0;
    }

    ~CMSPThread() { };

    HRESULT Start();
    HRESULT Stop();

    // Shutdown is used to clean up the thread unconditionally. This can be
    // used as an alternative to matched Start() / Stop() calls.

    HRESULT Shutdown();

    HRESULT ThreadProc();

    static LRESULT CALLBACK NotifWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

    HRESULT RegisterPnpNotification(CMSPAddress *pCMSPAddress);
    HRESULT UnregisterPnpNotification(CMSPAddress *pCMSPAddress);

    HRESULT QueueWorkItem(
        LPTHREAD_START_ROUTINE Function,
        PVOID Context,
        BOOL  fSynchronous
        );

private:
    BOOL SignalThreadProc() { return SetEvent(m_hCommandEvent); }

private:

    CMSPCritSection         m_CountLock;     // Protects start count
    CMSPCritSection         m_QueueLock;     // Protects command queue
    int                     m_iStartCount;   // number of times we've been
                                             // started minus number of times
                                             // we've been stopped. If == 0
                                             // then we actually stop thread.
    LIST_ENTRY              m_CommandQueue;  // Queue of commands for thread
                                             // to process.
    HANDLE                  m_hCommandEvent; // Signaled to tell us to do
                                             // something.

    HANDLE                  m_hThread;       // The thread handle. We need to
                                             // save it so that we can wait
                                             // for it when stopping the
                                             // thread.

    HDEVNOTIFY              m_hDevNotifyVideo;  // Handles of device notification registration
    HDEVNOTIFY              m_hDevNotifyAudio;  // for video and audio devices.

    HWND                    m_hWndNotif;     // Window handle for notification window

    PNOTIF_LIST             m_NotifList;     // List of notification functions to call
                                             // on a PNP event
    CMSPCritSection         m_NotifLock;     // Notification list critical section
};

extern CMSPThread g_Thread;

#endif // __MSPTHRD_H

// eof
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Mspcoll.h ===
/*

    Copyright (c) Microsoft Corporation. All rights reserved.

*/

#ifndef _MSPCOLL_H_
#define _MSPCOLL_H_


////////////////////////////////////////////////////////////////////////
// CTapiIfCollection -- adapted from tapi3 code
//      Collection template for collections of IDispatch interfaces
//
////////////////////////////////////////////////////////////////////////

template <class T> class CTapiIfCollection :
    public IDispatchImpl<ITCollection, &IID_ITCollection, &LIBID_TAPI3Lib>,
    public CComObjectRootEx<CComMultiThreadModelNoCS>
{
public:
    typedef CTapiIfCollection<T> _CTapiCollectionBase;
    
BEGIN_COM_MAP(_CTapiCollectionBase)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(ITCollection)
END_COM_MAP()

private:

    int                 m_nSize;
    CComVariant *       m_Var;
    
public:

    CTapiIfCollection(void) : m_nSize(0), m_Var(NULL) { }

    // initialize
    HRESULT STDMETHODCALLTYPE Initialize(
                                         DWORD dwSize,
                                         T * pBegin,
                                         T * pEnd                                         
                                        )
    {
        int                     i;
        HRESULT                 hr;
        T *                     iter;

        LOG((MSP_TRACE, "CTapiCollection::Initialize - enter"));

        // create variant array
        m_nSize = dwSize;

        m_Var = new CComVariant[m_nSize];
        if (m_Var == NULL)
        {
            // debug output
            return E_OUTOFMEMORY;
        }

        i = 0;

        for (iter = pBegin; iter != pEnd; iter++)
        {
            // get IDispatch pointer
            IDispatch * pDisp = NULL;

            hr = (*iter)->QueryInterface(IID_IDispatch, (void**)&pDisp);

            if (hr != S_OK)
            {
                return hr;
            }

            // create a variant and add it to the collection
            CComVariant& var = m_Var[i];

            VariantInit(&var);
            
            var.vt = VT_DISPATCH;
            var.pdispVal = pDisp;

            i++;
        }

        LOG((MSP_TRACE, "CTapiCollection::Initialize - exit"));
        
        return S_OK;
    }

    void FinalRelease()
    {
        LOG((MSP_TRACE, "CTapiCollection::FinalRelease - enter"));

        //
        // We "new"ed an array of objects. Delete each object in the array. The
        // destructor for each object calls VariantClear to release the pointer
        // in that object, based on the variant's tag.
        //

        delete [] m_Var;

        LOG((MSP_TRACE, "CTapiCollection::FinalRelease - exit"));
    }
    
    STDMETHOD(get_Count)(
                         long* retval
                        )
    {
        HRESULT         hr = S_OK;
        
        LOG((MSP_TRACE, "CTapiCollection::get_Count - enter"));
        
        try
        {
            *retval = m_nSize;
        }
        catch(...)
        {
            hr = E_INVALIDARG;
        }

        LOG((MSP_TRACE, "CTapiCollection::get_Count - exit"));

        return hr;
    }

    STDMETHOD(get_Item)(
                                       long Index, 
                                       VARIANT* retval
                                      )
    {
        HRESULT         hr = S_OK;

        LOG((MSP_TRACE, "CTapiCollection::get_Item - enter"));
        
        if (retval == NULL)
        {
            return E_POINTER;
        }

        try
        {
            VariantInit(retval);
        }
        catch(...)
        {
            hr = E_INVALIDARG;
        }

        if (hr != S_OK)
        {
            return hr;
        }

        retval->vt = VT_UNKNOWN;
        retval->punkVal = NULL;

        // use 1-based index, VB like
        if ((Index < 1) || (Index > m_nSize))
        {
            return E_INVALIDARG;
        }


        hr = VariantCopy(retval, &m_Var[Index-1]);

        if (FAILED(hr))
        {
            LOG((MSP_ERROR, 
                "CTapiCollection::get_Item - VariantCopy failed. hr = %lx", 
                hr));

            return hr;
        }

        LOG((MSP_TRACE, "CTapiCollection::get_Item - exit"));
        
        return S_OK;
    }

    HRESULT STDMETHODCALLTYPE get__NewEnum(
                                           IUnknown** retval
                                          )
    
    {
        HRESULT         hr;

        LOG((MSP_TRACE, "CTapiCollection::new__Enum - enter"));
        
        if (retval == NULL)
        {
            return E_POINTER;
        }

        *retval = NULL;

        typedef CComObject<CSafeComEnum<IEnumVARIANT, &IID_IEnumVARIANT, VARIANT, _Copy<VARIANT> > > enumvar;

        enumvar* p; // = new enumvar;
        hr = enumvar::CreateInstance( &p );

        if ( FAILED(hr) )
        {
            // debug output
            return hr;
        }

        hr = p->Init(&m_Var[0], &m_Var[m_nSize], NULL, AtlFlagCopy);

        if (SUCCEEDED(hr))
        {
            hr = p->QueryInterface(IID_IEnumVARIANT, (void**)retval);
        }

        if (FAILED(hr))
        {
            delete p;
        }

        LOG((MSP_TRACE, "CTapiCollection::new__Enum - exit"));
        
        return hr;

    }
};

////////////////////////////////////////////////////////////////////////
// CTapiBstrCollection -- adapted from tapi3 code
//    Collection of BSTRs.
////////////////////////////////////////////////////////////////////////
class CTapiBstrCollection :
    public CComObjectRootEx<CComMultiThreadModelNoCS>,
    public IDispatchImpl<ITCollection, &IID_ITCollection, &LIBID_TAPI3Lib>,
    public CMSPObjectSafetyImpl
{
public:
    
BEGIN_COM_MAP(CTapiBstrCollection)
    COM_INTERFACE_ENTRY(IDispatch)
    COM_INTERFACE_ENTRY(ITCollection)
    COM_INTERFACE_ENTRY(IObjectSafety)
END_COM_MAP()

private:

    DWORD               m_dwSize;
    CComVariant *       m_Var;
    
public:

    CTapiBstrCollection(void) : m_dwSize(0), m_Var(NULL) { }

    // initialize
    HRESULT STDMETHODCALLTYPE Initialize(
                                         DWORD dwSize,
                                         BSTR * pBegin,
                                         BSTR * pEnd                                         
                                        )
    {
        BSTR *  i;
        DWORD   dw = 0;

        LOG((MSP_TRACE, "CTapiBstrCollection::Initialize - enter"));

        // create variant array
        m_dwSize = dwSize;

        m_Var = new CComVariant[m_dwSize];

        if (m_Var == NULL)
        {
            // debug output
            return E_OUTOFMEMORY;
        }

        for (i = pBegin; i != pEnd; i++)
        {
            // create a variant and add it to the collection
            CComVariant& var = m_Var[dw];

            var.vt = VT_BSTR;
            var.bstrVal = *i;

            dw++;
        }

        LOG((MSP_TRACE, "CTapiBstrCollection::Initialize - exit"));
        
        return S_OK;
    }
    
    STDMETHOD(get_Count)(
                         long* retval
                        )
    {
        HRESULT         hr = S_OK;

        LOG((MSP_TRACE, "CTapiBstrCollection::get_Count - enter"));        

        try
        {
            *retval = m_dwSize;
        }
        catch(...)
        {
            hr = E_INVALIDARG;
        }

        LOG((MSP_TRACE, "CTapiBstrCollection::get_Count - exit"));
        
        return hr;
    }

    STDMETHOD(get_Item)(
                        long Index, 
                        VARIANT* retval
                       )
    {
        HRESULT         hr = S_OK;

        LOG((MSP_TRACE, "CTapiBstrCollection::get_Item - enter"));
        
        if (retval == NULL)
        {
            return E_POINTER;
        }

        try
        {
            VariantInit(retval);
        }
        catch(...)
        {
            hr = E_INVALIDARG;
        }

        if (hr != S_OK)
        {
            return hr;
        }

        retval->vt = VT_BSTR;
        retval->bstrVal = NULL;

        // use 1-based index, VB like
        // no problem with signed/unsigned, since
        // if Index < 0 then first clause is true, making it
        // irrelevant if the second clause is correct or not.

        if ((Index < 1) || ( (DWORD) Index > m_dwSize))
        {
            return E_INVALIDARG;
        }

        //
        // This copies the string, not just the pointer.
        //

        hr = VariantCopy(retval, &m_Var[Index-1]);

        if (FAILED(hr))
        {
            LOG((MSP_ERROR, 
                "CTapiBstrCollection::get_Item - VariantCopy failed. hr = %lx", 
                hr));

            return hr;
        }


        LOG((MSP_TRACE, "CTapiBstrCollection::get_Item - exit"));

        return S_OK;
    }

    HRESULT STDMETHODCALLTYPE get__NewEnum(
                                           IUnknown** retval
                                          )
    
    {
        HRESULT         hr;

        LOG((MSP_TRACE, "CTapiBstrCollection::get__NumEnum - enter"));
        
        if (retval == NULL)
        {
            return E_POINTER;
        }

        *retval = NULL;

        typedef CComObject<CSafeComEnum<IEnumVARIANT, &IID_IEnumVARIANT, VARIANT, _Copy<VARIANT> > > enumvar;

        enumvar* p = new enumvar;

        if ( p == NULL)
        {
            // debug output
            return E_OUTOFMEMORY;
        }

        hr = p->Init(&m_Var[0], &m_Var[m_dwSize], NULL, AtlFlagCopy);

        if (SUCCEEDED(hr))
        {
            hr = p->QueryInterface(IID_IEnumVARIANT, (void**)retval);
        }

        if (FAILED(hr))
        {
            delete p;
        }

        LOG((MSP_TRACE, "CTapiBstrCollection::get__NewEnum - exit"));
        
        return hr;

    }

    void FinalRelease()
    {
        LOG((MSP_TRACE, "CTapiBstrCollection::FinalRelease() - enter"));

        //
        // We "new"ed an array of objects. Delete each object in the array. The
        // destructor for each object calls VariantClear to release the pointer
        // in that object, based on the variant's tag.
        //

        delete [] m_Var;

        LOG((MSP_TRACE, "CTapiBstrCollection::FinalRelease() - exit"));
    }

};

#endif // _MSPCOLL_H_

// eof
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MspEnum.h ===
/*

    Copyright (c) Microsoft Corporation. All rights reserved.

*/

#ifndef _MSPENUM_H_
#define _MSPENUM_H_

//////////////////////////////////////////////////////////////////////////////
//
// CSafeComEnum
//
// All TAPI 3.0 system components and MSPs use the CSafeComEnum class instead
// of ATL 2.1's CComEnum class when implementing enumerator objects that are
// accessible to applications. This is needed for the following reasons:
//
// 1. CComEnum does not perform IsBadWritePtr checks on the pointer arguments
//    to the enumerator methods. This allows the component exposing the
//    enumerator to AV when called with invalid pointer arguments.
//
// 2. CComEnum does not support free thread marshaling, and therefore cannot
//    be used from an apartment threaded application.
//
// Note: No debug tracing is done here, to facilitate use of this template
// independent of the rest of the MSP Base Classes.
//
/////////////////////////////////////////////////////////////////////////////


template <class Base, const IID* piid, class T, class Copy,
          class ThreadModel = CComObjectThreadModel>
class ATL_NO_VTABLE CSafeComEnum :
        public CComEnumImpl<Base, piid, T, Copy>,
        public CComObjectRootEx< ThreadModel >
{
    typedef CSafeComEnum<Base, piid, T, Copy, ThreadModel> ThisClass;
    typedef CComEnumImpl<Base, piid, T, Copy>              BaseClass;

    STDMETHOD(Next)(ULONG celt, T* rgelt, ULONG* pceltFetched)
    {
        //
        // Check if the return array is valid for as many elements as
        // specified. No need to explicitly check if celt is zero here
        // celt itself will be checked in the base class method.
        //

        if ( !rgelt )
        {
            return E_POINTER;
        }

        //
        // if pceltFetched == NULL,this may still be a valid call. pceltFetched == NULL implies that
        // celt should be equal to 1, but that will be checked in the
        // base class method.
        //

        

        //
        // Everything OK so far; proceed with base class method.
        //

        return BaseClass::Next(celt, rgelt, pceltFetched);
    }

    STDMETHOD(Clone)(Base** ppEnum)
    {
        //
        // Check if the return pointer is valid.
        //

        if (!ppEnum)
        {
            return E_POINTER;
        }

        //
        // Everything OK so far; proceed with base class method.
        //

        return BaseClass::Clone(ppEnum);
    }

    //
    // We do not override Skip or Reset as they have no pointer arguments.
    //

    //
    // The rest of this class involves support for free thread marshaling.
    //

    BEGIN_COM_MAP( ThisClass )

		COM_INTERFACE_ENTRY_IID( *piid, BaseClass )
        COM_INTERFACE_ENTRY_AGGREGATE( IID_IMarshal, m_pFTM )

    END_COM_MAP()

    DECLARE_GET_CONTROLLING_UNKNOWN()

    HRESULT Init(T* begin, T* end, IUnknown* pUnk,
            CComEnumFlags flags = AtlFlagNoCopy)
    {
        //
        // We do not check the pointer arguments in this method because this
        // method is not exposed to the application (it is not a COM interface
        // method).
        //
        
        HRESULT hr;

        IUnknown * pIU = GetControllingUnknown();

        hr = CoCreateFreeThreadedMarshaler( pIU, 
                                            & m_pFTM );

        if ( FAILED(hr) )
        {
            return hr;
        }

        return BaseClass::Init(begin, end, pUnk, flags);
    }

    CSafeComEnum()
    {
        m_pFTM = NULL;
    }

    void FinalRelease(void)
    {
        if ( m_pFTM )
        {
            m_pFTM->Release();
        }

        CComObjectRootEx< ThreadModel >::FinalRelease();
    }

protected:
    IUnknown * m_pFTM; // pointer to free thread marshaler
};

#endif // _MSPENUM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msptrmvc.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    msptrmvc.cpp

Abstract:

    MSP base classes: declaration of video capture terminal.

--*/


#ifndef _MSPTRMVC_H_
#define _MSPTRMVC_H_
    
/////////////////////////////////////////////////////////////////////////////
// CVideoCaptureTerminal

class CVideoCaptureTerminal : 
    public CSingleFilterStaticTerminal
{
public:

    CVideoCaptureTerminal();
    virtual ~CVideoCaptureTerminal();

public:

    static HRESULT CreateTerminal(
        IN    CComPtr<IMoniker>    pMoniker,
        IN    MSP_HANDLE           htAddress,
        OUT   ITTerminal         **ppTerm
        );

// If we add any additional interfaces to this class then
// we must uncomment and expand the following.
//
// BEGIN_COM_MAP(CVideoCaptureTerminal)
//    COM_INTERFACE_ENTRY_CHAIN(CSingleFilterStaticTerminal)
// END_COM_MAP()

DECLARE_LOG_ADDREF_RELEASE(CVideoCaptureTerminal);

private:

    // CBaseTerminal required overrides 

    virtual HRESULT AddFiltersToGraph();

    virtual LONG CountOfMediaTypes()
    {
        return 1;
    }

    virtual DWORD GetSupportedMediaTypes(void)
    {
        return (DWORD) TAPIMEDIATYPE_VIDEO;
    }

    // Helper methods.
    HRESULT CreateFilters();
    HRESULT FindCapturePin();
};



inline 
CVideoCaptureTerminal::CVideoCaptureTerminal(
    )                                   
{
    m_TerminalDirection = TD_CAPTURE;
    m_TerminalType = TT_STATIC;
}

#endif // _MSPTRMVC_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msptrmar.h ===
///////////////////////////////////////////////////////////////////////////////
//
//
//      Copyright (c) Microsoft Corporation. All rights reserved.
//
//
//      Name: msptrmar.h
//
// Description: Definition of the CAudioRenderTerminal class
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _MSPTRMAR_H_
#define _MSPTRMAR_H_

#define WAVEOUT_NAME L"WaveOut Terminal"
#define MIXER_NAME L"PCM Mixer"

/////////////////////////////////////////////////////////////////////////////
// CAudioRenderTerminal

class CAudioRenderTerminal : 
    public IDispatchImpl<ITBasicAudioTerminal, &IID_ITBasicAudioTerminal, &LIBID_TAPI3Lib>, 
    public IDispatchImpl<ITStaticAudioTerminal, &IID_ITStaticAudioTerminal, &LIBID_TAPI3Lib>, 
    public CSingleFilterStaticTerminal,
    public CMSPObjectSafetyImpl
{
public:
    CAudioRenderTerminal();
    virtual ~CAudioRenderTerminal();

    // Helper methods.
    HRESULT InitializeDefaultTerminal();

    static HRESULT CreateTerminal(
        IN    CComPtr<IMoniker>    pMoniker,
        IN    MSP_HANDLE           htAddress,
        OUT   ITTerminal         **ppTerm
        );

    HRESULT FindTerminalPin();

BEGIN_COM_MAP(CAudioRenderTerminal)
    COM_INTERFACE_ENTRY(IObjectSafety)
    COM_INTERFACE_ENTRY(ITBasicAudioTerminal)
    COM_INTERFACE_ENTRY(ITStaticAudioTerminal)
    COM_INTERFACE_ENTRY_CHAIN(CSingleFilterStaticTerminal)
END_COM_MAP()

DECLARE_VQI()
DECLARE_LOG_ADDREF_RELEASE(CAudioRenderTerminal)

// ITBasicAudioTerminal
public:
    STDMETHOD(get_Balance)(OUT  long *pVal);
    STDMETHOD(put_Balance)(IN   long newVal);
    STDMETHOD(get_Volume) (OUT  long *pVal);
    STDMETHOD(put_Volume) (IN   long newVal);

// ITStaticAudioTerminal
public:

    STDMETHOD(get_WaveId) (OUT  long * plWaveId);

// Implementation
public:

    // CBaseTerminal overrides 

    STDMETHODIMP CompleteConnectTerminal(void);

    STDMETHODIMP DisconnectTerminal(
            IN      IGraphBuilder  * pGraph,
            IN      DWORD            dwReserved
            );
    
    virtual HRESULT AddFiltersToGraph();

    virtual DWORD GetSupportedMediaTypes(void)
    {
        return (DWORD) TAPIMEDIATYPE_AUDIO;
    }

    HRESULT CreateFilters();

private:

    // Keeps track of whether we need to unreserve WaveOut
    bool m_bResourceReserved;

    CComPtr<IBasicAudio> m_pIBasicAudio;

};

#endif // _MSPTRMAR_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mssip.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows - Internet Security
//
//  Copyright (C) Microsoft Corporation, 1996 - 1997
//
//  File:       mssip.h
//
//  Contents:   Microsoft SIP Provider Main Include File
//
//  History:    19-Feb-1997 pberkman    Created
//
//--------------------------------------------------------------------------

#ifndef MSSIP_H
#define MSSIP_H

#ifdef __cplusplus
    extern "C"
    {
#endif


#pragma pack (8)

typedef CRYPT_HASH_BLOB             CRYPT_DIGEST_DATA;


//
//  dwflags
//
#define MSSIP_FLAGS_PROHIBIT_RESIZE_ON_CREATE   0x00010000
#define MSSIP_FLAGS_USE_CATALOG                 0x00020000

#define SPC_INC_PE_RESOURCES_FLAG               0x80
#define SPC_INC_PE_DEBUG_INFO_FLAG              0x40
#define SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG       0x20
#define SPC_EXC_PE_PAGE_HASHES_FLAG             0x10

// The above SPC_EXC_PE_PAGE_HASHES_FLAG takes precedence if also set.
#define SPC_INC_PE_PAGE_HASHES_FLAG             0x100

//////////////////////////////////////////////////////////////////////////////
//
// SIP_SUBJECTINFO
//----------------------------------------------------------------------------
//  pass this structure to all defined SIPs.  Make sure to initialize
//  the ENTIRE structure to binary zero before the FIRST call is made.  Do
//  not initialize it BETWEEN calls!
//
typedef struct SIP_SUBJECTINFO_
{
    DWORD                       cbSize;         // set to sizeof(SIP_SUBJECTINFO)
    GUID                        *pgSubjectType; // subject type
    HANDLE                      hFile;          // set to File handle that represents the subject
                                                // set to INVALID_HANDLE VALUE to allow
                                                // SIP to use pwsFileName for persistent
                                                // storage types (will handle open/close)
    LPCWSTR                     pwsFileName;    // set to file name
    LPCWSTR                     pwsDisplayName; // optional: set to display name of
                                                // subject.

    DWORD                       dwReserved1;    // do not use!

    DWORD                       dwIntVersion;   // DO NOT SET OR CLEAR THIS.
                                                // This member is used by the sip for
                                                // passing the internal version number
                                                // between the ..get and verify... functions.
    HCRYPTPROV                  hProv;
    CRYPT_ALGORITHM_IDENTIFIER  DigestAlgorithm;
    DWORD                       dwFlags;
    DWORD                       dwEncodingType;

    DWORD                       dwReserved2;    // do not use!

    DWORD                       fdwCAPISettings;        // setreg settings
    DWORD                       fdwSecuritySettings;    // IE security settings
    DWORD                       dwIndex;        // message index of last "Get"

    DWORD                       dwUnionChoice;
#   define                          MSSIP_ADDINFO_NONE          0
#   define                          MSSIP_ADDINFO_FLAT          1
#   define                          MSSIP_ADDINFO_CATMEMBER     2
#   define                          MSSIP_ADDINFO_BLOB          3
#   define                          MSSIP_ADDINFO_NONMSSIP      500 // everything < is reserved by MS.

    union
    {
        struct MS_ADDINFO_FLAT_             *psFlat;
        struct MS_ADDINFO_CATALOGMEMBER_    *psCatMember;
        struct MS_ADDINFO_BLOB_             *psBlob;
    };

    LPVOID                      pClientData;    // data pased in from client to SIP

} SIP_SUBJECTINFO, *LPSIP_SUBJECTINFO;

//////////////////////////////////////////////////////////////////////////////
//
// MS_ADDINFO_FLAT
//----------------------------------------------------------------------------
//      Flat or End-To-End types
//      needed for flat type files during indirect calls
//      "Digest" of file.
//
typedef struct MS_ADDINFO_FLAT_
{
    DWORD                       cbStruct;
    struct SIP_INDIRECT_DATA_   *pIndirectData;
} MS_ADDINFO_FLAT, *PMS_ADDINFO_FLAT;

//////////////////////////////////////////////////////////////////////////////
//
// MS_ADDINFO_CATALOGMEMBER
//----------------------------------------------------------------------------
//  Catalog Member verification.
//
typedef struct MS_ADDINFO_CATALOGMEMBER_
{
    DWORD                       cbStruct;       // = sizeof(MS_ADDINFO_CATALOGMEMBER)
    struct CRYPTCATSTORE_       *pStore;        // defined in mscat.h
    struct CRYPTCATMEMBER_      *pMember;       // defined in mscat.h
} MS_ADDINFO_CATALOGMEMBER, *PMS_ADDINFO_CATALOGMEMBER;

//////////////////////////////////////////////////////////////////////////////
//
// MS_ADDINFO_BLOB
//----------------------------------------------------------------------------
//  Memory "blob" verification.
//
typedef struct MS_ADDINFO_BLOB_
{
    DWORD                       cbStruct;
    DWORD                       cbMemObject;
    BYTE                        *pbMemObject;

    DWORD                       cbMemSignedMsg;
    BYTE                        *pbMemSignedMsg;

} MS_ADDINFO_BLOB, *PMS_ADDINFO_BLOB;

//////////////////////////////////////////////////////////////////////////////
//
// SIP_INDIRECT_DATA
//----------------------------------------------------------------------------
// Indirect data structure is used to store the hash of the subject
// along with data that is relevant to the subject.  This can include
// names etc.
//
typedef struct SIP_INDIRECT_DATA_
{
    CRYPT_ATTRIBUTE_TYPE_VALUE    Data;            // Encoded attribute
    CRYPT_ALGORITHM_IDENTIFIER    DigestAlgorithm; // Digest algorithm used to hash
    CRYPT_HASH_BLOB               Digest;          // Hash of subject
} SIP_INDIRECT_DATA, *PSIP_INDIRECT_DATA;

#pragma pack()

//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPGetSignedDataMsg
//----------------------------------------------------------------------------
// Returns the message specified by the index count. Data, specific to
// the subject is passed in through pSubjectInfo. To retrieve the
// size of the signature, set pbData to NULL.
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
// Last Errors:
//      ERROR_NOT_ENOUGH_MEMORY:        error allocating memory
//      TRUST_E_SUBJECT_FORM_UNKNOWN:   unknown subject type.
//      ERROR_INVALID_PARAMETER:        bad argument passed in
//      ERROR_BAD_FORMAT:               file/data format is not correct
//                                      for the requested SIP.
//      CRYPT_E_NO_MATCH:               the signature could not be found
//                                      based on the dwIndex provided.
//      ERROR_INSUFFICIENT_BUFFER:      the pbSignedDataMsg was not big
//                                      enough to hold the data.  pcbSignedDataMsg
//                                      contains the required size.
//
extern BOOL WINAPI CryptSIPGetSignedDataMsg(
                                IN      SIP_SUBJECTINFO *pSubjectInfo,
                                OUT     DWORD           *pdwEncodingType,
                                IN      DWORD           dwIndex,
                                IN OUT  DWORD           *pcbSignedDataMsg,
                                OUT     BYTE            *pbSignedDataMsg);

typedef BOOL (WINAPI * pCryptSIPGetSignedDataMsg)(
                                IN      SIP_SUBJECTINFO *pSubjectInfo,
                                OUT     DWORD           *pdwEncodingType,
                                IN      DWORD           dwIndex,
                                IN OUT  DWORD           *pcbSignedDataMsg,
                                OUT     BYTE            *pbSignedDataMsg);


//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPPuttSignedDataMsg
//----------------------------------------------------------------------------
// Adds a signature to the subject. The index that it was
// stored with is returned for future reference.
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                        Errors occured.  See GetLastError()
//
// Last Errors:
//      ERROR_NOT_ENOUGH_MEMORY:        error allocating memory
//      TRUST_E_SUBJECT_FORM_UNKNOWN:   unknown subject type.
//      CRYPT_E_BAD_LEN:                the length specified in
//                                      psData->dwSignature was
//                                      insufficient.
//      CRYPT_E_NO_MATCH:               could not find the specified index
//      ERROR_INVALID_PARAMETER:        bad argument passed in
//      ERROR_BAD_FORMAT:               file/data format is not correct
//                                      for the requested SIP.
//      CRYPT_E_FILERESIZED:            returned when signing a fixed-length
//                                      file (e.g.: CABs) and the message
//                                      is larger than the pre-allocated
//                                      size.  The 'put' function will re-
//                                      size the file and return this error.
//                                      The CreateIndirect function MUST be
//                                      called again to recalculate the
//                                      indirect data (hash).  Then, call the
//                                      'put' function again.
//
extern BOOL WINAPI CryptSIPPutSignedDataMsg(
                                IN      SIP_SUBJECTINFO *pSubjectInfo,
                                IN      DWORD           dwEncodingType,
                                OUT     DWORD           *pdwIndex,
                                IN      DWORD           cbSignedDataMsg,
                                IN      BYTE            *pbSignedDataMsg);

typedef BOOL (WINAPI * pCryptSIPPutSignedDataMsg)(
                                IN      SIP_SUBJECTINFO *pSubjectInfo,
                                IN      DWORD           dwEncodingType,
                                OUT     DWORD           *pdwIndex,
                                IN      DWORD           cbSignedDataMsg,
                                IN      BYTE            *pbSignedDataMsg);

//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPCreateIndirectData
//----------------------------------------------------------------------------
// Returns a PSIP_INDIRECT_DATA structure filled in the hash, digest alogrithm
// and an encoded attribute. If pcIndirectData points to a DWORD and
// psIndirect data points to null the the size of the data should be returned
// in pcIndirectData.
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
// Last Errors:
//      NTE_BAD_ALGID:                  Bad Algorithm Identifyer
//      ERROR_NOT_ENOUGH_MEMORY:        error allocating memory
//      TRUST_E_SUBJECT_FORM_UNKNOWN:   unknown subject type.
//      ERROR_INVALID_PARAMETER:        bad argument passed in
//      ERROR_BAD_FORMAT:               file/data format is not correct
//                                      for the requested SIP.
//
extern BOOL WINAPI CryptSIPCreateIndirectData(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN OUT  DWORD               *pcbIndirectData,
                                OUT     SIP_INDIRECT_DATA   *pIndirectData);

typedef BOOL (WINAPI * pCryptSIPCreateIndirectData)(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN OUT  DWORD               *pcbIndirectData,
                                OUT     SIP_INDIRECT_DATA   *pIndirectData);



//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPVerifyIndirectData
//----------------------------------------------------------------------------
// Takes the information stored in the indirect data and compares it to the
// subject.
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
// Last Errors:
//      NTE_BAD_ALGID:                  Bad Algorithm Identifyer
//      ERROR_NOT_ENOUGH_MEMORY:        error allocating memory
//      TRUST_E_SUBJECT_FORM_UNKNOWN:   unknown subject type.
//      CRYPT_E_NO_MATCH:               could not find the specified index
//      CRYPT_E_SECURITY_SETTINGS:      due to security settings, the file
//                                      was not verified.
//      ERROR_INVALID_PARAMETER:        bad argument passed in
//      ERROR_BAD_FORMAT:               file/data format is not correct
//                                      for the requested SIP.
extern BOOL WINAPI CryptSIPVerifyIndirectData(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN      SIP_INDIRECT_DATA   *pIndirectData);

typedef BOOL (WINAPI * pCryptSIPVerifyIndirectData)(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN      SIP_INDIRECT_DATA   *pIndirectData);


//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPRemoveSignedDataMsg
//----------------------------------------------------------------------------
// Removes the signature at the specified index
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
// Last Errors:
//      TRUST_E_SUBJECT_FORM_UNKNOWN:   unknown subject type.
//      CRYPT_E_NO_MATCH:               could not find the specified index
//      ERROR_INVALID_PARAMETER:        bad argument passed in
//      ERROR_BAD_FORMAT:               file/data format is not correct
//                                      for the requested SIP.
//
extern BOOL WINAPI CryptSIPRemoveSignedDataMsg(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN      DWORD               dwIndex);

typedef BOOL (WINAPI * pCryptSIPRemoveSignedDataMsg)(
                                IN      SIP_SUBJECTINFO     *pSubjectInfo,
                                IN      DWORD               dwIndex);


#pragma pack(8)

//////////////////////////////////////////////////////////////////////////////
//
// SIP_DISPATCH_INFO
//----------------------------------------------------------------------------
//
typedef struct SIP_DISPATCH_INFO_
{
    DWORD                           cbSize;     // = sizeof(SIP_DISPATCH_INFO)
    HANDLE                          hSIP;       // used internal
    pCryptSIPGetSignedDataMsg       pfGet;
    pCryptSIPPutSignedDataMsg       pfPut;
    pCryptSIPCreateIndirectData     pfCreate;
    pCryptSIPVerifyIndirectData     pfVerify;
    pCryptSIPRemoveSignedDataMsg    pfRemove;
} SIP_DISPATCH_INFO, *LPSIP_DISPATCH_INFO;

//
// the sip exports this function to allow verification and signing
// processes to pass in the file handle and check if the sip supports
// this type of file.  if it does, the sip will return TRUE and fill
// out the pgSubject with the appropiate GUID.
//
typedef BOOL (WINAPI *pfnIsFileSupported)(IN  HANDLE  hFile,
                                   OUT GUID    *pgSubject);

typedef BOOL (WINAPI *pfnIsFileSupportedName)(IN WCHAR *pwszFileName,
                                       OUT GUID *pgSubject);


typedef struct SIP_ADD_NEWPROVIDER_
{
    DWORD                           cbStruct;
    GUID                            *pgSubject;
    WCHAR                           *pwszDLLFileName;
    WCHAR                           *pwszMagicNumber;   // optional

    WCHAR                           *pwszIsFunctionName; // optiona: pfnIsFileSupported

    WCHAR                           *pwszGetFuncName;
    WCHAR                           *pwszPutFuncName;
    WCHAR                           *pwszCreateFuncName;
    WCHAR                           *pwszVerifyFuncName;
    WCHAR                           *pwszRemoveFuncName;

    WCHAR                           *pwszIsFunctionNameFmt2; // optiona: pfnIsFileSupported

} SIP_ADD_NEWPROVIDER, *PSIP_ADD_NEWPROVIDER;

#define SIP_MAX_MAGIC_NUMBER        4

#pragma pack()

//////////////////////////////////////////////////////////////////////////////
//
// CryptLoadSIP
//----------------------------------------------------------------------------
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
extern BOOL WINAPI CryptSIPLoad(IN const GUID               *pgSubject,     // GUID for the requried sip
                                IN DWORD                    dwFlags,        // Reserved - MUST BE ZERO
                                IN OUT SIP_DISPATCH_INFO    *pSipDispatch); // Table of functions

//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPRetrieveSubjectGuid (defined in crypt32.dll)
//----------------------------------------------------------------------------
// looks at the file's "Magic Number" and tries to determine which
// SIP's object ID is right for the file type.
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
extern BOOL WINAPI CryptSIPRetrieveSubjectGuid(IN LPCWSTR FileName,   // wide file name
                                               IN OPTIONAL HANDLE hFileIn,     // or handle of open file
                                               OUT GUID *pgSubject);           // defined SIP's GUID

                                               //////////////////////////////////////////////////////////////////////////////
//
// CryptSIPRetrieveSubjectGuidForCatalogFile (defined in crypt32.dll)
//----------------------------------------------------------------------------
// looks at the file's "Magic Number" and tries to determine which
// SIP's object ID is right for the file type.
//
// NOTE:  This function only supports SIPs that are used for catalog files (either PE, CAB, or flat).
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
extern BOOL WINAPI CryptSIPRetrieveSubjectGuidForCatalogFile(IN LPCWSTR FileName,   // wide file name
                                                             IN OPTIONAL HANDLE hFileIn,     // or handle of open file
                                                             OUT GUID *pgSubject);           // defined SIP's GUID


//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPAddProvider
//----------------------------------------------------------------------------
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
extern BOOL WINAPI CryptSIPAddProvider(IN SIP_ADD_NEWPROVIDER *psNewProv);

//////////////////////////////////////////////////////////////////////////////
//
// CryptSIPRemoveProvider
//----------------------------------------------------------------------------
//
// Returns:
//      TRUE:                           No fatal errors
//      FALSE:                          Errors occured.  See GetLastError()
//
extern BOOL WINAPI CryptSIPRemoveProvider(IN GUID *pgProv);


#ifdef __cplusplus
}
#endif


#endif // MSSIP_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msptrmac.h ===
///////////////////////////////////////////////////////////////////////////////
//
//        Copyright (c) Microsoft Corporation. All rights reserved.
//
//        Name: tmaudcap.h
//
// Description: Definition of the CAudioCaptureTerminal class
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _MSPTRMAC_H_
#define _MSPTRMAC_H_

#define WAVEIN_NAME L"WaveIn Terminal"

/////////////////////////////////////////////////////////////////////////////
// CAudioCaptureTerminal

class CAudioCaptureTerminal : 
    public IDispatchImpl<ITBasicAudioTerminal, &IID_ITBasicAudioTerminal, &LIBID_TAPI3Lib>, 
    public IDispatchImpl<ITStaticAudioTerminal, &IID_ITStaticAudioTerminal, &LIBID_TAPI3Lib>, 
    public CSingleFilterStaticTerminal,
    public CMSPObjectSafetyImpl

{

BEGIN_COM_MAP(CAudioCaptureTerminal)
    COM_INTERFACE_ENTRY(IObjectSafety)
    COM_INTERFACE_ENTRY(ITBasicAudioTerminal)
    COM_INTERFACE_ENTRY(ITStaticAudioTerminal)
    COM_INTERFACE_ENTRY_CHAIN(CSingleFilterStaticTerminal)
END_COM_MAP()

DECLARE_VQI()
DECLARE_LOG_ADDREF_RELEASE(CAudioCaptureTerminal)

public:
    CAudioCaptureTerminal();
    virtual ~CAudioCaptureTerminal();

    static HRESULT CreateTerminal(
        IN    CComPtr<IMoniker>    pMoniker,
        IN    MSP_HANDLE           htAddress,
        OUT   ITTerminal         **ppTerm
        );

    HRESULT FindTerminalPin();

// ITBasicAudioTerminal
public:

    STDMETHOD(get_Balance)(OUT  long *pVal);
    STDMETHOD(put_Balance)(IN   long newVal);
    STDMETHOD(get_Volume) (OUT  long *pVal);
    STDMETHOD(put_Volume) (IN   long newVal);

// ITStaticAudioTerminal
public:

    STDMETHOD(get_WaveId) (OUT  long * plWaveId);

public:

    // CBaseTerminal overrides 

    STDMETHODIMP CompleteConnectTerminal(void);

    STDMETHODIMP DisconnectTerminal(
            IN      IGraphBuilder  * pGraph,
            IN      DWORD            dwReserved
            );

    virtual HRESULT AddFiltersToGraph();

    virtual DWORD GetSupportedMediaTypes(void)
    {
        return (DWORD) TAPIMEDIATYPE_AUDIO;
    }

    // Helper methods.
    HRESULT CreateFilters();

    // checks if the filters need to be created
    inline HRESULT CreateFiltersIfRequired();

private:
    bool m_bResourceReserved; // keeps track of whether we need to unreserve WaveOut
    CComPtr<IAMAudioInputMixer> m_pIAMAudioInputMixer;
};


    
inline HRESULT
CAudioCaptureTerminal::CreateFiltersIfRequired(
    )
{                                           
    if (m_pIFilter == NULL)   return CreateFilters();          
    
    return S_OK;
}

#endif // _MSPTRMAC_H_

// eof
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msstkppg.h ===
//=--------------------------------------------------------------------------=
// MSStkPPg.H
//=--------------------------------------------------------------------------=
// Copyright  1995  Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=
//
// class declaration for msprop32's property pages.
//
#ifndef _MS_STOCK_PROP_PAGES_H_

// {7EBDAAE0-8120-11cf-899F-00AA00688B10}
DEFINE_GUID(CLSID_StockFontPage, 0x7ebdaae0, 0x8120, 0x11cf, 0x89, 0x9f, 0x0, 0xaa, 0x0, 0x68, 0x8b, 0x10);

// {7EBDAAE1-8120-11cf-899F-00AA00688B10}
DEFINE_GUID(CLSID_StockColorPage, 0x7ebdaae1, 0x8120, 0x11cf, 0x89, 0x9f, 0x0, 0xaa, 0x0, 0x68, 0x8b, 0x10);

// {7EBDAAE2-8120-11cf-899F-00AA00688B10}
DEFINE_GUID(CLSID_StockPicturePage, 0x7ebdaae2, 0x8120, 0x11cf, 0x89, 0x9f, 0x0, 0xaa, 0x0, 0x68, 0x8b, 0x10);

#define _MS_STOCK_PROP_PAGES_H_
#endif // _MS_STOCK_PROP_PAGES_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msremote.h ===
//-----------------------------------------------------------------------------
//
// File:        msremote.h
//
// Copyright:   Copyright (c) Microsoft Corporation
//
// Contents:    MSRemote external constants GUIDS and other things users need
//
// Comments:
//
//-----------------------------------------------------------------------------

#ifndef MSRemote_INCLUDED
#define MSRemote_INCLUDED

#undef MSREMOTEDECLSPEC
#if _MSC_VER >= 1100 && (!defined(SHx) || (defined(SHx) && _MSC_VER >= 1200))
#define MSREMOTEDECLSPEC __declspec(selectany)
#else
#define MSREMOTEDECLSPEC 
#endif //_MSC_VER

#define MS_REMOTE_PROGID    "MS Remote"
#define MS_REMOTE_FILENAME  "MSDAREM.DLL"
#define MS_REMOTE_WPROGID    L"MS Remote"
#define MS_REMOTE_WFILENAME  L"MSDAREM.DLL"

extern const MSREMOTEDECLSPEC CLSID CLSID_MSRemote  //DSO
 = { 0x27016870, 0x8e02, 0x11d1, { 0x92, 0x4e, 0x0, 0xc0, 0x4f, 0xbb, 0xbf, 0xb3 } };

extern const MSREMOTEDECLSPEC CLSID CLSID_MSRemoteSession
 = { 0x27016871, 0x8e02, 0x11d1, { 0x92, 0x4e, 0x0, 0xc0, 0x4f, 0xbb, 0xbf, 0xb3 } };

extern const MSREMOTEDECLSPEC CLSID CLSID_MSRemoteCommand
 = { 0x27016872, 0x8e02, 0x11d1, { 0x92, 0x4e, 0x0, 0xc0, 0x4f, 0xbb, 0xbf, 0xb3 } };

extern const MSREMOTEDECLSPEC char *PROGID_MSRemote = MS_REMOTE_PROGID;

extern const MSREMOTEDECLSPEC WCHAR *PROGID_WMSRemote = MS_REMOTE_WPROGID;

extern const MSREMOTEDECLSPEC char *PROGID_MSRemote_Version = MS_REMOTE_PROGID ".1";

extern const MSREMOTEDECLSPEC WCHAR *PROGID_WMSRemote_Version = MS_REMOTE_WPROGID L".1";

extern const MSREMOTEDECLSPEC GUID DBPROPSET_MSREMOTE_DBINIT
 = { 0x27016873, 0x8e02, 0x11d1, { 0x92, 0x4e, 0x0, 0xc0, 0x4f, 0xbb, 0xbf, 0xb3 } };

#define DBPROP_MSREMOTE_SERVER             2   //Name="Remote Server", type=VT_BSTR, def=VT_EMPTY
#define DBPROP_MSREMOTE_PROVIDER           3   //Name="Remote Provider", type=VT_BSTR, def=VT_EMPTY
#define DBPROP_MSREMOTE_HANDLER            4   //Name="Handler", type=VT_BSTR, def=VT_EMPTY
#define DBPROP_MSREMOTE_DFMODE             5   //Name="DFMode", type=VT_BSTR, def=VT_EMPTY
#define DBPROP_MSREMOTE_INTERNET_TIMEOUT   6   //Name="Internet Timeout", type=VT_I4, def=VT_EMPTY
#define DBPROP_MSREMOTE_TRANSACT_UPDATES   7   //Name="Transact Updates", type=VT_BOOL, def=VARIANT_FALSE
#define DBPROP_MSREMOTE_COMMAND_PROPERTIES 8   //Name="Command Properties", type=VT_BSTR, def=VT_EMPTY

extern const MSREMOTEDECLSPEC GUID DBPROPSET_MSREMOTE_DATASOURCE
 = { 0x27016874, 0x8e02, 0x11d1, { 0x92, 0x4e, 0x0, 0xc0, 0x4f, 0xbb, 0xbf, 0xb3 } };

#define DBPROP_MSREMOTE_CURRENT_DFMODE  2  //Name="Current DFMode", type=VT_I4, def=21

#endif // MSRemote_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msrdc.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msrdc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msrdc_h__
#define __msrdc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IRdcGeneratorParameters_FWD_DEFINED__
#define __IRdcGeneratorParameters_FWD_DEFINED__
typedef interface IRdcGeneratorParameters IRdcGeneratorParameters;
#endif 	/* __IRdcGeneratorParameters_FWD_DEFINED__ */


#ifndef __IRdcGeneratorFilterMaxParameters_FWD_DEFINED__
#define __IRdcGeneratorFilterMaxParameters_FWD_DEFINED__
typedef interface IRdcGeneratorFilterMaxParameters IRdcGeneratorFilterMaxParameters;
#endif 	/* __IRdcGeneratorFilterMaxParameters_FWD_DEFINED__ */


#ifndef __IRdcGenerator_FWD_DEFINED__
#define __IRdcGenerator_FWD_DEFINED__
typedef interface IRdcGenerator IRdcGenerator;
#endif 	/* __IRdcGenerator_FWD_DEFINED__ */


#ifndef __IRdcFileReader_FWD_DEFINED__
#define __IRdcFileReader_FWD_DEFINED__
typedef interface IRdcFileReader IRdcFileReader;
#endif 	/* __IRdcFileReader_FWD_DEFINED__ */


#ifndef __IRdcFileWriter_FWD_DEFINED__
#define __IRdcFileWriter_FWD_DEFINED__
typedef interface IRdcFileWriter IRdcFileWriter;
#endif 	/* __IRdcFileWriter_FWD_DEFINED__ */


#ifndef __IRdcSignatureReader_FWD_DEFINED__
#define __IRdcSignatureReader_FWD_DEFINED__
typedef interface IRdcSignatureReader IRdcSignatureReader;
#endif 	/* __IRdcSignatureReader_FWD_DEFINED__ */


#ifndef __IRdcComparator_FWD_DEFINED__
#define __IRdcComparator_FWD_DEFINED__
typedef interface IRdcComparator IRdcComparator;
#endif 	/* __IRdcComparator_FWD_DEFINED__ */


#ifndef __IRdcLibrary_FWD_DEFINED__
#define __IRdcLibrary_FWD_DEFINED__
typedef interface IRdcLibrary IRdcLibrary;
#endif 	/* __IRdcLibrary_FWD_DEFINED__ */


#ifndef __ISimilarityReportProgress_FWD_DEFINED__
#define __ISimilarityReportProgress_FWD_DEFINED__
typedef interface ISimilarityReportProgress ISimilarityReportProgress;
#endif 	/* __ISimilarityReportProgress_FWD_DEFINED__ */


#ifndef __ISimilarityTableDumpState_FWD_DEFINED__
#define __ISimilarityTableDumpState_FWD_DEFINED__
typedef interface ISimilarityTableDumpState ISimilarityTableDumpState;
#endif 	/* __ISimilarityTableDumpState_FWD_DEFINED__ */


#ifndef __ISimilarityTraitsMappedView_FWD_DEFINED__
#define __ISimilarityTraitsMappedView_FWD_DEFINED__
typedef interface ISimilarityTraitsMappedView ISimilarityTraitsMappedView;
#endif 	/* __ISimilarityTraitsMappedView_FWD_DEFINED__ */


#ifndef __ISimilarityTraitsMapping_FWD_DEFINED__
#define __ISimilarityTraitsMapping_FWD_DEFINED__
typedef interface ISimilarityTraitsMapping ISimilarityTraitsMapping;
#endif 	/* __ISimilarityTraitsMapping_FWD_DEFINED__ */


#ifndef __ISimilarityTraitsTable_FWD_DEFINED__
#define __ISimilarityTraitsTable_FWD_DEFINED__
typedef interface ISimilarityTraitsTable ISimilarityTraitsTable;
#endif 	/* __ISimilarityTraitsTable_FWD_DEFINED__ */


#ifndef __ISimilarityFileIdTable_FWD_DEFINED__
#define __ISimilarityFileIdTable_FWD_DEFINED__
typedef interface ISimilarityFileIdTable ISimilarityFileIdTable;
#endif 	/* __ISimilarityFileIdTable_FWD_DEFINED__ */


#ifndef __IRdcSimilarityGenerator_FWD_DEFINED__
#define __IRdcSimilarityGenerator_FWD_DEFINED__
typedef interface IRdcSimilarityGenerator IRdcSimilarityGenerator;
#endif 	/* __IRdcSimilarityGenerator_FWD_DEFINED__ */


#ifndef __IFindSimilarResults_FWD_DEFINED__
#define __IFindSimilarResults_FWD_DEFINED__
typedef interface IFindSimilarResults IFindSimilarResults;
#endif 	/* __IFindSimilarResults_FWD_DEFINED__ */


#ifndef __ISimilarity_FWD_DEFINED__
#define __ISimilarity_FWD_DEFINED__
typedef interface ISimilarity ISimilarity;
#endif 	/* __ISimilarity_FWD_DEFINED__ */


#ifndef __RdcLibrary_FWD_DEFINED__
#define __RdcLibrary_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcLibrary RdcLibrary;
#else
typedef struct RdcLibrary RdcLibrary;
#endif /* __cplusplus */

#endif 	/* __RdcLibrary_FWD_DEFINED__ */


#ifndef __RdcGeneratorParameters_FWD_DEFINED__
#define __RdcGeneratorParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcGeneratorParameters RdcGeneratorParameters;
#else
typedef struct RdcGeneratorParameters RdcGeneratorParameters;
#endif /* __cplusplus */

#endif 	/* __RdcGeneratorParameters_FWD_DEFINED__ */


#ifndef __RdcGeneratorFilterMaxParameters_FWD_DEFINED__
#define __RdcGeneratorFilterMaxParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcGeneratorFilterMaxParameters RdcGeneratorFilterMaxParameters;
#else
typedef struct RdcGeneratorFilterMaxParameters RdcGeneratorFilterMaxParameters;
#endif /* __cplusplus */

#endif 	/* __RdcGeneratorFilterMaxParameters_FWD_DEFINED__ */


#ifndef __RdcGenerator_FWD_DEFINED__
#define __RdcGenerator_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcGenerator RdcGenerator;
#else
typedef struct RdcGenerator RdcGenerator;
#endif /* __cplusplus */

#endif 	/* __RdcGenerator_FWD_DEFINED__ */


#ifndef __RdcFileReader_FWD_DEFINED__
#define __RdcFileReader_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcFileReader RdcFileReader;
#else
typedef struct RdcFileReader RdcFileReader;
#endif /* __cplusplus */

#endif 	/* __RdcFileReader_FWD_DEFINED__ */


#ifndef __RdcSignatureReader_FWD_DEFINED__
#define __RdcSignatureReader_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcSignatureReader RdcSignatureReader;
#else
typedef struct RdcSignatureReader RdcSignatureReader;
#endif /* __cplusplus */

#endif 	/* __RdcSignatureReader_FWD_DEFINED__ */


#ifndef __RdcComparator_FWD_DEFINED__
#define __RdcComparator_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcComparator RdcComparator;
#else
typedef struct RdcComparator RdcComparator;
#endif /* __cplusplus */

#endif 	/* __RdcComparator_FWD_DEFINED__ */


#ifndef __SimilarityReportProgress_FWD_DEFINED__
#define __SimilarityReportProgress_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityReportProgress SimilarityReportProgress;
#else
typedef struct SimilarityReportProgress SimilarityReportProgress;
#endif /* __cplusplus */

#endif 	/* __SimilarityReportProgress_FWD_DEFINED__ */


#ifndef __SimilarityTableDumpState_FWD_DEFINED__
#define __SimilarityTableDumpState_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityTableDumpState SimilarityTableDumpState;
#else
typedef struct SimilarityTableDumpState SimilarityTableDumpState;
#endif /* __cplusplus */

#endif 	/* __SimilarityTableDumpState_FWD_DEFINED__ */


#ifndef __SimilarityTraitsTable_FWD_DEFINED__
#define __SimilarityTraitsTable_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityTraitsTable SimilarityTraitsTable;
#else
typedef struct SimilarityTraitsTable SimilarityTraitsTable;
#endif /* __cplusplus */

#endif 	/* __SimilarityTraitsTable_FWD_DEFINED__ */


#ifndef __SimilarityFileIdTable_FWD_DEFINED__
#define __SimilarityFileIdTable_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityFileIdTable SimilarityFileIdTable;
#else
typedef struct SimilarityFileIdTable SimilarityFileIdTable;
#endif /* __cplusplus */

#endif 	/* __SimilarityFileIdTable_FWD_DEFINED__ */


#ifndef __Similarity_FWD_DEFINED__
#define __Similarity_FWD_DEFINED__

#ifdef __cplusplus
typedef class Similarity Similarity;
#else
typedef struct Similarity Similarity;
#endif /* __cplusplus */

#endif 	/* __Similarity_FWD_DEFINED__ */


#ifndef __RdcSimilarityGenerator_FWD_DEFINED__
#define __RdcSimilarityGenerator_FWD_DEFINED__

#ifdef __cplusplus
typedef class RdcSimilarityGenerator RdcSimilarityGenerator;
#else
typedef struct RdcSimilarityGenerator RdcSimilarityGenerator;
#endif /* __cplusplus */

#endif 	/* __RdcSimilarityGenerator_FWD_DEFINED__ */


#ifndef __FindSimilarResults_FWD_DEFINED__
#define __FindSimilarResults_FWD_DEFINED__

#ifdef __cplusplus
typedef class FindSimilarResults FindSimilarResults;
#else
typedef struct FindSimilarResults FindSimilarResults;
#endif /* __cplusplus */

#endif 	/* __FindSimilarResults_FWD_DEFINED__ */


#ifndef __SimilarityTraitsMapping_FWD_DEFINED__
#define __SimilarityTraitsMapping_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityTraitsMapping SimilarityTraitsMapping;
#else
typedef struct SimilarityTraitsMapping SimilarityTraitsMapping;
#endif /* __cplusplus */

#endif 	/* __SimilarityTraitsMapping_FWD_DEFINED__ */


#ifndef __SimilarityTraitsMappedView_FWD_DEFINED__
#define __SimilarityTraitsMappedView_FWD_DEFINED__

#ifdef __cplusplus
typedef class SimilarityTraitsMappedView SimilarityTraitsMappedView;
#else
typedef struct SimilarityTraitsMappedView SimilarityTraitsMappedView;
#endif /* __cplusplus */

#endif 	/* __SimilarityTraitsMappedView_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msrdc_0000_0000 */
/* [local] */ 

#define	RDCE_TABLE_FULL	( 0x80040001 )

#define	RDCE_TABLE_CORRUPT	( 0x80040002 )

#pragma warning( disable: 4100 )
#pragma warning( disable: 4152 )
const ULONG MSRDC_VERSION = 0x010000;
const ULONG MSRDC_MINIMUM_COMPATIBLE_APP_VERSION = 0x010000;
const ULONG MSRDC_MINIMUM_DEPTH = 1;
const ULONG MSRDC_MAXIMUM_DEPTH = 8;
const ULONG MSRDC_MINIMUM_COMPAREBUFFER = 100000;
const ULONG MSRDC_MAXIMUM_COMPAREBUFFER = (1<<30);
const ULONG MSRDC_DEFAULT_COMPAREBUFFER = 3200000;
const ULONG MSRDC_MINIMUM_INPUTBUFFERSIZE = 1024;
#define	MSRDC_SIGNATURE_HASHSIZE	( 16 )

const ULONG MSRDC_MINIMUM_HORIZONSIZE = 128;
const ULONG MSRDC_MAXIMUM_HORIZONSIZE = 1024 * 16;
const ULONG MSRDC_MINIMUM_HASHWINDOWSIZE = 2;
const ULONG MSRDC_MAXIMUM_HASHWINDOWSIZE = 96;
const ULONG MSRDC_DEFAULT_HASHWINDOWSIZE_1 = 48;
const ULONG MSRDC_DEFAULT_HORIZONSIZE_1    = 1024;
const ULONG MSRDC_DEFAULT_HASHWINDOWSIZE_N = 2;
const ULONG MSRDC_DEFAULT_HORIZONSIZE_N    = 128;
const ULONG MSRDC_MAXIMUM_TRAITVALUE = 63;
const ULONG MSRDC_MINIMUM_MATCHESREQUIRED = 1;
const ULONG MSRDC_MAXIMUM_MATCHESREQUIRED = 16;
typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msrdc_0000_0000_0001
    {	RDC_NoError	= 0,
	RDC_HeaderVersionNewer	= ( RDC_NoError + 1 ) ,
	RDC_HeaderVersionOlder	= ( RDC_HeaderVersionNewer + 1 ) ,
	RDC_HeaderMissingOrCorrupt	= ( RDC_HeaderVersionOlder + 1 ) ,
	RDC_HeaderWrongType	= ( RDC_HeaderMissingOrCorrupt + 1 ) ,
	RDC_DataMissingOrCorrupt	= ( RDC_HeaderWrongType + 1 ) ,
	RDC_DataTooManyRecords	= ( RDC_DataMissingOrCorrupt + 1 ) ,
	RDC_FileChecksumMismatch	= ( RDC_DataTooManyRecords + 1 ) ,
	RDC_ApplicationError	= ( RDC_FileChecksumMismatch + 1 ) ,
	RDC_Aborted	= ( RDC_ApplicationError + 1 ) ,
	RDC_Win32Error	= ( RDC_Aborted + 1 ) 
    } 	RDC_ErrorCode;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msrdc_0000_0000_0002
    {	RDCGENTYPE_Unused	= 0,
	RDCGENTYPE_FilterMax	= ( RDCGENTYPE_Unused + 1 ) 
    } 	GeneratorParametersType;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msrdc_0000_0000_0003
    {	RDCNEED_SOURCE	= 0,
	RDCNEED_TARGET	= 1,
	RDCNEED_SEED	= 2,
	RDCNEED_SEED_MAX	= 255
    } 	RdcNeedType;

typedef /* [public][public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0004
    {
    RdcNeedType m_BlockType;
    unsigned __int64 m_FileOffset;
    unsigned __int64 m_BlockLength;
    } 	RdcNeed;

typedef /* [public][public][public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0005
    {
    ULONG m_Size;
    ULONG m_Used;
    BYTE *m_Data;
    } 	RdcBufferPointer;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0006
    {
    ULONG m_Size;
    ULONG m_Used;
    RdcNeed *m_Data;
    } 	RdcNeedPointer;

typedef /* [public][public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0007
    {
    BYTE m_Signature[ 16 ];
    USHORT m_BlockLength;
    } 	RdcSignature;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0008
    {
    ULONG m_Size;
    ULONG m_Used;
    RdcSignature *m_Data;
    } 	RdcSignaturePointer;

typedef unsigned int SimilarityFileIndexT;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msrdc_0000_0000_0009
    {	RDCTABLE_InvalidOrUnknown	= 0,
	RDCTABLE_Existing	= ( RDCTABLE_InvalidOrUnknown + 1 ) ,
	RDCTABLE_New	= ( RDCTABLE_Existing + 1 ) 
    } 	RdcCreatedTables;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msrdc_0000_0000_0010
    {	RDCMAPPING_Undefined	= 0,
	RDCMAPPING_ReadOnly	= ( RDCMAPPING_Undefined + 1 ) ,
	RDCMAPPING_ReadWrite	= ( RDCMAPPING_ReadOnly + 1 ) 
    } 	RdcMappingAccessMode;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0011
    {
    unsigned char *m_Data;
    DWORD m_Length;
    } 	SimilarityMappedViewInfo;

typedef /* [public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0012
    {
    unsigned char m_Data[ 16 ];
    } 	SimilarityData;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0013
    {
    SimilarityFileIndexT m_FileIndex;
    unsigned int m_MatchCount;
    } 	FindSimilarFileIndexResults;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0014
    {
    SimilarityFileIndexT m_FileIndex;
    SimilarityData m_Data;
    } 	SimilarityDumpData;

#define	SimilarityFileIdMinSize	( 4 )

#define	SimilarityFileIdMaxSize	( 32 )

typedef /* [public][public][public][public][public] */ struct __MIDL___MIDL_itf_msrdc_0000_0000_0015
    {
    byte m_FileId[ 32 ];
    } 	SimilarityFileId;



extern RPC_IF_HANDLE __MIDL_itf_msrdc_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msrdc_0000_0000_v0_0_s_ifspec;

#ifndef __IRdcGeneratorParameters_INTERFACE_DEFINED__
#define __IRdcGeneratorParameters_INTERFACE_DEFINED__

/* interface IRdcGeneratorParameters */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRdcGeneratorParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A71-9DBC-11DA-9E3F-0011114AE311")
    IRdcGeneratorParameters : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetGeneratorParametersType( 
            /* [out] */ __RPC__out GeneratorParametersType *parametersType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetParametersVersion( 
            /* [out] */ __RPC__out ULONG *currentVersion,
            /* [out] */ __RPC__out ULONG *minimumCompatibleAppVersion) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSerializeSize( 
            /* [out] */ __RPC__out ULONG *size) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Serialize( 
            /* [in] */ ULONG size,
            /* [out] */ __RPC__out BYTE *parametersBlob,
            /* [out] */ __RPC__out ULONG *bytesWritten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcGeneratorParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IRdcGeneratorParameters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IRdcGeneratorParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IRdcGeneratorParameters * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetGeneratorParametersType )( 
            __RPC__in IRdcGeneratorParameters * This,
            /* [out] */ __RPC__out GeneratorParametersType *parametersType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParametersVersion )( 
            __RPC__in IRdcGeneratorParameters * This,
            /* [out] */ __RPC__out ULONG *currentVersion,
            /* [out] */ __RPC__out ULONG *minimumCompatibleAppVersion);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSerializeSize )( 
            __RPC__in IRdcGeneratorParameters * This,
            /* [out] */ __RPC__out ULONG *size);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            __RPC__in IRdcGeneratorParameters * This,
            /* [in] */ ULONG size,
            /* [out] */ __RPC__out BYTE *parametersBlob,
            /* [out] */ __RPC__out ULONG *bytesWritten);
        
        END_INTERFACE
    } IRdcGeneratorParametersVtbl;

    interface IRdcGeneratorParameters
    {
        CONST_VTBL struct IRdcGeneratorParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcGeneratorParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcGeneratorParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcGeneratorParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcGeneratorParameters_GetGeneratorParametersType(This,parametersType)	\
    ( (This)->lpVtbl -> GetGeneratorParametersType(This,parametersType) ) 

#define IRdcGeneratorParameters_GetParametersVersion(This,currentVersion,minimumCompatibleAppVersion)	\
    ( (This)->lpVtbl -> GetParametersVersion(This,currentVersion,minimumCompatibleAppVersion) ) 

#define IRdcGeneratorParameters_GetSerializeSize(This,size)	\
    ( (This)->lpVtbl -> GetSerializeSize(This,size) ) 

#define IRdcGeneratorParameters_Serialize(This,size,parametersBlob,bytesWritten)	\
    ( (This)->lpVtbl -> Serialize(This,size,parametersBlob,bytesWritten) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcGeneratorParameters_INTERFACE_DEFINED__ */


#ifndef __IRdcGeneratorFilterMaxParameters_INTERFACE_DEFINED__
#define __IRdcGeneratorFilterMaxParameters_INTERFACE_DEFINED__

/* interface IRdcGeneratorFilterMaxParameters */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcGeneratorFilterMaxParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A72-9DBC-11DA-9E3F-0011114AE311")
    IRdcGeneratorFilterMaxParameters : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetHorizonSize( 
            /* [out] */ ULONG *horizonSize) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetHorizonSize( 
            /* [in] */ ULONG horizonSize) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetHashWindowSize( 
            /* [out] */ ULONG *hashWindowSize) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetHashWindowSize( 
            /* [in] */ ULONG hashWindowSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcGeneratorFilterMaxParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcGeneratorFilterMaxParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcGeneratorFilterMaxParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcGeneratorFilterMaxParameters * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHorizonSize )( 
            IRdcGeneratorFilterMaxParameters * This,
            /* [out] */ ULONG *horizonSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetHorizonSize )( 
            IRdcGeneratorFilterMaxParameters * This,
            /* [in] */ ULONG horizonSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHashWindowSize )( 
            IRdcGeneratorFilterMaxParameters * This,
            /* [out] */ ULONG *hashWindowSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetHashWindowSize )( 
            IRdcGeneratorFilterMaxParameters * This,
            /* [in] */ ULONG hashWindowSize);
        
        END_INTERFACE
    } IRdcGeneratorFilterMaxParametersVtbl;

    interface IRdcGeneratorFilterMaxParameters
    {
        CONST_VTBL struct IRdcGeneratorFilterMaxParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcGeneratorFilterMaxParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcGeneratorFilterMaxParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcGeneratorFilterMaxParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcGeneratorFilterMaxParameters_GetHorizonSize(This,horizonSize)	\
    ( (This)->lpVtbl -> GetHorizonSize(This,horizonSize) ) 

#define IRdcGeneratorFilterMaxParameters_SetHorizonSize(This,horizonSize)	\
    ( (This)->lpVtbl -> SetHorizonSize(This,horizonSize) ) 

#define IRdcGeneratorFilterMaxParameters_GetHashWindowSize(This,hashWindowSize)	\
    ( (This)->lpVtbl -> GetHashWindowSize(This,hashWindowSize) ) 

#define IRdcGeneratorFilterMaxParameters_SetHashWindowSize(This,hashWindowSize)	\
    ( (This)->lpVtbl -> SetHashWindowSize(This,hashWindowSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcGeneratorFilterMaxParameters_INTERFACE_DEFINED__ */


#ifndef __IRdcGenerator_INTERFACE_DEFINED__
#define __IRdcGenerator_INTERFACE_DEFINED__

/* interface IRdcGenerator */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcGenerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A73-9DBC-11DA-9E3F-0011114AE311")
    IRdcGenerator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetGeneratorParameters( 
            /* [in] */ ULONG level,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Process( 
            /* [in] */ BOOL endOfInput,
            /* [out] */ BOOL *endOfOutput,
            /* [out][in] */ RdcBufferPointer *inputBuffer,
            /* [in] */ ULONG depth,
            /* [size_is][out] */ RdcBufferPointer *outputBuffers[  ],
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcGeneratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcGenerator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcGenerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcGenerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetGeneratorParameters )( 
            IRdcGenerator * This,
            /* [in] */ ULONG level,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Process )( 
            IRdcGenerator * This,
            /* [in] */ BOOL endOfInput,
            /* [out] */ BOOL *endOfOutput,
            /* [out][in] */ RdcBufferPointer *inputBuffer,
            /* [in] */ ULONG depth,
            /* [size_is][out] */ RdcBufferPointer *outputBuffers[  ],
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode);
        
        END_INTERFACE
    } IRdcGeneratorVtbl;

    interface IRdcGenerator
    {
        CONST_VTBL struct IRdcGeneratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcGenerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcGenerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcGenerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcGenerator_GetGeneratorParameters(This,level,iGeneratorParameters)	\
    ( (This)->lpVtbl -> GetGeneratorParameters(This,level,iGeneratorParameters) ) 

#define IRdcGenerator_Process(This,endOfInput,endOfOutput,inputBuffer,depth,outputBuffers,rdc_ErrorCode)	\
    ( (This)->lpVtbl -> Process(This,endOfInput,endOfOutput,inputBuffer,depth,outputBuffers,rdc_ErrorCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcGenerator_INTERFACE_DEFINED__ */


#ifndef __IRdcFileReader_INTERFACE_DEFINED__
#define __IRdcFileReader_INTERFACE_DEFINED__

/* interface IRdcFileReader */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcFileReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A74-9DBC-11DA-9E3F-0011114AE311")
    IRdcFileReader : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetFileSize( 
            /* [out] */ ULONGLONG *fileSize) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ ULONGLONG offsetFileStart,
            /* [in] */ ULONG bytesToRead,
            /* [out] */ ULONG *bytesActuallyRead,
            /* [out] */ BYTE *buffer,
            /* [out] */ BOOL *eof) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetFilePosition( 
            /* [out] */ ULONGLONG *offsetFromStart) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcFileReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcFileReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcFileReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcFileReader * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFileSize )( 
            IRdcFileReader * This,
            /* [out] */ ULONGLONG *fileSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Read )( 
            IRdcFileReader * This,
            /* [in] */ ULONGLONG offsetFileStart,
            /* [in] */ ULONG bytesToRead,
            /* [out] */ ULONG *bytesActuallyRead,
            /* [out] */ BYTE *buffer,
            /* [out] */ BOOL *eof);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFilePosition )( 
            IRdcFileReader * This,
            /* [out] */ ULONGLONG *offsetFromStart);
        
        END_INTERFACE
    } IRdcFileReaderVtbl;

    interface IRdcFileReader
    {
        CONST_VTBL struct IRdcFileReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcFileReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcFileReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcFileReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcFileReader_GetFileSize(This,fileSize)	\
    ( (This)->lpVtbl -> GetFileSize(This,fileSize) ) 

#define IRdcFileReader_Read(This,offsetFileStart,bytesToRead,bytesActuallyRead,buffer,eof)	\
    ( (This)->lpVtbl -> Read(This,offsetFileStart,bytesToRead,bytesActuallyRead,buffer,eof) ) 

#define IRdcFileReader_GetFilePosition(This,offsetFromStart)	\
    ( (This)->lpVtbl -> GetFilePosition(This,offsetFromStart) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcFileReader_INTERFACE_DEFINED__ */


#ifndef __IRdcFileWriter_INTERFACE_DEFINED__
#define __IRdcFileWriter_INTERFACE_DEFINED__

/* interface IRdcFileWriter */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcFileWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A75-9DBC-11DA-9E3F-0011114AE311")
    IRdcFileWriter : public IRdcFileReader
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Write( 
            /* [in] */ ULONGLONG offsetFileStart,
            /* [in] */ ULONG bytesToWrite,
            /* [out] */ BYTE *buffer) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Truncate( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DeleteOnClose( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcFileWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcFileWriter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcFileWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcFileWriter * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFileSize )( 
            IRdcFileWriter * This,
            /* [out] */ ULONGLONG *fileSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Read )( 
            IRdcFileWriter * This,
            /* [in] */ ULONGLONG offsetFileStart,
            /* [in] */ ULONG bytesToRead,
            /* [out] */ ULONG *bytesActuallyRead,
            /* [out] */ BYTE *buffer,
            /* [out] */ BOOL *eof);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFilePosition )( 
            IRdcFileWriter * This,
            /* [out] */ ULONGLONG *offsetFromStart);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Write )( 
            IRdcFileWriter * This,
            /* [in] */ ULONGLONG offsetFileStart,
            /* [in] */ ULONG bytesToWrite,
            /* [out] */ BYTE *buffer);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Truncate )( 
            IRdcFileWriter * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteOnClose )( 
            IRdcFileWriter * This);
        
        END_INTERFACE
    } IRdcFileWriterVtbl;

    interface IRdcFileWriter
    {
        CONST_VTBL struct IRdcFileWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcFileWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcFileWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcFileWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcFileWriter_GetFileSize(This,fileSize)	\
    ( (This)->lpVtbl -> GetFileSize(This,fileSize) ) 

#define IRdcFileWriter_Read(This,offsetFileStart,bytesToRead,bytesActuallyRead,buffer,eof)	\
    ( (This)->lpVtbl -> Read(This,offsetFileStart,bytesToRead,bytesActuallyRead,buffer,eof) ) 

#define IRdcFileWriter_GetFilePosition(This,offsetFromStart)	\
    ( (This)->lpVtbl -> GetFilePosition(This,offsetFromStart) ) 


#define IRdcFileWriter_Write(This,offsetFileStart,bytesToWrite,buffer)	\
    ( (This)->lpVtbl -> Write(This,offsetFileStart,bytesToWrite,buffer) ) 

#define IRdcFileWriter_Truncate(This)	\
    ( (This)->lpVtbl -> Truncate(This) ) 

#define IRdcFileWriter_DeleteOnClose(This)	\
    ( (This)->lpVtbl -> DeleteOnClose(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcFileWriter_INTERFACE_DEFINED__ */


#ifndef __IRdcSignatureReader_INTERFACE_DEFINED__
#define __IRdcSignatureReader_INTERFACE_DEFINED__

/* interface IRdcSignatureReader */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcSignatureReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A76-9DBC-11DA-9E3F-0011114AE311")
    IRdcSignatureReader : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ReadHeader( 
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ReadSignatures( 
            /* [out][in] */ RdcSignaturePointer *rdcSignaturePointer,
            /* [out] */ BOOL *endOfOutput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcSignatureReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcSignatureReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcSignatureReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcSignatureReader * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReadHeader )( 
            IRdcSignatureReader * This,
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReadSignatures )( 
            IRdcSignatureReader * This,
            /* [out][in] */ RdcSignaturePointer *rdcSignaturePointer,
            /* [out] */ BOOL *endOfOutput);
        
        END_INTERFACE
    } IRdcSignatureReaderVtbl;

    interface IRdcSignatureReader
    {
        CONST_VTBL struct IRdcSignatureReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcSignatureReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcSignatureReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcSignatureReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcSignatureReader_ReadHeader(This,rdc_ErrorCode)	\
    ( (This)->lpVtbl -> ReadHeader(This,rdc_ErrorCode) ) 

#define IRdcSignatureReader_ReadSignatures(This,rdcSignaturePointer,endOfOutput)	\
    ( (This)->lpVtbl -> ReadSignatures(This,rdcSignaturePointer,endOfOutput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcSignatureReader_INTERFACE_DEFINED__ */


#ifndef __IRdcComparator_INTERFACE_DEFINED__
#define __IRdcComparator_INTERFACE_DEFINED__

/* interface IRdcComparator */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcComparator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A77-9DBC-11DA-9E3F-0011114AE311")
    IRdcComparator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Process( 
            /* [in] */ BOOL endOfInput,
            /* [out] */ BOOL *endOfOutput,
            /* [out][in] */ RdcBufferPointer *inputBuffer,
            /* [out][in] */ RdcNeedPointer *outputBuffer,
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcComparatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcComparator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcComparator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcComparator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Process )( 
            IRdcComparator * This,
            /* [in] */ BOOL endOfInput,
            /* [out] */ BOOL *endOfOutput,
            /* [out][in] */ RdcBufferPointer *inputBuffer,
            /* [out][in] */ RdcNeedPointer *outputBuffer,
            /* [out] */ RDC_ErrorCode *rdc_ErrorCode);
        
        END_INTERFACE
    } IRdcComparatorVtbl;

    interface IRdcComparator
    {
        CONST_VTBL struct IRdcComparatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcComparator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcComparator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcComparator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcComparator_Process(This,endOfInput,endOfOutput,inputBuffer,outputBuffer,rdc_ErrorCode)	\
    ( (This)->lpVtbl -> Process(This,endOfInput,endOfOutput,inputBuffer,outputBuffer,rdc_ErrorCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcComparator_INTERFACE_DEFINED__ */


#ifndef __IRdcLibrary_INTERFACE_DEFINED__
#define __IRdcLibrary_INTERFACE_DEFINED__

/* interface IRdcLibrary */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcLibrary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A78-9DBC-11DA-9E3F-0011114AE311")
    IRdcLibrary : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ComputeDefaultRecursionDepth( 
            /* [in] */ ULONGLONG fileSize,
            /* [out] */ ULONG *depth) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateGeneratorParameters( 
            /* [in] */ GeneratorParametersType parametersType,
            /* [in] */ ULONG level,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OpenGeneratorParameters( 
            /* [in] */ ULONG size,
            /* [in] */ const BYTE *parametersBlob,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateGenerator( 
            /* [in] */ ULONG depth,
            /* [size_is][in] */ IRdcGeneratorParameters *iGeneratorParametersArray[  ],
            /* [out] */ IRdcGenerator **iGenerator) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateComparator( 
            /* [in] */ IRdcFileReader *iSeedSignaturesFile,
            /* [in] */ ULONG comparatorBufferSize,
            /* [out] */ IRdcComparator **iComparator) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateSignatureReader( 
            /* [in] */ IRdcFileReader *iFileReader,
            /* [out] */ IRdcSignatureReader **iSignatureReader) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetRDCVersion( 
            /* [out] */ ULONG *currentVersion,
            /* [out] */ ULONG *minimumCompatibleAppVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcLibraryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcLibrary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcLibrary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcLibrary * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ComputeDefaultRecursionDepth )( 
            IRdcLibrary * This,
            /* [in] */ ULONGLONG fileSize,
            /* [out] */ ULONG *depth);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateGeneratorParameters )( 
            IRdcLibrary * This,
            /* [in] */ GeneratorParametersType parametersType,
            /* [in] */ ULONG level,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OpenGeneratorParameters )( 
            IRdcLibrary * This,
            /* [in] */ ULONG size,
            /* [in] */ const BYTE *parametersBlob,
            /* [out] */ IRdcGeneratorParameters **iGeneratorParameters);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateGenerator )( 
            IRdcLibrary * This,
            /* [in] */ ULONG depth,
            /* [size_is][in] */ IRdcGeneratorParameters *iGeneratorParametersArray[  ],
            /* [out] */ IRdcGenerator **iGenerator);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateComparator )( 
            IRdcLibrary * This,
            /* [in] */ IRdcFileReader *iSeedSignaturesFile,
            /* [in] */ ULONG comparatorBufferSize,
            /* [out] */ IRdcComparator **iComparator);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateSignatureReader )( 
            IRdcLibrary * This,
            /* [in] */ IRdcFileReader *iFileReader,
            /* [out] */ IRdcSignatureReader **iSignatureReader);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRDCVersion )( 
            IRdcLibrary * This,
            /* [out] */ ULONG *currentVersion,
            /* [out] */ ULONG *minimumCompatibleAppVersion);
        
        END_INTERFACE
    } IRdcLibraryVtbl;

    interface IRdcLibrary
    {
        CONST_VTBL struct IRdcLibraryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcLibrary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcLibrary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcLibrary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcLibrary_ComputeDefaultRecursionDepth(This,fileSize,depth)	\
    ( (This)->lpVtbl -> ComputeDefaultRecursionDepth(This,fileSize,depth) ) 

#define IRdcLibrary_CreateGeneratorParameters(This,parametersType,level,iGeneratorParameters)	\
    ( (This)->lpVtbl -> CreateGeneratorParameters(This,parametersType,level,iGeneratorParameters) ) 

#define IRdcLibrary_OpenGeneratorParameters(This,size,parametersBlob,iGeneratorParameters)	\
    ( (This)->lpVtbl -> OpenGeneratorParameters(This,size,parametersBlob,iGeneratorParameters) ) 

#define IRdcLibrary_CreateGenerator(This,depth,iGeneratorParametersArray,iGenerator)	\
    ( (This)->lpVtbl -> CreateGenerator(This,depth,iGeneratorParametersArray,iGenerator) ) 

#define IRdcLibrary_CreateComparator(This,iSeedSignaturesFile,comparatorBufferSize,iComparator)	\
    ( (This)->lpVtbl -> CreateComparator(This,iSeedSignaturesFile,comparatorBufferSize,iComparator) ) 

#define IRdcLibrary_CreateSignatureReader(This,iFileReader,iSignatureReader)	\
    ( (This)->lpVtbl -> CreateSignatureReader(This,iFileReader,iSignatureReader) ) 

#define IRdcLibrary_GetRDCVersion(This,currentVersion,minimumCompatibleAppVersion)	\
    ( (This)->lpVtbl -> GetRDCVersion(This,currentVersion,minimumCompatibleAppVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcLibrary_INTERFACE_DEFINED__ */


#ifndef __ISimilarityReportProgress_INTERFACE_DEFINED__
#define __ISimilarityReportProgress_INTERFACE_DEFINED__

/* interface ISimilarityReportProgress */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityReportProgress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7A-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityReportProgress : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ReportProgress( 
            /* [in] */ DWORD percentCompleted) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityReportProgressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityReportProgress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityReportProgress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityReportProgress * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReportProgress )( 
            ISimilarityReportProgress * This,
            /* [in] */ DWORD percentCompleted);
        
        END_INTERFACE
    } ISimilarityReportProgressVtbl;

    interface ISimilarityReportProgress
    {
        CONST_VTBL struct ISimilarityReportProgressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityReportProgress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityReportProgress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityReportProgress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityReportProgress_ReportProgress(This,percentCompleted)	\
    ( (This)->lpVtbl -> ReportProgress(This,percentCompleted) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityReportProgress_INTERFACE_DEFINED__ */


#ifndef __ISimilarityTableDumpState_INTERFACE_DEFINED__
#define __ISimilarityTableDumpState_INTERFACE_DEFINED__

/* interface ISimilarityTableDumpState */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityTableDumpState;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7B-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityTableDumpState : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNextData( 
            /* [in] */ DWORD resultsSize,
            /* [out] */ DWORD *resultsUsed,
            /* [out] */ BOOL *eof,
            /* [out][in] */ SimilarityDumpData *results) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityTableDumpStateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityTableDumpState * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityTableDumpState * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityTableDumpState * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNextData )( 
            ISimilarityTableDumpState * This,
            /* [in] */ DWORD resultsSize,
            /* [out] */ DWORD *resultsUsed,
            /* [out] */ BOOL *eof,
            /* [out][in] */ SimilarityDumpData *results);
        
        END_INTERFACE
    } ISimilarityTableDumpStateVtbl;

    interface ISimilarityTableDumpState
    {
        CONST_VTBL struct ISimilarityTableDumpStateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityTableDumpState_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityTableDumpState_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityTableDumpState_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityTableDumpState_GetNextData(This,resultsSize,resultsUsed,eof,results)	\
    ( (This)->lpVtbl -> GetNextData(This,resultsSize,resultsUsed,eof,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityTableDumpState_INTERFACE_DEFINED__ */


#ifndef __ISimilarityTraitsMappedView_INTERFACE_DEFINED__
#define __ISimilarityTraitsMappedView_INTERFACE_DEFINED__

/* interface ISimilarityTraitsMappedView */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityTraitsMappedView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7C-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityTraitsMappedView : public IUnknown
    {
    public:
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE Unmap( void) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ unsigned __int64 index,
            /* [in] */ BOOL dirty,
            /* [in] */ DWORD numElements,
            /* [out] */ SimilarityMappedViewInfo *viewInfo) = 0;
        
        virtual /* [local][helpstring] */ void STDMETHODCALLTYPE GetView( 
            /* [out] */ const unsigned char **mappedPageBegin,
            /* [out] */ const unsigned char **mappedPageEnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityTraitsMappedViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityTraitsMappedView * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityTraitsMappedView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityTraitsMappedView * This);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Flush )( 
            ISimilarityTraitsMappedView * This);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Unmap )( 
            ISimilarityTraitsMappedView * This);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            ISimilarityTraitsMappedView * This,
            /* [in] */ unsigned __int64 index,
            /* [in] */ BOOL dirty,
            /* [in] */ DWORD numElements,
            /* [out] */ SimilarityMappedViewInfo *viewInfo);
        
        /* [local][helpstring] */ void ( STDMETHODCALLTYPE *GetView )( 
            ISimilarityTraitsMappedView * This,
            /* [out] */ const unsigned char **mappedPageBegin,
            /* [out] */ const unsigned char **mappedPageEnd);
        
        END_INTERFACE
    } ISimilarityTraitsMappedViewVtbl;

    interface ISimilarityTraitsMappedView
    {
        CONST_VTBL struct ISimilarityTraitsMappedViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityTraitsMappedView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityTraitsMappedView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityTraitsMappedView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityTraitsMappedView_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 

#define ISimilarityTraitsMappedView_Unmap(This)	\
    ( (This)->lpVtbl -> Unmap(This) ) 

#define ISimilarityTraitsMappedView_Get(This,index,dirty,numElements,viewInfo)	\
    ( (This)->lpVtbl -> Get(This,index,dirty,numElements,viewInfo) ) 

#define ISimilarityTraitsMappedView_GetView(This,mappedPageBegin,mappedPageEnd)	\
    ( (This)->lpVtbl -> GetView(This,mappedPageBegin,mappedPageEnd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityTraitsMappedView_INTERFACE_DEFINED__ */


#ifndef __ISimilarityTraitsMapping_INTERFACE_DEFINED__
#define __ISimilarityTraitsMapping_INTERFACE_DEFINED__

/* interface ISimilarityTraitsMapping */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityTraitsMapping;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7D-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityTraitsMapping : public IUnknown
    {
    public:
        virtual /* [local][helpstring] */ void STDMETHODCALLTYPE CloseMapping( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetFileSize( 
            /* [in] */ unsigned __int64 fileSize) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE GetFileSize( 
            /* [out] */ unsigned __int64 *fileSize) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE OpenMapping( 
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [in] */ unsigned __int64 begin,
            /* [in] */ unsigned __int64 end,
            /* [out] */ unsigned __int64 *actualEnd) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE ResizeMapping( 
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [in] */ unsigned __int64 begin,
            /* [in] */ unsigned __int64 end,
            /* [out] */ unsigned __int64 *actualEnd) = 0;
        
        virtual /* [local][helpstring] */ void STDMETHODCALLTYPE GetPageSize( 
            /* [out] */ DWORD *pageSize) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateView( 
            /* [in] */ DWORD minimumMappedPages,
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [out] */ ISimilarityTraitsMappedView **mappedView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityTraitsMappingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityTraitsMapping * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityTraitsMapping * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityTraitsMapping * This);
        
        /* [local][helpstring] */ void ( STDMETHODCALLTYPE *CloseMapping )( 
            ISimilarityTraitsMapping * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetFileSize )( 
            ISimilarityTraitsMapping * This,
            /* [in] */ unsigned __int64 fileSize);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFileSize )( 
            ISimilarityTraitsMapping * This,
            /* [out] */ unsigned __int64 *fileSize);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *OpenMapping )( 
            ISimilarityTraitsMapping * This,
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [in] */ unsigned __int64 begin,
            /* [in] */ unsigned __int64 end,
            /* [out] */ unsigned __int64 *actualEnd);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ResizeMapping )( 
            ISimilarityTraitsMapping * This,
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [in] */ unsigned __int64 begin,
            /* [in] */ unsigned __int64 end,
            /* [out] */ unsigned __int64 *actualEnd);
        
        /* [local][helpstring] */ void ( STDMETHODCALLTYPE *GetPageSize )( 
            ISimilarityTraitsMapping * This,
            /* [out] */ DWORD *pageSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateView )( 
            ISimilarityTraitsMapping * This,
            /* [in] */ DWORD minimumMappedPages,
            /* [in] */ RdcMappingAccessMode accessMode,
            /* [out] */ ISimilarityTraitsMappedView **mappedView);
        
        END_INTERFACE
    } ISimilarityTraitsMappingVtbl;

    interface ISimilarityTraitsMapping
    {
        CONST_VTBL struct ISimilarityTraitsMappingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityTraitsMapping_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityTraitsMapping_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityTraitsMapping_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityTraitsMapping_CloseMapping(This)	\
    ( (This)->lpVtbl -> CloseMapping(This) ) 

#define ISimilarityTraitsMapping_SetFileSize(This,fileSize)	\
    ( (This)->lpVtbl -> SetFileSize(This,fileSize) ) 

#define ISimilarityTraitsMapping_GetFileSize(This,fileSize)	\
    ( (This)->lpVtbl -> GetFileSize(This,fileSize) ) 

#define ISimilarityTraitsMapping_OpenMapping(This,accessMode,begin,end,actualEnd)	\
    ( (This)->lpVtbl -> OpenMapping(This,accessMode,begin,end,actualEnd) ) 

#define ISimilarityTraitsMapping_ResizeMapping(This,accessMode,begin,end,actualEnd)	\
    ( (This)->lpVtbl -> ResizeMapping(This,accessMode,begin,end,actualEnd) ) 

#define ISimilarityTraitsMapping_GetPageSize(This,pageSize)	\
    ( (This)->lpVtbl -> GetPageSize(This,pageSize) ) 

#define ISimilarityTraitsMapping_CreateView(This,minimumMappedPages,accessMode,mappedView)	\
    ( (This)->lpVtbl -> CreateView(This,minimumMappedPages,accessMode,mappedView) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityTraitsMapping_INTERFACE_DEFINED__ */


#ifndef __ISimilarityTraitsTable_INTERFACE_DEFINED__
#define __ISimilarityTraitsTable_INTERFACE_DEFINED__

/* interface ISimilarityTraitsTable */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityTraitsTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7E-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityTraitsTable : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTable( 
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTableIndirect( 
            /* [in] */ ISimilarityTraitsMapping *mapping,
            /* [in] */ BOOL truncate,
            /* [out] */ RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CloseTable( 
            BOOL isValid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ SimilarityData *data,
            /* [in] */ SimilarityFileIndexT fileIndex) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FindSimilarFileIndex( 
            /* [in] */ SimilarityData *similarityData,
            /* [in] */ USHORT numberOfMatchesRequired,
            /* [out] */ FindSimilarFileIndexResults *findSimilarFileIndexResults,
            /* [in] */ DWORD resultsSize,
            /* [out] */ DWORD *resultsUsed) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE BeginDump( 
            /* [out] */ ISimilarityTableDumpState **similarityTableDumpState) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetLastIndex( 
            /* [out] */ SimilarityFileIndexT *fileIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityTraitsTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityTraitsTable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityTraitsTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityTraitsTable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTable )( 
            ISimilarityTraitsTable * This,
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTableIndirect )( 
            ISimilarityTraitsTable * This,
            /* [in] */ ISimilarityTraitsMapping *mapping,
            /* [in] */ BOOL truncate,
            /* [out] */ RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CloseTable )( 
            ISimilarityTraitsTable * This,
            BOOL isValid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Append )( 
            ISimilarityTraitsTable * This,
            /* [in] */ SimilarityData *data,
            /* [in] */ SimilarityFileIndexT fileIndex);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindSimilarFileIndex )( 
            ISimilarityTraitsTable * This,
            /* [in] */ SimilarityData *similarityData,
            /* [in] */ USHORT numberOfMatchesRequired,
            /* [out] */ FindSimilarFileIndexResults *findSimilarFileIndexResults,
            /* [in] */ DWORD resultsSize,
            /* [out] */ DWORD *resultsUsed);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *BeginDump )( 
            ISimilarityTraitsTable * This,
            /* [out] */ ISimilarityTableDumpState **similarityTableDumpState);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetLastIndex )( 
            ISimilarityTraitsTable * This,
            /* [out] */ SimilarityFileIndexT *fileIndex);
        
        END_INTERFACE
    } ISimilarityTraitsTableVtbl;

    interface ISimilarityTraitsTable
    {
        CONST_VTBL struct ISimilarityTraitsTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityTraitsTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityTraitsTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityTraitsTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityTraitsTable_CreateTable(This,path,truncate,securityDescriptor,isNew)	\
    ( (This)->lpVtbl -> CreateTable(This,path,truncate,securityDescriptor,isNew) ) 

#define ISimilarityTraitsTable_CreateTableIndirect(This,mapping,truncate,isNew)	\
    ( (This)->lpVtbl -> CreateTableIndirect(This,mapping,truncate,isNew) ) 

#define ISimilarityTraitsTable_CloseTable(This,isValid)	\
    ( (This)->lpVtbl -> CloseTable(This,isValid) ) 

#define ISimilarityTraitsTable_Append(This,data,fileIndex)	\
    ( (This)->lpVtbl -> Append(This,data,fileIndex) ) 

#define ISimilarityTraitsTable_FindSimilarFileIndex(This,similarityData,numberOfMatchesRequired,findSimilarFileIndexResults,resultsSize,resultsUsed)	\
    ( (This)->lpVtbl -> FindSimilarFileIndex(This,similarityData,numberOfMatchesRequired,findSimilarFileIndexResults,resultsSize,resultsUsed) ) 

#define ISimilarityTraitsTable_BeginDump(This,similarityTableDumpState)	\
    ( (This)->lpVtbl -> BeginDump(This,similarityTableDumpState) ) 

#define ISimilarityTraitsTable_GetLastIndex(This,fileIndex)	\
    ( (This)->lpVtbl -> GetLastIndex(This,fileIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityTraitsTable_INTERFACE_DEFINED__ */


#ifndef __ISimilarityFileIdTable_INTERFACE_DEFINED__
#define __ISimilarityFileIdTable_INTERFACE_DEFINED__

/* interface ISimilarityFileIdTable */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarityFileIdTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A7F-9DBC-11DA-9E3F-0011114AE311")
    ISimilarityFileIdTable : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTable( 
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [in] */ DWORD recordSize,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTableIndirect( 
            /* [in] */ IRdcFileWriter *fileIdFile,
            /* [in] */ BOOL truncate,
            /* [in] */ DWORD recordSize,
            /* [out] */ RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CloseTable( 
            BOOL isValid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ SimilarityFileId *similarityFileId,
            /* [out] */ SimilarityFileIndexT *similarityFileIndex) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Lookup( 
            /* [in] */ SimilarityFileIndexT similarityFileIndex,
            /* [out] */ SimilarityFileId *similarityFileId) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Invalidate( 
            /* [in] */ SimilarityFileIndexT similarityFileIndex) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetRecordCount( 
            /* [out] */ DWORD *recordCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityFileIdTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarityFileIdTable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarityFileIdTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarityFileIdTable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTable )( 
            ISimilarityFileIdTable * This,
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [in] */ DWORD recordSize,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTableIndirect )( 
            ISimilarityFileIdTable * This,
            /* [in] */ IRdcFileWriter *fileIdFile,
            /* [in] */ BOOL truncate,
            /* [in] */ DWORD recordSize,
            /* [out] */ RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CloseTable )( 
            ISimilarityFileIdTable * This,
            BOOL isValid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Append )( 
            ISimilarityFileIdTable * This,
            /* [in] */ SimilarityFileId *similarityFileId,
            /* [out] */ SimilarityFileIndexT *similarityFileIndex);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Lookup )( 
            ISimilarityFileIdTable * This,
            /* [in] */ SimilarityFileIndexT similarityFileIndex,
            /* [out] */ SimilarityFileId *similarityFileId);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            ISimilarityFileIdTable * This,
            /* [in] */ SimilarityFileIndexT similarityFileIndex);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRecordCount )( 
            ISimilarityFileIdTable * This,
            /* [out] */ DWORD *recordCount);
        
        END_INTERFACE
    } ISimilarityFileIdTableVtbl;

    interface ISimilarityFileIdTable
    {
        CONST_VTBL struct ISimilarityFileIdTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarityFileIdTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarityFileIdTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarityFileIdTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarityFileIdTable_CreateTable(This,path,truncate,securityDescriptor,recordSize,isNew)	\
    ( (This)->lpVtbl -> CreateTable(This,path,truncate,securityDescriptor,recordSize,isNew) ) 

#define ISimilarityFileIdTable_CreateTableIndirect(This,fileIdFile,truncate,recordSize,isNew)	\
    ( (This)->lpVtbl -> CreateTableIndirect(This,fileIdFile,truncate,recordSize,isNew) ) 

#define ISimilarityFileIdTable_CloseTable(This,isValid)	\
    ( (This)->lpVtbl -> CloseTable(This,isValid) ) 

#define ISimilarityFileIdTable_Append(This,similarityFileId,similarityFileIndex)	\
    ( (This)->lpVtbl -> Append(This,similarityFileId,similarityFileIndex) ) 

#define ISimilarityFileIdTable_Lookup(This,similarityFileIndex,similarityFileId)	\
    ( (This)->lpVtbl -> Lookup(This,similarityFileIndex,similarityFileId) ) 

#define ISimilarityFileIdTable_Invalidate(This,similarityFileIndex)	\
    ( (This)->lpVtbl -> Invalidate(This,similarityFileIndex) ) 

#define ISimilarityFileIdTable_GetRecordCount(This,recordCount)	\
    ( (This)->lpVtbl -> GetRecordCount(This,recordCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarityFileIdTable_INTERFACE_DEFINED__ */


#ifndef __IRdcSimilarityGenerator_INTERFACE_DEFINED__
#define __IRdcSimilarityGenerator_INTERFACE_DEFINED__

/* interface IRdcSimilarityGenerator */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IRdcSimilarityGenerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A80-9DBC-11DA-9E3F-0011114AE311")
    IRdcSimilarityGenerator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EnableSimilarity( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Results( 
            /* [out] */ SimilarityData *similarityData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRdcSimilarityGeneratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRdcSimilarityGenerator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRdcSimilarityGenerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRdcSimilarityGenerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EnableSimilarity )( 
            IRdcSimilarityGenerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Results )( 
            IRdcSimilarityGenerator * This,
            /* [out] */ SimilarityData *similarityData);
        
        END_INTERFACE
    } IRdcSimilarityGeneratorVtbl;

    interface IRdcSimilarityGenerator
    {
        CONST_VTBL struct IRdcSimilarityGeneratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRdcSimilarityGenerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRdcSimilarityGenerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRdcSimilarityGenerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRdcSimilarityGenerator_EnableSimilarity(This)	\
    ( (This)->lpVtbl -> EnableSimilarity(This) ) 

#define IRdcSimilarityGenerator_Results(This,similarityData)	\
    ( (This)->lpVtbl -> Results(This,similarityData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRdcSimilarityGenerator_INTERFACE_DEFINED__ */


#ifndef __IFindSimilarResults_INTERFACE_DEFINED__
#define __IFindSimilarResults_INTERFACE_DEFINED__

/* interface IFindSimilarResults */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IFindSimilarResults;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A81-9DBC-11DA-9E3F-0011114AE311")
    IFindSimilarResults : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ DWORD *size) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNextFileId( 
            /* [out] */ DWORD *numTraitsMatched,
            /* [out] */ SimilarityFileId *similarityFileId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFindSimilarResultsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFindSimilarResults * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFindSimilarResults * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFindSimilarResults * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IFindSimilarResults * This,
            /* [out] */ DWORD *size);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNextFileId )( 
            IFindSimilarResults * This,
            /* [out] */ DWORD *numTraitsMatched,
            /* [out] */ SimilarityFileId *similarityFileId);
        
        END_INTERFACE
    } IFindSimilarResultsVtbl;

    interface IFindSimilarResults
    {
        CONST_VTBL struct IFindSimilarResultsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFindSimilarResults_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFindSimilarResults_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFindSimilarResults_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFindSimilarResults_GetSize(This,size)	\
    ( (This)->lpVtbl -> GetSize(This,size) ) 

#define IFindSimilarResults_GetNextFileId(This,numTraitsMatched,similarityFileId)	\
    ( (This)->lpVtbl -> GetNextFileId(This,numTraitsMatched,similarityFileId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFindSimilarResults_INTERFACE_DEFINED__ */


#ifndef __ISimilarity_INTERFACE_DEFINED__
#define __ISimilarity_INTERFACE_DEFINED__

/* interface ISimilarity */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_ISimilarity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96236A83-9DBC-11DA-9E3F-0011114AE311")
    ISimilarity : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTable( 
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [in] */ DWORD recordSize,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTableIndirect( 
            /* [in] */ ISimilarityTraitsMapping *mapping,
            /* [in] */ IRdcFileWriter *fileIdFile,
            /* [in] */ BOOL truncate,
            /* [in] */ DWORD recordSize,
            /* [out] */ RdcCreatedTables *isNew) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CloseTable( 
            /* [in] */ BOOL isValid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ SimilarityFileId *similarityFileId,
            /* [in] */ SimilarityData *similarityData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FindSimilarFileId( 
            /* [in] */ SimilarityData *similarityData,
            /* [in] */ USHORT numberOfMatchesRequired,
            /* [in] */ DWORD resultsSize,
            /* [out] */ IFindSimilarResults **findSimilarResults) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CopyAndSwap( 
            /* [in] */ ISimilarity *newSimilarityTables,
            /* [in] */ ISimilarityReportProgress *reportProgress) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetRecordCount( 
            /* [out] */ DWORD *recordCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimilarityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimilarity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimilarity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimilarity * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTable )( 
            ISimilarity * This,
            /* [annotation][in] */ 
            __in  wchar_t *path,
            /* [in] */ BOOL truncate,
            /* [annotation][in] */ 
            __in  BYTE *securityDescriptor,
            /* [in] */ DWORD recordSize,
            /* [annotation][out] */ 
            __out  RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTableIndirect )( 
            ISimilarity * This,
            /* [in] */ ISimilarityTraitsMapping *mapping,
            /* [in] */ IRdcFileWriter *fileIdFile,
            /* [in] */ BOOL truncate,
            /* [in] */ DWORD recordSize,
            /* [out] */ RdcCreatedTables *isNew);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CloseTable )( 
            ISimilarity * This,
            /* [in] */ BOOL isValid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Append )( 
            ISimilarity * This,
            /* [in] */ SimilarityFileId *similarityFileId,
            /* [in] */ SimilarityData *similarityData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindSimilarFileId )( 
            ISimilarity * This,
            /* [in] */ SimilarityData *similarityData,
            /* [in] */ USHORT numberOfMatchesRequired,
            /* [in] */ DWORD resultsSize,
            /* [out] */ IFindSimilarResults **findSimilarResults);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CopyAndSwap )( 
            ISimilarity * This,
            /* [in] */ ISimilarity *newSimilarityTables,
            /* [in] */ ISimilarityReportProgress *reportProgress);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRecordCount )( 
            ISimilarity * This,
            /* [out] */ DWORD *recordCount);
        
        END_INTERFACE
    } ISimilarityVtbl;

    interface ISimilarity
    {
        CONST_VTBL struct ISimilarityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimilarity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimilarity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimilarity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimilarity_CreateTable(This,path,truncate,securityDescriptor,recordSize,isNew)	\
    ( (This)->lpVtbl -> CreateTable(This,path,truncate,securityDescriptor,recordSize,isNew) ) 

#define ISimilarity_CreateTableIndirect(This,mapping,fileIdFile,truncate,recordSize,isNew)	\
    ( (This)->lpVtbl -> CreateTableIndirect(This,mapping,fileIdFile,truncate,recordSize,isNew) ) 

#define ISimilarity_CloseTable(This,isValid)	\
    ( (This)->lpVtbl -> CloseTable(This,isValid) ) 

#define ISimilarity_Append(This,similarityFileId,similarityData)	\
    ( (This)->lpVtbl -> Append(This,similarityFileId,similarityData) ) 

#define ISimilarity_FindSimilarFileId(This,similarityData,numberOfMatchesRequired,resultsSize,findSimilarResults)	\
    ( (This)->lpVtbl -> FindSimilarFileId(This,similarityData,numberOfMatchesRequired,resultsSize,findSimilarResults) ) 

#define ISimilarity_CopyAndSwap(This,newSimilarityTables,reportProgress)	\
    ( (This)->lpVtbl -> CopyAndSwap(This,newSimilarityTables,reportProgress) ) 

#define ISimilarity_GetRecordCount(This,recordCount)	\
    ( (This)->lpVtbl -> GetRecordCount(This,recordCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISimilarity_INTERFACE_DEFINED__ */



#ifndef __MSRDCLib_LIBRARY_DEFINED__
#define __MSRDCLib_LIBRARY_DEFINED__

/* library MSRDCLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSRDCLib;

EXTERN_C const CLSID CLSID_RdcLibrary;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A85-9DBC-11DA-9E3F-0011114AE311")
RdcLibrary;
#endif

EXTERN_C const CLSID CLSID_RdcGeneratorParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A86-9DBC-11DA-9E3F-0011114AE311")
RdcGeneratorParameters;
#endif

EXTERN_C const CLSID CLSID_RdcGeneratorFilterMaxParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A87-9DBC-11DA-9E3F-0011114AE311")
RdcGeneratorFilterMaxParameters;
#endif

EXTERN_C const CLSID CLSID_RdcGenerator;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A88-9DBC-11DA-9E3F-0011114AE311")
RdcGenerator;
#endif

EXTERN_C const CLSID CLSID_RdcFileReader;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A89-9DBC-11DA-9E3F-0011114AE311")
RdcFileReader;
#endif

EXTERN_C const CLSID CLSID_RdcSignatureReader;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A8A-9DBC-11DA-9E3F-0011114AE311")
RdcSignatureReader;
#endif

EXTERN_C const CLSID CLSID_RdcComparator;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A8B-9DBC-11DA-9E3F-0011114AE311")
RdcComparator;
#endif

EXTERN_C const CLSID CLSID_SimilarityReportProgress;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A8D-9DBC-11DA-9E3F-0011114AE311")
SimilarityReportProgress;
#endif

EXTERN_C const CLSID CLSID_SimilarityTableDumpState;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A8E-9DBC-11DA-9E3F-0011114AE311")
SimilarityTableDumpState;
#endif

EXTERN_C const CLSID CLSID_SimilarityTraitsTable;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A8F-9DBC-11DA-9E3F-0011114AE311")
SimilarityTraitsTable;
#endif

EXTERN_C const CLSID CLSID_SimilarityFileIdTable;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A90-9DBC-11DA-9E3F-0011114AE311")
SimilarityFileIdTable;
#endif

EXTERN_C const CLSID CLSID_Similarity;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A91-9DBC-11DA-9E3F-0011114AE311")
Similarity;
#endif

EXTERN_C const CLSID CLSID_RdcSimilarityGenerator;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A92-9DBC-11DA-9E3F-0011114AE311")
RdcSimilarityGenerator;
#endif

EXTERN_C const CLSID CLSID_FindSimilarResults;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A93-9DBC-11DA-9E3F-0011114AE311")
FindSimilarResults;
#endif

EXTERN_C const CLSID CLSID_SimilarityTraitsMapping;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A94-9DBC-11DA-9E3F-0011114AE311")
SimilarityTraitsMapping;
#endif

EXTERN_C const CLSID CLSID_SimilarityTraitsMappedView;

#ifdef __cplusplus

class DECLSPEC_UUID("96236A95-9DBC-11DA-9E3F-0011114AE311")
SimilarityTraitsMappedView;
#endif
#endif /* __MSRDCLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Msputils.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    MSPutils.h

Abstract:
    
    This file defines several utility classes used by the MSP base classes.

--*/

#ifndef __MSPUTILS_H_
#define __MSPUTILS_H_

#include <intsafe.h>


#if _ATL_VER >= 0x0300

 //
 // ATL 3.0 contains an equivalent of DECLARE_VQI in its END_COM_MAP(), so 
 // DECLARE_VQI() is not needed
 //
 
 #define DECLARE_VQI()

#else

 #define DECLARE_VQI() \
    STDMETHOD(QueryInterface)(REFIID iid, void ** ppvObject) = 0; \
    STDMETHOD_(ULONG, AddRef)() = 0; \
    STDMETHOD_(ULONG, Release)() = 0;

#endif

//
// this macro expands to the appropriate MSP_x value, depending on hr.
// this is useful for logging. for instance, the statements:
//
//      .....
//
//      if (FAILED(hr))
//      {
//          LOG((MSP_ERROR, "MyClass::MyFunc - exit. hr = 0x%lx", hr));
//      }
//      else
//      {
//          LOG((MSP_TRACE, "MyClass::MyFunc - exit. hr = 0x%lx", hr));
//      }
//
//      return hr;
//  }
//
//  can be replaced with:
//  
//      ....
//
//      LOG((MSP_(hr), "MyClass::MyFunc - exit. hr = 0x%lx", hr));
//      
//      return hr;
//  }
//


#define MSP_(hr) (FAILED(hr)?MSP_ERROR:MSP_TRACE)

//
// return TRUE if the (possibly aggregated) media type that was passed in is valid.
//
// here is the criteria for a valid aggregated media type:
//
// 1. there is one or more bit set
// 2. all bits that are set match the possible media types
// 3. there are no set bits that don't correspond to valid meda types
//

inline BOOL IsValidAggregatedMediaType(DWORD dwAggregatedMediaType) 
{   

    //
    // these are all possible media types
    //

    const DWORD dwAllPossibleMediaTypes =  TAPIMEDIATYPE_AUDIO | 
                                        TAPIMEDIATYPE_VIDEO | 
                                        TAPIMEDIATYPE_DATAMODEM | 
                                        TAPIMEDIATYPE_G3FAX | 
                                        TAPIMEDIATYPE_MULTITRACK;

    


    //
    // return value
    //

    BOOL bValidMediaType = FALSE;


    //
    // make sure that there is at least one allowed media type 
    //
    // and
    //
    // there are no invalid media types
    //

    if (  (0 == (dwAggregatedMediaType &    dwAllPossibleMediaTypes )   )  ||      // any valid bits set
          (0 != (dwAggregatedMediaType &  (~dwAllPossibleMediaTypes))   )      )   // no invalid bits are set
    {

        //
        // the media type is invalid.
        //

        bValidMediaType = FALSE;
    }
    else
    {

        //
        // the media type is valid.
        //

        bValidMediaType = TRUE;

    }

    return bValidMediaType;
}


//
// Make sure we have exactly one media type. That's not the case if
// dwMediaType is 0 or more than one bit is set in dwMediaType. Note
// that DWORD is unsigned so this should be safe.
//
inline BOOL IsSingleMediaType(DWORD dwMediaType) 
{   
    return !((dwMediaType == 0) || ((dwMediaType & (dwMediaType - 1)) != 0));
}

//
// Check to see if the mediatype is a single type and is in the mask.
//

inline BOOL IsValidSingleMediaType(DWORD dwMediaType, DWORD dwMask)
{
    return IsSingleMediaType(dwMediaType)
        && ((dwMediaType & dwMask) == dwMediaType);
}

/*++

CMSPArray template Description:

    Definitions for a simple vector template. The implementaion is borrowed
    from CMSPArray in atlapp.h. Modified only the allocation behavior.

    This array should only be used to store simple types. It doesn't call the
    constructor nor the destructor for each element in the array.

--*/
const DWORD INITIAL = 8;
const DWORD DELTA   = 8;

template <class T, DWORD dwInitial = INITIAL, DWORD dwDelta = DELTA>
class CMSPArray
{

protected:
    T* m_aT;
    int m_nSize;
    int m_nAllocSize;

public:
// Construction/destruction
    CMSPArray() : m_aT(NULL), m_nSize(0), m_nAllocSize(0)
    { }

    ~CMSPArray()
    {
        RemoveAll();
    }

// Operations
    int GetSize() const
    {
        return m_nSize;
    }
    BOOL Grow()
    {
        T* aT;
        DWORD dwTmpSize, cbAllocSize;
        int nNewAllocSize;

        // get the new number of elements to allocate in nNewAllocSize
        if(m_nAllocSize == 0)
        {
            if(FAILED(DWordToInt(dwInitial, &nNewAllocSize)))
            {
                return FALSE;
            }
        }
        else
        {
            if(FAILED(IntToDWord(m_nSize, &dwTmpSize))
                 || FAILED(DWordAdd(dwTmpSize, DELTA, &dwTmpSize))
                 || FAILED(DWordToInt(dwTmpSize, &nNewAllocSize))
               )
            {
                return FALSE;
            }
        }
 
        if( FAILED(IntToDWord(nNewAllocSize, &dwTmpSize))
            || FAILED(DWordMult(dwTmpSize, sizeof(T), &cbAllocSize))
          )
        {
            return FALSE;
        }
        aT = (T*)realloc(m_aT, cbAllocSize);
        if(aT == NULL)
            return FALSE;
        m_nAllocSize = nNewAllocSize;
        m_aT = aT;
        return TRUE;
    }

    BOOL Add(T& t)
    {
        if(m_nSize == m_nAllocSize)
        {
            if (!Grow()) return FALSE;
        }
        m_nSize++;
        SetAtIndex(m_nSize - 1, t);
        return TRUE;
    }
    BOOL Remove(T& t)
    {
        int nIndex = Find(t);
        if(nIndex == -1)
            return FALSE;
        return RemoveAt(nIndex);
    }
    BOOL RemoveAt(int nIndex)
    {
        if(nIndex != (m_nSize - 1))
            memmove((void*)&m_aT[nIndex], (void*)&m_aT[nIndex + 1], 
                (m_nSize - (nIndex + 1)) * sizeof(T));
        m_nSize--;
        return TRUE;
    }
    void RemoveAll()
    {
        if(m_nAllocSize > 0)
        {
            free(m_aT);
            m_aT = NULL;
            m_nSize = 0;
            m_nAllocSize = 0;
        }
    }
    T& operator[] (int nIndex) const
    {
        _ASSERTE(nIndex >= 0 && nIndex < m_nSize);
        return m_aT[nIndex];
    }
    T* GetData() const
    {
        return m_aT;
    }

// Implementation
    void SetAtIndex(int nIndex, T& t)
    {
        _ASSERTE(nIndex >= 0 && nIndex < m_nSize);
        m_aT[nIndex] = t;
    }
    int Find(T& t) const
    {
        for(int i = 0; i < m_nSize; i++)
        {
            if(m_aT[i] == t)
                return i;
        }
        return -1;  // not found
    }
};

/*++

CMSPCritSection Description:

    Definitions for a auto initialize critical section.

--*/
class CMSPCritSection
{
private:
    CRITICAL_SECTION m_CritSec;

public:
    CMSPCritSection()
    {
        InitializeCriticalSection(&m_CritSec);
    }

    ~CMSPCritSection()
    {
        DeleteCriticalSection(&m_CritSec);
    }

    void Lock() 
    {
        EnterCriticalSection(&m_CritSec);
    }

    BOOL TryLock() 
    {
        return TryEnterCriticalSection(&m_CritSec);
    }

    void Unlock() 
    {
        LeaveCriticalSection(&m_CritSec);
    }
};


/*++

CMSPCritSection Description:

    Definitions for a auto lock that unlocks when the variable is out
    of scope.

--*/
class CLock
{
private:
    CMSPCritSection &m_CriticalSection;

public:
    CLock(CMSPCritSection &CriticalSection)
        : m_CriticalSection(CriticalSection)
    {
        m_CriticalSection.Lock();
    }

    ~CLock()
    {
        m_CriticalSection.Unlock();
    }
};



///////////////////////////////////////////////////////////////////////////////
//
// CCSLock
//
// a plain old automatic lock that takes a pointer to CRITICAL_SECTION
//
// constructore enters crit section, destructor leaves critical section
//
// class client is responsible for passing a valid critical section
//

class CCSLock
{

private:
    CRITICAL_SECTION *m_pCritSec;

public:
    CCSLock(CRITICAL_SECTION *pCritSec)
        : m_pCritSec(pCritSec)
    {
        EnterCriticalSection(m_pCritSec);
    }

    ~CCSLock()
    {
        LeaveCriticalSection(m_pCritSec);
    }
};



/*++

LINK list:

    Definitions for a double link list.

--*/

//
// Calculate the address of the base of the structure given its type, and an
// address of a field within the structure.
//
#ifndef CONTAINING_RECORD
#define CONTAINING_RECORD(address, type, field) \
    ((type *)((PCHAR)(address) - (ULONG_PTR)(&((type *)0)->field)))
#endif


#ifndef InitializeListHead
//
//  VOID
//  InitializeListHead(
//      PLIST_ENTRY ListHead
//      );
//

#define InitializeListHead(ListHead) (\
    (ListHead)->Flink = (ListHead)->Blink = (ListHead))

//
//  BOOLEAN
//  IsListEmpty(
//      PLIST_ENTRY ListHead
//      );
//

#define IsListEmpty(ListHead) \
    ((ListHead)->Flink == (ListHead))

//
//  PLIST_ENTRY
//  RemoveHeadList(
//      PLIST_ENTRY ListHead
//      );
//

#define RemoveHeadList(ListHead) \
    (ListHead)->Flink;\
    {RemoveEntryList((ListHead)->Flink)}

//
//  PLIST_ENTRY
//  RemoveTailList(
//      PLIST_ENTRY ListHead
//      );
//

#define RemoveTailList(ListHead) \
    (ListHead)->Blink;\
    {RemoveEntryList((ListHead)->Blink)}

//
//  VOID
//  RemoveEntryList(
//      PLIST_ENTRY Entry
//      );
//

#define RemoveEntryList(Entry) {\
    PLIST_ENTRY _EX_Blink;\
    PLIST_ENTRY _EX_Flink;\
    _EX_Flink = (Entry)->Flink;\
    _EX_Blink = (Entry)->Blink;\
    _EX_Blink->Flink = _EX_Flink;\
    _EX_Flink->Blink = _EX_Blink;\
    }

//
//  VOID
//  InsertTailList(
//      PLIST_ENTRY ListHead,
//      PLIST_ENTRY Entry
//      );
//

#define InsertTailList(ListHead,Entry) {\
    PLIST_ENTRY _EX_Blink;\
    PLIST_ENTRY _EX_ListHead;\
    _EX_ListHead = (ListHead);\
    _EX_Blink = _EX_ListHead->Blink;\
    (Entry)->Flink = _EX_ListHead;\
    (Entry)->Blink = _EX_Blink;\
    _EX_Blink->Flink = (Entry);\
    _EX_ListHead->Blink = (Entry);\
    }

//
//  VOID
//  InsertHeadList(
//      PLIST_ENTRY ListHead,
//      PLIST_ENTRY Entry
//      );
//

#define InsertHeadList(ListHead,Entry) {\
    PLIST_ENTRY _EX_Flink;\
    PLIST_ENTRY _EX_ListHead;\
    _EX_ListHead = (ListHead);\
    _EX_Flink = _EX_ListHead->Flink;\
    (Entry)->Flink = _EX_Flink;\
    (Entry)->Blink = _EX_ListHead;\
    _EX_Flink->Blink = (Entry);\
    _EX_ListHead->Flink = (Entry);\
    }



BOOL IsNodeOnList(PLIST_ENTRY ListHead, PLIST_ENTRY Entry);


#endif //InitializeListHead

//
// Templates for private addref and release. See Platform SDK documentation.
//

template <class T> ULONG MSPAddRefHelper (T * pMyThis)
{
    LOG((MSP_INFO, "MSPAddRefHelper - this = 0x%08x", pMyThis));
    typedef CComAggObject<T> AggClass;
    AggClass * p = CONTAINING_RECORD(pMyThis, AggClass, m_contained);
    return p->AddRef();
}

template <class T> ULONG MSPReleaseHelper (T * pMyThis)
{
    LOG((MSP_INFO, "MSPReleaseHelper - this = 0x%08x", pMyThis));
    typedef CComAggObject<T> AggClass;
    AggClass * p = CONTAINING_RECORD(pMyThis, AggClass, m_contained);
    return p->Release();
}




//
//  Basic implementation for IObjectSafety.
//
//  Derive from this class to make your object safe for scripting on all its
//  interfaces
//

#include <Objsafe.h>


class CMSPObjectSafetyImpl : public IObjectSafety
{

public:
    
    CMSPObjectSafetyImpl()
        :m_dwSafety(0)
    {}


    //
    // we support the following safety options:
    //

    enum { SUPPORTED_SAFETY_OPTIONS = 
       INTERFACESAFE_FOR_UNTRUSTED_CALLER | INTERFACESAFE_FOR_UNTRUSTED_DATA };



    STDMETHOD(SetInterfaceSafetyOptions)(REFIID riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions)
    {

        //
        // any options requested that we do not support?
        //
        
        if ( (~SUPPORTED_SAFETY_OPTIONS & dwOptionSetMask) != 0 )
        {
            return E_FAIL;
        }

        
        //
        // see if the interface is supported at all
        //

        IUnknown *pUnk = NULL;

        HRESULT hr = QueryInterface(riid, (void**)&pUnk);

        if (SUCCEEDED(hr))
        {

            //
            // we don't need the interface, just wanted to see if it 
            // was supported. so release.
            //
            
            pUnk->Release();
            pUnk = NULL;

            //
            // the object supports the interface. Set options
            // 

            s_CritSection.Lock();

            //
            // set the bits specified by the mask to the values specified by 
            // dwEnabledOptions
            //

            m_dwSafety = (dwEnabledOptions & dwOptionSetMask) |
                         (m_dwSafety & ~dwOptionSetMask);

            s_CritSection.Unlock();

        }

        return hr;
    }


    
    STDMETHOD(GetInterfaceSafetyOptions)(REFIID riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions)
    {
        
        //
        // check caller's pointers
        //

        if (( !pdwSupportedOptions) ||
            ( !pdwEnabledOptions) )
        {
             return E_POINTER;
        }

        //
        //  if we fail, return something meaningful
        //

        *pdwSupportedOptions = 0;
        *pdwEnabledOptions = 0;



        //
        // see if the interface is supported at all
        //

        IUnknown *pUnk = NULL;

        HRESULT hr = QueryInterface(riid, (void**)&pUnk);

        if (SUCCEEDED(hr))
        {

            //
            // we don't need the interface, just wanted to see if it 
            // was supported. so release.
            //
            
            pUnk->Release();
            pUnk = NULL;

            //
            // the object supports the interface. get safe scripting options
            // 

            *pdwSupportedOptions = SUPPORTED_SAFETY_OPTIONS;

 
            s_CritSection.Lock();

            *pdwEnabledOptions = m_dwSafety;

            s_CritSection.Unlock();

        }

        return hr;
    }

private:

    DWORD m_dwSafety;

    // 
    // thread safety
    //
    // the critical section is shared among all instances of this class
    //

    static CMSPCritSection s_CritSection;
    
};

#endif  //__MSPUTILS_H_

// eof
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSTErr.h ===
//+-------------------------------------------------------------------------
//
//  Copyright (C) Microsoft Corporation, 1991 - 1996.
//
//  Contents:  Scheduling Agent interface error definitions.
//
//--------------------------------------------------------------------------
#ifndef _MSTERR_H_
#define _MSTERR_H_
#include "winerror.h"
// Task Scheduler error codes have been moved to winerror.h
#endif // _MSTERR_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSTask.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for mstask.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __mstask_h__
#define __mstask_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITaskTrigger_FWD_DEFINED__
#define __ITaskTrigger_FWD_DEFINED__
typedef interface ITaskTrigger ITaskTrigger;
#endif 	/* __ITaskTrigger_FWD_DEFINED__ */


#ifndef __IScheduledWorkItem_FWD_DEFINED__
#define __IScheduledWorkItem_FWD_DEFINED__
typedef interface IScheduledWorkItem IScheduledWorkItem;
#endif 	/* __IScheduledWorkItem_FWD_DEFINED__ */


#ifndef __ITask_FWD_DEFINED__
#define __ITask_FWD_DEFINED__
typedef interface ITask ITask;
#endif 	/* __ITask_FWD_DEFINED__ */


#ifndef __IEnumWorkItems_FWD_DEFINED__
#define __IEnumWorkItems_FWD_DEFINED__
typedef interface IEnumWorkItems IEnumWorkItems;
#endif 	/* __IEnumWorkItems_FWD_DEFINED__ */


#ifndef __ITaskScheduler_FWD_DEFINED__
#define __ITaskScheduler_FWD_DEFINED__
typedef interface ITaskScheduler ITaskScheduler;
#endif 	/* __ITaskScheduler_FWD_DEFINED__ */


#ifndef __IProvideTaskPage_FWD_DEFINED__
#define __IProvideTaskPage_FWD_DEFINED__
typedef interface IProvideTaskPage IProvideTaskPage;
#endif 	/* __IProvideTaskPage_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "oleidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_mstask_0000_0000 */
/* [local] */ 

#define TASK_SUNDAY       (0x1)
#define TASK_MONDAY       (0x2)
#define TASK_TUESDAY      (0x4)
#define TASK_WEDNESDAY    (0x8)
#define TASK_THURSDAY     (0x10)
#define TASK_FRIDAY       (0x20)
#define TASK_SATURDAY     (0x40)
#define TASK_FIRST_WEEK   (1)
#define TASK_SECOND_WEEK  (2)
#define TASK_THIRD_WEEK   (3)
#define TASK_FOURTH_WEEK  (4)
#define TASK_LAST_WEEK    (5)
#define TASK_JANUARY      (0x1)
#define TASK_FEBRUARY     (0x2)
#define TASK_MARCH        (0x4)
#define TASK_APRIL        (0x8)
#define TASK_MAY          (0x10)
#define TASK_JUNE         (0x20)
#define TASK_JULY         (0x40)
#define TASK_AUGUST       (0x80)
#define TASK_SEPTEMBER    (0x100)
#define TASK_OCTOBER      (0x200)
#define TASK_NOVEMBER     (0x400)
#define TASK_DECEMBER     (0x800)
#define TASK_FLAG_INTERACTIVE                  (0x1)
#define TASK_FLAG_DELETE_WHEN_DONE             (0x2)
#define TASK_FLAG_DISABLED                     (0x4)
#define TASK_FLAG_START_ONLY_IF_IDLE           (0x10)
#define TASK_FLAG_KILL_ON_IDLE_END             (0x20)
#define TASK_FLAG_DONT_START_IF_ON_BATTERIES   (0x40)
#define TASK_FLAG_KILL_IF_GOING_ON_BATTERIES   (0x80)
#define TASK_FLAG_RUN_ONLY_IF_DOCKED           (0x100)
#define TASK_FLAG_HIDDEN                       (0x200)
#define TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET (0x400)
#define TASK_FLAG_RESTART_ON_IDLE_RESUME       (0x800)
#define TASK_FLAG_SYSTEM_REQUIRED              (0x1000)
#define TASK_FLAG_RUN_ONLY_IF_LOGGED_ON        (0x2000)
#define TASK_TRIGGER_FLAG_HAS_END_DATE         (0x1)
#define TASK_TRIGGER_FLAG_KILL_AT_DURATION_END (0x2)
#define TASK_TRIGGER_FLAG_DISABLED             (0x4)
#define	TASK_MAX_RUN_TIMES	( 1440 )

typedef 
enum _TASK_TRIGGER_TYPE
    {	TASK_TIME_TRIGGER_ONCE	= 0,
	TASK_TIME_TRIGGER_DAILY	= 1,
	TASK_TIME_TRIGGER_WEEKLY	= 2,
	TASK_TIME_TRIGGER_MONTHLYDATE	= 3,
	TASK_TIME_TRIGGER_MONTHLYDOW	= 4,
	TASK_EVENT_TRIGGER_ON_IDLE	= 5,
	TASK_EVENT_TRIGGER_AT_SYSTEMSTART	= 6,
	TASK_EVENT_TRIGGER_AT_LOGON	= 7
    } 	TASK_TRIGGER_TYPE;

typedef enum _TASK_TRIGGER_TYPE *PTASK_TRIGGER_TYPE;

typedef struct _DAILY
    {
    WORD DaysInterval;
    } 	DAILY;

typedef struct _WEEKLY
    {
    WORD WeeksInterval;
    WORD rgfDaysOfTheWeek;
    } 	WEEKLY;

typedef struct _MONTHLYDATE
    {
    DWORD rgfDays;
    WORD rgfMonths;
    } 	MONTHLYDATE;

typedef struct _MONTHLYDOW
    {
    WORD wWhichWeek;
    WORD rgfDaysOfTheWeek;
    WORD rgfMonths;
    } 	MONTHLYDOW;

typedef union _TRIGGER_TYPE_UNION
    {
    DAILY Daily;
    WEEKLY Weekly;
    MONTHLYDATE MonthlyDate;
    MONTHLYDOW MonthlyDOW;
    } 	TRIGGER_TYPE_UNION;

typedef struct _TASK_TRIGGER
    {
    WORD cbTriggerSize;
    WORD Reserved1;
    WORD wBeginYear;
    WORD wBeginMonth;
    WORD wBeginDay;
    WORD wEndYear;
    WORD wEndMonth;
    WORD wEndDay;
    WORD wStartHour;
    WORD wStartMinute;
    DWORD MinutesDuration;
    DWORD MinutesInterval;
    DWORD rgFlags;
    TASK_TRIGGER_TYPE TriggerType;
    TRIGGER_TYPE_UNION Type;
    WORD Reserved2;
    WORD wRandomMinutesInterval;
    } 	TASK_TRIGGER;

typedef struct _TASK_TRIGGER *PTASK_TRIGGER;

// {148BD52B-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(IID_ITaskTrigger, 0x148BD52BL, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0000_v0_0_s_ifspec;

#ifndef __ITaskTrigger_INTERFACE_DEFINED__
#define __ITaskTrigger_INTERFACE_DEFINED__

/* interface ITaskTrigger */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_ITaskTrigger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("148BD52B-A2AB-11CE-B11F-00AA00530503")
    ITaskTrigger : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetTrigger( 
            /* [in] */ const PTASK_TRIGGER pTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTrigger( 
            /* [out] */ PTASK_TRIGGER pTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTriggerString( 
            /* [out] */ LPWSTR *ppwszTrigger) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITaskTriggerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITaskTrigger * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITaskTrigger * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITaskTrigger * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetTrigger )( 
            ITaskTrigger * This,
            /* [in] */ const PTASK_TRIGGER pTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrigger )( 
            ITaskTrigger * This,
            /* [out] */ PTASK_TRIGGER pTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTriggerString )( 
            ITaskTrigger * This,
            /* [out] */ LPWSTR *ppwszTrigger);
        
        END_INTERFACE
    } ITaskTriggerVtbl;

    interface ITaskTrigger
    {
        CONST_VTBL struct ITaskTriggerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITaskTrigger_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITaskTrigger_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITaskTrigger_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITaskTrigger_SetTrigger(This,pTrigger)	\
    ( (This)->lpVtbl -> SetTrigger(This,pTrigger) ) 

#define ITaskTrigger_GetTrigger(This,pTrigger)	\
    ( (This)->lpVtbl -> GetTrigger(This,pTrigger) ) 

#define ITaskTrigger_GetTriggerString(This,ppwszTrigger)	\
    ( (This)->lpVtbl -> GetTriggerString(This,ppwszTrigger) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITaskTrigger_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0001 */
/* [local] */ 

// {a6b952f0-a4b1-11d0-997d-00aa006887ec}
DEFINE_GUID(IID_IScheduledWorkItem, 0xa6b952f0L, 0xa4b1, 0x11d0, 0x99, 0x7d, 0x00, 0xaa, 0x00, 0x68, 0x87, 0xec);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0001_v0_0_s_ifspec;

#ifndef __IScheduledWorkItem_INTERFACE_DEFINED__
#define __IScheduledWorkItem_INTERFACE_DEFINED__

/* interface IScheduledWorkItem */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_IScheduledWorkItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a6b952f0-a4b1-11d0-997d-00aa006887ec")
    IScheduledWorkItem : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateTrigger( 
            /* [out] */ WORD *piNewTrigger,
            /* [out] */ ITaskTrigger **ppTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteTrigger( 
            /* [in] */ WORD iTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTriggerCount( 
            /* [out] */ WORD *pwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTrigger( 
            /* [in] */ WORD iTrigger,
            /* [out] */ ITaskTrigger **ppTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTriggerString( 
            /* [in] */ WORD iTrigger,
            /* [out] */ LPWSTR *ppwszTrigger) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRunTimes( 
            /* [in] */ const LPSYSTEMTIME pstBegin,
            /* [in] */ const LPSYSTEMTIME pstEnd,
            /* [out][in] */ WORD *pCount,
            /* [out] */ LPSYSTEMTIME *rgstTaskTimes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextRunTime( 
            /* [out][in] */ SYSTEMTIME *pstNextRun) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetIdleWait( 
            /* [in] */ WORD wIdleMinutes,
            /* [in] */ WORD wDeadlineMinutes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIdleWait( 
            /* [out] */ WORD *pwIdleMinutes,
            /* [out] */ WORD *pwDeadlineMinutes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Run( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EditWorkItem( 
            /* [in] */ HWND hParent,
            /* [in] */ DWORD dwReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMostRecentRunTime( 
            /* [out] */ SYSTEMTIME *pstLastRun) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ HRESULT *phrStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExitCode( 
            /* [out] */ DWORD *pdwExitCode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetComment( 
            /* [in] */ LPCWSTR pwszComment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetComment( 
            /* [out] */ LPWSTR *ppwszComment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCreator( 
            /* [in] */ LPCWSTR pwszCreator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCreator( 
            /* [out] */ LPWSTR *ppwszCreator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetWorkItemData( 
            /* [in] */ WORD cbData,
            /* [in] */ BYTE rgbData[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWorkItemData( 
            /* [out] */ WORD *pcbData,
            /* [out] */ BYTE **prgbData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetErrorRetryCount( 
            /* [in] */ WORD wRetryCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetErrorRetryCount( 
            /* [out] */ WORD *pwRetryCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetErrorRetryInterval( 
            /* [in] */ WORD wRetryInterval) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetErrorRetryInterval( 
            /* [out] */ WORD *pwRetryInterval) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFlags( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAccountInformation( 
            /* [in] */ LPCWSTR pwszAccountName,
            /* [in] */ LPCWSTR pwszPassword) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAccountInformation( 
            /* [out] */ LPWSTR *ppwszAccountName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScheduledWorkItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScheduledWorkItem * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScheduledWorkItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScheduledWorkItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTrigger )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *piNewTrigger,
            /* [out] */ ITaskTrigger **ppTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteTrigger )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD iTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTriggerCount )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *pwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrigger )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD iTrigger,
            /* [out] */ ITaskTrigger **ppTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTriggerString )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD iTrigger,
            /* [out] */ LPWSTR *ppwszTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetRunTimes )( 
            IScheduledWorkItem * This,
            /* [in] */ const LPSYSTEMTIME pstBegin,
            /* [in] */ const LPSYSTEMTIME pstEnd,
            /* [out][in] */ WORD *pCount,
            /* [out] */ LPSYSTEMTIME *rgstTaskTimes);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextRunTime )( 
            IScheduledWorkItem * This,
            /* [out][in] */ SYSTEMTIME *pstNextRun);
        
        HRESULT ( STDMETHODCALLTYPE *SetIdleWait )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD wIdleMinutes,
            /* [in] */ WORD wDeadlineMinutes);
        
        HRESULT ( STDMETHODCALLTYPE *GetIdleWait )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *pwIdleMinutes,
            /* [out] */ WORD *pwDeadlineMinutes);
        
        HRESULT ( STDMETHODCALLTYPE *Run )( 
            IScheduledWorkItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            IScheduledWorkItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *EditWorkItem )( 
            IScheduledWorkItem * This,
            /* [in] */ HWND hParent,
            /* [in] */ DWORD dwReserved);
        
        HRESULT ( STDMETHODCALLTYPE *GetMostRecentRunTime )( 
            IScheduledWorkItem * This,
            /* [out] */ SYSTEMTIME *pstLastRun);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            IScheduledWorkItem * This,
            /* [out] */ HRESULT *phrStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetExitCode )( 
            IScheduledWorkItem * This,
            /* [out] */ DWORD *pdwExitCode);
        
        HRESULT ( STDMETHODCALLTYPE *SetComment )( 
            IScheduledWorkItem * This,
            /* [in] */ LPCWSTR pwszComment);
        
        HRESULT ( STDMETHODCALLTYPE *GetComment )( 
            IScheduledWorkItem * This,
            /* [out] */ LPWSTR *ppwszComment);
        
        HRESULT ( STDMETHODCALLTYPE *SetCreator )( 
            IScheduledWorkItem * This,
            /* [in] */ LPCWSTR pwszCreator);
        
        HRESULT ( STDMETHODCALLTYPE *GetCreator )( 
            IScheduledWorkItem * This,
            /* [out] */ LPWSTR *ppwszCreator);
        
        HRESULT ( STDMETHODCALLTYPE *SetWorkItemData )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD cbData,
            /* [in] */ BYTE rgbData[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetWorkItemData )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *pcbData,
            /* [out] */ BYTE **prgbData);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorRetryCount )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD wRetryCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorRetryCount )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *pwRetryCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorRetryInterval )( 
            IScheduledWorkItem * This,
            /* [in] */ WORD wRetryInterval);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorRetryInterval )( 
            IScheduledWorkItem * This,
            /* [out] */ WORD *pwRetryInterval);
        
        HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            IScheduledWorkItem * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IScheduledWorkItem * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetAccountInformation )( 
            IScheduledWorkItem * This,
            /* [in] */ LPCWSTR pwszAccountName,
            /* [in] */ LPCWSTR pwszPassword);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccountInformation )( 
            IScheduledWorkItem * This,
            /* [out] */ LPWSTR *ppwszAccountName);
        
        END_INTERFACE
    } IScheduledWorkItemVtbl;

    interface IScheduledWorkItem
    {
        CONST_VTBL struct IScheduledWorkItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScheduledWorkItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScheduledWorkItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScheduledWorkItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScheduledWorkItem_CreateTrigger(This,piNewTrigger,ppTrigger)	\
    ( (This)->lpVtbl -> CreateTrigger(This,piNewTrigger,ppTrigger) ) 

#define IScheduledWorkItem_DeleteTrigger(This,iTrigger)	\
    ( (This)->lpVtbl -> DeleteTrigger(This,iTrigger) ) 

#define IScheduledWorkItem_GetTriggerCount(This,pwCount)	\
    ( (This)->lpVtbl -> GetTriggerCount(This,pwCount) ) 

#define IScheduledWorkItem_GetTrigger(This,iTrigger,ppTrigger)	\
    ( (This)->lpVtbl -> GetTrigger(This,iTrigger,ppTrigger) ) 

#define IScheduledWorkItem_GetTriggerString(This,iTrigger,ppwszTrigger)	\
    ( (This)->lpVtbl -> GetTriggerString(This,iTrigger,ppwszTrigger) ) 

#define IScheduledWorkItem_GetRunTimes(This,pstBegin,pstEnd,pCount,rgstTaskTimes)	\
    ( (This)->lpVtbl -> GetRunTimes(This,pstBegin,pstEnd,pCount,rgstTaskTimes) ) 

#define IScheduledWorkItem_GetNextRunTime(This,pstNextRun)	\
    ( (This)->lpVtbl -> GetNextRunTime(This,pstNextRun) ) 

#define IScheduledWorkItem_SetIdleWait(This,wIdleMinutes,wDeadlineMinutes)	\
    ( (This)->lpVtbl -> SetIdleWait(This,wIdleMinutes,wDeadlineMinutes) ) 

#define IScheduledWorkItem_GetIdleWait(This,pwIdleMinutes,pwDeadlineMinutes)	\
    ( (This)->lpVtbl -> GetIdleWait(This,pwIdleMinutes,pwDeadlineMinutes) ) 

#define IScheduledWorkItem_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IScheduledWorkItem_Terminate(This)	\
    ( (This)->lpVtbl -> Terminate(This) ) 

#define IScheduledWorkItem_EditWorkItem(This,hParent,dwReserved)	\
    ( (This)->lpVtbl -> EditWorkItem(This,hParent,dwReserved) ) 

#define IScheduledWorkItem_GetMostRecentRunTime(This,pstLastRun)	\
    ( (This)->lpVtbl -> GetMostRecentRunTime(This,pstLastRun) ) 

#define IScheduledWorkItem_GetStatus(This,phrStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,phrStatus) ) 

#define IScheduledWorkItem_GetExitCode(This,pdwExitCode)	\
    ( (This)->lpVtbl -> GetExitCode(This,pdwExitCode) ) 

#define IScheduledWorkItem_SetComment(This,pwszComment)	\
    ( (This)->lpVtbl -> SetComment(This,pwszComment) ) 

#define IScheduledWorkItem_GetComment(This,ppwszComment)	\
    ( (This)->lpVtbl -> GetComment(This,ppwszComment) ) 

#define IScheduledWorkItem_SetCreator(This,pwszCreator)	\
    ( (This)->lpVtbl -> SetCreator(This,pwszCreator) ) 

#define IScheduledWorkItem_GetCreator(This,ppwszCreator)	\
    ( (This)->lpVtbl -> GetCreator(This,ppwszCreator) ) 

#define IScheduledWorkItem_SetWorkItemData(This,cbData,rgbData)	\
    ( (This)->lpVtbl -> SetWorkItemData(This,cbData,rgbData) ) 

#define IScheduledWorkItem_GetWorkItemData(This,pcbData,prgbData)	\
    ( (This)->lpVtbl -> GetWorkItemData(This,pcbData,prgbData) ) 

#define IScheduledWorkItem_SetErrorRetryCount(This,wRetryCount)	\
    ( (This)->lpVtbl -> SetErrorRetryCount(This,wRetryCount) ) 

#define IScheduledWorkItem_GetErrorRetryCount(This,pwRetryCount)	\
    ( (This)->lpVtbl -> GetErrorRetryCount(This,pwRetryCount) ) 

#define IScheduledWorkItem_SetErrorRetryInterval(This,wRetryInterval)	\
    ( (This)->lpVtbl -> SetErrorRetryInterval(This,wRetryInterval) ) 

#define IScheduledWorkItem_GetErrorRetryInterval(This,pwRetryInterval)	\
    ( (This)->lpVtbl -> GetErrorRetryInterval(This,pwRetryInterval) ) 

#define IScheduledWorkItem_SetFlags(This,dwFlags)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags) ) 

#define IScheduledWorkItem_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IScheduledWorkItem_SetAccountInformation(This,pwszAccountName,pwszPassword)	\
    ( (This)->lpVtbl -> SetAccountInformation(This,pwszAccountName,pwszPassword) ) 

#define IScheduledWorkItem_GetAccountInformation(This,ppwszAccountName)	\
    ( (This)->lpVtbl -> GetAccountInformation(This,ppwszAccountName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScheduledWorkItem_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0002 */
/* [local] */ 

// {148BD524-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(IID_ITask, 0x148BD524L, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0002_v0_0_s_ifspec;

#ifndef __ITask_INTERFACE_DEFINED__
#define __ITask_INTERFACE_DEFINED__

/* interface ITask */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_ITask;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("148BD524-A2AB-11CE-B11F-00AA00530503")
    ITask : public IScheduledWorkItem
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetApplicationName( 
            /* [in] */ LPCWSTR pwszApplicationName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetApplicationName( 
            /* [out] */ LPWSTR *ppwszApplicationName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParameters( 
            /* [in] */ LPCWSTR pwszParameters) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParameters( 
            /* [out] */ LPWSTR *ppwszParameters) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetWorkingDirectory( 
            /* [in] */ LPCWSTR pwszWorkingDirectory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWorkingDirectory( 
            /* [out] */ LPWSTR *ppwszWorkingDirectory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPriority( 
            /* [in] */ DWORD dwPriority) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPriority( 
            /* [out] */ DWORD *pdwPriority) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTaskFlags( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTaskFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMaxRunTime( 
            /* [in] */ DWORD dwMaxRunTimeMS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxRunTime( 
            /* [out] */ DWORD *pdwMaxRunTimeMS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITask * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITask * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTrigger )( 
            ITask * This,
            /* [out] */ WORD *piNewTrigger,
            /* [out] */ ITaskTrigger **ppTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteTrigger )( 
            ITask * This,
            /* [in] */ WORD iTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTriggerCount )( 
            ITask * This,
            /* [out] */ WORD *pwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrigger )( 
            ITask * This,
            /* [in] */ WORD iTrigger,
            /* [out] */ ITaskTrigger **ppTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetTriggerString )( 
            ITask * This,
            /* [in] */ WORD iTrigger,
            /* [out] */ LPWSTR *ppwszTrigger);
        
        HRESULT ( STDMETHODCALLTYPE *GetRunTimes )( 
            ITask * This,
            /* [in] */ const LPSYSTEMTIME pstBegin,
            /* [in] */ const LPSYSTEMTIME pstEnd,
            /* [out][in] */ WORD *pCount,
            /* [out] */ LPSYSTEMTIME *rgstTaskTimes);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextRunTime )( 
            ITask * This,
            /* [out][in] */ SYSTEMTIME *pstNextRun);
        
        HRESULT ( STDMETHODCALLTYPE *SetIdleWait )( 
            ITask * This,
            /* [in] */ WORD wIdleMinutes,
            /* [in] */ WORD wDeadlineMinutes);
        
        HRESULT ( STDMETHODCALLTYPE *GetIdleWait )( 
            ITask * This,
            /* [out] */ WORD *pwIdleMinutes,
            /* [out] */ WORD *pwDeadlineMinutes);
        
        HRESULT ( STDMETHODCALLTYPE *Run )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *EditWorkItem )( 
            ITask * This,
            /* [in] */ HWND hParent,
            /* [in] */ DWORD dwReserved);
        
        HRESULT ( STDMETHODCALLTYPE *GetMostRecentRunTime )( 
            ITask * This,
            /* [out] */ SYSTEMTIME *pstLastRun);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            ITask * This,
            /* [out] */ HRESULT *phrStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetExitCode )( 
            ITask * This,
            /* [out] */ DWORD *pdwExitCode);
        
        HRESULT ( STDMETHODCALLTYPE *SetComment )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszComment);
        
        HRESULT ( STDMETHODCALLTYPE *GetComment )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszComment);
        
        HRESULT ( STDMETHODCALLTYPE *SetCreator )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszCreator);
        
        HRESULT ( STDMETHODCALLTYPE *GetCreator )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszCreator);
        
        HRESULT ( STDMETHODCALLTYPE *SetWorkItemData )( 
            ITask * This,
            /* [in] */ WORD cbData,
            /* [in] */ BYTE rgbData[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetWorkItemData )( 
            ITask * This,
            /* [out] */ WORD *pcbData,
            /* [out] */ BYTE **prgbData);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorRetryCount )( 
            ITask * This,
            /* [in] */ WORD wRetryCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorRetryCount )( 
            ITask * This,
            /* [out] */ WORD *pwRetryCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorRetryInterval )( 
            ITask * This,
            /* [in] */ WORD wRetryInterval);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorRetryInterval )( 
            ITask * This,
            /* [out] */ WORD *pwRetryInterval);
        
        HRESULT ( STDMETHODCALLTYPE *SetFlags )( 
            ITask * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            ITask * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetAccountInformation )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszAccountName,
            /* [in] */ LPCWSTR pwszPassword);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccountInformation )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszAccountName);
        
        HRESULT ( STDMETHODCALLTYPE *SetApplicationName )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszApplicationName);
        
        HRESULT ( STDMETHODCALLTYPE *GetApplicationName )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszApplicationName);
        
        HRESULT ( STDMETHODCALLTYPE *SetParameters )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszParameters);
        
        HRESULT ( STDMETHODCALLTYPE *GetParameters )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszParameters);
        
        HRESULT ( STDMETHODCALLTYPE *SetWorkingDirectory )( 
            ITask * This,
            /* [in] */ LPCWSTR pwszWorkingDirectory);
        
        HRESULT ( STDMETHODCALLTYPE *GetWorkingDirectory )( 
            ITask * This,
            /* [out] */ LPWSTR *ppwszWorkingDirectory);
        
        HRESULT ( STDMETHODCALLTYPE *SetPriority )( 
            ITask * This,
            /* [in] */ DWORD dwPriority);
        
        HRESULT ( STDMETHODCALLTYPE *GetPriority )( 
            ITask * This,
            /* [out] */ DWORD *pdwPriority);
        
        HRESULT ( STDMETHODCALLTYPE *SetTaskFlags )( 
            ITask * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetTaskFlags )( 
            ITask * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxRunTime )( 
            ITask * This,
            /* [in] */ DWORD dwMaxRunTimeMS);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxRunTime )( 
            ITask * This,
            /* [out] */ DWORD *pdwMaxRunTimeMS);
        
        END_INTERFACE
    } ITaskVtbl;

    interface ITask
    {
        CONST_VTBL struct ITaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITask_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITask_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITask_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITask_CreateTrigger(This,piNewTrigger,ppTrigger)	\
    ( (This)->lpVtbl -> CreateTrigger(This,piNewTrigger,ppTrigger) ) 

#define ITask_DeleteTrigger(This,iTrigger)	\
    ( (This)->lpVtbl -> DeleteTrigger(This,iTrigger) ) 

#define ITask_GetTriggerCount(This,pwCount)	\
    ( (This)->lpVtbl -> GetTriggerCount(This,pwCount) ) 

#define ITask_GetTrigger(This,iTrigger,ppTrigger)	\
    ( (This)->lpVtbl -> GetTrigger(This,iTrigger,ppTrigger) ) 

#define ITask_GetTriggerString(This,iTrigger,ppwszTrigger)	\
    ( (This)->lpVtbl -> GetTriggerString(This,iTrigger,ppwszTrigger) ) 

#define ITask_GetRunTimes(This,pstBegin,pstEnd,pCount,rgstTaskTimes)	\
    ( (This)->lpVtbl -> GetRunTimes(This,pstBegin,pstEnd,pCount,rgstTaskTimes) ) 

#define ITask_GetNextRunTime(This,pstNextRun)	\
    ( (This)->lpVtbl -> GetNextRunTime(This,pstNextRun) ) 

#define ITask_SetIdleWait(This,wIdleMinutes,wDeadlineMinutes)	\
    ( (This)->lpVtbl -> SetIdleWait(This,wIdleMinutes,wDeadlineMinutes) ) 

#define ITask_GetIdleWait(This,pwIdleMinutes,pwDeadlineMinutes)	\
    ( (This)->lpVtbl -> GetIdleWait(This,pwIdleMinutes,pwDeadlineMinutes) ) 

#define ITask_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define ITask_Terminate(This)	\
    ( (This)->lpVtbl -> Terminate(This) ) 

#define ITask_EditWorkItem(This,hParent,dwReserved)	\
    ( (This)->lpVtbl -> EditWorkItem(This,hParent,dwReserved) ) 

#define ITask_GetMostRecentRunTime(This,pstLastRun)	\
    ( (This)->lpVtbl -> GetMostRecentRunTime(This,pstLastRun) ) 

#define ITask_GetStatus(This,phrStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,phrStatus) ) 

#define ITask_GetExitCode(This,pdwExitCode)	\
    ( (This)->lpVtbl -> GetExitCode(This,pdwExitCode) ) 

#define ITask_SetComment(This,pwszComment)	\
    ( (This)->lpVtbl -> SetComment(This,pwszComment) ) 

#define ITask_GetComment(This,ppwszComment)	\
    ( (This)->lpVtbl -> GetComment(This,ppwszComment) ) 

#define ITask_SetCreator(This,pwszCreator)	\
    ( (This)->lpVtbl -> SetCreator(This,pwszCreator) ) 

#define ITask_GetCreator(This,ppwszCreator)	\
    ( (This)->lpVtbl -> GetCreator(This,ppwszCreator) ) 

#define ITask_SetWorkItemData(This,cbData,rgbData)	\
    ( (This)->lpVtbl -> SetWorkItemData(This,cbData,rgbData) ) 

#define ITask_GetWorkItemData(This,pcbData,prgbData)	\
    ( (This)->lpVtbl -> GetWorkItemData(This,pcbData,prgbData) ) 

#define ITask_SetErrorRetryCount(This,wRetryCount)	\
    ( (This)->lpVtbl -> SetErrorRetryCount(This,wRetryCount) ) 

#define ITask_GetErrorRetryCount(This,pwRetryCount)	\
    ( (This)->lpVtbl -> GetErrorRetryCount(This,pwRetryCount) ) 

#define ITask_SetErrorRetryInterval(This,wRetryInterval)	\
    ( (This)->lpVtbl -> SetErrorRetryInterval(This,wRetryInterval) ) 

#define ITask_GetErrorRetryInterval(This,pwRetryInterval)	\
    ( (This)->lpVtbl -> GetErrorRetryInterval(This,pwRetryInterval) ) 

#define ITask_SetFlags(This,dwFlags)	\
    ( (This)->lpVtbl -> SetFlags(This,dwFlags) ) 

#define ITask_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define ITask_SetAccountInformation(This,pwszAccountName,pwszPassword)	\
    ( (This)->lpVtbl -> SetAccountInformation(This,pwszAccountName,pwszPassword) ) 

#define ITask_GetAccountInformation(This,ppwszAccountName)	\
    ( (This)->lpVtbl -> GetAccountInformation(This,ppwszAccountName) ) 


#define ITask_SetApplicationName(This,pwszApplicationName)	\
    ( (This)->lpVtbl -> SetApplicationName(This,pwszApplicationName) ) 

#define ITask_GetApplicationName(This,ppwszApplicationName)	\
    ( (This)->lpVtbl -> GetApplicationName(This,ppwszApplicationName) ) 

#define ITask_SetParameters(This,pwszParameters)	\
    ( (This)->lpVtbl -> SetParameters(This,pwszParameters) ) 

#define ITask_GetParameters(This,ppwszParameters)	\
    ( (This)->lpVtbl -> GetParameters(This,ppwszParameters) ) 

#define ITask_SetWorkingDirectory(This,pwszWorkingDirectory)	\
    ( (This)->lpVtbl -> SetWorkingDirectory(This,pwszWorkingDirectory) ) 

#define ITask_GetWorkingDirectory(This,ppwszWorkingDirectory)	\
    ( (This)->lpVtbl -> GetWorkingDirectory(This,ppwszWorkingDirectory) ) 

#define ITask_SetPriority(This,dwPriority)	\
    ( (This)->lpVtbl -> SetPriority(This,dwPriority) ) 

#define ITask_GetPriority(This,pdwPriority)	\
    ( (This)->lpVtbl -> GetPriority(This,pdwPriority) ) 

#define ITask_SetTaskFlags(This,dwFlags)	\
    ( (This)->lpVtbl -> SetTaskFlags(This,dwFlags) ) 

#define ITask_GetTaskFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetTaskFlags(This,pdwFlags) ) 

#define ITask_SetMaxRunTime(This,dwMaxRunTimeMS)	\
    ( (This)->lpVtbl -> SetMaxRunTime(This,dwMaxRunTimeMS) ) 

#define ITask_GetMaxRunTime(This,pdwMaxRunTimeMS)	\
    ( (This)->lpVtbl -> GetMaxRunTime(This,pdwMaxRunTimeMS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITask_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0003 */
/* [local] */ 

// {148BD528-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(IID_IEnumWorkItems, 0x148BD528L, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0003_v0_0_s_ifspec;

#ifndef __IEnumWorkItems_INTERFACE_DEFINED__
#define __IEnumWorkItems_INTERFACE_DEFINED__

/* interface IEnumWorkItems */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_IEnumWorkItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("148BD528-A2AB-11CE-B11F-00AA00530503")
    IEnumWorkItems : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [out] */ LPWSTR **rgpwszNames,
            /* [out] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumWorkItems **ppEnumWorkItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumWorkItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumWorkItems * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumWorkItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumWorkItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumWorkItems * This,
            /* [in] */ ULONG celt,
            /* [out] */ LPWSTR **rgpwszNames,
            /* [out] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumWorkItems * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumWorkItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumWorkItems * This,
            /* [out] */ IEnumWorkItems **ppEnumWorkItems);
        
        END_INTERFACE
    } IEnumWorkItemsVtbl;

    interface IEnumWorkItems
    {
        CONST_VTBL struct IEnumWorkItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumWorkItems_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumWorkItems_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumWorkItems_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumWorkItems_Next(This,celt,rgpwszNames,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,rgpwszNames,pceltFetched) ) 

#define IEnumWorkItems_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumWorkItems_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumWorkItems_Clone(This,ppEnumWorkItems)	\
    ( (This)->lpVtbl -> Clone(This,ppEnumWorkItems) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumWorkItems_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0004 */
/* [local] */ 

// {148BD527-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(IID_ITaskScheduler, 0x148BD527L, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0004_v0_0_s_ifspec;

#ifndef __ITaskScheduler_INTERFACE_DEFINED__
#define __ITaskScheduler_INTERFACE_DEFINED__

/* interface ITaskScheduler */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_ITaskScheduler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("148BD527-A2AB-11CE-B11F-00AA00530503")
    ITaskScheduler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetTargetComputer( 
            /* [in] */ LPCWSTR pwszComputer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTargetComputer( 
            /* [out] */ LPWSTR *ppwszComputer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enum( 
            /* [out] */ IEnumWorkItems **ppEnumWorkItems) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Activate( 
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ REFIID riid,
            /* [out] */ IUnknown **ppUnk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ LPCWSTR pwszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NewWorkItem( 
            /* [in] */ LPCWSTR pwszTaskName,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFIID riid,
            /* [out] */ IUnknown **ppUnk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddWorkItem( 
            /* [in] */ LPCWSTR pwszTaskName,
            /* [in] */ IScheduledWorkItem *pWorkItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsOfType( 
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ REFIID riid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITaskSchedulerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITaskScheduler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITaskScheduler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITaskScheduler * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetTargetComputer )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszComputer);
        
        HRESULT ( STDMETHODCALLTYPE *GetTargetComputer )( 
            ITaskScheduler * This,
            /* [out] */ LPWSTR *ppwszComputer);
        
        HRESULT ( STDMETHODCALLTYPE *Enum )( 
            ITaskScheduler * This,
            /* [out] */ IEnumWorkItems **ppEnumWorkItems);
        
        HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ REFIID riid,
            /* [out] */ IUnknown **ppUnk);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszName);
        
        HRESULT ( STDMETHODCALLTYPE *NewWorkItem )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszTaskName,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFIID riid,
            /* [out] */ IUnknown **ppUnk);
        
        HRESULT ( STDMETHODCALLTYPE *AddWorkItem )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszTaskName,
            /* [in] */ IScheduledWorkItem *pWorkItem);
        
        HRESULT ( STDMETHODCALLTYPE *IsOfType )( 
            ITaskScheduler * This,
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ REFIID riid);
        
        END_INTERFACE
    } ITaskSchedulerVtbl;

    interface ITaskScheduler
    {
        CONST_VTBL struct ITaskSchedulerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITaskScheduler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITaskScheduler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITaskScheduler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITaskScheduler_SetTargetComputer(This,pwszComputer)	\
    ( (This)->lpVtbl -> SetTargetComputer(This,pwszComputer) ) 

#define ITaskScheduler_GetTargetComputer(This,ppwszComputer)	\
    ( (This)->lpVtbl -> GetTargetComputer(This,ppwszComputer) ) 

#define ITaskScheduler_Enum(This,ppEnumWorkItems)	\
    ( (This)->lpVtbl -> Enum(This,ppEnumWorkItems) ) 

#define ITaskScheduler_Activate(This,pwszName,riid,ppUnk)	\
    ( (This)->lpVtbl -> Activate(This,pwszName,riid,ppUnk) ) 

#define ITaskScheduler_Delete(This,pwszName)	\
    ( (This)->lpVtbl -> Delete(This,pwszName) ) 

#define ITaskScheduler_NewWorkItem(This,pwszTaskName,rclsid,riid,ppUnk)	\
    ( (This)->lpVtbl -> NewWorkItem(This,pwszTaskName,rclsid,riid,ppUnk) ) 

#define ITaskScheduler_AddWorkItem(This,pwszTaskName,pWorkItem)	\
    ( (This)->lpVtbl -> AddWorkItem(This,pwszTaskName,pWorkItem) ) 

#define ITaskScheduler_IsOfType(This,pwszName,riid)	\
    ( (This)->lpVtbl -> IsOfType(This,pwszName,riid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITaskScheduler_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0005 */
/* [local] */ 

EXTERN_C const CLSID CLSID_CTask;
EXTERN_C const CLSID CLSID_CTaskScheduler;
 
// {148BD520-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(CLSID_CTask, 0x148BD520, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);
 
// {148BD52A-A2AB-11CE-B11F-00AA00530503}
DEFINE_GUID(CLSID_CTaskScheduler, 0x148BD52A, 0xA2AB, 0x11CE, 0xB1, 0x1F, 0x00, 0xAA, 0x00, 0x53, 0x05, 0x03);
 

typedef struct _PSP *HPROPSHEETPAGE;

typedef 
enum _TASKPAGE
    {	TASKPAGE_TASK	= 0,
	TASKPAGE_SCHEDULE	= 1,
	TASKPAGE_SETTINGS	= 2
    } 	TASKPAGE;

// {4086658a-cbbb-11cf-b604-00c04fd8d565}
DEFINE_GUID(IID_IProvideTaskPage, 0x4086658aL, 0xcbbb, 0x11cf, 0xb6, 0x04, 0x00, 0xc0, 0x4f, 0xd8, 0xd5, 0x65);



extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0005_v0_0_s_ifspec;

#ifndef __IProvideTaskPage_INTERFACE_DEFINED__
#define __IProvideTaskPage_INTERFACE_DEFINED__

/* interface IProvideTaskPage */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_IProvideTaskPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4086658a-cbbb-11cf-b604-00c04fd8d565")
    IProvideTaskPage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPage( 
            /* [in] */ TASKPAGE tpType,
            /* [in] */ BOOL fPersistChanges,
            /* [out] */ HPROPSHEETPAGE *phPage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideTaskPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvideTaskPage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvideTaskPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvideTaskPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPage )( 
            IProvideTaskPage * This,
            /* [in] */ TASKPAGE tpType,
            /* [in] */ BOOL fPersistChanges,
            /* [out] */ HPROPSHEETPAGE *phPage);
        
        END_INTERFACE
    } IProvideTaskPageVtbl;

    interface IProvideTaskPage
    {
        CONST_VTBL struct IProvideTaskPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideTaskPage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IProvideTaskPage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IProvideTaskPage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IProvideTaskPage_GetPage(This,tpType,fPersistChanges,phPage)	\
    ( (This)->lpVtbl -> GetPage(This,tpType,fPersistChanges,phPage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IProvideTaskPage_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mstask_0000_0006 */
/* [local] */ 

#define ISchedulingAgent       ITaskScheduler
#define IEnumTasks             IEnumWorkItems
#define IID_ISchedulingAgent   IID_ITaskScheduler
#define CLSID_CSchedulingAgent CLSID_CTaskScheduler


extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstask_0000_0006_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mstimeid.h ===
// Copyright (C) Microsoft Corporation, 1999
//
// IDs for HTML+TIME
//
// Just follow the template when adding either DISPIDs or new interfaces.
//

#ifndef __TIMEDISPID_H__
#define __TIMEDISPID_H__

// Base offset:

//
// need to reposition our IDs low for DHTML Behaviors
//

#define DISPID_BASE                                             0x00000000

// Interface offsets:
#define TIMEELEMENT_OFFSET                                      0x0100
#define TIMEBODYELEMENT_OFFSET                                  0x0200
#define TIMEANIMATIONELEMENT_OFFSET                             0x0300
#define TIMEMEDIAELEMENT_OFFSET                                 0x0400
#define TIMEFACTORY_OFFSET                                      0x0500
#define TIMECOLLECTION_OFFSET                                   0x0600
#define TIMECOLLECTION_RESERVED_OFFSET                          0x0700
#define TIMEMEDIAPLAYER_OFFSET                                  0x0800
#define TIMEMEDIAPLAYERAUDIO_OFFSET                             0x0900
#define TIMEEVENTELEMENT_OFFSET                                 0x0A00
#define TIMEPLAYLIST_OFFSET                                     0x0B00
#define TIMEPLAYITEM_OFFSET                                     0x0C00
#define TIMEDVDPLAYEROBJECT_OFFSET                              0x0D00
#define SMILANIMATIONCOMPSITE_OFFSET                            0x0E00
#define SMILANIMATIONFRAGMENT_OFFSET                            0x0F00
#define TIMESTATE_OFFSET                                        0x1000
#define TIMEDMPLAYEROBJECT_OFFSET                               0x1100
#define TIMEMEDIAPLAYERSITE_OFFSET                              0x1200
#define TIMEMEDIAPLAYERCONTROL_OFFSET                           0x1300
#define TIMEMEDIAELEMENT2_OFFSET                                0x1400
#define TIMETRANSITIONELEMENT_OFFSET                            0x1500
#define TIMEMEDIAPLAYERNETWORK_OFFSET                           0x1600

#define DISPID_TIME_MIN                                         0x0001
#define DISPID_TIME_MAX                                         0x270F

// Interface bases:
#define DISPID_TIMEELEMENT_BASE                                 (DISPID_BASE + TIMEELEMENT_OFFSET)
#define DISPID_TIMEBODYELEMENT_BASE                             (DISPID_BASE + TIMEBODYELEMENT_OFFSET)
#define DISPID_TIMEMEDIAELEMENT_BASE                            (DISPID_BASE + TIMEMEDIAELEMENT_OFFSET)
#define DISPID_TIMEEVENTELEMENT_BASE                            (DISPID_BASE + TIMEEVENTELEMENT_OFFSET)
#define DISPID_TIMEFACTORY_BASE                                 (DISPID_BASE + TIMEFACTORY_OFFSET)
#define DISPID_TIMECOLLECTION_BASE                              (DISPID_BASE + TIMECOLLECTION_OFFSET)
#define DISPID_TIMECOLLECTION_RESERVED_BASE                     (DISPID_BASE + TIMECOLLECTION_RESERVED_OFFSET)
#define DISPID_TIMEMEDIAPLAYER_BASE                             (DISPID_BASE + TIMEMEDIAPLAYER_OFFSET)
#define DISPID_TIMEMEDIAPLAYERAUDIO_BASE                        (DISPID_BASE + TIMEMEDIAPLAYERAUDIO_OFFSET)
#define DISPID_TIMEPLAYLIST_BASE                                (DISPID_BASE + TIMEPLAYLIST_OFFSET)
#define DISPID_TIMEPLAYITEM_BASE                                (DISPID_BASE + TIMEPLAYITEM_OFFSET)
#define DISPID_TIMEDVDPLAYEROBJECT_BASE                         (DISPID_BASE + TIMEDVDPLAYEROBJECT_OFFSET)
#define DISPID_TIMEANIMATIONELEMENT_BASE                        (DISPID_BASE + TIMEANIMATIONELEMENT_OFFSET)
#define DISPID_SMILANIMATIONCOMPSITE_BASE                       (DISPID_BASE + SMILANIMATIONCOMPSITE_OFFSET)
#define DISPID_SMILANIMATIONFRAGMENT_BASE                       (DISPID_BASE + SMILANIMATIONFRAGMENT_OFFSET)
#define DISPID_TIMESTATE_BASE                                   (DISPID_BASE + TIMESTATE_OFFSET)
#define DISPID_TIMEDMPLAYEROBJECT_BASE                          (DISPID_BASE + TIMEDMPLAYEROBJECT_OFFSET)
#define DISPID_TIMEMEDIAPLAYERSITE_BASE                         (DISPID_BASE + TIMEMEDIAPLAYERSITE_OFFSET)
#define DISPID_TIMEMEDIAPLAYERCONTROL_BASE                      (DISPID_BASE + TIMEMEDIAPLAYERCONTROL_OFFSET)
#define DISPID_TIMEMEDIAELEMENT2_BASE                           (DISPID_BASE + TIMEMEDIAELEMENT2_OFFSET)
#define DISPID_TIMETRANSITIONELEMENT_BASE                       (DISPID_BASE + TIMETRANSITIONELEMENT_OFFSET)
#define DISPID_TIMEMEDIAPLAYERNETWORK_BASE                      (DISPID_BASE + TIMEMEDIAPLAYERNETWORK_OFFSET)

// Collection Reserve (for expando's and ordinal's)
#define DISPID_COLLECTION_RESERVED_MIN                          DISPID_TIMECOLLECTION_RESERVED_BASE
#define DISPID_COLLECTION_RESERVED_MAX                          0x0000007FF

// =============================================
// ITIMEElement DISPIDs:
// =============================================

// XML Attributes
#define DISPID_TIMEELEMENT_ACCELERATE                           (DISPID_TIMEELEMENT_BASE + 0x01)
#define DISPID_TIMEELEMENT_ACCELERATEFROM                       (DISPID_TIMEELEMENT_BASE + 0x02)
#define DISPID_TIMEELEMENT_AUTOREVERSE                          (DISPID_TIMEELEMENT_BASE + 0x03)
#define DISPID_TIMEELEMENT_BEGIN                                (DISPID_TIMEELEMENT_BASE + 0x04)
#define DISPID_TIMEELEMENT_DECELERATE                           (DISPID_TIMEELEMENT_BASE + 0x05)
#define DISPID_TIMEELEMENT_DECELERATETO                         (DISPID_TIMEELEMENT_BASE + 0x06)
#define DISPID_TIMEELEMENT_DUR                                  (DISPID_TIMEELEMENT_BASE + 0x07)
#define DISPID_TIMEELEMENT_END                                  (DISPID_TIMEELEMENT_BASE + 0x08)
#define DISPID_TIMEELEMENT_FILL                                 (DISPID_TIMEELEMENT_BASE + 0x0a)
#define DISPID_TIMEELEMENT_MUTE                                 (DISPID_TIMEELEMENT_BASE + 0x0b)
#define DISPID_TIMEELEMENT_REPEATCOUNT                          (DISPID_TIMEELEMENT_BASE + 0x0c)
#define DISPID_TIMEELEMENT_REPEATDUR                            (DISPID_TIMEELEMENT_BASE + 0x0d)
#define DISPID_TIMEELEMENT_RESTART                              (DISPID_TIMEELEMENT_BASE + 0x0e)
#define DISPID_TIMEELEMENT_SPEED                                (DISPID_TIMEELEMENT_BASE + 0x0f)
#define DISPID_TIMEELEMENT_SYNCBEHAVIOR                         (DISPID_TIMEELEMENT_BASE + 0x10)
#define DISPID_TIMEELEMENT_SYNCMASTER                           (DISPID_TIMEELEMENT_BASE + 0x11)
#define DISPID_TIMEELEMENT_SYNCTOLERANCE                        (DISPID_TIMEELEMENT_BASE + 0x12)
#define DISPID_TIMEELEMENT_TIMEACTION                           (DISPID_TIMEELEMENT_BASE + 0x13)
#define DISPID_TIMEELEMENT_TIMECONTAINER                        (DISPID_TIMEELEMENT_BASE + 0x14)
#define DISPID_TIMEELEMENT_UPDATEMODE                           (DISPID_TIMEELEMENT_BASE + 0x15)
#define DISPID_TIMEELEMENT_VOLUME                               (DISPID_TIMEELEMENT_BASE + 0x16)

// Properties
#define DISPID_TIMEELEMENT_CURRTIMESTATE                        (DISPID_TIMEELEMENT_BASE + 0x20)
#define DISPID_TIMEELEMENT_TIMEALL                              (DISPID_TIMEELEMENT_BASE + 0x21)
#define DISPID_TIMEELEMENT_TIMECHILDREN                         (DISPID_TIMEELEMENT_BASE + 0x22)
#define DISPID_TIMEELEMENT_TIMEPARENT                           (DISPID_TIMEELEMENT_BASE + 0x23)
#define DISPID_TIMEELEMENT_ISPAUSED                             (DISPID_TIMEELEMENT_BASE + 0x24)

// Methods
#define DISPID_TIMEELEMENT_BEGINELEMENT                         (DISPID_TIMEELEMENT_BASE + 0x30)
#define DISPID_TIMEELEMENT_BEGINELEMENTAT                       (DISPID_TIMEELEMENT_BASE + 0x31)
#define DISPID_TIMEELEMENT_ENDELEMENT                           (DISPID_TIMEELEMENT_BASE + 0x32)
#define DISPID_TIMEELEMENT_ENDELEMENTAT                         (DISPID_TIMEELEMENT_BASE + 0x33)
#define DISPID_TIMEELEMENT_PAUSEELEMENT                         (DISPID_TIMEELEMENT_BASE + 0x34)
#define DISPID_TIMEELEMENT_RESET                                (DISPID_TIMEELEMENT_BASE + 0x35)
#define DISPID_TIMEELEMENT_RESUMEELEMENT                        (DISPID_TIMEELEMENT_BASE + 0x36)
#define DISPID_TIMEELEMENT_SEEKACTIVETIME                       (DISPID_TIMEELEMENT_BASE + 0x37)
#define DISPID_TIMEELEMENT_SEEKSEGMENTTIME                      (DISPID_TIMEELEMENT_BASE + 0x38)
#define DISPID_TIMEELEMENT_SEEKTO                               (DISPID_TIMEELEMENT_BASE + 0x39)
#define DISPID_TIMEELEMENT_UPDATE                               (DISPID_TIMEELEMENT_BASE + 0x3a)
#define DISPID_TIMEELEMENT_DOCUMENTTIMETOPARENTTIME             (DISPID_TIMEELEMENT_BASE + 0x3b)
#define DISPID_TIMEELEMENT_PARENTTIMETODOCUMENTTIME             (DISPID_TIMEELEMENT_BASE + 0x3c)
#define DISPID_TIMEELEMENT_PARENTTIMETOACTIVETIME               (DISPID_TIMEELEMENT_BASE + 0x3d)
#define DISPID_TIMEELEMENT_ACTIVETIMETOPARENTTIME               (DISPID_TIMEELEMENT_BASE + 0x3e)
#define DISPID_TIMEELEMENT_ACTIVETIMETOSEGMENTTIME              (DISPID_TIMEELEMENT_BASE + 0x3f)
#define DISPID_TIMEELEMENT_SEGMENTTIMETOACTIVETIME              (DISPID_TIMEELEMENT_BASE + 0x40)
#define DISPID_TIMEELEMENT_SEGMENTTIMETOSIMPLETIME              (DISPID_TIMEELEMENT_BASE + 0x41)
#define DISPID_TIMEELEMENT_SIMPLETIMETOSEGMENTTIME              (DISPID_TIMEELEMENT_BASE + 0x42)

// Container attributes
#define DISPID_TIMEELEMENT_ENDSYNC                              (DISPID_TIMEELEMENT_BASE + 0x50)

// Container Properties
#define DISPID_TIMEELEMENT_ACTIVEELEMENTS                       (DISPID_TIMEELEMENT_BASE + 0x60)
#define DISPID_TIMEELEMENT_HASMEDIA                             (DISPID_TIMEELEMENT_BASE + 0x61)

// Container Methods
#define DISPID_TIMEELEMENT_NEXTELEMENT                          (DISPID_TIMEELEMENT_BASE + 0x70)
#define DISPID_TIMEELEMENT_PREVELEMENT                          (DISPID_TIMEELEMENT_BASE + 0x71)

//
// ITIMEBodyElement DISPIDs:
//

// empty interface


// =============================================
// ITIMEMediaElement DISPIDs:
// =============================================

// XML Attributes
#define DISPID_TIMEMEDIAELEMENT_CLIPBEGIN                       (DISPID_TIMEMEDIAELEMENT_BASE + 0x01)
#define DISPID_TIMEMEDIAELEMENT_CLIPEND                         (DISPID_TIMEMEDIAELEMENT_BASE + 0x02)
#define DISPID_TIMEMEDIAELEMENT_PLAYER                          (DISPID_TIMEMEDIAELEMENT_BASE + 0x03)
#define DISPID_TIMEMEDIAELEMENT_SRC                             (DISPID_TIMEMEDIAELEMENT_BASE + 0x04)
#define DISPID_TIMEMEDIAELEMENT_TYPE                            (DISPID_TIMEMEDIAELEMENT_BASE + 0x05)

// Properties
#define DISPID_TIMEMEDIAELEMENT_ABSTRACT                        (DISPID_TIMEMEDIAELEMENT_BASE + 0x10)
#define DISPID_TIMEMEDIAELEMENT_AUTHOR                          (DISPID_TIMEMEDIAELEMENT_BASE + 0x11)
#define DISPID_TIMEMEDIAELEMENT_COPYRIGHT                       (DISPID_TIMEMEDIAELEMENT_BASE + 0x12)
#define DISPID_TIMEMEDIAELEMENT_HASAUDIO                        (DISPID_TIMEMEDIAELEMENT_BASE + 0x13)
#define DISPID_TIMEMEDIAELEMENT_HASVISUAL                       (DISPID_TIMEMEDIAELEMENT_BASE + 0x14)
#define DISPID_TIMEMEDIAELEMENT_MEDIACAPS                       (DISPID_TIMEMEDIAELEMENT_BASE + 0x15)
#define DISPID_TIMEMEDIAELEMENT_MEDIADUR                        (DISPID_TIMEMEDIAELEMENT_BASE + 0x16)
#define DISPID_TIMEMEDIAELEMENT_MEDIAHEIGHT                     (DISPID_TIMEMEDIAELEMENT_BASE + 0x17)
#define DISPID_TIMEMEDIAELEMENT_MEDIAWIDTH                      (DISPID_TIMEMEDIAELEMENT_BASE + 0x18)
#define DISPID_TIMEMEDIAELEMENT_PLAYEROBJECT                    (DISPID_TIMEMEDIAELEMENT_BASE + 0x19)
#define DISPID_TIMEMEDIAELEMENT_PLAYLIST                        (DISPID_TIMEMEDIAELEMENT_BASE + 0x1a)
#define DISPID_TIMEMEDIAELEMENT_RATING                          (DISPID_TIMEMEDIAELEMENT_BASE + 0x1b)
#define DISPID_TIMEMEDIAELEMENT_TITLE                           (DISPID_TIMEMEDIAELEMENT_BASE + 0x1c)
#define DISPID_TIMEMEDIAELEMENT_HASPLAYLIST                     (DISPID_TIMEMEDIAELEMENT_BASE + 0x1d)


// Media Caps
#define DISPID_TIMEMEDIAELEMENT_CANPAUSE                        (DISPID_TIMEMEDIAELEMENT_BASE + 0x30)
#define DISPID_TIMEMEDIAELEMENT_CANSEEK                         (DISPID_TIMEMEDIAELEMENT_BASE + 0x32)

// Methods

// =============================================
// ITIMEAnimationElement DISPIDs
// =============================================

#define DISPID_TIMEANIMATIONELEMENT_ATTRIBUTENAME               (DISPID_TIMEANIMATIONELEMENT_BASE + 0x01)
#define DISPID_TIMEANIMATIONELEMENT_BY                          (DISPID_TIMEANIMATIONELEMENT_BASE + 0x02)
#define DISPID_TIMEANIMATIONELEMENT_CALCMODE                    (DISPID_TIMEANIMATIONELEMENT_BASE + 0x03)
#define DISPID_TIMEANIMATIONELEMENT_FROM                        (DISPID_TIMEANIMATIONELEMENT_BASE + 0x04)
#define DISPID_TIMEANIMATIONELEMENT_KEYSPLINES                  (DISPID_TIMEANIMATIONELEMENT_BASE + 0x05)
#define DISPID_TIMEANIMATIONELEMENT_KEYTIMES                    (DISPID_TIMEANIMATIONELEMENT_BASE + 0x06)
#define DISPID_TIMEANIMATIONELEMENT_TARGETELEMENT               (DISPID_TIMEANIMATIONELEMENT_BASE + 0x07)
#define DISPID_TIMEANIMATIONELEMENT_TO                          (DISPID_TIMEANIMATIONELEMENT_BASE + 0x08)
#define DISPID_TIMEANIMATIONELEMENT_VALUES                      (DISPID_TIMEANIMATIONELEMENT_BASE + 0x09)

#define DISPID_TIMEANIMATIONELEMENT_ORIGIN                      (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0a)
#define DISPID_TIMEANIMATIONELEMENT_PATH                        (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0b)

#define DISPID_TIMEANIMATIONELEMENT_ADDITIVE                    (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0c)
#define DISPID_TIMEANIMATIONELEMENT_ACCUMULATE                  (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0d)

#define DISPID_TIMEANIMATIONELEMENT_TYPE                        (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0e)
#define DISPID_TIMEANIMATIONELEMENT_SUBTYPE                     (DISPID_TIMEANIMATIONELEMENT_BASE + 0x0f)
#define DISPID_TIMEANIMATIONELEMENT_MODE                        (DISPID_TIMEANIMATIONELEMENT_BASE + 0x10)
#define DISPID_TIMEANIMATIONELEMENT_FADECOLOR                   (DISPID_TIMEANIMATIONELEMENT_BASE + 0x11)

// IAnimationComposerSite DISPIDs
#define DISPID_SMILANIMATIONCOMPSITE_ADDFRAGMENT                (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x01)
#define DISPID_SMILANIMATIONCOMPSITE_REMOVEFRAGMENT             (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x02)
#define DISPID_SMILANIMATIONCOMPSITE_INSERTFRAGMENT             (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x03)
#define DISPID_SMILANIMATIONCOMPSITE_ENUMERATEFRAGMENTS         (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x04)
#define DISPID_SMILANIMATIONCOMPSITE_REGISTERFACTORY            (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x05)
#define DISPID_SMILANIMATIONCOMPSITE_UNREGISTER_FACTORY         (DISPID_SMILANIMATIONCOMPSITE_BASE + 0x06)

// IAnimationFragment
#define DISPID_SMILANIMATIONFRAGMENT_ELEMENT                    (DISPID_SMILANIMATIONFRAGMENT_BASE + 0x01)
#define DISPID_SMILANIMATIONFRAGMENT_VALUE                      (DISPID_SMILANIMATIONFRAGMENT_BASE + 0x02)
#define DISPID_SMILANIMATIONFRAGMENT_DETACHFROMCOMPOSER         (DISPID_SMILANIMATIONFRAGMENT_BASE + 0x03)

// ITIMEEventElement DISPIDs:
#define DISPID_TIMEEVENTELEMENT_TYPE                            (DISPID_TIMEEVENTELEMENT_BASE + 0x01)
#define DISPID_TIMEEVENTELEMENT_ACTIVE                          (DISPID_TIMEEVENTELEMENT_BASE + 0x02)

// ITIMEFactory DISPIDs:
#define DISPID_TIMEFACTORY_CREATETIMEELEMENT                    (DISPID_TIMEFACTORY_BASE + 0x01)
#define DISPID_TIMEFACTORY_CREATETIMEELEMENTBODY                (DISPID_TIMEFACTORY_BASE + 0x02)
#define DISPID_TIMEFACTORY_CREATETIMEDAELEMENT                  (DISPID_TIMEFACTORY_BASE + 0x03)
#define DISPID_TIMEFACTORY_CREATETIMEMEDIAELEMENT               (DISPID_TIMEFACTORY_BASE + 0x04)

//
// ITIMEElementCollection
//
#define DISPID_TIMEELEMENTCOLLECTION_LENGTH                     (DISPID_TIMECOLLECTION_BASE + 0x01)
#define DISPID_TIMEELEMENTCOLLECTION__NEWENUM                   (DISPID_NEWENUM)
#define DISPID_TIMEELEMENTCOLLECTION_ITEM                       (DISPID_VALUE)
#define DISPID_TIMEELEMENTCOLLECTION_TAGS                       (DISPID_TIMECOLLECTION_BASE + 0x02)

//
// ITIMEMediaPlayerSite
//

#define DISPID_TIMEMEDIAPLAYERSITE_TIMEELEMENT                  (DISPID_TIMEMEDIAPLAYERSITE_BASE + 0x01)
#define DISPID_TIMEMEDIAPLAYERSITE_TIMESTATE                    (DISPID_TIMEMEDIAPLAYERSITE_BASE + 0x02)
#define DISPID_TIMEMEDIAPLAYERSITE_REPORTERROR                  (DISPID_TIMEMEDIAPLAYERSITE_BASE + 0x03)

//
// ITIMEMediaPlayer
//

#define DISPID_TIMEMEDIAPLAYER_INIT                             (DISPID_TIMEMEDIAPLAYER_BASE + 0x01)
#define DISPID_TIMEMEDIAPLAYER_DETACH                           (DISPID_TIMEMEDIAPLAYER_BASE + 0x02)

#define DISPID_TIMEMEDIAPLAYER_BEGIN                            (DISPID_TIMEMEDIAPLAYER_BASE + 0x10)
#define DISPID_TIMEMEDIAPLAYER_END                              (DISPID_TIMEMEDIAPLAYER_BASE + 0x11)
#define DISPID_TIMEMEDIAPLAYER_RESUME                           (DISPID_TIMEMEDIAPLAYER_BASE + 0x12)
#define DISPID_TIMEMEDIAPLAYER_PAUSE                            (DISPID_TIMEMEDIAPLAYER_BASE + 0x13)
#define DISPID_TIMEMEDIAPLAYER_REPEAT                           (DISPID_TIMEMEDIAPLAYER_BASE + 0x14)
#define DISPID_TIMEMEDIAPLAYER_RESET                            (DISPID_TIMEMEDIAPLAYER_BASE + 0x15)
#define DISPID_TIMEMEDIAPLAYER_SEEK                             (DISPID_TIMEMEDIAPLAYER_BASE + 0x16)

// Properties - w
#define DISPID_TIMEMEDIAPLAYER_SRC                              (DISPID_TIMEMEDIAPLAYER_BASE + 0x20)
#define DISPID_TIMEMEDIAPLAYER_CLIPBEGIN                        (DISPID_TIMEMEDIAPLAYER_BASE + 0x21)
#define DISPID_TIMEMEDIAPLAYER_CLIPEND                          (DISPID_TIMEMEDIAPLAYER_BASE + 0x22)

// Properties - r/o
#define DISPID_TIMEMEDIAPLAYER_ABSTRACT                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x30)
#define DISPID_TIMEMEDIAPLAYER_AUTHOR                           (DISPID_TIMEMEDIAPLAYER_BASE + 0x31)
#define DISPID_TIMEMEDIAPLAYER_CANPAUSE                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x32)
#define DISPID_TIMEMEDIAPLAYER_CANSEEK                          (DISPID_TIMEMEDIAPLAYER_BASE + 0x34)
#define DISPID_TIMEMEDIAPLAYER_CLIPDUR                          (DISPID_TIMEMEDIAPLAYER_BASE + 0x35)
#define DISPID_TIMEMEDIAPLAYER_COPYRIGHT                        (DISPID_TIMEMEDIAPLAYER_BASE + 0x36)
#define DISPID_TIMEMEDIAPLAYER_CURRTIME                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x37)
#define DISPID_TIMEMEDIAPLAYER_CUSTOM_OBJECT                    (DISPID_TIMEMEDIAPLAYER_BASE + 0x38)
#define DISPID_TIMEMEDIAPLAYER_HASAUDIO                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x39)
#define DISPID_TIMEMEDIAPLAYER_HASVISUAL                        (DISPID_TIMEMEDIAPLAYER_BASE + 0x3A)
#define DISPID_TIMEMEDIAPLAYER_MEDIADUR                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x3B)
#define DISPID_TIMEMEDIAPLAYER_MEDIAHEIGHT                      (DISPID_TIMEMEDIAPLAYER_BASE + 0x3C)
#define DISPID_TIMEMEDIAPLAYER_MEDIAWIDTH                       (DISPID_TIMEMEDIAPLAYER_BASE + 0x3D)
#define DISPID_TIMEMEDIAPLAYER_PLAYLIST                         (DISPID_TIMEMEDIAPLAYER_BASE + 0x3E)
#define DISPID_TIMEMEDIAPLAYER_RATING                           (DISPID_TIMEMEDIAPLAYER_BASE + 0x3F)
#define DISPID_TIMEMEDIAPLAYER_STATE                            (DISPID_TIMEMEDIAPLAYER_BASE + 0x40)
#define DISPID_TIMEMEDIAPLAYER_TITLE                            (DISPID_TIMEMEDIAPLAYER_BASE + 0x41)

//
// ITIMEMediaPlayerAudio
//
#define DISPID_TIMEMEDIAPLAYERAUDIO_VOLUME                      (DISPID_TIMEMEDIAPLAYERAUDIO_BASE + 0x01)
#define DISPID_TIMEMEDIAPLAYERAUDIO_MUTE                        (DISPID_TIMEMEDIAPLAYERAUDIO_BASE + 0x02)

//
// ITIMEMediaPlayerNetwork
//
#define DISPID_TIMEMEDIAPLAYERNETWORK_HASDOWNLOADPROGRESS       (DISPID_TIMEMEDIAPLAYERNETWORK_BASE + 0x01)
#define DISPID_TIMEMEDIAPLAYERNETWORK_DOWNLOADPROGRESS          (DISPID_TIMEMEDIAPLAYERNETWORK_BASE + 0x02)
#define DISPID_TIMEMEDIAPLAYERNETWORK_ISBUFFERED                (DISPID_TIMEMEDIAPLAYERNETWORK_BASE + 0x03)
#define DISPID_TIMEMEDIAPLAYERNETWORK_BUFFERINGPROGRESS         (DISPID_TIMEMEDIAPLAYERNETWORK_BASE + 0x04)

//
// ITIMEMediaPlayerControl
//

#define DISPID_TIMEMEDIAPLAYERCONTROL_GETCONTROL                (DISPID_TIMEMEDIAPLAYERCONTROL_BASE + 0x01)

// ITIMEActiveElementsCollection
#define DISPID_ACTIVEELMENTS_LENGTH                             (0x000005dc) //special dispid specific to collections
#define DISPID_ACTIVEELMENTS_NEWENUM                            (DISPID_NEWENUM)
#define DISPID_ACTIVEELMENTS_ITEM                               (0x00000000) //designates this as the default value for this collection.


// ITIMEPlayList collectoion
#define DISPID_TIMEPLAYLIST_ACTIVETRACK                         (DISPID_TIMEPLAYLIST_BASE + 0x01)
#define DISPID_TIMEPLAYLIST_DUR                                 (DISPID_TIMEPLAYLIST_BASE + 0x02)
#define DISPID_TIMEPLAYLIST_ITEM                                (0x00000000) //designates this as the default value for this collection.
#define DISPID_TIMEPLAYLIST_LENGTH                              (0x000005dc) //special dispid specific to collections
#define DISPID_TIMEPLAYLIST_NEWENUM                             (DISPID_NEWENUM)
#define DISPID_TIMEPLAYLIST_NEXTTRACK                           (DISPID_TIMEPLAYLIST_BASE + 0x03)
#define DISPID_TIMEPLAYLIST_PREVTRACK                           (DISPID_TIMEPLAYLIST_BASE + 0x04)

//ITIMEPlayItem interface
#define DISPID_TIMEPLAYITEM_ABSTRACT                            (DISPID_TIMEPLAYITEM_BASE + 0x01)
#define DISPID_TIMEPLAYITEM_AUTHOR                              (DISPID_TIMEPLAYITEM_BASE + 0x02)
#define DISPID_TIMEPLAYITEM_COPYRIGHT                           (DISPID_TIMEPLAYITEM_BASE + 0x03)
#define DISPID_TIMEPLAYITEM_DUR                                 (DISPID_TIMEPLAYITEM_BASE + 0x04)
#define DISPID_TIMEPLAYITEM_INDEX                               (DISPID_TIMEPLAYITEM_BASE + 0x05)
#define DISPID_TIMEPLAYITEM_RATING                              (DISPID_TIMEPLAYITEM_BASE + 0x06)
#define DISPID_TIMEPLAYITEM_SRC                                 (DISPID_TIMEPLAYITEM_BASE + 0x07)
#define DISPID_TIMEPLAYITEM_TITLE                               (DISPID_TIMEPLAYITEM_BASE + 0x08)
        
//Methods
#define DISPID_TIMEPLAYITEM_SETACTIVE                           (DISPID_TIMEPLAYITEM_BASE + 0x0a)

//ITIMEPlayItem2 interface continues ITIMEPlayItem interface
#define DISPID_TIMEPLAYITEM_BANNER                              (DISPID_TIMEPLAYITEM_BASE + 0x10)
#define DISPID_TIMEPLAYITEM_BANNERABSTRACT                      (DISPID_TIMEPLAYITEM_BASE + 0x11)
#define DISPID_TIMEPLAYITEM_BANNERMOREINFO                      (DISPID_TIMEPLAYITEM_BASE + 0x12)

#define DISPID_ITIMEDVDPLAYEROBJECT_UPPERBUTTONSEL              (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x01)
#define DISPID_ITIMEDVDPLAYEROBJECT_LOWERBUTTONSEL              (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x02)
#define DISPID_ITIMEDVDPLAYEROBJECT_LEFTBUTTONSEL               (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x03)
#define DISPID_ITIMEDVDPLAYEROBJECT_RIGHTBUTTONSEL              (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x04)
#define DISPID_ITIMEDVDPLAYEROBJECT_BUTTONACTIVATE              (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x05)
#define DISPID_ITIMEDVDPLAYEROBJECT_GOTOMENU                    (DISPID_TIMEDVDPLAYEROBJECT_BASE +0x06)

// =============================================
// ITIMEState
// =============================================

#define DISPID_TIMESTATE_ACTIVEDUR                              (DISPID_TIMESTATE_BASE + 0x01)
#define DISPID_TIMESTATE_ACTIVETIME                             (DISPID_TIMESTATE_BASE + 0x02)
#define DISPID_TIMESTATE_ISACTIVE                               (DISPID_TIMESTATE_BASE + 0x03)
#define DISPID_TIMESTATE_ISON                                   (DISPID_TIMESTATE_BASE + 0x04)
#define DISPID_TIMESTATE_ISPAUSED                               (DISPID_TIMESTATE_BASE + 0x05)
#define DISPID_TIMESTATE_ISMUTED                                (DISPID_TIMESTATE_BASE + 0x06)
#define DISPID_TIMESTATE_PARENTTIMEBEGIN                        (DISPID_TIMESTATE_BASE + 0x07)
#define DISPID_TIMESTATE_PARENTTIMEEND                          (DISPID_TIMESTATE_BASE + 0x08)
#define DISPID_TIMESTATE_PROGRESS                               (DISPID_TIMESTATE_BASE + 0x09)
#define DISPID_TIMESTATE_REPEATCOUNT                            (DISPID_TIMESTATE_BASE + 0x0a)
#define DISPID_TIMESTATE_SEGMENTDUR                             (DISPID_TIMESTATE_BASE + 0x0b)
#define DISPID_TIMESTATE_SEGMENTTIME                            (DISPID_TIMESTATE_BASE + 0x0c)
#define DISPID_TIMESTATE_SIMPLEDUR                              (DISPID_TIMESTATE_BASE + 0x0d)
#define DISPID_TIMESTATE_SIMPLETIME                             (DISPID_TIMESTATE_BASE + 0x0e)
#define DISPID_TIMESTATE_SPEED                                  (DISPID_TIMESTATE_BASE + 0x0f)
#define DISPID_TIMESTATE_STATE                                  (DISPID_TIMESTATE_BASE + 0x10)
#define DISPID_TIMESTATE_STATESTRING                            (DISPID_TIMESTATE_BASE + 0x11)
#define DISPID_TIMESTATE_VOLUME                                 (DISPID_TIMESTATE_BASE + 0x12)

#define DISPID_ITIMEDMPLAYEROBJECT_HASDM                        (DISPID_TIMEDMPLAYEROBJECT_BASE +0x01)

// =============================================
// Transitions related stuff
// =============================================

#define DISPID_TIMEMEDIAELEMENT2_EARLIESTTIME                   (DISPID_TIMEMEDIAELEMENT2_BASE + 0x03)
#define DISPID_TIMEMEDIAELEMENT2_LATESTTTIME                    (DISPID_TIMEMEDIAELEMENT2_BASE + 0x04)
#define DISPID_TIMEMEDIAELEMENT2_MINBUFF                        (DISPID_TIMEMEDIAELEMENT2_BASE + 0x05)
#define DISPID_TIMEMEDIAELEMENT2_DLTOTAL                        (DISPID_TIMEMEDIAELEMENT2_BASE + 0x06)
#define DISPID_TIMEMEDIAELEMENT2_DLCURRENT                      (DISPID_TIMEMEDIAELEMENT2_BASE + 0x07)
#define DISPID_TIMEMEDIAELEMENT2_ISSTREAMED                     (DISPID_TIMEMEDIAELEMENT2_BASE + 0x08)
#define DISPID_TIMEMEDIAELEMENT2_BUFPROG                        (DISPID_TIMEMEDIAELEMENT2_BASE + 0x09)
#define DISPID_TIMEMEDIAELEMENT2_HASDLPROGRESS                  (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0a)
#define DISPID_TIMEMEDIAELEMENT2_MIMETYPE                       (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0b)
#define DISPID_TIMEMEDIAELEMENT2_SEEKTOFRAME                    (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0c)
#define DISPID_TIMEMEDIAELEMENT2_DECODEMIMETYPE                 (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0d)
#define DISPID_TIMEMEDIAELEMENT_CURRFRAME                       (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0e)
#define DISPID_TIMEMEDIAELEMENT2_DLPROG                         (DISPID_TIMEMEDIAELEMENT2_BASE + 0x0f)

#define DISPID_TIMETRANSITIONELEMENT_TYPE                       (DISPID_TIMETRANSITIONELEMENT_BASE + 0x01)
#define DISPID_TIMETRANSITIONELEMENT_SUBTYPE                    (DISPID_TIMETRANSITIONELEMENT_BASE + 0x02)
#define DISPID_TIMETRANSITIONELEMENT_DUR                        (DISPID_TIMETRANSITIONELEMENT_BASE + 0x03)
#define DISPID_TIMETRANSITIONELEMENT_STARTPROGRESS              (DISPID_TIMETRANSITIONELEMENT_BASE + 0x04)
#define DISPID_TIMETRANSITIONELEMENT_ENDPROGRESS                (DISPID_TIMETRANSITIONELEMENT_BASE + 0x05)
#define DISPID_TIMETRANSITIONELEMENT_DIRECTION                  (DISPID_TIMETRANSITIONELEMENT_BASE + 0x06)
#define DISPID_TIMETRANSITIONELEMENT_REPEATCOUNT                (DISPID_TIMETRANSITIONELEMENT_BASE + 0x07)
#define DISPID_TIMETRANSITIONELEMENT_BEGIN                      (DISPID_TIMETRANSITIONELEMENT_BASE + 0x08)
#define DISPID_TIMETRANSITIONELEMENT_END                        (DISPID_TIMETRANSITIONELEMENT_BASE + 0x09)

#endif  //__TIMEDISPID_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSTcpIP.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    mstcpip.h

Abstract:

    This module contains Microsoft-specific extensions to the core
    Winsock definitions.

Environment:

    user mode or kernel mode

--*/

#ifndef _MSTCPIP_
#define _MSTCPIP_

#if (NTDDI_VERSION >= NTDDI_WIN7)
// GUID definition for use with Secure Sockets API
// aec2ef9c-3a4d-4d3e-8842-239942e39a47
DEFINE_GUID(
   SOCKET_DEFAULT2_QM_POLICY,
   0xaec2ef9c,
   0x3a4d,
   0x4d3e,
   0x88, 0x42, 0x23, 0x99, 0x42, 0xe3, 0x9a, 0x47
);
#endif

#ifndef GUID_DEFS_ONLY
#if _MSC_VER > 1000
#pragma once
#endif
#ifdef __cplusplus
extern "C" {
#endif

#pragma warning(push)
#pragma warning(disable:4200)
#pragma warning(disable:4201)

#ifdef _PREFAST_
#pragma prefast(push)
#pragma prefast(disable: 24002, "Requires explicit use of IPv4 address types.")
#endif

#ifndef ASSERT
#define MSTCPIP_ASSERT_UNDEFINED
#define ASSERT(exp) ((VOID) 0)
#endif

#ifdef _MSC_VER
#define MSTCPIP_INLINE __inline
#else
#define MSTCPIP_INLINE extern inline /* GNU style */
#endif

#include <nldef.h>

/* Argument structure for SIO_KEEPALIVE_VALS */

struct tcp_keepalive {
    ULONG onoff;
    ULONG keepalivetime;
    ULONG keepaliveinterval;
};

//
// New WSAIoctl Options
//
#define SIO_RCVALL            _WSAIOW(IOC_VENDOR,1)
#define SIO_RCVALL_MCAST      _WSAIOW(IOC_VENDOR,2)
#define SIO_RCVALL_IGMPMCAST  _WSAIOW(IOC_VENDOR,3)
#define SIO_KEEPALIVE_VALS    _WSAIOW(IOC_VENDOR,4)
#define SIO_ABSORB_RTRALERT   _WSAIOW(IOC_VENDOR,5)
#define SIO_UCAST_IF          _WSAIOW(IOC_VENDOR,6)
#define SIO_LIMIT_BROADCASTS  _WSAIOW(IOC_VENDOR,7)
#define SIO_INDEX_BIND        _WSAIOW(IOC_VENDOR,8)
#define SIO_INDEX_MCASTIF     _WSAIOW(IOC_VENDOR,9)
#define SIO_INDEX_ADD_MCAST   _WSAIOW(IOC_VENDOR,10)
#define SIO_INDEX_DEL_MCAST   _WSAIOW(IOC_VENDOR,11)
//      SIO_UDP_CONNRESET     _WSAIOW(IOC_VENDOR,12)
#define SIO_RCVALL_MCAST_IF   _WSAIOW(IOC_VENDOR,13)
#define SIO_RCVALL_IF         _WSAIOW(IOC_VENDOR,14)

//
// Values for use with SIO_RCVALL* options
//
typedef enum {
    RCVALL_OFF             = 0,
    RCVALL_ON              = 1,
    RCVALL_SOCKETLEVELONLY = 2,
    RCVALL_IPLEVEL         = 3,
} RCVALL_VALUE, *PRCVALL_VALUE;

#define RCVALL_MAX RCVALL_IPLEVEL

typedef struct {
    RCVALL_VALUE Mode;
    ULONG Interface;
} RCVALL_IF, *PRCVALL_IF;
    
//
// TCP/UDP port management definitions.
//
#define SIO_ACQUIRE_PORT_RESERVATION    _WSAIOW(IOC_VENDOR, 100)
#define SIO_RELEASE_PORT_RESERVATION    _WSAIOW(IOC_VENDOR, 101)
#define SIO_ASSOCIATE_PORT_RESERVATION  _WSAIOW(IOC_VENDOR, 102)

typedef struct _INET_PORT_RANGE {
    USHORT StartPort;
    USHORT NumberOfPorts;
} INET_PORT_RANGE, *PINET_PORT_RANGE;

typedef struct _INET_PORT_RANGE INET_PORT_RESERVATION, *PINET_PORT_RESERVATION;

typedef struct {
    ULONG64 Token;
} INET_PORT_RESERVATION_TOKEN, *PINET_PORT_RESERVATION_TOKEN;

#define INVALID_PORT_RESERVATION_TOKEN ((ULONG64)0)

typedef struct {
#ifdef __cplusplus
    INET_PORT_RESERVATION Reservation;
    INET_PORT_RESERVATION_TOKEN Token;
#else
    INET_PORT_RESERVATION;
    INET_PORT_RESERVATION_TOKEN;
#endif
} INET_PORT_RESERVATION_INSTANCE, *PINET_PORT_RESERVATION_INSTANCE;

typedef struct {
    ULONG AssignmentCount;
    ULONG OwningPid;
} INET_PORT_RESERVATION_INFORMATION, *PINET_PORT_RESERVATION_INFORMATION;


#ifdef _WS2DEF_

#if (NTDDI_VERSION >= NTDDI_VISTA)
#define _SECURE_SOCKET_TYPES_DEFINED_

//
// Secure socket API type definitions.
//

#define SIO_SET_SECURITY             _WSAIOW(IOC_VENDOR, 200)
#define SIO_QUERY_SECURITY           _WSAIORW(IOC_VENDOR, 201)
#define SIO_SET_PEER_TARGET_NAME     _WSAIOW(IOC_VENDOR, 202)
#define SIO_DELETE_PEER_TARGET_NAME  _WSAIOW(IOC_VENDOR, 203)

//
// iSCSI IOCTLS
//
#define SIO_SOCKET_USAGE_NOTIFICATION _WSAIOW(IOC_VENDOR, 204)
typedef enum _SOCKET_USAGE_TYPE
{
   SYSTEM_CRITICAL_SOCKET = 1
}SOCKET_USAGE_TYPE;

// Type of security protocol
typedef enum _SOCKET_SECURITY_PROTOCOL
{
   SOCKET_SECURITY_PROTOCOL_DEFAULT,
   SOCKET_SECURITY_PROTOCOL_IPSEC,
#if (NTDDI_VERSION >= NTDDI_WIN7)
   SOCKET_SECURITY_PROTOCOL_IPSEC2,      //version 2 of secure socket apis
#endif // (NTDDI_VERSION >= NTDDI_WIN7)
   SOCKET_SECURITY_PROTOCOL_INVALID
} SOCKET_SECURITY_PROTOCOL;

// Flags for generic security settings
#define SOCKET_SETTINGS_GUARANTEE_ENCRYPTION  0x1
#define SOCKET_SETTINGS_ALLOW_INSECURE  0x2

// Common security settings for the socket
typedef struct _SOCKET_SECURITY_SETTINGS
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   ULONG SecurityFlags;
} SOCKET_SECURITY_SETTINGS;

// Flags specific to IPsec security settings.
// NOTE: these flags must be specified under the
// SOCKET_SECURITY_SETTINGS_IPSEC->IpsecFlags field.

#define SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION            0x1
#if (NTDDI_VERSION >= NTDDI_WIN7)
#define SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION      0x2
#define SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED  0x4
#define SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT              0x8
#endif // (NTDDI_VERSION >= NTDDI_WIN7)


// IPsec specific security settings for the socket.
typedef struct _SOCKET_SECURITY_SETTINGS_IPSEC
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   ULONG SecurityFlags;
   ULONG IpsecFlags;
   GUID AuthipMMPolicyKey;
   GUID AuthipQMPolicyKey;
   GUID Reserved;
   UINT64 Reserved2;
   ULONG UserNameStringLen;
   ULONG DomainNameStringLen;
   ULONG PasswordStringLen;
   wchar_t AllStrings[0];
} SOCKET_SECURITY_SETTINGS_IPSEC;

// Common peer target name for the socket
typedef struct _SOCKET_PEER_TARGET_NAME
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   SOCKADDR_STORAGE PeerAddress;
   ULONG PeerTargetNameStringLen;
   wchar_t AllStrings[0];
} SOCKET_PEER_TARGET_NAME;

// Input for querying socket security
typedef struct _SOCKET_SECURITY_QUERY_TEMPLATE
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   SOCKADDR_STORAGE PeerAddress;
   ULONG PeerTokenAccessMask;
} SOCKET_SECURITY_QUERY_TEMPLATE;

#if (NTDDI_VERSION >= NTDDI_WIN7)

#define SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE 0x1

#define SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID 0x1
#define SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID 0x2

// Input for querying socket security
typedef struct _SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   SOCKADDR_STORAGE PeerAddress;
   ULONG PeerTokenAccessMask;
   ULONG Flags;
   ULONG FieldMask;
} SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2;
#endif // (NTDDI_VERSION >= NTDDI_WIN7)

// Flags corresponding to the security query info
#define SOCKET_INFO_CONNECTION_SECURED  0x1
#define SOCKET_INFO_CONNECTION_ENCRYPTED  0x2
#define SOCKET_INFO_CONNECTION_IMPERSONATED 0x4

// Common security query information from a socket
typedef struct _SOCKET_SECURITY_QUERY_INFO
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   ULONG Flags;
   UINT64 PeerApplicationAccessTokenHandle;
   UINT64 PeerMachineAccessTokenHandle;
} SOCKET_SECURITY_QUERY_INFO;

#if (NTDDI_VERSION >= NTDDI_WIN7)
// Common security query information from a socket
typedef struct _SOCKET_SECURITY_QUERY_INFO_IPSEC2
{
   SOCKET_SECURITY_PROTOCOL SecurityProtocol;
   ULONG Flags;
   UINT64 PeerApplicationAccessTokenHandle;
   UINT64 PeerMachineAccessTokenHandle;
   UINT64 MmSaId;
   UINT64 QmSaId;
   UINT32 NegotiationWinerr;
   GUID SaLookupContext;
} SOCKET_SECURITY_QUERY_INFO_IPSEC2;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)

//
// WFP ALE endpoint handle query type definition
//

#define SIO_QUERY_WFP_ALE_ENDPOINT_HANDLE _WSAIOR(IOC_VENDOR, 205)

//
// Scalability type definitions
//
#define SIO_QUERY_RSS_SCALABILITY_INFO  _WSAIOR(IOC_VENDOR, 210)

// Scalability info for the transport
typedef struct _RSS_SCALABILITY_INFO {
   BOOLEAN RssEnabled;
} RSS_SCALABILITY_INFO, *PRSS_SCALABILITY_INFO;

#endif // (NTDDI_VERSION >= NTDDI_VISTA)


//
// Microsoft-specific IPv4 definitions.
//

#define IN4_CLASSA(i) (((LONG)(i) & 0x00000080) == 0)
#define IN4_CLASSB(i) (((LONG)(i) & 0x000000c0) == 0x00000080)
#define IN4_CLASSC(i) (((LONG)(i) & 0x000000e0) == 0x000000c0)
#define IN4_CLASSD(i) (((LONG)(i) & 0x000000f0) == 0x000000e0)
#define IN4_MULTICAST(i) IN4_CLASSD(i)

#define IN4ADDR_ANY INADDR_ANY
#define IN4ADDR_LOOPBACK 0x0100007f
#define IN4ADDR_BROADCAST INADDR_BROADCAST
#define IN4ADDR_NONE INADDR_NONE
#define IN4ADDR_ANY_INIT { 0 }
#define IN4ADDR_LOOPBACK_INIT { 0x7f, 0, 0, 1 }
#define IN4ADDR_BROADCAST_INIT { 0xff, 0xff, 0xff, 0xff }
#define IN4ADDR_ALLNODESONLINK_INIT { 0xe0, 0, 0, 1 }
#define IN4ADDR_ALLROUTERSONLINK_INIT { 0xe0, 0, 0, 2 }
#define IN4ADDR_ALLIGMPV3ROUTERSONLINK_INIT { 0xe0, 0, 0, 0x16 }
#define IN4ADDR_ALLTEREDONODESONLINK_INIT { 0xe0, 0, 0, 0xfd }
#define IN4ADDR_LINKLOCALPREFIX_INIT { 0xa9, 0xfe, }
#define IN4ADDR_MULTICASTPREFIX_INIT { 0xe0, }

#define IN4ADDR_LOOPBACKPREFIX_LENGTH 8
#define IN4ADDR_LINKLOCALPREFIX_LENGTH 16
#define IN4ADDR_MULTICASTPREFIX_LENGTH 4

#if (NTDDI_VERSION >= NTDDI_WIN2KSP1)
MSTCPIP_INLINE
BOOLEAN
IN4_ADDR_EQUAL(__in CONST IN_ADDR *a, __in CONST IN_ADDR *b)
{
    return (BOOLEAN)(a->s_addr == b->s_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN4_UNALIGNED_ADDR_EQUAL(__in CONST IN_ADDR UNALIGNED *a, __in CONST IN_ADDR UNALIGNED *b)
{
    return (BOOLEAN)(a->s_addr == b->s_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_UNSPECIFIED(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)(a->s_addr == IN4ADDR_ANY);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_UNSPECIFIED(__in CONST IN_ADDR UNALIGNED *a)
{
    return (BOOLEAN)(a->s_addr == IN4ADDR_ANY);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_LOOPBACK(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)(*((PUCHAR) a) == 0x7f); // 127/8
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_LOOPBACK(__in CONST IN_ADDR UNALIGNED *a)
{
    return (BOOLEAN)(*((PUCHAR) a) == 0x7f); // 127/8
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_BROADCAST(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)(a->s_addr == IN4ADDR_BROADCAST);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_BROADCAST(__in CONST IN_ADDR UNALIGNED *a)
{
    return (BOOLEAN)(a->s_addr == IN4ADDR_BROADCAST);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_MULTICAST(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)IN4_MULTICAST(a->s_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_MULTICAST(__in CONST IN_ADDR UNALIGNED *a)
{
    return (BOOLEAN)IN4_MULTICAST(a->s_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_LINKLOCAL(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)((a->s_addr & 0xffff) == 0xfea9); // 169.254/16
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_LINKLOCAL(__in CONST IN_ADDR UNALIGNED *a)
{
    return (BOOLEAN)((a->s_addr & 0xffff) == 0xfea9); // 169.254/16
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_SITELOCAL(__in CONST IN_ADDR *a)
{
    //
    // For existing scenarios (e.g. ICS) to work as expected, RFC-1918 prefixes
    // are deemed to be global scoped.  When appropriate, site border routers
    // must explicitly filter packets with these addresses.
    //
    UNREFERENCED_PARAMETER(a);
    return FALSE;
}

#define IN4_IS_UNALIGNED_ADDR_SITELOCAL IN4_IS_ADDR_SITELOCAL

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_RFC1918(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)(((a->s_addr & 0x00ff) == 0x0a) ||   // 10/8
                     ((a->s_addr & 0xf0ff) == 0x10ac) || // 172.16/12
                     ((a->s_addr & 0xffff) == 0xa8c0));  // 192.168/16
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_RFC1918(__in CONST IN_ADDR UNALIGNED *a)
{
    IN_ADDR Ipv4Address = *a;
    return IN4_IS_ADDR_RFC1918(&Ipv4Address);
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_MC_LINKLOCAL(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)((a->s_addr & 0xffffff) == 0xe0); // 224.0.0/24
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_MC_ADMINLOCAL(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)((a->s_addr & 0xffff) == 0xffef); // 239.255/16
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_MC_SITELOCAL(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)((a->s_addr & 0xff) == 0xef) &&
                    !IN4_IS_ADDR_MC_ADMINLOCAL(a);
}

MSTCPIP_INLINE
VOID
IN4ADDR_SETSOCKADDR(__out PSOCKADDR_IN a, __in CONST IN_ADDR *addr, __in USHORT port)
{
    a->sin_family = AF_INET;
    a->sin_port = port;
    a->sin_addr = *addr;
    memset(a->sin_zero, 0, sizeof(a->sin_zero));
}

MSTCPIP_INLINE
VOID
IN4ADDR_SETANY(__out PSOCKADDR_IN a)
{
    a->sin_family = AF_INET;
    a->sin_port = 0;
    a->sin_addr.s_addr = IN4ADDR_ANY;
    memset(a->sin_zero, 0, sizeof(a->sin_zero));
}

MSTCPIP_INLINE
VOID
IN4ADDR_SETLOOPBACK(__out PSOCKADDR_IN a)
{
    a->sin_family = AF_INET;
    a->sin_port = 0;
    a->sin_addr.s_addr = IN4ADDR_LOOPBACK;
    memset(a->sin_zero, 0, sizeof(a->sin_zero));
}

MSTCPIP_INLINE
BOOLEAN
IN4ADDR_ISANY(__in CONST SOCKADDR_IN *a)
{
    ASSERT(a->sin_family == AF_INET);
    return IN4_IS_ADDR_UNSPECIFIED(&a->sin_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN4ADDR_ISLOOPBACK(__in CONST SOCKADDR_IN *a)
{
    ASSERT(a->sin_family == AF_INET);
    return IN4_IS_ADDR_LOOPBACK(&a->sin_addr);
}

MSTCPIP_INLINE
SCOPE_ID
IN4ADDR_SCOPE_ID(__in CONST SOCKADDR_IN *a)
{
    SCOPE_ID UnspecifiedScopeId = {0};
    UNREFERENCED_PARAMETER(a);
    return UnspecifiedScopeId;
}

MSTCPIP_INLINE
BOOLEAN
IN4ADDR_ISEQUAL(__in CONST SOCKADDR_IN *a, __in CONST SOCKADDR_IN *b)
{
    ASSERT(a->sin_family == AF_INET);
    return (BOOLEAN)(IN4ADDR_SCOPE_ID(a).Value == IN4ADDR_SCOPE_ID(b).Value &&
                     IN4_ADDR_EQUAL(&a->sin_addr, &b->sin_addr));
}

MSTCPIP_INLINE
BOOLEAN
IN4ADDR_ISUNSPECIFIED(__in CONST SOCKADDR_IN *a)
{
    ASSERT(a->sin_family == AF_INET);
    return (BOOLEAN)(IN4ADDR_SCOPE_ID(a).Value == 0 &&
                     IN4_IS_ADDR_UNSPECIFIED(&a->sin_addr));
}

#define INET_IS_ALIGNED(Pointer, Type) \
   (((ULONG_PTR)Pointer & (__builtin_alignof(Type)-1)) == 0)

MSTCPIP_INLINE
SCOPE_LEVEL
Ipv4UnicastAddressScope(
    __in CONST UCHAR *Address
    )
/*++

Routine Description:

    Determines the scope of an IPv4 unicast address.

    For existing scenarios (e.g. ICS) to work as expected, RFC-1918 prefixes
    are deemed to be global scoped.  When appropriate, site border routers
    must explicitly filter packets with these addresses.

Arguments:

    Address - Supplies the IPv4 unicast address.

Return Value:

    Returns the scope level of the address.

Caller IRQL:

    May be called at PASSIVE through DISPATCH level.

--*/
{
    IN_ADDR Ipv4Address;

    if (!INET_IS_ALIGNED(Address, IN_ADDR)) {
        Ipv4Address = *(CONST IN_ADDR UNALIGNED *)Address;
        Address = (CONST UCHAR *) &Ipv4Address;
    }

    if (IN4_IS_ADDR_LINKLOCAL((PIN_ADDR) Address) ||
        IN4_IS_ADDR_LOOPBACK((PIN_ADDR) Address)) {
        return ScopeLevelLink;
    }
    return ScopeLevelGlobal;
}

MSTCPIP_INLINE
SCOPE_LEVEL
Ipv4MulticastAddressScope(
    __in CONST UCHAR *Address
    )
/*++

Routine Description:

    Determines the scope of an IPv4 multicast address.
    See RFC 2365.

Arguments:

    Address - Supplies the IPv4 multicast address.

Return Value:

    Returns the scope level of the multicast address.

Caller IRQL:

    May be called at PASSIVE through DISPATCH level.

--*/
{
    IN_ADDR Ipv4Address;

    if (!INET_IS_ALIGNED(Address, IN_ADDR)) {
        Ipv4Address = *(CONST IN_ADDR UNALIGNED *)Address;
        Address = (CONST UCHAR *) &Ipv4Address;
    }

    if (IN4_IS_ADDR_MC_LINKLOCAL((PIN_ADDR) Address)) {
        return ScopeLevelLink;
    } else if (IN4_IS_ADDR_MC_ADMINLOCAL((PIN_ADDR) Address)) {
        return ScopeLevelAdmin;
    } else if (IN4_IS_ADDR_MC_SITELOCAL((PIN_ADDR) Address)) {
        return ScopeLevelSite;
    } else {
        return ScopeLevelGlobal;
    }
}

MSTCPIP_INLINE
SCOPE_LEVEL
Ipv4AddressScope(
    __in CONST UCHAR *Address
    )
/*++

Routine Description:

    Examines an IPv4 address and determines its scope.

Arguments:

    Address - Supplies the address to test.

Return Value:

    Returns the scope level of the address.

Caller IRQL:

    May be called at PASSIVE through DISPATCH level.

--*/
{
    IN CONST IN_ADDR Ipv4Address = *(CONST IN_ADDR UNALIGNED *)Address;

    if (IN4_IS_ADDR_BROADCAST(&Ipv4Address)) {
        return ScopeLevelLink;
    } else if (IN4_IS_ADDR_MULTICAST(&Ipv4Address)) {
        return Ipv4MulticastAddressScope((UCHAR *) &Ipv4Address);
    } else {
        return Ipv4UnicastAddressScope((UCHAR *) &Ipv4Address);
    }
}

MSTCPIP_INLINE
NL_ADDRESS_TYPE
Ipv4AddressType(
    __in CONST UCHAR *Address
    )
{
    IN_ADDR Ipv4Address = *(CONST IN_ADDR UNALIGNED *) Address;

    if (IN4_IS_ADDR_MULTICAST(&Ipv4Address)) {
        return NlatMulticast;
    }

    if (IN4_IS_ADDR_BROADCAST(&Ipv4Address)) {
        return NlatBroadcast;
    }

    if (IN4_IS_ADDR_UNSPECIFIED(&Ipv4Address)) {
        return NlatUnspecified;
    }

    if (((Ipv4Address.s_addr & 0x000000ff) == 0) ||
        ((Ipv4Address.s_addr & 0x000000f0) == 240)) {
        //
        // Following prefixes are invalid:
        // 1. 0.0.0.0/8 (except 0.0.0.0/32).
        // 2. 240.0.0.0/4 (except 255.255.255.255/32).
        //
        return NlatInvalid;
    }

    //
    // Loopback and anycast addresses are treated as unicast.
    //
    return NlatUnicast;
}

MSTCPIP_INLINE
VOID
IN4_UNCANONICALIZE_SCOPE_ID(
    __in CONST IN_ADDR *Address,
    __inout SCOPE_ID *ScopeId
    )
{
    SCOPE_LEVEL ScopeLevel = Ipv4AddressScope((CONST UCHAR *)Address);

    if ((IN4_IS_ADDR_LOOPBACK(Address)) || (ScopeLevel == ScopeLevelGlobal)) {
        ScopeId->Value = 0;
    }

    if ((SCOPE_LEVEL)ScopeId->Level == ScopeLevel) {
        ScopeId->Level = 0;
    }
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_ADDR_6TO4ELIGIBLE(__in CONST IN_ADDR *a)
{
    return (BOOLEAN)((Ipv4AddressType((CONST UCHAR *) a) == NlatUnicast) &&
                     !(IN4_IS_ADDR_LOOPBACK(a) ||
                       IN4_IS_ADDR_LINKLOCAL(a) ||
                       IN4_IS_ADDR_SITELOCAL(a) ||
                       IN4_IS_ADDR_RFC1918(a)));
}

MSTCPIP_INLINE
BOOLEAN
IN4_IS_UNALIGNED_ADDR_6TO4ELIGIBLE(__in CONST IN_ADDR UNALIGNED *a)
{
    IN_ADDR Ipv4Address = *a;
    return IN4_IS_ADDR_6TO4ELIGIBLE(&Ipv4Address);
}

#endif // _WS2DEF_


//
// Microsoft-specific IPv6 definitions.
//

#ifdef _WS2IPDEF_

MSTCPIP_INLINE
BOOLEAN
IN6_PREFIX_EQUAL(__in CONST IN6_ADDR *a, __in CONST IN6_ADDR *b, __in UINT8 len)
{
    UINT8 Bytes = len / 8;
    UINT8 Bits = len % 8;
    UINT8 Mask = 0xff << (8 - Bits);

    ASSERT(len <= (sizeof(IN6_ADDR) * 8));
    return (BOOLEAN)
        (((memcmp(a, b, Bytes)) == 0) &&
         ((Bits == 0) ||
          ((a->s6_bytes[Bytes] | Mask) == (b->s6_bytes[Bytes] | Mask))));
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_ALLNODESONNODE(__in CONST IN6_ADDR *a)
{
    return IN6_ADDR_EQUAL(a, &in6addr_allnodesonnode);
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_ALLNODESONLINK(__in CONST IN6_ADDR *a)
{
    return IN6_ADDR_EQUAL(a, &in6addr_allnodesonlink);
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_ALLROUTERSONLINK(__in CONST IN6_ADDR *a)
{
    return IN6_ADDR_EQUAL(a, &in6addr_allroutersonlink);
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_SOLICITEDNODE(__in CONST IN6_ADDR *a)
{
    return
        IN6_PREFIX_EQUAL(
            a,
            &in6addr_solicitednodemulticastprefix,
            IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH);
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_ISATAP(__in CONST IN6_ADDR *a)
{
    //
    // Disregard the u/g bit and compare the first byte of the interface id.
    //
    return (BOOLEAN)(((a->s6_words[4] & 0xfffd) == 0x0000) &&
                     (a->s6_words[5] == 0xfe5e));
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_6TO4(__in CONST IN6_ADDR *a)
{
    C_ASSERT(IN6ADDR_6TO4PREFIX_LENGTH == RTL_BITS_OF(USHORT));
    return (BOOLEAN)(a->s6_words[0] == in6addr_6to4prefix.s6_words[0]);
}

MSTCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_TEREDO(__in CONST IN6_ADDR *a)
{
    C_ASSERT(IN6ADDR_TEREDOPREFIX_LENGTH == 2 * RTL_BITS_OF(USHORT));
    return (BOOLEAN)
        (((a->s6_words[0] == in6addr_teredoprefix.s6_words[0]) &&
          (a->s6_words[1] == in6addr_teredoprefix.s6_words[1])) ||
         ((a->s6_words[0] == in6addr_teredoprefix_old.s6_words[0]) &&
          (a->s6_words[1] == in6addr_teredoprefix_old.s6_words[1])));
}

MSTCPIP_INLINE
BOOLEAN
IN6ADDR_ISV4MAPPED(__in CONST SOCKADDR_IN6 *a)
{
    ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_V4MAPPED(&a->sin6_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN6ADDR_ISISATAP(__in CONST SOCKADDR_IN6 *a)
{
    ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_ISATAP(&a->sin6_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN6ADDR_IS6TO4(__in CONST SOCKADDR_IN6 *a)
{
    ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_6TO4(&a->sin6_addr);
}

MSTCPIP_INLINE
BOOLEAN
IN6ADDR_ISTEREDO(__in CONST SOCKADDR_IN6 *a)
{
    ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_TEREDO(&a->sin6_addr);
}

MSTCPIP_INLINE
CONST UCHAR*
IN6_GET_ADDR_V4MAPPED(__in CONST IN6_ADDR *Ipv6Address)
{
    return (CONST UCHAR *) (Ipv6Address->s6_words + 6);
}

MSTCPIP_INLINE
CONST UCHAR*
IN6_GET_ADDR_V4COMPAT(__in CONST IN6_ADDR *Ipv6Address)
{
    return (CONST UCHAR *) (Ipv6Address->s6_words + 6);
}

MSTCPIP_INLINE
CONST UCHAR*
IN6_EXTRACT_V4ADDR_FROM_ISATAP(__in CONST IN6_ADDR *Ipv6Address)
{
    return (CONST UCHAR *) (Ipv6Address->s6_words + 6);
}

MSTCPIP_INLINE
CONST UCHAR*
IN6_EXTRACT_V4ADDR_FROM_6TO4(__in CONST IN6_ADDR *Ipv6Address)
{
    return (CONST UCHAR *) (Ipv6Address->s6_words + 1);
}

MSTCPIP_INLINE
VOID
IN6_SET_ADDR_V4MAPPED(__out PIN6_ADDR a6, __in CONST IN_ADDR* a4)
{
    *a6 = in6addr_v4mappedprefix;
    a6->s6_bytes[12] = ((CONST UCHAR *) a4)[0];
    a6->s6_bytes[13] = ((CONST UCHAR *) a4)[1];
    a6->s6_bytes[14] = ((CONST UCHAR *) a4)[2];
    a6->s6_bytes[15] = ((CONST UCHAR *) a4)[3];
}

MSTCPIP_INLINE
VOID
IN6_SET_ADDR_V4COMPAT(__out PIN6_ADDR a6, __in CONST IN_ADDR* a4)
{
    *a6 = in6addr_any;
    a6->s6_bytes[12] = ((CONST UCHAR *) a4)[0];
    a6->s6_bytes[13] = ((CONST UCHAR *) a4)[1];
    a6->s6_bytes[14] = ((CONST UCHAR *) a4)[2];
    a6->s6_bytes[15] = ((CONST UCHAR *) a4)[3];
}

MSTCPIP_INLINE
VOID
IN6_SET_ADDR_SOLICITEDNODE(__out PIN6_ADDR Multicast, __in CONST IN6_ADDR *Unicast)
{
    *Multicast = in6addr_solicitednodemulticastprefix;
    Multicast->s6_bytes[13] = Unicast->s6_bytes[13];
    Multicast->s6_bytes[14] = Unicast->s6_bytes[14];
    Multicast->s6_bytes[15] = Unicast->s6_bytes[15];
}

MSTCPIP_INLINE
VOID
IN6_SET_ISATAP_IDENTIFIER(__inout IN6_ADDR *Ipv6Address, __in CONST IN_ADDR *Ipv4Address)
{
    if (IN4_IS_ADDR_6TO4ELIGIBLE(Ipv4Address)) {
        Ipv6Address->s6_words[4] = 0x0002;
    } else {
        Ipv6Address->s6_words[4] = 0x0000;
    }

    //
    // 24-bit IANA OUI 00-00-5E and the 8-bit hex value 0xFE.
    // See section 6.1 of RFC 4214.
    //
    Ipv6Address->s6_words[5] = 0xFE5E;
    *((UNALIGNED IN_ADDR *) (Ipv6Address->s6_words + 6)) = *Ipv4Address;
}

MSTCPIP_INLINE
VOID
IN6_SET_6TO4_PREFIX(__inout IN6_ADDR *Ipv6Address, __in CONST IN_ADDR *Ipv4Address)
{
    Ipv6Address->s6_words[0] = 0x0220;
    *((UNALIGNED IN_ADDR *) (Ipv6Address->s6_words + 1)) = *Ipv4Address;
    Ipv6Address->s6_words[3] = 0x0000;
}

MSTCPIP_INLINE
SCOPE_LEVEL
Ipv6UnicastAddressScope(
    __in CONST UCHAR *Address
    )
/*++

Routine Description:

    Examines a unicast address and determines its scope.

    Note that v4-compatible and 6to4 addresses are deemed to have global scope;
    it is not legal to derive them from non IN4_IS_ADDR_6TO4ELIGIBLE addresses
    (IPv4 loopback, link-local, site-local, and RFC-1918 addresses).

Arguments:

    Address - Supplies an IPv6 unicast address.

Return Value:

    Returns the scope level of the address.

Caller IRQL:

    May be called at PASSIVE through DISPATCH level.

--*/
{
    IN6_ADDR Ipv6Address;

    if (!INET_IS_ALIGNED(Address, IN6_ADDR)) {
        Ipv6Address = *(CONST IN6_ADDR UNALIGNED *)Address;
        Address = (CONST UCHAR *) &Ipv6Address;
    }

    if (IN6_IS_ADDR_LINKLOCAL((PIN6_ADDR) Address) ||
        IN6_IS_ADDR_LOOPBACK((PIN6_ADDR) Address)) {
        return ScopeLevelLink;
    } else if (IN6_IS_ADDR_SITELOCAL((PIN6_ADDR) Address)) {
        return ScopeLevelSite;
    } else {
        return ScopeLevelGlobal;
    }
}

MSTCPIP_INLINE
SCOPE_LEVEL
IN6_MULTICAST_SCOPE(
    __in CONST UCHAR *Address
    )
{
    PIN6_ADDR Ipv6Address = (PIN6_ADDR) Address;
    return (SCOPE_LEVEL)(Ipv6Address->s6_bytes[1] & 0xf);
}

MSTCPIP_INLINE
SCOPE_LEVEL
Ipv6AddressScope(
    __in CONST UCHAR *Address
    )
/*++

Routine Description:

    Examines an IPv6 address and determines its scope.

Arguments:

    Address - Supplies an IPv6 address.

Return Value:

    Returns the scope level of the address.

Caller IRQL:

    May be called at PASSIVE through DISPATCH level.

--*/
{
    if (IN6_IS_ADDR_MULTICAST((CONST IN6_ADDR *) Address)) {
        return IN6_MULTICAST_SCOPE(Address);
    } else {
        return Ipv6UnicastAddressScope(Address);
    }
}

MSTCPIP_INLINE
NL_ADDRESS_TYPE
Ipv6AddressType(
    __in CONST UCHAR *Address
    )
{
    CONST IN6_ADDR *Ipv6Address = (CONST IN6_ADDR *) Address;
    CONST UCHAR *Ipv4Address;

    if (IN6_IS_ADDR_MULTICAST(Ipv6Address)) {
        return NlatMulticast;
    }

    if (IN6_IS_ADDR_UNSPECIFIED(Ipv6Address)) {
        return NlatUnspecified;
    }

    //
    // Extract embedded IPv4 address, if any.
    //
    if (IN6_IS_ADDR_ISATAP(Ipv6Address) ||
        IN6_IS_ADDR_V4COMPAT(Ipv6Address) ||
        IN6_IS_ADDR_V4MAPPED(Ipv6Address) ||
        IN6_IS_ADDR_V4TRANSLATED(Ipv6Address)) {
        Ipv4Address = IN6_EXTRACT_V4ADDR_FROM_ISATAP(Ipv6Address);
    } else if (IN6_IS_ADDR_6TO4(Ipv6Address)) {
        Ipv4Address = IN6_EXTRACT_V4ADDR_FROM_6TO4(Ipv6Address);
    } else {
        //
        // Anycast and loopback addresses are treated unicast address.
        //
        return NlatUnicast;
    }

    //
    // Ensure that the embedded IPv4 address is unicast.
    //
    if (Ipv4AddressType(Ipv4Address) != NlatUnicast) {
        return NlatInvalid;
    }
    return NlatUnicast;
}

MSTCPIP_INLINE
VOID
IN6_UNCANONICALIZE_SCOPE_ID(
    __in CONST IN6_ADDR *Address,
    __inout SCOPE_ID *ScopeId
    )
{
    SCOPE_LEVEL ScopeLevel = Ipv6AddressScope((CONST UCHAR *)Address);

    if ((IN6_IS_ADDR_LOOPBACK(Address)) || (ScopeLevel == ScopeLevelGlobal)) {
        ScopeId->Value = 0;
    }

    if ((SCOPE_LEVEL)ScopeId->Level == ScopeLevel) {
        ScopeId->Level = 0;
    }
}

#if (NTDDI_VERSION >= NTDDI_VISTA)
MSTCPIP_INLINE
VOID
IN6ADDR_SETSOCKADDR(__out PSOCKADDR_IN6 a, __in CONST IN6_ADDR *addr, __in SCOPE_ID scope,
                    __in USHORT port)
{
    a->sin6_family = AF_INET6;
    a->sin6_port = port;
    a->sin6_flowinfo = 0;
    RtlCopyMemory(&a->sin6_addr, addr, sizeof(IN6_ADDR));
    a->sin6_scope_struct = scope;
    IN6_UNCANONICALIZE_SCOPE_ID(&a->sin6_addr, &a->sin6_scope_struct);
}

MSTCPIP_INLINE
VOID
IN6ADDR_SETV4MAPPED(__out PSOCKADDR_IN6 a6, __in CONST IN_ADDR* a4, __in SCOPE_ID scope,
                    __in USHORT port)
{
    a6->sin6_family = AF_INET6;
    a6->sin6_port = port;
    a6->sin6_flowinfo = 0;
    IN6_SET_ADDR_V4MAPPED(&a6->sin6_addr, a4);
    a6->sin6_scope_struct = scope;
    IN4_UNCANONICALIZE_SCOPE_ID(a4, &a6->sin6_scope_struct);
}

#endif

//
// Define address-family-independent routines.
//

MSTCPIP_INLINE
BOOLEAN
INET_ADDR_EQUAL(__in ADDRESS_FAMILY af, __in CONST VOID* a, __in CONST VOID* b)
{
    if (af == AF_INET6) {
        return IN6_ADDR_EQUAL((CONST IN6_ADDR*)a, (CONST IN6_ADDR*)b);
    } else {
        ASSERT(af == AF_INET);
        return IN4_ADDR_EQUAL((CONST IN_ADDR*)a, (CONST IN_ADDR*)b);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_UNALIGNED_ADDR_EQUAL(__in ADDRESS_FAMILY af, __in CONST VOID* a, __in CONST VOID* b)
{
    if (af == AF_INET6) {
        return IN6_ADDR_EQUAL((CONST IN6_ADDR*)a, (CONST IN6_ADDR*)b);
    } else {
        ASSERT(af == AF_INET);
        return IN4_UNALIGNED_ADDR_EQUAL((CONST IN_ADDR*)a, (CONST IN_ADDR*)b);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_IS_ADDR_UNSPECIFIED(__in ADDRESS_FAMILY af, __in CONST VOID* a)
{
    if (af == AF_INET6) {
        return IN6_IS_ADDR_UNSPECIFIED((CONST IN6_ADDR*)a);
    } else {
        ASSERT(af == AF_INET);
        return IN4_IS_ADDR_UNSPECIFIED((CONST IN_ADDR*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_IS_UNALIGNED_ADDR_UNSPECIFIED(__in ADDRESS_FAMILY af, __in CONST VOID* a)
{
    if (af == AF_INET6) {
        return IN6_IS_ADDR_UNSPECIFIED((CONST IN6_ADDR*)a);
    } else {
        ASSERT(af == AF_INET);
        return IN4_IS_UNALIGNED_ADDR_UNSPECIFIED((CONST IN_ADDR UNALIGNED*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_IS_ADDR_LOOPBACK(__in ADDRESS_FAMILY af, __in CONST VOID* a)
{
    if (af == AF_INET6) {
        return IN6_IS_ADDR_LOOPBACK((CONST IN6_ADDR*)a);
    } else {
        ASSERT(af == AF_INET);
        return IN4_IS_ADDR_LOOPBACK((CONST IN_ADDR*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_IS_ADDR_BROADCAST(__in ADDRESS_FAMILY af, __in CONST VOID* a)
{
    if (af == AF_INET6) {
        return FALSE;
    } else {
        ASSERT(af == AF_INET);
        return IN4_IS_ADDR_BROADCAST((CONST IN_ADDR*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INET_IS_ADDR_MULTICAST(__in ADDRESS_FAMILY af, __in CONST VOID* a)
{
    if (af == AF_INET6) {
        return IN6_IS_ADDR_MULTICAST((CONST IN6_ADDR*)a);
    } else {
        ASSERT(af == AF_INET);
        return IN4_IS_ADDR_MULTICAST((CONST IN_ADDR*)a);
    }
}

MSTCPIP_INLINE
CONST UCHAR*
INET_ADDR_UNSPECIFIED(__in ADDRESS_FAMILY af)
{
    if (af == AF_INET6) {
        return (CONST UCHAR*)&in6addr_any;
    } else {
        ASSERT(af == AF_INET);
        return (CONST UCHAR*)&in4addr_any;
    }
}

MSTCPIP_INLINE
VOID
INET_SET_ADDRESS(__in ADDRESS_FAMILY Family, __out PUCHAR Address, __in CONST UCHAR *Value)
{
    if (Family == AF_INET6) {
        *((PIN6_ADDR)Address) = *((PIN6_ADDR)Value);
    } else {
        ASSERT(Family == AF_INET);
        *((PIN_ADDR)Address) = *((PIN_ADDR)Value);
    }
}

MSTCPIP_INLINE
SIZE_T
INET_ADDR_LENGTH(__in ADDRESS_FAMILY af)
{
    if (af == AF_INET6) {
        return sizeof(IN6_ADDR);
    } else {
        ASSERT(af == AF_INET);
        return sizeof(IN_ADDR);
    }
}

MSTCPIP_INLINE
SIZE_T
INET_SOCKADDR_LENGTH(__in ADDRESS_FAMILY af)
{
    if (af == AF_INET6) {
        return sizeof(SOCKADDR_IN6);
    } else {
        ASSERT(af == AF_INET);
        return sizeof(SOCKADDR_IN);
    }
}

#if (NTDDI_VERSION >= NTDDI_VISTA)
MSTCPIP_INLINE
VOID
INETADDR_SETSOCKADDR(__in ADDRESS_FAMILY af, __out PSOCKADDR a, __in CONST VOID* addr,
                     __in SCOPE_ID scope, __in USHORT port)
{
    if (af == AF_INET6) {
        IN6ADDR_SETSOCKADDR(
            (PSOCKADDR_IN6) a, (CONST IN6_ADDR *) addr, scope, port);
    } else {
        CONST IN_ADDR addr4 = *((IN_ADDR UNALIGNED *) addr);

        ASSERT(af == AF_INET);
        IN4ADDR_SETSOCKADDR(
            (PSOCKADDR_IN) a, (CONST IN_ADDR *) &addr4, port);
    }
}
#endif // (NTDDI_VERSION >= NTDDI_VISTA)

MSTCPIP_INLINE
VOID
INETADDR_SETANY(__out PSOCKADDR a)
{
    if (a->sa_family == AF_INET6) {
        IN6ADDR_SETANY((PSOCKADDR_IN6)a);
    } else {
        ASSERT(a->sa_family == AF_INET);
        IN4ADDR_SETANY((PSOCKADDR_IN)a);
    }
}

MSTCPIP_INLINE
VOID
INETADDR_SETLOOPBACK(__out PSOCKADDR a)
{
    if (a->sa_family == AF_INET6) {
        IN6ADDR_SETLOOPBACK((PSOCKADDR_IN6)a);
    } else {
        ASSERT(a->sa_family == AF_INET);
        IN4ADDR_SETLOOPBACK((PSOCKADDR_IN)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INETADDR_ISANY(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return IN6ADDR_ISANY((CONST SOCKADDR_IN6*)a);
    } else {
        ASSERT(a->sa_family == AF_INET);
        return IN4ADDR_ISANY((CONST SOCKADDR_IN*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INETADDR_ISLOOPBACK(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return IN6ADDR_ISLOOPBACK((CONST SOCKADDR_IN6*)a);
    } else {
        ASSERT(a->sa_family == AF_INET);
        return IN4ADDR_ISLOOPBACK((CONST SOCKADDR_IN*)a);
    }
}

MSTCPIP_INLINE
BOOLEAN
INETADDR_ISV4MAPPED(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return IN6ADDR_ISV4MAPPED((CONST SOCKADDR_IN6*)a);
    } else {
        return FALSE;
    }
}

MSTCPIP_INLINE
BOOLEAN
NL_ADDR_EQUAL(
    __in ADDRESS_FAMILY af,
    __in SCOPE_ID sa,
    __in CONST UCHAR* aa,
    __in SCOPE_ID sb,
    __in CONST UCHAR* ab
    )
{
    return (BOOLEAN)((sa.Value == sb.Value) && INET_ADDR_EQUAL(af, aa, ab));
}

MSTCPIP_INLINE
BOOLEAN
NL_IS_ADDR_UNSPECIFIED(
    __in ADDRESS_FAMILY af,
    __in SCOPE_ID s,
    __in CONST UCHAR* a
    )
{
    return (BOOLEAN)((s.Value == 0) && INET_IS_ADDR_UNSPECIFIED(af, a));
}

MSTCPIP_INLINE
BOOLEAN
INETADDR_ISEQUAL(__in CONST SOCKADDR *a, __in CONST SOCKADDR *b)
{
    if (a->sa_family == AF_INET6) {
        return (BOOLEAN)
            (b->sa_family == AF_INET6 &&
             IN6ADDR_ISEQUAL((CONST SOCKADDR_IN6*)a, (CONST SOCKADDR_IN6*)b));
    } else {
        ASSERT(a->sa_family == AF_INET);
        return (BOOLEAN)
            (b->sa_family == AF_INET &&
             IN4ADDR_ISEQUAL((CONST SOCKADDR_IN*)a, (CONST SOCKADDR_IN*)b));
    }
}

MSTCPIP_INLINE
BOOLEAN
INETADDR_ISUNSPECIFIED(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return IN6ADDR_ISUNSPECIFIED((CONST SOCKADDR_IN6*)a);
    } else {
        ASSERT(a->sa_family == AF_INET);
        return IN4ADDR_ISUNSPECIFIED((CONST SOCKADDR_IN*)a);
    }
}

#if (NTDDI_VERSION >= NTDDI_VISTA)
MSTCPIP_INLINE
SCOPE_ID
INETADDR_SCOPE_ID(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return ((CONST SOCKADDR_IN6*)a)->sin6_scope_struct;
    } else {
        ASSERT(a->sa_family == AF_INET);
        return IN4ADDR_SCOPE_ID((CONST SOCKADDR_IN*)a);
    }
}
#endif

MSTCPIP_INLINE
USHORT
INETADDR_PORT(__in CONST SOCKADDR *a)
{
    if (a->sa_family == AF_INET6) {
        return ((CONST SOCKADDR_IN6*)a)->sin6_port;
    } else {
        ASSERT(a->sa_family == AF_INET);
        return ((CONST SOCKADDR_IN*)a)->sin_port;
    }
}

MSTCPIP_INLINE
PUCHAR
INETADDR_ADDRESS(__in CONST SOCKADDR* a)
{
    if (a->sa_family == AF_INET6) {
        return (PUCHAR)&((PSOCKADDR_IN6)a)->sin6_addr;
    } else {
        ASSERT(a->sa_family == AF_INET);
        return (PUCHAR)&((PSOCKADDR_IN)a)->sin_addr;
    }
}

MSTCPIP_INLINE
VOID
INETADDR_SET_PORT(__inout PSOCKADDR a, __in USHORT Port)
{
    SS_PORT(a) = Port;
}

MSTCPIP_INLINE
VOID
INETADDR_SET_ADDRESS(__inout PSOCKADDR a, __in CONST UCHAR *Address)
{
    if (a->sa_family == AF_INET6) {
        ((PSOCKADDR_IN6)a)->sin6_addr = *((CONST IN6_ADDR*)Address);
    } else {
        ASSERT(a->sa_family == AF_INET);
        ((PSOCKADDR_IN)a)->sin_addr = *((CONST IN_ADDR*)Address);
    }
}

MSTCPIP_INLINE
VOID
INET_UNCANONICALIZE_SCOPE_ID(
    __in ADDRESS_FAMILY AddressFamily,
    __in CONST UCHAR *Address,
    __inout SCOPE_ID *ScopeId
    )
{
    if (AddressFamily == AF_INET6) {
        IN6_UNCANONICALIZE_SCOPE_ID((CONST IN6_ADDR*) Address, ScopeId);
    } else {
        IN4_UNCANONICALIZE_SCOPE_ID((CONST IN_ADDR*) Address, ScopeId);
    }
}

#endif // _WS2IPDEF_

#endif // (NTDDI_VERSION >= NTDDI_WIN2KSP1)


#ifndef __IP2STRING__
#define __IP2STRING__

#if (NTDDI_VERSION >= NTDDI_VISTA)

//
//  Some simple Rtl routines for IP address <-> string literal conversion
//
#ifdef _WS2DEF_

NTSYSAPI
PSTR
NTAPI
RtlIpv4AddressToStringA (
    __in const struct in_addr *Addr,
    __out_ecount(16) PSTR S
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4AddressToStringExA(
    __in const struct in_addr *Address,
    __in USHORT Port,
    __out_ecount_part(*AddressStringLength, *AddressStringLength) PSTR AddressString,
    __inout PULONG AddressStringLength
    );

NTSYSAPI
PWSTR
NTAPI
RtlIpv4AddressToStringW (
    __in const struct in_addr *Addr,
    __out_ecount(16) PWSTR S
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4AddressToStringExW(
    __in const struct in_addr *Address,
    __in USHORT Port,
    __out_ecount_part(*AddressStringLength, *AddressStringLength) PWSTR AddressString,
    __inout PULONG AddressStringLength
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4StringToAddressA (
    __in PCSTR S,
    __in BOOLEAN Strict,
    __out PCSTR *Terminator,
    __out struct in_addr *Addr
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4StringToAddressExA (
    __in PCSTR AddressString,
    __in BOOLEAN Strict,
    __out struct in_addr *Address,
    __out PUSHORT Port
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4StringToAddressW (
    __in PCWSTR S,
    __in BOOLEAN Strict,
    __out LPCWSTR *Terminator,
    __out struct in_addr *Addr
    );

NTSYSAPI
LONG
NTAPI
RtlIpv4StringToAddressExW (
    __in PCWSTR AddressString,
    __in BOOLEAN Strict,
    __out struct in_addr *Address,
    __out PUSHORT Port
    );

#ifdef UNICODE
#define RtlIpv4AddressToString RtlIpv4AddressToStringW
#define RtlIpv4StringToAddress RtlIpv4StringToAddressW
#define RtlIpv4AddressToStringEx RtlIpv4AddressToStringExW
#define RtlIpv4StringToAddressEx RtlIpv4StringToAddressExW
#else
#define RtlIpv4AddressToString RtlIpv4AddressToStringA
#define RtlIpv4StringToAddress RtlIpv4StringToAddressA
#define RtlIpv4AddressToStringEx RtlIpv4AddressToStringExA
#define RtlIpv4StringToAddressEx RtlIpv4StringToAddressExA
#endif // UNICODE

#endif //_WS2DEF_

#ifdef _WS2IPDEF_

NTSYSAPI
PSTR
NTAPI
RtlIpv6AddressToStringA (
    __in const struct in6_addr *Addr,
    __out_ecount(46) PSTR S
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6AddressToStringExA(
    __in const struct in6_addr *Address,
    __in ULONG ScopeId,
    __in USHORT Port,
    __out_ecount_part(*AddressStringLength, *AddressStringLength) PSTR AddressString,
    __inout PULONG AddressStringLength
    );

NTSYSAPI
PWSTR
NTAPI
RtlIpv6AddressToStringW (
    __in const struct in6_addr *Addr,
    __out_ecount(46) PWSTR S
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6AddressToStringExW(
    __in const struct in6_addr *Address,
    __in ULONG ScopeId,
    __in USHORT Port,
    __out_ecount_part(*AddressStringLength, *AddressStringLength) PWSTR AddressString,
    __inout PULONG AddressStringLength
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6StringToAddressA (
    __in PCSTR S,
    __out PCSTR *Terminator,
    __out struct in6_addr *Addr
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6StringToAddressExA (
    __in PCSTR AddressString,
    __out struct in6_addr *Address,
    __out PULONG ScopeId,
    __out PUSHORT Port
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6StringToAddressW (
    __in PCWSTR S,
    __out PCWSTR *Terminator,
    __out struct in6_addr *Addr
    );

NTSYSAPI
LONG
NTAPI
RtlIpv6StringToAddressExW (
    __in PCWSTR AddressString,
    __out struct in6_addr *Address,
    __out PULONG ScopeId,
    __out PUSHORT Port
    );

#ifdef UNICODE
#define RtlIpv6AddressToString RtlIpv6AddressToStringW
#define RtlIpv6StringToAddress RtlIpv6StringToAddressW
#define RtlIpv6StringToAddressEx RtlIpv6StringToAddressExW
#define RtlIpv6AddressToStringEx RtlIpv6AddressToStringExW
#else
#define RtlIpv6AddressToString RtlIpv6AddressToStringA
#define RtlIpv6StringToAddress RtlIpv6StringToAddressA
#define RtlIpv6StringToAddressEx RtlIpv6StringToAddressExA
#define RtlIpv6AddressToStringEx RtlIpv6AddressToStringExA
#endif // UNICODE

#endif // __WS2IPDEF__

//
//  Some simple Rtl routines for Ethernet address <-> string literal conversion
//
#ifdef _WS2DEF_

union _DL_EUI48;
typedef union _DL_EUI48 DL_EUI48, *PDL_EUI48;

NTSYSAPI
PSTR
NTAPI
RtlEthernetAddressToStringA (
    __in const DL_EUI48 *Addr,
    __out_ecount(18) PSTR S
    );

NTSYSAPI
PWSTR
NTAPI
RtlEthernetAddressToStringW (
    __in const DL_EUI48 *Addr,
    __out_ecount(18) PWSTR S
    );

NTSYSAPI
LONG
NTAPI
RtlEthernetStringToAddressA (
    __in PCSTR S,
    __out PCSTR *Terminator,
    __out DL_EUI48 *Addr
    );

NTSYSAPI
LONG
NTAPI
RtlEthernetStringToAddressW (
    __in PCWSTR S,
    __out LPCWSTR *Terminator,
    __out DL_EUI48 *Addr
    );

#ifdef UNICODE
#define RtlEthernetAddressToString RtlEthernetAddressToStringW
#define RtlEthernetStringToAddress RtlEthernetStringToAddressW
#else
#define RtlEthernetAddressToString RtlEthernetAddressToStringA
#define RtlEthernetStringToAddress RtlEthernetStringToAddressA
#endif // UNICODE

#endif //_WS2DEF_

#endif // (NTDDI >= NTDDI_VISTA)
#endif // __IP2STRING__

#ifdef _PREFAST_
#pragma prefast(pop)
#endif

#pragma warning(pop)

#ifdef MSTCPIPDEF_ASSERT_UNDEFINED
#undef ASSERT
#endif

#ifdef __cplusplus
}
#endif

#endif // GUID_DEFS_ONLY

#endif // !_MSTCPIP_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mstime.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for mstime.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __mstime_h__
#define __mstime_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITIMEActiveElementCollection_FWD_DEFINED__
#define __ITIMEActiveElementCollection_FWD_DEFINED__
typedef interface ITIMEActiveElementCollection ITIMEActiveElementCollection;
#endif 	/* __ITIMEActiveElementCollection_FWD_DEFINED__ */


#ifndef __ITIMEElement_FWD_DEFINED__
#define __ITIMEElement_FWD_DEFINED__
typedef interface ITIMEElement ITIMEElement;
#endif 	/* __ITIMEElement_FWD_DEFINED__ */


#ifndef __ITIMEBodyElement_FWD_DEFINED__
#define __ITIMEBodyElement_FWD_DEFINED__
typedef interface ITIMEBodyElement ITIMEBodyElement;
#endif 	/* __ITIMEBodyElement_FWD_DEFINED__ */


#ifndef __ITIMEMediaElement_FWD_DEFINED__
#define __ITIMEMediaElement_FWD_DEFINED__
typedef interface ITIMEMediaElement ITIMEMediaElement;
#endif 	/* __ITIMEMediaElement_FWD_DEFINED__ */


#ifndef __ITIMEMediaElement2_FWD_DEFINED__
#define __ITIMEMediaElement2_FWD_DEFINED__
typedef interface ITIMEMediaElement2 ITIMEMediaElement2;
#endif 	/* __ITIMEMediaElement2_FWD_DEFINED__ */


#ifndef __ITIMETransitionElement_FWD_DEFINED__
#define __ITIMETransitionElement_FWD_DEFINED__
typedef interface ITIMETransitionElement ITIMETransitionElement;
#endif 	/* __ITIMETransitionElement_FWD_DEFINED__ */


#ifndef __ITIMEAnimationElement_FWD_DEFINED__
#define __ITIMEAnimationElement_FWD_DEFINED__
typedef interface ITIMEAnimationElement ITIMEAnimationElement;
#endif 	/* __ITIMEAnimationElement_FWD_DEFINED__ */


#ifndef __ITIMEAnimationElement2_FWD_DEFINED__
#define __ITIMEAnimationElement2_FWD_DEFINED__
typedef interface ITIMEAnimationElement2 ITIMEAnimationElement2;
#endif 	/* __ITIMEAnimationElement2_FWD_DEFINED__ */


#ifndef __IAnimationComposer_FWD_DEFINED__
#define __IAnimationComposer_FWD_DEFINED__
typedef interface IAnimationComposer IAnimationComposer;
#endif 	/* __IAnimationComposer_FWD_DEFINED__ */


#ifndef __IAnimationComposer2_FWD_DEFINED__
#define __IAnimationComposer2_FWD_DEFINED__
typedef interface IAnimationComposer2 IAnimationComposer2;
#endif 	/* __IAnimationComposer2_FWD_DEFINED__ */


#ifndef __IAnimationComposerSite_FWD_DEFINED__
#define __IAnimationComposerSite_FWD_DEFINED__
typedef interface IAnimationComposerSite IAnimationComposerSite;
#endif 	/* __IAnimationComposerSite_FWD_DEFINED__ */


#ifndef __IAnimationComposerSiteSink_FWD_DEFINED__
#define __IAnimationComposerSiteSink_FWD_DEFINED__
typedef interface IAnimationComposerSiteSink IAnimationComposerSiteSink;
#endif 	/* __IAnimationComposerSiteSink_FWD_DEFINED__ */


#ifndef __IAnimationRoot_FWD_DEFINED__
#define __IAnimationRoot_FWD_DEFINED__
typedef interface IAnimationRoot IAnimationRoot;
#endif 	/* __IAnimationRoot_FWD_DEFINED__ */


#ifndef __IAnimationFragment_FWD_DEFINED__
#define __IAnimationFragment_FWD_DEFINED__
typedef interface IAnimationFragment IAnimationFragment;
#endif 	/* __IAnimationFragment_FWD_DEFINED__ */


#ifndef __IFilterAnimationInfo_FWD_DEFINED__
#define __IFilterAnimationInfo_FWD_DEFINED__
typedef interface IFilterAnimationInfo IFilterAnimationInfo;
#endif 	/* __IFilterAnimationInfo_FWD_DEFINED__ */


#ifndef __ITIMEElementCollection_FWD_DEFINED__
#define __ITIMEElementCollection_FWD_DEFINED__
typedef interface ITIMEElementCollection ITIMEElementCollection;
#endif 	/* __ITIMEElementCollection_FWD_DEFINED__ */


#ifndef __ITIMEState_FWD_DEFINED__
#define __ITIMEState_FWD_DEFINED__
typedef interface ITIMEState ITIMEState;
#endif 	/* __ITIMEState_FWD_DEFINED__ */


#ifndef __ITIMEPlayItem_FWD_DEFINED__
#define __ITIMEPlayItem_FWD_DEFINED__
typedef interface ITIMEPlayItem ITIMEPlayItem;
#endif 	/* __ITIMEPlayItem_FWD_DEFINED__ */


#ifndef __ITIMEPlayItem2_FWD_DEFINED__
#define __ITIMEPlayItem2_FWD_DEFINED__
typedef interface ITIMEPlayItem2 ITIMEPlayItem2;
#endif 	/* __ITIMEPlayItem2_FWD_DEFINED__ */


#ifndef __ITIMEPlayList_FWD_DEFINED__
#define __ITIMEPlayList_FWD_DEFINED__
typedef interface ITIMEPlayList ITIMEPlayList;
#endif 	/* __ITIMEPlayList_FWD_DEFINED__ */


#ifndef __ITIMEDVDPlayerObject_FWD_DEFINED__
#define __ITIMEDVDPlayerObject_FWD_DEFINED__
typedef interface ITIMEDVDPlayerObject ITIMEDVDPlayerObject;
#endif 	/* __ITIMEDVDPlayerObject_FWD_DEFINED__ */


#ifndef __ITIMEDMusicPlayerObject_FWD_DEFINED__
#define __ITIMEDMusicPlayerObject_FWD_DEFINED__
typedef interface ITIMEDMusicPlayerObject ITIMEDMusicPlayerObject;
#endif 	/* __ITIMEDMusicPlayerObject_FWD_DEFINED__ */


#ifndef __ITIMEFactory_FWD_DEFINED__
#define __ITIMEFactory_FWD_DEFINED__
typedef interface ITIMEFactory ITIMEFactory;
#endif 	/* __ITIMEFactory_FWD_DEFINED__ */


#ifndef __TIMEFactory_FWD_DEFINED__
#define __TIMEFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class TIMEFactory TIMEFactory;
#else
typedef struct TIMEFactory TIMEFactory;
#endif /* __cplusplus */

#endif 	/* __TIMEFactory_FWD_DEFINED__ */


#ifndef __IAnimationComposerFactory_FWD_DEFINED__
#define __IAnimationComposerFactory_FWD_DEFINED__
typedef interface IAnimationComposerFactory IAnimationComposerFactory;
#endif 	/* __IAnimationComposerFactory_FWD_DEFINED__ */


#ifndef __IAnimationComposerSiteFactory_FWD_DEFINED__
#define __IAnimationComposerSiteFactory_FWD_DEFINED__
typedef interface IAnimationComposerSiteFactory IAnimationComposerSiteFactory;
#endif 	/* __IAnimationComposerSiteFactory_FWD_DEFINED__ */


#ifndef __ITIMEMediaPlayerSite_FWD_DEFINED__
#define __ITIMEMediaPlayerSite_FWD_DEFINED__
typedef interface ITIMEMediaPlayerSite ITIMEMediaPlayerSite;
#endif 	/* __ITIMEMediaPlayerSite_FWD_DEFINED__ */


#ifndef __ITIMEMediaPlayer_FWD_DEFINED__
#define __ITIMEMediaPlayer_FWD_DEFINED__
typedef interface ITIMEMediaPlayer ITIMEMediaPlayer;
#endif 	/* __ITIMEMediaPlayer_FWD_DEFINED__ */


#ifndef __ITIMEMediaPlayerAudio_FWD_DEFINED__
#define __ITIMEMediaPlayerAudio_FWD_DEFINED__
typedef interface ITIMEMediaPlayerAudio ITIMEMediaPlayerAudio;
#endif 	/* __ITIMEMediaPlayerAudio_FWD_DEFINED__ */


#ifndef __ITIMEMediaPlayerNetwork_FWD_DEFINED__
#define __ITIMEMediaPlayerNetwork_FWD_DEFINED__
typedef interface ITIMEMediaPlayerNetwork ITIMEMediaPlayerNetwork;
#endif 	/* __ITIMEMediaPlayerNetwork_FWD_DEFINED__ */


#ifndef __ITIMEMediaPlayerControl_FWD_DEFINED__
#define __ITIMEMediaPlayerControl_FWD_DEFINED__
typedef interface ITIMEMediaPlayerControl ITIMEMediaPlayerControl;
#endif 	/* __ITIMEMediaPlayerControl_FWD_DEFINED__ */


/* header files for imported files */
#include "servprov.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_mstime_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// mstime.h
//=--------------------------------------------------------------------------=
// (C) Copyright Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#include <olectl.h>
#include <mstimeid.h>





extern RPC_IF_HANDLE __MIDL_itf_mstime_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mstime_0000_0000_v0_0_s_ifspec;


#ifndef __MSTIME_LIBRARY_DEFINED__
#define __MSTIME_LIBRARY_DEFINED__

/* library MSTIME */
/* [version][lcid][uuid] */ 

typedef 
enum _TimeState
    {	TS_Inactive	= 0,
	TS_Active	= 1,
	TS_Cueing	= 2,
	TS_Seeking	= 3,
	TS_Holding	= 4
    } 	TimeState;


EXTERN_C const IID LIBID_MSTIME;

#ifndef __ITIMEActiveElementCollection_INTERFACE_DEFINED__
#define __ITIMEActiveElementCollection_INTERFACE_DEFINED__

/* interface ITIMEActiveElementCollection */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEActiveElementCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("403E2540-4520-11D3-93AB-00A0C967A438")
    ITIMEActiveElementCollection : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *p) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][defaultvalue] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__out VARIANT *pvarResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEActiveElementCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEActiveElementCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEActiveElementCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEActiveElementCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [retval][out] */ __RPC__out long *p);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            __RPC__in ITIMEActiveElementCollection * This,
            /* [in][defaultvalue] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__out VARIANT *pvarResult);
        
        END_INTERFACE
    } ITIMEActiveElementCollectionVtbl;

    interface ITIMEActiveElementCollection
    {
        CONST_VTBL struct ITIMEActiveElementCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEActiveElementCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEActiveElementCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEActiveElementCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEActiveElementCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEActiveElementCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEActiveElementCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEActiveElementCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEActiveElementCollection_get_length(This,p)	\
    ( (This)->lpVtbl -> get_length(This,p) ) 

#define ITIMEActiveElementCollection_get__newEnum(This,p)	\
    ( (This)->lpVtbl -> get__newEnum(This,p) ) 

#define ITIMEActiveElementCollection_item(This,varIndex,pvarResult)	\
    ( (This)->lpVtbl -> item(This,varIndex,pvarResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEActiveElementCollection_INTERFACE_DEFINED__ */


#ifndef __ITIMEElement_INTERFACE_DEFINED__
#define __ITIMEElement_INTERFACE_DEFINED__

/* interface ITIMEElement */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C2EF64E-F07D-4338-9771-9154491CD8B9")
    ITIMEElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_accelerate( 
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_accelerate( 
            /* [in] */ VARIANT __MIDL__ITIMEElement0001) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_autoReverse( 
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_autoReverse( 
            /* [in] */ VARIANT __MIDL__ITIMEElement0003) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_begin( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_begin( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_decelerate( 
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_decelerate( 
            /* [in] */ VARIANT __MIDL__ITIMEElement0005) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dur( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dur( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_end( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_end( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fill( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_fill( 
            /* [in] */ __RPC__in BSTR f) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mute( 
            /* [retval][out] */ __RPC__out VARIANT *b) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_mute( 
            /* [in] */ VARIANT b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_repeatCount( 
            /* [retval][out] */ __RPC__out VARIANT *c) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_repeatCount( 
            /* [in] */ VARIANT c) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_repeatDur( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_repeatDur( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_restart( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_restart( 
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_speed( 
            /* [retval][out] */ __RPC__out VARIANT *speed) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_speed( 
            /* [in] */ VARIANT speed) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_syncBehavior( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_syncBehavior( 
            /* [in] */ __RPC__in BSTR sync) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_syncTolerance( 
            /* [retval][out] */ __RPC__out VARIANT *tol) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_syncTolerance( 
            /* [in] */ VARIANT tol) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_syncMaster( 
            /* [retval][out] */ __RPC__out VARIANT *b) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_syncMaster( 
            /* [in] */ VARIANT b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeAction( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_timeAction( 
            /* [in] */ __RPC__in BSTR time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeContainer( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_volume( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_volume( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_currTimeState( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeAll( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeChildren( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeParent( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isPaused( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE beginElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE beginElementAt( 
            /* [in] */ double parentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE endElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE endElementAt( 
            /* [in] */ double parentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE pauseElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE resetElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE resumeElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE seekActiveTime( 
            /* [in] */ double activeTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE seekSegmentTime( 
            /* [in] */ double segmentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE seekTo( 
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE documentTimeToParentTime( 
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE parentTimeToDocumentTime( 
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE parentTimeToActiveTime( 
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE activeTimeToParentTime( 
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE activeTimeToSegmentTime( 
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE segmentTimeToActiveTime( 
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE segmentTimeToSimpleTime( 
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE simpleTimeToSegmentTime( 
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_endSync( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_endSync( 
            /* [in] */ __RPC__in BSTR es) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_activeElements( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasMedia( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE nextElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE prevElement( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_updateMode( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_updateMode( 
            /* [in] */ __RPC__in BSTR updateMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEElement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEElement * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEElement * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        END_INTERFACE
    } ITIMEElementVtbl;

    interface ITIMEElement
    {
        CONST_VTBL struct ITIMEElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEElement_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEElement_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEElement_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEElement_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEElement_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEElement_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEElement_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEElement_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEElement_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEElement_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEElement_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEElement_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEElement_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEElement_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEElement_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEElement_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEElement_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEElement_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEElement_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEElement_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEElement_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEElement_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEElement_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEElement_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEElement_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEElement_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEElement_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEElement_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEElement_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEElement_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEElement_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEElement_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEElement_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEElement_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEElement_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEElement_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEElement_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEElement_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEElement_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEElement_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEElement_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEElement_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEElement_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEElement_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEElement_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEElement_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEElement_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEElement_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEElement_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEElement_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEElement_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEElement_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEElement_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEElement_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEElement_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEElement_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEElement_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEElement_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEElement_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEElement_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEElement_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEElement_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEElement_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEElement_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEElement_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEElement_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEElement_INTERFACE_DEFINED__ */


#ifndef __ITIMEBodyElement_INTERFACE_DEFINED__
#define __ITIMEBodyElement_INTERFACE_DEFINED__

/* interface ITIMEBodyElement */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEBodyElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8c90e348-ec0a-4229-90b0-e57d2ca45ccb")
    ITIMEBodyElement : public ITIMEElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ITIMEBodyElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEBodyElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEBodyElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEBodyElement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEBodyElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEBodyElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEBodyElement * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEBodyElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEBodyElement * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        END_INTERFACE
    } ITIMEBodyElementVtbl;

    interface ITIMEBodyElement
    {
        CONST_VTBL struct ITIMEBodyElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEBodyElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEBodyElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEBodyElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEBodyElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEBodyElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEBodyElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEBodyElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEBodyElement_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEBodyElement_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEBodyElement_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEBodyElement_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEBodyElement_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEBodyElement_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEBodyElement_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEBodyElement_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEBodyElement_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEBodyElement_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEBodyElement_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEBodyElement_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEBodyElement_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEBodyElement_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEBodyElement_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEBodyElement_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEBodyElement_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEBodyElement_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEBodyElement_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEBodyElement_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEBodyElement_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEBodyElement_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEBodyElement_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEBodyElement_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEBodyElement_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEBodyElement_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEBodyElement_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEBodyElement_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEBodyElement_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEBodyElement_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEBodyElement_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEBodyElement_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEBodyElement_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEBodyElement_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEBodyElement_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEBodyElement_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEBodyElement_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEBodyElement_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEBodyElement_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEBodyElement_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEBodyElement_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEBodyElement_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEBodyElement_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEBodyElement_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEBodyElement_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEBodyElement_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEBodyElement_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEBodyElement_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEBodyElement_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEBodyElement_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEBodyElement_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEBodyElement_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEBodyElement_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEBodyElement_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEBodyElement_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEBodyElement_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEBodyElement_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEBodyElement_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEBodyElement_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEBodyElement_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEBodyElement_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEBodyElement_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEBodyElement_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEBodyElement_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEBodyElement_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEBodyElement_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEBodyElement_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaElement_INTERFACE_DEFINED__
#define __ITIMEMediaElement_INTERFACE_DEFINED__

/* interface ITIMEMediaElement */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("47a6972f-ae65-4a6b-ae63-d0c1d5307b58")
    ITIMEMediaElement : public ITIMEElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clipBegin( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clipBegin( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clipEnd( 
            /* [retval][out] */ __RPC__out VARIANT *time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clipEnd( 
            /* [in] */ VARIANT time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_player( 
            /* [retval][out] */ __RPC__out VARIANT *id) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_player( 
            /* [in] */ VARIANT id) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [retval][out] */ __RPC__out VARIANT *url) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ VARIANT url) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [retval][out] */ __RPC__out VARIANT *mimetype) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ VARIANT mimetype) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_abstract( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_author( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_copyright( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasAudio( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasVisual( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaDur( 
            /* [retval][out] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaHeight( 
            /* [retval][out] */ __RPC__out long *height) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaWidth( 
            /* [retval][out] */ __RPC__out long *width) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_playerObject( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppDisp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_playList( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayList **pPlayList) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rating( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasPlayList( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canPause( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canSeek( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEMediaElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEMediaElement * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipBegin )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipBegin )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipEnd )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipEnd )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_player )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *id);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_player )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT id);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *url);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT url);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT *mimetype);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            __RPC__in ITIMEMediaElement * This,
            /* [in] */ VARIANT mimetype);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_abstract )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_author )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copyright )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasAudio )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasVisual )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaDur )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaHeight )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out long *height);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaWidth )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out long *width);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_playerObject )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppDisp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_playList )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayList **pPlayList);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rating )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasPlayList )( 
            __RPC__in ITIMEMediaElement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canPause )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canSeek )( 
            __RPC__in ITIMEMediaElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        END_INTERFACE
    } ITIMEMediaElementVtbl;

    interface ITIMEMediaElement
    {
        CONST_VTBL struct ITIMEMediaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEMediaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEMediaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEMediaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEMediaElement_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEMediaElement_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEMediaElement_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEMediaElement_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEMediaElement_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEMediaElement_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEMediaElement_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEMediaElement_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEMediaElement_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEMediaElement_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEMediaElement_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEMediaElement_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEMediaElement_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEMediaElement_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEMediaElement_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEMediaElement_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEMediaElement_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEMediaElement_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEMediaElement_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEMediaElement_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEMediaElement_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEMediaElement_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEMediaElement_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEMediaElement_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEMediaElement_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEMediaElement_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEMediaElement_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEMediaElement_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEMediaElement_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEMediaElement_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEMediaElement_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEMediaElement_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEMediaElement_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEMediaElement_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEMediaElement_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEMediaElement_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEMediaElement_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEMediaElement_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEMediaElement_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEMediaElement_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEMediaElement_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEMediaElement_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEMediaElement_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEMediaElement_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEMediaElement_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEMediaElement_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEMediaElement_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEMediaElement_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEMediaElement_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEMediaElement_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEMediaElement_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEMediaElement_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEMediaElement_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEMediaElement_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEMediaElement_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEMediaElement_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEMediaElement_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEMediaElement_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEMediaElement_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEMediaElement_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEMediaElement_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEMediaElement_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEMediaElement_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEMediaElement_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEMediaElement_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEMediaElement_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 


#define ITIMEMediaElement_get_clipBegin(This,time)	\
    ( (This)->lpVtbl -> get_clipBegin(This,time) ) 

#define ITIMEMediaElement_put_clipBegin(This,time)	\
    ( (This)->lpVtbl -> put_clipBegin(This,time) ) 

#define ITIMEMediaElement_get_clipEnd(This,time)	\
    ( (This)->lpVtbl -> get_clipEnd(This,time) ) 

#define ITIMEMediaElement_put_clipEnd(This,time)	\
    ( (This)->lpVtbl -> put_clipEnd(This,time) ) 

#define ITIMEMediaElement_get_player(This,id)	\
    ( (This)->lpVtbl -> get_player(This,id) ) 

#define ITIMEMediaElement_put_player(This,id)	\
    ( (This)->lpVtbl -> put_player(This,id) ) 

#define ITIMEMediaElement_get_src(This,url)	\
    ( (This)->lpVtbl -> get_src(This,url) ) 

#define ITIMEMediaElement_put_src(This,url)	\
    ( (This)->lpVtbl -> put_src(This,url) ) 

#define ITIMEMediaElement_get_type(This,mimetype)	\
    ( (This)->lpVtbl -> get_type(This,mimetype) ) 

#define ITIMEMediaElement_put_type(This,mimetype)	\
    ( (This)->lpVtbl -> put_type(This,mimetype) ) 

#define ITIMEMediaElement_get_abstract(This,abs)	\
    ( (This)->lpVtbl -> get_abstract(This,abs) ) 

#define ITIMEMediaElement_get_author(This,auth)	\
    ( (This)->lpVtbl -> get_author(This,auth) ) 

#define ITIMEMediaElement_get_copyright(This,cpyrght)	\
    ( (This)->lpVtbl -> get_copyright(This,cpyrght) ) 

#define ITIMEMediaElement_get_hasAudio(This,b)	\
    ( (This)->lpVtbl -> get_hasAudio(This,b) ) 

#define ITIMEMediaElement_get_hasVisual(This,b)	\
    ( (This)->lpVtbl -> get_hasVisual(This,b) ) 

#define ITIMEMediaElement_get_mediaDur(This,dur)	\
    ( (This)->lpVtbl -> get_mediaDur(This,dur) ) 

#define ITIMEMediaElement_get_mediaHeight(This,height)	\
    ( (This)->lpVtbl -> get_mediaHeight(This,height) ) 

#define ITIMEMediaElement_get_mediaWidth(This,width)	\
    ( (This)->lpVtbl -> get_mediaWidth(This,width) ) 

#define ITIMEMediaElement_get_playerObject(This,ppDisp)	\
    ( (This)->lpVtbl -> get_playerObject(This,ppDisp) ) 

#define ITIMEMediaElement_get_playList(This,pPlayList)	\
    ( (This)->lpVtbl -> get_playList(This,pPlayList) ) 

#define ITIMEMediaElement_get_rating(This,rate)	\
    ( (This)->lpVtbl -> get_rating(This,rate) ) 

#define ITIMEMediaElement_get_title(This,name)	\
    ( (This)->lpVtbl -> get_title(This,name) ) 

#define ITIMEMediaElement_get_hasPlayList(This,b)	\
    ( (This)->lpVtbl -> get_hasPlayList(This,b) ) 

#define ITIMEMediaElement_get_canPause(This,b)	\
    ( (This)->lpVtbl -> get_canPause(This,b) ) 

#define ITIMEMediaElement_get_canSeek(This,b)	\
    ( (This)->lpVtbl -> get_canSeek(This,b) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaElement_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaElement2_INTERFACE_DEFINED__
#define __ITIMEMediaElement2_INTERFACE_DEFINED__

/* interface ITIMEMediaElement2 */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9EE29400-7EE6-453a-85B3-4EC28E0305B4")
    ITIMEMediaElement2 : public ITIMEMediaElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_earliestMediaTime( 
            /* [retval][out] */ __RPC__out VARIANT *earliestMediaTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_latestMediaTime( 
            /* [retval][out] */ __RPC__out VARIANT *latestMediaTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_minBufferedMediaDur( 
            /* [retval][out] */ __RPC__out VARIANT *minBufferedMediaDur) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_minBufferedMediaDur( 
            /* [in] */ VARIANT minBufferedMediaDur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_downloadTotal( 
            /* [retval][out] */ __RPC__out VARIANT *downloadTotal) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_downloadCurrent( 
            /* [retval][out] */ __RPC__out VARIANT *downloadCurrent) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isStreamed( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bufferingProgress( 
            /* [retval][out] */ __RPC__out VARIANT *bufferingProgress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasDownloadProgress( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_downloadProgress( 
            /* [retval][out] */ __RPC__out VARIANT *downloadProgress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mimeType( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *mimeType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE seekToFrame( 
            /* [in] */ long frameNr) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE decodeMimeType( 
            /* [in] */ __RPC__in TCHAR *header,
            /* [in] */ long headerSize,
            /* [out] */ __RPC__deref_out_opt BSTR *mimeType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_currentFrame( 
            /* [retval][out] */ __RPC__out long *currFrame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEMediaElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEMediaElement2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipBegin )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipBegin )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipEnd )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipEnd )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_player )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *id);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_player )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT id);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *url);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT url);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *mimetype);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT mimetype);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_abstract )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_author )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copyright )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasAudio )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasVisual )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaDur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaHeight )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out long *height);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaWidth )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out long *width);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_playerObject )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppDisp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_playList )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayList **pPlayList);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rating )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasPlayList )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canPause )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canSeek )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_earliestMediaTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *earliestMediaTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_latestMediaTime )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *latestMediaTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_minBufferedMediaDur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *minBufferedMediaDur);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_minBufferedMediaDur )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ VARIANT minBufferedMediaDur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_downloadTotal )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *downloadTotal);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_downloadCurrent )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *downloadCurrent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isStreamed )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bufferingProgress )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *bufferingProgress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasDownloadProgress )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_downloadProgress )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *downloadProgress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mimeType )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *mimeType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekToFrame )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ long frameNr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *decodeMimeType )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [in] */ __RPC__in TCHAR *header,
            /* [in] */ long headerSize,
            /* [out] */ __RPC__deref_out_opt BSTR *mimeType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentFrame )( 
            __RPC__in ITIMEMediaElement2 * This,
            /* [retval][out] */ __RPC__out long *currFrame);
        
        END_INTERFACE
    } ITIMEMediaElement2Vtbl;

    interface ITIMEMediaElement2
    {
        CONST_VTBL struct ITIMEMediaElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaElement2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaElement2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaElement2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaElement2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEMediaElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEMediaElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEMediaElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEMediaElement2_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEMediaElement2_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEMediaElement2_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEMediaElement2_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEMediaElement2_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEMediaElement2_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEMediaElement2_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEMediaElement2_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEMediaElement2_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEMediaElement2_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEMediaElement2_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEMediaElement2_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEMediaElement2_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEMediaElement2_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEMediaElement2_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEMediaElement2_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEMediaElement2_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEMediaElement2_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEMediaElement2_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEMediaElement2_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEMediaElement2_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEMediaElement2_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEMediaElement2_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEMediaElement2_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEMediaElement2_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEMediaElement2_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEMediaElement2_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEMediaElement2_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEMediaElement2_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEMediaElement2_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEMediaElement2_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEMediaElement2_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEMediaElement2_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEMediaElement2_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEMediaElement2_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEMediaElement2_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEMediaElement2_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEMediaElement2_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEMediaElement2_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEMediaElement2_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEMediaElement2_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEMediaElement2_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEMediaElement2_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEMediaElement2_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEMediaElement2_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEMediaElement2_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEMediaElement2_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEMediaElement2_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEMediaElement2_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEMediaElement2_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEMediaElement2_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEMediaElement2_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEMediaElement2_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEMediaElement2_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEMediaElement2_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEMediaElement2_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEMediaElement2_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEMediaElement2_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEMediaElement2_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEMediaElement2_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEMediaElement2_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEMediaElement2_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEMediaElement2_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEMediaElement2_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEMediaElement2_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEMediaElement2_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 


#define ITIMEMediaElement2_get_clipBegin(This,time)	\
    ( (This)->lpVtbl -> get_clipBegin(This,time) ) 

#define ITIMEMediaElement2_put_clipBegin(This,time)	\
    ( (This)->lpVtbl -> put_clipBegin(This,time) ) 

#define ITIMEMediaElement2_get_clipEnd(This,time)	\
    ( (This)->lpVtbl -> get_clipEnd(This,time) ) 

#define ITIMEMediaElement2_put_clipEnd(This,time)	\
    ( (This)->lpVtbl -> put_clipEnd(This,time) ) 

#define ITIMEMediaElement2_get_player(This,id)	\
    ( (This)->lpVtbl -> get_player(This,id) ) 

#define ITIMEMediaElement2_put_player(This,id)	\
    ( (This)->lpVtbl -> put_player(This,id) ) 

#define ITIMEMediaElement2_get_src(This,url)	\
    ( (This)->lpVtbl -> get_src(This,url) ) 

#define ITIMEMediaElement2_put_src(This,url)	\
    ( (This)->lpVtbl -> put_src(This,url) ) 

#define ITIMEMediaElement2_get_type(This,mimetype)	\
    ( (This)->lpVtbl -> get_type(This,mimetype) ) 

#define ITIMEMediaElement2_put_type(This,mimetype)	\
    ( (This)->lpVtbl -> put_type(This,mimetype) ) 

#define ITIMEMediaElement2_get_abstract(This,abs)	\
    ( (This)->lpVtbl -> get_abstract(This,abs) ) 

#define ITIMEMediaElement2_get_author(This,auth)	\
    ( (This)->lpVtbl -> get_author(This,auth) ) 

#define ITIMEMediaElement2_get_copyright(This,cpyrght)	\
    ( (This)->lpVtbl -> get_copyright(This,cpyrght) ) 

#define ITIMEMediaElement2_get_hasAudio(This,b)	\
    ( (This)->lpVtbl -> get_hasAudio(This,b) ) 

#define ITIMEMediaElement2_get_hasVisual(This,b)	\
    ( (This)->lpVtbl -> get_hasVisual(This,b) ) 

#define ITIMEMediaElement2_get_mediaDur(This,dur)	\
    ( (This)->lpVtbl -> get_mediaDur(This,dur) ) 

#define ITIMEMediaElement2_get_mediaHeight(This,height)	\
    ( (This)->lpVtbl -> get_mediaHeight(This,height) ) 

#define ITIMEMediaElement2_get_mediaWidth(This,width)	\
    ( (This)->lpVtbl -> get_mediaWidth(This,width) ) 

#define ITIMEMediaElement2_get_playerObject(This,ppDisp)	\
    ( (This)->lpVtbl -> get_playerObject(This,ppDisp) ) 

#define ITIMEMediaElement2_get_playList(This,pPlayList)	\
    ( (This)->lpVtbl -> get_playList(This,pPlayList) ) 

#define ITIMEMediaElement2_get_rating(This,rate)	\
    ( (This)->lpVtbl -> get_rating(This,rate) ) 

#define ITIMEMediaElement2_get_title(This,name)	\
    ( (This)->lpVtbl -> get_title(This,name) ) 

#define ITIMEMediaElement2_get_hasPlayList(This,b)	\
    ( (This)->lpVtbl -> get_hasPlayList(This,b) ) 

#define ITIMEMediaElement2_get_canPause(This,b)	\
    ( (This)->lpVtbl -> get_canPause(This,b) ) 

#define ITIMEMediaElement2_get_canSeek(This,b)	\
    ( (This)->lpVtbl -> get_canSeek(This,b) ) 


#define ITIMEMediaElement2_get_earliestMediaTime(This,earliestMediaTime)	\
    ( (This)->lpVtbl -> get_earliestMediaTime(This,earliestMediaTime) ) 

#define ITIMEMediaElement2_get_latestMediaTime(This,latestMediaTime)	\
    ( (This)->lpVtbl -> get_latestMediaTime(This,latestMediaTime) ) 

#define ITIMEMediaElement2_get_minBufferedMediaDur(This,minBufferedMediaDur)	\
    ( (This)->lpVtbl -> get_minBufferedMediaDur(This,minBufferedMediaDur) ) 

#define ITIMEMediaElement2_put_minBufferedMediaDur(This,minBufferedMediaDur)	\
    ( (This)->lpVtbl -> put_minBufferedMediaDur(This,minBufferedMediaDur) ) 

#define ITIMEMediaElement2_get_downloadTotal(This,downloadTotal)	\
    ( (This)->lpVtbl -> get_downloadTotal(This,downloadTotal) ) 

#define ITIMEMediaElement2_get_downloadCurrent(This,downloadCurrent)	\
    ( (This)->lpVtbl -> get_downloadCurrent(This,downloadCurrent) ) 

#define ITIMEMediaElement2_get_isStreamed(This,b)	\
    ( (This)->lpVtbl -> get_isStreamed(This,b) ) 

#define ITIMEMediaElement2_get_bufferingProgress(This,bufferingProgress)	\
    ( (This)->lpVtbl -> get_bufferingProgress(This,bufferingProgress) ) 

#define ITIMEMediaElement2_get_hasDownloadProgress(This,b)	\
    ( (This)->lpVtbl -> get_hasDownloadProgress(This,b) ) 

#define ITIMEMediaElement2_get_downloadProgress(This,downloadProgress)	\
    ( (This)->lpVtbl -> get_downloadProgress(This,downloadProgress) ) 

#define ITIMEMediaElement2_get_mimeType(This,mimeType)	\
    ( (This)->lpVtbl -> get_mimeType(This,mimeType) ) 

#define ITIMEMediaElement2_seekToFrame(This,frameNr)	\
    ( (This)->lpVtbl -> seekToFrame(This,frameNr) ) 

#define ITIMEMediaElement2_decodeMimeType(This,header,headerSize,mimeType)	\
    ( (This)->lpVtbl -> decodeMimeType(This,header,headerSize,mimeType) ) 

#define ITIMEMediaElement2_get_currentFrame(This,currFrame)	\
    ( (This)->lpVtbl -> get_currentFrame(This,currFrame) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaElement2_INTERFACE_DEFINED__ */


#ifndef __ITIMETransitionElement_INTERFACE_DEFINED__
#define __ITIMETransitionElement_INTERFACE_DEFINED__

/* interface ITIMETransitionElement */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMETransitionElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f383d66f-5e68-4fc2-b641-03672b543a49")
    ITIMETransitionElement : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [retval][out] */ __RPC__out VARIANT *type) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ VARIANT type) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_subType( 
            /* [retval][out] */ __RPC__out VARIANT *subtype) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_subType( 
            /* [in] */ VARIANT subtype) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dur( 
            /* [retval][out] */ __RPC__out VARIANT *dur) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dur( 
            /* [in] */ VARIANT dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_startProgress( 
            /* [retval][out] */ __RPC__out VARIANT *startProgress) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_startProgress( 
            /* [in] */ VARIANT startProgress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_endProgress( 
            /* [retval][out] */ __RPC__out VARIANT *endProgress) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_endProgress( 
            /* [in] */ VARIANT endProgress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_direction( 
            /* [retval][out] */ __RPC__out VARIANT *direction) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_direction( 
            /* [in] */ VARIANT direction) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_repeatCount( 
            /* [retval][out] */ __RPC__out VARIANT *repeatCount) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_repeatCount( 
            /* [in] */ VARIANT repeatCount) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_begin( 
            /* [retval][out] */ __RPC__out VARIANT *begin) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_begin( 
            /* [in] */ VARIANT begin) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_end( 
            /* [retval][out] */ __RPC__out VARIANT *end) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_end( 
            /* [in] */ VARIANT end) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMETransitionElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMETransitionElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMETransitionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMETransitionElement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMETransitionElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *type);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT type);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_subType )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *subtype);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_subType )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT subtype);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *dur);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_startProgress )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *startProgress);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_startProgress )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT startProgress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endProgress )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *endProgress);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endProgress )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT endProgress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_direction )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *direction);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_direction )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT direction);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *repeatCount);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT repeatCount);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *begin);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT begin);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMETransitionElement * This,
            /* [retval][out] */ __RPC__out VARIANT *end);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMETransitionElement * This,
            /* [in] */ VARIANT end);
        
        END_INTERFACE
    } ITIMETransitionElementVtbl;

    interface ITIMETransitionElement
    {
        CONST_VTBL struct ITIMETransitionElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMETransitionElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMETransitionElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMETransitionElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMETransitionElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMETransitionElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMETransitionElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMETransitionElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMETransitionElement_get_type(This,type)	\
    ( (This)->lpVtbl -> get_type(This,type) ) 

#define ITIMETransitionElement_put_type(This,type)	\
    ( (This)->lpVtbl -> put_type(This,type) ) 

#define ITIMETransitionElement_get_subType(This,subtype)	\
    ( (This)->lpVtbl -> get_subType(This,subtype) ) 

#define ITIMETransitionElement_put_subType(This,subtype)	\
    ( (This)->lpVtbl -> put_subType(This,subtype) ) 

#define ITIMETransitionElement_get_dur(This,dur)	\
    ( (This)->lpVtbl -> get_dur(This,dur) ) 

#define ITIMETransitionElement_put_dur(This,dur)	\
    ( (This)->lpVtbl -> put_dur(This,dur) ) 

#define ITIMETransitionElement_get_startProgress(This,startProgress)	\
    ( (This)->lpVtbl -> get_startProgress(This,startProgress) ) 

#define ITIMETransitionElement_put_startProgress(This,startProgress)	\
    ( (This)->lpVtbl -> put_startProgress(This,startProgress) ) 

#define ITIMETransitionElement_get_endProgress(This,endProgress)	\
    ( (This)->lpVtbl -> get_endProgress(This,endProgress) ) 

#define ITIMETransitionElement_put_endProgress(This,endProgress)	\
    ( (This)->lpVtbl -> put_endProgress(This,endProgress) ) 

#define ITIMETransitionElement_get_direction(This,direction)	\
    ( (This)->lpVtbl -> get_direction(This,direction) ) 

#define ITIMETransitionElement_put_direction(This,direction)	\
    ( (This)->lpVtbl -> put_direction(This,direction) ) 

#define ITIMETransitionElement_get_repeatCount(This,repeatCount)	\
    ( (This)->lpVtbl -> get_repeatCount(This,repeatCount) ) 

#define ITIMETransitionElement_put_repeatCount(This,repeatCount)	\
    ( (This)->lpVtbl -> put_repeatCount(This,repeatCount) ) 

#define ITIMETransitionElement_get_begin(This,begin)	\
    ( (This)->lpVtbl -> get_begin(This,begin) ) 

#define ITIMETransitionElement_put_begin(This,begin)	\
    ( (This)->lpVtbl -> put_begin(This,begin) ) 

#define ITIMETransitionElement_get_end(This,end)	\
    ( (This)->lpVtbl -> get_end(This,end) ) 

#define ITIMETransitionElement_put_end(This,end)	\
    ( (This)->lpVtbl -> put_end(This,end) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMETransitionElement_INTERFACE_DEFINED__ */


#ifndef __ITIMEAnimationElement_INTERFACE_DEFINED__
#define __ITIMEAnimationElement_INTERFACE_DEFINED__

/* interface ITIMEAnimationElement */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEAnimationElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a74f14b1-b6a2-430a-a5e8-1f4e53f710fe")
    ITIMEAnimationElement : public ITIMEElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_attributeName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attrib) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_attributeName( 
            /* [in] */ __RPC__in BSTR attrib) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_by( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_by( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_calcMode( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *calcmode) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_calcMode( 
            /* [in] */ __RPC__in BSTR calcmode) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_from( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_from( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_keySplines( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_keySplines( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_keyTimes( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_keyTimes( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_targetElement( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *target) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_targetElement( 
            /* [in] */ __RPC__in BSTR target) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_to( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_to( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_values( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_values( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_origin( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_origin( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_path( 
            /* [retval][out] */ __RPC__out VARIANT *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_path( 
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_additive( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_additive( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_accumulate( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_accumulate( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEAnimationElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEAnimationElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEAnimationElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEAnimationElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEAnimationElement * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributeName )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attrib);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_attributeName )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR attrib);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_by )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_by )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_calcMode )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *calcmode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_calcMode )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR calcmode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_from )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_from )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_keySplines )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_keySplines )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_keyTimes )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_keyTimes )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_targetElement )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *target);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_targetElement )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR target);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_to )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_to )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_values )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_values )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_origin )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_origin )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_path )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_path )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_additive )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_additive )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accumulate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accumulate )( 
            __RPC__in ITIMEAnimationElement * This,
            /* [in] */ __RPC__in BSTR val);
        
        END_INTERFACE
    } ITIMEAnimationElementVtbl;

    interface ITIMEAnimationElement
    {
        CONST_VTBL struct ITIMEAnimationElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEAnimationElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEAnimationElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEAnimationElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEAnimationElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEAnimationElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEAnimationElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEAnimationElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEAnimationElement_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEAnimationElement_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEAnimationElement_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEAnimationElement_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEAnimationElement_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEAnimationElement_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEAnimationElement_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEAnimationElement_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEAnimationElement_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEAnimationElement_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEAnimationElement_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEAnimationElement_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEAnimationElement_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEAnimationElement_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEAnimationElement_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEAnimationElement_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEAnimationElement_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEAnimationElement_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEAnimationElement_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEAnimationElement_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEAnimationElement_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEAnimationElement_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEAnimationElement_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEAnimationElement_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEAnimationElement_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEAnimationElement_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEAnimationElement_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEAnimationElement_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEAnimationElement_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEAnimationElement_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEAnimationElement_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEAnimationElement_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEAnimationElement_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEAnimationElement_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEAnimationElement_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEAnimationElement_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEAnimationElement_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEAnimationElement_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEAnimationElement_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEAnimationElement_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEAnimationElement_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEAnimationElement_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEAnimationElement_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEAnimationElement_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEAnimationElement_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEAnimationElement_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEAnimationElement_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEAnimationElement_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEAnimationElement_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEAnimationElement_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEAnimationElement_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEAnimationElement_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEAnimationElement_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEAnimationElement_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEAnimationElement_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEAnimationElement_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEAnimationElement_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEAnimationElement_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEAnimationElement_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEAnimationElement_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEAnimationElement_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEAnimationElement_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEAnimationElement_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEAnimationElement_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEAnimationElement_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEAnimationElement_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 


#define ITIMEAnimationElement_get_attributeName(This,attrib)	\
    ( (This)->lpVtbl -> get_attributeName(This,attrib) ) 

#define ITIMEAnimationElement_put_attributeName(This,attrib)	\
    ( (This)->lpVtbl -> put_attributeName(This,attrib) ) 

#define ITIMEAnimationElement_get_by(This,val)	\
    ( (This)->lpVtbl -> get_by(This,val) ) 

#define ITIMEAnimationElement_put_by(This,val)	\
    ( (This)->lpVtbl -> put_by(This,val) ) 

#define ITIMEAnimationElement_get_calcMode(This,calcmode)	\
    ( (This)->lpVtbl -> get_calcMode(This,calcmode) ) 

#define ITIMEAnimationElement_put_calcMode(This,calcmode)	\
    ( (This)->lpVtbl -> put_calcMode(This,calcmode) ) 

#define ITIMEAnimationElement_get_from(This,val)	\
    ( (This)->lpVtbl -> get_from(This,val) ) 

#define ITIMEAnimationElement_put_from(This,val)	\
    ( (This)->lpVtbl -> put_from(This,val) ) 

#define ITIMEAnimationElement_get_keySplines(This,val)	\
    ( (This)->lpVtbl -> get_keySplines(This,val) ) 

#define ITIMEAnimationElement_put_keySplines(This,val)	\
    ( (This)->lpVtbl -> put_keySplines(This,val) ) 

#define ITIMEAnimationElement_get_keyTimes(This,val)	\
    ( (This)->lpVtbl -> get_keyTimes(This,val) ) 

#define ITIMEAnimationElement_put_keyTimes(This,val)	\
    ( (This)->lpVtbl -> put_keyTimes(This,val) ) 

#define ITIMEAnimationElement_get_targetElement(This,target)	\
    ( (This)->lpVtbl -> get_targetElement(This,target) ) 

#define ITIMEAnimationElement_put_targetElement(This,target)	\
    ( (This)->lpVtbl -> put_targetElement(This,target) ) 

#define ITIMEAnimationElement_get_to(This,val)	\
    ( (This)->lpVtbl -> get_to(This,val) ) 

#define ITIMEAnimationElement_put_to(This,val)	\
    ( (This)->lpVtbl -> put_to(This,val) ) 

#define ITIMEAnimationElement_get_values(This,val)	\
    ( (This)->lpVtbl -> get_values(This,val) ) 

#define ITIMEAnimationElement_put_values(This,val)	\
    ( (This)->lpVtbl -> put_values(This,val) ) 

#define ITIMEAnimationElement_get_origin(This,val)	\
    ( (This)->lpVtbl -> get_origin(This,val) ) 

#define ITIMEAnimationElement_put_origin(This,val)	\
    ( (This)->lpVtbl -> put_origin(This,val) ) 

#define ITIMEAnimationElement_get_path(This,val)	\
    ( (This)->lpVtbl -> get_path(This,val) ) 

#define ITIMEAnimationElement_put_path(This,val)	\
    ( (This)->lpVtbl -> put_path(This,val) ) 

#define ITIMEAnimationElement_get_additive(This,val)	\
    ( (This)->lpVtbl -> get_additive(This,val) ) 

#define ITIMEAnimationElement_put_additive(This,val)	\
    ( (This)->lpVtbl -> put_additive(This,val) ) 

#define ITIMEAnimationElement_get_accumulate(This,val)	\
    ( (This)->lpVtbl -> get_accumulate(This,val) ) 

#define ITIMEAnimationElement_put_accumulate(This,val)	\
    ( (This)->lpVtbl -> put_accumulate(This,val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEAnimationElement_INTERFACE_DEFINED__ */


#ifndef __ITIMEAnimationElement2_INTERFACE_DEFINED__
#define __ITIMEAnimationElement2_INTERFACE_DEFINED__

/* interface ITIMEAnimationElement2 */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEAnimationElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("29CE8661-BD43-421a-B616-E9B31F33A572")
    ITIMEAnimationElement2 : public ITIMEAnimationElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_subType( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_subType( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mode( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_mode( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_fadeColor( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_fadeColor( 
            /* [in] */ __RPC__in BSTR val) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEAnimationElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEAnimationElement2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accelerate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0000);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accelerate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0001);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_autoReverse )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0002);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_autoReverse )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0003);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_begin )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_begin )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_decelerate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *__MIDL__ITIMEElement0004);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_decelerate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT __MIDL__ITIMEElement0005);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dur )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_end )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_end )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fill )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fill )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR f);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *c);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatCount )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT c);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatDur )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_repeatDur )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_restart )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0006);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_restart )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR __MIDL__ITIMEElement0007);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *speed);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_speed )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncBehavior )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *sync);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncBehavior )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR sync);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncTolerance )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *tol);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncTolerance )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT tol);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncMaster )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_syncMaster )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAction )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeAction )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeContainer )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *__MIDL__ITIMEElement0008);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTimeState )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **TimeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeAll )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **allColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeChildren )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElementCollection **childColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeParent )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **parent);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *beginElementAt )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *endElementAt )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pauseElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resetElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resumeElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekActiveTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekSegmentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seekTo )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ LONG repeatCount,
            /* [in] */ double segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *documentTimeToParentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double documentTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToDocumentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *documentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *parentTimeToActiveTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double parentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToParentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *parentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *activeTimeToSegmentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double activeTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToActiveTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *activeTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *segmentTimeToSimpleTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double segmentTime,
            /* [retval][out] */ __RPC__out double *simpleTime);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *simpleTimeToSegmentTime )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ double simpleTime,
            /* [retval][out] */ __RPC__out double *segmentTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_endSync )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *es);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_endSync )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR es);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeElements )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEActiveElementCollection **activeColl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasMedia )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *flag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevElement )( 
            __RPC__in ITIMEAnimationElement2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateMode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *updateMode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_updateMode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR updateMode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributeName )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attrib);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_attributeName )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR attrib);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_by )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_by )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_calcMode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *calcmode);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_calcMode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR calcmode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_from )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_from )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_keySplines )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_keySplines )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_keyTimes )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_keyTimes )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_targetElement )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *target);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_targetElement )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR target);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_to )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_to )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_values )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_values )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_origin )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_origin )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_path )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__out VARIANT *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_path )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ VARIANT val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_additive )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_additive )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_accumulate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_accumulate )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_type )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_subType )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_subType )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mode )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_fadeColor )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *val);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_fadeColor )( 
            __RPC__in ITIMEAnimationElement2 * This,
            /* [in] */ __RPC__in BSTR val);
        
        END_INTERFACE
    } ITIMEAnimationElement2Vtbl;

    interface ITIMEAnimationElement2
    {
        CONST_VTBL struct ITIMEAnimationElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEAnimationElement2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEAnimationElement2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEAnimationElement2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEAnimationElement2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEAnimationElement2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEAnimationElement2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEAnimationElement2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEAnimationElement2_get_accelerate(This,__MIDL__ITIMEElement0000)	\
    ( (This)->lpVtbl -> get_accelerate(This,__MIDL__ITIMEElement0000) ) 

#define ITIMEAnimationElement2_put_accelerate(This,__MIDL__ITIMEElement0001)	\
    ( (This)->lpVtbl -> put_accelerate(This,__MIDL__ITIMEElement0001) ) 

#define ITIMEAnimationElement2_get_autoReverse(This,__MIDL__ITIMEElement0002)	\
    ( (This)->lpVtbl -> get_autoReverse(This,__MIDL__ITIMEElement0002) ) 

#define ITIMEAnimationElement2_put_autoReverse(This,__MIDL__ITIMEElement0003)	\
    ( (This)->lpVtbl -> put_autoReverse(This,__MIDL__ITIMEElement0003) ) 

#define ITIMEAnimationElement2_get_begin(This,time)	\
    ( (This)->lpVtbl -> get_begin(This,time) ) 

#define ITIMEAnimationElement2_put_begin(This,time)	\
    ( (This)->lpVtbl -> put_begin(This,time) ) 

#define ITIMEAnimationElement2_get_decelerate(This,__MIDL__ITIMEElement0004)	\
    ( (This)->lpVtbl -> get_decelerate(This,__MIDL__ITIMEElement0004) ) 

#define ITIMEAnimationElement2_put_decelerate(This,__MIDL__ITIMEElement0005)	\
    ( (This)->lpVtbl -> put_decelerate(This,__MIDL__ITIMEElement0005) ) 

#define ITIMEAnimationElement2_get_dur(This,time)	\
    ( (This)->lpVtbl -> get_dur(This,time) ) 

#define ITIMEAnimationElement2_put_dur(This,time)	\
    ( (This)->lpVtbl -> put_dur(This,time) ) 

#define ITIMEAnimationElement2_get_end(This,time)	\
    ( (This)->lpVtbl -> get_end(This,time) ) 

#define ITIMEAnimationElement2_put_end(This,time)	\
    ( (This)->lpVtbl -> put_end(This,time) ) 

#define ITIMEAnimationElement2_get_fill(This,f)	\
    ( (This)->lpVtbl -> get_fill(This,f) ) 

#define ITIMEAnimationElement2_put_fill(This,f)	\
    ( (This)->lpVtbl -> put_fill(This,f) ) 

#define ITIMEAnimationElement2_get_mute(This,b)	\
    ( (This)->lpVtbl -> get_mute(This,b) ) 

#define ITIMEAnimationElement2_put_mute(This,b)	\
    ( (This)->lpVtbl -> put_mute(This,b) ) 

#define ITIMEAnimationElement2_get_repeatCount(This,c)	\
    ( (This)->lpVtbl -> get_repeatCount(This,c) ) 

#define ITIMEAnimationElement2_put_repeatCount(This,c)	\
    ( (This)->lpVtbl -> put_repeatCount(This,c) ) 

#define ITIMEAnimationElement2_get_repeatDur(This,time)	\
    ( (This)->lpVtbl -> get_repeatDur(This,time) ) 

#define ITIMEAnimationElement2_put_repeatDur(This,time)	\
    ( (This)->lpVtbl -> put_repeatDur(This,time) ) 

#define ITIMEAnimationElement2_get_restart(This,__MIDL__ITIMEElement0006)	\
    ( (This)->lpVtbl -> get_restart(This,__MIDL__ITIMEElement0006) ) 

#define ITIMEAnimationElement2_put_restart(This,__MIDL__ITIMEElement0007)	\
    ( (This)->lpVtbl -> put_restart(This,__MIDL__ITIMEElement0007) ) 

#define ITIMEAnimationElement2_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEAnimationElement2_put_speed(This,speed)	\
    ( (This)->lpVtbl -> put_speed(This,speed) ) 

#define ITIMEAnimationElement2_get_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> get_syncBehavior(This,sync) ) 

#define ITIMEAnimationElement2_put_syncBehavior(This,sync)	\
    ( (This)->lpVtbl -> put_syncBehavior(This,sync) ) 

#define ITIMEAnimationElement2_get_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> get_syncTolerance(This,tol) ) 

#define ITIMEAnimationElement2_put_syncTolerance(This,tol)	\
    ( (This)->lpVtbl -> put_syncTolerance(This,tol) ) 

#define ITIMEAnimationElement2_get_syncMaster(This,b)	\
    ( (This)->lpVtbl -> get_syncMaster(This,b) ) 

#define ITIMEAnimationElement2_put_syncMaster(This,b)	\
    ( (This)->lpVtbl -> put_syncMaster(This,b) ) 

#define ITIMEAnimationElement2_get_timeAction(This,time)	\
    ( (This)->lpVtbl -> get_timeAction(This,time) ) 

#define ITIMEAnimationElement2_put_timeAction(This,time)	\
    ( (This)->lpVtbl -> put_timeAction(This,time) ) 

#define ITIMEAnimationElement2_get_timeContainer(This,__MIDL__ITIMEElement0008)	\
    ( (This)->lpVtbl -> get_timeContainer(This,__MIDL__ITIMEElement0008) ) 

#define ITIMEAnimationElement2_get_volume(This,val)	\
    ( (This)->lpVtbl -> get_volume(This,val) ) 

#define ITIMEAnimationElement2_put_volume(This,val)	\
    ( (This)->lpVtbl -> put_volume(This,val) ) 

#define ITIMEAnimationElement2_get_currTimeState(This,TimeState)	\
    ( (This)->lpVtbl -> get_currTimeState(This,TimeState) ) 

#define ITIMEAnimationElement2_get_timeAll(This,allColl)	\
    ( (This)->lpVtbl -> get_timeAll(This,allColl) ) 

#define ITIMEAnimationElement2_get_timeChildren(This,childColl)	\
    ( (This)->lpVtbl -> get_timeChildren(This,childColl) ) 

#define ITIMEAnimationElement2_get_timeParent(This,parent)	\
    ( (This)->lpVtbl -> get_timeParent(This,parent) ) 

#define ITIMEAnimationElement2_get_isPaused(This,b)	\
    ( (This)->lpVtbl -> get_isPaused(This,b) ) 

#define ITIMEAnimationElement2_beginElement(This)	\
    ( (This)->lpVtbl -> beginElement(This) ) 

#define ITIMEAnimationElement2_beginElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> beginElementAt(This,parentTime) ) 

#define ITIMEAnimationElement2_endElement(This)	\
    ( (This)->lpVtbl -> endElement(This) ) 

#define ITIMEAnimationElement2_endElementAt(This,parentTime)	\
    ( (This)->lpVtbl -> endElementAt(This,parentTime) ) 

#define ITIMEAnimationElement2_pauseElement(This)	\
    ( (This)->lpVtbl -> pauseElement(This) ) 

#define ITIMEAnimationElement2_resetElement(This)	\
    ( (This)->lpVtbl -> resetElement(This) ) 

#define ITIMEAnimationElement2_resumeElement(This)	\
    ( (This)->lpVtbl -> resumeElement(This) ) 

#define ITIMEAnimationElement2_seekActiveTime(This,activeTime)	\
    ( (This)->lpVtbl -> seekActiveTime(This,activeTime) ) 

#define ITIMEAnimationElement2_seekSegmentTime(This,segmentTime)	\
    ( (This)->lpVtbl -> seekSegmentTime(This,segmentTime) ) 

#define ITIMEAnimationElement2_seekTo(This,repeatCount,segmentTime)	\
    ( (This)->lpVtbl -> seekTo(This,repeatCount,segmentTime) ) 

#define ITIMEAnimationElement2_documentTimeToParentTime(This,documentTime,parentTime)	\
    ( (This)->lpVtbl -> documentTimeToParentTime(This,documentTime,parentTime) ) 

#define ITIMEAnimationElement2_parentTimeToDocumentTime(This,parentTime,documentTime)	\
    ( (This)->lpVtbl -> parentTimeToDocumentTime(This,parentTime,documentTime) ) 

#define ITIMEAnimationElement2_parentTimeToActiveTime(This,parentTime,activeTime)	\
    ( (This)->lpVtbl -> parentTimeToActiveTime(This,parentTime,activeTime) ) 

#define ITIMEAnimationElement2_activeTimeToParentTime(This,activeTime,parentTime)	\
    ( (This)->lpVtbl -> activeTimeToParentTime(This,activeTime,parentTime) ) 

#define ITIMEAnimationElement2_activeTimeToSegmentTime(This,activeTime,segmentTime)	\
    ( (This)->lpVtbl -> activeTimeToSegmentTime(This,activeTime,segmentTime) ) 

#define ITIMEAnimationElement2_segmentTimeToActiveTime(This,segmentTime,activeTime)	\
    ( (This)->lpVtbl -> segmentTimeToActiveTime(This,segmentTime,activeTime) ) 

#define ITIMEAnimationElement2_segmentTimeToSimpleTime(This,segmentTime,simpleTime)	\
    ( (This)->lpVtbl -> segmentTimeToSimpleTime(This,segmentTime,simpleTime) ) 

#define ITIMEAnimationElement2_simpleTimeToSegmentTime(This,simpleTime,segmentTime)	\
    ( (This)->lpVtbl -> simpleTimeToSegmentTime(This,simpleTime,segmentTime) ) 

#define ITIMEAnimationElement2_get_endSync(This,es)	\
    ( (This)->lpVtbl -> get_endSync(This,es) ) 

#define ITIMEAnimationElement2_put_endSync(This,es)	\
    ( (This)->lpVtbl -> put_endSync(This,es) ) 

#define ITIMEAnimationElement2_get_activeElements(This,activeColl)	\
    ( (This)->lpVtbl -> get_activeElements(This,activeColl) ) 

#define ITIMEAnimationElement2_get_hasMedia(This,flag)	\
    ( (This)->lpVtbl -> get_hasMedia(This,flag) ) 

#define ITIMEAnimationElement2_nextElement(This)	\
    ( (This)->lpVtbl -> nextElement(This) ) 

#define ITIMEAnimationElement2_prevElement(This)	\
    ( (This)->lpVtbl -> prevElement(This) ) 

#define ITIMEAnimationElement2_get_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> get_updateMode(This,updateMode) ) 

#define ITIMEAnimationElement2_put_updateMode(This,updateMode)	\
    ( (This)->lpVtbl -> put_updateMode(This,updateMode) ) 


#define ITIMEAnimationElement2_get_attributeName(This,attrib)	\
    ( (This)->lpVtbl -> get_attributeName(This,attrib) ) 

#define ITIMEAnimationElement2_put_attributeName(This,attrib)	\
    ( (This)->lpVtbl -> put_attributeName(This,attrib) ) 

#define ITIMEAnimationElement2_get_by(This,val)	\
    ( (This)->lpVtbl -> get_by(This,val) ) 

#define ITIMEAnimationElement2_put_by(This,val)	\
    ( (This)->lpVtbl -> put_by(This,val) ) 

#define ITIMEAnimationElement2_get_calcMode(This,calcmode)	\
    ( (This)->lpVtbl -> get_calcMode(This,calcmode) ) 

#define ITIMEAnimationElement2_put_calcMode(This,calcmode)	\
    ( (This)->lpVtbl -> put_calcMode(This,calcmode) ) 

#define ITIMEAnimationElement2_get_from(This,val)	\
    ( (This)->lpVtbl -> get_from(This,val) ) 

#define ITIMEAnimationElement2_put_from(This,val)	\
    ( (This)->lpVtbl -> put_from(This,val) ) 

#define ITIMEAnimationElement2_get_keySplines(This,val)	\
    ( (This)->lpVtbl -> get_keySplines(This,val) ) 

#define ITIMEAnimationElement2_put_keySplines(This,val)	\
    ( (This)->lpVtbl -> put_keySplines(This,val) ) 

#define ITIMEAnimationElement2_get_keyTimes(This,val)	\
    ( (This)->lpVtbl -> get_keyTimes(This,val) ) 

#define ITIMEAnimationElement2_put_keyTimes(This,val)	\
    ( (This)->lpVtbl -> put_keyTimes(This,val) ) 

#define ITIMEAnimationElement2_get_targetElement(This,target)	\
    ( (This)->lpVtbl -> get_targetElement(This,target) ) 

#define ITIMEAnimationElement2_put_targetElement(This,target)	\
    ( (This)->lpVtbl -> put_targetElement(This,target) ) 

#define ITIMEAnimationElement2_get_to(This,val)	\
    ( (This)->lpVtbl -> get_to(This,val) ) 

#define ITIMEAnimationElement2_put_to(This,val)	\
    ( (This)->lpVtbl -> put_to(This,val) ) 

#define ITIMEAnimationElement2_get_values(This,val)	\
    ( (This)->lpVtbl -> get_values(This,val) ) 

#define ITIMEAnimationElement2_put_values(This,val)	\
    ( (This)->lpVtbl -> put_values(This,val) ) 

#define ITIMEAnimationElement2_get_origin(This,val)	\
    ( (This)->lpVtbl -> get_origin(This,val) ) 

#define ITIMEAnimationElement2_put_origin(This,val)	\
    ( (This)->lpVtbl -> put_origin(This,val) ) 

#define ITIMEAnimationElement2_get_path(This,val)	\
    ( (This)->lpVtbl -> get_path(This,val) ) 

#define ITIMEAnimationElement2_put_path(This,val)	\
    ( (This)->lpVtbl -> put_path(This,val) ) 

#define ITIMEAnimationElement2_get_additive(This,val)	\
    ( (This)->lpVtbl -> get_additive(This,val) ) 

#define ITIMEAnimationElement2_put_additive(This,val)	\
    ( (This)->lpVtbl -> put_additive(This,val) ) 

#define ITIMEAnimationElement2_get_accumulate(This,val)	\
    ( (This)->lpVtbl -> get_accumulate(This,val) ) 

#define ITIMEAnimationElement2_put_accumulate(This,val)	\
    ( (This)->lpVtbl -> put_accumulate(This,val) ) 


#define ITIMEAnimationElement2_get_type(This,val)	\
    ( (This)->lpVtbl -> get_type(This,val) ) 

#define ITIMEAnimationElement2_put_type(This,val)	\
    ( (This)->lpVtbl -> put_type(This,val) ) 

#define ITIMEAnimationElement2_get_subType(This,val)	\
    ( (This)->lpVtbl -> get_subType(This,val) ) 

#define ITIMEAnimationElement2_put_subType(This,val)	\
    ( (This)->lpVtbl -> put_subType(This,val) ) 

#define ITIMEAnimationElement2_get_mode(This,val)	\
    ( (This)->lpVtbl -> get_mode(This,val) ) 

#define ITIMEAnimationElement2_put_mode(This,val)	\
    ( (This)->lpVtbl -> put_mode(This,val) ) 

#define ITIMEAnimationElement2_get_fadeColor(This,val)	\
    ( (This)->lpVtbl -> get_fadeColor(This,val) ) 

#define ITIMEAnimationElement2_put_fadeColor(This,val)	\
    ( (This)->lpVtbl -> put_fadeColor(This,val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEAnimationElement2_INTERFACE_DEFINED__ */


#ifndef __IAnimationComposer_INTERFACE_DEFINED__
#define __IAnimationComposer_INTERFACE_DEFINED__

/* interface IAnimationComposer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5459C83D-322B-44b3-8DAA-24C947E7B275")
    IAnimationComposer : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_attribute( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ComposerInit( 
            __RPC__in_opt IDispatch *composerSite,
            __RPC__in BSTR attributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ComposerDetach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateFragments( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddFragment( 
            __RPC__in_opt IDispatch *newAnimationFragment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertFragment( 
            __RPC__in_opt IDispatch *newAnimationFragment,
            VARIANT index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveFragment( 
            __RPC__in_opt IDispatch *oldAnimationFragment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumerateFragments( 
            __RPC__deref_in_opt IEnumVARIANT **fragments) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNumFragments( 
            __RPC__in long *fragmentCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposer * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_attribute )( 
            __RPC__in IAnimationComposer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attributeName);
        
        HRESULT ( STDMETHODCALLTYPE *ComposerInit )( 
            __RPC__in IAnimationComposer * This,
            __RPC__in_opt IDispatch *composerSite,
            __RPC__in BSTR attributeName);
        
        HRESULT ( STDMETHODCALLTYPE *ComposerDetach )( 
            __RPC__in IAnimationComposer * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateFragments )( 
            __RPC__in IAnimationComposer * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddFragment )( 
            __RPC__in IAnimationComposer * This,
            __RPC__in_opt IDispatch *newAnimationFragment);
        
        HRESULT ( STDMETHODCALLTYPE *InsertFragment )( 
            __RPC__in IAnimationComposer * This,
            __RPC__in_opt IDispatch *newAnimationFragment,
            VARIANT index);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFragment )( 
            __RPC__in IAnimationComposer * This,
            __RPC__in_opt IDispatch *oldAnimationFragment);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateFragments )( 
            __RPC__in IAnimationComposer * This,
            __RPC__deref_in_opt IEnumVARIANT **fragments);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumFragments )( 
            __RPC__in IAnimationComposer * This,
            __RPC__in long *fragmentCount);
        
        END_INTERFACE
    } IAnimationComposerVtbl;

    interface IAnimationComposer
    {
        CONST_VTBL struct IAnimationComposerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposer_get_attribute(This,attributeName)	\
    ( (This)->lpVtbl -> get_attribute(This,attributeName) ) 

#define IAnimationComposer_ComposerInit(This,composerSite,attributeName)	\
    ( (This)->lpVtbl -> ComposerInit(This,composerSite,attributeName) ) 

#define IAnimationComposer_ComposerDetach(This)	\
    ( (This)->lpVtbl -> ComposerDetach(This) ) 

#define IAnimationComposer_UpdateFragments(This)	\
    ( (This)->lpVtbl -> UpdateFragments(This) ) 

#define IAnimationComposer_AddFragment(This,newAnimationFragment)	\
    ( (This)->lpVtbl -> AddFragment(This,newAnimationFragment) ) 

#define IAnimationComposer_InsertFragment(This,newAnimationFragment,index)	\
    ( (This)->lpVtbl -> InsertFragment(This,newAnimationFragment,index) ) 

#define IAnimationComposer_RemoveFragment(This,oldAnimationFragment)	\
    ( (This)->lpVtbl -> RemoveFragment(This,oldAnimationFragment) ) 

#define IAnimationComposer_EnumerateFragments(This,fragments)	\
    ( (This)->lpVtbl -> EnumerateFragments(This,fragments) ) 

#define IAnimationComposer_GetNumFragments(This,fragmentCount)	\
    ( (This)->lpVtbl -> GetNumFragments(This,fragmentCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposer_INTERFACE_DEFINED__ */


#ifndef __IAnimationComposer2_INTERFACE_DEFINED__
#define __IAnimationComposer2_INTERFACE_DEFINED__

/* interface IAnimationComposer2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1A4F0E79-09CD-47f3-AFF1-483BF3A222DC")
    IAnimationComposer2 : public IAnimationComposer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ComposerInitFromFragment( 
            __RPC__in_opt IDispatch *composerSite,
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *oneFragment) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposer2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_attribute )( 
            __RPC__in IAnimationComposer2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *attributeName);
        
        HRESULT ( STDMETHODCALLTYPE *ComposerInit )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in_opt IDispatch *composerSite,
            __RPC__in BSTR attributeName);
        
        HRESULT ( STDMETHODCALLTYPE *ComposerDetach )( 
            __RPC__in IAnimationComposer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateFragments )( 
            __RPC__in IAnimationComposer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddFragment )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in_opt IDispatch *newAnimationFragment);
        
        HRESULT ( STDMETHODCALLTYPE *InsertFragment )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in_opt IDispatch *newAnimationFragment,
            VARIANT index);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFragment )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in_opt IDispatch *oldAnimationFragment);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateFragments )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__deref_in_opt IEnumVARIANT **fragments);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumFragments )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in long *fragmentCount);
        
        HRESULT ( STDMETHODCALLTYPE *ComposerInitFromFragment )( 
            __RPC__in IAnimationComposer2 * This,
            __RPC__in_opt IDispatch *composerSite,
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *oneFragment);
        
        END_INTERFACE
    } IAnimationComposer2Vtbl;

    interface IAnimationComposer2
    {
        CONST_VTBL struct IAnimationComposer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposer2_get_attribute(This,attributeName)	\
    ( (This)->lpVtbl -> get_attribute(This,attributeName) ) 

#define IAnimationComposer2_ComposerInit(This,composerSite,attributeName)	\
    ( (This)->lpVtbl -> ComposerInit(This,composerSite,attributeName) ) 

#define IAnimationComposer2_ComposerDetach(This)	\
    ( (This)->lpVtbl -> ComposerDetach(This) ) 

#define IAnimationComposer2_UpdateFragments(This)	\
    ( (This)->lpVtbl -> UpdateFragments(This) ) 

#define IAnimationComposer2_AddFragment(This,newAnimationFragment)	\
    ( (This)->lpVtbl -> AddFragment(This,newAnimationFragment) ) 

#define IAnimationComposer2_InsertFragment(This,newAnimationFragment,index)	\
    ( (This)->lpVtbl -> InsertFragment(This,newAnimationFragment,index) ) 

#define IAnimationComposer2_RemoveFragment(This,oldAnimationFragment)	\
    ( (This)->lpVtbl -> RemoveFragment(This,oldAnimationFragment) ) 

#define IAnimationComposer2_EnumerateFragments(This,fragments)	\
    ( (This)->lpVtbl -> EnumerateFragments(This,fragments) ) 

#define IAnimationComposer2_GetNumFragments(This,fragmentCount)	\
    ( (This)->lpVtbl -> GetNumFragments(This,fragmentCount) ) 


#define IAnimationComposer2_ComposerInitFromFragment(This,composerSite,attributeName,oneFragment)	\
    ( (This)->lpVtbl -> ComposerInitFromFragment(This,composerSite,attributeName,oneFragment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposer2_INTERFACE_DEFINED__ */


#ifndef __IAnimationComposerSite_INTERFACE_DEFINED__
#define __IAnimationComposerSite_INTERFACE_DEFINED__

/* interface IAnimationComposerSite */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposerSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("488FCB56-8FD6-4cda-A06A-5BB232930ECA")
    IAnimationComposerSite : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddFragment( 
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveFragment( 
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE InsertFragment( 
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment,
            VARIANT index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerateFragments( 
            __RPC__in BSTR attributeName,
            __RPC__deref_in_opt IEnumVARIANT **fragments) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RegisterComposerFactory( 
            __RPC__in VARIANT *factory) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UnregisterComposerFactory( 
            __RPC__in VARIANT *factory) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposerSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposerSite * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposerSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposerSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAnimationComposerSite * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAnimationComposerSite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAnimationComposerSite * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAnimationComposerSite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddFragment )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveFragment )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InsertFragment )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in BSTR attributeName,
            __RPC__in_opt IDispatch *fragment,
            VARIANT index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerateFragments )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in BSTR attributeName,
            __RPC__deref_in_opt IEnumVARIANT **fragments);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RegisterComposerFactory )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in VARIANT *factory);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UnregisterComposerFactory )( 
            __RPC__in IAnimationComposerSite * This,
            __RPC__in VARIANT *factory);
        
        END_INTERFACE
    } IAnimationComposerSiteVtbl;

    interface IAnimationComposerSite
    {
        CONST_VTBL struct IAnimationComposerSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposerSite_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposerSite_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposerSite_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposerSite_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAnimationComposerSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAnimationComposerSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAnimationComposerSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAnimationComposerSite_AddFragment(This,attributeName,fragment)	\
    ( (This)->lpVtbl -> AddFragment(This,attributeName,fragment) ) 

#define IAnimationComposerSite_RemoveFragment(This,attributeName,fragment)	\
    ( (This)->lpVtbl -> RemoveFragment(This,attributeName,fragment) ) 

#define IAnimationComposerSite_InsertFragment(This,attributeName,fragment,index)	\
    ( (This)->lpVtbl -> InsertFragment(This,attributeName,fragment,index) ) 

#define IAnimationComposerSite_EnumerateFragments(This,attributeName,fragments)	\
    ( (This)->lpVtbl -> EnumerateFragments(This,attributeName,fragments) ) 

#define IAnimationComposerSite_RegisterComposerFactory(This,factory)	\
    ( (This)->lpVtbl -> RegisterComposerFactory(This,factory) ) 

#define IAnimationComposerSite_UnregisterComposerFactory(This,factory)	\
    ( (This)->lpVtbl -> UnregisterComposerFactory(This,factory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposerSite_INTERFACE_DEFINED__ */


#ifndef __IAnimationComposerSiteSink_INTERFACE_DEFINED__
#define __IAnimationComposerSiteSink_INTERFACE_DEFINED__

/* interface IAnimationComposerSiteSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposerSiteSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8EF76C64-71CD-480f-96FC-BA2696E659BE")
    IAnimationComposerSiteSink : public IUnknown
    {
    public:
        virtual void STDMETHODCALLTYPE UpdateAnimations( void) = 0;
        
        virtual void STDMETHODCALLTYPE ComposerSiteDetach( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposerSiteSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposerSiteSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposerSiteSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposerSiteSink * This);
        
        void ( STDMETHODCALLTYPE *UpdateAnimations )( 
            __RPC__in IAnimationComposerSiteSink * This);
        
        void ( STDMETHODCALLTYPE *ComposerSiteDetach )( 
            __RPC__in IAnimationComposerSiteSink * This);
        
        END_INTERFACE
    } IAnimationComposerSiteSinkVtbl;

    interface IAnimationComposerSiteSink
    {
        CONST_VTBL struct IAnimationComposerSiteSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposerSiteSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposerSiteSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposerSiteSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposerSiteSink_UpdateAnimations(This)	\
    ( (This)->lpVtbl -> UpdateAnimations(This) ) 

#define IAnimationComposerSiteSink_ComposerSiteDetach(This)	\
    ( (This)->lpVtbl -> ComposerSiteDetach(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposerSiteSink_INTERFACE_DEFINED__ */


#ifndef __IAnimationRoot_INTERFACE_DEFINED__
#define __IAnimationRoot_INTERFACE_DEFINED__

/* interface IAnimationRoot */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAnimationRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("29DF6387-30B4-4a62-891B-A9C5BE37BE88")
    IAnimationRoot : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterComposerSite( 
            __RPC__in_opt IUnknown *composerSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterComposerSite( 
            __RPC__in_opt IUnknown *composerSite) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationRoot * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterComposerSite )( 
            __RPC__in IAnimationRoot * This,
            __RPC__in_opt IUnknown *composerSite);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterComposerSite )( 
            __RPC__in IAnimationRoot * This,
            __RPC__in_opt IUnknown *composerSite);
        
        END_INTERFACE
    } IAnimationRootVtbl;

    interface IAnimationRoot
    {
        CONST_VTBL struct IAnimationRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationRoot_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationRoot_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationRoot_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationRoot_RegisterComposerSite(This,composerSite)	\
    ( (This)->lpVtbl -> RegisterComposerSite(This,composerSite) ) 

#define IAnimationRoot_UnregisterComposerSite(This,composerSite)	\
    ( (This)->lpVtbl -> UnregisterComposerSite(This,composerSite) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationRoot_INTERFACE_DEFINED__ */


#ifndef __IAnimationFragment_INTERFACE_DEFINED__
#define __IAnimationFragment_INTERFACE_DEFINED__

/* interface IAnimationFragment */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IAnimationFragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("319DFD88-0AC6-4ab1-A19F-90223BA2DA16")
    IAnimationFragment : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_element( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **htmlElement) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [in] */ __RPC__in BSTR attributeName,
            /* [in] */ VARIANT origvalue,
            /* [in] */ VARIANT currentvalue,
            /* [retval][out] */ __RPC__out VARIANT *newvalue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DetachFromComposer( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationFragment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationFragment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAnimationFragment * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAnimationFragment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAnimationFragment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAnimationFragment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_element )( 
            __RPC__in IAnimationFragment * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **htmlElement);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            __RPC__in IAnimationFragment * This,
            /* [in] */ __RPC__in BSTR attributeName,
            /* [in] */ VARIANT origvalue,
            /* [in] */ VARIANT currentvalue,
            /* [retval][out] */ __RPC__out VARIANT *newvalue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DetachFromComposer )( 
            __RPC__in IAnimationFragment * This);
        
        END_INTERFACE
    } IAnimationFragmentVtbl;

    interface IAnimationFragment
    {
        CONST_VTBL struct IAnimationFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationFragment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAnimationFragment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAnimationFragment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAnimationFragment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAnimationFragment_get_element(This,htmlElement)	\
    ( (This)->lpVtbl -> get_element(This,htmlElement) ) 

#define IAnimationFragment_get_value(This,attributeName,origvalue,currentvalue,newvalue)	\
    ( (This)->lpVtbl -> get_value(This,attributeName,origvalue,currentvalue,newvalue) ) 

#define IAnimationFragment_DetachFromComposer(This)	\
    ( (This)->lpVtbl -> DetachFromComposer(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationFragment_INTERFACE_DEFINED__ */


#ifndef __IFilterAnimationInfo_INTERFACE_DEFINED__
#define __IFilterAnimationInfo_INTERFACE_DEFINED__

/* interface IFilterAnimationInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IFilterAnimationInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02E29300-C758-49b4-9E11-C58BFE90558B")
    IFilterAnimationInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetParameters( 
            __RPC__in VARIANT *params) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFilterAnimationInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IFilterAnimationInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IFilterAnimationInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IFilterAnimationInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetParameters )( 
            __RPC__in IFilterAnimationInfo * This,
            __RPC__in VARIANT *params);
        
        END_INTERFACE
    } IFilterAnimationInfoVtbl;

    interface IFilterAnimationInfo
    {
        CONST_VTBL struct IFilterAnimationInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFilterAnimationInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFilterAnimationInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFilterAnimationInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFilterAnimationInfo_GetParameters(This,params)	\
    ( (This)->lpVtbl -> GetParameters(This,params) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFilterAnimationInfo_INTERFACE_DEFINED__ */


#ifndef __ITIMEElementCollection_INTERFACE_DEFINED__
#define __ITIMEElementCollection_INTERFACE_DEFINED__

/* interface ITIMEElementCollection */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_ITIMEElementCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50abc224-6d53-4f83-9135-2440a41b7bc8")
    ITIMEElementCollection : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_length( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **ppIUnknown) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT varName,
            /* [in][optional] */ VARIANT varIndex,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppDisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT varName,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEElementCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEElementCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEElementCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEElementCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEElementCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_length )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            __RPC__in ITIMEElementCollection * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            __RPC__in ITIMEElementCollection * This,
            /* [out][retval] */ __RPC__deref_out_opt IUnknown **ppIUnknown);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in][optional] */ VARIANT varName,
            /* [in][optional] */ VARIANT varIndex,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppDisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *tags )( 
            __RPC__in ITIMEElementCollection * This,
            /* [in] */ VARIANT varName,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppDisp);
        
        END_INTERFACE
    } ITIMEElementCollectionVtbl;

    interface ITIMEElementCollection
    {
        CONST_VTBL struct ITIMEElementCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEElementCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEElementCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEElementCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEElementCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEElementCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEElementCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEElementCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEElementCollection_put_length(This,v)	\
    ( (This)->lpVtbl -> put_length(This,v) ) 

#define ITIMEElementCollection_get_length(This,p)	\
    ( (This)->lpVtbl -> get_length(This,p) ) 

#define ITIMEElementCollection_get__newEnum(This,ppIUnknown)	\
    ( (This)->lpVtbl -> get__newEnum(This,ppIUnknown) ) 

#define ITIMEElementCollection_item(This,varName,varIndex,ppDisp)	\
    ( (This)->lpVtbl -> item(This,varName,varIndex,ppDisp) ) 

#define ITIMEElementCollection_tags(This,varName,ppDisp)	\
    ( (This)->lpVtbl -> tags(This,varName,ppDisp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEElementCollection_INTERFACE_DEFINED__ */


#ifndef __ITIMEState_INTERFACE_DEFINED__
#define __ITIMEState_INTERFACE_DEFINED__

/* interface ITIMEState */
/* [uuid][unique][dual][oleautomation][object] */ 


EXTERN_C const IID IID_ITIMEState;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD5EC62A-9D77-4573-80A8-758594E69CEA")
    ITIMEState : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_activeDur( 
            /* [out][retval] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_activeTime( 
            /* [out][retval] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isActive( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *active) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isOn( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *on) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isPaused( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *paused) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isMuted( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *muted) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parentTimeBegin( 
            /* [out][retval] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parentTimeEnd( 
            /* [out][retval] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_progress( 
            /* [out][retval] */ __RPC__out double *progress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_repeatCount( 
            /* [out][retval] */ __RPC__out LONG *count) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_segmentDur( 
            /* [out][retval] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_segmentTime( 
            /* [out][retval] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_simpleDur( 
            /* [out][retval] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_simpleTime( 
            /* [out][retval] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_speed( 
            /* [out][retval] */ __RPC__out float *speed) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_state( 
            /* [out][retval] */ __RPC__out TimeState *timeState) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_stateString( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *state) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_volume( 
            /* [out][retval] */ __RPC__out float *vol) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEStateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEState * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEState * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEState * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEState * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEState * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEState * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEState * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeDur )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_activeTime )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isActive )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *active);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isOn )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *on);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isPaused )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *paused);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isMuted )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *muted);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentTimeBegin )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentTimeEnd )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_progress )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *progress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_repeatCount )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out LONG *count);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_segmentDur )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_segmentTime )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_simpleDur )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_simpleTime )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_speed )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out float *speed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_state )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out TimeState *timeState);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_stateString )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *state);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            __RPC__in ITIMEState * This,
            /* [out][retval] */ __RPC__out float *vol);
        
        END_INTERFACE
    } ITIMEStateVtbl;

    interface ITIMEState
    {
        CONST_VTBL struct ITIMEStateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEState_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEState_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEState_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEState_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEState_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEState_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEState_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEState_get_activeDur(This,dur)	\
    ( (This)->lpVtbl -> get_activeDur(This,dur) ) 

#define ITIMEState_get_activeTime(This,time)	\
    ( (This)->lpVtbl -> get_activeTime(This,time) ) 

#define ITIMEState_get_isActive(This,active)	\
    ( (This)->lpVtbl -> get_isActive(This,active) ) 

#define ITIMEState_get_isOn(This,on)	\
    ( (This)->lpVtbl -> get_isOn(This,on) ) 

#define ITIMEState_get_isPaused(This,paused)	\
    ( (This)->lpVtbl -> get_isPaused(This,paused) ) 

#define ITIMEState_get_isMuted(This,muted)	\
    ( (This)->lpVtbl -> get_isMuted(This,muted) ) 

#define ITIMEState_get_parentTimeBegin(This,time)	\
    ( (This)->lpVtbl -> get_parentTimeBegin(This,time) ) 

#define ITIMEState_get_parentTimeEnd(This,time)	\
    ( (This)->lpVtbl -> get_parentTimeEnd(This,time) ) 

#define ITIMEState_get_progress(This,progress)	\
    ( (This)->lpVtbl -> get_progress(This,progress) ) 

#define ITIMEState_get_repeatCount(This,count)	\
    ( (This)->lpVtbl -> get_repeatCount(This,count) ) 

#define ITIMEState_get_segmentDur(This,dur)	\
    ( (This)->lpVtbl -> get_segmentDur(This,dur) ) 

#define ITIMEState_get_segmentTime(This,time)	\
    ( (This)->lpVtbl -> get_segmentTime(This,time) ) 

#define ITIMEState_get_simpleDur(This,dur)	\
    ( (This)->lpVtbl -> get_simpleDur(This,dur) ) 

#define ITIMEState_get_simpleTime(This,time)	\
    ( (This)->lpVtbl -> get_simpleTime(This,time) ) 

#define ITIMEState_get_speed(This,speed)	\
    ( (This)->lpVtbl -> get_speed(This,speed) ) 

#define ITIMEState_get_state(This,timeState)	\
    ( (This)->lpVtbl -> get_state(This,timeState) ) 

#define ITIMEState_get_stateString(This,state)	\
    ( (This)->lpVtbl -> get_stateString(This,state) ) 

#define ITIMEState_get_volume(This,vol)	\
    ( (This)->lpVtbl -> get_volume(This,vol) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEState_INTERFACE_DEFINED__ */


#ifndef __ITIMEPlayItem_INTERFACE_DEFINED__
#define __ITIMEPlayItem_INTERFACE_DEFINED__

/* interface ITIMEPlayItem */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEPlayItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2A6096D9-2CE0-47DC-A813-9099A2466309")
    ITIMEPlayItem : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_abstract( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_author( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_copyright( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dur( 
            /* [retval][out] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_index( 
            /* [retval][out] */ __RPC__out long *index) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rating( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *src) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *title) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setActive( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEPlayItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEPlayItem * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEPlayItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEPlayItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEPlayItem * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEPlayItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEPlayItem * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEPlayItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_abstract )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_author )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copyright )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_index )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__out long *index);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rating )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *src);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in ITIMEPlayItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *title);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setActive )( 
            __RPC__in ITIMEPlayItem * This);
        
        END_INTERFACE
    } ITIMEPlayItemVtbl;

    interface ITIMEPlayItem
    {
        CONST_VTBL struct ITIMEPlayItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEPlayItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEPlayItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEPlayItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEPlayItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEPlayItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEPlayItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEPlayItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEPlayItem_get_abstract(This,abs)	\
    ( (This)->lpVtbl -> get_abstract(This,abs) ) 

#define ITIMEPlayItem_get_author(This,auth)	\
    ( (This)->lpVtbl -> get_author(This,auth) ) 

#define ITIMEPlayItem_get_copyright(This,cpyrght)	\
    ( (This)->lpVtbl -> get_copyright(This,cpyrght) ) 

#define ITIMEPlayItem_get_dur(This,dur)	\
    ( (This)->lpVtbl -> get_dur(This,dur) ) 

#define ITIMEPlayItem_get_index(This,index)	\
    ( (This)->lpVtbl -> get_index(This,index) ) 

#define ITIMEPlayItem_get_rating(This,rate)	\
    ( (This)->lpVtbl -> get_rating(This,rate) ) 

#define ITIMEPlayItem_get_src(This,src)	\
    ( (This)->lpVtbl -> get_src(This,src) ) 

#define ITIMEPlayItem_get_title(This,title)	\
    ( (This)->lpVtbl -> get_title(This,title) ) 

#define ITIMEPlayItem_setActive(This)	\
    ( (This)->lpVtbl -> setActive(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEPlayItem_INTERFACE_DEFINED__ */


#ifndef __ITIMEPlayItem2_INTERFACE_DEFINED__
#define __ITIMEPlayItem2_INTERFACE_DEFINED__

/* interface ITIMEPlayItem2 */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEPlayItem2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4262CD38-6BDC-40A4-BC50-4CC50366E702")
    ITIMEPlayItem2 : public ITIMEPlayItem
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_banner( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *banner) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bannerAbstract( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abstract) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bannerMoreInfo( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *moreInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEPlayItem2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEPlayItem2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEPlayItem2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEPlayItem2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_abstract )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_author )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copyright )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_index )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__out long *index);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rating )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_src )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *src);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *title);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setActive )( 
            __RPC__in ITIMEPlayItem2 * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_banner )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *banner);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bannerAbstract )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abstract);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bannerMoreInfo )( 
            __RPC__in ITIMEPlayItem2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *moreInfo);
        
        END_INTERFACE
    } ITIMEPlayItem2Vtbl;

    interface ITIMEPlayItem2
    {
        CONST_VTBL struct ITIMEPlayItem2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEPlayItem2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEPlayItem2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEPlayItem2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEPlayItem2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEPlayItem2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEPlayItem2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEPlayItem2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEPlayItem2_get_abstract(This,abs)	\
    ( (This)->lpVtbl -> get_abstract(This,abs) ) 

#define ITIMEPlayItem2_get_author(This,auth)	\
    ( (This)->lpVtbl -> get_author(This,auth) ) 

#define ITIMEPlayItem2_get_copyright(This,cpyrght)	\
    ( (This)->lpVtbl -> get_copyright(This,cpyrght) ) 

#define ITIMEPlayItem2_get_dur(This,dur)	\
    ( (This)->lpVtbl -> get_dur(This,dur) ) 

#define ITIMEPlayItem2_get_index(This,index)	\
    ( (This)->lpVtbl -> get_index(This,index) ) 

#define ITIMEPlayItem2_get_rating(This,rate)	\
    ( (This)->lpVtbl -> get_rating(This,rate) ) 

#define ITIMEPlayItem2_get_src(This,src)	\
    ( (This)->lpVtbl -> get_src(This,src) ) 

#define ITIMEPlayItem2_get_title(This,title)	\
    ( (This)->lpVtbl -> get_title(This,title) ) 

#define ITIMEPlayItem2_setActive(This)	\
    ( (This)->lpVtbl -> setActive(This) ) 


#define ITIMEPlayItem2_get_banner(This,banner)	\
    ( (This)->lpVtbl -> get_banner(This,banner) ) 

#define ITIMEPlayItem2_get_bannerAbstract(This,abstract)	\
    ( (This)->lpVtbl -> get_bannerAbstract(This,abstract) ) 

#define ITIMEPlayItem2_get_bannerMoreInfo(This,moreInfo)	\
    ( (This)->lpVtbl -> get_bannerMoreInfo(This,moreInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEPlayItem2_INTERFACE_DEFINED__ */


#ifndef __ITIMEPlayList_INTERFACE_DEFINED__
#define __ITIMEPlayList_INTERFACE_DEFINED__

/* interface ITIMEPlayList */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEPlayList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E9B75B62-DD97-4B19-8FD9-9646292952E0")
    ITIMEPlayList : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_activeTrack( 
            /* [in] */ VARIANT vTrack) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_activeTrack( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayItem **pPlayItem) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_dur( 
            __RPC__in double *dur) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][defaultvalue] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayItem **pPlayItem) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *p) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE nextTrack( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE prevTrack( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEPlayListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEPlayList * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEPlayList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEPlayList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEPlayList * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEPlayList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEPlayList * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEPlayList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_activeTrack )( 
            __RPC__in ITIMEPlayList * This,
            /* [in] */ VARIANT vTrack);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_activeTrack )( 
            __RPC__in ITIMEPlayList * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayItem **pPlayItem);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_dur )( 
            __RPC__in ITIMEPlayList * This,
            __RPC__in double *dur);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            __RPC__in ITIMEPlayList * This,
            /* [in][defaultvalue] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayItem **pPlayItem);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            __RPC__in ITIMEPlayList * This,
            /* [retval][out] */ __RPC__out long *p);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            __RPC__in ITIMEPlayList * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *nextTrack )( 
            __RPC__in ITIMEPlayList * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *prevTrack )( 
            __RPC__in ITIMEPlayList * This);
        
        END_INTERFACE
    } ITIMEPlayListVtbl;

    interface ITIMEPlayList
    {
        CONST_VTBL struct ITIMEPlayListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEPlayList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEPlayList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEPlayList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEPlayList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEPlayList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEPlayList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEPlayList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEPlayList_put_activeTrack(This,vTrack)	\
    ( (This)->lpVtbl -> put_activeTrack(This,vTrack) ) 

#define ITIMEPlayList_get_activeTrack(This,pPlayItem)	\
    ( (This)->lpVtbl -> get_activeTrack(This,pPlayItem) ) 

#define ITIMEPlayList_get_dur(This,dur)	\
    ( (This)->lpVtbl -> get_dur(This,dur) ) 

#define ITIMEPlayList_item(This,varIndex,pPlayItem)	\
    ( (This)->lpVtbl -> item(This,varIndex,pPlayItem) ) 

#define ITIMEPlayList_get_length(This,p)	\
    ( (This)->lpVtbl -> get_length(This,p) ) 

#define ITIMEPlayList_get__newEnum(This,p)	\
    ( (This)->lpVtbl -> get__newEnum(This,p) ) 

#define ITIMEPlayList_nextTrack(This)	\
    ( (This)->lpVtbl -> nextTrack(This) ) 

#define ITIMEPlayList_prevTrack(This)	\
    ( (This)->lpVtbl -> prevTrack(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEPlayList_INTERFACE_DEFINED__ */


#ifndef __ITIMEDVDPlayerObject_INTERFACE_DEFINED__
#define __ITIMEDVDPlayerObject_INTERFACE_DEFINED__

/* interface ITIMEDVDPlayerObject */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEDVDPlayerObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3AF7AB68-4F29-462C-AA6E-5872448899E3")
    ITIMEDVDPlayerObject : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE upperButtonSelect( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE lowerButtonSelect( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE leftButtonSelect( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE rightButtonSelect( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE buttonActivate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE gotoMenu( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEDVDPlayerObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEDVDPlayerObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEDVDPlayerObject * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEDVDPlayerObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEDVDPlayerObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEDVDPlayerObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *upperButtonSelect )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *lowerButtonSelect )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *leftButtonSelect )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *rightButtonSelect )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *buttonActivate )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *gotoMenu )( 
            __RPC__in ITIMEDVDPlayerObject * This);
        
        END_INTERFACE
    } ITIMEDVDPlayerObjectVtbl;

    interface ITIMEDVDPlayerObject
    {
        CONST_VTBL struct ITIMEDVDPlayerObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEDVDPlayerObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEDVDPlayerObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEDVDPlayerObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEDVDPlayerObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEDVDPlayerObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEDVDPlayerObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEDVDPlayerObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEDVDPlayerObject_upperButtonSelect(This)	\
    ( (This)->lpVtbl -> upperButtonSelect(This) ) 

#define ITIMEDVDPlayerObject_lowerButtonSelect(This)	\
    ( (This)->lpVtbl -> lowerButtonSelect(This) ) 

#define ITIMEDVDPlayerObject_leftButtonSelect(This)	\
    ( (This)->lpVtbl -> leftButtonSelect(This) ) 

#define ITIMEDVDPlayerObject_rightButtonSelect(This)	\
    ( (This)->lpVtbl -> rightButtonSelect(This) ) 

#define ITIMEDVDPlayerObject_buttonActivate(This)	\
    ( (This)->lpVtbl -> buttonActivate(This) ) 

#define ITIMEDVDPlayerObject_gotoMenu(This)	\
    ( (This)->lpVtbl -> gotoMenu(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEDVDPlayerObject_INTERFACE_DEFINED__ */


#ifndef __ITIMEDMusicPlayerObject_INTERFACE_DEFINED__
#define __ITIMEDMusicPlayerObject_INTERFACE_DEFINED__

/* interface ITIMEDMusicPlayerObject */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_ITIMEDMusicPlayerObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("407954F5-2BAB-4CFA-954D-249F9FCE43A1")
    ITIMEDMusicPlayerObject : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isDirectMusicInstalled( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *hasDM) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEDMusicPlayerObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEDMusicPlayerObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEDMusicPlayerObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEDMusicPlayerObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITIMEDMusicPlayerObject * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITIMEDMusicPlayerObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITIMEDMusicPlayerObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITIMEDMusicPlayerObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isDirectMusicInstalled )( 
            __RPC__in ITIMEDMusicPlayerObject * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *hasDM);
        
        END_INTERFACE
    } ITIMEDMusicPlayerObjectVtbl;

    interface ITIMEDMusicPlayerObject
    {
        CONST_VTBL struct ITIMEDMusicPlayerObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEDMusicPlayerObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEDMusicPlayerObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEDMusicPlayerObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEDMusicPlayerObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITIMEDMusicPlayerObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITIMEDMusicPlayerObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITIMEDMusicPlayerObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITIMEDMusicPlayerObject_get_isDirectMusicInstalled(This,hasDM)	\
    ( (This)->lpVtbl -> get_isDirectMusicInstalled(This,hasDM) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEDMusicPlayerObject_INTERFACE_DEFINED__ */


#ifndef __ITIMEFactory_INTERFACE_DEFINED__
#define __ITIMEFactory_INTERFACE_DEFINED__

/* interface ITIMEFactory */
/* [unique][hidden][uuid][object] */ 


EXTERN_C const IID IID_ITIMEFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cd51e446-3006-434f-90e2-e37e8fb8ca8f")
    ITIMEFactory : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ITIMEFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEFactory * This);
        
        END_INTERFACE
    } ITIMEFactoryVtbl;

    interface ITIMEFactory
    {
        CONST_VTBL struct ITIMEFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEFactory_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TIMEFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("17237A20-3ADB-48ec-B182-35291F115790")
TIMEFactory;
#endif

#ifndef __IAnimationComposerFactory_INTERFACE_DEFINED__
#define __IAnimationComposerFactory_INTERFACE_DEFINED__

/* interface IAnimationComposerFactory */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposerFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEEB3233-F71F-4683-8B05-9A5314C97DBC")
    IAnimationComposerFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FindComposer( 
            /* [in] */ __RPC__in_opt IDispatch *targetElement,
            /* [in] */ __RPC__in BSTR attributeName,
            /* [retval][out] */ __RPC__deref_out_opt IAnimationComposer **animationComposer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposerFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposerFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposerFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposerFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *FindComposer )( 
            __RPC__in IAnimationComposerFactory * This,
            /* [in] */ __RPC__in_opt IDispatch *targetElement,
            /* [in] */ __RPC__in BSTR attributeName,
            /* [retval][out] */ __RPC__deref_out_opt IAnimationComposer **animationComposer);
        
        END_INTERFACE
    } IAnimationComposerFactoryVtbl;

    interface IAnimationComposerFactory
    {
        CONST_VTBL struct IAnimationComposerFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposerFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposerFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposerFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposerFactory_FindComposer(This,targetElement,attributeName,animationComposer)	\
    ( (This)->lpVtbl -> FindComposer(This,targetElement,attributeName,animationComposer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposerFactory_INTERFACE_DEFINED__ */


#ifndef __IAnimationComposerSiteFactory_INTERFACE_DEFINED__
#define __IAnimationComposerSiteFactory_INTERFACE_DEFINED__

/* interface IAnimationComposerSiteFactory */
/* [unique][hidden][dual][uuid][object] */ 


EXTERN_C const IID IID_IAnimationComposerSiteFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B4EA5681-ED72-4efe-BBD7-7C47D1325696")
    IAnimationComposerSiteFactory : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IAnimationComposerSiteFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnimationComposerSiteFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnimationComposerSiteFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnimationComposerSiteFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAnimationComposerSiteFactory * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAnimationComposerSiteFactory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAnimationComposerSiteFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAnimationComposerSiteFactory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IAnimationComposerSiteFactoryVtbl;

    interface IAnimationComposerSiteFactory
    {
        CONST_VTBL struct IAnimationComposerSiteFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnimationComposerSiteFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnimationComposerSiteFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnimationComposerSiteFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnimationComposerSiteFactory_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAnimationComposerSiteFactory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAnimationComposerSiteFactory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAnimationComposerSiteFactory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnimationComposerSiteFactory_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaPlayerSite_INTERFACE_DEFINED__
#define __ITIMEMediaPlayerSite_INTERFACE_DEFINED__

/* interface ITIMEMediaPlayerSite */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaPlayerSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bf0571ed-344f-4f58-82c7-7431ed0fd834")
    ITIMEMediaPlayerSite : public IUnknown
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeElement( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **pElm) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeState( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **pState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reportError( 
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in BSTR errorString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaPlayerSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaPlayerSite * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaPlayerSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaPlayerSite * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeElement )( 
            __RPC__in ITIMEMediaPlayerSite * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEElement **pElm);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeState )( 
            __RPC__in ITIMEMediaPlayerSite * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEState **pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *reportError )( 
            __RPC__in ITIMEMediaPlayerSite * This,
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in BSTR errorString);
        
        END_INTERFACE
    } ITIMEMediaPlayerSiteVtbl;

    interface ITIMEMediaPlayerSite
    {
        CONST_VTBL struct ITIMEMediaPlayerSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaPlayerSite_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaPlayerSite_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaPlayerSite_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaPlayerSite_get_timeElement(This,pElm)	\
    ( (This)->lpVtbl -> get_timeElement(This,pElm) ) 

#define ITIMEMediaPlayerSite_get_timeState(This,pState)	\
    ( (This)->lpVtbl -> get_timeState(This,pState) ) 

#define ITIMEMediaPlayerSite_reportError(This,hr,errorString)	\
    ( (This)->lpVtbl -> reportError(This,hr,errorString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaPlayerSite_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaPlayer_INTERFACE_DEFINED__
#define __ITIMEMediaPlayer_INTERFACE_DEFINED__

/* interface ITIMEMediaPlayer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaPlayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea4a95be-acc9-4bf0-85a4-1bf3c51e431c")
    ITIMEMediaPlayer : public IUnknown
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Init( 
            __RPC__in_opt ITIMEMediaPlayerSite *mpsite) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE begin( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE end( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE resume( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE pause( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE repeat( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE seek( 
            /* [in] */ double time) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ __RPC__in BSTR url) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clipBegin( 
            /* [in] */ VARIANT b) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_clipEnd( 
            /* [in] */ VARIANT e) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_abstract( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_author( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canPause( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_canSeek( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_clipDur( 
            /* [retval][out] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_copyright( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_currTime( 
            /* [retval][out] */ __RPC__out double *time) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_customObject( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **disp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasAudio( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasVisual( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaDur( 
            /* [retval][out] */ __RPC__out double *dur) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaHeight( 
            /* [retval][out] */ __RPC__out long *height) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_mediaWidth( 
            /* [retval][out] */ __RPC__out long *width) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_playList( 
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayList **pPlayList) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rating( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_state( 
            /* [retval][out] */ __RPC__out TimeState *ts) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaPlayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            __RPC__in ITIMEMediaPlayer * This,
            __RPC__in_opt ITIMEMediaPlayerSite *mpsite);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *begin )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *end )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *resume )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *pause )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *repeat )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            __RPC__in ITIMEMediaPlayer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *seek )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [in] */ double time);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_src )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [in] */ __RPC__in BSTR url);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipBegin )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [in] */ VARIANT b);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_clipEnd )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [in] */ VARIANT e);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_abstract )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *abs);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_author )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *auth);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canPause )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_canSeek )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_clipDur )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copyright )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *cpyrght);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currTime )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out double *time);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_customObject )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **disp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasAudio )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasVisual )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaDur )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out double *dur);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaHeight )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out long *height);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaWidth )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out long *width);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_playList )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt ITIMEPlayList **pPlayList);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_rating )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_state )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__out TimeState *ts);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in ITIMEMediaPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name);
        
        END_INTERFACE
    } ITIMEMediaPlayerVtbl;

    interface ITIMEMediaPlayer
    {
        CONST_VTBL struct ITIMEMediaPlayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaPlayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaPlayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaPlayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaPlayer_Init(This,mpsite)	\
    ( (This)->lpVtbl -> Init(This,mpsite) ) 

#define ITIMEMediaPlayer_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#define ITIMEMediaPlayer_begin(This)	\
    ( (This)->lpVtbl -> begin(This) ) 

#define ITIMEMediaPlayer_end(This)	\
    ( (This)->lpVtbl -> end(This) ) 

#define ITIMEMediaPlayer_resume(This)	\
    ( (This)->lpVtbl -> resume(This) ) 

#define ITIMEMediaPlayer_pause(This)	\
    ( (This)->lpVtbl -> pause(This) ) 

#define ITIMEMediaPlayer_repeat(This)	\
    ( (This)->lpVtbl -> repeat(This) ) 

#define ITIMEMediaPlayer_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#define ITIMEMediaPlayer_seek(This,time)	\
    ( (This)->lpVtbl -> seek(This,time) ) 

#define ITIMEMediaPlayer_put_src(This,url)	\
    ( (This)->lpVtbl -> put_src(This,url) ) 

#define ITIMEMediaPlayer_put_clipBegin(This,b)	\
    ( (This)->lpVtbl -> put_clipBegin(This,b) ) 

#define ITIMEMediaPlayer_put_clipEnd(This,e)	\
    ( (This)->lpVtbl -> put_clipEnd(This,e) ) 

#define ITIMEMediaPlayer_get_abstract(This,abs)	\
    ( (This)->lpVtbl -> get_abstract(This,abs) ) 

#define ITIMEMediaPlayer_get_author(This,auth)	\
    ( (This)->lpVtbl -> get_author(This,auth) ) 

#define ITIMEMediaPlayer_get_canPause(This,b)	\
    ( (This)->lpVtbl -> get_canPause(This,b) ) 

#define ITIMEMediaPlayer_get_canSeek(This,b)	\
    ( (This)->lpVtbl -> get_canSeek(This,b) ) 

#define ITIMEMediaPlayer_get_clipDur(This,dur)	\
    ( (This)->lpVtbl -> get_clipDur(This,dur) ) 

#define ITIMEMediaPlayer_get_copyright(This,cpyrght)	\
    ( (This)->lpVtbl -> get_copyright(This,cpyrght) ) 

#define ITIMEMediaPlayer_get_currTime(This,time)	\
    ( (This)->lpVtbl -> get_currTime(This,time) ) 

#define ITIMEMediaPlayer_get_customObject(This,disp)	\
    ( (This)->lpVtbl -> get_customObject(This,disp) ) 

#define ITIMEMediaPlayer_get_hasAudio(This,b)	\
    ( (This)->lpVtbl -> get_hasAudio(This,b) ) 

#define ITIMEMediaPlayer_get_hasVisual(This,b)	\
    ( (This)->lpVtbl -> get_hasVisual(This,b) ) 

#define ITIMEMediaPlayer_get_mediaDur(This,dur)	\
    ( (This)->lpVtbl -> get_mediaDur(This,dur) ) 

#define ITIMEMediaPlayer_get_mediaHeight(This,height)	\
    ( (This)->lpVtbl -> get_mediaHeight(This,height) ) 

#define ITIMEMediaPlayer_get_mediaWidth(This,width)	\
    ( (This)->lpVtbl -> get_mediaWidth(This,width) ) 

#define ITIMEMediaPlayer_get_playList(This,pPlayList)	\
    ( (This)->lpVtbl -> get_playList(This,pPlayList) ) 

#define ITIMEMediaPlayer_get_rating(This,rate)	\
    ( (This)->lpVtbl -> get_rating(This,rate) ) 

#define ITIMEMediaPlayer_get_state(This,ts)	\
    ( (This)->lpVtbl -> get_state(This,ts) ) 

#define ITIMEMediaPlayer_get_title(This,name)	\
    ( (This)->lpVtbl -> get_title(This,name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaPlayer_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaPlayerAudio_INTERFACE_DEFINED__
#define __ITIMEMediaPlayerAudio_INTERFACE_DEFINED__

/* interface ITIMEMediaPlayerAudio */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaPlayerAudio;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffaacfda-b374-4f22-ac9a-c5bb9437cb56")
    ITIMEMediaPlayerAudio : public IUnknown
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_volume( 
            /* [in] */ float f) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_mute( 
            /* [in] */ VARIANT_BOOL m) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaPlayerAudioVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaPlayerAudio * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaPlayerAudio * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaPlayerAudio * This);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            __RPC__in ITIMEMediaPlayerAudio * This,
            /* [in] */ float f);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            __RPC__in ITIMEMediaPlayerAudio * This,
            /* [in] */ VARIANT_BOOL m);
        
        END_INTERFACE
    } ITIMEMediaPlayerAudioVtbl;

    interface ITIMEMediaPlayerAudio
    {
        CONST_VTBL struct ITIMEMediaPlayerAudioVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaPlayerAudio_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaPlayerAudio_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaPlayerAudio_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaPlayerAudio_put_volume(This,f)	\
    ( (This)->lpVtbl -> put_volume(This,f) ) 

#define ITIMEMediaPlayerAudio_put_mute(This,m)	\
    ( (This)->lpVtbl -> put_mute(This,m) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaPlayerAudio_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaPlayerNetwork_INTERFACE_DEFINED__
#define __ITIMEMediaPlayerNetwork_INTERFACE_DEFINED__

/* interface ITIMEMediaPlayerNetwork */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaPlayerNetwork;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b9987fca-7fbb-4015-bd3d-7418605514da")
    ITIMEMediaPlayerNetwork : public IUnknown
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hasDownloadProgress( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_downloadProgress( 
            /* [retval][out] */ __RPC__out long *l) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_isBuffered( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bufferingProgress( 
            /* [retval][out] */ __RPC__out long *l) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaPlayerNetworkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaPlayerNetwork * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaPlayerNetwork * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaPlayerNetwork * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hasDownloadProgress )( 
            __RPC__in ITIMEMediaPlayerNetwork * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_downloadProgress )( 
            __RPC__in ITIMEMediaPlayerNetwork * This,
            /* [retval][out] */ __RPC__out long *l);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_isBuffered )( 
            __RPC__in ITIMEMediaPlayerNetwork * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *b);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bufferingProgress )( 
            __RPC__in ITIMEMediaPlayerNetwork * This,
            /* [retval][out] */ __RPC__out long *l);
        
        END_INTERFACE
    } ITIMEMediaPlayerNetworkVtbl;

    interface ITIMEMediaPlayerNetwork
    {
        CONST_VTBL struct ITIMEMediaPlayerNetworkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaPlayerNetwork_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaPlayerNetwork_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaPlayerNetwork_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaPlayerNetwork_get_hasDownloadProgress(This,b)	\
    ( (This)->lpVtbl -> get_hasDownloadProgress(This,b) ) 

#define ITIMEMediaPlayerNetwork_get_downloadProgress(This,l)	\
    ( (This)->lpVtbl -> get_downloadProgress(This,l) ) 

#define ITIMEMediaPlayerNetwork_get_isBuffered(This,b)	\
    ( (This)->lpVtbl -> get_isBuffered(This,b) ) 

#define ITIMEMediaPlayerNetwork_get_bufferingProgress(This,l)	\
    ( (This)->lpVtbl -> get_bufferingProgress(This,l) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaPlayerNetwork_INTERFACE_DEFINED__ */


#ifndef __ITIMEMediaPlayerControl_INTERFACE_DEFINED__
#define __ITIMEMediaPlayerControl_INTERFACE_DEFINED__

/* interface ITIMEMediaPlayerControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITIMEMediaPlayerControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("897a99e7-f386-45c8-b51b-3a25bbcbba69")
    ITIMEMediaPlayerControl : public IUnknown
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getControl( 
            __RPC__deref_in_opt IUnknown **control) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITIMEMediaPlayerControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITIMEMediaPlayerControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITIMEMediaPlayerControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITIMEMediaPlayerControl * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getControl )( 
            __RPC__in ITIMEMediaPlayerControl * This,
            __RPC__deref_in_opt IUnknown **control);
        
        END_INTERFACE
    } ITIMEMediaPlayerControlVtbl;

    interface ITIMEMediaPlayerControl
    {
        CONST_VTBL struct ITIMEMediaPlayerControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITIMEMediaPlayerControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITIMEMediaPlayerControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITIMEMediaPlayerControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITIMEMediaPlayerControl_getControl(This,control)	\
    ( (This)->lpVtbl -> getControl(This,control) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITIMEMediaPlayerControl_INTERFACE_DEFINED__ */

#endif /* __MSTIME_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mswmdm.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for mswmdm.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __mswmdm_h__
#define __mswmdm_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMDMMetaData_FWD_DEFINED__
#define __IWMDMMetaData_FWD_DEFINED__
typedef interface IWMDMMetaData IWMDMMetaData;
#endif 	/* __IWMDMMetaData_FWD_DEFINED__ */


#ifndef __IWMDeviceManager_FWD_DEFINED__
#define __IWMDeviceManager_FWD_DEFINED__
typedef interface IWMDeviceManager IWMDeviceManager;
#endif 	/* __IWMDeviceManager_FWD_DEFINED__ */


#ifndef __IWMDeviceManager2_FWD_DEFINED__
#define __IWMDeviceManager2_FWD_DEFINED__
typedef interface IWMDeviceManager2 IWMDeviceManager2;
#endif 	/* __IWMDeviceManager2_FWD_DEFINED__ */


#ifndef __IWMDeviceManager3_FWD_DEFINED__
#define __IWMDeviceManager3_FWD_DEFINED__
typedef interface IWMDeviceManager3 IWMDeviceManager3;
#endif 	/* __IWMDeviceManager3_FWD_DEFINED__ */


#ifndef __IWMDMStorageGlobals_FWD_DEFINED__
#define __IWMDMStorageGlobals_FWD_DEFINED__
typedef interface IWMDMStorageGlobals IWMDMStorageGlobals;
#endif 	/* __IWMDMStorageGlobals_FWD_DEFINED__ */


#ifndef __IWMDMStorage_FWD_DEFINED__
#define __IWMDMStorage_FWD_DEFINED__
typedef interface IWMDMStorage IWMDMStorage;
#endif 	/* __IWMDMStorage_FWD_DEFINED__ */


#ifndef __IWMDMStorage2_FWD_DEFINED__
#define __IWMDMStorage2_FWD_DEFINED__
typedef interface IWMDMStorage2 IWMDMStorage2;
#endif 	/* __IWMDMStorage2_FWD_DEFINED__ */


#ifndef __IWMDMStorage3_FWD_DEFINED__
#define __IWMDMStorage3_FWD_DEFINED__
typedef interface IWMDMStorage3 IWMDMStorage3;
#endif 	/* __IWMDMStorage3_FWD_DEFINED__ */


#ifndef __IWMDMStorage4_FWD_DEFINED__
#define __IWMDMStorage4_FWD_DEFINED__
typedef interface IWMDMStorage4 IWMDMStorage4;
#endif 	/* __IWMDMStorage4_FWD_DEFINED__ */


#ifndef __IWMDMOperation_FWD_DEFINED__
#define __IWMDMOperation_FWD_DEFINED__
typedef interface IWMDMOperation IWMDMOperation;
#endif 	/* __IWMDMOperation_FWD_DEFINED__ */


#ifndef __IWMDMOperation2_FWD_DEFINED__
#define __IWMDMOperation2_FWD_DEFINED__
typedef interface IWMDMOperation2 IWMDMOperation2;
#endif 	/* __IWMDMOperation2_FWD_DEFINED__ */


#ifndef __IWMDMOperation3_FWD_DEFINED__
#define __IWMDMOperation3_FWD_DEFINED__
typedef interface IWMDMOperation3 IWMDMOperation3;
#endif 	/* __IWMDMOperation3_FWD_DEFINED__ */


#ifndef __IWMDMProgress_FWD_DEFINED__
#define __IWMDMProgress_FWD_DEFINED__
typedef interface IWMDMProgress IWMDMProgress;
#endif 	/* __IWMDMProgress_FWD_DEFINED__ */


#ifndef __IWMDMProgress2_FWD_DEFINED__
#define __IWMDMProgress2_FWD_DEFINED__
typedef interface IWMDMProgress2 IWMDMProgress2;
#endif 	/* __IWMDMProgress2_FWD_DEFINED__ */


#ifndef __IWMDMProgress3_FWD_DEFINED__
#define __IWMDMProgress3_FWD_DEFINED__
typedef interface IWMDMProgress3 IWMDMProgress3;
#endif 	/* __IWMDMProgress3_FWD_DEFINED__ */


#ifndef __IWMDMDevice_FWD_DEFINED__
#define __IWMDMDevice_FWD_DEFINED__
typedef interface IWMDMDevice IWMDMDevice;
#endif 	/* __IWMDMDevice_FWD_DEFINED__ */


#ifndef __IWMDMDevice2_FWD_DEFINED__
#define __IWMDMDevice2_FWD_DEFINED__
typedef interface IWMDMDevice2 IWMDMDevice2;
#endif 	/* __IWMDMDevice2_FWD_DEFINED__ */


#ifndef __IWMDMDevice3_FWD_DEFINED__
#define __IWMDMDevice3_FWD_DEFINED__
typedef interface IWMDMDevice3 IWMDMDevice3;
#endif 	/* __IWMDMDevice3_FWD_DEFINED__ */


#ifndef __IWMDMDeviceSession_FWD_DEFINED__
#define __IWMDMDeviceSession_FWD_DEFINED__
typedef interface IWMDMDeviceSession IWMDMDeviceSession;
#endif 	/* __IWMDMDeviceSession_FWD_DEFINED__ */


#ifndef __IWMDMEnumDevice_FWD_DEFINED__
#define __IWMDMEnumDevice_FWD_DEFINED__
typedef interface IWMDMEnumDevice IWMDMEnumDevice;
#endif 	/* __IWMDMEnumDevice_FWD_DEFINED__ */


#ifndef __IWMDMDeviceControl_FWD_DEFINED__
#define __IWMDMDeviceControl_FWD_DEFINED__
typedef interface IWMDMDeviceControl IWMDMDeviceControl;
#endif 	/* __IWMDMDeviceControl_FWD_DEFINED__ */


#ifndef __IWMDMEnumStorage_FWD_DEFINED__
#define __IWMDMEnumStorage_FWD_DEFINED__
typedef interface IWMDMEnumStorage IWMDMEnumStorage;
#endif 	/* __IWMDMEnumStorage_FWD_DEFINED__ */


#ifndef __IWMDMStorageControl_FWD_DEFINED__
#define __IWMDMStorageControl_FWD_DEFINED__
typedef interface IWMDMStorageControl IWMDMStorageControl;
#endif 	/* __IWMDMStorageControl_FWD_DEFINED__ */


#ifndef __IWMDMStorageControl2_FWD_DEFINED__
#define __IWMDMStorageControl2_FWD_DEFINED__
typedef interface IWMDMStorageControl2 IWMDMStorageControl2;
#endif 	/* __IWMDMStorageControl2_FWD_DEFINED__ */


#ifndef __IWMDMStorageControl3_FWD_DEFINED__
#define __IWMDMStorageControl3_FWD_DEFINED__
typedef interface IWMDMStorageControl3 IWMDMStorageControl3;
#endif 	/* __IWMDMStorageControl3_FWD_DEFINED__ */


#ifndef __IWMDMObjectInfo_FWD_DEFINED__
#define __IWMDMObjectInfo_FWD_DEFINED__
typedef interface IWMDMObjectInfo IWMDMObjectInfo;
#endif 	/* __IWMDMObjectInfo_FWD_DEFINED__ */


#ifndef __IWMDMRevoked_FWD_DEFINED__
#define __IWMDMRevoked_FWD_DEFINED__
typedef interface IWMDMRevoked IWMDMRevoked;
#endif 	/* __IWMDMRevoked_FWD_DEFINED__ */


#ifndef __IWMDMNotification_FWD_DEFINED__
#define __IWMDMNotification_FWD_DEFINED__
typedef interface IWMDMNotification IWMDMNotification;
#endif 	/* __IWMDMNotification_FWD_DEFINED__ */


#ifndef __IMDServiceProvider_FWD_DEFINED__
#define __IMDServiceProvider_FWD_DEFINED__
typedef interface IMDServiceProvider IMDServiceProvider;
#endif 	/* __IMDServiceProvider_FWD_DEFINED__ */


#ifndef __IMDServiceProvider2_FWD_DEFINED__
#define __IMDServiceProvider2_FWD_DEFINED__
typedef interface IMDServiceProvider2 IMDServiceProvider2;
#endif 	/* __IMDServiceProvider2_FWD_DEFINED__ */


#ifndef __IMDServiceProvider3_FWD_DEFINED__
#define __IMDServiceProvider3_FWD_DEFINED__
typedef interface IMDServiceProvider3 IMDServiceProvider3;
#endif 	/* __IMDServiceProvider3_FWD_DEFINED__ */


#ifndef __IMDSPEnumDevice_FWD_DEFINED__
#define __IMDSPEnumDevice_FWD_DEFINED__
typedef interface IMDSPEnumDevice IMDSPEnumDevice;
#endif 	/* __IMDSPEnumDevice_FWD_DEFINED__ */


#ifndef __IMDSPDevice_FWD_DEFINED__
#define __IMDSPDevice_FWD_DEFINED__
typedef interface IMDSPDevice IMDSPDevice;
#endif 	/* __IMDSPDevice_FWD_DEFINED__ */


#ifndef __IMDSPDevice2_FWD_DEFINED__
#define __IMDSPDevice2_FWD_DEFINED__
typedef interface IMDSPDevice2 IMDSPDevice2;
#endif 	/* __IMDSPDevice2_FWD_DEFINED__ */


#ifndef __IMDSPDevice3_FWD_DEFINED__
#define __IMDSPDevice3_FWD_DEFINED__
typedef interface IMDSPDevice3 IMDSPDevice3;
#endif 	/* __IMDSPDevice3_FWD_DEFINED__ */


#ifndef __IMDSPDeviceControl_FWD_DEFINED__
#define __IMDSPDeviceControl_FWD_DEFINED__
typedef interface IMDSPDeviceControl IMDSPDeviceControl;
#endif 	/* __IMDSPDeviceControl_FWD_DEFINED__ */


#ifndef __IMDSPEnumStorage_FWD_DEFINED__
#define __IMDSPEnumStorage_FWD_DEFINED__
typedef interface IMDSPEnumStorage IMDSPEnumStorage;
#endif 	/* __IMDSPEnumStorage_FWD_DEFINED__ */


#ifndef __IMDSPStorage_FWD_DEFINED__
#define __IMDSPStorage_FWD_DEFINED__
typedef interface IMDSPStorage IMDSPStorage;
#endif 	/* __IMDSPStorage_FWD_DEFINED__ */


#ifndef __IMDSPStorage2_FWD_DEFINED__
#define __IMDSPStorage2_FWD_DEFINED__
typedef interface IMDSPStorage2 IMDSPStorage2;
#endif 	/* __IMDSPStorage2_FWD_DEFINED__ */


#ifndef __IMDSPStorage3_FWD_DEFINED__
#define __IMDSPStorage3_FWD_DEFINED__
typedef interface IMDSPStorage3 IMDSPStorage3;
#endif 	/* __IMDSPStorage3_FWD_DEFINED__ */


#ifndef __IMDSPStorage4_FWD_DEFINED__
#define __IMDSPStorage4_FWD_DEFINED__
typedef interface IMDSPStorage4 IMDSPStorage4;
#endif 	/* __IMDSPStorage4_FWD_DEFINED__ */


#ifndef __IMDSPStorageGlobals_FWD_DEFINED__
#define __IMDSPStorageGlobals_FWD_DEFINED__
typedef interface IMDSPStorageGlobals IMDSPStorageGlobals;
#endif 	/* __IMDSPStorageGlobals_FWD_DEFINED__ */


#ifndef __IMDSPObjectInfo_FWD_DEFINED__
#define __IMDSPObjectInfo_FWD_DEFINED__
typedef interface IMDSPObjectInfo IMDSPObjectInfo;
#endif 	/* __IMDSPObjectInfo_FWD_DEFINED__ */


#ifndef __IMDSPObject_FWD_DEFINED__
#define __IMDSPObject_FWD_DEFINED__
typedef interface IMDSPObject IMDSPObject;
#endif 	/* __IMDSPObject_FWD_DEFINED__ */


#ifndef __IMDSPObject2_FWD_DEFINED__
#define __IMDSPObject2_FWD_DEFINED__
typedef interface IMDSPObject2 IMDSPObject2;
#endif 	/* __IMDSPObject2_FWD_DEFINED__ */


#ifndef __IMDSPDirectTransfer_FWD_DEFINED__
#define __IMDSPDirectTransfer_FWD_DEFINED__
typedef interface IMDSPDirectTransfer IMDSPDirectTransfer;
#endif 	/* __IMDSPDirectTransfer_FWD_DEFINED__ */


#ifndef __IMDSPRevoked_FWD_DEFINED__
#define __IMDSPRevoked_FWD_DEFINED__
typedef interface IMDSPRevoked IMDSPRevoked;
#endif 	/* __IMDSPRevoked_FWD_DEFINED__ */


#ifndef __ISCPSecureAuthenticate_FWD_DEFINED__
#define __ISCPSecureAuthenticate_FWD_DEFINED__
typedef interface ISCPSecureAuthenticate ISCPSecureAuthenticate;
#endif 	/* __ISCPSecureAuthenticate_FWD_DEFINED__ */


#ifndef __ISCPSecureAuthenticate2_FWD_DEFINED__
#define __ISCPSecureAuthenticate2_FWD_DEFINED__
typedef interface ISCPSecureAuthenticate2 ISCPSecureAuthenticate2;
#endif 	/* __ISCPSecureAuthenticate2_FWD_DEFINED__ */


#ifndef __ISCPSecureQuery_FWD_DEFINED__
#define __ISCPSecureQuery_FWD_DEFINED__
typedef interface ISCPSecureQuery ISCPSecureQuery;
#endif 	/* __ISCPSecureQuery_FWD_DEFINED__ */


#ifndef __ISCPSecureQuery2_FWD_DEFINED__
#define __ISCPSecureQuery2_FWD_DEFINED__
typedef interface ISCPSecureQuery2 ISCPSecureQuery2;
#endif 	/* __ISCPSecureQuery2_FWD_DEFINED__ */


#ifndef __ISCPSecureExchange_FWD_DEFINED__
#define __ISCPSecureExchange_FWD_DEFINED__
typedef interface ISCPSecureExchange ISCPSecureExchange;
#endif 	/* __ISCPSecureExchange_FWD_DEFINED__ */


#ifndef __ISCPSecureExchange2_FWD_DEFINED__
#define __ISCPSecureExchange2_FWD_DEFINED__
typedef interface ISCPSecureExchange2 ISCPSecureExchange2;
#endif 	/* __ISCPSecureExchange2_FWD_DEFINED__ */


#ifndef __ISCPSecureExchange3_FWD_DEFINED__
#define __ISCPSecureExchange3_FWD_DEFINED__
typedef interface ISCPSecureExchange3 ISCPSecureExchange3;
#endif 	/* __ISCPSecureExchange3_FWD_DEFINED__ */


#ifndef __ISCPSession_FWD_DEFINED__
#define __ISCPSession_FWD_DEFINED__
typedef interface ISCPSession ISCPSession;
#endif 	/* __ISCPSession_FWD_DEFINED__ */


#ifndef __ISCPSecureQuery3_FWD_DEFINED__
#define __ISCPSecureQuery3_FWD_DEFINED__
typedef interface ISCPSecureQuery3 ISCPSecureQuery3;
#endif 	/* __ISCPSecureQuery3_FWD_DEFINED__ */


#ifndef __IComponentAuthenticate_FWD_DEFINED__
#define __IComponentAuthenticate_FWD_DEFINED__
typedef interface IComponentAuthenticate IComponentAuthenticate;
#endif 	/* __IComponentAuthenticate_FWD_DEFINED__ */


#ifndef __MediaDevMgrClassFactory_FWD_DEFINED__
#define __MediaDevMgrClassFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class MediaDevMgrClassFactory MediaDevMgrClassFactory;
#else
typedef struct MediaDevMgrClassFactory MediaDevMgrClassFactory;
#endif /* __cplusplus */

#endif 	/* __MediaDevMgrClassFactory_FWD_DEFINED__ */


#ifndef __MediaDevMgr_FWD_DEFINED__
#define __MediaDevMgr_FWD_DEFINED__

#ifdef __cplusplus
typedef class MediaDevMgr MediaDevMgr;
#else
typedef struct MediaDevMgr MediaDevMgr;
#endif /* __cplusplus */

#endif 	/* __MediaDevMgr_FWD_DEFINED__ */


#ifndef __WMDMDevice_FWD_DEFINED__
#define __WMDMDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMDevice WMDMDevice;
#else
typedef struct WMDMDevice WMDMDevice;
#endif /* __cplusplus */

#endif 	/* __WMDMDevice_FWD_DEFINED__ */


#ifndef __WMDMStorage_FWD_DEFINED__
#define __WMDMStorage_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMStorage WMDMStorage;
#else
typedef struct WMDMStorage WMDMStorage;
#endif /* __cplusplus */

#endif 	/* __WMDMStorage_FWD_DEFINED__ */


#ifndef __WMDMStorageGlobal_FWD_DEFINED__
#define __WMDMStorageGlobal_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMStorageGlobal WMDMStorageGlobal;
#else
typedef struct WMDMStorageGlobal WMDMStorageGlobal;
#endif /* __cplusplus */

#endif 	/* __WMDMStorageGlobal_FWD_DEFINED__ */


#ifndef __WMDMDeviceEnum_FWD_DEFINED__
#define __WMDMDeviceEnum_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMDeviceEnum WMDMDeviceEnum;
#else
typedef struct WMDMDeviceEnum WMDMDeviceEnum;
#endif /* __cplusplus */

#endif 	/* __WMDMDeviceEnum_FWD_DEFINED__ */


#ifndef __WMDMStorageEnum_FWD_DEFINED__
#define __WMDMStorageEnum_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMStorageEnum WMDMStorageEnum;
#else
typedef struct WMDMStorageEnum WMDMStorageEnum;
#endif /* __cplusplus */

#endif 	/* __WMDMStorageEnum_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "propidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_mswmdm_0000_0000 */
/* [local] */ 

#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_MTP
#define _DEFINE_WMDM_DEVICE_PROTOCOL_MTP
// {979E54E5-0AFC-4604-8D93-DC798A4BCF45}
DEFINE_GUID(WMDM_DEVICE_PROTOCOL_MTP,
0x979e54e5, 0xafc, 0x4604, 0x8d, 0x93, 0xdc, 0x79, 0x8a, 0x4b, 0xcf, 0x45);
#endif
#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_RAPI
#define _DEFINE_WMDM_DEVICE_PROTOCOL_RAPI
// {2A11ED91-8C8F-41e4-82D1-8386E003561C}
DEFINE_GUID(WMDM_DEVICE_PROTOCOL_RAPI,
0x2a11ed91, 0x8c8f, 0x41e4, 0x82, 0xd1, 0x83, 0x86, 0xe0, 0x3, 0x56, 0x1c);
#endif
#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_MSC
#define _DEFINE_WMDM_DEVICE_PROTOCOL_MSC
// {A4D2C26C-A881-44bb-BD5D-1F703C71F7A9}
DEFINE_GUID(WMDM_DEVICE_PROTOCOL_MSC,
0xa4d2c26c, 0xa881, 0x44bb, 0xbd, 0x5d, 0x1f, 0x70, 0x3c, 0x71, 0xf7, 0xa9);
#endif
#ifndef _DEFINE_WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT
#define _DEFINE_WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT
// {7DE8686D-78EE-43ea-A496-C625AC91CC5D}
DEFINE_GUID(WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT,
0x7de8686d, 0x78ee, 0x43ea, 0xa4, 0x96, 0xc6, 0x25, 0xac, 0x91, 0xcc, 0x5d);
#endif
typedef 
enum tagWMDM_TAG_DATATYPE
    {	WMDM_TYPE_DWORD	= 0,
	WMDM_TYPE_STRING	= 1,
	WMDM_TYPE_BINARY	= 2,
	WMDM_TYPE_BOOL	= 3,
	WMDM_TYPE_QWORD	= 4,
	WMDM_TYPE_WORD	= 5,
	WMDM_TYPE_GUID	= 6,
	WMDM_TYPE_DATE	= 7
    } 	WMDM_TAG_DATATYPE;

typedef 
enum tagWMDM_SESSION_TYPE
    {	WMDM_SESSION_NONE	= 0,
	WMDM_SESSION_TRANSFER_TO_DEVICE	= 0x1,
	WMDM_SESSION_TRANSFER_FROM_DEVICE	= 0x10,
	WMDM_SESSION_DELETE	= 0x100,
	WMDM_SESSION_CUSTOM	= 0x1000
    } 	WMDM_SESSION_TYPE;

typedef struct _tWAVEFORMATEX
    {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
    } 	_WAVEFORMATEX;

typedef struct _tagBITMAPINFOHEADER
    {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
    } 	_BITMAPINFOHEADER;

typedef struct _tagVIDEOINFOHEADER
    {
    RECT rcSource;
    RECT rcTarget;
    DWORD dwBitRate;
    DWORD dwBitErrorRate;
    LONGLONG AvgTimePerFrame;
    _BITMAPINFOHEADER bmiHeader;
    } 	_VIDEOINFOHEADER;

typedef struct _tagWMFILECAPABILITIES
    {
    LPWSTR pwszMimeType;
    DWORD dwReserved;
    } 	WMFILECAPABILITIES;

typedef struct __OPAQUECOMMAND
    {
    GUID guidCommand;
    DWORD dwDataLen;
    BYTE *pData;
    BYTE abMAC[ 20 ];
    } 	OPAQUECOMMAND;

#define	WMDMID_LENGTH	( 128 )

typedef struct __WMDMID
    {
    UINT cbSize;
    DWORD dwVendorID;
    BYTE pID[ 128 ];
    UINT SerialNumberLength;
    } 	WMDMID;

typedef struct __WMDMID *PWMDMID;

typedef struct _WMDMDATETIME
    {
    WORD wYear;
    WORD wMonth;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    } 	WMDMDATETIME;

typedef struct _WMDMDATETIME *PWMDMDATETIME;

typedef struct __WMDMRIGHTS
    {
    UINT cbSize;
    DWORD dwContentType;
    DWORD fuFlags;
    DWORD fuRights;
    DWORD dwAppSec;
    DWORD dwPlaybackCount;
    WMDMDATETIME ExpirationDate;
    } 	WMDMRIGHTS;

typedef struct __WMDMRIGHTS *PWMDMRIGHTS;

typedef struct __WMDMMetadataView
    {
    WCHAR *pwszViewName;
    UINT nDepth;
    WCHAR **ppwszTags;
    } 	WMDMMetadataView;

typedef 
enum tagWMDM_STORAGE_ENUM_MODE
    {	ENUM_MODE_RAW	= 0,
	ENUM_MODE_USE_DEVICE_PREF	= ( ENUM_MODE_RAW + 1 ) ,
	ENUM_MODE_METADATA_VIEWS	= ( ENUM_MODE_USE_DEVICE_PREF + 1 ) 
    } 	WMDM_STORAGE_ENUM_MODE;

typedef /* [v1_enum] */ 
enum tagWMDM_FORMATCODE
    {	WMDM_FORMATCODE_NOTUSED	= 0,
	WMDM_FORMATCODE_ALLIMAGES	= 0xffffffff,
	WMDM_FORMATCODE_UNDEFINED	= 0x3000,
	WMDM_FORMATCODE_ASSOCIATION	= 0x3001,
	WMDM_FORMATCODE_SCRIPT	= 0x3002,
	WMDM_FORMATCODE_EXECUTABLE	= 0x3003,
	WMDM_FORMATCODE_TEXT	= 0x3004,
	WMDM_FORMATCODE_HTML	= 0x3005,
	WMDM_FORMATCODE_DPOF	= 0x3006,
	WMDM_FORMATCODE_AIFF	= 0x3007,
	WMDM_FORMATCODE_WAVE	= 0x3008,
	WMDM_FORMATCODE_MP3	= 0x3009,
	WMDM_FORMATCODE_AVI	= 0x300a,
	WMDM_FORMATCODE_MPEG	= 0x300b,
	WMDM_FORMATCODE_ASF	= 0x300c,
	WMDM_FORMATCODE_RESERVED_FIRST	= 0x300d,
	WMDM_FORMATCODE_RESERVED_LAST	= 0x37ff,
	WMDM_FORMATCODE_IMAGE_UNDEFINED	= 0x3800,
	WMDM_FORMATCODE_IMAGE_EXIF	= 0x3801,
	WMDM_FORMATCODE_IMAGE_TIFFEP	= 0x3802,
	WMDM_FORMATCODE_IMAGE_FLASHPIX	= 0x3803,
	WMDM_FORMATCODE_IMAGE_BMP	= 0x3804,
	WMDM_FORMATCODE_IMAGE_CIFF	= 0x3805,
	WMDM_FORMATCODE_IMAGE_GIF	= 0x3807,
	WMDM_FORMATCODE_IMAGE_JFIF	= 0x3808,
	WMDM_FORMATCODE_IMAGE_PCD	= 0x3809,
	WMDM_FORMATCODE_IMAGE_PICT	= 0x380a,
	WMDM_FORMATCODE_IMAGE_PNG	= 0x380b,
	WMDM_FORMATCODE_IMAGE_TIFF	= 0x380d,
	WMDM_FORMATCODE_IMAGE_TIFFIT	= 0x380e,
	WMDM_FORMATCODE_IMAGE_JP2	= 0x380f,
	WMDM_FORMATCODE_IMAGE_JPX	= 0x3810,
	WMDM_FORMATCODE_IMAGE_RESERVED_FIRST	= 0x3811,
	WMDM_FORMATCODE_IMAGE_RESERVED_LAST	= 0x3fff,
	WMDM_FORMATCODE_UNDEFINEDFIRMWARE	= 0xb802,
	WMDM_FORMATCODE_WINDOWSIMAGEFORMAT	= 0xb881,
	WMDM_FORMATCODE_UNDEFINEDAUDIO	= 0xb900,
	WMDM_FORMATCODE_WMA	= 0xb901,
	WMDM_FORMATCODE_OGG	= 0xb902,
	WMDM_FORMATCODE_AAC	= 0xb903,
	WMDM_FORMATCODE_AUDIBLE	= 0xb904,
	WMDM_FORMATCODE_FLAC	= 0xb906,
	WMDM_FORMATCODE_UNDEFINEDVIDEO	= 0xb980,
	WMDM_FORMATCODE_WMV	= 0xb981,
	WMDM_FORMATCODE_MP4	= 0xb982,
	WMDM_FORMATCODE_MP2	= 0xb983,
	WMDM_FORMATCODE_3GP	= 0xb984,
	WMDM_FORMATCODE_UNDEFINEDCOLLECTION	= 0xba00,
	WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM	= 0xba01,
	WMDM_FORMATCODE_ABSTRACTIMAGEALBUM	= 0xba02,
	WMDM_FORMATCODE_ABSTRACTAUDIOALBUM	= 0xba03,
	WMDM_FORMATCODE_ABSTRACTVIDEOALBUM	= 0xba04,
	WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST	= 0xba05,
	WMDM_FORMATCODE_ABSTRACTCONTACTGROUP	= 0xba06,
	WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER	= 0xba07,
	WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION	= 0xba08,
	WMDM_FORMATCODE_MEDIA_CAST	= 0xba0b,
	WMDM_FORMATCODE_WPLPLAYLIST	= 0xba10,
	WMDM_FORMATCODE_M3UPLAYLIST	= 0xba11,
	WMDM_FORMATCODE_MPLPLAYLIST	= 0xba12,
	WMDM_FORMATCODE_ASXPLAYLIST	= 0xba13,
	WMDM_FORMATCODE_PLSPLAYLIST	= 0xba14,
	WMDM_FORMATCODE_UNDEFINEDDOCUMENT	= 0xba80,
	WMDM_FORMATCODE_ABSTRACTDOCUMENT	= 0xba81,
	WMDM_FORMATCODE_XMLDOCUMENT	= 0xba82,
	WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT	= 0xba83,
	WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT	= 0xba84,
	WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET	= 0xba85,
	WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT	= 0xba86,
	WMDM_FORMATCODE_UNDEFINEDMESSAGE	= 0xbb00,
	WMDM_FORMATCODE_ABSTRACTMESSAGE	= 0xbb01,
	WMDM_FORMATCODE_UNDEFINEDCONTACT	= 0xbb80,
	WMDM_FORMATCODE_ABSTRACTCONTACT	= 0xbb81,
	WMDM_FORMATCODE_VCARD2	= 0xbb82,
	WMDM_FORMATCODE_VCARD3	= 0xbb83,
	WMDM_FORMATCODE_UNDEFINEDCALENDARITEM	= 0xbe00,
	WMDM_FORMATCODE_ABSTRACTCALENDARITEM	= 0xbe01,
	WMDM_FORMATCODE_VCALENDAR1	= 0xbe02,
	WMDM_FORMATCODE_VCALENDAR2	= 0xbe03,
	WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE	= 0xbe80,
	WMDM_FORMATCODE_M4A	= 0x4d503441,
	WMDM_FORMATCODE_3GPA	= 0x33475041,
	WMDM_FORMATCODE_SECTION	= 0xbe82
    } 	WMDM_FORMATCODE;

typedef /* [v1_enum] */ 
enum _WMDM_ENUM_PROP_VALID_VALUES_FORM
    {	WMDM_ENUM_PROP_VALID_VALUES_ANY	= 0,
	WMDM_ENUM_PROP_VALID_VALUES_RANGE	= ( WMDM_ENUM_PROP_VALID_VALUES_ANY + 1 ) ,
	WMDM_ENUM_PROP_VALID_VALUES_ENUM	= ( WMDM_ENUM_PROP_VALID_VALUES_RANGE + 1 ) 
    } 	WMDM_ENUM_PROP_VALID_VALUES_FORM;

typedef struct _WMDM_PROP_VALUES_RANGE
    {
    PROPVARIANT rangeMin;
    PROPVARIANT rangeMax;
    PROPVARIANT rangeStep;
    } 	WMDM_PROP_VALUES_RANGE;

typedef struct _WMDM_PROP_VALUES_ENUM
    {
    UINT cEnumValues;
    PROPVARIANT *pValues;
    } 	WMDM_PROP_VALUES_ENUM;

typedef struct _WMDM_PROP_DESC
    {
    LPWSTR pwszPropName;
    WMDM_ENUM_PROP_VALID_VALUES_FORM ValidValuesForm;
    union 
        {
         /* Empty union arm */ 
        WMDM_PROP_VALUES_RANGE ValidValuesRange;
        WMDM_PROP_VALUES_ENUM EnumeratedValidValues;
        } 	ValidValues;
    } 	WMDM_PROP_DESC;

typedef struct _WMDM_PROP_CONFIG
    {
    UINT nPreference;
    UINT nPropDesc;
    WMDM_PROP_DESC *pPropDesc;
    } 	WMDM_PROP_CONFIG;

typedef struct _WMDM_FORMAT_CAPABILITY
    {
    UINT nPropConfig;
    WMDM_PROP_CONFIG *pConfigs;
    } 	WMDM_FORMAT_CAPABILITY;

#define	WMDM_MAC_LENGTH	( 8 )

typedef 
enum tagWMDM_FIND_SCOPE
    {	WMDM_FIND_SCOPE_GLOBAL	= 0,
	WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN	= ( WMDM_FIND_SCOPE_GLOBAL + 1 ) 
    } 	WMDM_FIND_SCOPE;

// WMDM HRESULTS
//
//Success codes
//
#define WMDM_S_NOT_ALL_PROPERTIES_APPLIED       0x00045001L
#define WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED     0x00045002L
//
//Error codes
//
#define WMDM_E_BUSY                             0x80045000L
#define WMDM_E_INTERFACEDEAD                    0x80045001L
#define WMDM_E_INVALIDTYPE                      0x80045002L
#define WMDM_E_PROCESSFAILED                    0x80045003L
#define WMDM_E_NOTSUPPORTED                     0x80045004L
#define WMDM_E_NOTCERTIFIED                     0x80045005L
#define WMDM_E_NORIGHTS                         0x80045006L
#define WMDM_E_CALL_OUT_OF_SEQUENCE             0x80045007L
#define WMDM_E_BUFFERTOOSMALL                   0x80045008L
#define WMDM_E_MOREDATA                         0x80045009L
#define WMDM_E_MAC_CHECK_FAILED                 0x8004500AL
#define WMDM_E_USER_CANCELLED                   0x8004500BL
#define WMDM_E_SDMI_TRIGGER                     0x8004500CL
#define WMDM_E_SDMI_NOMORECOPIES                0x8004500DL
#define WMDM_E_REVOKED                          0x8004500EL
#define WMDM_E_LICENSE_NOTEXIST                 0x8004500FL
#define WMDM_E_INCORRECT_APPSEC                 0x80045010L
#define WMDM_E_INCORRECT_RIGHTS                 0x80045011L
#define WMDM_E_LICENSE_EXPIRED                  0x80045012L
#define WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE       0x80045013L
#define WMDM_E_TOO_MANY_SESSIONS                0x80045013L
// Revocation Flags
#define WMDM_WMDM_REVOKED                       0x00000001
#define WMDM_APP_REVOKED                        0x00000002
#define WMDM_SP_REVOKED                         0x00000004
#define WMDM_SCP_REVOKED                        0x00000008
// GetFormatSupport2 Flags
#define WMDM_GET_FORMAT_SUPPORT_AUDIO           0x00000001
#define WMDM_GET_FORMAT_SUPPORT_VIDEO           0x00000002
#define WMDM_GET_FORMAT_SUPPORT_FILE            0x00000004
// MDMRIGHTS Flags
#define WMDM_RIGHTS_PLAYBACKCOUNT               0x00000001
#define WMDM_RIGHTS_EXPIRATIONDATE              0x00000002
#define WMDM_RIGHTS_GROUPID                     0x00000004
#define WMDM_RIGHTS_FREESERIALIDS               0x00000008
#define WMDM_RIGHTS_NAMEDSERIALIDS              0x00000010
// Device Type Flags
#define WMDM_DEVICE_TYPE_PLAYBACK               0x00000001
#define WMDM_DEVICE_TYPE_RECORD                 0x00000002
#define WMDM_DEVICE_TYPE_DECODE                 0x00000004
#define WMDM_DEVICE_TYPE_ENCODE                 0x00000008
#define WMDM_DEVICE_TYPE_STORAGE                0x00000010
#define WMDM_DEVICE_TYPE_VIRTUAL                0x00000020
#define WMDM_DEVICE_TYPE_SDMI                   0x00000040
#define WMDM_DEVICE_TYPE_NONSDMI                0x00000080
#define WMDM_DEVICE_TYPE_NONREENTRANT           0x00000100
#define WMDM_DEVICE_TYPE_FILELISTRESYNC         0x00000200
#define WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW 0x00000400
// Device Power Source Flags
#define WMDM_POWER_CAP_BATTERY                  0x00000001
#define WMDM_POWER_CAP_EXTERNAL                 0x00000002
#define WMDM_POWER_IS_BATTERY                   0x00000004
#define WMDM_POWER_IS_EXTERNAL                  0x00000008
#define WMDM_POWER_PERCENT_AVAILABLE            0x00000010
// Device Status Flags
#define WMDM_STATUS_READY                       0x00000001
#define WMDM_STATUS_BUSY                        0x00000002
#define WMDM_STATUS_DEVICE_NOTPRESENT           0x00000004
#define WMDM_STATUS_DEVICECONTROL_PLAYING       0x00000008
#define WMDM_STATUS_DEVICECONTROL_RECORDING     0x00000010
#define WMDM_STATUS_DEVICECONTROL_PAUSED        0x00000020
#define WMDM_STATUS_DEVICECONTROL_REMOTE        0x00000040
#define WMDM_STATUS_DEVICECONTROL_STREAM        0x00000080
#define WMDM_STATUS_STORAGE_NOTPRESENT          0x00000100
#define WMDM_STATUS_STORAGE_INITIALIZING        0x00000200
#define WMDM_STATUS_STORAGE_BROKEN              0x00000400
#define WMDM_STATUS_STORAGE_NOTSUPPORTED        0x00000800
#define WMDM_STATUS_STORAGE_UNFORMATTED         0x00001000
#define WMDM_STATUS_STORAGECONTROL_INSERTING    0x00002000
#define WMDM_STATUS_STORAGECONTROL_DELETING     0x00004000
#define WMDM_STATUS_STORAGECONTROL_APPENDING    0x00008000
#define WMDM_STATUS_STORAGECONTROL_MOVING       0x00010000
#define WMDM_STATUS_STORAGECONTROL_READING      0x00020000
// Device Capabilities Flags
#define WMDM_DEVICECAP_CANPLAY                  0x00000001
#define WMDM_DEVICECAP_CANSTREAMPLAY            0x00000002
#define WMDM_DEVICECAP_CANRECORD                0x00000004
#define WMDM_DEVICECAP_CANSTREAMRECORD          0x00000008
#define WMDM_DEVICECAP_CANPAUSE                 0x00000010
#define WMDM_DEVICECAP_CANRESUME                0x00000020
#define WMDM_DEVICECAP_CANSTOP                  0x00000040
#define WMDM_DEVICECAP_CANSEEK                  0x00000080
#define WMDM_DEVICECAP_HASSECURECLOCK           0x00000100
// WMDM Seek Flags
#define WMDM_SEEK_REMOTECONTROL                 0x00000001
#define WMDM_SEEK_STREAMINGAUDIO                0x00000002
// Storage Attributes Flags
#define WMDM_STORAGE_ATTR_FILESYSTEM            0x00000001
#define WMDM_STORAGE_ATTR_REMOVABLE             0x00000002
#define WMDM_STORAGE_ATTR_NONREMOVABLE          0x00000004
#define WMDM_FILE_ATTR_FOLDER                   0x00000008
#define WMDM_FILE_ATTR_LINK                     0x00000010
#define WMDM_FILE_ATTR_FILE                     0x00000020
#define WMDM_FILE_ATTR_VIDEO                    0x00000040
#define WMDM_STORAGE_ATTR_CANEDITMETADATA       0x00000080
#define WMDM_STORAGE_ATTR_FOLDERS               0x00000100
#define WMDM_FILE_ATTR_AUDIO                    0x00001000
#define WMDM_FILE_ATTR_DATA                     0x00002000
#define WMDM_FILE_ATTR_CANPLAY                  0x00004000
#define WMDM_FILE_ATTR_CANDELETE                0x00008000
#define WMDM_FILE_ATTR_CANMOVE                  0x00010000
#define WMDM_FILE_ATTR_CANRENAME                0x00020000
#define WMDM_FILE_ATTR_CANREAD                  0x00040000
#define WMDM_FILE_ATTR_MUSIC                    0x00080000
#define WMDM_FILE_CREATE_OVERWRITE              0x00100000
#define WMDM_FILE_ATTR_AUDIOBOOK                0x00200000
#define WMDM_FILE_ATTR_HIDDEN                   0x00400000
#define WMDM_FILE_ATTR_SYSTEM                   0x00800000
#define WMDM_FILE_ATTR_READONLY                 0x01000000
#define WMDM_STORAGE_ATTR_HAS_FOLDERS           0x02000000
#define WMDM_STORAGE_ATTR_HAS_FILES             0x04000000
#define WMDM_STORAGE_IS_DEFAULT                 0x08000000
#define WMDM_STORAGE_CONTAINS_DEFAULT           0x10000000
#define WMDM_STORAGE_ATTR_VIRTUAL               0x20000000
// Storage Capabilities Flags
#define WMDM_STORAGECAP_FOLDERSINROOT           0x00000001
#define WMDM_STORAGECAP_FILESINROOT             0x00000002
#define WMDM_STORAGECAP_FOLDERSINFOLDERS        0x00000004
#define WMDM_STORAGECAP_FILESINFOLDERS          0x00000008
#define WMDM_STORAGECAP_FOLDERLIMITEXISTS       0x00000010
#define WMDM_STORAGECAP_FILELIMITEXISTS         0x00000020
#define WMDM_STORAGECAP_NOT_INITIALIZABLE       0x00000040
// WMDM Mode Flags
#define WMDM_MODE_BLOCK                         0x00000001
#define WMDM_MODE_THREAD                        0x00000002
#define WMDM_CONTENT_FILE                       0x00000004
#define WMDM_CONTENT_FOLDER                     0x00000008
#define WMDM_CONTENT_OPERATIONINTERFACE         0x00000010
#define WMDM_MODE_QUERY                         0x00000020
#define WMDM_MODE_PROGRESS                      0x00000040
#define WMDM_MODE_TRANSFER_PROTECTED            0x00000080
#define WMDM_MODE_TRANSFER_UNPROTECTED          0x00000100
#define WMDM_STORAGECONTROL_INSERTBEFORE        0x00000200
#define WMDM_STORAGECONTROL_INSERTAFTER         0x00000400
#define WMDM_STORAGECONTROL_INSERTINTO          0x00000800
#define WMDM_MODE_RECURSIVE                     0x00001000
// WMDM Rights Flags
// NON_SDMI = !SDMI_PROTECTED
// SDMI = SDMI_VALIDATED
#define WMDM_RIGHTS_PLAY_ON_PC                  0x00000001
#define WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE     0x00000002
#define WMDM_RIGHTS_COPY_TO_CD                  0x00000008
#define WMDM_RIGHTS_COPY_TO_SDMI_DEVICE         0x00000010
// WMDM Seek Flags
#define WMDM_SEEK_BEGIN                         0x00000001
#define WMDM_SEEK_CURRENT                       0x00000002
#define WMDM_SEEK_END                           0x00000008
// WMDM Device Enumeration Flags
#define DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES   0x00000001
#define ALLOW_OUTOFBAND_NOTIFICATION            0x00000002

enum WMDMMessage
    {	WMDM_MSG_DEVICE_ARRIVAL	= 0,
	WMDM_MSG_DEVICE_REMOVAL	= ( WMDM_MSG_DEVICE_ARRIVAL + 1 ) ,
	WMDM_MSG_MEDIA_ARRIVAL	= ( WMDM_MSG_DEVICE_REMOVAL + 1 ) ,
	WMDM_MSG_MEDIA_REMOVAL	= ( WMDM_MSG_MEDIA_ARRIVAL + 1 ) 
    } ;














extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0000_v0_0_s_ifspec;

#ifndef __IWMDMMetaData_INTERFACE_DEFINED__
#define __IWMDMMetaData_INTERFACE_DEFINED__

/* interface IWMDMMetaData */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMMetaData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EC3B0663-0951-460a-9A80-0DCEED3C043C")
    IWMDMMetaData : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ WMDM_TAG_DATATYPE Type,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszTagName,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(iLength) BYTE *pValue,
            /* [in] */ UINT iLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryByName( 
            /* [string][in] */ __RPC__in_string LPCWSTR pwszTagName,
            /* [out] */ __RPC__out WMDM_TAG_DATATYPE *pType,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE **pValue,
            /* [out] */ __RPC__out UINT *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryByIndex( 
            /* [in] */ UINT iIndex,
            /* [string][out] */ __RPC__deref_out_opt_string WCHAR **ppwszName,
            /* [out] */ __RPC__out WMDM_TAG_DATATYPE *pType,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE **ppValue,
            /* [out] */ __RPC__out UINT *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemCount( 
            /* [out] */ __RPC__out UINT *iCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMMetaDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMMetaData * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMMetaData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMMetaData * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in IWMDMMetaData * This,
            /* [in] */ WMDM_TAG_DATATYPE Type,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszTagName,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(iLength) BYTE *pValue,
            /* [in] */ UINT iLength);
        
        HRESULT ( STDMETHODCALLTYPE *QueryByName )( 
            __RPC__in IWMDMMetaData * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszTagName,
            /* [out] */ __RPC__out WMDM_TAG_DATATYPE *pType,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE **pValue,
            /* [out] */ __RPC__out UINT *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *QueryByIndex )( 
            __RPC__in IWMDMMetaData * This,
            /* [in] */ UINT iIndex,
            /* [string][out] */ __RPC__deref_out_opt_string WCHAR **ppwszName,
            /* [out] */ __RPC__out WMDM_TAG_DATATYPE *pType,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE **ppValue,
            /* [out] */ __RPC__out UINT *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemCount )( 
            __RPC__in IWMDMMetaData * This,
            /* [out] */ __RPC__out UINT *iCount);
        
        END_INTERFACE
    } IWMDMMetaDataVtbl;

    interface IWMDMMetaData
    {
        CONST_VTBL struct IWMDMMetaDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMMetaData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMMetaData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMMetaData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMMetaData_AddItem(This,Type,pwszTagName,pValue,iLength)	\
    ( (This)->lpVtbl -> AddItem(This,Type,pwszTagName,pValue,iLength) ) 

#define IWMDMMetaData_QueryByName(This,pwszTagName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> QueryByName(This,pwszTagName,pType,pValue,pcbLength) ) 

#define IWMDMMetaData_QueryByIndex(This,iIndex,ppwszName,pType,ppValue,pcbLength)	\
    ( (This)->lpVtbl -> QueryByIndex(This,iIndex,ppwszName,pType,ppValue,pcbLength) ) 

#define IWMDMMetaData_GetItemCount(This,iCount)	\
    ( (This)->lpVtbl -> GetItemCount(This,iCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMMetaData_INTERFACE_DEFINED__ */


#ifndef __IWMDeviceManager_INTERFACE_DEFINED__
#define __IWMDeviceManager_INTERFACE_DEFINED__

/* interface IWMDeviceManager */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDeviceManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A00-33ED-11d3-8470-00C04F79DBC0")
    IWMDeviceManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRevision( 
            /* [out] */ __RPC__out DWORD *pdwRevision) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDeviceCount( 
            /* [out] */ __RPC__out DWORD *pdwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDevices( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDeviceManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDeviceManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDeviceManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDeviceManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevision )( 
            __RPC__in IWMDeviceManager * This,
            /* [out] */ __RPC__out DWORD *pdwRevision);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IWMDeviceManager * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IWMDeviceManager * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        END_INTERFACE
    } IWMDeviceManagerVtbl;

    interface IWMDeviceManager
    {
        CONST_VTBL struct IWMDeviceManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDeviceManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDeviceManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDeviceManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDeviceManager_GetRevision(This,pdwRevision)	\
    ( (This)->lpVtbl -> GetRevision(This,pdwRevision) ) 

#define IWMDeviceManager_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IWMDeviceManager_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDeviceManager_INTERFACE_DEFINED__ */


#ifndef __IWMDeviceManager2_INTERFACE_DEFINED__
#define __IWMDeviceManager2_INTERFACE_DEFINED__

/* interface IWMDeviceManager2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDeviceManager2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("923E5249-8731-4c5b-9B1C-B8B60B6E46AF")
    IWMDeviceManager2 : public IWMDeviceManager
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDeviceFromCanonicalName( 
            /* [string][in] */ __RPC__in_string LPCWSTR pwszCanonicalName,
            /* [out] */ __RPC__deref_out_opt IWMDMDevice **ppDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDevices2( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reinitialize( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDeviceManager2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDeviceManager2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDeviceManager2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevision )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [out] */ __RPC__out DWORD *pdwRevision);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceFromCanonicalName )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszCanonicalName,
            /* [out] */ __RPC__deref_out_opt IWMDMDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices2 )( 
            __RPC__in IWMDeviceManager2 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *Reinitialize )( 
            __RPC__in IWMDeviceManager2 * This);
        
        END_INTERFACE
    } IWMDeviceManager2Vtbl;

    interface IWMDeviceManager2
    {
        CONST_VTBL struct IWMDeviceManager2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDeviceManager2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDeviceManager2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDeviceManager2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDeviceManager2_GetRevision(This,pdwRevision)	\
    ( (This)->lpVtbl -> GetRevision(This,pdwRevision) ) 

#define IWMDeviceManager2_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IWMDeviceManager2_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 


#define IWMDeviceManager2_GetDeviceFromCanonicalName(This,pwszCanonicalName,ppDevice)	\
    ( (This)->lpVtbl -> GetDeviceFromCanonicalName(This,pwszCanonicalName,ppDevice) ) 

#define IWMDeviceManager2_EnumDevices2(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices2(This,ppEnumDevice) ) 

#define IWMDeviceManager2_Reinitialize(This)	\
    ( (This)->lpVtbl -> Reinitialize(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDeviceManager2_INTERFACE_DEFINED__ */


#ifndef __IWMDeviceManager3_INTERFACE_DEFINED__
#define __IWMDeviceManager3_INTERFACE_DEFINED__

/* interface IWMDeviceManager3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDeviceManager3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("af185c41-100d-46ed-be2e-9ce8c44594ef")
    IWMDeviceManager3 : public IWMDeviceManager2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetDeviceEnumPreference( 
            /* [in] */ DWORD dwEnumPref) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDeviceManager3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDeviceManager3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDeviceManager3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevision )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [out] */ __RPC__out DWORD *pdwRevision);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceFromCanonicalName )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszCanonicalName,
            /* [out] */ __RPC__deref_out_opt IWMDMDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices2 )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *Reinitialize )( 
            __RPC__in IWMDeviceManager3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDeviceEnumPreference )( 
            __RPC__in IWMDeviceManager3 * This,
            /* [in] */ DWORD dwEnumPref);
        
        END_INTERFACE
    } IWMDeviceManager3Vtbl;

    interface IWMDeviceManager3
    {
        CONST_VTBL struct IWMDeviceManager3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDeviceManager3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDeviceManager3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDeviceManager3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDeviceManager3_GetRevision(This,pdwRevision)	\
    ( (This)->lpVtbl -> GetRevision(This,pdwRevision) ) 

#define IWMDeviceManager3_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IWMDeviceManager3_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 


#define IWMDeviceManager3_GetDeviceFromCanonicalName(This,pwszCanonicalName,ppDevice)	\
    ( (This)->lpVtbl -> GetDeviceFromCanonicalName(This,pwszCanonicalName,ppDevice) ) 

#define IWMDeviceManager3_EnumDevices2(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices2(This,ppEnumDevice) ) 

#define IWMDeviceManager3_Reinitialize(This)	\
    ( (This)->lpVtbl -> Reinitialize(This) ) 


#define IWMDeviceManager3_SetDeviceEnumPreference(This,dwEnumPref)	\
    ( (This)->lpVtbl -> SetDeviceEnumPreference(This,dwEnumPref) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDeviceManager3_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorageGlobals_INTERFACE_DEFINED__
#define __IWMDMStorageGlobals_INTERFACE_DEFINED__

/* interface IWMDMStorageGlobals */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorageGlobals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A07-33ED-11d3-8470-00C04F79DBC0")
    IWMDMStorageGlobals : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ __RPC__out DWORD *pdwCapabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSerialNumber( 
            /* [out] */ __RPC__out PWMDMID pSerialNum,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalSize( 
            /* [out] */ __RPC__out DWORD *pdwTotalSizeLow,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalFree( 
            /* [out] */ __RPC__out DWORD *pdwFreeLow,
            /* [out] */ __RPC__out DWORD *pdwFreeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalBad( 
            /* [out] */ __RPC__out DWORD *pdwBadLow,
            /* [out] */ __RPC__out DWORD *pdwBadHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorageGlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorageGlobals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorageGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCapabilities )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwCapabilities);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out PWMDMID pSerialNum,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalSize )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeLow,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalFree )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwFreeLow,
            /* [out] */ __RPC__out DWORD *pdwFreeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalBad )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwBadLow,
            /* [out] */ __RPC__out DWORD *pdwBadHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in IWMDMStorageGlobals * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        END_INTERFACE
    } IWMDMStorageGlobalsVtbl;

    interface IWMDMStorageGlobals
    {
        CONST_VTBL struct IWMDMStorageGlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorageGlobals_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorageGlobals_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorageGlobals_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorageGlobals_GetCapabilities(This,pdwCapabilities)	\
    ( (This)->lpVtbl -> GetCapabilities(This,pdwCapabilities) ) 

#define IWMDMStorageGlobals_GetSerialNumber(This,pSerialNum,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNum,abMac) ) 

#define IWMDMStorageGlobals_GetTotalSize(This,pdwTotalSizeLow,pdwTotalSizeHigh)	\
    ( (This)->lpVtbl -> GetTotalSize(This,pdwTotalSizeLow,pdwTotalSizeHigh) ) 

#define IWMDMStorageGlobals_GetTotalFree(This,pdwFreeLow,pdwFreeHigh)	\
    ( (This)->lpVtbl -> GetTotalFree(This,pdwFreeLow,pdwFreeHigh) ) 

#define IWMDMStorageGlobals_GetTotalBad(This,pdwBadLow,pdwBadHigh)	\
    ( (This)->lpVtbl -> GetTotalBad(This,pdwBadLow,pdwBadHigh) ) 

#define IWMDMStorageGlobals_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IWMDMStorageGlobals_Initialize(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Initialize(This,fuMode,pProgress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorageGlobals_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorage_INTERFACE_DEFINED__
#define __IWMDMStorage_INTERFACE_DEFINED__

/* interface IWMDMStorage */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A06-33ED-11d3-8470-00C04F79DBC0")
    IWMDMStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAttributes( 
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStorageGlobals( 
            /* [out] */ __RPC__deref_out_opt IWMDMStorageGlobals **ppStorageGlobals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributes( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDate( 
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRights( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStorage( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **pEnumStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOpaqueCommand( 
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IWMDMStorage * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IWMDMStorage * This,
            /* [out] */ __RPC__deref_out_opt IWMDMStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IWMDMStorage * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMStorage * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IWMDMStorage * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IWMDMStorage * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IWMDMStorage * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMStorage * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **pEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMStorage * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        END_INTERFACE
    } IWMDMStorageVtbl;

    interface IWMDMStorage
    {
        CONST_VTBL struct IWMDMStorageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorage_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMStorage_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IWMDMStorage_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMStorage_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMStorage_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IWMDMStorage_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IWMDMStorage_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IWMDMStorage_EnumStorage(This,pEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,pEnumStorage) ) 

#define IWMDMStorage_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorage_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorage2_INTERFACE_DEFINED__
#define __IWMDMStorage2_INTERFACE_DEFINED__

/* interface IWMDMStorage2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorage2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ED5A144-5CD5-4683-9EFF-72CBDB2D9533")
    IWMDMStorage2 : public IWMDMStorage
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStorage( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAttributes2( 
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributes2( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorage2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorage2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorage2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorage2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IWMDMStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMStorage2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IWMDMStorage2 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **pEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IWMDMStorage2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IWMDMStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IWMDMStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        END_INTERFACE
    } IWMDMStorage2Vtbl;

    interface IWMDMStorage2
    {
        CONST_VTBL struct IWMDMStorage2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorage2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorage2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorage2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorage2_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMStorage2_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IWMDMStorage2_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMStorage2_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMStorage2_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IWMDMStorage2_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IWMDMStorage2_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IWMDMStorage2_EnumStorage(This,pEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,pEnumStorage) ) 

#define IWMDMStorage2_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IWMDMStorage2_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IWMDMStorage2_SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat) ) 

#define IWMDMStorage2_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorage2_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorage3_INTERFACE_DEFINED__
#define __IWMDMStorage3_INTERFACE_DEFINED__

/* interface IWMDMStorage3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorage3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("97717EEA-926A-464e-96A4-247B0216026E")
    IWMDMStorage3 : public IWMDMStorage2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMetadata( 
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMetadata( 
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateEmptyMetadataObject( 
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnumPreference( 
            /* [out][in] */ __RPC__inout WMDM_STORAGE_ENUM_MODE *pMode,
            /* [in] */ DWORD nViews,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(nViews) WMDMMetadataView *pViews) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorage3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorage3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorage3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorage3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IWMDMStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMStorage3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IWMDMStorage3 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **pEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IWMDMStorage3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IWMDMStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetadata )( 
            __RPC__in IWMDMStorage3 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEmptyMetadataObject )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnumPreference )( 
            __RPC__in IWMDMStorage3 * This,
            /* [out][in] */ __RPC__inout WMDM_STORAGE_ENUM_MODE *pMode,
            /* [in] */ DWORD nViews,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(nViews) WMDMMetadataView *pViews);
        
        END_INTERFACE
    } IWMDMStorage3Vtbl;

    interface IWMDMStorage3
    {
        CONST_VTBL struct IWMDMStorage3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorage3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorage3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorage3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorage3_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMStorage3_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IWMDMStorage3_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMStorage3_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMStorage3_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IWMDMStorage3_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IWMDMStorage3_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IWMDMStorage3_EnumStorage(This,pEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,pEnumStorage) ) 

#define IWMDMStorage3_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IWMDMStorage3_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IWMDMStorage3_SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat) ) 

#define IWMDMStorage3_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 


#define IWMDMStorage3_GetMetadata(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetMetadata(This,ppMetadata) ) 

#define IWMDMStorage3_SetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> SetMetadata(This,pMetadata) ) 

#define IWMDMStorage3_CreateEmptyMetadataObject(This,ppMetadata)	\
    ( (This)->lpVtbl -> CreateEmptyMetadataObject(This,ppMetadata) ) 

#define IWMDMStorage3_SetEnumPreference(This,pMode,nViews,pViews)	\
    ( (This)->lpVtbl -> SetEnumPreference(This,pMode,nViews,pViews) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorage3_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorage4_INTERFACE_DEFINED__
#define __IWMDMStorage4_INTERFACE_DEFINED__

/* interface IWMDMStorage4 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorage4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c225bac5-a03a-40b8-9a23-91cf478c64a6")
    IWMDMStorage4 : public IWMDMStorage3
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetReferences( 
            /* [in] */ DWORD dwRefs,
            /* [size_is][unique][in] */ __RPC__in_ecount_full_opt(dwRefs) IWMDMStorage **ppIWMDMStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReferences( 
            /* [out] */ __RPC__out DWORD *pdwRefs,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwRefs) IWMDMStorage ***pppIWMDMStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRightsWithProgress( 
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pIProgressCallback,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSpecifiedMetadata( 
            /* [in] */ DWORD cProperties,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) LPCWSTR *ppwszPropNames,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindStorage( 
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorage4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorage4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorage4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMStorage4 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IWMDMStorage4 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **pEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IWMDMStorage4 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetadata )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEmptyMetadataObject )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnumPreference )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out][in] */ __RPC__inout WMDM_STORAGE_ENUM_MODE *pMode,
            /* [in] */ DWORD nViews,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(nViews) WMDMMetadataView *pViews);
        
        HRESULT ( STDMETHODCALLTYPE *SetReferences )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ DWORD dwRefs,
            /* [size_is][unique][in] */ __RPC__in_ecount_full_opt(dwRefs) IWMDMStorage **ppIWMDMStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetReferences )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwRefs,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwRefs) IWMDMStorage ***pppIWMDMStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetRightsWithProgress )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pIProgressCallback,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifiedMetadata )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ DWORD cProperties,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) LPCWSTR *ppwszPropNames,
            /* [out] */ __RPC__deref_out_opt IWMDMMetaData **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *FindStorage )( 
            __RPC__in IWMDMStorage4 * This,
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            __RPC__in IWMDMStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        END_INTERFACE
    } IWMDMStorage4Vtbl;

    interface IWMDMStorage4
    {
        CONST_VTBL struct IWMDMStorage4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorage4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorage4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorage4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorage4_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMStorage4_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IWMDMStorage4_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMStorage4_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMStorage4_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IWMDMStorage4_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IWMDMStorage4_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IWMDMStorage4_EnumStorage(This,pEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,pEnumStorage) ) 

#define IWMDMStorage4_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IWMDMStorage4_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IWMDMStorage4_SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat) ) 

#define IWMDMStorage4_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 


#define IWMDMStorage4_GetMetadata(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetMetadata(This,ppMetadata) ) 

#define IWMDMStorage4_SetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> SetMetadata(This,pMetadata) ) 

#define IWMDMStorage4_CreateEmptyMetadataObject(This,ppMetadata)	\
    ( (This)->lpVtbl -> CreateEmptyMetadataObject(This,ppMetadata) ) 

#define IWMDMStorage4_SetEnumPreference(This,pMode,nViews,pViews)	\
    ( (This)->lpVtbl -> SetEnumPreference(This,pMode,nViews,pViews) ) 


#define IWMDMStorage4_SetReferences(This,dwRefs,ppIWMDMStorage)	\
    ( (This)->lpVtbl -> SetReferences(This,dwRefs,ppIWMDMStorage) ) 

#define IWMDMStorage4_GetReferences(This,pdwRefs,pppIWMDMStorage)	\
    ( (This)->lpVtbl -> GetReferences(This,pdwRefs,pppIWMDMStorage) ) 

#define IWMDMStorage4_GetRightsWithProgress(This,pIProgressCallback,ppRights,pnRightsCount)	\
    ( (This)->lpVtbl -> GetRightsWithProgress(This,pIProgressCallback,ppRights,pnRightsCount) ) 

#define IWMDMStorage4_GetSpecifiedMetadata(This,cProperties,ppwszPropNames,ppMetadata)	\
    ( (This)->lpVtbl -> GetSpecifiedMetadata(This,cProperties,ppwszPropNames,ppMetadata) ) 

#define IWMDMStorage4_FindStorage(This,findScope,pwszUniqueID,ppStorage)	\
    ( (This)->lpVtbl -> FindStorage(This,findScope,pwszUniqueID,ppStorage) ) 

#define IWMDMStorage4_GetParent(This,ppStorage)	\
    ( (This)->lpVtbl -> GetParent(This,ppStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorage4_INTERFACE_DEFINED__ */


#ifndef __IWMDMOperation_INTERFACE_DEFINED__
#define __IWMDMOperation_INTERFACE_DEFINED__

/* interface IWMDMOperation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMOperation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A0B-33ED-11d3-8470-00C04F79DBC0")
    IWMDMOperation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginRead( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginWrite( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetObjectName( 
            /* [size_is][string][in] */ __RPC__in_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectAttributes( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetObjectAttributes( 
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectTotalSize( 
            /* [out] */ __RPC__out DWORD *pdwSize,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetObjectTotalSize( 
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TransferObjectData( 
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE End( 
            /* [in] */ __RPC__in HRESULT *phCompletionCode,
            /* [in] */ __RPC__in_opt IUnknown *pNewObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMOperationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMOperation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMOperation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMOperation * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginRead )( 
            __RPC__in IWMDMOperation * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginWrite )( 
            __RPC__in IWMDMOperation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectName )( 
            __RPC__in IWMDMOperation * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectName )( 
            __RPC__in IWMDMOperation * This,
            /* [size_is][string][in] */ __RPC__in_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectAttributes )( 
            __RPC__in IWMDMOperation * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectAttributes )( 
            __RPC__in IWMDMOperation * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectTotalSize )( 
            __RPC__in IWMDMOperation * This,
            /* [out] */ __RPC__out DWORD *pdwSize,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectTotalSize )( 
            __RPC__in IWMDMOperation * This,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *TransferObjectData )( 
            __RPC__in IWMDMOperation * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMOperation * This,
            /* [in] */ __RPC__in HRESULT *phCompletionCode,
            /* [in] */ __RPC__in_opt IUnknown *pNewObject);
        
        END_INTERFACE
    } IWMDMOperationVtbl;

    interface IWMDMOperation
    {
        CONST_VTBL struct IWMDMOperationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMOperation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMOperation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMOperation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMOperation_BeginRead(This)	\
    ( (This)->lpVtbl -> BeginRead(This) ) 

#define IWMDMOperation_BeginWrite(This)	\
    ( (This)->lpVtbl -> BeginWrite(This) ) 

#define IWMDMOperation_GetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation_SetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> SetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation_GetObjectAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetObjectAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMOperation_SetObjectAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetObjectAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMOperation_GetObjectTotalSize(This,pdwSize,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetObjectTotalSize(This,pdwSize,pdwSizeHigh) ) 

#define IWMDMOperation_SetObjectTotalSize(This,dwSize,dwSizeHigh)	\
    ( (This)->lpVtbl -> SetObjectTotalSize(This,dwSize,dwSizeHigh) ) 

#define IWMDMOperation_TransferObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> TransferObjectData(This,pData,pdwSize,abMac) ) 

#define IWMDMOperation_End(This,phCompletionCode,pNewObject)	\
    ( (This)->lpVtbl -> End(This,phCompletionCode,pNewObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMOperation_INTERFACE_DEFINED__ */


#ifndef __IWMDMOperation2_INTERFACE_DEFINED__
#define __IWMDMOperation2_INTERFACE_DEFINED__

/* interface IWMDMOperation2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMOperation2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33445B48-7DF7-425c-AD8F-0FC6D82F9F75")
    IWMDMOperation2 : public IWMDMOperation
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetObjectAttributes2( 
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectAttributes2( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMOperation2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMOperation2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMOperation2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMOperation2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginRead )( 
            __RPC__in IWMDMOperation2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginWrite )( 
            __RPC__in IWMDMOperation2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectName )( 
            __RPC__in IWMDMOperation2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectName )( 
            __RPC__in IWMDMOperation2 * This,
            /* [size_is][string][in] */ __RPC__in_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectAttributes )( 
            __RPC__in IWMDMOperation2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectAttributes )( 
            __RPC__in IWMDMOperation2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectTotalSize )( 
            __RPC__in IWMDMOperation2 * This,
            /* [out] */ __RPC__out DWORD *pdwSize,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectTotalSize )( 
            __RPC__in IWMDMOperation2 * This,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *TransferObjectData )( 
            __RPC__in IWMDMOperation2 * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMOperation2 * This,
            /* [in] */ __RPC__in HRESULT *phCompletionCode,
            /* [in] */ __RPC__in_opt IUnknown *pNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectAttributes2 )( 
            __RPC__in IWMDMOperation2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectAttributes2 )( 
            __RPC__in IWMDMOperation2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        END_INTERFACE
    } IWMDMOperation2Vtbl;

    interface IWMDMOperation2
    {
        CONST_VTBL struct IWMDMOperation2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMOperation2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMOperation2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMOperation2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMOperation2_BeginRead(This)	\
    ( (This)->lpVtbl -> BeginRead(This) ) 

#define IWMDMOperation2_BeginWrite(This)	\
    ( (This)->lpVtbl -> BeginWrite(This) ) 

#define IWMDMOperation2_GetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation2_SetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> SetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation2_GetObjectAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetObjectAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMOperation2_SetObjectAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetObjectAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMOperation2_GetObjectTotalSize(This,pdwSize,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetObjectTotalSize(This,pdwSize,pdwSizeHigh) ) 

#define IWMDMOperation2_SetObjectTotalSize(This,dwSize,dwSizeHigh)	\
    ( (This)->lpVtbl -> SetObjectTotalSize(This,dwSize,dwSizeHigh) ) 

#define IWMDMOperation2_TransferObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> TransferObjectData(This,pData,pdwSize,abMac) ) 

#define IWMDMOperation2_End(This,phCompletionCode,pNewObject)	\
    ( (This)->lpVtbl -> End(This,phCompletionCode,pNewObject) ) 


#define IWMDMOperation2_SetObjectAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetObjectAttributes2(This,dwAttributes,dwAttributesEx,pFormat,pVideoFormat) ) 

#define IWMDMOperation2_GetObjectAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetObjectAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMOperation2_INTERFACE_DEFINED__ */


#ifndef __IWMDMOperation3_INTERFACE_DEFINED__
#define __IWMDMOperation3_INTERFACE_DEFINED__

/* interface IWMDMOperation3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMOperation3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d1f9b46a-9ca8-46d8-9d0f-1ec9bae54919")
    IWMDMOperation3 : public IWMDMOperation
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransferObjectDataOnClearChannel( 
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMOperation3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMOperation3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMOperation3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMOperation3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginRead )( 
            __RPC__in IWMDMOperation3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginWrite )( 
            __RPC__in IWMDMOperation3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectName )( 
            __RPC__in IWMDMOperation3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectName )( 
            __RPC__in IWMDMOperation3 * This,
            /* [size_is][string][in] */ __RPC__in_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectAttributes )( 
            __RPC__in IWMDMOperation3 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectAttributes )( 
            __RPC__in IWMDMOperation3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectTotalSize )( 
            __RPC__in IWMDMOperation3 * This,
            /* [out] */ __RPC__out DWORD *pdwSize,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectTotalSize )( 
            __RPC__in IWMDMOperation3 * This,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *TransferObjectData )( 
            __RPC__in IWMDMOperation3 * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMOperation3 * This,
            /* [in] */ __RPC__in HRESULT *phCompletionCode,
            /* [in] */ __RPC__in_opt IUnknown *pNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *TransferObjectDataOnClearChannel )( 
            __RPC__in IWMDMOperation3 * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize);
        
        END_INTERFACE
    } IWMDMOperation3Vtbl;

    interface IWMDMOperation3
    {
        CONST_VTBL struct IWMDMOperation3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMOperation3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMOperation3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMOperation3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMOperation3_BeginRead(This)	\
    ( (This)->lpVtbl -> BeginRead(This) ) 

#define IWMDMOperation3_BeginWrite(This)	\
    ( (This)->lpVtbl -> BeginWrite(This) ) 

#define IWMDMOperation3_GetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation3_SetObjectName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> SetObjectName(This,pwszName,nMaxChars) ) 

#define IWMDMOperation3_GetObjectAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetObjectAttributes(This,pdwAttributes,pFormat) ) 

#define IWMDMOperation3_SetObjectAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetObjectAttributes(This,dwAttributes,pFormat) ) 

#define IWMDMOperation3_GetObjectTotalSize(This,pdwSize,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetObjectTotalSize(This,pdwSize,pdwSizeHigh) ) 

#define IWMDMOperation3_SetObjectTotalSize(This,dwSize,dwSizeHigh)	\
    ( (This)->lpVtbl -> SetObjectTotalSize(This,dwSize,dwSizeHigh) ) 

#define IWMDMOperation3_TransferObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> TransferObjectData(This,pData,pdwSize,abMac) ) 

#define IWMDMOperation3_End(This,phCompletionCode,pNewObject)	\
    ( (This)->lpVtbl -> End(This,phCompletionCode,pNewObject) ) 


#define IWMDMOperation3_TransferObjectDataOnClearChannel(This,pData,pdwSize)	\
    ( (This)->lpVtbl -> TransferObjectDataOnClearChannel(This,pData,pdwSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMOperation3_INTERFACE_DEFINED__ */


#ifndef __IWMDMProgress_INTERFACE_DEFINED__
#define __IWMDMProgress_INTERFACE_DEFINED__

/* interface IWMDMProgress */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMProgress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A0C-33ED-11d3-8470-00C04F79DBC0")
    IWMDMProgress : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin( 
            /* [in] */ DWORD dwEstimatedTicks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Progress( 
            /* [in] */ DWORD dwTranspiredTicks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE End( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMProgressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMProgress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMProgress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMProgress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin )( 
            __RPC__in IWMDMProgress * This,
            /* [in] */ DWORD dwEstimatedTicks);
        
        HRESULT ( STDMETHODCALLTYPE *Progress )( 
            __RPC__in IWMDMProgress * This,
            /* [in] */ DWORD dwTranspiredTicks);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMProgress * This);
        
        END_INTERFACE
    } IWMDMProgressVtbl;

    interface IWMDMProgress
    {
        CONST_VTBL struct IWMDMProgressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMProgress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMProgress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMProgress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMProgress_Begin(This,dwEstimatedTicks)	\
    ( (This)->lpVtbl -> Begin(This,dwEstimatedTicks) ) 

#define IWMDMProgress_Progress(This,dwTranspiredTicks)	\
    ( (This)->lpVtbl -> Progress(This,dwTranspiredTicks) ) 

#define IWMDMProgress_End(This)	\
    ( (This)->lpVtbl -> End(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMProgress_INTERFACE_DEFINED__ */


#ifndef __IWMDMProgress2_INTERFACE_DEFINED__
#define __IWMDMProgress2_INTERFACE_DEFINED__

/* interface IWMDMProgress2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMProgress2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3A43F550-B383-4e92-B04A-E6BBC660FEFC")
    IWMDMProgress2 : public IWMDMProgress
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE End2( 
            /* [in] */ HRESULT hrCompletionCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMProgress2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMProgress2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMProgress2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMProgress2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin )( 
            __RPC__in IWMDMProgress2 * This,
            /* [in] */ DWORD dwEstimatedTicks);
        
        HRESULT ( STDMETHODCALLTYPE *Progress )( 
            __RPC__in IWMDMProgress2 * This,
            /* [in] */ DWORD dwTranspiredTicks);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMProgress2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *End2 )( 
            __RPC__in IWMDMProgress2 * This,
            /* [in] */ HRESULT hrCompletionCode);
        
        END_INTERFACE
    } IWMDMProgress2Vtbl;

    interface IWMDMProgress2
    {
        CONST_VTBL struct IWMDMProgress2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMProgress2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMProgress2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMProgress2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMProgress2_Begin(This,dwEstimatedTicks)	\
    ( (This)->lpVtbl -> Begin(This,dwEstimatedTicks) ) 

#define IWMDMProgress2_Progress(This,dwTranspiredTicks)	\
    ( (This)->lpVtbl -> Progress(This,dwTranspiredTicks) ) 

#define IWMDMProgress2_End(This)	\
    ( (This)->lpVtbl -> End(This) ) 


#define IWMDMProgress2_End2(This,hrCompletionCode)	\
    ( (This)->lpVtbl -> End2(This,hrCompletionCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMProgress2_INTERFACE_DEFINED__ */


#ifndef __IWMDMProgress3_INTERFACE_DEFINED__
#define __IWMDMProgress3_INTERFACE_DEFINED__

/* interface IWMDMProgress3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMProgress3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("21DE01CB-3BB4-4929-B21A-17AF3F80F658")
    IWMDMProgress3 : public IWMDMProgress2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin3( 
            /* [in] */ GUID EventId,
            /* [in] */ DWORD dwEstimatedTicks,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Progress3( 
            /* [in] */ GUID EventId,
            /* [in] */ DWORD dwTranspiredTicks,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE End3( 
            /* [in] */ GUID EventId,
            /* [in] */ HRESULT hrCompletionCode,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMProgress3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMProgress3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMProgress3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ DWORD dwEstimatedTicks);
        
        HRESULT ( STDMETHODCALLTYPE *Progress )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ DWORD dwTranspiredTicks);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            __RPC__in IWMDMProgress3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *End2 )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ HRESULT hrCompletionCode);
        
        HRESULT ( STDMETHODCALLTYPE *Begin3 )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ GUID EventId,
            /* [in] */ DWORD dwEstimatedTicks,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext);
        
        HRESULT ( STDMETHODCALLTYPE *Progress3 )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ GUID EventId,
            /* [in] */ DWORD dwTranspiredTicks,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext);
        
        HRESULT ( STDMETHODCALLTYPE *End3 )( 
            __RPC__in IWMDMProgress3 * This,
            /* [in] */ GUID EventId,
            /* [in] */ HRESULT hrCompletionCode,
            /* [unique][out][in] */ __RPC__inout_opt OPAQUECOMMAND *pContext);
        
        END_INTERFACE
    } IWMDMProgress3Vtbl;

    interface IWMDMProgress3
    {
        CONST_VTBL struct IWMDMProgress3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMProgress3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMProgress3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMProgress3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMProgress3_Begin(This,dwEstimatedTicks)	\
    ( (This)->lpVtbl -> Begin(This,dwEstimatedTicks) ) 

#define IWMDMProgress3_Progress(This,dwTranspiredTicks)	\
    ( (This)->lpVtbl -> Progress(This,dwTranspiredTicks) ) 

#define IWMDMProgress3_End(This)	\
    ( (This)->lpVtbl -> End(This) ) 


#define IWMDMProgress3_End2(This,hrCompletionCode)	\
    ( (This)->lpVtbl -> End2(This,hrCompletionCode) ) 


#define IWMDMProgress3_Begin3(This,EventId,dwEstimatedTicks,pContext)	\
    ( (This)->lpVtbl -> Begin3(This,EventId,dwEstimatedTicks,pContext) ) 

#define IWMDMProgress3_Progress3(This,EventId,dwTranspiredTicks,pContext)	\
    ( (This)->lpVtbl -> Progress3(This,EventId,dwTranspiredTicks,pContext) ) 

#define IWMDMProgress3_End3(This,EventId,hrCompletionCode,pContext)	\
    ( (This)->lpVtbl -> End3(This,EventId,hrCompletionCode,pContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMProgress3_INTERFACE_DEFINED__ */


#ifndef __IWMDMDevice_INTERFACE_DEFINED__
#define __IWMDMDevice_INTERFACE_DEFINED__

/* interface IWMDMDevice */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A02-33ED-11d3-8470-00C04F79DBC0")
    IWMDMDevice : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetManufacturer( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVersion( 
            /* [out] */ __RPC__out DWORD *pdwVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ __RPC__out DWORD *pdwType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSerialNumber( 
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPowerSource( 
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDeviceIcon( 
            /* [out] */ __RPC__out ULONG *hIcon) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStorage( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatSupport( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **ppFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOpaqueCommand( 
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMDevice * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IWMDMDevice * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMDevice * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IWMDMDevice * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **ppFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMDevice * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        END_INTERFACE
    } IWMDMDeviceVtbl;

    interface IWMDMDevice
    {
        CONST_VTBL struct IWMDMDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMDevice_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMDevice_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IWMDMDevice_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMDMDevice_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IWMDMDevice_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IWMDMDevice_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IWMDMDevice_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IWMDMDevice_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IWMDMDevice_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IWMDMDevice_GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IWMDMDevice_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMDevice_INTERFACE_DEFINED__ */


#ifndef __IWMDMDevice2_INTERFACE_DEFINED__
#define __IWMDMDevice2_INTERFACE_DEFINED__

/* interface IWMDMDevice2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMDevice2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E34F3D37-9D67-4fc1-9252-62D28B2F8B55")
    IWMDMDevice2 : public IWMDMDevice
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStorage( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatSupport2( 
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSpecifyPropertyPages( 
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCanonicalName( 
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMDevice2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMDevice2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMDevice2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMDevice2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IWMDMDevice2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IWMDMDevice2 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **ppFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMDevice2 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IWMDMDevice2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport2 )( 
            __RPC__in IWMDMDevice2 * This,
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifyPropertyPages )( 
            __RPC__in IWMDMDevice2 * This,
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanonicalName )( 
            __RPC__in IWMDMDevice2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars);
        
        END_INTERFACE
    } IWMDMDevice2Vtbl;

    interface IWMDMDevice2
    {
        CONST_VTBL struct IWMDMDevice2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMDevice2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMDevice2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMDevice2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMDevice2_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMDevice2_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IWMDMDevice2_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMDMDevice2_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IWMDMDevice2_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IWMDMDevice2_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IWMDMDevice2_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IWMDMDevice2_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IWMDMDevice2_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IWMDMDevice2_GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IWMDMDevice2_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IWMDMDevice2_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IWMDMDevice2_GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount) ) 

#define IWMDMDevice2_GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks)	\
    ( (This)->lpVtbl -> GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks) ) 

#define IWMDMDevice2_GetCanonicalName(This,pwszPnPName,nMaxChars)	\
    ( (This)->lpVtbl -> GetCanonicalName(This,pwszPnPName,nMaxChars) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMDevice2_INTERFACE_DEFINED__ */


#ifndef __IWMDMDevice3_INTERFACE_DEFINED__
#define __IWMDMDevice3_INTERFACE_DEFINED__

/* interface IWMDMDevice3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMDevice3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6c03e4fe-05db-4dda-9e3c-06233a6d5d65")
    IWMDMDevice3 : public IWMDMDevice2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [out] */ __RPC__out PROPVARIANT *pValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatCapability( 
            /* [in] */ WMDM_FORMATCODE format,
            /* [out] */ __RPC__out WMDM_FORMAT_CAPABILITY *pFormatSupport) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeviceIoControl( 
            /* [in] */ DWORD dwIoControlCode,
            /* [size_is][in] */ __RPC__in_ecount_full(nInBufferSize) BYTE *lpInBuffer,
            /* [in] */ DWORD nInBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(*pnOutBufferSize) BYTE *lpOutBuffer,
            /* [out][in] */ __RPC__inout LPDWORD pnOutBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindStorage( 
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMDevice3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMDevice3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMDevice3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IWMDMDevice3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IWMDMDevice3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IWMDMDevice3 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **ppFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IWMDMDevice3 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IWMDMDevice3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport2 )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifyPropertyPages )( 
            __RPC__in IWMDMDevice3 * This,
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanonicalName )( 
            __RPC__in IWMDMDevice3 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [out] */ __RPC__out PROPVARIANT *pValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatCapability )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ WMDM_FORMATCODE format,
            /* [out] */ __RPC__out WMDM_FORMAT_CAPABILITY *pFormatSupport);
        
        HRESULT ( STDMETHODCALLTYPE *DeviceIoControl )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ DWORD dwIoControlCode,
            /* [size_is][in] */ __RPC__in_ecount_full(nInBufferSize) BYTE *lpInBuffer,
            /* [in] */ DWORD nInBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(*pnOutBufferSize) BYTE *lpOutBuffer,
            /* [out][in] */ __RPC__inout LPDWORD pnOutBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *FindStorage )( 
            __RPC__in IWMDMDevice3 * This,
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppStorage);
        
        END_INTERFACE
    } IWMDMDevice3Vtbl;

    interface IWMDMDevice3
    {
        CONST_VTBL struct IWMDMDevice3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMDevice3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMDevice3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMDevice3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMDevice3_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IWMDMDevice3_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IWMDMDevice3_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMDMDevice3_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IWMDMDevice3_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IWMDMDevice3_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IWMDMDevice3_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IWMDMDevice3_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IWMDMDevice3_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IWMDMDevice3_GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,ppFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IWMDMDevice3_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IWMDMDevice3_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IWMDMDevice3_GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount) ) 

#define IWMDMDevice3_GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks)	\
    ( (This)->lpVtbl -> GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks) ) 

#define IWMDMDevice3_GetCanonicalName(This,pwszPnPName,nMaxChars)	\
    ( (This)->lpVtbl -> GetCanonicalName(This,pwszPnPName,nMaxChars) ) 


#define IWMDMDevice3_GetProperty(This,pwszPropName,pValue)	\
    ( (This)->lpVtbl -> GetProperty(This,pwszPropName,pValue) ) 

#define IWMDMDevice3_SetProperty(This,pwszPropName,pValue)	\
    ( (This)->lpVtbl -> SetProperty(This,pwszPropName,pValue) ) 

#define IWMDMDevice3_GetFormatCapability(This,format,pFormatSupport)	\
    ( (This)->lpVtbl -> GetFormatCapability(This,format,pFormatSupport) ) 

#define IWMDMDevice3_DeviceIoControl(This,dwIoControlCode,lpInBuffer,nInBufferSize,lpOutBuffer,pnOutBufferSize)	\
    ( (This)->lpVtbl -> DeviceIoControl(This,dwIoControlCode,lpInBuffer,nInBufferSize,lpOutBuffer,pnOutBufferSize) ) 

#define IWMDMDevice3_FindStorage(This,findScope,pwszUniqueID,ppStorage)	\
    ( (This)->lpVtbl -> FindStorage(This,findScope,pwszUniqueID,ppStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMDevice3_INTERFACE_DEFINED__ */


#ifndef __IWMDMDeviceSession_INTERFACE_DEFINED__
#define __IWMDMDeviceSession_INTERFACE_DEFINED__

/* interface IWMDMDeviceSession */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMDeviceSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82af0a65-9d96-412c-83e5-3c43e4b06cc7")
    IWMDMDeviceSession : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginSession( 
            /* [in] */ WMDM_SESSION_TYPE type,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndSession( 
            /* [in] */ WMDM_SESSION_TYPE type,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMDeviceSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMDeviceSession * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMDeviceSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMDeviceSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginSession )( 
            __RPC__in IWMDMDeviceSession * This,
            /* [in] */ WMDM_SESSION_TYPE type,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx);
        
        HRESULT ( STDMETHODCALLTYPE *EndSession )( 
            __RPC__in IWMDMDeviceSession * This,
            /* [in] */ WMDM_SESSION_TYPE type,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx);
        
        END_INTERFACE
    } IWMDMDeviceSessionVtbl;

    interface IWMDMDeviceSession
    {
        CONST_VTBL struct IWMDMDeviceSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMDeviceSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMDeviceSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMDeviceSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMDeviceSession_BeginSession(This,type,pCtx,dwSizeCtx)	\
    ( (This)->lpVtbl -> BeginSession(This,type,pCtx,dwSizeCtx) ) 

#define IWMDMDeviceSession_EndSession(This,type,pCtx,dwSizeCtx)	\
    ( (This)->lpVtbl -> EndSession(This,type,pCtx,dwSizeCtx) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMDeviceSession_INTERFACE_DEFINED__ */


#ifndef __IWMDMEnumDevice_INTERFACE_DEFINED__
#define __IWMDMEnumDevice_INTERFACE_DEFINED__

/* interface IWMDMEnumDevice */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMEnumDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A01-33ED-11d3-8470-00C04F79DBC0")
    IWMDMEnumDevice : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IWMDMDevice **ppDevice,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMEnumDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMEnumDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMEnumDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMEnumDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IWMDMEnumDevice * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IWMDMDevice **ppDevice,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IWMDMEnumDevice * This,
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IWMDMEnumDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IWMDMEnumDevice * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumDevice **ppEnumDevice);
        
        END_INTERFACE
    } IWMDMEnumDeviceVtbl;

    interface IWMDMEnumDevice
    {
        CONST_VTBL struct IWMDMEnumDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMEnumDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMEnumDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMEnumDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMEnumDevice_Next(This,celt,ppDevice,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,ppDevice,pceltFetched) ) 

#define IWMDMEnumDevice_Skip(This,celt,pceltFetched)	\
    ( (This)->lpVtbl -> Skip(This,celt,pceltFetched) ) 

#define IWMDMEnumDevice_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMDMEnumDevice_Clone(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> Clone(This,ppEnumDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMEnumDevice_INTERFACE_DEFINED__ */


#ifndef __IWMDMDeviceControl_INTERFACE_DEFINED__
#define __IWMDMDeviceControl_INTERFACE_DEFINED__

/* interface IWMDMDeviceControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMDeviceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A04-33ED-11d3-8470-00C04F79DBC0")
    IWMDMDeviceControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ __RPC__out DWORD *pdwCapabilitiesMask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Play( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Record( 
            /* [in] */ __RPC__in _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ UINT fuMode,
            /* [in] */ int nOffset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMDeviceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMDeviceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMDeviceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IWMDMDeviceControl * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetCapabilities )( 
            __RPC__in IWMDMDeviceControl * This,
            /* [out] */ __RPC__out DWORD *pdwCapabilitiesMask);
        
        HRESULT ( STDMETHODCALLTYPE *Play )( 
            __RPC__in IWMDMDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Record )( 
            __RPC__in IWMDMDeviceControl * This,
            /* [in] */ __RPC__in _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IWMDMDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in IWMDMDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            __RPC__in IWMDMDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            __RPC__in IWMDMDeviceControl * This,
            /* [in] */ UINT fuMode,
            /* [in] */ int nOffset);
        
        END_INTERFACE
    } IWMDMDeviceControlVtbl;

    interface IWMDMDeviceControl
    {
        CONST_VTBL struct IWMDMDeviceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMDeviceControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMDeviceControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMDeviceControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMDeviceControl_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IWMDMDeviceControl_GetCapabilities(This,pdwCapabilitiesMask)	\
    ( (This)->lpVtbl -> GetCapabilities(This,pdwCapabilitiesMask) ) 

#define IWMDMDeviceControl_Play(This)	\
    ( (This)->lpVtbl -> Play(This) ) 

#define IWMDMDeviceControl_Record(This,pFormat)	\
    ( (This)->lpVtbl -> Record(This,pFormat) ) 

#define IWMDMDeviceControl_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IWMDMDeviceControl_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IWMDMDeviceControl_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWMDMDeviceControl_Seek(This,fuMode,nOffset)	\
    ( (This)->lpVtbl -> Seek(This,fuMode,nOffset) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMDeviceControl_INTERFACE_DEFINED__ */


#ifndef __IWMDMEnumStorage_INTERFACE_DEFINED__
#define __IWMDMEnumStorage_INTERFACE_DEFINED__

/* interface IWMDMEnumStorage */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMEnumStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A05-33ED-11d3-8470-00C04F79DBC0")
    IWMDMEnumStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IWMDMStorage **ppStorage,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMEnumStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMEnumStorage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMEnumStorage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMEnumStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IWMDMEnumStorage * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IWMDMStorage **ppStorage,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IWMDMEnumStorage * This,
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IWMDMEnumStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IWMDMEnumStorage * This,
            /* [out] */ __RPC__deref_out_opt IWMDMEnumStorage **ppEnumStorage);
        
        END_INTERFACE
    } IWMDMEnumStorageVtbl;

    interface IWMDMEnumStorage
    {
        CONST_VTBL struct IWMDMEnumStorageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMEnumStorage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMEnumStorage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMEnumStorage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMEnumStorage_Next(This,celt,ppStorage,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,ppStorage,pceltFetched) ) 

#define IWMDMEnumStorage_Skip(This,celt,pceltFetched)	\
    ( (This)->lpVtbl -> Skip(This,celt,pceltFetched) ) 

#define IWMDMEnumStorage_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMDMEnumStorage_Clone(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> Clone(This,ppEnumStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMEnumStorage_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorageControl_INTERFACE_DEFINED__
#define __IWMDMStorageControl_INTERFACE_DEFINED__

/* interface IWMDMStorageControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorageControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A08-33ED-11d3-8470-00C04F79DBC0")
    IWMDMStorageControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppNewObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rename( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IWMDMOperation *pOperation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMStorage *pTargetObject,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorageControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorageControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorageControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Insert )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Rename )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IWMDMOperation *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in IWMDMStorageControl * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMStorage *pTargetObject,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        END_INTERFACE
    } IWMDMStorageControlVtbl;

    interface IWMDMStorageControl
    {
        CONST_VTBL struct IWMDMStorageControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorageControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorageControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorageControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorageControl_Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject)	\
    ( (This)->lpVtbl -> Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject) ) 

#define IWMDMStorageControl_Delete(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Delete(This,fuMode,pProgress) ) 

#define IWMDMStorageControl_Rename(This,fuMode,pwszNewName,pProgress)	\
    ( (This)->lpVtbl -> Rename(This,fuMode,pwszNewName,pProgress) ) 

#define IWMDMStorageControl_Read(This,fuMode,pwszFile,pProgress,pOperation)	\
    ( (This)->lpVtbl -> Read(This,fuMode,pwszFile,pProgress,pOperation) ) 

#define IWMDMStorageControl_Move(This,fuMode,pTargetObject,pProgress)	\
    ( (This)->lpVtbl -> Move(This,fuMode,pTargetObject,pProgress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorageControl_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorageControl2_INTERFACE_DEFINED__
#define __IWMDMStorageControl2_INTERFACE_DEFINED__

/* interface IWMDMStorageControl2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorageControl2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("972C2E88-BD6C-4125-8E09-84F837E637B6")
    IWMDMStorageControl2 : public IWMDMStorageControl
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Insert2( 
            /* [in] */ UINT fuMode,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileSource,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileDest,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt IWMDMStorage **ppNewObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorageControl2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorageControl2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorageControl2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Insert )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Rename )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IWMDMOperation *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMStorage *pTargetObject,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Insert2 )( 
            __RPC__in IWMDMStorageControl2 * This,
            /* [in] */ UINT fuMode,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileSource,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileDest,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt IWMDMStorage **ppNewObject);
        
        END_INTERFACE
    } IWMDMStorageControl2Vtbl;

    interface IWMDMStorageControl2
    {
        CONST_VTBL struct IWMDMStorageControl2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorageControl2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorageControl2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorageControl2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorageControl2_Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject)	\
    ( (This)->lpVtbl -> Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject) ) 

#define IWMDMStorageControl2_Delete(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Delete(This,fuMode,pProgress) ) 

#define IWMDMStorageControl2_Rename(This,fuMode,pwszNewName,pProgress)	\
    ( (This)->lpVtbl -> Rename(This,fuMode,pwszNewName,pProgress) ) 

#define IWMDMStorageControl2_Read(This,fuMode,pwszFile,pProgress,pOperation)	\
    ( (This)->lpVtbl -> Read(This,fuMode,pwszFile,pProgress,pOperation) ) 

#define IWMDMStorageControl2_Move(This,fuMode,pTargetObject,pProgress)	\
    ( (This)->lpVtbl -> Move(This,fuMode,pTargetObject,pProgress) ) 


#define IWMDMStorageControl2_Insert2(This,fuMode,pwszFileSource,pwszFileDest,pOperation,pProgress,pUnknown,ppNewObject)	\
    ( (This)->lpVtbl -> Insert2(This,fuMode,pwszFileSource,pwszFileDest,pOperation,pProgress,pUnknown,ppNewObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorageControl2_INTERFACE_DEFINED__ */


#ifndef __IWMDMStorageControl3_INTERFACE_DEFINED__
#define __IWMDMStorageControl3_INTERFACE_DEFINED__

/* interface IWMDMStorageControl3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMStorageControl3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3266365-D4F3-4696-8D53-BD27EC60993A")
    IWMDMStorageControl3 : public IWMDMStorageControl2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Insert3( 
            /* [in] */ UINT fuMode,
            /* [in] */ UINT fuType,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileSource,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileDest,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [unique][in] */ __RPC__in_opt IWMDMMetaData *pMetaData,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt IWMDMStorage **ppNewObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMStorageControl3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMStorageControl3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMStorageControl3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Insert )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [out] */ __RPC__deref_out_opt IWMDMStorage **ppNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Rename )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [unique][in] */ __RPC__in_opt LPWSTR pwszFile,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IWMDMOperation *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMStorage *pTargetObject,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Insert2 )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileSource,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileDest,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt IWMDMStorage **ppNewObject);
        
        HRESULT ( STDMETHODCALLTYPE *Insert3 )( 
            __RPC__in IWMDMStorageControl3 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ UINT fuType,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileSource,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszFileDest,
            /* [unique][in] */ __RPC__in_opt IWMDMOperation *pOperation,
            /* [unique][in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [unique][in] */ __RPC__in_opt IWMDMMetaData *pMetaData,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt IWMDMStorage **ppNewObject);
        
        END_INTERFACE
    } IWMDMStorageControl3Vtbl;

    interface IWMDMStorageControl3
    {
        CONST_VTBL struct IWMDMStorageControl3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMStorageControl3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMStorageControl3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMStorageControl3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMStorageControl3_Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject)	\
    ( (This)->lpVtbl -> Insert(This,fuMode,pwszFile,pOperation,pProgress,ppNewObject) ) 

#define IWMDMStorageControl3_Delete(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Delete(This,fuMode,pProgress) ) 

#define IWMDMStorageControl3_Rename(This,fuMode,pwszNewName,pProgress)	\
    ( (This)->lpVtbl -> Rename(This,fuMode,pwszNewName,pProgress) ) 

#define IWMDMStorageControl3_Read(This,fuMode,pwszFile,pProgress,pOperation)	\
    ( (This)->lpVtbl -> Read(This,fuMode,pwszFile,pProgress,pOperation) ) 

#define IWMDMStorageControl3_Move(This,fuMode,pTargetObject,pProgress)	\
    ( (This)->lpVtbl -> Move(This,fuMode,pTargetObject,pProgress) ) 


#define IWMDMStorageControl3_Insert2(This,fuMode,pwszFileSource,pwszFileDest,pOperation,pProgress,pUnknown,ppNewObject)	\
    ( (This)->lpVtbl -> Insert2(This,fuMode,pwszFileSource,pwszFileDest,pOperation,pProgress,pUnknown,ppNewObject) ) 


#define IWMDMStorageControl3_Insert3(This,fuMode,fuType,pwszFileSource,pwszFileDest,pOperation,pProgress,pMetaData,pUnknown,ppNewObject)	\
    ( (This)->lpVtbl -> Insert3(This,fuMode,fuType,pwszFileSource,pwszFileDest,pOperation,pProgress,pMetaData,pUnknown,ppNewObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMStorageControl3_INTERFACE_DEFINED__ */


#ifndef __IWMDMObjectInfo_INTERFACE_DEFINED__
#define __IWMDMObjectInfo_INTERFACE_DEFINED__

/* interface IWMDMObjectInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMObjectInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A09-33ED-11d3-8470-00C04F79DBC0")
    IWMDMObjectInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPlayLength( 
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayLength( 
            /* [in] */ DWORD dwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPlayOffset( 
            /* [out] */ __RPC__out DWORD *pdwOffset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayOffset( 
            /* [in] */ DWORD dwOffset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalLength( 
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastPlayPosition( 
            /* [out] */ __RPC__out DWORD *pdwLastPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLongestPlayPosition( 
            /* [out] */ __RPC__out DWORD *pdwLongestPos) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMObjectInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMObjectInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMObjectInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayLength )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayLength )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayOffset )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayOffset )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [in] */ DWORD dwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalLength )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastPlayPosition )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLastPos);
        
        HRESULT ( STDMETHODCALLTYPE *GetLongestPlayPosition )( 
            __RPC__in IWMDMObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLongestPos);
        
        END_INTERFACE
    } IWMDMObjectInfoVtbl;

    interface IWMDMObjectInfo
    {
        CONST_VTBL struct IWMDMObjectInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMObjectInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMObjectInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMObjectInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMObjectInfo_GetPlayLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetPlayLength(This,pdwLength) ) 

#define IWMDMObjectInfo_SetPlayLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetPlayLength(This,dwLength) ) 

#define IWMDMObjectInfo_GetPlayOffset(This,pdwOffset)	\
    ( (This)->lpVtbl -> GetPlayOffset(This,pdwOffset) ) 

#define IWMDMObjectInfo_SetPlayOffset(This,dwOffset)	\
    ( (This)->lpVtbl -> SetPlayOffset(This,dwOffset) ) 

#define IWMDMObjectInfo_GetTotalLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetTotalLength(This,pdwLength) ) 

#define IWMDMObjectInfo_GetLastPlayPosition(This,pdwLastPos)	\
    ( (This)->lpVtbl -> GetLastPlayPosition(This,pdwLastPos) ) 

#define IWMDMObjectInfo_GetLongestPlayPosition(This,pdwLongestPos)	\
    ( (This)->lpVtbl -> GetLongestPlayPosition(This,pdwLongestPos) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMObjectInfo_INTERFACE_DEFINED__ */


#ifndef __IWMDMRevoked_INTERFACE_DEFINED__
#define __IWMDMRevoked_INTERFACE_DEFINED__

/* interface IWMDMRevoked */
/* [ref][uuid][object] */ 


EXTERN_C const IID IID_IWMDMRevoked;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EBECCEDB-88EE-4e55-B6A4-8D9F07D696AA")
    IWMDMRevoked : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRevocationURL( 
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwBufferLen) LPWSTR *ppwszRevocationURL,
            /* [out][in] */ __RPC__inout DWORD *pdwBufferLen,
            /* [out] */ __RPC__out DWORD *pdwRevokedBitFlag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMRevokedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMRevoked * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMRevoked * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMRevoked * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevocationURL )( 
            __RPC__in IWMDMRevoked * This,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwBufferLen) LPWSTR *ppwszRevocationURL,
            /* [out][in] */ __RPC__inout DWORD *pdwBufferLen,
            /* [out] */ __RPC__out DWORD *pdwRevokedBitFlag);
        
        END_INTERFACE
    } IWMDMRevokedVtbl;

    interface IWMDMRevoked
    {
        CONST_VTBL struct IWMDMRevokedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMRevoked_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMRevoked_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMRevoked_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMRevoked_GetRevocationURL(This,ppwszRevocationURL,pdwBufferLen,pdwRevokedBitFlag)	\
    ( (This)->lpVtbl -> GetRevocationURL(This,ppwszRevocationURL,pdwBufferLen,pdwRevokedBitFlag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMRevoked_INTERFACE_DEFINED__ */


#ifndef __IWMDMNotification_INTERFACE_DEFINED__
#define __IWMDMNotification_INTERFACE_DEFINED__

/* interface IWMDMNotification */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMNotification;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3F5E95C0-0F43-4ed4-93D2-C89A45D59B81")
    IWMDMNotification : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WMDMMessage( 
            /* [in] */ DWORD dwMessageType,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszCanonicalName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMNotificationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWMDMNotification * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWMDMNotification * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWMDMNotification * This);
        
        HRESULT ( STDMETHODCALLTYPE *WMDMMessage )( 
            __RPC__in IWMDMNotification * This,
            /* [in] */ DWORD dwMessageType,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszCanonicalName);
        
        END_INTERFACE
    } IWMDMNotificationVtbl;

    interface IWMDMNotification
    {
        CONST_VTBL struct IWMDMNotificationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMNotification_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMNotification_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMNotification_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMNotification_WMDMMessage(This,dwMessageType,pwszCanonicalName)	\
    ( (This)->lpVtbl -> WMDMMessage(This,dwMessageType,pwszCanonicalName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMNotification_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mswmdm_0000_0028 */
/* [local] */ 

// WMDM constants for wellknown meta-data tags
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMFileName = L"WMDM/FileName";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMFormatCode = L"WMDM/FormatCode";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMLastModifiedDate = L"WMDM/LastModifiedDate";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMFileCreationDate = L"WMDM/FileCreationDate";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMFileSize = L"WMDM/FileSize";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMFileAttributes = L"WMDM/FileAttributes";
//Format code: WAVE Format
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszAudioWAVECodec = L"WMDM/AudioWAVECodec";
//Format code: FOURCC code 
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszVideoFourCCCodec = L"WMDM/VideoFourCCCodec";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMTitle = L"WMDM/Title";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMAuthor = L"WMDM/Author";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMDescription = L"WMDM/Description";
//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
static const WCHAR *g_wszWMDMIsProtected = L"WMDM/IsProtected";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMAlbumTitle = L"WMDM/AlbumTitle";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMAlbumArtist = L"WMDM/AlbumArtist";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMTrack = L"WMDM/Track";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMGenre = L"WMDM/Genre";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMTrackMood = L"WMDM/TrackMood";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAlbumCoverFormat = L"WMDM/AlbumCoverFormat";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAlbumCoverSize = L"WMDM/AlbumCoverSize";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAlbumCoverHeight = L"WMDM/AlbumCoverHeight";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAlbumCoverWidth = L"WMDM/AlbumCoverWidth";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAlbumCoverDuration = L"WMDM/AlbumCoverDuration";
//Type: BYTE*, WMDM_TAG_DATATYPE: WMDM_TYPE_BINARY
static const WCHAR *g_wszWMDMAlbumCoverData = L"WMDM/AlbumCoverData";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMYear = L"WMDM/Year";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMComposer = L"WMDM/Composer";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMCodec = L"WMDM/Codec";
static const WCHAR *g_wszWMDMDRMId = L"WMDM/DRMId";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMBitrate = L"WMDM/Bitrate";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMBitRateType = L"WMDM/BitRateType";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMSampleRate = L"WMDM/SampleRate";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMNumChannels = L"WMDM/NumChannels";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMBlockAlignment = L"WMDM/BlockAlignment";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMAudioBitDepth = L"WMDM/AudioBitDepth";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMTotalBitrate = L"WMDM/TotalBitrate";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMVideoBitrate = L"WMDM/VideoBitrate";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMFrameRate = L"WMDM/FrameRate";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMScanType = L"WMDM/ScanType";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMKeyFrameDistance = L"WMDM/KeyFrameDistance";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMBufferSize = L"WMDM/BufferSize";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMQualitySetting = L"WMDM/QualitySetting";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMEncodingProfile = L"WMDM/EncodingProfile";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMDuration = L"WMDM/Duration";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMAlbumArt = L"WMDM/AlbumArt";
//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
static const WCHAR *g_wszWMDMBuyNow = L"WMDM/BuyNow";
//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
static const WCHAR *g_wszWMDMNonConsumable = L"WMDM/NonConsumable";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMediaClassPrimaryID = L"WMDM/MediaClassPrimaryID";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMediaClassSecondaryID = L"WMDM/MediaClassSecondaryID";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMUserEffectiveRating = L"WMDM/UserEffectiveRating";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMUserRating = L"WMDM/UserRating";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMUserRatingOnDevice = L"WMDM/UserRatingOnDevice";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMPlayCount = L"WMDM/PlayCount";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMDevicePlayCount = L"WMDM/DevicePlayCount";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMAuthorDate = L"WMDM/AuthorDate";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMUserLastPlayTime = L"WMDM/UserLastPlayTime";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMSubTitle = L"WMDM/SubTitle";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMSubTitleDescription = L"WMDM/SubTitleDescription";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMediaCredits = L"WMDM/MediaCredits";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMediaStationName = L"WMDM/MediaStationName";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMediaOriginalChannel = L"WMDM/MediaOriginalChannel";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMMediaOriginalBroadcastDateTime = L"WMDM/MediaOriginalBroadcastDateTime";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMProviderCopyright = L"WMDM/ProviderCopyright";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMSyncID = L"WMDM/SyncID";
//Type: GUID, WMDM_TAG_DATATYPE: WMDM_TYPE_GUID
static const WCHAR *g_wszWMDMPersistentUniqueID = L"WMDM/PersistentUniqueID";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMWidth = L"WMDM/Width";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMHeight = L"WMDM/Height";
//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
static const WCHAR *g_wszWMDMSyncTime = L"WMDM/SyncTime";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMParentalRating = L"WMDM/ParentalRating";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMetaGenre = L"WMDM/MetaGenre";
//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
static const WCHAR *g_wszWMDMIsRepeat = L"WMDM/IsRepeat";
// Device properties
//PROPVARIANT vt = VT_BSTR | VT_ARRAY
static const WCHAR *g_wszWMDMSupportedDeviceProperties = L"WMDM/SupportedDeviceProperties";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMDeviceFriendlyName = L"WMDM/DeviceFriendlyName";
//PROPVARIANT vt = VT_UI4 | VT_ARRAY
static const WCHAR *g_wszWMDMFormatsSupported = L"WMDM/FormatsSupported";
//PROPVARIANT vt = VT_BOOL
static const WCHAR *g_wszWMDMFormatsSupportedAreOrdered = L"WMDM/FormatsSupportedAreOrdered";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMSyncRelationshipID = L"WMDM/SyncRelationshipID";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMDeviceModelName = L"WMDM/DeviceModelName";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMDeviceFirmwareVersion = L"WMDM/DeviceFirmwareVersion";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMDeviceVendorExtension = L"WMDM/DeviceVendorExtension";
//PROPVARIANT vt = VT_CLSID
static const WCHAR *g_wszWMDMDeviceProtocol = L"WMDM/DeviceProtocol";
//PROPVARIANT vt = VT_CLSID
static const WCHAR *g_wszWMDMDeviceServiceProviderVendor = L"WMDM/DeviceServiceProviderVendor";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMDeviceRevocationInfo = L"WMDM/DeviceRevocationInfo";
//PROPVARIANT vt = VT_BSTR
static const WCHAR *g_wszWMDMCollectionID = L"WMDM/CollectionID";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMOwner = L"WMDM/Owner";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMEditor = L"WMDM/Editor";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMWebmaster = L"WMDM/Webmaster";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMSourceURL = L"WMDM/SourceURL";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMDestinationURL = L"WMDM/DestinationURL";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMCategory = L"WMDM/Category";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMTimeBookmark = L"WMDM/TimeBookmark";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMObjectBookmark = L"WMDM/ObjectBookmark";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMByteBookmark = L"WMDM/ByteBookmark";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMDataOffset = L"WMDM/DataOffset";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMDataLength = L"WMDM/DataLength";
//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
static const WCHAR *g_wszWMDMDataUnits = L"WMDM/DataUnits";
//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
static const WCHAR *g_wszWMDMTimeToLive = L"WMDM/TimeToLive";
//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
static const WCHAR *g_wszWMDMMediaGuid = L"WMDM/MediaGuid";
//Type: BYTE*, WMDM_TAG_DATATYPE: WMDM_TYPE_BINARY
static const WCHAR *g_wszWPDPassthroughPropertyValues = L"WPD/PassthroughPropertyValues";
#define CCH_WMDM_PROPNAME(sz) (sizeof(sz)/sizeof(sz[0]))
union WMDMDetermineMaxPropStringLen {
WCHAR sz001[CCH_WMDM_PROPNAME(L"WMDM/DeviceFirmwareVersion")];
WCHAR sz002[CCH_WMDM_PROPNAME(L"WMDM/SupportedDeviceProperties")];
WCHAR sz003[CCH_WMDM_PROPNAME(L"WMDM/FileName")];
WCHAR sz004[CCH_WMDM_PROPNAME(L"WMDM/FormatCode")];
WCHAR sz005[CCH_WMDM_PROPNAME(L"WMDM/LastModifiedDate")];
WCHAR sz006[CCH_WMDM_PROPNAME(L"WMDM/FileSize")];
WCHAR sz007[CCH_WMDM_PROPNAME(L"WMDM/FileAttributes")];
WCHAR sz008[CCH_WMDM_PROPNAME(L"WMDM/AudioWAVECodec")];
WCHAR sz009[CCH_WMDM_PROPNAME(L"WMDM/VideoFourCCCodec")];
WCHAR sz010[CCH_WMDM_PROPNAME(L"WMDM/Title")];
WCHAR sz011[CCH_WMDM_PROPNAME(L"WMDM/Author")];
WCHAR sz012[CCH_WMDM_PROPNAME(L"WMDM/Description")];
WCHAR sz013[CCH_WMDM_PROPNAME(L"WMDM/IsProtected")];
WCHAR sz014[CCH_WMDM_PROPNAME(L"WMDM/AlbumTitle")];
WCHAR sz015[CCH_WMDM_PROPNAME(L"WMDM/AlbumArtist")];
WCHAR sz016[CCH_WMDM_PROPNAME(L"WMDM/Track")];
WCHAR sz017[CCH_WMDM_PROPNAME(L"WMDM/Genre")];
WCHAR sz018[CCH_WMDM_PROPNAME(L"WMDM/TrackMood")];
WCHAR sz019[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverFormat")];
WCHAR sz020[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverSize")];
WCHAR sz021[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverHeight")];
WCHAR sz022[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverWidth")];
WCHAR sz023[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverDuration")];
WCHAR sz024[CCH_WMDM_PROPNAME(L"WMDM/AlbumCoverData")];
WCHAR sz025[CCH_WMDM_PROPNAME(L"WMDM/Year")];
WCHAR sz026[CCH_WMDM_PROPNAME(L"WMDM/Composer")];
WCHAR sz027[CCH_WMDM_PROPNAME(L"WMDM/Codec")];
WCHAR sz028[CCH_WMDM_PROPNAME(L"WMDM/DRMId")];
WCHAR sz029[CCH_WMDM_PROPNAME(L"WMDM/Bitrate")];
WCHAR sz030[CCH_WMDM_PROPNAME(L"WMDM/BitRateType")];
WCHAR sz031[CCH_WMDM_PROPNAME(L"WMDM/SampleRate")];
WCHAR sz032[CCH_WMDM_PROPNAME(L"WMDM/NumChannels")];
WCHAR sz033[CCH_WMDM_PROPNAME(L"WMDM/BlockAlignment")];
WCHAR sz034[CCH_WMDM_PROPNAME(L"WMDM/AudioBitDepth")];
WCHAR sz035[CCH_WMDM_PROPNAME(L"WMDM/TotalBitrate")];
WCHAR sz036[CCH_WMDM_PROPNAME(L"WMDM/VideoBitrate")];
WCHAR sz037[CCH_WMDM_PROPNAME(L"WMDM/FrameRate")];
WCHAR sz041[CCH_WMDM_PROPNAME(L"WMDM/ScanType")];
WCHAR sz043[CCH_WMDM_PROPNAME(L"WMDM/KeyFrameDistance")];
WCHAR sz044[CCH_WMDM_PROPNAME(L"WMDM/BufferSize")];
WCHAR sz045[CCH_WMDM_PROPNAME(L"WMDM/QualitySetting")];
WCHAR sz046[CCH_WMDM_PROPNAME(L"WMDM/Duration")];
WCHAR sz047[CCH_WMDM_PROPNAME(L"WMDM/AlbumArt")];
WCHAR sz048[CCH_WMDM_PROPNAME(L"WMDM/BuyNow")];
WCHAR sz049[CCH_WMDM_PROPNAME(L"WMDM/MediaClassPrimaryID")];
WCHAR sz050[CCH_WMDM_PROPNAME(L"WMDM/MediaClassSecondayID")];
WCHAR sz051[CCH_WMDM_PROPNAME(L"WMDM/UserEffectiveRating")];
WCHAR sz052[CCH_WMDM_PROPNAME(L"WMDM/UserRating")];
WCHAR sz053[CCH_WMDM_PROPNAME(L"WMDM/UserRatingOnDevice")];
WCHAR sz054[CCH_WMDM_PROPNAME(L"WMDM/PlayCount")];
WCHAR sz055[CCH_WMDM_PROPNAME(L"WMDM/DevicePlayCount")];
WCHAR sz056[CCH_WMDM_PROPNAME(L"WMDM/AuthorDate")];
WCHAR sz057[CCH_WMDM_PROPNAME(L"WMDM/UserLastPlayTime")];
WCHAR sz058[CCH_WMDM_PROPNAME(L"WMDM/SubTitle")];
WCHAR sz059[CCH_WMDM_PROPNAME(L"WMDM/SubTitleDescription")];
WCHAR sz060[CCH_WMDM_PROPNAME(L"WMDM/MediaCredits")];
WCHAR sz061[CCH_WMDM_PROPNAME(L"WMDM/MediaStationName")];
WCHAR sz062[CCH_WMDM_PROPNAME(L"WMDM/MediaOriginalChannel")];
WCHAR sz063[CCH_WMDM_PROPNAME(L"WMDM/MediaOriginalBroadcastDateTime")];
WCHAR sz064[CCH_WMDM_PROPNAME(L"WMDM/ProviderCopyright")];
WCHAR sz065[CCH_WMDM_PROPNAME(L"WMDM/SyncID")];
WCHAR sz066[CCH_WMDM_PROPNAME(L"WMDM/PersistentUniqueID")];
WCHAR sz067[CCH_WMDM_PROPNAME(L"WMDM/Width")];
WCHAR sz068[CCH_WMDM_PROPNAME(L"WMDM/Height")];
WCHAR sz069[CCH_WMDM_PROPNAME(L"WMDM/SyncTime")];
WCHAR sz070[CCH_WMDM_PROPNAME(L"WMDM/ParentalRating")];
WCHAR sz071[CCH_WMDM_PROPNAME(L"WMDM/MetaGenre")];
WCHAR sz072[CCH_WMDM_PROPNAME(L"WMDM/IsRepeat")];
WCHAR sz073[CCH_WMDM_PROPNAME(L"WMDM/SupportedDeviceProperties")];
WCHAR sz074[CCH_WMDM_PROPNAME(L"WMDM/DeviceFriendlyName")];
WCHAR sz075[CCH_WMDM_PROPNAME(L"WMDM/FormatsSupported")];
WCHAR sz076[CCH_WMDM_PROPNAME(L"WMDM/SyncRelationshipID")];
WCHAR sz077[CCH_WMDM_PROPNAME(L"WMDM/DeviceModelName")];
WCHAR sz078[CCH_WMDM_PROPNAME(L"WMDM/DeviceFirmwareVersion")];
WCHAR sz079[CCH_WMDM_PROPNAME(L"WMDM/DeviceVendorExtension")];
WCHAR sz080[CCH_WMDM_PROPNAME(L"WMDM/DeviceProtocol")];
WCHAR sz081[CCH_WMDM_PROPNAME(L"WMDM/DeviceServiceProviderVendor")];
WCHAR sz082[CCH_WMDM_PROPNAME(L"WMDM/EncodingProfile")];
WCHAR sz083[CCH_WMDM_PROPNAME(L"WMDM/FormatsSupportedAreOrdered")];
WCHAR sz084[CCH_WMDM_PROPNAME(L"WMDM/DeviceRevocationInfo")];
WCHAR sz085[CCH_WMDM_PROPNAME(L"WMDM/CollectionID")];
WCHAR sz086[CCH_WMDM_PROPNAME(L"WPD/PassthroughPropertyValues")];
};
#define WMDM_MAXLEN_PROPERTYNAME (sizeof(WMDMDetermineMaxPropStringLen)/sizeof(WCHAR))
// Open Mode Flags
#define MDSP_READ                               0x00000001
#define MDSP_WRITE                              0x00000002
// Seek Flags
#define MDSP_SEEK_BOF                           0x00000001
#define MDSP_SEEK_CUR                           0x00000002
#define MDSP_SEEK_EOF                           0x00000004











extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0028_v0_0_s_ifspec;

#ifndef __IMDServiceProvider_INTERFACE_DEFINED__
#define __IMDServiceProvider_INTERFACE_DEFINED__

/* interface IMDServiceProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDServiceProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A10-33ED-11d3-8470-00C04F79DBC0")
    IMDServiceProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDeviceCount( 
            /* [out] */ __RPC__out DWORD *pdwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDevices( 
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDServiceProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDServiceProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDServiceProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDServiceProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IMDServiceProvider * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IMDServiceProvider * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice);
        
        END_INTERFACE
    } IMDServiceProviderVtbl;

    interface IMDServiceProvider
    {
        CONST_VTBL struct IMDServiceProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDServiceProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDServiceProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDServiceProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDServiceProvider_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IMDServiceProvider_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDServiceProvider_INTERFACE_DEFINED__ */


#ifndef __IMDServiceProvider2_INTERFACE_DEFINED__
#define __IMDServiceProvider2_INTERFACE_DEFINED__

/* interface IMDServiceProvider2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDServiceProvider2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B2FA24B7-CDA3-4694-9862-413AE1A34819")
    IMDServiceProvider2 : public IMDServiceProvider
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateDevice( 
            /* [string][in] */ __RPC__in_string LPCWSTR pwszDevicePath,
            /* [out] */ __RPC__out DWORD *pdwCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwCount) IMDSPDevice ***pppDeviceArray) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDServiceProvider2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDServiceProvider2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDServiceProvider2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDServiceProvider2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IMDServiceProvider2 * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IMDServiceProvider2 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDevice )( 
            __RPC__in IMDServiceProvider2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszDevicePath,
            /* [out] */ __RPC__out DWORD *pdwCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwCount) IMDSPDevice ***pppDeviceArray);
        
        END_INTERFACE
    } IMDServiceProvider2Vtbl;

    interface IMDServiceProvider2
    {
        CONST_VTBL struct IMDServiceProvider2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDServiceProvider2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDServiceProvider2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDServiceProvider2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDServiceProvider2_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IMDServiceProvider2_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 


#define IMDServiceProvider2_CreateDevice(This,pwszDevicePath,pdwCount,pppDeviceArray)	\
    ( (This)->lpVtbl -> CreateDevice(This,pwszDevicePath,pdwCount,pppDeviceArray) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDServiceProvider2_INTERFACE_DEFINED__ */


#ifndef __IMDServiceProvider3_INTERFACE_DEFINED__
#define __IMDServiceProvider3_INTERFACE_DEFINED__

/* interface IMDServiceProvider3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDServiceProvider3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ed13ef3-a971-4d19-9f51-0e1826b2da57")
    IMDServiceProvider3 : public IMDServiceProvider2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetDeviceEnumPreference( 
            /* [in] */ DWORD dwEnumPref) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDServiceProvider3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDServiceProvider3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDServiceProvider3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDServiceProvider3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCount )( 
            __RPC__in IMDServiceProvider3 * This,
            /* [out] */ __RPC__out DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDevices )( 
            __RPC__in IMDServiceProvider3 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDevice )( 
            __RPC__in IMDServiceProvider3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pwszDevicePath,
            /* [out] */ __RPC__out DWORD *pdwCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwCount) IMDSPDevice ***pppDeviceArray);
        
        HRESULT ( STDMETHODCALLTYPE *SetDeviceEnumPreference )( 
            __RPC__in IMDServiceProvider3 * This,
            /* [in] */ DWORD dwEnumPref);
        
        END_INTERFACE
    } IMDServiceProvider3Vtbl;

    interface IMDServiceProvider3
    {
        CONST_VTBL struct IMDServiceProvider3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDServiceProvider3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDServiceProvider3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDServiceProvider3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDServiceProvider3_GetDeviceCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetDeviceCount(This,pdwCount) ) 

#define IMDServiceProvider3_EnumDevices(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> EnumDevices(This,ppEnumDevice) ) 


#define IMDServiceProvider3_CreateDevice(This,pwszDevicePath,pdwCount,pppDeviceArray)	\
    ( (This)->lpVtbl -> CreateDevice(This,pwszDevicePath,pdwCount,pppDeviceArray) ) 


#define IMDServiceProvider3_SetDeviceEnumPreference(This,dwEnumPref)	\
    ( (This)->lpVtbl -> SetDeviceEnumPreference(This,dwEnumPref) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDServiceProvider3_INTERFACE_DEFINED__ */


#ifndef __IMDSPEnumDevice_INTERFACE_DEFINED__
#define __IMDSPEnumDevice_INTERFACE_DEFINED__

/* interface IMDSPEnumDevice */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPEnumDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A11-33ED-11d3-8470-00C04F79DBC0")
    IMDSPEnumDevice : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IMDSPDevice **ppDevice,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPEnumDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPEnumDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPEnumDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPEnumDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMDSPEnumDevice * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IMDSPDevice **ppDevice,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IMDSPEnumDevice * This,
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMDSPEnumDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IMDSPEnumDevice * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumDevice **ppEnumDevice);
        
        END_INTERFACE
    } IMDSPEnumDeviceVtbl;

    interface IMDSPEnumDevice
    {
        CONST_VTBL struct IMDSPEnumDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPEnumDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPEnumDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPEnumDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPEnumDevice_Next(This,celt,ppDevice,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,ppDevice,pceltFetched) ) 

#define IMDSPEnumDevice_Skip(This,celt,pceltFetched)	\
    ( (This)->lpVtbl -> Skip(This,celt,pceltFetched) ) 

#define IMDSPEnumDevice_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMDSPEnumDevice_Clone(This,ppEnumDevice)	\
    ( (This)->lpVtbl -> Clone(This,ppEnumDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPEnumDevice_INTERFACE_DEFINED__ */


#ifndef __IMDSPDevice_INTERFACE_DEFINED__
#define __IMDSPDevice_INTERFACE_DEFINED__

/* interface IMDSPDevice */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A12-33ED-11d3-8470-00C04F79DBC0")
    IMDSPDevice : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetManufacturer( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVersion( 
            /* [out] */ __RPC__out DWORD *pdwVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ __RPC__out DWORD *pdwType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSerialNumber( 
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPowerSource( 
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDeviceIcon( 
            /* [out] */ __RPC__out ULONG *hIcon) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStorage( 
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatSupport( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **pFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOpaqueCommand( 
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPDevice * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPDevice * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IMDSPDevice * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPDevice * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IMDSPDevice * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **pFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPDevice * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        END_INTERFACE
    } IMDSPDeviceVtbl;

    interface IMDSPDevice
    {
        CONST_VTBL struct IMDSPDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPDevice_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPDevice_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IMDSPDevice_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IMDSPDevice_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IMDSPDevice_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IMDSPDevice_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IMDSPDevice_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IMDSPDevice_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IMDSPDevice_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPDevice_GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IMDSPDevice_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPDevice_INTERFACE_DEFINED__ */


#ifndef __IMDSPDevice2_INTERFACE_DEFINED__
#define __IMDSPDevice2_INTERFACE_DEFINED__

/* interface IMDSPDevice2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPDevice2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("420D16AD-C97D-4e00-82AA-00E9F4335DDD")
    IMDSPDevice2 : public IMDSPDevice
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStorage( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatSupport2( 
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSpecifyPropertyPages( 
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCanonicalName( 
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPDevice2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPDevice2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPDevice2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPDevice2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IMDSPDevice2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IMDSPDevice2 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **pFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPDevice2 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IMDSPDevice2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport2 )( 
            __RPC__in IMDSPDevice2 * This,
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifyPropertyPages )( 
            __RPC__in IMDSPDevice2 * This,
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanonicalName )( 
            __RPC__in IMDSPDevice2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars);
        
        END_INTERFACE
    } IMDSPDevice2Vtbl;

    interface IMDSPDevice2
    {
        CONST_VTBL struct IMDSPDevice2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPDevice2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPDevice2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPDevice2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPDevice2_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPDevice2_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IMDSPDevice2_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IMDSPDevice2_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IMDSPDevice2_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IMDSPDevice2_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IMDSPDevice2_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IMDSPDevice2_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IMDSPDevice2_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPDevice2_GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IMDSPDevice2_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IMDSPDevice2_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IMDSPDevice2_GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount) ) 

#define IMDSPDevice2_GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks)	\
    ( (This)->lpVtbl -> GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks) ) 

#define IMDSPDevice2_GetCanonicalName(This,pwszPnPName,nMaxChars)	\
    ( (This)->lpVtbl -> GetCanonicalName(This,pwszPnPName,nMaxChars) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPDevice2_INTERFACE_DEFINED__ */


#ifndef __IMDSPDevice3_INTERFACE_DEFINED__
#define __IMDSPDevice3_INTERFACE_DEFINED__

/* interface IMDSPDevice3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPDevice3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1a839845-fc55-487c-976f-ee38ac0e8c4e")
    IMDSPDevice3 : public IMDSPDevice2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [out] */ __RPC__out PROPVARIANT *pValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormatCapability( 
            /* [in] */ WMDM_FORMATCODE format,
            /* [out] */ __RPC__out WMDM_FORMAT_CAPABILITY *pFormatSupport) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeviceIoControl( 
            /* [in] */ DWORD dwIoControlCode,
            /* [size_is][in] */ __RPC__in_ecount_full(nInBufferSize) BYTE *lpInBuffer,
            /* [in] */ DWORD nInBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(*pnOutBufferSize) BYTE *lpOutBuffer,
            /* [out][in] */ __RPC__inout LPDWORD pnOutBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindStorage( 
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPDevice3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPDevice3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPDevice3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPDevice3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetManufacturer )( 
            __RPC__in IMDSPDevice3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out PWMDMID pSerialNumber,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetPowerSource )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwPowerSource,
            /* [out] */ __RPC__out DWORD *pdwPercentRemaining);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceIcon )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__out ULONG *hIcon);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport )( 
            __RPC__in IMDSPDevice3 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX **pFormatEx,
            /* [out] */ __RPC__out UINT *pnFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnMimeTypeCount) LPWSTR **pppwszMimeType,
            /* [out] */ __RPC__out UINT *pnMimeTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPDevice3 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IMDSPDevice3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatSupport2 )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ DWORD dwFlags,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX **ppAudioFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnAudioFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER **ppVideoFormatEx,
            /* [ref][out] */ __RPC__out UINT *pnVideoFormatCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES **ppFileType,
            /* [ref][out] */ __RPC__out UINT *pnFileTypeCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifyPropertyPages )( 
            __RPC__in IMDSPDevice3 * This,
            /* [ref][out] */ __RPC__deref_out_opt ISpecifyPropertyPages **ppSpecifyPropPages,
            /* [size_is][size_is][ref][out] */ __RPC__deref_out_ecount_full_opt(*pcUnks) IUnknown ***pppUnknowns,
            /* [ref][out] */ __RPC__out ULONG *pcUnks);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanonicalName )( 
            __RPC__in IMDSPDevice3 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(nMaxChars) LPWSTR pwszPnPName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [out] */ __RPC__out PROPVARIANT *pValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ __RPC__in LPCWSTR pwszPropName,
            /* [in] */ __RPC__in const PROPVARIANT *pValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatCapability )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ WMDM_FORMATCODE format,
            /* [out] */ __RPC__out WMDM_FORMAT_CAPABILITY *pFormatSupport);
        
        HRESULT ( STDMETHODCALLTYPE *DeviceIoControl )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ DWORD dwIoControlCode,
            /* [size_is][in] */ __RPC__in_ecount_full(nInBufferSize) BYTE *lpInBuffer,
            /* [in] */ DWORD nInBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(*pnOutBufferSize) BYTE *lpOutBuffer,
            /* [out][in] */ __RPC__inout LPDWORD pnOutBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *FindStorage )( 
            __RPC__in IMDSPDevice3 * This,
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        END_INTERFACE
    } IMDSPDevice3Vtbl;

    interface IMDSPDevice3
    {
        CONST_VTBL struct IMDSPDevice3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPDevice3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPDevice3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPDevice3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPDevice3_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPDevice3_GetManufacturer(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetManufacturer(This,pwszName,nMaxChars) ) 

#define IMDSPDevice3_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IMDSPDevice3_GetType(This,pdwType)	\
    ( (This)->lpVtbl -> GetType(This,pdwType) ) 

#define IMDSPDevice3_GetSerialNumber(This,pSerialNumber,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNumber,abMac) ) 

#define IMDSPDevice3_GetPowerSource(This,pdwPowerSource,pdwPercentRemaining)	\
    ( (This)->lpVtbl -> GetPowerSource(This,pdwPowerSource,pdwPercentRemaining) ) 

#define IMDSPDevice3_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IMDSPDevice3_GetDeviceIcon(This,hIcon)	\
    ( (This)->lpVtbl -> GetDeviceIcon(This,hIcon) ) 

#define IMDSPDevice3_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPDevice3_GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport(This,pFormatEx,pnFormatCount,pppwszMimeType,pnMimeTypeCount) ) 

#define IMDSPDevice3_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IMDSPDevice3_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IMDSPDevice3_GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount)	\
    ( (This)->lpVtbl -> GetFormatSupport2(This,dwFlags,ppAudioFormatEx,pnAudioFormatCount,ppVideoFormatEx,pnVideoFormatCount,ppFileType,pnFileTypeCount) ) 

#define IMDSPDevice3_GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks)	\
    ( (This)->lpVtbl -> GetSpecifyPropertyPages(This,ppSpecifyPropPages,pppUnknowns,pcUnks) ) 

#define IMDSPDevice3_GetCanonicalName(This,pwszPnPName,nMaxChars)	\
    ( (This)->lpVtbl -> GetCanonicalName(This,pwszPnPName,nMaxChars) ) 


#define IMDSPDevice3_GetProperty(This,pwszPropName,pValue)	\
    ( (This)->lpVtbl -> GetProperty(This,pwszPropName,pValue) ) 

#define IMDSPDevice3_SetProperty(This,pwszPropName,pValue)	\
    ( (This)->lpVtbl -> SetProperty(This,pwszPropName,pValue) ) 

#define IMDSPDevice3_GetFormatCapability(This,format,pFormatSupport)	\
    ( (This)->lpVtbl -> GetFormatCapability(This,format,pFormatSupport) ) 

#define IMDSPDevice3_DeviceIoControl(This,dwIoControlCode,lpInBuffer,nInBufferSize,lpOutBuffer,pnOutBufferSize)	\
    ( (This)->lpVtbl -> DeviceIoControl(This,dwIoControlCode,lpInBuffer,nInBufferSize,lpOutBuffer,pnOutBufferSize) ) 

#define IMDSPDevice3_FindStorage(This,findScope,pwszUniqueID,ppStorage)	\
    ( (This)->lpVtbl -> FindStorage(This,findScope,pwszUniqueID,ppStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPDevice3_INTERFACE_DEFINED__ */


#ifndef __IMDSPDeviceControl_INTERFACE_DEFINED__
#define __IMDSPDeviceControl_INTERFACE_DEFINED__

/* interface IMDSPDeviceControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPDeviceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A14-33ED-11d3-8470-00C04F79DBC0")
    IMDSPDeviceControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDCStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ __RPC__out DWORD *pdwCapabilitiesMask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Play( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Record( 
            /* [in] */ __RPC__in _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ UINT fuMode,
            /* [in] */ int nOffset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPDeviceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPDeviceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPDeviceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDCStatus )( 
            __RPC__in IMDSPDeviceControl * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetCapabilities )( 
            __RPC__in IMDSPDeviceControl * This,
            /* [out] */ __RPC__out DWORD *pdwCapabilitiesMask);
        
        HRESULT ( STDMETHODCALLTYPE *Play )( 
            __RPC__in IMDSPDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Record )( 
            __RPC__in IMDSPDeviceControl * This,
            /* [in] */ __RPC__in _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IMDSPDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in IMDSPDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            __RPC__in IMDSPDeviceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            __RPC__in IMDSPDeviceControl * This,
            /* [in] */ UINT fuMode,
            /* [in] */ int nOffset);
        
        END_INTERFACE
    } IMDSPDeviceControlVtbl;

    interface IMDSPDeviceControl
    {
        CONST_VTBL struct IMDSPDeviceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPDeviceControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPDeviceControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPDeviceControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPDeviceControl_GetDCStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetDCStatus(This,pdwStatus) ) 

#define IMDSPDeviceControl_GetCapabilities(This,pdwCapabilitiesMask)	\
    ( (This)->lpVtbl -> GetCapabilities(This,pdwCapabilitiesMask) ) 

#define IMDSPDeviceControl_Play(This)	\
    ( (This)->lpVtbl -> Play(This) ) 

#define IMDSPDeviceControl_Record(This,pFormat)	\
    ( (This)->lpVtbl -> Record(This,pFormat) ) 

#define IMDSPDeviceControl_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMDSPDeviceControl_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IMDSPDeviceControl_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMDSPDeviceControl_Seek(This,fuMode,nOffset)	\
    ( (This)->lpVtbl -> Seek(This,fuMode,nOffset) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPDeviceControl_INTERFACE_DEFINED__ */


#ifndef __IMDSPEnumStorage_INTERFACE_DEFINED__
#define __IMDSPEnumStorage_INTERFACE_DEFINED__

/* interface IMDSPEnumStorage */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPEnumStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A15-33ED-11d3-8470-00C04F79DBC0")
    IMDSPEnumStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IMDSPStorage **ppStorage,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPEnumStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPEnumStorage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPEnumStorage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPEnumStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMDSPEnumStorage * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(celt, *pceltFetched) IMDSPStorage **ppStorage,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IMDSPEnumStorage * This,
            /* [in] */ ULONG celt,
            /* [out] */ __RPC__out ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMDSPEnumStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IMDSPEnumStorage * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        END_INTERFACE
    } IMDSPEnumStorageVtbl;

    interface IMDSPEnumStorage
    {
        CONST_VTBL struct IMDSPEnumStorageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPEnumStorage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPEnumStorage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPEnumStorage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPEnumStorage_Next(This,celt,ppStorage,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,ppStorage,pceltFetched) ) 

#define IMDSPEnumStorage_Skip(This,celt,pceltFetched)	\
    ( (This)->lpVtbl -> Skip(This,celt,pceltFetched) ) 

#define IMDSPEnumStorage_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMDSPEnumStorage_Clone(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> Clone(This,ppEnumStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPEnumStorage_INTERFACE_DEFINED__ */


#ifndef __IMDSPStorage_INTERFACE_DEFINED__
#define __IMDSPStorage_INTERFACE_DEFINED__

/* interface IMDSPStorage */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A16-33ED-11d3-8470-00C04F79DBC0")
    IMDSPStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAttributes( 
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStorageGlobals( 
            /* [out] */ __RPC__deref_out_opt IMDSPStorageGlobals **ppStorageGlobals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributes( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDate( 
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRights( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStorage( 
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStorage( 
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOpaqueCommand( 
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPStorage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPStorage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IMDSPStorage * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IMDSPStorage * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IMDSPStorage * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPStorage * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IMDSPStorage * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IMDSPStorage * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IMDSPStorage * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage )( 
            __RPC__in IMDSPStorage * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPStorage * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPStorage * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        END_INTERFACE
    } IMDSPStorageVtbl;

    interface IMDSPStorage
    {
        CONST_VTBL struct IMDSPStorageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPStorage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPStorage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPStorage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPStorage_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IMDSPStorage_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IMDSPStorage_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IMDSPStorage_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPStorage_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IMDSPStorage_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IMDSPStorage_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IMDSPStorage_CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage) ) 

#define IMDSPStorage_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPStorage_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPStorage_INTERFACE_DEFINED__ */


#ifndef __IMDSPStorage2_INTERFACE_DEFINED__
#define __IMDSPStorage2_INTERFACE_DEFINED__

/* interface IMDSPStorage2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPStorage2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A5E07A5-6454-4451-9C36-1C6AE7E2B1D6")
    IMDSPStorage2 : public IMDSPStorage
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStorage( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStorage2( 
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAttributes2( 
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributes2( 
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPStorage2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPStorage2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPStorage2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPStorage2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IMDSPStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPStorage2 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IMDSPStorage2 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage )( 
            __RPC__in IMDSPStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IMDSPStorage2 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage2 )( 
            __RPC__in IMDSPStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IMDSPStorage2 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IMDSPStorage2 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        END_INTERFACE
    } IMDSPStorage2Vtbl;

    interface IMDSPStorage2
    {
        CONST_VTBL struct IMDSPStorage2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPStorage2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPStorage2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPStorage2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPStorage2_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IMDSPStorage2_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IMDSPStorage2_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IMDSPStorage2_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPStorage2_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IMDSPStorage2_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IMDSPStorage2_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IMDSPStorage2_CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage) ) 

#define IMDSPStorage2_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPStorage2_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IMDSPStorage2_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IMDSPStorage2_CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage) ) 

#define IMDSPStorage2_SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat) ) 

#define IMDSPStorage2_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPStorage2_INTERFACE_DEFINED__ */


#ifndef __IMDSPStorage3_INTERFACE_DEFINED__
#define __IMDSPStorage3_INTERFACE_DEFINED__

/* interface IMDSPStorage3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPStorage3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C669867-97ED-4a67-9706-1C5529D2A414")
    IMDSPStorage3 : public IMDSPStorage2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMetadata( 
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMetadata( 
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPStorage3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPStorage3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPStorage3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPStorage3 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IMDSPStorage3 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IMDSPStorage3 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage2 )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IMDSPStorage3 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetadata )( 
            __RPC__in IMDSPStorage3 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        END_INTERFACE
    } IMDSPStorage3Vtbl;

    interface IMDSPStorage3
    {
        CONST_VTBL struct IMDSPStorage3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPStorage3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPStorage3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPStorage3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPStorage3_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IMDSPStorage3_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IMDSPStorage3_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IMDSPStorage3_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPStorage3_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IMDSPStorage3_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IMDSPStorage3_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IMDSPStorage3_CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage) ) 

#define IMDSPStorage3_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPStorage3_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IMDSPStorage3_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IMDSPStorage3_CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage) ) 

#define IMDSPStorage3_SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat) ) 

#define IMDSPStorage3_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 


#define IMDSPStorage3_GetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> GetMetadata(This,pMetadata) ) 

#define IMDSPStorage3_SetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> SetMetadata(This,pMetadata) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPStorage3_INTERFACE_DEFINED__ */


#ifndef __IMDSPStorage4_INTERFACE_DEFINED__
#define __IMDSPStorage4_INTERFACE_DEFINED__

/* interface IMDSPStorage4 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPStorage4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3133b2c4-515c-481b-b1ce-39327ecb4f74")
    IMDSPStorage4 : public IMDSPStorage3
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetReferences( 
            /* [in] */ DWORD dwRefs,
            /* [size_is][unique][in] */ __RPC__in_ecount_full_opt(dwRefs) IMDSPStorage **ppISPStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReferences( 
            /* [out] */ __RPC__out DWORD *pdwRefs,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwRefs) IMDSPStorage ***pppISPStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStorageWithMetadata( 
            /* [in] */ DWORD dwAttributes,
            /* [in] */ __RPC__in LPCWSTR pwszName,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSpecifiedMetadata( 
            /* [in] */ DWORD cProperties,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) LPCWSTR *ppwszPropNames,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindStorage( 
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPStorage4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPStorage4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPStorage4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageGlobals )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorageGlobals **ppStorageGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            __RPC__in IMDSPStorage4 * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPWSTR pwszName,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__out PWMDMDATETIME pDateTimeUTC);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwSizeLow,
            /* [out] */ __RPC__out DWORD *pdwSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in IMDSPStorage4 * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStorage )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPEnumStorage **ppEnumStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SendOpaqueCommand )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out][in] */ __RPC__inout OPAQUECOMMAND *pCommand);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorage )( 
            __RPC__in IMDSPStorage4 * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszStorageName,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorage2 )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat,
            /* [in] */ __RPC__in LPWSTR pwszName,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributes2 )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ DWORD dwAttributesEx,
            /* [unique][in] */ __RPC__in_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes2 )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwAttributes,
            /* [out] */ __RPC__out DWORD *pdwAttributesEx,
            /* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX *pAudioFormat,
            /* [unique][out][in] */ __RPC__inout_opt _VIDEOINFOHEADER *pVideoFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetadata )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetReferences )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwRefs,
            /* [size_is][unique][in] */ __RPC__in_ecount_full_opt(dwRefs) IMDSPStorage **ppISPStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetReferences )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__out DWORD *pdwRefs,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwRefs) IMDSPStorage ***pppISPStorage);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStorageWithMetadata )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD dwAttributes,
            /* [in] */ __RPC__in LPCWSTR pwszName,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata,
            /* [in] */ ULONGLONG qwFileSize,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecifiedMetadata )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ DWORD cProperties,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) LPCWSTR *ppwszPropNames,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *FindStorage )( 
            __RPC__in IMDSPStorage4 * This,
            /* [in] */ WMDM_FIND_SCOPE findScope,
            /* [in] */ __RPC__in LPCWSTR pwszUniqueID,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            __RPC__in IMDSPStorage4 * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppStorage);
        
        END_INTERFACE
    } IMDSPStorage4Vtbl;

    interface IMDSPStorage4
    {
        CONST_VTBL struct IMDSPStorage4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPStorage4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPStorage4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPStorage4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPStorage4_SetAttributes(This,dwAttributes,pFormat)	\
    ( (This)->lpVtbl -> SetAttributes(This,dwAttributes,pFormat) ) 

#define IMDSPStorage4_GetStorageGlobals(This,ppStorageGlobals)	\
    ( (This)->lpVtbl -> GetStorageGlobals(This,ppStorageGlobals) ) 

#define IMDSPStorage4_GetAttributes(This,pdwAttributes,pFormat)	\
    ( (This)->lpVtbl -> GetAttributes(This,pdwAttributes,pFormat) ) 

#define IMDSPStorage4_GetName(This,pwszName,nMaxChars)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,nMaxChars) ) 

#define IMDSPStorage4_GetDate(This,pDateTimeUTC)	\
    ( (This)->lpVtbl -> GetDate(This,pDateTimeUTC) ) 

#define IMDSPStorage4_GetSize(This,pdwSizeLow,pdwSizeHigh)	\
    ( (This)->lpVtbl -> GetSize(This,pdwSizeLow,pdwSizeHigh) ) 

#define IMDSPStorage4_GetRights(This,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,ppRights,pnRightsCount,abMac) ) 

#define IMDSPStorage4_CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage(This,dwAttributes,pFormat,pwszName,ppNewStorage) ) 

#define IMDSPStorage4_EnumStorage(This,ppEnumStorage)	\
    ( (This)->lpVtbl -> EnumStorage(This,ppEnumStorage) ) 

#define IMDSPStorage4_SendOpaqueCommand(This,pCommand)	\
    ( (This)->lpVtbl -> SendOpaqueCommand(This,pCommand) ) 


#define IMDSPStorage4_GetStorage(This,pszStorageName,ppStorage)	\
    ( (This)->lpVtbl -> GetStorage(This,pszStorageName,ppStorage) ) 

#define IMDSPStorage4_CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorage2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat,pwszName,qwFileSize,ppNewStorage) ) 

#define IMDSPStorage4_SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> SetAttributes2(This,dwAttributes,dwAttributesEx,pAudioFormat,pVideoFormat) ) 

#define IMDSPStorage4_GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat)	\
    ( (This)->lpVtbl -> GetAttributes2(This,pdwAttributes,pdwAttributesEx,pAudioFormat,pVideoFormat) ) 


#define IMDSPStorage4_GetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> GetMetadata(This,pMetadata) ) 

#define IMDSPStorage4_SetMetadata(This,pMetadata)	\
    ( (This)->lpVtbl -> SetMetadata(This,pMetadata) ) 


#define IMDSPStorage4_SetReferences(This,dwRefs,ppISPStorage)	\
    ( (This)->lpVtbl -> SetReferences(This,dwRefs,ppISPStorage) ) 

#define IMDSPStorage4_GetReferences(This,pdwRefs,pppISPStorage)	\
    ( (This)->lpVtbl -> GetReferences(This,pdwRefs,pppISPStorage) ) 

#define IMDSPStorage4_CreateStorageWithMetadata(This,dwAttributes,pwszName,pMetadata,qwFileSize,ppNewStorage)	\
    ( (This)->lpVtbl -> CreateStorageWithMetadata(This,dwAttributes,pwszName,pMetadata,qwFileSize,ppNewStorage) ) 

#define IMDSPStorage4_GetSpecifiedMetadata(This,cProperties,ppwszPropNames,pMetadata)	\
    ( (This)->lpVtbl -> GetSpecifiedMetadata(This,cProperties,ppwszPropNames,pMetadata) ) 

#define IMDSPStorage4_FindStorage(This,findScope,pwszUniqueID,ppStorage)	\
    ( (This)->lpVtbl -> FindStorage(This,findScope,pwszUniqueID,ppStorage) ) 

#define IMDSPStorage4_GetParent(This,ppStorage)	\
    ( (This)->lpVtbl -> GetParent(This,ppStorage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPStorage4_INTERFACE_DEFINED__ */


#ifndef __IMDSPStorageGlobals_INTERFACE_DEFINED__
#define __IMDSPStorageGlobals_INTERFACE_DEFINED__

/* interface IMDSPStorageGlobals */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPStorageGlobals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A17-33ED-11d3-8470-00C04F79DBC0")
    IMDSPStorageGlobals : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ __RPC__out DWORD *pdwCapabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSerialNumber( 
            /* [out] */ __RPC__out PWMDMID pSerialNum,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalSize( 
            /* [out] */ __RPC__out DWORD *pdwTotalSizeLow,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalFree( 
            /* [out] */ __RPC__out DWORD *pdwFreeLow,
            /* [out] */ __RPC__out DWORD *pdwFreeHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalBad( 
            /* [out] */ __RPC__out DWORD *pdwBadLow,
            /* [out] */ __RPC__out DWORD *pdwBadHigh) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDevice( 
            /* [out] */ __RPC__deref_out_opt IMDSPDevice **ppDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRootStorage( 
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppRoot) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPStorageGlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPStorageGlobals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPStorageGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCapabilities )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwCapabilities);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerialNumber )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out PWMDMID pSerialNum,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalSize )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeLow,
            /* [out] */ __RPC__out DWORD *pdwTotalSizeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalFree )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwFreeLow,
            /* [out] */ __RPC__out DWORD *pdwFreeHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalBad )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwBadLow,
            /* [out] */ __RPC__out DWORD *pdwBadHigh);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__out DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *GetDevice )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__deref_out_opt IMDSPDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetRootStorage )( 
            __RPC__in IMDSPStorageGlobals * This,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppRoot);
        
        END_INTERFACE
    } IMDSPStorageGlobalsVtbl;

    interface IMDSPStorageGlobals
    {
        CONST_VTBL struct IMDSPStorageGlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPStorageGlobals_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPStorageGlobals_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPStorageGlobals_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPStorageGlobals_GetCapabilities(This,pdwCapabilities)	\
    ( (This)->lpVtbl -> GetCapabilities(This,pdwCapabilities) ) 

#define IMDSPStorageGlobals_GetSerialNumber(This,pSerialNum,abMac)	\
    ( (This)->lpVtbl -> GetSerialNumber(This,pSerialNum,abMac) ) 

#define IMDSPStorageGlobals_GetTotalSize(This,pdwTotalSizeLow,pdwTotalSizeHigh)	\
    ( (This)->lpVtbl -> GetTotalSize(This,pdwTotalSizeLow,pdwTotalSizeHigh) ) 

#define IMDSPStorageGlobals_GetTotalFree(This,pdwFreeLow,pdwFreeHigh)	\
    ( (This)->lpVtbl -> GetTotalFree(This,pdwFreeLow,pdwFreeHigh) ) 

#define IMDSPStorageGlobals_GetTotalBad(This,pdwBadLow,pdwBadHigh)	\
    ( (This)->lpVtbl -> GetTotalBad(This,pdwBadLow,pdwBadHigh) ) 

#define IMDSPStorageGlobals_GetStatus(This,pdwStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pdwStatus) ) 

#define IMDSPStorageGlobals_Initialize(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Initialize(This,fuMode,pProgress) ) 

#define IMDSPStorageGlobals_GetDevice(This,ppDevice)	\
    ( (This)->lpVtbl -> GetDevice(This,ppDevice) ) 

#define IMDSPStorageGlobals_GetRootStorage(This,ppRoot)	\
    ( (This)->lpVtbl -> GetRootStorage(This,ppRoot) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPStorageGlobals_INTERFACE_DEFINED__ */


#ifndef __IMDSPObjectInfo_INTERFACE_DEFINED__
#define __IMDSPObjectInfo_INTERFACE_DEFINED__

/* interface IMDSPObjectInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPObjectInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A19-33ED-11d3-8470-00C04F79DBC0")
    IMDSPObjectInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPlayLength( 
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayLength( 
            /* [in] */ DWORD dwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPlayOffset( 
            /* [out] */ __RPC__out DWORD *pdwOffset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayOffset( 
            /* [in] */ DWORD dwOffset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTotalLength( 
            /* [out] */ __RPC__out DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastPlayPosition( 
            /* [out] */ __RPC__out DWORD *pdwLastPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLongestPlayPosition( 
            /* [out] */ __RPC__out DWORD *pdwLongestPos) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPObjectInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPObjectInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPObjectInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayLength )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayLength )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayOffset )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayOffset )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [in] */ DWORD dwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *GetTotalLength )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastPlayPosition )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLastPos);
        
        HRESULT ( STDMETHODCALLTYPE *GetLongestPlayPosition )( 
            __RPC__in IMDSPObjectInfo * This,
            /* [out] */ __RPC__out DWORD *pdwLongestPos);
        
        END_INTERFACE
    } IMDSPObjectInfoVtbl;

    interface IMDSPObjectInfo
    {
        CONST_VTBL struct IMDSPObjectInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPObjectInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPObjectInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPObjectInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPObjectInfo_GetPlayLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetPlayLength(This,pdwLength) ) 

#define IMDSPObjectInfo_SetPlayLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetPlayLength(This,dwLength) ) 

#define IMDSPObjectInfo_GetPlayOffset(This,pdwOffset)	\
    ( (This)->lpVtbl -> GetPlayOffset(This,pdwOffset) ) 

#define IMDSPObjectInfo_SetPlayOffset(This,dwOffset)	\
    ( (This)->lpVtbl -> SetPlayOffset(This,dwOffset) ) 

#define IMDSPObjectInfo_GetTotalLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetTotalLength(This,pdwLength) ) 

#define IMDSPObjectInfo_GetLastPlayPosition(This,pdwLastPos)	\
    ( (This)->lpVtbl -> GetLastPlayPosition(This,pdwLastPos) ) 

#define IMDSPObjectInfo_GetLongestPlayPosition(This,pdwLongestPos)	\
    ( (This)->lpVtbl -> GetLongestPlayPosition(This,pdwLongestPos) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPObjectInfo_INTERFACE_DEFINED__ */


#ifndef __IMDSPObject_INTERFACE_DEFINED__
#define __IMDSPObject_INTERFACE_DEFINED__

/* interface IMDSPObject */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A18-33ED-11d3-8470-00C04F79DBC0")
    IMDSPObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ UINT fuMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [size_is][in] */ __RPC__in_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ UINT fuFlags,
            /* [in] */ DWORD dwOffset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rename( 
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IMDSPStorage *pTarget) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ UINT fuMode);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            __RPC__in IMDSPObject * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            __RPC__in IMDSPObject * This,
            /* [size_is][in] */ __RPC__in_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ UINT fuFlags,
            /* [in] */ DWORD dwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *Rename )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in IMDSPObject * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IMDSPStorage *pTarget);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMDSPObject * This);
        
        END_INTERFACE
    } IMDSPObjectVtbl;

    interface IMDSPObject
    {
        CONST_VTBL struct IMDSPObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPObject_Open(This,fuMode)	\
    ( (This)->lpVtbl -> Open(This,fuMode) ) 

#define IMDSPObject_Read(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> Read(This,pData,pdwSize,abMac) ) 

#define IMDSPObject_Write(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> Write(This,pData,pdwSize,abMac) ) 

#define IMDSPObject_Delete(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Delete(This,fuMode,pProgress) ) 

#define IMDSPObject_Seek(This,fuFlags,dwOffset)	\
    ( (This)->lpVtbl -> Seek(This,fuFlags,dwOffset) ) 

#define IMDSPObject_Rename(This,pwszNewName,pProgress)	\
    ( (This)->lpVtbl -> Rename(This,pwszNewName,pProgress) ) 

#define IMDSPObject_Move(This,fuMode,pProgress,pTarget)	\
    ( (This)->lpVtbl -> Move(This,fuMode,pProgress,pTarget) ) 

#define IMDSPObject_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPObject_INTERFACE_DEFINED__ */


#ifndef __IMDSPObject2_INTERFACE_DEFINED__
#define __IMDSPObject2_INTERFACE_DEFINED__

/* interface IMDSPObject2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPObject2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3f34cd3e-5907-4341-9af9-97f4187c3aa5")
    IMDSPObject2 : public IMDSPObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ReadOnClearChannel( 
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteOnClearChannel( 
            /* [size_is][in] */ __RPC__in_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPObject2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPObject2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPObject2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ UINT fuMode);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            __RPC__in IMDSPObject2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            __RPC__in IMDSPObject2 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ UINT fuFlags,
            /* [in] */ DWORD dwOffset);
        
        HRESULT ( STDMETHODCALLTYPE *Rename )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ __RPC__in LPWSTR pwszNewName,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress);
        
        HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in IMDSPObject2 * This,
            /* [in] */ UINT fuMode,
            /* [in] */ __RPC__in_opt IWMDMProgress *pProgress,
            /* [in] */ __RPC__in_opt IMDSPStorage *pTarget);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMDSPObject2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReadOnClearChannel )( 
            __RPC__in IMDSPObject2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *WriteOnClearChannel )( 
            __RPC__in IMDSPObject2 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize);
        
        END_INTERFACE
    } IMDSPObject2Vtbl;

    interface IMDSPObject2
    {
        CONST_VTBL struct IMDSPObject2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPObject2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPObject2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPObject2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPObject2_Open(This,fuMode)	\
    ( (This)->lpVtbl -> Open(This,fuMode) ) 

#define IMDSPObject2_Read(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> Read(This,pData,pdwSize,abMac) ) 

#define IMDSPObject2_Write(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> Write(This,pData,pdwSize,abMac) ) 

#define IMDSPObject2_Delete(This,fuMode,pProgress)	\
    ( (This)->lpVtbl -> Delete(This,fuMode,pProgress) ) 

#define IMDSPObject2_Seek(This,fuFlags,dwOffset)	\
    ( (This)->lpVtbl -> Seek(This,fuFlags,dwOffset) ) 

#define IMDSPObject2_Rename(This,pwszNewName,pProgress)	\
    ( (This)->lpVtbl -> Rename(This,pwszNewName,pProgress) ) 

#define IMDSPObject2_Move(This,fuMode,pProgress,pTarget)	\
    ( (This)->lpVtbl -> Move(This,fuMode,pProgress,pTarget) ) 

#define IMDSPObject2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 


#define IMDSPObject2_ReadOnClearChannel(This,pData,pdwSize)	\
    ( (This)->lpVtbl -> ReadOnClearChannel(This,pData,pdwSize) ) 

#define IMDSPObject2_WriteOnClearChannel(This,pData,pdwSize)	\
    ( (This)->lpVtbl -> WriteOnClearChannel(This,pData,pdwSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPObject2_INTERFACE_DEFINED__ */


#ifndef __IMDSPDirectTransfer_INTERFACE_DEFINED__
#define __IMDSPDirectTransfer_INTERFACE_DEFINED__

/* interface IMDSPDirectTransfer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPDirectTransfer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2fe57a8-9304-478c-9ee4-47e397b912d7")
    IMDSPDirectTransfer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransferToDevice( 
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pwszSourceFilePath,
            /* [in] */ __RPC__in_opt IWMDMOperation *pSourceOperation,
            /* [in] */ UINT fuFlags,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszDestinationName,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pSourceMetaData,
            /* [in] */ __RPC__in_opt IWMDMProgress *pTransferProgress,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPDirectTransferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPDirectTransfer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPDirectTransfer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPDirectTransfer * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferToDevice )( 
            __RPC__in IMDSPDirectTransfer * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pwszSourceFilePath,
            /* [in] */ __RPC__in_opt IWMDMOperation *pSourceOperation,
            /* [in] */ UINT fuFlags,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR pwszDestinationName,
            /* [in] */ __RPC__in_opt IWMDMMetaData *pSourceMetaData,
            /* [in] */ __RPC__in_opt IWMDMProgress *pTransferProgress,
            /* [out] */ __RPC__deref_out_opt IMDSPStorage **ppNewObject);
        
        END_INTERFACE
    } IMDSPDirectTransferVtbl;

    interface IMDSPDirectTransfer
    {
        CONST_VTBL struct IMDSPDirectTransferVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPDirectTransfer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPDirectTransfer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPDirectTransfer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPDirectTransfer_TransferToDevice(This,pwszSourceFilePath,pSourceOperation,fuFlags,pwszDestinationName,pSourceMetaData,pTransferProgress,ppNewObject)	\
    ( (This)->lpVtbl -> TransferToDevice(This,pwszSourceFilePath,pSourceOperation,fuFlags,pwszDestinationName,pSourceMetaData,pTransferProgress,ppNewObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPDirectTransfer_INTERFACE_DEFINED__ */


#ifndef __IMDSPRevoked_INTERFACE_DEFINED__
#define __IMDSPRevoked_INTERFACE_DEFINED__

/* interface IMDSPRevoked */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMDSPRevoked;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A4E8F2D4-3F31-464d-B53D-4FC335998184")
    IMDSPRevoked : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRevocationURL( 
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwBufferLen) LPWSTR *ppwszRevocationURL,
            /* [out][in] */ __RPC__inout DWORD *pdwBufferLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMDSPRevokedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMDSPRevoked * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMDSPRevoked * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMDSPRevoked * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevocationURL )( 
            __RPC__in IMDSPRevoked * This,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwBufferLen) LPWSTR *ppwszRevocationURL,
            /* [out][in] */ __RPC__inout DWORD *pdwBufferLen);
        
        END_INTERFACE
    } IMDSPRevokedVtbl;

    interface IMDSPRevoked
    {
        CONST_VTBL struct IMDSPRevokedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMDSPRevoked_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMDSPRevoked_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMDSPRevoked_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMDSPRevoked_GetRevocationURL(This,ppwszRevocationURL,pdwBufferLen)	\
    ( (This)->lpVtbl -> GetRevocationURL(This,ppwszRevocationURL,pdwBufferLen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMDSPRevoked_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mswmdm_0000_0047 */
/* [local] */ 

// SCP Data Flags
#define WMDM_SCP_EXAMINE_EXTENSION                 0x00000001L
#define WMDM_SCP_EXAMINE_DATA                      0x00000002L
#define WMDM_SCP_DECIDE_DATA                       0x00000008L
#define WMDM_SCP_PROTECTED_OUTPUT                  0x00000010L
#define WMDM_SCP_UNPROTECTED_OUTPUT                0x00000020L
#define WMDM_SCP_RIGHTS_DATA                       0x00000040L
// SCP Transfer Flags
#define WMDM_SCP_TRANSFER_OBJECTDATA               0x00000020L
#define WMDM_SCP_NO_MORE_CHANGES                   0x00000040L
// SCP DRMINFO Flags
#define WMDM_SCP_DRMINFO_NOT_DRMPROTECTED          0x00000000L
#define WMDM_SCP_DRMINFO_V1HEADER                  0x00000001L
#define WMDM_SCP_DRMINFO_V2HEADER                  0x00000002L
#ifndef _DEFINE_SCP_EVENTID
#define _DEFINE_SCP_EVENTID
// {86248CC9-4A59-43e2-9146-48A7F3F4140C}
// this event ID is used when SCP is acquiring secure clock from server
DEFINE_GUID(SCP_EVENTID_ACQSECURECLOCK, 
0x86248cc9, 0x4a59, 0x43e2, 0x91, 0x46, 0x48, 0xa7, 0xf3, 0xf4, 0x14, 0xc);
//
// {87A507C7-B469-4386-B976-D5D1CE538A6F}
DEFINE_GUID(SCP_EVENTID_NEEDTOINDIV, 
0x87a507c7, 0xb469, 0x4386, 0xb9, 0x76, 0xd5, 0xd1, 0xce, 0x53, 0x8a, 0x6f);
// this event ID is used to notify the player the version DRM header found in the content
// {213DD287-41D2-432b-9E3F-3B4F7B3581DD}
DEFINE_GUID(SCP_EVENTID_DRMINFO, 
0x213dd287, 0x41d2, 0x432b, 0x9e, 0x3f, 0x3b, 0x4f, 0x7b, 0x35, 0x81, 0xdd);
// this parameter ID is used when notifying SCP_EVENTID_DRMINFO message
// {41D0155D-7CC7-4217-ADA9-005074624DA4}
DEFINE_GUID(SCP_PARAMID_DRMVERSION, 
0x41d0155d, 0x7cc7, 0x4217, 0xad, 0xa9, 0x00, 0x50, 0x74, 0x62, 0x4d, 0xa4);
#endif






extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0047_v0_0_s_ifspec;

#ifndef __ISCPSecureAuthenticate_INTERFACE_DEFINED__
#define __ISCPSecureAuthenticate_INTERFACE_DEFINED__

/* interface ISCPSecureAuthenticate */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureAuthenticate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A0F-33ED-11d3-8470-00C04F79DBC0")
    ISCPSecureAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSecureQuery( 
            /* [out] */ __RPC__deref_out_opt ISCPSecureQuery **ppSecureQuery) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureAuthenticateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureAuthenticate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureAuthenticate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureAuthenticate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecureQuery )( 
            __RPC__in ISCPSecureAuthenticate * This,
            /* [out] */ __RPC__deref_out_opt ISCPSecureQuery **ppSecureQuery);
        
        END_INTERFACE
    } ISCPSecureAuthenticateVtbl;

    interface ISCPSecureAuthenticate
    {
        CONST_VTBL struct ISCPSecureAuthenticateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureAuthenticate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureAuthenticate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureAuthenticate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureAuthenticate_GetSecureQuery(This,ppSecureQuery)	\
    ( (This)->lpVtbl -> GetSecureQuery(This,ppSecureQuery) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureAuthenticate_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureAuthenticate2_INTERFACE_DEFINED__
#define __ISCPSecureAuthenticate2_INTERFACE_DEFINED__

/* interface ISCPSecureAuthenticate2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureAuthenticate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B580CFAE-1672-47e2-ACAA-44BBECBCAE5B")
    ISCPSecureAuthenticate2 : public ISCPSecureAuthenticate
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSCPSession( 
            /* [out] */ __RPC__deref_out_opt ISCPSession **ppSCPSession) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureAuthenticate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureAuthenticate2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureAuthenticate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureAuthenticate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecureQuery )( 
            __RPC__in ISCPSecureAuthenticate2 * This,
            /* [out] */ __RPC__deref_out_opt ISCPSecureQuery **ppSecureQuery);
        
        HRESULT ( STDMETHODCALLTYPE *GetSCPSession )( 
            __RPC__in ISCPSecureAuthenticate2 * This,
            /* [out] */ __RPC__deref_out_opt ISCPSession **ppSCPSession);
        
        END_INTERFACE
    } ISCPSecureAuthenticate2Vtbl;

    interface ISCPSecureAuthenticate2
    {
        CONST_VTBL struct ISCPSecureAuthenticate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureAuthenticate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureAuthenticate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureAuthenticate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureAuthenticate2_GetSecureQuery(This,ppSecureQuery)	\
    ( (This)->lpVtbl -> GetSecureQuery(This,ppSecureQuery) ) 


#define ISCPSecureAuthenticate2_GetSCPSession(This,ppSCPSession)	\
    ( (This)->lpVtbl -> GetSCPSession(This,ppSCPSession) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureAuthenticate2_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureQuery_INTERFACE_DEFINED__
#define __ISCPSecureQuery_INTERFACE_DEFINED__

/* interface ISCPSecureQuery */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A0D-33ED-11d3-8470-00C04F79DBC0")
    ISCPSecureQuery : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDataDemands( 
            /* [out] */ __RPC__out UINT *pfuFlags,
            /* [out] */ __RPC__out DWORD *pdwMinRightsData,
            /* [out] */ __RPC__out DWORD *pdwMinExamineData,
            /* [out] */ __RPC__out DWORD *pdwMinDecideData,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExamineData( 
            /* [in] */ UINT fuFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPWSTR pwszExtension,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MakeDecision( 
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRights( 
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureQuery * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataDemands )( 
            __RPC__in ISCPSecureQuery * This,
            /* [out] */ __RPC__out UINT *pfuFlags,
            /* [out] */ __RPC__out DWORD *pdwMinRightsData,
            /* [out] */ __RPC__out DWORD *pdwMinExamineData,
            /* [out] */ __RPC__out DWORD *pdwMinDecideData,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ExamineData )( 
            __RPC__in ISCPSecureQuery * This,
            /* [in] */ UINT fuFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPWSTR pwszExtension,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecision )( 
            __RPC__in ISCPSecureQuery * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in ISCPSecureQuery * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        END_INTERFACE
    } ISCPSecureQueryVtbl;

    interface ISCPSecureQuery
    {
        CONST_VTBL struct ISCPSecureQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureQuery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureQuery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureQuery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureQuery_GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac)	\
    ( (This)->lpVtbl -> GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac) ) 

#define ISCPSecureQuery_ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac)	\
    ( (This)->lpVtbl -> ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac) ) 

#define ISCPSecureQuery_MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac)	\
    ( (This)->lpVtbl -> MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac) ) 

#define ISCPSecureQuery_GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureQuery_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureQuery2_INTERFACE_DEFINED__
#define __ISCPSecureQuery2_INTERFACE_DEFINED__

/* interface ISCPSecureQuery2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureQuery2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EBE17E25-4FD7-4632-AF46-6D93D4FCC72E")
    ISCPSecureQuery2 : public ISCPSecureQuery
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MakeDecision2( 
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertAppLen) BYTE *pAppCertApp,
            /* [in] */ DWORD dwAppCertAppLen,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertSPLen) BYTE *pAppCertSP,
            /* [in] */ DWORD dwAppCertSPLen,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwRevocationURLLen) LPWSTR *pszRevocationURL,
            /* [ref][out][in] */ __RPC__inout DWORD *pdwRevocationURLLen,
            /* [out] */ __RPC__out DWORD *pdwRevocationBitFlag,
            /* [unique][out][in] */ __RPC__inout_opt ULONGLONG *pqwFileSize,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureQuery2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureQuery2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureQuery2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataDemands )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [out] */ __RPC__out UINT *pfuFlags,
            /* [out] */ __RPC__out DWORD *pdwMinRightsData,
            /* [out] */ __RPC__out DWORD *pdwMinExamineData,
            /* [out] */ __RPC__out DWORD *pdwMinDecideData,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ExamineData )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [in] */ UINT fuFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPWSTR pwszExtension,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecision )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecision2 )( 
            __RPC__in ISCPSecureQuery2 * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertAppLen) BYTE *pAppCertApp,
            /* [in] */ DWORD dwAppCertAppLen,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertSPLen) BYTE *pAppCertSP,
            /* [in] */ DWORD dwAppCertSPLen,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwRevocationURLLen) LPWSTR *pszRevocationURL,
            /* [ref][out][in] */ __RPC__inout DWORD *pdwRevocationURLLen,
            /* [out] */ __RPC__out DWORD *pdwRevocationBitFlag,
            /* [unique][out][in] */ __RPC__inout_opt ULONGLONG *pqwFileSize,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        END_INTERFACE
    } ISCPSecureQuery2Vtbl;

    interface ISCPSecureQuery2
    {
        CONST_VTBL struct ISCPSecureQuery2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureQuery2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureQuery2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureQuery2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureQuery2_GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac)	\
    ( (This)->lpVtbl -> GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac) ) 

#define ISCPSecureQuery2_ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac)	\
    ( (This)->lpVtbl -> ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac) ) 

#define ISCPSecureQuery2_MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac)	\
    ( (This)->lpVtbl -> MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac) ) 

#define ISCPSecureQuery2_GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac) ) 


#define ISCPSecureQuery2_MakeDecision2(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange,abMac)	\
    ( (This)->lpVtbl -> MakeDecision2(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange,abMac) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureQuery2_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureExchange_INTERFACE_DEFINED__
#define __ISCPSecureExchange_INTERFACE_DEFINED__

/* interface ISCPSecureExchange */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureExchange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DCB3A0E-33ED-11d3-8470-00C04F79DBC0")
    ISCPSecureExchange : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransferContainerData( 
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ObjectData( 
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TransferComplete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureExchangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureExchange * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureExchange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureExchange * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerData )( 
            __RPC__in ISCPSecureExchange * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ObjectData )( 
            __RPC__in ISCPSecureExchange * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *TransferComplete )( 
            __RPC__in ISCPSecureExchange * This);
        
        END_INTERFACE
    } ISCPSecureExchangeVtbl;

    interface ISCPSecureExchange
    {
        CONST_VTBL struct ISCPSecureExchangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureExchange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureExchange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureExchange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureExchange_TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac)	\
    ( (This)->lpVtbl -> TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac) ) 

#define ISCPSecureExchange_ObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> ObjectData(This,pData,pdwSize,abMac) ) 

#define ISCPSecureExchange_TransferComplete(This)	\
    ( (This)->lpVtbl -> TransferComplete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureExchange_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureExchange2_INTERFACE_DEFINED__
#define __ISCPSecureExchange2_INTERFACE_DEFINED__

/* interface ISCPSecureExchange2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureExchange2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C62FC7B-2690-483F-9D44-0A20CB35577C")
    ISCPSecureExchange2 : public ISCPSecureExchange
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransferContainerData2( 
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureExchange2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureExchange2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureExchange2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureExchange2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerData )( 
            __RPC__in ISCPSecureExchange2 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ObjectData )( 
            __RPC__in ISCPSecureExchange2 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *TransferComplete )( 
            __RPC__in ISCPSecureExchange2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerData2 )( 
            __RPC__in ISCPSecureExchange2 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        END_INTERFACE
    } ISCPSecureExchange2Vtbl;

    interface ISCPSecureExchange2
    {
        CONST_VTBL struct ISCPSecureExchange2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureExchange2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureExchange2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureExchange2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureExchange2_TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac)	\
    ( (This)->lpVtbl -> TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac) ) 

#define ISCPSecureExchange2_ObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> ObjectData(This,pData,pdwSize,abMac) ) 

#define ISCPSecureExchange2_TransferComplete(This)	\
    ( (This)->lpVtbl -> TransferComplete(This) ) 


#define ISCPSecureExchange2_TransferContainerData2(This,pData,dwSize,pProgressCallback,pfuReadyFlags,abMac)	\
    ( (This)->lpVtbl -> TransferContainerData2(This,pData,dwSize,pProgressCallback,pfuReadyFlags,abMac) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureExchange2_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureExchange3_INTERFACE_DEFINED__
#define __ISCPSecureExchange3_INTERFACE_DEFINED__

/* interface ISCPSecureExchange3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureExchange3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab4e77e4-8908-4b17-bd2a-b1dbe6dd69e1")
    ISCPSecureExchange3 : public ISCPSecureExchange2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransferContainerDataOnClearChannel( 
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [out] */ __RPC__out UINT *pfuReadyFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectDataOnClearChannel( 
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TransferCompleteForDevice( 
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureExchange3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureExchange3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureExchange3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerData )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ObjectData )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *TransferComplete )( 
            __RPC__in ISCPSecureExchange3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerData2 )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [out] */ __RPC__out UINT *pfuReadyFlags,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *TransferContainerDataOnClearChannel )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [out] */ __RPC__out UINT *pfuReadyFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectDataOnClearChannel )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSize) BYTE *pData,
            /* [out][in] */ __RPC__inout DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *TransferCompleteForDevice )( 
            __RPC__in ISCPSecureExchange3 * This,
            /* [in] */ __RPC__in_opt IMDSPDevice *pDevice);
        
        END_INTERFACE
    } ISCPSecureExchange3Vtbl;

    interface ISCPSecureExchange3
    {
        CONST_VTBL struct ISCPSecureExchange3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureExchange3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureExchange3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureExchange3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureExchange3_TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac)	\
    ( (This)->lpVtbl -> TransferContainerData(This,pData,dwSize,pfuReadyFlags,abMac) ) 

#define ISCPSecureExchange3_ObjectData(This,pData,pdwSize,abMac)	\
    ( (This)->lpVtbl -> ObjectData(This,pData,pdwSize,abMac) ) 

#define ISCPSecureExchange3_TransferComplete(This)	\
    ( (This)->lpVtbl -> TransferComplete(This) ) 


#define ISCPSecureExchange3_TransferContainerData2(This,pData,dwSize,pProgressCallback,pfuReadyFlags,abMac)	\
    ( (This)->lpVtbl -> TransferContainerData2(This,pData,dwSize,pProgressCallback,pfuReadyFlags,abMac) ) 


#define ISCPSecureExchange3_TransferContainerDataOnClearChannel(This,pDevice,pData,dwSize,pProgressCallback,pfuReadyFlags)	\
    ( (This)->lpVtbl -> TransferContainerDataOnClearChannel(This,pDevice,pData,dwSize,pProgressCallback,pfuReadyFlags) ) 

#define ISCPSecureExchange3_GetObjectDataOnClearChannel(This,pDevice,pData,pdwSize)	\
    ( (This)->lpVtbl -> GetObjectDataOnClearChannel(This,pDevice,pData,pdwSize) ) 

#define ISCPSecureExchange3_TransferCompleteForDevice(This,pDevice)	\
    ( (This)->lpVtbl -> TransferCompleteForDevice(This,pDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureExchange3_INTERFACE_DEFINED__ */


#ifndef __ISCPSession_INTERFACE_DEFINED__
#define __ISCPSession_INTERFACE_DEFINED__

/* interface ISCPSession */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("88a3e6ed-eee4-4619-bbb3-fd4fb62715d1")
    ISCPSession : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginSession( 
            /* [in] */ __RPC__in_opt IMDSPDevice *pIDevice,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndSession( 
            /* [size_is][in] */ __RPC__in_ecount_full(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSecureQuery( 
            /* [out] */ __RPC__deref_out_opt ISCPSecureQuery **ppSecureQuery) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSession * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginSession )( 
            __RPC__in ISCPSession * This,
            /* [in] */ __RPC__in_opt IMDSPDevice *pIDevice,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx);
        
        HRESULT ( STDMETHODCALLTYPE *EndSession )( 
            __RPC__in ISCPSession * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSizeCtx) BYTE *pCtx,
            /* [in] */ DWORD dwSizeCtx);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecureQuery )( 
            __RPC__in ISCPSession * This,
            /* [out] */ __RPC__deref_out_opt ISCPSecureQuery **ppSecureQuery);
        
        END_INTERFACE
    } ISCPSessionVtbl;

    interface ISCPSession
    {
        CONST_VTBL struct ISCPSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSession_BeginSession(This,pIDevice,pCtx,dwSizeCtx)	\
    ( (This)->lpVtbl -> BeginSession(This,pIDevice,pCtx,dwSizeCtx) ) 

#define ISCPSession_EndSession(This,pCtx,dwSizeCtx)	\
    ( (This)->lpVtbl -> EndSession(This,pCtx,dwSizeCtx) ) 

#define ISCPSession_GetSecureQuery(This,ppSecureQuery)	\
    ( (This)->lpVtbl -> GetSecureQuery(This,ppSecureQuery) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSession_INTERFACE_DEFINED__ */


#ifndef __ISCPSecureQuery3_INTERFACE_DEFINED__
#define __ISCPSecureQuery3_INTERFACE_DEFINED__

/* interface ISCPSecureQuery3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISCPSecureQuery3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7EDD1A2-4DAB-484b-B3C5-AD39B8B4C0B1")
    ISCPSecureQuery3 : public ISCPSecureQuery2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRightsOnClearChannel( 
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MakeDecisionOnClearChannel( 
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertAppLen) BYTE *pAppCertApp,
            /* [in] */ DWORD dwAppCertAppLen,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertSPLen) BYTE *pAppCertSP,
            /* [in] */ DWORD dwAppCertSPLen,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwRevocationURLLen) LPWSTR *pszRevocationURL,
            /* [ref][out][in] */ __RPC__inout DWORD *pdwRevocationURLLen,
            /* [out] */ __RPC__out DWORD *pdwRevocationBitFlag,
            /* [unique][out][in] */ __RPC__inout_opt ULONGLONG *pqwFileSize,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISCPSecureQuery3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCPSecureQuery3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCPSecureQuery3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataDemands )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [out] */ __RPC__out UINT *pfuFlags,
            /* [out] */ __RPC__out DWORD *pdwMinRightsData,
            /* [out] */ __RPC__out DWORD *pdwMinExamineData,
            /* [out] */ __RPC__out DWORD *pdwMinDecideData,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *ExamineData )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [in] */ UINT fuFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPWSTR pwszExtension,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecision )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetRights )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecision2 )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertAppLen) BYTE *pAppCertApp,
            /* [in] */ DWORD dwAppCertAppLen,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertSPLen) BYTE *pAppCertSP,
            /* [in] */ DWORD dwAppCertSPLen,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwRevocationURLLen) LPWSTR *pszRevocationURL,
            /* [ref][out][in] */ __RPC__inout DWORD *pdwRevocationURLLen,
            /* [out] */ __RPC__out DWORD *pdwRevocationBitFlag,
            /* [unique][out][in] */ __RPC__inout_opt ULONGLONG *pqwFileSize,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange,
            /* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[ 8 ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetRightsOnClearChannel )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStgGlobals,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS *ppRights,
            /* [out] */ __RPC__out UINT *pnRightsCount);
        
        HRESULT ( STDMETHODCALLTYPE *MakeDecisionOnClearChannel )( 
            __RPC__in ISCPSecureQuery3 * This,
            /* [in] */ UINT fuFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSize) BYTE *pData,
            /* [in] */ DWORD dwSize,
            /* [in] */ DWORD dwAppSec,
            /* [size_is][in] */ __RPC__in_ecount_full(dwSessionKeyLen) BYTE *pbSPSessionKey,
            /* [in] */ DWORD dwSessionKeyLen,
            /* [in] */ __RPC__in_opt IMDSPStorageGlobals *pStorageGlobals,
            /* [in] */ __RPC__in_opt IWMDMProgress3 *pProgressCallback,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertAppLen) BYTE *pAppCertApp,
            /* [in] */ DWORD dwAppCertAppLen,
            /* [size_is][in] */ __RPC__in_ecount_full(dwAppCertSPLen) BYTE *pAppCertSP,
            /* [in] */ DWORD dwAppCertSPLen,
            /* [size_is][size_is][string][out][in] */ __RPC__deref_inout_ecount_full_opt_string(*pdwRevocationURLLen) LPWSTR *pszRevocationURL,
            /* [ref][out][in] */ __RPC__inout DWORD *pdwRevocationURLLen,
            /* [out] */ __RPC__out DWORD *pdwRevocationBitFlag,
            /* [unique][out][in] */ __RPC__inout_opt ULONGLONG *pqwFileSize,
            /* [in] */ __RPC__in_opt IUnknown *pUnknown,
            /* [out] */ __RPC__deref_out_opt ISCPSecureExchange **ppExchange);
        
        END_INTERFACE
    } ISCPSecureQuery3Vtbl;

    interface ISCPSecureQuery3
    {
        CONST_VTBL struct ISCPSecureQuery3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCPSecureQuery3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCPSecureQuery3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCPSecureQuery3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCPSecureQuery3_GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac)	\
    ( (This)->lpVtbl -> GetDataDemands(This,pfuFlags,pdwMinRightsData,pdwMinExamineData,pdwMinDecideData,abMac) ) 

#define ISCPSecureQuery3_ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac)	\
    ( (This)->lpVtbl -> ExamineData(This,fuFlags,pwszExtension,pData,dwSize,abMac) ) 

#define ISCPSecureQuery3_MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac)	\
    ( (This)->lpVtbl -> MakeDecision(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,ppExchange,abMac) ) 

#define ISCPSecureQuery3_GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac)	\
    ( (This)->lpVtbl -> GetRights(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,ppRights,pnRightsCount,abMac) ) 


#define ISCPSecureQuery3_MakeDecision2(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange,abMac)	\
    ( (This)->lpVtbl -> MakeDecision2(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange,abMac) ) 


#define ISCPSecureQuery3_GetRightsOnClearChannel(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,pProgressCallback,ppRights,pnRightsCount)	\
    ( (This)->lpVtbl -> GetRightsOnClearChannel(This,pData,dwSize,pbSPSessionKey,dwSessionKeyLen,pStgGlobals,pProgressCallback,ppRights,pnRightsCount) ) 

#define ISCPSecureQuery3_MakeDecisionOnClearChannel(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pProgressCallback,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange)	\
    ( (This)->lpVtbl -> MakeDecisionOnClearChannel(This,fuFlags,pData,dwSize,dwAppSec,pbSPSessionKey,dwSessionKeyLen,pStorageGlobals,pProgressCallback,pAppCertApp,dwAppCertAppLen,pAppCertSP,dwAppCertSPLen,pszRevocationURL,pdwRevocationURLLen,pdwRevocationBitFlag,pqwFileSize,pUnknown,ppExchange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCPSecureQuery3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mswmdm_0000_0056 */
/* [local] */ 

#define SAC_MAC_LEN 8


extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0056_v0_0_s_ifspec;

#ifndef __IComponentAuthenticate_INTERFACE_DEFINED__
#define __IComponentAuthenticate_INTERFACE_DEFINED__

/* interface IComponentAuthenticate */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IComponentAuthenticate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A9889C00-6D2B-11d3-8496-00C04F79DBC0")
    IComponentAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SACAuth( 
            /* [in] */ DWORD dwProtocolID,
            /* [in] */ DWORD dwPass,
            /* [size_is][in] */ __RPC__in_ecount_full(dwDataInLen) BYTE *pbDataIn,
            /* [in] */ DWORD dwDataInLen,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwDataOutLen) BYTE **ppbDataOut,
            /* [out] */ __RPC__out DWORD *pdwDataOutLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SACGetProtocols( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwProtocolCount) DWORD **ppdwProtocols,
            /* [out] */ __RPC__out DWORD *pdwProtocolCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IComponentAuthenticateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IComponentAuthenticate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IComponentAuthenticate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IComponentAuthenticate * This);
        
        HRESULT ( STDMETHODCALLTYPE *SACAuth )( 
            __RPC__in IComponentAuthenticate * This,
            /* [in] */ DWORD dwProtocolID,
            /* [in] */ DWORD dwPass,
            /* [size_is][in] */ __RPC__in_ecount_full(dwDataInLen) BYTE *pbDataIn,
            /* [in] */ DWORD dwDataInLen,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwDataOutLen) BYTE **ppbDataOut,
            /* [out] */ __RPC__out DWORD *pdwDataOutLen);
        
        HRESULT ( STDMETHODCALLTYPE *SACGetProtocols )( 
            __RPC__in IComponentAuthenticate * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwProtocolCount) DWORD **ppdwProtocols,
            /* [out] */ __RPC__out DWORD *pdwProtocolCount);
        
        END_INTERFACE
    } IComponentAuthenticateVtbl;

    interface IComponentAuthenticate
    {
        CONST_VTBL struct IComponentAuthenticateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IComponentAuthenticate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IComponentAuthenticate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IComponentAuthenticate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IComponentAuthenticate_SACAuth(This,dwProtocolID,dwPass,pbDataIn,dwDataInLen,ppbDataOut,pdwDataOutLen)	\
    ( (This)->lpVtbl -> SACAuth(This,dwProtocolID,dwPass,pbDataIn,dwDataInLen,ppbDataOut,pdwDataOutLen) ) 

#define IComponentAuthenticate_SACGetProtocols(This,ppdwProtocols,pdwProtocolCount)	\
    ( (This)->lpVtbl -> SACGetProtocols(This,ppdwProtocols,pdwProtocolCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IComponentAuthenticate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mswmdm_0000_0057 */
/* [local] */ 

const GUID EVENT_WMDM_CONTENT_TRANSFER = { 0x339C9BF4, 0xBCFE, 0x4ED8, { 0x94, 0xDF,  0xEA,  0xF8,  0xC2,  0x6A,  0xB6,  0x1B } };


extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mswmdm_0000_0057_v0_0_s_ifspec;


#ifndef __MSWMDMLib_LIBRARY_DEFINED__
#define __MSWMDMLib_LIBRARY_DEFINED__

/* library MSWMDMLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSWMDMLib;

EXTERN_C const CLSID CLSID_MediaDevMgrClassFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("50040C1D-BDBF-4924-B873-F14D6C5BFD66")
MediaDevMgrClassFactory;
#endif

EXTERN_C const CLSID CLSID_MediaDevMgr;

#ifdef __cplusplus

class DECLSPEC_UUID("25BAAD81-3560-11D3-8471-00C04F79DBC0")
MediaDevMgr;
#endif

EXTERN_C const CLSID CLSID_WMDMDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("807B3CDF-357A-11d3-8471-00C04F79DBC0")
WMDMDevice;
#endif

EXTERN_C const CLSID CLSID_WMDMStorage;

#ifdef __cplusplus

class DECLSPEC_UUID("807B3CE0-357A-11d3-8471-00C04F79DBC0")
WMDMStorage;
#endif

EXTERN_C const CLSID CLSID_WMDMStorageGlobal;

#ifdef __cplusplus

class DECLSPEC_UUID("807B3CE1-357A-11d3-8471-00C04F79DBC0")
WMDMStorageGlobal;
#endif

EXTERN_C const CLSID CLSID_WMDMDeviceEnum;

#ifdef __cplusplus

class DECLSPEC_UUID("430E35AF-3971-11D3-8474-00C04F79DBC0")
WMDMDeviceEnum;
#endif

EXTERN_C const CLSID CLSID_WMDMStorageEnum;

#ifdef __cplusplus

class DECLSPEC_UUID("EB401A3B-3AF7-11d3-8474-00C04F79DBC0")
WMDMStorageEnum;
#endif
#endif /* __MSWMDMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mswmdm_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for mswmdm.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_IWMDMMetaData,0xEC3B0663,0x0951,0x460a,0x9A,0x80,0x0D,0xCE,0xED,0x3C,0x04,0x3C);


MIDL_DEFINE_GUID(IID, IID_IWMDeviceManager,0x1DCB3A00,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDeviceManager2,0x923E5249,0x8731,0x4c5b,0x9B,0x1C,0xB8,0xB6,0x0B,0x6E,0x46,0xAF);


MIDL_DEFINE_GUID(IID, IID_IWMDeviceManager3,0xaf185c41,0x100d,0x46ed,0xbe,0x2e,0x9c,0xe8,0xc4,0x45,0x94,0xef);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorageGlobals,0x1DCB3A07,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorage,0x1DCB3A06,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorage2,0x1ED5A144,0x5CD5,0x4683,0x9E,0xFF,0x72,0xCB,0xDB,0x2D,0x95,0x33);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorage3,0x97717EEA,0x926A,0x464e,0x96,0xA4,0x24,0x7B,0x02,0x16,0x02,0x6E);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorage4,0xc225bac5,0xa03a,0x40b8,0x9a,0x23,0x91,0xcf,0x47,0x8c,0x64,0xa6);


MIDL_DEFINE_GUID(IID, IID_IWMDMOperation,0x1DCB3A0B,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMOperation2,0x33445B48,0x7DF7,0x425c,0xAD,0x8F,0x0F,0xC6,0xD8,0x2F,0x9F,0x75);


MIDL_DEFINE_GUID(IID, IID_IWMDMOperation3,0xd1f9b46a,0x9ca8,0x46d8,0x9d,0x0f,0x1e,0xc9,0xba,0xe5,0x49,0x19);


MIDL_DEFINE_GUID(IID, IID_IWMDMProgress,0x1DCB3A0C,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMProgress2,0x3A43F550,0xB383,0x4e92,0xB0,0x4A,0xE6,0xBB,0xC6,0x60,0xFE,0xFC);


MIDL_DEFINE_GUID(IID, IID_IWMDMProgress3,0x21DE01CB,0x3BB4,0x4929,0xB2,0x1A,0x17,0xAF,0x3F,0x80,0xF6,0x58);


MIDL_DEFINE_GUID(IID, IID_IWMDMDevice,0x1DCB3A02,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMDevice2,0xE34F3D37,0x9D67,0x4fc1,0x92,0x52,0x62,0xD2,0x8B,0x2F,0x8B,0x55);


MIDL_DEFINE_GUID(IID, IID_IWMDMDevice3,0x6c03e4fe,0x05db,0x4dda,0x9e,0x3c,0x06,0x23,0x3a,0x6d,0x5d,0x65);


MIDL_DEFINE_GUID(IID, IID_IWMDMDeviceSession,0x82af0a65,0x9d96,0x412c,0x83,0xe5,0x3c,0x43,0xe4,0xb0,0x6c,0xc7);


MIDL_DEFINE_GUID(IID, IID_IWMDMEnumDevice,0x1DCB3A01,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMDeviceControl,0x1DCB3A04,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMEnumStorage,0x1DCB3A05,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorageControl,0x1DCB3A08,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorageControl2,0x972C2E88,0xBD6C,0x4125,0x8E,0x09,0x84,0xF8,0x37,0xE6,0x37,0xB6);


MIDL_DEFINE_GUID(IID, IID_IWMDMStorageControl3,0xB3266365,0xD4F3,0x4696,0x8D,0x53,0xBD,0x27,0xEC,0x60,0x99,0x3A);


MIDL_DEFINE_GUID(IID, IID_IWMDMObjectInfo,0x1DCB3A09,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IWMDMRevoked,0xEBECCEDB,0x88EE,0x4e55,0xB6,0xA4,0x8D,0x9F,0x07,0xD6,0x96,0xAA);


MIDL_DEFINE_GUID(IID, IID_IWMDMNotification,0x3F5E95C0,0x0F43,0x4ed4,0x93,0xD2,0xC8,0x9A,0x45,0xD5,0x9B,0x81);


MIDL_DEFINE_GUID(IID, IID_IMDServiceProvider,0x1DCB3A10,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDServiceProvider2,0xB2FA24B7,0xCDA3,0x4694,0x98,0x62,0x41,0x3A,0xE1,0xA3,0x48,0x19);


MIDL_DEFINE_GUID(IID, IID_IMDServiceProvider3,0x4ed13ef3,0xa971,0x4d19,0x9f,0x51,0x0e,0x18,0x26,0xb2,0xda,0x57);


MIDL_DEFINE_GUID(IID, IID_IMDSPEnumDevice,0x1DCB3A11,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPDevice,0x1DCB3A12,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPDevice2,0x420D16AD,0xC97D,0x4e00,0x82,0xAA,0x00,0xE9,0xF4,0x33,0x5D,0xDD);


MIDL_DEFINE_GUID(IID, IID_IMDSPDevice3,0x1a839845,0xfc55,0x487c,0x97,0x6f,0xee,0x38,0xac,0x0e,0x8c,0x4e);


MIDL_DEFINE_GUID(IID, IID_IMDSPDeviceControl,0x1DCB3A14,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPEnumStorage,0x1DCB3A15,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPStorage,0x1DCB3A16,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPStorage2,0x0A5E07A5,0x6454,0x4451,0x9C,0x36,0x1C,0x6A,0xE7,0xE2,0xB1,0xD6);


MIDL_DEFINE_GUID(IID, IID_IMDSPStorage3,0x6C669867,0x97ED,0x4a67,0x97,0x06,0x1C,0x55,0x29,0xD2,0xA4,0x14);


MIDL_DEFINE_GUID(IID, IID_IMDSPStorage4,0x3133b2c4,0x515c,0x481b,0xb1,0xce,0x39,0x32,0x7e,0xcb,0x4f,0x74);


MIDL_DEFINE_GUID(IID, IID_IMDSPStorageGlobals,0x1DCB3A17,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPObjectInfo,0x1DCB3A19,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPObject,0x1DCB3A18,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_IMDSPObject2,0x3f34cd3e,0x5907,0x4341,0x9a,0xf9,0x97,0xf4,0x18,0x7c,0x3a,0xa5);


MIDL_DEFINE_GUID(IID, IID_IMDSPDirectTransfer,0xc2fe57a8,0x9304,0x478c,0x9e,0xe4,0x47,0xe3,0x97,0xb9,0x12,0xd7);


MIDL_DEFINE_GUID(IID, IID_IMDSPRevoked,0xA4E8F2D4,0x3F31,0x464d,0xB5,0x3D,0x4F,0xC3,0x35,0x99,0x81,0x84);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureAuthenticate,0x1DCB3A0F,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureAuthenticate2,0xB580CFAE,0x1672,0x47e2,0xAC,0xAA,0x44,0xBB,0xEC,0xBC,0xAE,0x5B);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureQuery,0x1DCB3A0D,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureQuery2,0xEBE17E25,0x4FD7,0x4632,0xAF,0x46,0x6D,0x93,0xD4,0xFC,0xC7,0x2E);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureExchange,0x1DCB3A0E,0x33ED,0x11d3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureExchange2,0x6C62FC7B,0x2690,0x483F,0x9D,0x44,0x0A,0x20,0xCB,0x35,0x57,0x7C);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureExchange3,0xab4e77e4,0x8908,0x4b17,0xbd,0x2a,0xb1,0xdb,0xe6,0xdd,0x69,0xe1);


MIDL_DEFINE_GUID(IID, IID_ISCPSession,0x88a3e6ed,0xeee4,0x4619,0xbb,0xb3,0xfd,0x4f,0xb6,0x27,0x15,0xd1);


MIDL_DEFINE_GUID(IID, IID_ISCPSecureQuery3,0xB7EDD1A2,0x4DAB,0x484b,0xB3,0xC5,0xAD,0x39,0xB8,0xB4,0xC0,0xB1);


MIDL_DEFINE_GUID(IID, IID_IComponentAuthenticate,0xA9889C00,0x6D2B,0x11d3,0x84,0x96,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(IID, LIBID_MSWMDMLib,0x6EC6C744,0x355F,0x11D3,0x84,0x70,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_MediaDevMgrClassFactory,0x50040C1D,0xBDBF,0x4924,0xB8,0x73,0xF1,0x4D,0x6C,0x5B,0xFD,0x66);


MIDL_DEFINE_GUID(CLSID, CLSID_MediaDevMgr,0x25BAAD81,0x3560,0x11D3,0x84,0x71,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_WMDMDevice,0x807B3CDF,0x357A,0x11d3,0x84,0x71,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_WMDMStorage,0x807B3CE0,0x357A,0x11d3,0x84,0x71,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_WMDMStorageGlobal,0x807B3CE1,0x357A,0x11d3,0x84,0x71,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_WMDMDeviceEnum,0x430E35AF,0x3971,0x11D3,0x84,0x74,0x00,0xC0,0x4F,0x79,0xDB,0xC0);


MIDL_DEFINE_GUID(CLSID, CLSID_WMDMStorageEnum,0xEB401A3B,0x3AF7,0x11d3,0x84,0x74,0x00,0xC0,0x4F,0x79,0xDB,0xC0);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msvidctl.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msvidctl.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msvidctl_h__
#define __msvidctl_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IMSVidCtl_FWD_DEFINED__
#define __IMSVidCtl_FWD_DEFINED__
typedef interface IMSVidCtl IMSVidCtl;
#endif 	/* __IMSVidCtl_FWD_DEFINED__ */


#ifndef __IMSEventBinder_FWD_DEFINED__
#define __IMSEventBinder_FWD_DEFINED__
typedef interface IMSEventBinder IMSEventBinder;
#endif 	/* __IMSEventBinder_FWD_DEFINED__ */


#ifndef ___IMSVidCtlEvents_FWD_DEFINED__
#define ___IMSVidCtlEvents_FWD_DEFINED__
typedef interface _IMSVidCtlEvents _IMSVidCtlEvents;
#endif 	/* ___IMSVidCtlEvents_FWD_DEFINED__ */


#ifndef __MSVidAnalogTunerDevice_FWD_DEFINED__
#define __MSVidAnalogTunerDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogTunerDevice MSVidAnalogTunerDevice;
#else
typedef struct MSVidAnalogTunerDevice MSVidAnalogTunerDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogTunerDevice_FWD_DEFINED__ */


#ifndef __MSVidBDATunerDevice_FWD_DEFINED__
#define __MSVidBDATunerDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidBDATunerDevice MSVidBDATunerDevice;
#else
typedef struct MSVidBDATunerDevice MSVidBDATunerDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidBDATunerDevice_FWD_DEFINED__ */


#ifndef __MSVidFilePlaybackDevice_FWD_DEFINED__
#define __MSVidFilePlaybackDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidFilePlaybackDevice MSVidFilePlaybackDevice;
#else
typedef struct MSVidFilePlaybackDevice MSVidFilePlaybackDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidFilePlaybackDevice_FWD_DEFINED__ */


#ifndef __MSVidWebDVD_FWD_DEFINED__
#define __MSVidWebDVD_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidWebDVD MSVidWebDVD;
#else
typedef struct MSVidWebDVD MSVidWebDVD;
#endif /* __cplusplus */

#endif 	/* __MSVidWebDVD_FWD_DEFINED__ */


#ifndef __MSVidWebDVDAdm_FWD_DEFINED__
#define __MSVidWebDVDAdm_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidWebDVDAdm MSVidWebDVDAdm;
#else
typedef struct MSVidWebDVDAdm MSVidWebDVDAdm;
#endif /* __cplusplus */

#endif 	/* __MSVidWebDVDAdm_FWD_DEFINED__ */


#ifndef __MSVidVideoRenderer_FWD_DEFINED__
#define __MSVidVideoRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidVideoRenderer MSVidVideoRenderer;
#else
typedef struct MSVidVideoRenderer MSVidVideoRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidVideoRenderer_FWD_DEFINED__ */


#ifndef __MSVidVMR9_FWD_DEFINED__
#define __MSVidVMR9_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidVMR9 MSVidVMR9;
#else
typedef struct MSVidVMR9 MSVidVMR9;
#endif /* __cplusplus */

#endif 	/* __MSVidVMR9_FWD_DEFINED__ */


#ifndef __MSVidEVR_FWD_DEFINED__
#define __MSVidEVR_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidEVR MSVidEVR;
#else
typedef struct MSVidEVR MSVidEVR;
#endif /* __cplusplus */

#endif 	/* __MSVidEVR_FWD_DEFINED__ */


#ifndef __MSVidAudioRenderer_FWD_DEFINED__
#define __MSVidAudioRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAudioRenderer MSVidAudioRenderer;
#else
typedef struct MSVidAudioRenderer MSVidAudioRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidAudioRenderer_FWD_DEFINED__ */


#ifndef __MSVidGenericSink_FWD_DEFINED__
#define __MSVidGenericSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidGenericSink MSVidGenericSink;
#else
typedef struct MSVidGenericSink MSVidGenericSink;
#endif /* __cplusplus */

#endif 	/* __MSVidGenericSink_FWD_DEFINED__ */


#ifndef __MSVidStreamBufferSink_FWD_DEFINED__
#define __MSVidStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidStreamBufferSink MSVidStreamBufferSink;
#else
typedef struct MSVidStreamBufferSink MSVidStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidStreamBufferSource_FWD_DEFINED__
#define __MSVidStreamBufferSource_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidStreamBufferSource MSVidStreamBufferSource;
#else
typedef struct MSVidStreamBufferSource MSVidStreamBufferSource;
#endif /* __cplusplus */

#endif 	/* __MSVidStreamBufferSource_FWD_DEFINED__ */


#ifndef __MSVidStreamBufferV2Source_FWD_DEFINED__
#define __MSVidStreamBufferV2Source_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidStreamBufferV2Source MSVidStreamBufferV2Source;
#else
typedef struct MSVidStreamBufferV2Source MSVidStreamBufferV2Source;
#endif /* __cplusplus */

#endif 	/* __MSVidStreamBufferV2Source_FWD_DEFINED__ */


#ifndef __MSVidEncoder_FWD_DEFINED__
#define __MSVidEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidEncoder MSVidEncoder;
#else
typedef struct MSVidEncoder MSVidEncoder;
#endif /* __cplusplus */

#endif 	/* __MSVidEncoder_FWD_DEFINED__ */


#ifndef __MSVidITVCapture_FWD_DEFINED__
#define __MSVidITVCapture_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidITVCapture MSVidITVCapture;
#else
typedef struct MSVidITVCapture MSVidITVCapture;
#endif /* __cplusplus */

#endif 	/* __MSVidITVCapture_FWD_DEFINED__ */


#ifndef __MSVidITVPlayback_FWD_DEFINED__
#define __MSVidITVPlayback_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidITVPlayback MSVidITVPlayback;
#else
typedef struct MSVidITVPlayback MSVidITVPlayback;
#endif /* __cplusplus */

#endif 	/* __MSVidITVPlayback_FWD_DEFINED__ */


#ifndef __MSVidCCA_FWD_DEFINED__
#define __MSVidCCA_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidCCA MSVidCCA;
#else
typedef struct MSVidCCA MSVidCCA;
#endif /* __cplusplus */

#endif 	/* __MSVidCCA_FWD_DEFINED__ */


#ifndef __MSVidClosedCaptioning_FWD_DEFINED__
#define __MSVidClosedCaptioning_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidClosedCaptioning MSVidClosedCaptioning;
#else
typedef struct MSVidClosedCaptioning MSVidClosedCaptioning;
#endif /* __cplusplus */

#endif 	/* __MSVidClosedCaptioning_FWD_DEFINED__ */


#ifndef __MSVidClosedCaptioningSI_FWD_DEFINED__
#define __MSVidClosedCaptioningSI_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidClosedCaptioningSI MSVidClosedCaptioningSI;
#else
typedef struct MSVidClosedCaptioningSI MSVidClosedCaptioningSI;
#endif /* __cplusplus */

#endif 	/* __MSVidClosedCaptioningSI_FWD_DEFINED__ */


#ifndef __MSVidDataServices_FWD_DEFINED__
#define __MSVidDataServices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDataServices MSVidDataServices;
#else
typedef struct MSVidDataServices MSVidDataServices;
#endif /* __cplusplus */

#endif 	/* __MSVidDataServices_FWD_DEFINED__ */


#ifndef __MSVidXDS_FWD_DEFINED__
#define __MSVidXDS_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidXDS MSVidXDS;
#else
typedef struct MSVidXDS MSVidXDS;
#endif /* __cplusplus */

#endif 	/* __MSVidXDS_FWD_DEFINED__ */


#ifndef __MSVidAnalogCaptureToDataServices_FWD_DEFINED__
#define __MSVidAnalogCaptureToDataServices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogCaptureToDataServices MSVidAnalogCaptureToDataServices;
#else
typedef struct MSVidAnalogCaptureToDataServices MSVidAnalogCaptureToDataServices;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogCaptureToDataServices_FWD_DEFINED__ */


#ifndef __MSVidDataServicesToStreamBufferSink_FWD_DEFINED__
#define __MSVidDataServicesToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDataServicesToStreamBufferSink MSVidDataServicesToStreamBufferSink;
#else
typedef struct MSVidDataServicesToStreamBufferSink MSVidDataServicesToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidDataServicesToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidDataServicesToXDS_FWD_DEFINED__
#define __MSVidDataServicesToXDS_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDataServicesToXDS MSVidDataServicesToXDS;
#else
typedef struct MSVidDataServicesToXDS MSVidDataServicesToXDS;
#endif /* __cplusplus */

#endif 	/* __MSVidDataServicesToXDS_FWD_DEFINED__ */


#ifndef __MSVidAnalogCaptureToXDS_FWD_DEFINED__
#define __MSVidAnalogCaptureToXDS_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogCaptureToXDS MSVidAnalogCaptureToXDS;
#else
typedef struct MSVidAnalogCaptureToXDS MSVidAnalogCaptureToXDS;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogCaptureToXDS_FWD_DEFINED__ */


#ifndef __MSVidCtl_FWD_DEFINED__
#define __MSVidCtl_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidCtl MSVidCtl;
#else
typedef struct MSVidCtl MSVidCtl;
#endif /* __cplusplus */

#endif 	/* __MSVidCtl_FWD_DEFINED__ */


#ifndef __MSVidInputDevices_FWD_DEFINED__
#define __MSVidInputDevices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidInputDevices MSVidInputDevices;
#else
typedef struct MSVidInputDevices MSVidInputDevices;
#endif /* __cplusplus */

#endif 	/* __MSVidInputDevices_FWD_DEFINED__ */


#ifndef __MSVidOutputDevices_FWD_DEFINED__
#define __MSVidOutputDevices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidOutputDevices MSVidOutputDevices;
#else
typedef struct MSVidOutputDevices MSVidOutputDevices;
#endif /* __cplusplus */

#endif 	/* __MSVidOutputDevices_FWD_DEFINED__ */


#ifndef __MSVidVideoRendererDevices_FWD_DEFINED__
#define __MSVidVideoRendererDevices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidVideoRendererDevices MSVidVideoRendererDevices;
#else
typedef struct MSVidVideoRendererDevices MSVidVideoRendererDevices;
#endif /* __cplusplus */

#endif 	/* __MSVidVideoRendererDevices_FWD_DEFINED__ */


#ifndef __MSVidAudioRendererDevices_FWD_DEFINED__
#define __MSVidAudioRendererDevices_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAudioRendererDevices MSVidAudioRendererDevices;
#else
typedef struct MSVidAudioRendererDevices MSVidAudioRendererDevices;
#endif /* __cplusplus */

#endif 	/* __MSVidAudioRendererDevices_FWD_DEFINED__ */


#ifndef __MSVidFeatures_FWD_DEFINED__
#define __MSVidFeatures_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidFeatures MSVidFeatures;
#else
typedef struct MSVidFeatures MSVidFeatures;
#endif /* __cplusplus */

#endif 	/* __MSVidFeatures_FWD_DEFINED__ */


#ifndef __MSVidGenericComposite_FWD_DEFINED__
#define __MSVidGenericComposite_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidGenericComposite MSVidGenericComposite;
#else
typedef struct MSVidGenericComposite MSVidGenericComposite;
#endif /* __cplusplus */

#endif 	/* __MSVidGenericComposite_FWD_DEFINED__ */


#ifndef __MSVidAnalogCaptureToOverlayMixer_FWD_DEFINED__
#define __MSVidAnalogCaptureToOverlayMixer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogCaptureToOverlayMixer MSVidAnalogCaptureToOverlayMixer;
#else
typedef struct MSVidAnalogCaptureToOverlayMixer MSVidAnalogCaptureToOverlayMixer;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogCaptureToOverlayMixer_FWD_DEFINED__ */


#ifndef __MSVidWebDVDToVideoRenderer_FWD_DEFINED__
#define __MSVidWebDVDToVideoRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidWebDVDToVideoRenderer MSVidWebDVDToVideoRenderer;
#else
typedef struct MSVidWebDVDToVideoRenderer MSVidWebDVDToVideoRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidWebDVDToVideoRenderer_FWD_DEFINED__ */


#ifndef __MSVidWebDVDToAudioRenderer_FWD_DEFINED__
#define __MSVidWebDVDToAudioRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidWebDVDToAudioRenderer MSVidWebDVDToAudioRenderer;
#else
typedef struct MSVidWebDVDToAudioRenderer MSVidWebDVDToAudioRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidWebDVDToAudioRenderer_FWD_DEFINED__ */


#ifndef __MSVidMPEG2DecoderToClosedCaptioning_FWD_DEFINED__
#define __MSVidMPEG2DecoderToClosedCaptioning_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidMPEG2DecoderToClosedCaptioning MSVidMPEG2DecoderToClosedCaptioning;
#else
typedef struct MSVidMPEG2DecoderToClosedCaptioning MSVidMPEG2DecoderToClosedCaptioning;
#endif /* __cplusplus */

#endif 	/* __MSVidMPEG2DecoderToClosedCaptioning_FWD_DEFINED__ */


#ifndef __MSVidAnalogCaptureToStreamBufferSink_FWD_DEFINED__
#define __MSVidAnalogCaptureToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogCaptureToStreamBufferSink MSVidAnalogCaptureToStreamBufferSink;
#else
typedef struct MSVidAnalogCaptureToStreamBufferSink MSVidAnalogCaptureToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogCaptureToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidDigitalCaptureToStreamBufferSink_FWD_DEFINED__
#define __MSVidDigitalCaptureToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDigitalCaptureToStreamBufferSink MSVidDigitalCaptureToStreamBufferSink;
#else
typedef struct MSVidDigitalCaptureToStreamBufferSink MSVidDigitalCaptureToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidDigitalCaptureToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidITVToStreamBufferSink_FWD_DEFINED__
#define __MSVidITVToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidITVToStreamBufferSink MSVidITVToStreamBufferSink;
#else
typedef struct MSVidITVToStreamBufferSink MSVidITVToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidITVToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidCCAToStreamBufferSink_FWD_DEFINED__
#define __MSVidCCAToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidCCAToStreamBufferSink MSVidCCAToStreamBufferSink;
#else
typedef struct MSVidCCAToStreamBufferSink MSVidCCAToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidCCAToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidEncoderToStreamBufferSink_FWD_DEFINED__
#define __MSVidEncoderToStreamBufferSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidEncoderToStreamBufferSink MSVidEncoderToStreamBufferSink;
#else
typedef struct MSVidEncoderToStreamBufferSink MSVidEncoderToStreamBufferSink;
#endif /* __cplusplus */

#endif 	/* __MSVidEncoderToStreamBufferSink_FWD_DEFINED__ */


#ifndef __MSVidFilePlaybackToVideoRenderer_FWD_DEFINED__
#define __MSVidFilePlaybackToVideoRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidFilePlaybackToVideoRenderer MSVidFilePlaybackToVideoRenderer;
#else
typedef struct MSVidFilePlaybackToVideoRenderer MSVidFilePlaybackToVideoRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidFilePlaybackToVideoRenderer_FWD_DEFINED__ */


#ifndef __MSVidFilePlaybackToAudioRenderer_FWD_DEFINED__
#define __MSVidFilePlaybackToAudioRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidFilePlaybackToAudioRenderer MSVidFilePlaybackToAudioRenderer;
#else
typedef struct MSVidFilePlaybackToAudioRenderer MSVidFilePlaybackToAudioRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidFilePlaybackToAudioRenderer_FWD_DEFINED__ */


#ifndef __MSVidAnalogTVToEncoder_FWD_DEFINED__
#define __MSVidAnalogTVToEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogTVToEncoder MSVidAnalogTVToEncoder;
#else
typedef struct MSVidAnalogTVToEncoder MSVidAnalogTVToEncoder;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogTVToEncoder_FWD_DEFINED__ */


#ifndef __MSVidStreamBufferSourceToVideoRenderer_FWD_DEFINED__
#define __MSVidStreamBufferSourceToVideoRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidStreamBufferSourceToVideoRenderer MSVidStreamBufferSourceToVideoRenderer;
#else
typedef struct MSVidStreamBufferSourceToVideoRenderer MSVidStreamBufferSourceToVideoRenderer;
#endif /* __cplusplus */

#endif 	/* __MSVidStreamBufferSourceToVideoRenderer_FWD_DEFINED__ */


#ifndef __MSVidAnalogCaptureToCCA_FWD_DEFINED__
#define __MSVidAnalogCaptureToCCA_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidAnalogCaptureToCCA MSVidAnalogCaptureToCCA;
#else
typedef struct MSVidAnalogCaptureToCCA MSVidAnalogCaptureToCCA;
#endif /* __cplusplus */

#endif 	/* __MSVidAnalogCaptureToCCA_FWD_DEFINED__ */


#ifndef __MSVidDigitalCaptureToCCA_FWD_DEFINED__
#define __MSVidDigitalCaptureToCCA_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDigitalCaptureToCCA MSVidDigitalCaptureToCCA;
#else
typedef struct MSVidDigitalCaptureToCCA MSVidDigitalCaptureToCCA;
#endif /* __cplusplus */

#endif 	/* __MSVidDigitalCaptureToCCA_FWD_DEFINED__ */


#ifndef __MSVidDigitalCaptureToITV_FWD_DEFINED__
#define __MSVidDigitalCaptureToITV_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDigitalCaptureToITV MSVidDigitalCaptureToITV;
#else
typedef struct MSVidDigitalCaptureToITV MSVidDigitalCaptureToITV;
#endif /* __cplusplus */

#endif 	/* __MSVidDigitalCaptureToITV_FWD_DEFINED__ */


#ifndef __MSVidSBESourceToITV_FWD_DEFINED__
#define __MSVidSBESourceToITV_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidSBESourceToITV MSVidSBESourceToITV;
#else
typedef struct MSVidSBESourceToITV MSVidSBESourceToITV;
#endif /* __cplusplus */

#endif 	/* __MSVidSBESourceToITV_FWD_DEFINED__ */


#ifndef __MSVidSBESourceToCC_FWD_DEFINED__
#define __MSVidSBESourceToCC_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidSBESourceToCC MSVidSBESourceToCC;
#else
typedef struct MSVidSBESourceToCC MSVidSBESourceToCC;
#endif /* __cplusplus */

#endif 	/* __MSVidSBESourceToCC_FWD_DEFINED__ */


#ifndef __MSVidSBESourceToGenericSink_FWD_DEFINED__
#define __MSVidSBESourceToGenericSink_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidSBESourceToGenericSink MSVidSBESourceToGenericSink;
#else
typedef struct MSVidSBESourceToGenericSink MSVidSBESourceToGenericSink;
#endif /* __cplusplus */

#endif 	/* __MSVidSBESourceToGenericSink_FWD_DEFINED__ */


#ifndef __MSVidCCToVMR_FWD_DEFINED__
#define __MSVidCCToVMR_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidCCToVMR MSVidCCToVMR;
#else
typedef struct MSVidCCToVMR MSVidCCToVMR;
#endif /* __cplusplus */

#endif 	/* __MSVidCCToVMR_FWD_DEFINED__ */


#ifndef __MSVidCCToAR_FWD_DEFINED__
#define __MSVidCCToAR_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidCCToAR MSVidCCToAR;
#else
typedef struct MSVidCCToAR MSVidCCToAR;
#endif /* __cplusplus */

#endif 	/* __MSVidCCToAR_FWD_DEFINED__ */


#ifndef __MSEventBinder_FWD_DEFINED__
#define __MSEventBinder_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSEventBinder MSEventBinder;
#else
typedef struct MSEventBinder MSEventBinder;
#endif /* __cplusplus */

#endif 	/* __MSEventBinder_FWD_DEFINED__ */


#ifndef __MSVidStreamBufferRecordingControl_FWD_DEFINED__
#define __MSVidStreamBufferRecordingControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidStreamBufferRecordingControl MSVidStreamBufferRecordingControl;
#else
typedef struct MSVidStreamBufferRecordingControl MSVidStreamBufferRecordingControl;
#endif /* __cplusplus */

#endif 	/* __MSVidStreamBufferRecordingControl_FWD_DEFINED__ */


#ifndef __MSVidRect_FWD_DEFINED__
#define __MSVidRect_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidRect MSVidRect;
#else
typedef struct MSVidRect MSVidRect;
#endif /* __cplusplus */

#endif 	/* __MSVidRect_FWD_DEFINED__ */


#ifndef __MSVidDevice_FWD_DEFINED__
#define __MSVidDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDevice MSVidDevice;
#else
typedef struct MSVidDevice MSVidDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidDevice_FWD_DEFINED__ */


#ifndef __MSVidDevice2_FWD_DEFINED__
#define __MSVidDevice2_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidDevice2 MSVidDevice2;
#else
typedef struct MSVidDevice2 MSVidDevice2;
#endif /* __cplusplus */

#endif 	/* __MSVidDevice2_FWD_DEFINED__ */


#ifndef __MSVidInputDevice_FWD_DEFINED__
#define __MSVidInputDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidInputDevice MSVidInputDevice;
#else
typedef struct MSVidInputDevice MSVidInputDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidInputDevice_FWD_DEFINED__ */


#ifndef __MSVidVideoInputDevice_FWD_DEFINED__
#define __MSVidVideoInputDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidVideoInputDevice MSVidVideoInputDevice;
#else
typedef struct MSVidVideoInputDevice MSVidVideoInputDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidVideoInputDevice_FWD_DEFINED__ */


#ifndef __MSVidVideoPlaybackDevice_FWD_DEFINED__
#define __MSVidVideoPlaybackDevice_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidVideoPlaybackDevice MSVidVideoPlaybackDevice;
#else
typedef struct MSVidVideoPlaybackDevice MSVidVideoPlaybackDevice;
#endif /* __cplusplus */

#endif 	/* __MSVidVideoPlaybackDevice_FWD_DEFINED__ */


#ifndef __MSVidFeature_FWD_DEFINED__
#define __MSVidFeature_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidFeature MSVidFeature;
#else
typedef struct MSVidFeature MSVidFeature;
#endif /* __cplusplus */

#endif 	/* __MSVidFeature_FWD_DEFINED__ */


#ifndef __MSVidOutput_FWD_DEFINED__
#define __MSVidOutput_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSVidOutput MSVidOutput;
#else
typedef struct MSVidOutput MSVidOutput;
#endif /* __cplusplus */

#endif 	/* __MSVidOutput_FWD_DEFINED__ */


/* header files for imported files */
#include "mshtml.h"
#include "segment.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msvidctl_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1999-2000.
//
//--------------------------------------------------------------------------
#pragma once
typedef 
enum MSViddispidList
    {	dispidInputs	= 0,
	dispidOutputs	= ( dispidInputs + 1 ) ,
	dispid_Inputs	= ( dispidOutputs + 1 ) ,
	dispid_Outputs	= ( dispid_Inputs + 1 ) ,
	dispidVideoRenderers	= ( dispid_Outputs + 1 ) ,
	dispidAudioRenderers	= ( dispidVideoRenderers + 1 ) ,
	dispidFeatures	= ( dispidAudioRenderers + 1 ) ,
	dispidInput	= ( dispidFeatures + 1 ) ,
	dispidOutput	= ( dispidInput + 1 ) ,
	dispidVideoRenderer	= ( dispidOutput + 1 ) ,
	dispidAudioRenderer	= ( dispidVideoRenderer + 1 ) ,
	dispidSelectedFeatures	= ( dispidAudioRenderer + 1 ) ,
	dispidView	= ( dispidSelectedFeatures + 1 ) ,
	dispidBuild	= ( dispidView + 1 ) ,
	dispidPause	= ( dispidBuild + 1 ) ,
	dispidRun	= ( dispidPause + 1 ) ,
	dispidStop	= ( dispidRun + 1 ) ,
	dispidDecompose	= ( dispidStop + 1 ) ,
	dispidDisplaySize	= ( dispidDecompose + 1 ) ,
	dispidMaintainAspectRatio	= ( dispidDisplaySize + 1 ) ,
	dispidColorKey	= ( dispidMaintainAspectRatio + 1 ) ,
	dispidStateChange	= ( dispidColorKey + 1 ) ,
	dispidgetState	= ( dispidStateChange + 1 ) ,
	dispidunbind	= ( dispidgetState + 1 ) ,
	dispidbind	= ( dispidunbind + 1 ) ,
	dispidDisableVideo	= ( dispidbind + 1 ) ,
	dispidDisableAudio	= ( dispidDisableVideo + 1 ) ,
	dispidViewNext	= ( dispidDisableAudio + 1 ) ,
	dispidServiceP	= ( dispidViewNext + 1 ) 
    } 	MSViddispidList;

typedef 
enum DisplaySizeList
    {	dslDefaultSize	= 0,
	dslSourceSize	= 0,
	dslHalfSourceSize	= ( dslSourceSize + 1 ) ,
	dslDoubleSourceSize	= ( dslHalfSourceSize + 1 ) ,
	dslFullScreen	= ( dslDoubleSourceSize + 1 ) ,
	dslHalfScreen	= ( dslFullScreen + 1 ) ,
	dslQuarterScreen	= ( dslHalfScreen + 1 ) ,
	dslSixteenthScreen	= ( dslQuarterScreen + 1 ) 
    } 	DisplaySizeList;

typedef 
enum MSVidCtlStateList
    {	STATE_UNBUILT	= -1,
	STATE_STOP	= ( STATE_UNBUILT + 1 ) ,
	STATE_PAUSE	= ( STATE_STOP + 1 ) ,
	STATE_PLAY	= ( STATE_PAUSE + 1 ) 
    } 	MSVidCtlStateList;



extern RPC_IF_HANDLE __MIDL_itf_msvidctl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msvidctl_0000_0000_v0_0_s_ifspec;

#ifndef __IMSVidCtl_INTERFACE_DEFINED__
#define __IMSVidCtl_INTERFACE_DEFINED__

/* interface IMSVidCtl */
/* [unique][helpstring][nonextensible][hidden][dual][uuid][object] */ 


EXTERN_C const IID IID_IMSVidCtl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B0EDF162-910A-11D2-B632-00C04F79498E")
    IMSVidCtl : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ VARIANT_BOOL vbool) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ __RPC__out OLE_COLOR *backcolor) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ OLE_COLOR backcolor) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL vbool) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL vbool) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ __RPC__deref_out_opt HWND *phwnd) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DisplaySize( 
            /* [retval][out] */ __RPC__out DisplaySizeList *CurrentValue) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DisplaySize( 
            /* [in] */ DisplaySizeList NewValue) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaintainAspectRatio( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *CurrentValue) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaintainAspectRatio( 
            /* [in] */ VARIANT_BOOL NewValue) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorKey( 
            /* [retval][out] */ __RPC__out OLE_COLOR *CurrentValue) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorKey( 
            /* [in] */ OLE_COLOR NewValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_InputsAvailable( 
            /* [in] */ __RPC__in BSTR CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevices **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutputsAvailable( 
            /* [in] */ __RPC__in BSTR CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal) = 0;
        
        virtual /* [helpstring][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__InputsAvailable( 
            /* [in] */ __RPC__in LPCGUID CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevices **pVal) = 0;
        
        virtual /* [helpstring][restricted][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__OutputsAvailable( 
            /* [in] */ __RPC__in LPCGUID CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoRenderersAvailable( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRendererDevices **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioRenderersAvailable( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRendererDevices **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FeaturesAvailable( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeatures **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_InputActive( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevice **pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_InputActive( 
            /* [in] */ __RPC__in_opt IMSVidInputDevice *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutputsActive( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutputsActive( 
            /* [in] */ __RPC__in_opt IMSVidOutputDevices *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VideoRendererActive( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRenderer **pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_VideoRendererActive( 
            /* [in] */ __RPC__in_opt IMSVidVideoRenderer *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AudioRendererActive( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRenderer **pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AudioRendererActive( 
            /* [in] */ __RPC__in_opt IMSVidAudioRenderer *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FeaturesActive( 
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeatures **pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_FeaturesActive( 
            /* [in] */ __RPC__in_opt IMSVidFeatures *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out MSVidCtlStateList *lState) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE View( 
            /* [in] */ __RPC__in VARIANT *v) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Build( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Run( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Decompose( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DisableVideo( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DisableAudio( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ViewNext( 
            /* [in] */ __RPC__in VARIANT *v) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSVidCtlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSVidCtl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSVidCtl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSVidCtl * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSVidCtl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSize )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSize )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ VARIANT_BOOL vbool);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out OLE_COLOR *backcolor);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackColor )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ OLE_COLOR backcolor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ VARIANT_BOOL vbool);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbool);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ VARIANT_BOOL vbool);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt HWND *phwnd);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IMSVidCtl * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySize )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out DisplaySizeList *CurrentValue);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySize )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ DisplaySizeList NewValue);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaintainAspectRatio )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *CurrentValue);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaintainAspectRatio )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ VARIANT_BOOL NewValue);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorKey )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out OLE_COLOR *CurrentValue);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorKey )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ OLE_COLOR NewValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputsAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in BSTR CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevices **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputsAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in BSTR CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal);
        
        /* [helpstring][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__InputsAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in LPCGUID CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevices **pVal);
        
        /* [helpstring][restricted][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__OutputsAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in LPCGUID CategoryGuid,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoRenderersAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRendererDevices **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioRenderersAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRendererDevices **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FeaturesAvailable )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeatures **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputActive )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidInputDevice **pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InputActive )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in_opt IMSVidInputDevice *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputsActive )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidOutputDevices **pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputsActive )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in_opt IMSVidOutputDevices *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoRendererActive )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidVideoRenderer **pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoRendererActive )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in_opt IMSVidVideoRenderer *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AudioRendererActive )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidAudioRenderer **pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AudioRendererActive )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in_opt IMSVidAudioRenderer *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FeaturesActive )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSVidFeatures **pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FeaturesActive )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in_opt IMSVidFeatures *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in IMSVidCtl * This,
            /* [retval][out] */ __RPC__out MSVidCtlStateList *lState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *View )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Build )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Decompose )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DisableVideo )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DisableAudio )( 
            __RPC__in IMSVidCtl * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ViewNext )( 
            __RPC__in IMSVidCtl * This,
            /* [in] */ __RPC__in VARIANT *v);
        
        END_INTERFACE
    } IMSVidCtlVtbl;

    interface IMSVidCtl
    {
        CONST_VTBL struct IMSVidCtlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSVidCtl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSVidCtl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSVidCtl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSVidCtl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSVidCtl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSVidCtl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSVidCtl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSVidCtl_get_AutoSize(This,pbool)	\
    ( (This)->lpVtbl -> get_AutoSize(This,pbool) ) 

#define IMSVidCtl_put_AutoSize(This,vbool)	\
    ( (This)->lpVtbl -> put_AutoSize(This,vbool) ) 

#define IMSVidCtl_get_BackColor(This,backcolor)	\
    ( (This)->lpVtbl -> get_BackColor(This,backcolor) ) 

#define IMSVidCtl_put_BackColor(This,backcolor)	\
    ( (This)->lpVtbl -> put_BackColor(This,backcolor) ) 

#define IMSVidCtl_get_Enabled(This,pbool)	\
    ( (This)->lpVtbl -> get_Enabled(This,pbool) ) 

#define IMSVidCtl_put_Enabled(This,vbool)	\
    ( (This)->lpVtbl -> put_Enabled(This,vbool) ) 

#define IMSVidCtl_get_TabStop(This,pbool)	\
    ( (This)->lpVtbl -> get_TabStop(This,pbool) ) 

#define IMSVidCtl_put_TabStop(This,vbool)	\
    ( (This)->lpVtbl -> put_TabStop(This,vbool) ) 

#define IMSVidCtl_get_Window(This,phwnd)	\
    ( (This)->lpVtbl -> get_Window(This,phwnd) ) 

#define IMSVidCtl_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSVidCtl_get_DisplaySize(This,CurrentValue)	\
    ( (This)->lpVtbl -> get_DisplaySize(This,CurrentValue) ) 

#define IMSVidCtl_put_DisplaySize(This,NewValue)	\
    ( (This)->lpVtbl -> put_DisplaySize(This,NewValue) ) 

#define IMSVidCtl_get_MaintainAspectRatio(This,CurrentValue)	\
    ( (This)->lpVtbl -> get_MaintainAspectRatio(This,CurrentValue) ) 

#define IMSVidCtl_put_MaintainAspectRatio(This,NewValue)	\
    ( (This)->lpVtbl -> put_MaintainAspectRatio(This,NewValue) ) 

#define IMSVidCtl_get_ColorKey(This,CurrentValue)	\
    ( (This)->lpVtbl -> get_ColorKey(This,CurrentValue) ) 

#define IMSVidCtl_put_ColorKey(This,NewValue)	\
    ( (This)->lpVtbl -> put_ColorKey(This,NewValue) ) 

#define IMSVidCtl_get_InputsAvailable(This,CategoryGuid,pVal)	\
    ( (This)->lpVtbl -> get_InputsAvailable(This,CategoryGuid,pVal) ) 

#define IMSVidCtl_get_OutputsAvailable(This,CategoryGuid,pVal)	\
    ( (This)->lpVtbl -> get_OutputsAvailable(This,CategoryGuid,pVal) ) 

#define IMSVidCtl_get__InputsAvailable(This,CategoryGuid,pVal)	\
    ( (This)->lpVtbl -> get__InputsAvailable(This,CategoryGuid,pVal) ) 

#define IMSVidCtl_get__OutputsAvailable(This,CategoryGuid,pVal)	\
    ( (This)->lpVtbl -> get__OutputsAvailable(This,CategoryGuid,pVal) ) 

#define IMSVidCtl_get_VideoRenderersAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_VideoRenderersAvailable(This,pVal) ) 

#define IMSVidCtl_get_AudioRenderersAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_AudioRenderersAvailable(This,pVal) ) 

#define IMSVidCtl_get_FeaturesAvailable(This,pVal)	\
    ( (This)->lpVtbl -> get_FeaturesAvailable(This,pVal) ) 

#define IMSVidCtl_get_InputActive(This,pVal)	\
    ( (This)->lpVtbl -> get_InputActive(This,pVal) ) 

#define IMSVidCtl_put_InputActive(This,pVal)	\
    ( (This)->lpVtbl -> put_InputActive(This,pVal) ) 

#define IMSVidCtl_get_OutputsActive(This,pVal)	\
    ( (This)->lpVtbl -> get_OutputsActive(This,pVal) ) 

#define IMSVidCtl_put_OutputsActive(This,pVal)	\
    ( (This)->lpVtbl -> put_OutputsActive(This,pVal) ) 

#define IMSVidCtl_get_VideoRendererActive(This,pVal)	\
    ( (This)->lpVtbl -> get_VideoRendererActive(This,pVal) ) 

#define IMSVidCtl_put_VideoRendererActive(This,pVal)	\
    ( (This)->lpVtbl -> put_VideoRendererActive(This,pVal) ) 

#define IMSVidCtl_get_AudioRendererActive(This,pVal)	\
    ( (This)->lpVtbl -> get_AudioRendererActive(This,pVal) ) 

#define IMSVidCtl_put_AudioRendererActive(This,pVal)	\
    ( (This)->lpVtbl -> put_AudioRendererActive(This,pVal) ) 

#define IMSVidCtl_get_FeaturesActive(This,pVal)	\
    ( (This)->lpVtbl -> get_FeaturesActive(This,pVal) ) 

#define IMSVidCtl_put_FeaturesActive(This,pVal)	\
    ( (This)->lpVtbl -> put_FeaturesActive(This,pVal) ) 

#define IMSVidCtl_get_State(This,lState)	\
    ( (This)->lpVtbl -> get_State(This,lState) ) 

#define IMSVidCtl_View(This,v)	\
    ( (This)->lpVtbl -> View(This,v) ) 

#define IMSVidCtl_Build(This)	\
    ( (This)->lpVtbl -> Build(This) ) 

#define IMSVidCtl_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSVidCtl_Run(This)	\
    ( (This)->lpVtbl -> Run(This) ) 

#define IMSVidCtl_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IMSVidCtl_Decompose(This)	\
    ( (This)->lpVtbl -> Decompose(This) ) 

#define IMSVidCtl_DisableVideo(This)	\
    ( (This)->lpVtbl -> DisableVideo(This) ) 

#define IMSVidCtl_DisableAudio(This)	\
    ( (This)->lpVtbl -> DisableAudio(This) ) 

#define IMSVidCtl_ViewNext(This,v)	\
    ( (This)->lpVtbl -> ViewNext(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSVidCtl_INTERFACE_DEFINED__ */


#ifndef __IMSEventBinder_INTERFACE_DEFINED__
#define __IMSEventBinder_INTERFACE_DEFINED__

/* interface IMSEventBinder */
/* [helpstring][uuid][unique][nonextensible][hidden][oleautomation][dual][object] */ 


EXTERN_C const IID IID_IMSEventBinder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C3A9F406-2222-436D-86D5-BA3229279EFB")
    IMSEventBinder : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Bind( 
            /* [in] */ __RPC__in_opt LPDISPATCH pEventObject,
            /* [in] */ __RPC__in BSTR EventName,
            /* [in] */ __RPC__in BSTR EventHandler,
            /* [retval][out] */ __RPC__out LONG *CancelID) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Unbind( 
            /* [in] */ DWORD CancelCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSEventBinderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSEventBinder * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSEventBinder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSEventBinder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSEventBinder * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSEventBinder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSEventBinder * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSEventBinder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Bind )( 
            __RPC__in IMSEventBinder * This,
            /* [in] */ __RPC__in_opt LPDISPATCH pEventObject,
            /* [in] */ __RPC__in BSTR EventName,
            /* [in] */ __RPC__in BSTR EventHandler,
            /* [retval][out] */ __RPC__out LONG *CancelID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Unbind )( 
            __RPC__in IMSEventBinder * This,
            /* [in] */ DWORD CancelCookie);
        
        END_INTERFACE
    } IMSEventBinderVtbl;

    interface IMSEventBinder
    {
        CONST_VTBL struct IMSEventBinderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSEventBinder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSEventBinder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSEventBinder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSEventBinder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSEventBinder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSEventBinder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSEventBinder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSEventBinder_Bind(This,pEventObject,EventName,EventHandler,CancelID)	\
    ( (This)->lpVtbl -> Bind(This,pEventObject,EventName,EventHandler,CancelID) ) 

#define IMSEventBinder_Unbind(This,CancelCookie)	\
    ( (This)->lpVtbl -> Unbind(This,CancelCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSEventBinder_INTERFACE_DEFINED__ */



#ifndef __MSVidCtlLib_LIBRARY_DEFINED__
#define __MSVidCtlLib_LIBRARY_DEFINED__

/* library MSVidCtlLib */
/* [helpstring][version][uuid] */ 

//cf9a88f4-abcf-4ed8-9b74-7db33445459e
DEFINE_GUID(SID_MSVidCtl_CurrentAudioEndpoint, 0xcf9a88f4, 0xabcf, 0x4ed8, 0x9b, 0x74, 0x7d, 0xb3, 0x34, 0x45, 0x45, 0x9e);

EXTERN_C const IID LIBID_MSVidCtlLib;

#ifndef ___IMSVidCtlEvents_DISPINTERFACE_DEFINED__
#define ___IMSVidCtlEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IMSVidCtlEvents */
/* [helpstring][uuid] */ 


EXTERN_C const IID DIID__IMSVidCtlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B0EDF164-910A-11D2-B632-00C04F79498E")
    _IMSVidCtlEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IMSVidCtlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in _IMSVidCtlEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in _IMSVidCtlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in _IMSVidCtlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in _IMSVidCtlEvents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in _IMSVidCtlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in _IMSVidCtlEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IMSVidCtlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IMSVidCtlEventsVtbl;

    interface _IMSVidCtlEvents
    {
        CONST_VTBL struct _IMSVidCtlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IMSVidCtlEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IMSVidCtlEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IMSVidCtlEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IMSVidCtlEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IMSVidCtlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IMSVidCtlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IMSVidCtlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IMSVidCtlEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSVidAnalogTunerDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("1C15D484-911D-11d2-B632-00C04F79498E")
MSVidAnalogTunerDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidBDATunerDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("A2E3074E-6C3D-11d3-B653-00C04F79498E")
MSVidBDATunerDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidFilePlaybackDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("37B0353C-A4C8-11d2-B634-00C04F79498E")
MSVidFilePlaybackDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidWebDVD;

#ifdef __cplusplus

class DECLSPEC_UUID("011B3619-FE63-4814-8A84-15A194CE9CE3")
MSVidWebDVD;
#endif

EXTERN_C const CLSID CLSID_MSVidWebDVDAdm;

#ifdef __cplusplus

class DECLSPEC_UUID("FA7C375B-66A7-4280-879D-FD459C84BB02")
MSVidWebDVDAdm;
#endif

EXTERN_C const CLSID CLSID_MSVidVideoRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("37B03543-A4C8-11d2-B634-00C04F79498E")
MSVidVideoRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidVMR9;

#ifdef __cplusplus

class DECLSPEC_UUID("24DC3975-09BF-4231-8655-3EE71F43837D")
MSVidVMR9;
#endif

EXTERN_C const CLSID CLSID_MSVidEVR;

#ifdef __cplusplus

class DECLSPEC_UUID("C45268A2-FA81-4e19-B1E3-72EDBD60AEDA")
MSVidEVR;
#endif

EXTERN_C const CLSID CLSID_MSVidAudioRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("37B03544-A4C8-11d2-B634-00C04F79498E")
MSVidAudioRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidGenericSink;

#ifdef __cplusplus

class DECLSPEC_UUID("4A5869CF-929D-4040-AE03-FCAFC5B9CD42")
MSVidGenericSink;
#endif

EXTERN_C const CLSID CLSID_MSVidStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("9E77AAC4-35E5-42a1-BDC2-8F3FF399847C")
MSVidStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidStreamBufferSource;

#ifdef __cplusplus

class DECLSPEC_UUID("AD8E510D-217F-409b-8076-29C5E73B98E8")
MSVidStreamBufferSource;
#endif

EXTERN_C const CLSID CLSID_MSVidStreamBufferV2Source;

#ifdef __cplusplus

class DECLSPEC_UUID("FD351EA1-4173-4af4-821D-80D4AE979048")
MSVidStreamBufferV2Source;
#endif

EXTERN_C const CLSID CLSID_MSVidEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("BB530C63-D9DF-4b49-9439-63453962E598")
MSVidEncoder;
#endif

EXTERN_C const CLSID CLSID_MSVidITVCapture;

#ifdef __cplusplus

class DECLSPEC_UUID("5740A302-EF0B-45ce-BF3B-4470A14A8980")
MSVidITVCapture;
#endif

EXTERN_C const CLSID CLSID_MSVidITVPlayback;

#ifdef __cplusplus

class DECLSPEC_UUID("9E797ED0-5253-4243-A9B7-BD06C58F8EF3")
MSVidITVPlayback;
#endif

EXTERN_C const CLSID CLSID_MSVidCCA;

#ifdef __cplusplus

class DECLSPEC_UUID("86151827-E47B-45ee-8421-D10E6E690979")
MSVidCCA;
#endif

EXTERN_C const CLSID CLSID_MSVidClosedCaptioning;

#ifdef __cplusplus

class DECLSPEC_UUID("7F9CB14D-48E4-43b6-9346-1AEBC39C64D3")
MSVidClosedCaptioning;
#endif

EXTERN_C const CLSID CLSID_MSVidClosedCaptioningSI;

#ifdef __cplusplus

class DECLSPEC_UUID("92ED88BF-879E-448f-B6B6-A385BCEB846D")
MSVidClosedCaptioningSI;
#endif

EXTERN_C const CLSID CLSID_MSVidDataServices;

#ifdef __cplusplus

class DECLSPEC_UUID("334125C0-77E5-11d3-B653-00C04F79498E")
MSVidDataServices;
#endif

EXTERN_C const CLSID CLSID_MSVidXDS;

#ifdef __cplusplus

class DECLSPEC_UUID("0149EEDF-D08F-4142-8D73-D23903D21E90")
MSVidXDS;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogCaptureToDataServices;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CD6-9B79-11d3-B654-00C04F79498E")
MSVidAnalogCaptureToDataServices;
#endif

EXTERN_C const CLSID CLSID_MSVidDataServicesToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("38F03426-E83B-4e68-B65B-DCAE73304838")
MSVidDataServicesToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidDataServicesToXDS;

#ifdef __cplusplus

class DECLSPEC_UUID("0429EC6E-1144-4bed-B88B-2FB9899A4A3D")
MSVidDataServicesToXDS;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogCaptureToXDS;

#ifdef __cplusplus

class DECLSPEC_UUID("3540D440-5B1D-49cb-821A-E84B8CF065A7")
MSVidAnalogCaptureToXDS;
#endif

EXTERN_C const CLSID CLSID_MSVidCtl;

#ifdef __cplusplus

class DECLSPEC_UUID("B0EDF163-910A-11D2-B632-00C04F79498E")
MSVidCtl;
#endif

EXTERN_C const CLSID CLSID_MSVidInputDevices;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CCC-9B79-11d3-B654-00C04F79498E")
MSVidInputDevices;
#endif

EXTERN_C const CLSID CLSID_MSVidOutputDevices;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CCD-9B79-11d3-B654-00C04F79498E")
MSVidOutputDevices;
#endif

EXTERN_C const CLSID CLSID_MSVidVideoRendererDevices;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CCE-9B79-11d3-B654-00C04F79498E")
MSVidVideoRendererDevices;
#endif

EXTERN_C const CLSID CLSID_MSVidAudioRendererDevices;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CCF-9B79-11d3-B654-00C04F79498E")
MSVidAudioRendererDevices;
#endif

EXTERN_C const CLSID CLSID_MSVidFeatures;

#ifdef __cplusplus

class DECLSPEC_UUID("C5702CD0-9B79-11d3-B654-00C04F79498E")
MSVidFeatures;
#endif

EXTERN_C const CLSID CLSID_MSVidGenericComposite;

#ifdef __cplusplus

class DECLSPEC_UUID("2764BCE5-CC39-11D2-B639-00C04F79498E")
MSVidGenericComposite;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogCaptureToOverlayMixer;

#ifdef __cplusplus

class DECLSPEC_UUID("E18AF75A-08AF-11d3-B64A-00C04F79498E")
MSVidAnalogCaptureToOverlayMixer;
#endif

EXTERN_C const CLSID CLSID_MSVidWebDVDToVideoRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("267db0b3-55e3-4902-949b-df8f5cec0191")
MSVidWebDVDToVideoRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidWebDVDToAudioRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("8D04238E-9FD1-41c6-8DE3-9E1EE309E935")
MSVidWebDVDToAudioRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidMPEG2DecoderToClosedCaptioning;

#ifdef __cplusplus

class DECLSPEC_UUID("6AD28EE1-5002-4e71-AAF7-BD077907B1A4")
MSVidMPEG2DecoderToClosedCaptioning;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogCaptureToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("9F50E8B1-9530-4ddc-825E-1AF81D47AED6")
MSVidAnalogCaptureToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidDigitalCaptureToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("ABE40035-27C3-4a2f-8153-6624471608AF")
MSVidDigitalCaptureToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidITVToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("92B94828-1AF7-4e6e-9EBF-770657F77AF5")
MSVidITVToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidCCAToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("3EF76D68-8661-4843-8B8F-C37163D8C9CE")
MSVidCCAToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidEncoderToStreamBufferSink;

#ifdef __cplusplus

class DECLSPEC_UUID("A0B9B497-AFBC-45ad-A8A6-9B077C40D4F2")
MSVidEncoderToStreamBufferSink;
#endif

EXTERN_C const CLSID CLSID_MSVidFilePlaybackToVideoRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("B401C5EB-8457-427f-84EA-A4D2363364B0")
MSVidFilePlaybackToVideoRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidFilePlaybackToAudioRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("CC23F537-18D4-4ece-93BD-207A84726979")
MSVidFilePlaybackToAudioRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogTVToEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("28953661-0231-41db-8986-21FF4388EE9B")
MSVidAnalogTVToEncoder;
#endif

EXTERN_C const CLSID CLSID_MSVidStreamBufferSourceToVideoRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("3C4708DC-B181-46a8-8DA8-4AB0371758CD")
MSVidStreamBufferSourceToVideoRenderer;
#endif

EXTERN_C const CLSID CLSID_MSVidAnalogCaptureToCCA;

#ifdef __cplusplus

class DECLSPEC_UUID("942B7909-A28E-49a1-A207-34EBCBCB4B3B")
MSVidAnalogCaptureToCCA;
#endif

EXTERN_C const CLSID CLSID_MSVidDigitalCaptureToCCA;

#ifdef __cplusplus

class DECLSPEC_UUID("73D14237-B9DB-4efa-A6DD-84350421FB2F")
MSVidDigitalCaptureToCCA;
#endif

EXTERN_C const CLSID CLSID_MSVidDigitalCaptureToITV;

#ifdef __cplusplus

class DECLSPEC_UUID("5D8E73F7-4989-4ac8-8A98-39BA0D325302")
MSVidDigitalCaptureToITV;
#endif

EXTERN_C const CLSID CLSID_MSVidSBESourceToITV;

#ifdef __cplusplus

class DECLSPEC_UUID("2291478C-5EE3-4bef-AB5D-B5FF2CF58352")
MSVidSBESourceToITV;
#endif

EXTERN_C const CLSID CLSID_MSVidSBESourceToCC;

#ifdef __cplusplus

class DECLSPEC_UUID("9193A8F9-0CBA-400e-AA97-EB4709164576")
MSVidSBESourceToCC;
#endif

EXTERN_C const CLSID CLSID_MSVidSBESourceToGenericSink;

#ifdef __cplusplus

class DECLSPEC_UUID("991DA7E5-953F-435B-BE5E-B92A05EDFC42")
MSVidSBESourceToGenericSink;
#endif

EXTERN_C const CLSID CLSID_MSVidCCToVMR;

#ifdef __cplusplus

class DECLSPEC_UUID("C4BF2784-AE00-41ba-9828-9C953BD3C54A")
MSVidCCToVMR;
#endif

EXTERN_C const CLSID CLSID_MSVidCCToAR;

#ifdef __cplusplus

class DECLSPEC_UUID("D76334CA-D89E-4baf-86AB-DDB59372AFC2")
MSVidCCToAR;
#endif

EXTERN_C const CLSID CLSID_MSEventBinder;

#ifdef __cplusplus

class DECLSPEC_UUID("577FAA18-4518-445E-8F70-1473F8CF4BA4")
MSEventBinder;
#endif

EXTERN_C const CLSID CLSID_MSVidStreamBufferRecordingControl;

#ifdef __cplusplus

class DECLSPEC_UUID("CAAFDD83-CEFC-4e3d-BA03-175F17A24F91")
MSVidStreamBufferRecordingControl;
#endif

EXTERN_C const CLSID CLSID_MSVidRect;

#ifdef __cplusplus

class DECLSPEC_UUID("CB4276E6-7D5F-4cf1-9727-629C5E6DB6AE")
MSVidRect;
#endif

EXTERN_C const CLSID CLSID_MSVidDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("6E40476F-9C49-4c3e-8BB9-8587958EFF74")
MSVidDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidDevice2;

#ifdef __cplusplus

class DECLSPEC_UUID("30997F7D-B3B5-4A1C-983A-1FE8098CB77D")
MSVidDevice2;
#endif

EXTERN_C const CLSID CLSID_MSVidInputDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("AC1972F2-138A-4ca3-90DA-AE51112EDA28")
MSVidInputDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidVideoInputDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("95F4820B-BB3A-4e2d-BC64-5B817BC2C30E")
MSVidVideoInputDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidVideoPlaybackDevice;

#ifdef __cplusplus

class DECLSPEC_UUID("1990D634-1A5E-4071-A34A-53AAFFCE9F36")
MSVidVideoPlaybackDevice;
#endif

EXTERN_C const CLSID CLSID_MSVidFeature;

#ifdef __cplusplus

class DECLSPEC_UUID("7748530B-C08A-47ea-B24C-BE8695FF405F")
MSVidFeature;
#endif

EXTERN_C const CLSID CLSID_MSVidOutput;

#ifdef __cplusplus

class DECLSPEC_UUID("87EB890D-03AD-4e9d-9866-376E5EC572ED")
MSVidOutput;
#endif
#endif /* __MSVidCtlLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSWSock.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    mswsock.h

Abstract:

    This module contains the Microsoft-specific extensions to the Windows
    Sockets API.

Revision History:

--*/

#ifndef _MSWSOCK_
#define _MSWSOCK_

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

#include <mswsockdef.h>

/*
 * Options for connect and disconnect data and options.  Used only by
 * non-TCP/IP transports such as DECNet, OSI TP4, etc.
 */
#define SO_CONNDATA                 0x7000
#define SO_CONNOPT                  0x7001
#define SO_DISCDATA                 0x7002
#define SO_DISCOPT                  0x7003
#define SO_CONNDATALEN              0x7004
#define SO_CONNOPTLEN               0x7005
#define SO_DISCDATALEN              0x7006
#define SO_DISCOPTLEN               0x7007

/*
 * Option for opening sockets for synchronous access.
 */
#define SO_OPENTYPE                 0x7008

#define SO_SYNCHRONOUS_ALERT        0x10
#define SO_SYNCHRONOUS_NONALERT     0x20

/*
 * Other NT-specific options.
 */
#define SO_MAXDG                    0x7009
#define SO_MAXPATHDG                0x700A
#define SO_UPDATE_ACCEPT_CONTEXT    0x700B
#define SO_CONNECT_TIME             0x700C
#if(_WIN32_WINNT >= 0x0501)
#define SO_UPDATE_CONNECT_CONTEXT   0x7010
#endif //(_WIN32_WINNT >= 0x0501)

/*
 * TCP options.
 */
#define TCP_BSDURGENT               0x7000

/*
 * MS Transport Provider IOCTL to control
 * reporting PORT_UNREACHABLE messages 
 * on UDP sockets via recv/WSARecv/etc.
 * Path TRUE in input buffer to enable (default if supported),
 * FALSE to disable.
 */
#define SIO_UDP_CONNRESET           _WSAIOW(IOC_VENDOR,12)


#if((_WIN32_WINNT < 0x0600) && (_WIN32_WINNT >= 0x0501))

/*
 * MS Transport Provider IOCTL to request
 * notification when a given socket is closed.
 * Input buffer must be a pointer to the socket handle.
 * Input buffer size must be exactly sizeof(HANDLE).
 * Output buffer and output buffer length must be 
 * NULL and 0 respectively. This IOCTL must always
 * be issued with an overlapped structure.
 *
 * This Ioctl code is available only on WinXP SP2 and Win2k3 SP1.
 */
#define SIO_SOCKET_CLOSE_NOTIFY     _WSAIOW(IOC_VENDOR,13)

#endif //(_WIN32_WINNT < 0x0600 && _WIN32_WINNT >= 0x0501)

/*
 * MS Transport Provider IOCTL to control
 * reporting NET_UNREACHABLE (TTL expired) messages
 * on UDP sockets via recv/WSARecv/Etc.
 * Pass TRUE in input buffer to enabled (default if supported),
 * FALSE to disable.
 */
#define SIO_UDP_NETRESET            _WSAIOW(IOC_VENDOR,15)

/*
 * Microsoft extended APIs.
 */

#if(_WIN32_WINNT < 0x0600)
int
PASCAL FAR
WSARecvEx(
    __in SOCKET s,
    __out_bcount_part(len, return) char FAR *buf,
    __in int len,
    __inout int FAR *flags
    );
#else //(_WIN32_WINNT < 0x0600)
INT
PASCAL FAR
WSARecvEx(
    __in SOCKET s,
    __out_bcount_part(len, return) CHAR FAR *buf,
    __in INT len,
    __inout INT FAR *flags
    );
#endif //(_WIN32_WINNT < 0x0600)    

typedef struct _TRANSMIT_FILE_BUFFERS {
    LPVOID Head;
    DWORD HeadLength;
    LPVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, FAR *LPTRANSMIT_FILE_BUFFERS;

#define TF_DISCONNECT       0x01
#define TF_REUSE_SOCKET     0x02
#define TF_WRITE_BEHIND     0x04
#define TF_USE_DEFAULT_WORKER 0x00
#define TF_USE_SYSTEM_THREAD  0x10
#define TF_USE_KERNEL_APC     0x20

__control_entrypoint(DllExport)
BOOL
PASCAL FAR
TransmitFile (
    __in SOCKET hSocket,
    __in HANDLE hFile,
    __in DWORD nNumberOfBytesToWrite,
    __in DWORD nNumberOfBytesPerSend,
    __inout_opt LPOVERLAPPED lpOverlapped,
    __in_opt LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
    __in  DWORD dwReserved
    );

__control_entrypoint(DllExport)
BOOL
PASCAL FAR
AcceptEx (
    __in SOCKET sListenSocket,
    __in SOCKET sAcceptSocket,
    __out_bcount_part(dwReceiveDataLength+dwLocalAddressLength+dwRemoteAddressLength,
        *lpdwBytesReceived) PVOID lpOutputBuffer,
    __in DWORD dwReceiveDataLength,
    __in DWORD dwLocalAddressLength,
    __in DWORD dwRemoteAddressLength,
    __out LPDWORD lpdwBytesReceived,
    __inout LPOVERLAPPED lpOverlapped
    );

__control_entrypoint(DllExport)
VOID
PASCAL FAR
GetAcceptExSockaddrs (
    __in_bcount(dwReceiveDataLength+dwLocalAddressLength+dwRemoteAddressLength) PVOID lpOutputBuffer,
    __in DWORD dwReceiveDataLength,
    __in DWORD dwLocalAddressLength,
    __in DWORD dwRemoteAddressLength,
    __deref_out_bcount(*LocalSockaddrLength) struct sockaddr **LocalSockaddr,
    __out LPINT LocalSockaddrLength,
    __deref_out_bcount(*RemoteSockaddrLength) struct sockaddr **RemoteSockaddr,
    __out LPINT RemoteSockaddrLength
    );

/*
 * "QueryInterface" versions of the above APIs.
 */

typedef
BOOL
(PASCAL FAR * LPFN_TRANSMITFILE)(
    __in SOCKET hSocket,
    __in HANDLE hFile,
    __in DWORD nNumberOfBytesToWrite,
    __in DWORD nNumberOfBytesPerSend,
    __inout_opt LPOVERLAPPED lpOverlapped,
    __in_opt LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
    __in DWORD dwReserved
    );

#define WSAID_TRANSMITFILE \
        {0xb5367df0,0xcbac,0x11cf,{0x95,0xca,0x00,0x80,0x5f,0x48,0xa1,0x92}}

typedef
BOOL
(PASCAL FAR * LPFN_ACCEPTEX)(
    __in SOCKET sListenSocket,
    __in SOCKET sAcceptSocket,
    __in PVOID lpOutputBuffer,
    __in DWORD dwReceiveDataLength,
    __in DWORD dwLocalAddressLength,
    __in DWORD dwRemoteAddressLength,
    __out LPDWORD lpdwBytesReceived,
    __inout LPOVERLAPPED lpOverlapped
    );

#define WSAID_ACCEPTEX \
        {0xb5367df1,0xcbac,0x11cf,{0x95,0xca,0x00,0x80,0x5f,0x48,0xa1,0x92}}

typedef
VOID
(PASCAL FAR * LPFN_GETACCEPTEXSOCKADDRS)(
    __in PVOID lpOutputBuffer,
    __in DWORD dwReceiveDataLength,
    __in DWORD dwLocalAddressLength,
    __in DWORD dwRemoteAddressLength,
    __deref_out_bcount(*LocalSockaddrLength) struct sockaddr **LocalSockaddr,
    __out LPINT LocalSockaddrLength,
    __deref_out_bcount(*RemoteSockaddrLength) struct sockaddr **RemoteSockaddr,
    __out LPINT RemoteSockaddrLength
    );

#define WSAID_GETACCEPTEXSOCKADDRS \
        {0xb5367df2,0xcbac,0x11cf,{0x95,0xca,0x00,0x80,0x5f,0x48,0xa1,0x92}}

#if(_WIN32_WINNT >= 0x0501)

#if _MSC_VER >= 1200
#pragma warning(push)
#endif
#pragma warning(disable:4201) /* Nonstandard extension, nameless struct/union */

typedef struct _TRANSMIT_PACKETS_ELEMENT { 
    ULONG dwElFlags; 
#define TP_ELEMENT_MEMORY   1
#define TP_ELEMENT_FILE     2
#define TP_ELEMENT_EOP      4
    ULONG cLength; 
    union {
        struct {
            LARGE_INTEGER nFileOffset;
            HANDLE        hFile;
        };
        PVOID             pBuffer;
    };
} TRANSMIT_PACKETS_ELEMENT, *PTRANSMIT_PACKETS_ELEMENT, FAR *LPTRANSMIT_PACKETS_ELEMENT;

#if _MSC_VER >= 1200
#pragma warning(pop)
#else
#pragma warning(default:4201)
#endif
#define TP_DISCONNECT           TF_DISCONNECT
#define TP_REUSE_SOCKET         TF_REUSE_SOCKET
#define TP_USE_DEFAULT_WORKER   TF_USE_DEFAULT_WORKER
#define TP_USE_SYSTEM_THREAD    TF_USE_SYSTEM_THREAD
#define TP_USE_KERNEL_APC       TF_USE_KERNEL_APC

typedef
BOOL
(PASCAL FAR * LPFN_TRANSMITPACKETS) (
    __in SOCKET hSocket,                             
    __in_opt LPTRANSMIT_PACKETS_ELEMENT lpPacketArray,                               
    __in DWORD nElementCount,                
    __in DWORD nSendSize,                
    __inout_opt LPOVERLAPPED lpOverlapped,                  
    __in DWORD dwFlags                               
    );

#define WSAID_TRANSMITPACKETS \
    {0xd9689da0,0x1f90,0x11d3,{0x99,0x71,0x00,0xc0,0x4f,0x68,0xc8,0x76}}

typedef
BOOL
(PASCAL FAR * LPFN_CONNECTEX) (
    __in SOCKET s,
    __in_bcount(namelen) const struct sockaddr FAR *name,
    __in int namelen,
    __in_opt PVOID lpSendBuffer,
    __in DWORD dwSendDataLength,
    __out LPDWORD lpdwBytesSent,
    __inout LPOVERLAPPED lpOverlapped
    );

#define WSAID_CONNECTEX \
    {0x25a207b9,0xddf3,0x4660,{0x8e,0xe9,0x76,0xe5,0x8c,0x74,0x06,0x3e}}

typedef
BOOL
(PASCAL FAR * LPFN_DISCONNECTEX) (
    __in SOCKET s,
    __inout_opt LPOVERLAPPED lpOverlapped,
    __in DWORD  dwFlags,
    __in DWORD  dwReserved
    );

#define WSAID_DISCONNECTEX \
    {0x7fda2e11,0x8630,0x436f,{0xa0, 0x31, 0xf5, 0x36, 0xa6, 0xee, 0xc1, 0x57}}

#define DE_REUSE_SOCKET TF_REUSE_SOCKET
  
/*
 * Network-location awareness -- Name registration values for use
 * with WSASetService and other structures.
 */

// {6642243A-3BA8-4aa6-BAA5-2E0BD71FDD83}
#define NLA_NAMESPACE_GUID \
    {0x6642243a,0x3ba8,0x4aa6,{0xba,0xa5,0x2e,0xb,0xd7,0x1f,0xdd,0x83}}

// {6642243A-3BA8-4aa6-BAA5-2E0BD71FDD83}
#define NLA_SERVICE_CLASS_GUID \
    {0x37e515,0xb5c9,0x4a43,{0xba,0xda,0x8b,0x48,0xa8,0x7a,0xd2,0x39}}

#define NLA_ALLUSERS_NETWORK   0x00000001
#define NLA_FRIENDLY_NAME      0x00000002

typedef enum _NLA_BLOB_DATA_TYPE {
    NLA_RAW_DATA          = 0,
    NLA_INTERFACE         = 1,
    NLA_802_1X_LOCATION   = 2,
    NLA_CONNECTIVITY      = 3,
    NLA_ICS               = 4,
} NLA_BLOB_DATA_TYPE, *PNLA_BLOB_DATA_TYPE;

typedef enum _NLA_CONNECTIVITY_TYPE {
    NLA_NETWORK_AD_HOC    = 0,
    NLA_NETWORK_MANAGED   = 1,
    NLA_NETWORK_UNMANAGED = 2,
    NLA_NETWORK_UNKNOWN   = 3,
} NLA_CONNECTIVITY_TYPE, *PNLA_CONNECTIVITY_TYPE;

typedef enum _NLA_INTERNET {
    NLA_INTERNET_UNKNOWN  = 0,
    NLA_INTERNET_NO       = 1,
    NLA_INTERNET_YES      = 2,
} NLA_INTERNET, *PNLA_INTERNET;

typedef struct _NLA_BLOB {

    struct {
        NLA_BLOB_DATA_TYPE type;
        DWORD dwSize;
        DWORD nextOffset;
    } header;

    union {

        // header.type -> NLA_RAW_DATA
        CHAR rawData[1];

        // header.type -> NLA_INTERFACE
        struct {
            DWORD dwType;
            DWORD dwSpeed;
            CHAR adapterName[1];
        } interfaceData;

        // header.type -> NLA_802_1X_LOCATION
        struct {
            CHAR information[1];
        } locationData;

        // header.type -> NLA_CONNECTIVITY
        struct {
            NLA_CONNECTIVITY_TYPE type;
            NLA_INTERNET internet;
        } connectivity;

        // header.type -> NLA_ICS
        struct {
            struct {
                DWORD speed;
                DWORD type;
                DWORD state;
                WCHAR machineName[256];
                WCHAR sharedAdapterName[256];
            } remote;
        } ICS;

    } data;

} NLA_BLOB, *PNLA_BLOB, * FAR LPNLA_BLOB;


/*
 * WSARecvMsg -- support for receiving ancilliary
 * data/control information with a message.
 */
typedef
INT
(PASCAL FAR * LPFN_WSARECVMSG) (
    __in SOCKET s, 
    __inout LPWSAMSG lpMsg, 
    __out_opt LPDWORD lpdwNumberOfBytesRecvd, 
    __inout_opt LPWSAOVERLAPPED lpOverlapped, 
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

#define WSAID_WSARECVMSG \
    {0xf689d7c8,0x6f1f,0x436b,{0x8a,0x53,0xe5,0x4f,0xe3,0x51,0xc3,0x22}}

#endif //(_WIN32_WINNT >= 0x0501)


#if(_WIN32_WINNT >= 0x0600)

/*
 * Ioctl codes for translating socket handles to the base provider handle.
 * This is performed to prevent breaking non-IFS LSPs when new Winsock extension
 * funtions are added.
 */
#define SIO_BSP_HANDLE          _WSAIOR(IOC_WS2,27)
#define SIO_BSP_HANDLE_SELECT   _WSAIOR(IOC_WS2,28)
#define SIO_BSP_HANDLE_POLL     _WSAIOR(IOC_WS2,29)

/*
 * Ioctl code used to translate a socket handle into the base provider's handle.
 * This is not used by any Winsock extension function and should not be intercepted
 * by Winsock LSPs.
 */
#define SIO_BASE_HANDLE         _WSAIOR(IOC_WS2,34)

/*
 * Ioctl codes for Winsock extension functions.
 */
#define SIO_EXT_SELECT          _WSAIORW(IOC_WS2,30)
#define SIO_EXT_POLL            _WSAIORW(IOC_WS2,31)
#define SIO_EXT_SENDMSG         _WSAIORW(IOC_WS2,32)

#pragma warning(push)
#pragma warning(disable:4200) /* zero-sized array in struct/union */

/* 
 * Data structure for passing WSAPoll arugments through WSAIoctl
 */
typedef struct {
    int result;
    ULONG fds;
    INT timeout;
    WSAPOLLFD fdArray[0];
} WSAPOLLDATA, *LPWSAPOLLDATA;

#pragma warning(pop)

/*
 * Data structure for passing WSASendMsg arguments through WSAIoctl
 */
typedef struct {
    LPWSAMSG lpMsg;
    DWORD dwFlags;
    LPDWORD lpNumberOfBytesSent;
    LPWSAOVERLAPPED lpOverlapped;
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine;
} WSASENDMSG, *LPWSASENDMSG;


/*
 * WSASendMsg -- send data to a specific destination, with options, using
 *    overlapped I/O where applicable.
 *
 * Valid flags for dwFlags parameter:
 *    MSG_DONTROUTE
 *    MSG_PARTIAL (a.k.a. MSG_EOR) (only for non-stream sockets)
 *    MSG_OOB (only for stream style sockets) (NYI)
 *
 * Caller must provide either lpOverlapped or lpCompletionRoutine
 * or neither (both NULL).
 */
typedef
INT
(PASCAL FAR * LPFN_WSASENDMSG) (
    __in SOCKET s,
    __in LPWSAMSG lpMsg,
    __in DWORD dwFlags,
    __out_opt LPDWORD lpNumberOfBytesSent,
    __inout_opt LPWSAOVERLAPPED lpOverlapped OPTIONAL,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine OPTIONAL
    );

#define WSAID_WSASENDMSG /* a441e712-754f-43ca-84a7-0dee44cf606d */ \
    {0xa441e712,0x754f,0x43ca,{0x84,0xa7,0x0d,0xee,0x44,0xcf,0x60,0x6d}}

//
// WSAPoll
// 
typedef
INT
(WSAAPI *LPFN_WSAPOLL)(
    __inout LPWSAPOLLFD fdarray,
    __in ULONG nfds,
    __in INT timeout
    );

#define WSAID_WSAPOLL \
        {0x18C76F85,0xDC66,0x4964,{0x97,0x2E,0x23,0xC2,0x72,0x38,0x31,0x2B}}

#endif //(_WIN32_WINNT >= 0x0600)

#ifdef __cplusplus
}
#endif

#endif  /* _MSWSOCK_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSWSockDef.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    mswsock.h

Abstract:

    This module contains the Microsoft-specific extensions to the Windows
    Sockets API.

Revision History:

--*/

#ifndef _MSWSOCKDEF_
#define _MSWSOCKDEF_

#if _MSC_VER > 1000
#pragma once
#endif

#if(_WIN32_WINNT >= 0x0600)
#ifdef _MSC_VER
#define MSWSOCKDEF_INLINE __inline
#else
#define MSWSOCKDEF_INLINE extern inline /* GNU style */
#endif
#endif //(_WIN32_WINNT>=0x0600)

#ifndef ASSERT
#define MSWSOCKDEF_ASSERT_UNDEFINED
#define ASSERT(exp) ((VOID) 0)
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if(_WIN32_WINNT >= 0x0600)

#ifdef _WS2DEF_

extern CONST UCHAR sockaddr_size[AF_MAX];

MSWSOCKDEF_INLINE
UCHAR
SOCKADDR_SIZE(__in ADDRESS_FAMILY af)
{
    return (UCHAR)((af < AF_MAX) ? sockaddr_size[af]
                                 : sockaddr_size[AF_UNSPEC]);
}

MSWSOCKDEF_INLINE
SCOPE_LEVEL
ScopeLevel(
    __in SCOPE_ID ScopeId
    )
{
    //
    // We can't declare the Level field of type SCOPE_LEVEL directly,
    // since it gets sign extended to be negative.  We can, however,
    // safely cast.
    //
    return (SCOPE_LEVEL)ScopeId.Level;
}

#endif // _WS2DEF_

#define SIO_SET_COMPATIBILITY_MODE  _WSAIOW(IOC_VENDOR,300)

typedef enum _WSA_COMPATIBILITY_BEHAVIOR_ID {
    WsaBehaviorAll = 0,
    WsaBehaviorReceiveBuffering,
    WsaBehaviorAutoTuning
} WSA_COMPATIBILITY_BEHAVIOR_ID, *PWSA_COMPATIBILITY_BEHAVIOR_ID;

typedef struct _WSA_COMPATIBILITY_MODE {
    WSA_COMPATIBILITY_BEHAVIOR_ID BehaviorId;
    ULONG TargetOsVersion;
} WSA_COMPATIBILITY_MODE, *PWSA_COMPATIBILITY_MODE;   

#endif //(_WIN32_WINNT>=0x0600)


#ifdef __cplusplus
}
#endif

#ifdef MSWSOCKDEF_ASSERT_UNDEFINED
#undef ASSERT
#endif

#endif  /* _MSWSOCKDEF_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MsXml2DId.h ===
//**************************************************************************
//*                           Microsoft Windows                           **
//* Copyright (c) 1996 - 2001 Microsoft Corporation. All rights reserved. **
//**************************************************************************

//;begin_internal
/***********************************************************************************************

  This is a distributed SDK component - do not put any #includes or other directives that rely
  upon files not dropped. If in doubt - build iedev

  If you add comments please include either ;BUGBUG at the beginning of a single line OR
  enclose in a ;begin_internal, ;end_internal block - such as this one!

 ***********************************************************************************************/
//;end_internal

//;begin_internal
#ifndef __MSXML2DID_H__
#define __MSXML2DID_H__
//;end_internal

#define DISPID_XOBJ_MIN                 0x00010000
#define DISPID_XOBJ_MAX                 0x0001FFFF
#define DISPID_XOBJ_BASE                DISPID_XOBJ_MIN


#define DISPID_XMLELEMENTCOLLECTION             DISPID_XOBJ_BASE

#define DISPID_XMLELEMENTCOLLECTION_LENGTH      DISPID_XMLELEMENTCOLLECTION + 1
#define DISPID_XMLELEMENTCOLLECTION_NEWENUM     DISPID_NEWENUM
#define DISPID_XMLELEMENTCOLLECTION_ITEM        DISPID_XMLELEMENTCOLLECTION + 3


#define DISPID_XMLDOCUMENT                      DISPID_XMLELEMENTCOLLECTION + 100

#define DISPID_XMLDOCUMENT_ROOT                 DISPID_XMLDOCUMENT + 1
#define DISPID_XMLDOCUMENT_FILESIZE             DISPID_XMLDOCUMENT + 2
#define DISPID_XMLDOCUMENT_FILEMODIFIEDDATE     DISPID_XMLDOCUMENT + 3
#define DISPID_XMLDOCUMENT_FILEUPDATEDDATE      DISPID_XMLDOCUMENT + 4
#define DISPID_XMLDOCUMENT_URL                  DISPID_XMLDOCUMENT + 5
#define DISPID_XMLDOCUMENT_MIMETYPE             DISPID_XMLDOCUMENT + 6
#define DISPID_XMLDOCUMENT_READYSTATE           DISPID_XMLDOCUMENT + 7
#define DISPID_XMLDOCUMENT_CREATEELEMENT        DISPID_XMLDOCUMENT + 8
#define DISPID_XMLDOCUMENT_CHARSET              DISPID_XMLDOCUMENT + 9
#define DISPID_XMLDOCUMENT_VERSION              DISPID_XMLDOCUMENT + 10
#define DISPID_XMLDOCUMENT_DOCTYPE              DISPID_XMLDOCUMENT + 11
#define DISPID_XMLDOCUMENT_DTDURL               DISPID_XMLDOCUMENT + 12
#define DISPID_XMLDOCUMENT_ASYNC                DISPID_XMLDOCUMENT + 13
#define DISPID_XMLDOCUMENT_CASEINSENSITIVE      DISPID_XMLDOCUMENT + 14
#define DISPID_XMLDOCUMENT_BASEURL              DISPID_XMLDOCUMENT + 15
#define DISPID_XMLDOCUMENT_XML                  DISPID_XMLDOCUMENT + 16
#define DISPID_XMLDOCUMENT_LASTERROR            DISPID_XMLDOCUMENT + 17
#define DISPID_XMLDOCUMENT_TRIMWHITESPACE       DISPID_XMLDOCUMENT + 18
#define DISPID_XMLDOCUMENT_COMMIT               DISPID_XMLDOCUMENT + 19

#define DISPID_XMLELEMENT                       DISPID_XMLDOCUMENT + 100

#define DISPID_XMLELEMENT_TAGNAME               DISPID_XMLELEMENT + 1
#define DISPID_XMLELEMENT_PARENT                DISPID_XMLELEMENT + 2
#define DISPID_XMLELEMENT_SETATTRIBUTE          DISPID_XMLELEMENT + 3
#define DISPID_XMLELEMENT_GETATTRIBUTE          DISPID_XMLELEMENT + 4
#define DISPID_XMLELEMENT_REMOVEATTRIBUTE       DISPID_XMLELEMENT + 5
#define DISPID_XMLELEMENT_CHILDREN              DISPID_XMLELEMENT + 6
#define DISPID_XMLELEMENT_TYPE                  DISPID_XMLELEMENT + 7
#define DISPID_XMLELEMENT_TEXT                  DISPID_XMLELEMENT + 8
#define DISPID_XMLELEMENT_ADDCHILD              DISPID_XMLELEMENT + 9
#define DISPID_XMLELEMENT_REMOVECHILD           DISPID_XMLELEMENT + 10
#define DISPID_XMLELEMENT_ATTRIBUTES            DISPID_XMLELEMENT + 11

#define DISPID_XMLNOTIFSINK                     DISPID_XMLELEMENT + 100 

#define DISPID_XMLNOTIFSINK_CHILDADDED          DISPID_XMLNOTIFSINK + 1

#define DISPID_XMLATTRIBUTE                     DISPID_XMLNOTIFSINK + 100

#define DISPID_XMLATTRIBUTE_NAME                DISPID_XMLATTRIBUTE + 1
#define DISPID_XMLATTRIBUTE_VALUE               DISPID_XMLATTRIBUTE + 2


// IXMLError2
#define DISPID_XMLERROR                         DISPID_XMLNOTIFSINK + 100
#define DISPID_XMLERROR_REASON                  DISPID_XMLERROR + 1
#define DISPID_XMLERROR_LINE                    DISPID_XMLERROR + 2
#define DISPID_XMLERROR_POS                     DISPID_XMLERROR + 3

// INode
#define DISPID_NODE                             DISPID_XMLERROR + 100
#define DISPID_NODE_NAME                        DISPID_NODE + 1
#define DISPID_NODE_PARENT                      DISPID_NODE + 2
#define DISPID_NODE_TYPE                        DISPID_NODE + 3

#define DISPID_NODE_VALUE                       DISPID_NODE + 4

#define DISPID_NODE_SETATTRIBUTE                DISPID_NODE + 5
#define DISPID_NODE_GETATTRIBUTE                DISPID_NODE + 6
#define DISPID_NODE_REMOVEATTRIBUTE             DISPID_NODE + 7
#define DISPID_NODE_ATTRIBUTES                  DISPID_NODE + 8

#define DISPID_NODE_ADD                         DISPID_NODE + 9
#define DISPID_NODE_REMOVE                      DISPID_NODE + 10
#define DISPID_NODE_CHILDREN                    DISPID_NODE + 11

// INodeList
#define DISPID_NODELIST                         DISPID_NODE + 100
#define DISPID_NODELIST_NEWENUM                 DISPID_NODELIST + 1
#define DISPID_NODELIST_NEXT                    DISPID_NODELIST + 2
#define DISPID_NODELIST_CURRENT                 DISPID_NODELIST + 3
#define DISPID_NODELIST_MOVE                    DISPID_NODELIST + 4
#define DISPID_NODELIST_MOVETONODE              DISPID_NODELIST + 5

#define DISPID_NODELIST_LENGTH                  DISPID_NODELIST + 6
#define DISPID_NODELIST_ITEM                    DISPID_NODELIST + 7


// Our dispids need to be mapped into the range 1..9999 to keep Trident happy
// specifically, to make the XML tag more efficient. (simonb, 09-18-1998)
#define DISPID_DOM_BASE                 0x00000001

#define DISPID_DOM_COLLECTION_BASE	1000000
#define DISPID_DOM_COLLECTION_MAX	2999999

#define DISPID_DOM_NODE                             (DISPID_DOM_BASE)
#define DISPID_DOM_NODE_NODENAME                    (DISPID_DOM_NODE + 1)
#define DISPID_DOM_NODE_NODEVALUE                   (DISPID_DOM_NODE + 2)
#define DISPID_DOM_NODE_NODETYPE                    (DISPID_DOM_NODE + 3)
#define DISPID_DOM_NODE_NODETYPEENUM                (DISPID_DOM_NODE + 4)
#define DISPID_DOM_NODE_PARENTNODE                  (DISPID_DOM_NODE + 5)
#define DISPID_DOM_NODE_CHILDNODES                  (DISPID_DOM_NODE + 6)
#define DISPID_DOM_NODE_FIRSTCHILD                  (DISPID_DOM_NODE + 7)
#define DISPID_DOM_NODE_LASTCHILD                   (DISPID_DOM_NODE + 8)
#define DISPID_DOM_NODE_PREVIOUSSIBLING             (DISPID_DOM_NODE + 9)
#define DISPID_DOM_NODE_NEXTSIBLING                 (DISPID_DOM_NODE + 10)
#define DISPID_DOM_NODE_ATTRIBUTES                  (DISPID_DOM_NODE + 11)
#define DISPID_DOM_NODE_INSERTBEFORE                (DISPID_DOM_NODE + 12)
#define DISPID_DOM_NODE_REPLACECHILD                (DISPID_DOM_NODE + 13)
#define DISPID_DOM_NODE_REMOVECHILD                 (DISPID_DOM_NODE + 14)
#define DISPID_DOM_NODE_APPENDCHILD                 (DISPID_DOM_NODE + 15)
#define DISPID_DOM_NODE_HASCHILDNODES               (DISPID_DOM_NODE + 16)
#define DISPID_DOM_NODE_OWNERDOC                    (DISPID_DOM_NODE + 17)
#define DISPID_DOM_NODE_CLONENODE                   (DISPID_DOM_NODE + 18)
#define DISPID_XMLDOM_NODE                          (DISPID_DOM_NODE + 19)
#define DISPID_XMLDOM_NODE_STRINGTYPE               (DISPID_XMLDOM_NODE + 1)
#define DISPID_XMLDOM_NODE_SPECIFIED                (DISPID_XMLDOM_NODE + 2)
#define DISPID_XMLDOM_NODE_DEFINITION               (DISPID_XMLDOM_NODE + 3)
#define DISPID_XMLDOM_NODE_TEXT                     (DISPID_XMLDOM_NODE + 4)
#define DISPID_XMLDOM_NODE_NODETYPEDVALUE           (DISPID_XMLDOM_NODE + 5)
#define DISPID_XMLDOM_NODE_DATATYPE                 (DISPID_XMLDOM_NODE + 6)
#define DISPID_XMLDOM_NODE_XML                      (DISPID_XMLDOM_NODE + 7)
#define DISPID_XMLDOM_NODE_TRANSFORMNODE            (DISPID_XMLDOM_NODE + 8)
#define DISPID_XMLDOM_NODE_SELECTNODES              (DISPID_XMLDOM_NODE + 9)
#define DISPID_XMLDOM_NODE_SELECTSINGLENODE         (DISPID_XMLDOM_NODE + 10)
#define DISPID_XMLDOM_NODE_PARSED                   (DISPID_XMLDOM_NODE + 11)
#define DISPID_XMLDOM_NODE_NAMESPACE                (DISPID_XMLDOM_NODE + 12)
#define DISPID_XMLDOM_NODE_PREFIX                   (DISPID_XMLDOM_NODE + 13)
#define DISPID_XMLDOM_NODE_BASENAME                 (DISPID_XMLDOM_NODE + 14)
#define DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT    (DISPID_XMLDOM_NODE + 15)
#define DISPID_XMLDOM_NODE__TOP                     (DISPID_XMLDOM_NODE + 16)

#define DISPID_DOM_DOCUMENT                        (DISPID_XMLDOM_NODE__TOP + 1)
#define DISPID_DOM_DOCUMENT_DOCTYPE                (DISPID_DOM_DOCUMENT + 1)
#define DISPID_DOM_DOCUMENT_IMPLEMENTATION         (DISPID_DOM_DOCUMENT + 2)
#define DISPID_DOM_DOCUMENT_DOCUMENTELEMENT        (DISPID_DOM_DOCUMENT + 3)
#define DISPID_DOM_DOCUMENT_CREATEELEMENT          (DISPID_DOM_DOCUMENT + 4)
#define DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT (DISPID_DOM_DOCUMENT + 5)
#define DISPID_DOM_DOCUMENT_CREATETEXTNODE         (DISPID_DOM_DOCUMENT + 6)
#define DISPID_DOM_DOCUMENT_CREATECOMMENT          (DISPID_DOM_DOCUMENT + 7)
#define DISPID_DOM_DOCUMENT_CREATECDATASECTION     (DISPID_DOM_DOCUMENT + 8)
#define DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION (DISPID_DOM_DOCUMENT + 9)
#define DISPID_DOM_DOCUMENT_CREATEATTRIBUTE        (DISPID_DOM_DOCUMENT + 10)
#define DISPID_DOM_DOCUMENT_CREATEENTITY           (DISPID_DOM_DOCUMENT + 11)
#define DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE  (DISPID_DOM_DOCUMENT + 12)
#define DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME   (DISPID_DOM_DOCUMENT + 13)
#define DISPID_DOM_DOCUMENT_TOP                    (DISPID_DOM_DOCUMENT + 14)
#define DISPID_XMLDOM_DOCUMENT                     (DISPID_DOM_DOCUMENT + 15)
#define DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE        (DISPID_XMLDOM_DOCUMENT + 1)
#define DISPID_XMLDOM_DOCUMENT_CREATENODE          (DISPID_XMLDOM_DOCUMENT + 2)
#define DISPID_XMLDOM_DOCUMENT_CREATENODEEX        (DISPID_XMLDOM_DOCUMENT + 3)
#define DISPID_XMLDOM_DOCUMENT_NODEFROMID          (DISPID_XMLDOM_DOCUMENT + 4)
#define DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES  (DISPID_XMLDOM_DOCUMENT + 5)
#define DISPID_XMLDOM_DOCUMENT_LOAD                (DISPID_XMLDOM_DOCUMENT + 6)
#define DISPID_XMLDOM_DOCUMENT_PARSEERROR          (DISPID_XMLDOM_DOCUMENT + 7)
#define DISPID_XMLDOM_DOCUMENT_URL                 (DISPID_XMLDOM_DOCUMENT + 8)
#define DISPID_XMLDOM_DOCUMENT_ASYNC               (DISPID_XMLDOM_DOCUMENT + 9)
#define DISPID_XMLDOM_DOCUMENT_ABORT               (DISPID_XMLDOM_DOCUMENT + 10)
#define DISPID_XMLDOM_DOCUMENT_LOADXML             (DISPID_XMLDOM_DOCUMENT + 11)
#define DISPID_XMLDOM_DOCUMENT_SAVE                (DISPID_XMLDOM_DOCUMENT + 12)
#define DISPID_XMLDOM_DOCUMENT_VALIDATE            (DISPID_XMLDOM_DOCUMENT + 13)
#define DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE    (DISPID_XMLDOM_DOCUMENT + 14)
#define DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE  (DISPID_XMLDOM_DOCUMENT + 15)
#define DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE  (DISPID_XMLDOM_DOCUMENT + 16)
#define DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE     (DISPID_XMLDOM_DOCUMENT + 17)
#define DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE     (DISPID_XMLDOM_DOCUMENT + 18)
#define DISPID_XMLDOM_DOCUMENT__TOP                (DISPID_XMLDOM_DOCUMENT + 19)

#define DISPID_DOM_NODELIST             (DISPID_XMLDOM_DOCUMENT__TOP + 1)
#define DISPID_DOM_NODELIST_ITEM        (DISPID_DOM_NODELIST + 1)
#define DISPID_DOM_NODELIST_LENGTH      (DISPID_DOM_NODELIST + 2)
#define DISPID_XMLDOM_NODELIST          (DISPID_DOM_NODELIST + 3)
#define DISPID_XMLDOM_NODELIST_NEXTNODE (DISPID_XMLDOM_NODELIST + 1)
#define DISPID_XMLDOM_NODELIST_RESET    (DISPID_XMLDOM_NODELIST + 2)
#define DISPID_XMLDOM_NODELIST_NEWENUM  (DISPID_XMLDOM_NODELIST + 3)
#define DISPID_XMLDOM_NODELIST__TOP     (DISPID_XMLDOM_NODELIST + 4)


#define DISPID_DOM_NAMEDNODEMAP                         (DISPID_XMLDOM_NODELIST__TOP + 1)
#define DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM            (DISPID_DOM_NAMEDNODEMAP + 3)
#define DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM            (DISPID_DOM_NAMEDNODEMAP + 4)
#define DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM         (DISPID_DOM_NAMEDNODEMAP + 5)
#define DISPID_XMLDOM_NAMEDNODEMAP                      (DISPID_DOM_NAMEDNODEMAP + 6)
#define DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM     (DISPID_XMLDOM_NAMEDNODEMAP + 1)
#define DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM  (DISPID_XMLDOM_NAMEDNODEMAP + 2)
#define DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE             (DISPID_XMLDOM_NAMEDNODEMAP + 3)
#define DISPID_XMLDOM_NAMEDNODEMAP_RESET                (DISPID_XMLDOM_NAMEDNODEMAP + 4)
#define DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM              (DISPID_XMLDOM_NAMEDNODEMAP + 5)
#define DISPID_XMLDOM_NAMEDNODEMAP__TOP                 (DISPID_XMLDOM_NAMEDNODEMAP + 6)


#define DISPID_DOM_W3CWRAPPERS                 (DISPID_XMLDOM_NAMEDNODEMAP__TOP + 1)

#define DISPID_DOM_DOCUMENTFRAGMENT            (DISPID_DOM_W3CWRAPPERS + 1)
#define DISPID_DOM_DOCUMENTFRAGMENT__TOP       (DISPID_DOM_DOCUMENTFRAGMENT + 1)

#define DISPID_DOM_ELEMENT                         (DISPID_DOM_DOCUMENTFRAGMENT__TOP + 1)
#define DISPID_DOM_ELEMENT_GETTAGNAME              (DISPID_DOM_ELEMENT + 1)
#define DISPID_DOM_ELEMENT_GETATTRIBUTES           (DISPID_DOM_ELEMENT + 2)
#define DISPID_DOM_ELEMENT_GETATTRIBUTE            (DISPID_DOM_ELEMENT + 3)
#define DISPID_DOM_ELEMENT_SETATTRIBUTE            (DISPID_DOM_ELEMENT + 4)
#define DISPID_DOM_ELEMENT_REMOVEATTRIBUTE         (DISPID_DOM_ELEMENT + 5)
#define DISPID_DOM_ELEMENT_GETATTRIBUTENODE        (DISPID_DOM_ELEMENT + 6)
#define DISPID_DOM_ELEMENT_SETATTRIBUTENODE        (DISPID_DOM_ELEMENT + 7)
#define DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE     (DISPID_DOM_ELEMENT + 8)
#define DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME    (DISPID_DOM_ELEMENT + 9)
#define DISPID_DOM_ELEMENT_NORMALIZE               (DISPID_DOM_ELEMENT + 10)
#define DISPID_DOM_ELEMENT__TOP                    (DISPID_DOM_ELEMENT + 11)

#define DISPID_DOM_DATA                        (DISPID_DOM_ELEMENT__TOP + 1)
#define DISPID_DOM_DATA_DATA                   (DISPID_DOM_DATA + 1)
#define DISPID_DOM_DATA_LENGTH                 (DISPID_DOM_DATA + 2)
#define DISPID_DOM_DATA_SUBSTRING              (DISPID_DOM_DATA + 3)
#define DISPID_DOM_DATA_APPEND                 (DISPID_DOM_DATA + 4)
#define DISPID_DOM_DATA_INSERT                 (DISPID_DOM_DATA + 5)
#define DISPID_DOM_DATA_DELETE                 (DISPID_DOM_DATA + 6)
#define DISPID_DOM_DATA_REPLACE                (DISPID_DOM_DATA + 7)
#define DISPID_DOM_DATA__TOP                   (DISPID_DOM_DATA + 8)

#define DISPID_DOM_ATTRIBUTE                   (DISPID_DOM_DATA__TOP + 1)
#define DISPID_DOM_ATTRIBUTE_GETNAME           (DISPID_DOM_ATTRIBUTE + 1)
#define DISPID_DOM_ATTRIBUTE_SPECIFIED         (DISPID_DOM_ATTRIBUTE + 2)
#define DISPID_DOM_ATTRIBUTE_VALUE             (DISPID_DOM_ATTRIBUTE + 3)
#define DISPID_DOM_ATTRIBUTE__TOP              (DISPID_DOM_ATTRIBUTE + 4)

#define DISPID_DOM_TEXT                (DISPID_DOM_ATTRIBUTE__TOP + 1)
#define DISPID_DOM_TEXT_SPLITTEXT      (DISPID_DOM_TEXT + 1)
#define DISPID_DOM_TEXT_JOINTEXT       (DISPID_DOM_TEXT + 2)
#define DISPID_DOM_TEXT__TOP           (DISPID_DOM_TEXT + 3)

#define DISPID_DOM_PI           (DISPID_DOM_TEXT__TOP + 1)
#define DISPID_DOM_PI_TARGET    (DISPID_DOM_PI + 1)
#define DISPID_DOM_PI_DATA      (DISPID_DOM_PI + 2)
#define DISPID_DOM_PI__TOP      (DISPID_DOM_PI + 3)

#define DISPID_DOM_DOCUMENTTYPE            (DISPID_DOM_PI__TOP + 1)
#define DISPID_DOM_DOCUMENTTYPE_NAME       (DISPID_DOM_DOCUMENTTYPE + 1)
#define DISPID_DOM_DOCUMENTTYPE_ENTITIES   (DISPID_DOM_DOCUMENTTYPE + 2)
#define DISPID_DOM_DOCUMENTTYPE_NOTATIONS  (DISPID_DOM_DOCUMENTTYPE + 3)
#define DISPID_DOM_DOCUMENTTYPE__TOP       (DISPID_DOM_DOCUMENTTYPE + 4)

#define DISPID_DOM_NOTATION                (DISPID_DOM_DOCUMENTTYPE__TOP + 1)
#define DISPID_DOM_NOTATION_PUBLICID       (DISPID_DOM_NOTATION + 1)
#define DISPID_DOM_NOTATION_SYSTEMID       (DISPID_DOM_NOTATION + 2)
#define DISPID_DOM_NOTATION__TOP           (DISPID_DOM_NOTATION + 3)

#define DISPID_DOM_ENTITY                  (DISPID_DOM_NOTATION__TOP + 1)
#define DISPID_DOM_ENTITY_PUBLICID         (DISPID_DOM_ENTITY + 1)
#define DISPID_DOM_ENTITY_SYSTEMID         (DISPID_DOM_ENTITY + 2)
#define DISPID_DOM_ENTITY_NOTATIONNAME     (DISPID_DOM_ENTITY + 3)
#define DISPID_DOM_ENTITY__TOP             (DISPID_DOM_ENTITY + 4)

//define DISPID_DOM_COMMENT         
//define DISPID_DOM_CDATASECTION
//define DISPID_DOM_ENTITYREFERENCE

#define DISPID_DOM_W3CWRAPPERS_TOP         (DISPID_DOM_ENTITY__TOP)


#define DISPID_DOM_IMPLEMENTATION              (DISPID_DOM_W3CWRAPPERS_TOP + 1)
#define DISPID_DOM_IMPLEMENTATION_HASFEATURE   (DISPID_DOM_IMPLEMENTATION + 1)
#define DISPID_DOM_IMPLEMENTATION__TOP         (DISPID_DOM_IMPLEMENTATION + 2)

#define DISPID_DOM__TOP         (DISPID_DOM_IMPLEMENTATION + 0x20)


#define  DISPID_DOM_ERROR                      (DISPID_DOM__TOP  + 1)
#define  DISPID_DOM_ERROR_ERRORCODE            (DISPID_DOM_ERROR  +  1)
#define  DISPID_DOM_ERROR_URL                  (DISPID_DOM_ERROR  +  2)
#define  DISPID_DOM_ERROR_REASON               (DISPID_DOM_ERROR  +  3)
#define  DISPID_DOM_ERROR_SRCTEXT              (DISPID_DOM_ERROR  +  4)
#define  DISPID_DOM_ERROR_LINE                 (DISPID_DOM_ERROR  +  5)
#define  DISPID_DOM_ERROR_LINEPOS              (DISPID_DOM_ERROR  +  6)
#define  DISPID_DOM_ERROR_FILEPOS              (DISPID_DOM_ERROR  +  7)
#define  DISPID_DOM_ERROR__TOP                 (DISPID_DOM_ERROR  +  8)

#define  DISPID_DOM_ERROR2                      (DISPID_DOM_ERROR__TOP + 1)
#define  DISPID_DOM_ERROR2_ALLERRORS            (DISPID_DOM_ERROR2     + 1)
#define  DISPID_DOM_ERROR2_ERRORPARAMETERS      (DISPID_DOM_ERROR2     + 2)
#define  DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT (DISPID_DOM_ERROR2     + 3)
#define  DISPID_DOM_ERROR2_ERRORXPATH           (DISPID_DOM_ERROR2     + 4)
#define  DISPID_DOM_ERROR2__TOP                 (DISPID_DOM_ERROR2     + 5)

#define  DISPID_DOM_ERRORCOLLECTION             (DISPID_DOM_ERROR2__TOP  + 1)
#define  DISPID_DOM_ERRORCOLLECTION_LENGTH      (DISPID_DOM_ERRORCOLLECTION  +  1)
#define  DISPID_DOM_ERRORCOLLECTION_NEXT        (DISPID_DOM_ERRORCOLLECTION  +  2)
#define  DISPID_DOM_ERRORCOLLECTION_RESET       (DISPID_DOM_ERRORCOLLECTION  +  3)
#define  DISPID_DOM_ERRORCOLLECTION__TOP        (DISPID_DOM_ERRORCOLLECTION  +  4)

#define  DISPID_XTLRUNTIME                         (DISPID_DOM_ERROR__TOP + 1)
#define  DISPID_XTLRUNTIME_UNIQUEID                (DISPID_XTLRUNTIME + 1)
#define  DISPID_XTLRUNTIME_DEPTH                   (DISPID_XTLRUNTIME + 2)
#define  DISPID_XTLRUNTIME_CHILDNUMBER             (DISPID_XTLRUNTIME + 3)
#define  DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER     (DISPID_XTLRUNTIME + 4)
#define  DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER     (DISPID_XTLRUNTIME + 5)
#define  DISPID_XTLRUNTIME_FORMATINDEX             (DISPID_XTLRUNTIME + 6)
#define  DISPID_XTLRUNTIME_FORMATNUMBER            (DISPID_XTLRUNTIME + 7)
#define  DISPID_XTLRUNTIME_FORMATDATE              (DISPID_XTLRUNTIME + 8)
#define  DISPID_XTLRUNTIME_FORMATTIME              (DISPID_XTLRUNTIME + 9)
#define  DISPID_XTLRUNTIME__TOP                    (DISPID_XTLRUNTIME + 10)

#define  DISPID_XMLDOMEVENT                        (DISPID_XTLRUNTIME__TOP + 1)
#define  DISPID_XMLDOMEVENT_ONREADYSTATECHANGE     (DISPID_READYSTATECHANGE)
#define  DISPID_XMLDOMEVENT_ONDATAAVAILABLE        (DISPID_XMLDOMEVENT + 1)
#define  DISPID_XMLDOMEVENT__TOP                   (DISPID_XMLDOMEVENT + 2)

#define DISPID_XMLDOM_DOCUMENT2                    (DISPID_XMLDOMEVENT__TOP + 1)
#define DISPID_XMLDOM_DOCUMENT2_NAMESPACES         (DISPID_XMLDOM_DOCUMENT2 + 1)
#define DISPID_XMLDOM_DOCUMENT2_SCHEMAS            (DISPID_XMLDOM_DOCUMENT2 + 2)
#define DISPID_XMLDOM_DOCUMENT2_VALIDATE           (DISPID_XMLDOM_DOCUMENT2 + 3)
#define DISPID_XMLDOM_DOCUMENT2_SETPROPERTY        (DISPID_XMLDOM_DOCUMENT2 + 4)
#define DISPID_XMLDOM_DOCUMENT2_GETPROPERTY        (DISPID_XMLDOM_DOCUMENT2 + 5)
#define DISPID_XMLDOM_DOCUMENT2__TOP               (DISPID_XMLDOM_DOCUMENT2 + 6)

#define DISPID_XMLDOM_DOCUMENT3                    (DISPID_XMLDOM_DOCUMENT2__TOP + 1)
#define DISPID_XMLDOM_DOCUMENT3_VALIDATENODE       (DISPID_XMLDOM_DOCUMENT3 + 1)
#define DISPID_XMLDOM_DOCUMENT3_IMPORTNODE         (DISPID_XMLDOM_DOCUMENT3 + 2)
#define DISPID_XMLDOM_DOCUMENT3__TOP               (DISPID_XMLDOM_DOCUMENT3 + 3)

#define DISPID_XMLDOM_SCHEMACOLLECTION               (DISPID_DOM_BASE + 1)
#define DISPID_XMLDOM_SCHEMACOLLECTION_ADD           (DISPID_XMLDOM_SCHEMACOLLECTION + 1)
#define DISPID_XMLDOM_SCHEMACOLLECTION_GET           (DISPID_XMLDOM_SCHEMACOLLECTION + 2)
#define DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE        (DISPID_XMLDOM_SCHEMACOLLECTION + 3)
#define DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH        (DISPID_XMLDOM_SCHEMACOLLECTION + 4)
#define DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI  (DISPID_XMLDOM_SCHEMACOLLECTION + 5)
#define DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION (DISPID_XMLDOM_SCHEMACOLLECTION + 6)
#define DISPID_XMLDOM_SCHEMACOLLECTION__TOP          (DISPID_XMLDOM_SCHEMACOLLECTION + 7)

#define DISPID_XMLDOM_SELECTION                    (DISPID_XMLDOM_NODELIST__TOP + 1)
#define DISPID_XMLDOM_SELECTION_EXPR               (DISPID_XMLDOM_SELECTION + 1)
#define DISPID_XMLDOM_SELECTION_CONTEXT            (DISPID_XMLDOM_SELECTION + 2)
#define DISPID_XMLDOM_SELECTION_PEEKNODE           (DISPID_XMLDOM_SELECTION + 3)
#define DISPID_XMLDOM_SELECTION_MATCHES            (DISPID_XMLDOM_SELECTION + 4)
#define DISPID_XMLDOM_SELECTION_REMOVENEXT         (DISPID_XMLDOM_SELECTION + 5)
#define DISPID_XMLDOM_SELECTION_REMOVEALL          (DISPID_XMLDOM_SELECTION + 6)
#define DISPID_XMLDOM_SELECTION_CLONE              (DISPID_XMLDOM_SELECTION + 7)
#define DISPID_XMLDOM_SELECTION_GETPROPERTY        (DISPID_XMLDOM_SELECTION + 8)
#define DISPID_XMLDOM_SELECTION_SETPROPERTY        (DISPID_XMLDOM_SELECTION + 9)
#define DISPID_XMLDOM_SELECTION__TOP               (DISPID_XMLDOM_SELECTION + 10)

#define DISPID_XMLDOM_TEMPLATE                     (DISPID_DOM_BASE)
#define DISPID_XMLDOM_TEMPLATE_STYLESHEET          (DISPID_XMLDOM_TEMPLATE + 1)
#define DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR     (DISPID_XMLDOM_TEMPLATE + 2)
#define DISPID_XMLDOM_TEMPLATE__TOP                (DISPID_XMLDOM_TEMPLATE + 3)

#define DISPID_XMLDOM_PROCESSOR                    (DISPID_DOM_BASE)
#define DISPID_XMLDOM_PROCESSOR_INPUT              (DISPID_XMLDOM_PROCESSOR + 1)
#define DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE        (DISPID_XMLDOM_PROCESSOR + 2)
#define DISPID_XMLDOM_PROCESSOR_SETSTARTMODE       (DISPID_XMLDOM_PROCESSOR + 3)
#define DISPID_XMLDOM_PROCESSOR_STARTMODE          (DISPID_XMLDOM_PROCESSOR + 4)
#define DISPID_XMLDOM_PROCESSOR_STARTMODEURI       (DISPID_XMLDOM_PROCESSOR + 5)
#define DISPID_XMLDOM_PROCESSOR_OUTPUT             (DISPID_XMLDOM_PROCESSOR + 6)
#define DISPID_XMLDOM_PROCESSOR_TRANSFORM          (DISPID_XMLDOM_PROCESSOR + 7)
#define DISPID_XMLDOM_PROCESSOR_RESET              (DISPID_XMLDOM_PROCESSOR + 8)
#define DISPID_XMLDOM_PROCESSOR_READYSTATE         (DISPID_XMLDOM_PROCESSOR + 9)
#define DISPID_XMLDOM_PROCESSOR_ADDPARAMETER       (DISPID_XMLDOM_PROCESSOR + 10)
#define DISPID_XMLDOM_PROCESSOR_ADDOBJECT          (DISPID_XMLDOM_PROCESSOR + 11)
#define DISPID_XMLDOM_PROCESSOR_STYLESHEET         (DISPID_XMLDOM_PROCESSOR + 12)
#define DISPID_XMLDOM_PROCESSOR__TOP               (DISPID_XMLDOM_PROCESSOR + 13)

#define  DISPID_XMLDSO                       DISPID_XOBJ_BASE
#define  DISPID_XMLDSO_DOCUMENT              DISPID_XMLDSO  +  1
#define  DISPID_XMLDSO_JAVADSOCOMPATIBLE     DISPID_XMLDSO_DOCUMENT  +  1


#define DISPID_SAX_XMLREADER__MIN                 0x00000501
#define DISPID_SAX_XMLREADER__MAX                 0x00010000
#define DISPID_SAX_XMLREADER__BASE                DISPID_SAX_XMLREADER__MIN

#define DISPID_SAX_XMLREADER                (DISPID_SAX_XMLREADER__BASE)
#define DISPID_SAX_XMLREADER_GETFEATURE     (DISPID_SAX_XMLREADER + 1)
#define DISPID_SAX_XMLREADER_PUTFEATURE     (DISPID_SAX_XMLREADER + 2)
#define DISPID_SAX_XMLREADER_GETPROPERTY    (DISPID_SAX_XMLREADER + 3)
#define DISPID_SAX_XMLREADER_PUTPROPERTY    (DISPID_SAX_XMLREADER + 4)
#define DISPID_SAX_XMLREADER_ENTITYRESOLVER (DISPID_SAX_XMLREADER + 5)
#define DISPID_SAX_XMLREADER_CONTENTHANDLER (DISPID_SAX_XMLREADER + 6)
#define DISPID_SAX_XMLREADER_DTDHANDLER     (DISPID_SAX_XMLREADER + 7)
#define DISPID_SAX_XMLREADER_ERRORHANDLER   (DISPID_SAX_XMLREADER + 8)
#define DISPID_SAX_XMLREADER_BASEURL        (DISPID_SAX_XMLREADER + 9)
#define DISPID_SAX_XMLREADER_SECUREBASEURL  (DISPID_SAX_XMLREADER + 10)
#define DISPID_SAX_XMLREADER_PARSE          (DISPID_SAX_XMLREADER + 11)
#define DISPID_SAX_XMLREADER_PARSEURL       (DISPID_SAX_XMLREADER + 12)
#define DISPID_SAX_XMLREADER_PARENT         (DISPID_SAX_XMLREADER + 13)
#define DISPID_SAX_XMLREADER__TOP           (DISPID_SAX_XMLREADER + 14)

#define DISPID_SAX_XMLFILTER__BASE          (DISPID_SAX_XMLREADER__TOP + 1)
#define DISPID_SAX_XMLFILTER                (DISPID_SAX_XMLFILTER__BASE)
#define DISPID_SAX_XMLFILTER_GETFEATURE     (DISPID_SAX_XMLFILTER + 1)
#define DISPID_SAX_XMLFILTER_PUTFEATURE     (DISPID_SAX_XMLFILTER + 2)
#define DISPID_SAX_XMLFILTER_GETPROPERTY    (DISPID_SAX_XMLFILTER + 3)
#define DISPID_SAX_XMLFILTER_PUTPROPERTY    (DISPID_SAX_XMLFILTER + 4)
#define DISPID_SAX_XMLFILTER_ENTITYRESOLVER (DISPID_SAX_XMLFILTER + 5)
#define DISPID_SAX_XMLFILTER_CONTENTHANDLER (DISPID_SAX_XMLFILTER + 6)
#define DISPID_SAX_XMLFILTER_DTDHANDLER     (DISPID_SAX_XMLFILTER + 7)
#define DISPID_SAX_XMLFILTER_ERRORHANDLER   (DISPID_SAX_XMLFILTER + 8)
#define DISPID_SAX_XMLFILTER_BASEURL        (DISPID_SAX_XMLFILTER + 9)
#define DISPID_SAX_XMLFILTER_SECUREBASEURL  (DISPID_SAX_XMLFILTER + 10)
#define DISPID_SAX_XMLFILTER_PARSE          (DISPID_SAX_XMLFILTER + 11)
#define DISPID_SAX_XMLFILTER_PARSEURL       (DISPID_SAX_XMLFILTER + 12)
#define DISPID_SAX_XMLFILTER_PARENT         (DISPID_SAX_XMLFILTER + 13)
#define DISPID_SAX_XMLFILTER__TOP           (DISPID_SAX_XMLFILTER + 15)

#define DISPID_SAX_LOCATOR__BASE        (DISPID_SAX_XMLFILTER__TOP + 1)
#define DISPID_SAX_LOCATOR              (DISPID_SAX_LOCATOR__BASE)
#define DISPID_SAX_LOCATOR_COLUMNNUMBER (DISPID_SAX_LOCATOR + 1)
#define DISPID_SAX_LOCATOR_LINENUMBER   (DISPID_SAX_LOCATOR + 2)
#define DISPID_SAX_LOCATOR_PUBLICID     (DISPID_SAX_LOCATOR + 3)
#define DISPID_SAX_LOCATOR_SYSTEMID     (DISPID_SAX_LOCATOR + 4)
#define DISPID_SAX_LOCATOR__TOP         (DISPID_SAX_LOCATOR + 5)

#define DISPID_SAX_ENTITYRESOLVER__BASE         (DISPID_SAX_LOCATOR__TOP + 1)
#define DISPID_SAX_ENTITYRESOLVER               (DISPID_SAX_ENTITYRESOLVER__BASE)
#define DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY (DISPID_SAX_ENTITYRESOLVER + 1)
#define DISPID_SAX_ENTITYRESOLVER__TOP          (DISPID_SAX_ENTITYRESOLVER + 2)

#define DISPID_SAX_CONTENTHANDLER__BASE                 (DISPID_SAX_ENTITYRESOLVER__TOP + 1)
#define DISPID_SAX_CONTENTHANDLER                       (DISPID_SAX_CONTENTHANDLER__BASE)
#define DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR       (DISPID_SAX_CONTENTHANDLER + 1)
#define DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT         (DISPID_SAX_CONTENTHANDLER + 2)
#define DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT           (DISPID_SAX_CONTENTHANDLER + 3)
#define DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING    (DISPID_SAX_CONTENTHANDLER + 4)
#define DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING      (DISPID_SAX_CONTENTHANDLER + 5)
#define DISPID_SAX_CONTENTHANDLER_STARTELEMENT          (DISPID_SAX_CONTENTHANDLER + 6)
#define DISPID_SAX_CONTENTHANDLER_ENDELEMENT            (DISPID_SAX_CONTENTHANDLER + 7)
#define DISPID_SAX_CONTENTHANDLER_CHARACTERS            (DISPID_SAX_CONTENTHANDLER + 8)
#define DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE   (DISPID_SAX_CONTENTHANDLER + 9)
#define DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION (DISPID_SAX_CONTENTHANDLER + 10)
#define DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY         (DISPID_SAX_CONTENTHANDLER + 11)
#define DISPID_SAX_CONTENTHANDLER__TOP                  (DISPID_SAX_CONTENTHANDLER + 12)

#define DISPID_SAX_DTDHANDLER__BASE                 (DISPID_SAX_CONTENTHANDLER__TOP + 1)
#define DISPID_SAX_DTDHANDLER                       (DISPID_SAX_DTDHANDLER__BASE)
#define DISPID_SAX_DTDHANDLER_NOTATIONDECL          (DISPID_SAX_DTDHANDLER + 1)
#define DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL    (DISPID_SAX_DTDHANDLER + 2)
#define DISPID_SAX_DTDHANDLER__TOP                  (DISPID_SAX_DTDHANDLER + 3)

#define DISPID_SAX_ERRORHANDLER__BASE               (DISPID_SAX_DTDHANDLER__TOP + 1)
#define DISPID_SAX_ERRORHANDLER                     (DISPID_SAX_ERRORHANDLER__BASE)
#define DISPID_SAX_ERRORHANDLER_ERROR               (DISPID_SAX_ERRORHANDLER + 1)
#define DISPID_SAX_ERRORHANDLER_FATALERROR          (DISPID_SAX_ERRORHANDLER + 2)
#define DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING    (DISPID_SAX_ERRORHANDLER + 3)
#define DISPID_SAX_ERRORHANDLER__TOP                (DISPID_SAX_ERRORHANDLER + 4)

#define DISPID_SAX_ATTRIBUTES__BASE             (DISPID_SAX_ERRORHANDLER__TOP + 1)
#define DISPID_SAX_ATTRIBUTES                   (DISPID_SAX_ATTRIBUTES__BASE)
#define DISPID_SAX_ATTRIBUTES_LENGTH            (DISPID_SAX_ATTRIBUTES + 1)
#define DISPID_SAX_ATTRIBUTES_GETURI            (DISPID_SAX_ATTRIBUTES + 2)
#define DISPID_SAX_ATTRIBUTES_GETLOCALNAME      (DISPID_SAX_ATTRIBUTES + 3)
#define DISPID_SAX_ATTRIBUTES_GETQNAME          (DISPID_SAX_ATTRIBUTES + 4)
#define DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME  (DISPID_SAX_ATTRIBUTES + 5)
#define DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME (DISPID_SAX_ATTRIBUTES + 6)
#define DISPID_SAX_ATTRIBUTES_GETTYPE           (DISPID_SAX_ATTRIBUTES + 7)
#define DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME   (DISPID_SAX_ATTRIBUTES + 8)
#define DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME  (DISPID_SAX_ATTRIBUTES + 9)
#define DISPID_SAX_ATTRIBUTES_GETVALUE          (DISPID_SAX_ATTRIBUTES + 10)
#define DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME  (DISPID_SAX_ATTRIBUTES + 11)
#define DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME (DISPID_SAX_ATTRIBUTES + 12)
#define DISPID_SAX_ATTRIBUTES__TOP              (DISPID_SAX_ATTRIBUTES + 13)

#define DISPID_SAX_LEXICALHANDLER__BASE         (DISPID_SAX_ATTRIBUTES__TOP + 1)
#define DISPID_SAX_LEXICALHANDLER               (DISPID_SAX_LEXICALHANDLER__BASE)
#define DISPID_SAX_LEXICALHANDLER_STARTDTD      (DISPID_SAX_LEXICALHANDLER + 1)
#define DISPID_SAX_LEXICALHANDLER_ENDDTD        (DISPID_SAX_LEXICALHANDLER + 2)
#define DISPID_SAX_LEXICALHANDLER_STARTENTITY   (DISPID_SAX_LEXICALHANDLER + 3)
#define DISPID_SAX_LEXICALHANDLER_ENDENTITY     (DISPID_SAX_LEXICALHANDLER + 4)
#define DISPID_SAX_LEXICALHANDLER_STARTCDATA    (DISPID_SAX_LEXICALHANDLER + 5)
#define DISPID_SAX_LEXICALHANDLER_ENDCDATA      (DISPID_SAX_LEXICALHANDLER + 6)
#define DISPID_SAX_LEXICALHANDLER_COMMENT       (DISPID_SAX_LEXICALHANDLER + 7)
#define DISPID_SAX_LEXICALHANDLER__TOP          (DISPID_SAX_LEXICALHANDLER + 8)

#define DISPID_SAX_DECLHANDLER__BASE              (DISPID_SAX_LEXICALHANDLER__TOP + 1)
#define DISPID_SAX_DECLHANDLER                    (DISPID_SAX_DECLHANDLER__BASE)
#define DISPID_SAX_DECLHANDLER_ELEMENTDECL        (DISPID_SAX_DECLHANDLER + 1)
#define DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL      (DISPID_SAX_DECLHANDLER + 2)
#define DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL (DISPID_SAX_DECLHANDLER + 3)
#define DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL (DISPID_SAX_DECLHANDLER + 4)
#define DISPID_SAX_DECLHANDLER__TOP               (DISPID_SAX_DECLHANDLER + 5)

#define DISPID_MX_ATTRIBUTES__BASE                 (DISPID_SAX_DECLHANDLER__TOP + 1)
#define DISPID_MX_ATTRIBUTES                       (DISPID_MX_ATTRIBUTES__BASE)
#define DISPID_MX_ATTRIBUTES_ADDATTRIBUTE          (DISPID_MX_ATTRIBUTES + 1)
#define DISPID_MX_ATTRIBUTES_CLEAR                 (DISPID_MX_ATTRIBUTES + 2)
#define DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE       (DISPID_MX_ATTRIBUTES + 3)
#define DISPID_MX_ATTRIBUTES_SETATTRIBUTE          (DISPID_MX_ATTRIBUTES + 4)
#define DISPID_MX_ATTRIBUTES_SETATTRIBUTES         (DISPID_MX_ATTRIBUTES + 5)
#define DISPID_MX_ATTRIBUTES_SETLOCALNAME          (DISPID_MX_ATTRIBUTES + 6)
#define DISPID_MX_ATTRIBUTES_SETQNAME              (DISPID_MX_ATTRIBUTES + 7)
#define DISPID_MX_ATTRIBUTES_SETTYPE               (DISPID_MX_ATTRIBUTES + 8)
#define DISPID_MX_ATTRIBUTES_SETURI                (DISPID_MX_ATTRIBUTES + 9)
#define DISPID_MX_ATTRIBUTES_SETVALUE              (DISPID_MX_ATTRIBUTES + 10)
#define DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX (DISPID_MX_ATTRIBUTES + 11)
#define DISPID_MX_ATTRIBUTES__TOP                  (DISPID_MX_ATTRIBUTES + 11)

#define DISPID_MX_WRITER__BASE                 (DISPID_MX_ATTRIBUTES__TOP + 1)
#define DISPID_MX_WRITER                       (DISPID_MX_WRITER__BASE)
#define DISPID_MX_WRITER_OUTPUT                (DISPID_MX_WRITER + 1)
#define DISPID_MX_WRITER_DESTINATION           (DISPID_MX_WRITER + 2)
#define DISPID_MX_WRITER_ENCODING              (DISPID_MX_WRITER + 3)
#define DISPID_MX_WRITER_BYTEORDERMARK         (DISPID_MX_WRITER + 4)
#define DISPID_MX_WRITER_INDENT                (DISPID_MX_WRITER + 5)
#define DISPID_MX_WRITER_STANDALONE            (DISPID_MX_WRITER + 6)
#define DISPID_MX_WRITER_OMITXMLDECLARATION    (DISPID_MX_WRITER + 7)
#define DISPID_MX_WRITER_VERSION               (DISPID_MX_WRITER + 8)
#define DISPID_MX_WRITER_DISABLEOUTPUTESCAPING (DISPID_MX_WRITER + 9)
#define DISPID_MX_WRITER_FLUSH                 (DISPID_MX_WRITER + 10)
#define DISPID_MX_WRITER_RESET                 (DISPID_MX_WRITER + 11)
#define DISPID_MX_WRITER__TOP                  (DISPID_MX_WRITER + 12)

#define DISPID_MX_READER_CONTROL__BASE         (DISPID_MX_WRITER__TOP + 1)
#define DISPID_MX_READER_CONTROL               (DISPID_MX_READER_CONTROL__BASE)
#define DISPID_MX_READER_CONTROL_ABORT         (DISPID_MX_READER_CONTROL + 1)
#define DISPID_MX_READER_CONTROL_RESUME        (DISPID_MX_READER_CONTROL + 2)
#define DISPID_MX_READER_CONTROL_SUSPEND       (DISPID_MX_READER_CONTROL + 3)
#define DISPID_MX_READER_CONTROL__TOP          (DISPID_MX_READER_CONTROL + 4)

#define DISPID_MX_SCHEMADECLHANDLER__BASE               (DISPID_MX_READER_CONTROL__TOP + 1)
#define DISPID_MX_SCHEMADECLHANDLER                     (DISPID_MX_SCHEMADECLHANDLER__BASE)
#define DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL   (DISPID_MX_SCHEMADECLHANDLER + 1)
#define DISPID_MX_SCHEMADECLHANDLER__TOP                (DISPID_MX_SCHEMADECLHANDLER + 2)

#define DISPID_MX_NSMGR__BASE                      (DISPID_MX_SCHEMADECLHANDLER__TOP + 1)
#define DISPID_MX_NSMGR                            (DISPID_MX_NSMGR__BASE)
#define DISPID_MX_NSMGR_ALLOWOVERRIDE              (DISPID_MX_NSMGR +   1)
#define DISPID_MX_NSMGR_RESET                      (DISPID_MX_NSMGR +   2)
#define DISPID_MX_NSMGR_PUSHCONTEXT                (DISPID_MX_NSMGR +   3)
#define DISPID_MX_NSMGR_PUSHNODECONTEXT            (DISPID_MX_NSMGR +   4)
#define DISPID_MX_NSMGR_POPCONTEXT                 (DISPID_MX_NSMGR +   5)
#define DISPID_MX_NSMGR_DECLAREPREFIX              (DISPID_MX_NSMGR +   6)
#define DISPID_MX_NSMGR_GETDECLAREDPREFIXES        (DISPID_MX_NSMGR +   7)
#define DISPID_MX_NSMGR_GETPREFIXES                (DISPID_MX_NSMGR +   8)
#define DISPID_MX_NSMGR_GETURI                     (DISPID_MX_NSMGR +   9)
#define DISPID_MX_NSMGR_GETURIFROMNODE             (DISPID_MX_NSMGR +  10)
#define DISPID_MX_NSMGR_LENGTH                     (DISPID_MX_NSMGR +  11)
#define DISPID_MX_NSMGR__TOP                       (DISPID_MX_NSMGR +  12)

#define DISPID_MXXML_FILTER__BASE                  (DISPID_MX_NSMGR__TOP + 1)
#define DISPID_MXXML_FILTER                        (DISPID_MXXML_FILTER__BASE)
#define DISPID_MXXML_FILTER_CONTENTHANDLER         (DISPID_MXXML_FILTER + 1)
#define DISPID_MXXML_FILTER_DTDHANDLER             (DISPID_MXXML_FILTER + 2)
#define DISPID_MXXML_FILTER_ENTITYRESOLVER         (DISPID_MXXML_FILTER + 3)
#define DISPID_MXXML_FILTER_ERRORHANDLER           (DISPID_MXXML_FILTER + 4)
#define DISPID_MXXML_FILTER_GETFEATURE             (DISPID_MXXML_FILTER + 5)
#define DISPID_MXXML_FILTER_GETPROPERTY            (DISPID_MXXML_FILTER + 6)
#define DISPID_MXXML_FILTER_PUTFEATURE             (DISPID_MXXML_FILTER + 7)
#define DISPID_MXXML_FILTER_PUTPROPERTY            (DISPID_MXXML_FILTER + 8)
#define DISPID_MXXML_FILTER__TOP                   (DISPID_MXXML_FILTER + 9)


// Schema Object Model DISPIDs
#define DISPID_SOM                      (DISPID_MX_NSMGR__TOP + 1)
#define DISPID_SOM_VALIDATE             (DISPID_SOM +  1)
#define DISPID_SOM_VALIDATEONLOAD       (DISPID_SOM +  2)
#define DISPID_SOM_GETSCHEMA            (DISPID_SOM +  3)
#define DISPID_SOM_GETDECLARATION       (DISPID_SOM +  4)
#define DISPID_SOM_ITEMBYNAME           (DISPID_SOM +  5)
#define DISPID_SOM_ITEMBYQNAME          (DISPID_SOM +  6)
#define DISPID_SOM_ANYATTRIBUTE         (DISPID_SOM +  7)
#define DISPID_SOM_ATTRIBUTEGROUPS      (DISPID_SOM +  8)
#define DISPID_SOM_ATTRIBUTES           (DISPID_SOM +  9)
#define DISPID_SOM_BASETYPES            (DISPID_SOM + 10)
#define DISPID_SOM_CONTENTMODEL         (DISPID_SOM + 11)
#define DISPID_SOM_CONTENTTYPE          (DISPID_SOM + 12)
#define DISPID_SOM_DEFAULTVALUE         (DISPID_SOM + 13)
#define DISPID_SOM_DERIVEDBY            (DISPID_SOM + 14)
#define DISPID_SOM_DISALLOWED           (DISPID_SOM + 15)
#define DISPID_SOM_ELEMENTS             (DISPID_SOM + 16)
#define DISPID_SOM_ENUMERATION          (DISPID_SOM + 17)
#define DISPID_SOM_FIELDS               (DISPID_SOM + 18)
#define DISPID_SOM_FINAL                (DISPID_SOM + 19)
#define DISPID_SOM_FIXEDVALUE           (DISPID_SOM + 20)
#define DISPID_SOM_FRACTIONDIGITS       (DISPID_SOM + 21)
#define DISPID_SOM_ID                   (DISPID_SOM + 22)
#define DISPID_SOM_IDCONSTRAINTS        (DISPID_SOM + 23)
#define DISPID_SOM_ISABSTRACT           (DISPID_SOM + 24)
#define DISPID_SOM_ISNILLABLE           (DISPID_SOM + 25)
#define DISPID_SOM_ISREFERENCE          (DISPID_SOM + 26)
#define DISPID_SOM_ISVALID              (DISPID_SOM + 27)
#define DISPID_SOM_ITEMTYPE             (DISPID_SOM + 28)
#define DISPID_SOM_LENGTH               (DISPID_SOM + 29)
#define DISPID_SOM_MAXEXCLUSIVE         (DISPID_SOM + 30)
#define DISPID_SOM_MAXINCLUSIVE         (DISPID_SOM + 31)
#define DISPID_SOM_MAXLENGTH            (DISPID_SOM + 32)
#define DISPID_SOM_MAXOCCURS            (DISPID_SOM + 33)
#define DISPID_SOM_MINEXCLUSIVE         (DISPID_SOM + 34)
#define DISPID_SOM_MININCLUSIVE         (DISPID_SOM + 35)
#define DISPID_SOM_MINLENGTH            (DISPID_SOM + 36)
#define DISPID_SOM_MINOCCURS            (DISPID_SOM + 37)
#define DISPID_SOM_MODELGROUPS          (DISPID_SOM + 38)
#define DISPID_SOM_NAME                 (DISPID_SOM + 39)
#define DISPID_SOM_NAMESPACES           (DISPID_SOM + 40)
#define DISPID_SOM_NAMESPACEURI         (DISPID_SOM + 41)
#define DISPID_SOM_NOTATIONS            (DISPID_SOM + 42)
#define DISPID_SOM_PARTICLES            (DISPID_SOM + 43)
#define DISPID_SOM_PATTERNS             (DISPID_SOM + 44)
#define DISPID_SOM_PROCESSCONTENTS      (DISPID_SOM + 45)
#define DISPID_SOM_PROHIBITED           (DISPID_SOM + 46)
#define DISPID_SOM_PUBLICIDENTIFIER     (DISPID_SOM + 47)
#define DISPID_SOM_REFERENCEDKEY        (DISPID_SOM + 48)
#define DISPID_SOM_SCHEMA               (DISPID_SOM + 49)
#define DISPID_SOM_SCHEMALOCATIONS      (DISPID_SOM + 50)
#define DISPID_SOM_SCOPE                (DISPID_SOM + 51)
#define DISPID_SOM_SELECTOR             (DISPID_SOM + 52)
#define DISPID_SOM_SUBSTITUTIONGROUP    (DISPID_SOM + 53)
#define DISPID_SOM_EXCLUSIONS           (DISPID_SOM + 54)
#define DISPID_SOM_SYSTEMIDENTIFIER     (DISPID_SOM + 55)
#define DISPID_SOM_TARGETNAMESPACE      (DISPID_SOM + 56)
#define DISPID_SOM_TOTALDIGITS          (DISPID_SOM + 57)
#define DISPID_SOM_TYPE                 (DISPID_SOM + 58)
#define DISPID_SOM_TYPES                (DISPID_SOM + 59)
#define DISPID_SOM_UNHANDLEDATTRS       (DISPID_SOM + 60)
#define DISPID_SOM_USE                  (DISPID_SOM + 61)
#define DISPID_SOM_VARIETY              (DISPID_SOM + 62)
#define DISPID_SOM_VERSION              (DISPID_SOM + 63)
#define DISPID_SOM_WHITESPACE           (DISPID_SOM + 64)
#define DISPID_SOM_WRITEANNOTATION      (DISPID_SOM + 65)
#define DISPID_SOM_TOP                  (DISPID_SOM + 66)

//;begin_internal
#endif // __MSXMLDID_H__
//;end_internal
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MsXml2.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msxml2.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __msxml2_h__
#define __msxml2_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IXMLDOMImplementation_FWD_DEFINED__
#define __IXMLDOMImplementation_FWD_DEFINED__
typedef interface IXMLDOMImplementation IXMLDOMImplementation;
#endif 	/* __IXMLDOMImplementation_FWD_DEFINED__ */


#ifndef __IXMLDOMNode_FWD_DEFINED__
#define __IXMLDOMNode_FWD_DEFINED__
typedef interface IXMLDOMNode IXMLDOMNode;
#endif 	/* __IXMLDOMNode_FWD_DEFINED__ */


#ifndef __IXMLDOMDocumentFragment_FWD_DEFINED__
#define __IXMLDOMDocumentFragment_FWD_DEFINED__
typedef interface IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
#endif 	/* __IXMLDOMDocumentFragment_FWD_DEFINED__ */


#ifndef __IXMLDOMDocument_FWD_DEFINED__
#define __IXMLDOMDocument_FWD_DEFINED__
typedef interface IXMLDOMDocument IXMLDOMDocument;
#endif 	/* __IXMLDOMDocument_FWD_DEFINED__ */


#ifndef __IXMLDOMDocument2_FWD_DEFINED__
#define __IXMLDOMDocument2_FWD_DEFINED__
typedef interface IXMLDOMDocument2 IXMLDOMDocument2;
#endif 	/* __IXMLDOMDocument2_FWD_DEFINED__ */


#ifndef __IXMLDOMDocument3_FWD_DEFINED__
#define __IXMLDOMDocument3_FWD_DEFINED__
typedef interface IXMLDOMDocument3 IXMLDOMDocument3;
#endif 	/* __IXMLDOMDocument3_FWD_DEFINED__ */


#ifndef __IXMLDOMNodeList_FWD_DEFINED__
#define __IXMLDOMNodeList_FWD_DEFINED__
typedef interface IXMLDOMNodeList IXMLDOMNodeList;
#endif 	/* __IXMLDOMNodeList_FWD_DEFINED__ */


#ifndef __IXMLDOMNamedNodeMap_FWD_DEFINED__
#define __IXMLDOMNamedNodeMap_FWD_DEFINED__
typedef interface IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
#endif 	/* __IXMLDOMNamedNodeMap_FWD_DEFINED__ */


#ifndef __IXMLDOMCharacterData_FWD_DEFINED__
#define __IXMLDOMCharacterData_FWD_DEFINED__
typedef interface IXMLDOMCharacterData IXMLDOMCharacterData;
#endif 	/* __IXMLDOMCharacterData_FWD_DEFINED__ */


#ifndef __IXMLDOMAttribute_FWD_DEFINED__
#define __IXMLDOMAttribute_FWD_DEFINED__
typedef interface IXMLDOMAttribute IXMLDOMAttribute;
#endif 	/* __IXMLDOMAttribute_FWD_DEFINED__ */


#ifndef __IXMLDOMElement_FWD_DEFINED__
#define __IXMLDOMElement_FWD_DEFINED__
typedef interface IXMLDOMElement IXMLDOMElement;
#endif 	/* __IXMLDOMElement_FWD_DEFINED__ */


#ifndef __IXMLDOMText_FWD_DEFINED__
#define __IXMLDOMText_FWD_DEFINED__
typedef interface IXMLDOMText IXMLDOMText;
#endif 	/* __IXMLDOMText_FWD_DEFINED__ */


#ifndef __IXMLDOMComment_FWD_DEFINED__
#define __IXMLDOMComment_FWD_DEFINED__
typedef interface IXMLDOMComment IXMLDOMComment;
#endif 	/* __IXMLDOMComment_FWD_DEFINED__ */


#ifndef __IXMLDOMProcessingInstruction_FWD_DEFINED__
#define __IXMLDOMProcessingInstruction_FWD_DEFINED__
typedef interface IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
#endif 	/* __IXMLDOMProcessingInstruction_FWD_DEFINED__ */


#ifndef __IXMLDOMCDATASection_FWD_DEFINED__
#define __IXMLDOMCDATASection_FWD_DEFINED__
typedef interface IXMLDOMCDATASection IXMLDOMCDATASection;
#endif 	/* __IXMLDOMCDATASection_FWD_DEFINED__ */


#ifndef __IXMLDOMDocumentType_FWD_DEFINED__
#define __IXMLDOMDocumentType_FWD_DEFINED__
typedef interface IXMLDOMDocumentType IXMLDOMDocumentType;
#endif 	/* __IXMLDOMDocumentType_FWD_DEFINED__ */


#ifndef __IXMLDOMNotation_FWD_DEFINED__
#define __IXMLDOMNotation_FWD_DEFINED__
typedef interface IXMLDOMNotation IXMLDOMNotation;
#endif 	/* __IXMLDOMNotation_FWD_DEFINED__ */


#ifndef __IXMLDOMEntity_FWD_DEFINED__
#define __IXMLDOMEntity_FWD_DEFINED__
typedef interface IXMLDOMEntity IXMLDOMEntity;
#endif 	/* __IXMLDOMEntity_FWD_DEFINED__ */


#ifndef __IXMLDOMEntityReference_FWD_DEFINED__
#define __IXMLDOMEntityReference_FWD_DEFINED__
typedef interface IXMLDOMEntityReference IXMLDOMEntityReference;
#endif 	/* __IXMLDOMEntityReference_FWD_DEFINED__ */


#ifndef __IXMLDOMParseError_FWD_DEFINED__
#define __IXMLDOMParseError_FWD_DEFINED__
typedef interface IXMLDOMParseError IXMLDOMParseError;
#endif 	/* __IXMLDOMParseError_FWD_DEFINED__ */


#ifndef __IXMLDOMParseError2_FWD_DEFINED__
#define __IXMLDOMParseError2_FWD_DEFINED__
typedef interface IXMLDOMParseError2 IXMLDOMParseError2;
#endif 	/* __IXMLDOMParseError2_FWD_DEFINED__ */


#ifndef __IXMLDOMParseErrorCollection_FWD_DEFINED__
#define __IXMLDOMParseErrorCollection_FWD_DEFINED__
typedef interface IXMLDOMParseErrorCollection IXMLDOMParseErrorCollection;
#endif 	/* __IXMLDOMParseErrorCollection_FWD_DEFINED__ */


#ifndef __IXMLDOMSchemaCollection_FWD_DEFINED__
#define __IXMLDOMSchemaCollection_FWD_DEFINED__
typedef interface IXMLDOMSchemaCollection IXMLDOMSchemaCollection;
#endif 	/* __IXMLDOMSchemaCollection_FWD_DEFINED__ */


#ifndef __IXTLRuntime_FWD_DEFINED__
#define __IXTLRuntime_FWD_DEFINED__
typedef interface IXTLRuntime IXTLRuntime;
#endif 	/* __IXTLRuntime_FWD_DEFINED__ */


#ifndef __IXSLTemplate_FWD_DEFINED__
#define __IXSLTemplate_FWD_DEFINED__
typedef interface IXSLTemplate IXSLTemplate;
#endif 	/* __IXSLTemplate_FWD_DEFINED__ */


#ifndef __IXSLProcessor_FWD_DEFINED__
#define __IXSLProcessor_FWD_DEFINED__
typedef interface IXSLProcessor IXSLProcessor;
#endif 	/* __IXSLProcessor_FWD_DEFINED__ */


#ifndef __ISAXXMLReader_FWD_DEFINED__
#define __ISAXXMLReader_FWD_DEFINED__
typedef interface ISAXXMLReader ISAXXMLReader;
#endif 	/* __ISAXXMLReader_FWD_DEFINED__ */


#ifndef __ISAXXMLFilter_FWD_DEFINED__
#define __ISAXXMLFilter_FWD_DEFINED__
typedef interface ISAXXMLFilter ISAXXMLFilter;
#endif 	/* __ISAXXMLFilter_FWD_DEFINED__ */


#ifndef __ISAXLocator_FWD_DEFINED__
#define __ISAXLocator_FWD_DEFINED__
typedef interface ISAXLocator ISAXLocator;
#endif 	/* __ISAXLocator_FWD_DEFINED__ */


#ifndef __ISAXEntityResolver_FWD_DEFINED__
#define __ISAXEntityResolver_FWD_DEFINED__
typedef interface ISAXEntityResolver ISAXEntityResolver;
#endif 	/* __ISAXEntityResolver_FWD_DEFINED__ */


#ifndef __ISAXContentHandler_FWD_DEFINED__
#define __ISAXContentHandler_FWD_DEFINED__
typedef interface ISAXContentHandler ISAXContentHandler;
#endif 	/* __ISAXContentHandler_FWD_DEFINED__ */


#ifndef __ISAXDTDHandler_FWD_DEFINED__
#define __ISAXDTDHandler_FWD_DEFINED__
typedef interface ISAXDTDHandler ISAXDTDHandler;
#endif 	/* __ISAXDTDHandler_FWD_DEFINED__ */


#ifndef __ISAXErrorHandler_FWD_DEFINED__
#define __ISAXErrorHandler_FWD_DEFINED__
typedef interface ISAXErrorHandler ISAXErrorHandler;
#endif 	/* __ISAXErrorHandler_FWD_DEFINED__ */


#ifndef __ISAXLexicalHandler_FWD_DEFINED__
#define __ISAXLexicalHandler_FWD_DEFINED__
typedef interface ISAXLexicalHandler ISAXLexicalHandler;
#endif 	/* __ISAXLexicalHandler_FWD_DEFINED__ */


#ifndef __ISAXDeclHandler_FWD_DEFINED__
#define __ISAXDeclHandler_FWD_DEFINED__
typedef interface ISAXDeclHandler ISAXDeclHandler;
#endif 	/* __ISAXDeclHandler_FWD_DEFINED__ */


#ifndef __ISAXAttributes_FWD_DEFINED__
#define __ISAXAttributes_FWD_DEFINED__
typedef interface ISAXAttributes ISAXAttributes;
#endif 	/* __ISAXAttributes_FWD_DEFINED__ */


#ifndef __IVBSAXXMLReader_FWD_DEFINED__
#define __IVBSAXXMLReader_FWD_DEFINED__
typedef interface IVBSAXXMLReader IVBSAXXMLReader;
#endif 	/* __IVBSAXXMLReader_FWD_DEFINED__ */


#ifndef __IVBSAXXMLFilter_FWD_DEFINED__
#define __IVBSAXXMLFilter_FWD_DEFINED__
typedef interface IVBSAXXMLFilter IVBSAXXMLFilter;
#endif 	/* __IVBSAXXMLFilter_FWD_DEFINED__ */


#ifndef __IVBSAXLocator_FWD_DEFINED__
#define __IVBSAXLocator_FWD_DEFINED__
typedef interface IVBSAXLocator IVBSAXLocator;
#endif 	/* __IVBSAXLocator_FWD_DEFINED__ */


#ifndef __IVBSAXEntityResolver_FWD_DEFINED__
#define __IVBSAXEntityResolver_FWD_DEFINED__
typedef interface IVBSAXEntityResolver IVBSAXEntityResolver;
#endif 	/* __IVBSAXEntityResolver_FWD_DEFINED__ */


#ifndef __IVBSAXContentHandler_FWD_DEFINED__
#define __IVBSAXContentHandler_FWD_DEFINED__
typedef interface IVBSAXContentHandler IVBSAXContentHandler;
#endif 	/* __IVBSAXContentHandler_FWD_DEFINED__ */


#ifndef __IVBSAXDTDHandler_FWD_DEFINED__
#define __IVBSAXDTDHandler_FWD_DEFINED__
typedef interface IVBSAXDTDHandler IVBSAXDTDHandler;
#endif 	/* __IVBSAXDTDHandler_FWD_DEFINED__ */


#ifndef __IVBSAXErrorHandler_FWD_DEFINED__
#define __IVBSAXErrorHandler_FWD_DEFINED__
typedef interface IVBSAXErrorHandler IVBSAXErrorHandler;
#endif 	/* __IVBSAXErrorHandler_FWD_DEFINED__ */


#ifndef __IVBSAXLexicalHandler_FWD_DEFINED__
#define __IVBSAXLexicalHandler_FWD_DEFINED__
typedef interface IVBSAXLexicalHandler IVBSAXLexicalHandler;
#endif 	/* __IVBSAXLexicalHandler_FWD_DEFINED__ */


#ifndef __IVBSAXDeclHandler_FWD_DEFINED__
#define __IVBSAXDeclHandler_FWD_DEFINED__
typedef interface IVBSAXDeclHandler IVBSAXDeclHandler;
#endif 	/* __IVBSAXDeclHandler_FWD_DEFINED__ */


#ifndef __IVBSAXAttributes_FWD_DEFINED__
#define __IVBSAXAttributes_FWD_DEFINED__
typedef interface IVBSAXAttributes IVBSAXAttributes;
#endif 	/* __IVBSAXAttributes_FWD_DEFINED__ */


#ifndef __IMXWriter_FWD_DEFINED__
#define __IMXWriter_FWD_DEFINED__
typedef interface IMXWriter IMXWriter;
#endif 	/* __IMXWriter_FWD_DEFINED__ */


#ifndef __IMXAttributes_FWD_DEFINED__
#define __IMXAttributes_FWD_DEFINED__
typedef interface IMXAttributes IMXAttributes;
#endif 	/* __IMXAttributes_FWD_DEFINED__ */


#ifndef __IMXReaderControl_FWD_DEFINED__
#define __IMXReaderControl_FWD_DEFINED__
typedef interface IMXReaderControl IMXReaderControl;
#endif 	/* __IMXReaderControl_FWD_DEFINED__ */


#ifndef __IMXSchemaDeclHandler_FWD_DEFINED__
#define __IMXSchemaDeclHandler_FWD_DEFINED__
typedef interface IMXSchemaDeclHandler IMXSchemaDeclHandler;
#endif 	/* __IMXSchemaDeclHandler_FWD_DEFINED__ */


#ifndef __IMXXMLFilter_FWD_DEFINED__
#define __IMXXMLFilter_FWD_DEFINED__
typedef interface IMXXMLFilter IMXXMLFilter;
#endif 	/* __IMXXMLFilter_FWD_DEFINED__ */


#ifndef __IXMLDOMSchemaCollection2_FWD_DEFINED__
#define __IXMLDOMSchemaCollection2_FWD_DEFINED__
typedef interface IXMLDOMSchemaCollection2 IXMLDOMSchemaCollection2;
#endif 	/* __IXMLDOMSchemaCollection2_FWD_DEFINED__ */


#ifndef __ISchemaStringCollection_FWD_DEFINED__
#define __ISchemaStringCollection_FWD_DEFINED__
typedef interface ISchemaStringCollection ISchemaStringCollection;
#endif 	/* __ISchemaStringCollection_FWD_DEFINED__ */


#ifndef __ISchemaItemCollection_FWD_DEFINED__
#define __ISchemaItemCollection_FWD_DEFINED__
typedef interface ISchemaItemCollection ISchemaItemCollection;
#endif 	/* __ISchemaItemCollection_FWD_DEFINED__ */


#ifndef __ISchemaItem_FWD_DEFINED__
#define __ISchemaItem_FWD_DEFINED__
typedef interface ISchemaItem ISchemaItem;
#endif 	/* __ISchemaItem_FWD_DEFINED__ */


#ifndef __ISchema_FWD_DEFINED__
#define __ISchema_FWD_DEFINED__
typedef interface ISchema ISchema;
#endif 	/* __ISchema_FWD_DEFINED__ */


#ifndef __ISchemaParticle_FWD_DEFINED__
#define __ISchemaParticle_FWD_DEFINED__
typedef interface ISchemaParticle ISchemaParticle;
#endif 	/* __ISchemaParticle_FWD_DEFINED__ */


#ifndef __ISchemaAttribute_FWD_DEFINED__
#define __ISchemaAttribute_FWD_DEFINED__
typedef interface ISchemaAttribute ISchemaAttribute;
#endif 	/* __ISchemaAttribute_FWD_DEFINED__ */


#ifndef __ISchemaElement_FWD_DEFINED__
#define __ISchemaElement_FWD_DEFINED__
typedef interface ISchemaElement ISchemaElement;
#endif 	/* __ISchemaElement_FWD_DEFINED__ */


#ifndef __ISchemaType_FWD_DEFINED__
#define __ISchemaType_FWD_DEFINED__
typedef interface ISchemaType ISchemaType;
#endif 	/* __ISchemaType_FWD_DEFINED__ */


#ifndef __ISchemaComplexType_FWD_DEFINED__
#define __ISchemaComplexType_FWD_DEFINED__
typedef interface ISchemaComplexType ISchemaComplexType;
#endif 	/* __ISchemaComplexType_FWD_DEFINED__ */


#ifndef __ISchemaAttributeGroup_FWD_DEFINED__
#define __ISchemaAttributeGroup_FWD_DEFINED__
typedef interface ISchemaAttributeGroup ISchemaAttributeGroup;
#endif 	/* __ISchemaAttributeGroup_FWD_DEFINED__ */


#ifndef __ISchemaModelGroup_FWD_DEFINED__
#define __ISchemaModelGroup_FWD_DEFINED__
typedef interface ISchemaModelGroup ISchemaModelGroup;
#endif 	/* __ISchemaModelGroup_FWD_DEFINED__ */


#ifndef __ISchemaAny_FWD_DEFINED__
#define __ISchemaAny_FWD_DEFINED__
typedef interface ISchemaAny ISchemaAny;
#endif 	/* __ISchemaAny_FWD_DEFINED__ */


#ifndef __ISchemaIdentityConstraint_FWD_DEFINED__
#define __ISchemaIdentityConstraint_FWD_DEFINED__
typedef interface ISchemaIdentityConstraint ISchemaIdentityConstraint;
#endif 	/* __ISchemaIdentityConstraint_FWD_DEFINED__ */


#ifndef __ISchemaNotation_FWD_DEFINED__
#define __ISchemaNotation_FWD_DEFINED__
typedef interface ISchemaNotation ISchemaNotation;
#endif 	/* __ISchemaNotation_FWD_DEFINED__ */


#ifndef __IXMLElementCollection_FWD_DEFINED__
#define __IXMLElementCollection_FWD_DEFINED__
typedef interface IXMLElementCollection IXMLElementCollection;
#endif 	/* __IXMLElementCollection_FWD_DEFINED__ */


#ifndef __IXMLDocument_FWD_DEFINED__
#define __IXMLDocument_FWD_DEFINED__
typedef interface IXMLDocument IXMLDocument;
#endif 	/* __IXMLDocument_FWD_DEFINED__ */


#ifndef __IXMLDocument2_FWD_DEFINED__
#define __IXMLDocument2_FWD_DEFINED__
typedef interface IXMLDocument2 IXMLDocument2;
#endif 	/* __IXMLDocument2_FWD_DEFINED__ */


#ifndef __IXMLElement_FWD_DEFINED__
#define __IXMLElement_FWD_DEFINED__
typedef interface IXMLElement IXMLElement;
#endif 	/* __IXMLElement_FWD_DEFINED__ */


#ifndef __IXMLElement2_FWD_DEFINED__
#define __IXMLElement2_FWD_DEFINED__
typedef interface IXMLElement2 IXMLElement2;
#endif 	/* __IXMLElement2_FWD_DEFINED__ */


#ifndef __IXMLAttribute_FWD_DEFINED__
#define __IXMLAttribute_FWD_DEFINED__
typedef interface IXMLAttribute IXMLAttribute;
#endif 	/* __IXMLAttribute_FWD_DEFINED__ */


#ifndef __IXMLError_FWD_DEFINED__
#define __IXMLError_FWD_DEFINED__
typedef interface IXMLError IXMLError;
#endif 	/* __IXMLError_FWD_DEFINED__ */


#ifndef __IXMLDOMSelection_FWD_DEFINED__
#define __IXMLDOMSelection_FWD_DEFINED__
typedef interface IXMLDOMSelection IXMLDOMSelection;
#endif 	/* __IXMLDOMSelection_FWD_DEFINED__ */


#ifndef __XMLDOMDocumentEvents_FWD_DEFINED__
#define __XMLDOMDocumentEvents_FWD_DEFINED__
typedef interface XMLDOMDocumentEvents XMLDOMDocumentEvents;
#endif 	/* __XMLDOMDocumentEvents_FWD_DEFINED__ */


#ifndef __IDSOControl_FWD_DEFINED__
#define __IDSOControl_FWD_DEFINED__
typedef interface IDSOControl IDSOControl;
#endif 	/* __IDSOControl_FWD_DEFINED__ */


#ifndef __IXMLHTTPRequest_FWD_DEFINED__
#define __IXMLHTTPRequest_FWD_DEFINED__
typedef interface IXMLHTTPRequest IXMLHTTPRequest;
#endif 	/* __IXMLHTTPRequest_FWD_DEFINED__ */


#ifndef __IServerXMLHTTPRequest_FWD_DEFINED__
#define __IServerXMLHTTPRequest_FWD_DEFINED__
typedef interface IServerXMLHTTPRequest IServerXMLHTTPRequest;
#endif 	/* __IServerXMLHTTPRequest_FWD_DEFINED__ */


#ifndef __IServerXMLHTTPRequest2_FWD_DEFINED__
#define __IServerXMLHTTPRequest2_FWD_DEFINED__
typedef interface IServerXMLHTTPRequest2 IServerXMLHTTPRequest2;
#endif 	/* __IServerXMLHTTPRequest2_FWD_DEFINED__ */


#ifndef __IMXNamespacePrefixes_FWD_DEFINED__
#define __IMXNamespacePrefixes_FWD_DEFINED__
typedef interface IMXNamespacePrefixes IMXNamespacePrefixes;
#endif 	/* __IMXNamespacePrefixes_FWD_DEFINED__ */


#ifndef __IVBMXNamespaceManager_FWD_DEFINED__
#define __IVBMXNamespaceManager_FWD_DEFINED__
typedef interface IVBMXNamespaceManager IVBMXNamespaceManager;
#endif 	/* __IVBMXNamespaceManager_FWD_DEFINED__ */


#ifndef __IMXNamespaceManager_FWD_DEFINED__
#define __IMXNamespaceManager_FWD_DEFINED__
typedef interface IMXNamespaceManager IMXNamespaceManager;
#endif 	/* __IMXNamespaceManager_FWD_DEFINED__ */


#ifndef __DOMDocument_FWD_DEFINED__
#define __DOMDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class DOMDocument DOMDocument;
#else
typedef struct DOMDocument DOMDocument;
#endif /* __cplusplus */

#endif 	/* __DOMDocument_FWD_DEFINED__ */


#ifndef __DOMDocument26_FWD_DEFINED__
#define __DOMDocument26_FWD_DEFINED__

#ifdef __cplusplus
typedef class DOMDocument26 DOMDocument26;
#else
typedef struct DOMDocument26 DOMDocument26;
#endif /* __cplusplus */

#endif 	/* __DOMDocument26_FWD_DEFINED__ */


#ifndef __DOMDocument30_FWD_DEFINED__
#define __DOMDocument30_FWD_DEFINED__

#ifdef __cplusplus
typedef class DOMDocument30 DOMDocument30;
#else
typedef struct DOMDocument30 DOMDocument30;
#endif /* __cplusplus */

#endif 	/* __DOMDocument30_FWD_DEFINED__ */


#ifndef __DOMDocument40_FWD_DEFINED__
#define __DOMDocument40_FWD_DEFINED__

#ifdef __cplusplus
typedef class DOMDocument40 DOMDocument40;
#else
typedef struct DOMDocument40 DOMDocument40;
#endif /* __cplusplus */

#endif 	/* __DOMDocument40_FWD_DEFINED__ */


#ifndef __DOMDocument60_FWD_DEFINED__
#define __DOMDocument60_FWD_DEFINED__

#ifdef __cplusplus
typedef class DOMDocument60 DOMDocument60;
#else
typedef struct DOMDocument60 DOMDocument60;
#endif /* __cplusplus */

#endif 	/* __DOMDocument60_FWD_DEFINED__ */


#ifndef __FreeThreadedDOMDocument_FWD_DEFINED__
#define __FreeThreadedDOMDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeThreadedDOMDocument FreeThreadedDOMDocument;
#else
typedef struct FreeThreadedDOMDocument FreeThreadedDOMDocument;
#endif /* __cplusplus */

#endif 	/* __FreeThreadedDOMDocument_FWD_DEFINED__ */


#ifndef __FreeThreadedDOMDocument26_FWD_DEFINED__
#define __FreeThreadedDOMDocument26_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeThreadedDOMDocument26 FreeThreadedDOMDocument26;
#else
typedef struct FreeThreadedDOMDocument26 FreeThreadedDOMDocument26;
#endif /* __cplusplus */

#endif 	/* __FreeThreadedDOMDocument26_FWD_DEFINED__ */


#ifndef __FreeThreadedDOMDocument30_FWD_DEFINED__
#define __FreeThreadedDOMDocument30_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeThreadedDOMDocument30 FreeThreadedDOMDocument30;
#else
typedef struct FreeThreadedDOMDocument30 FreeThreadedDOMDocument30;
#endif /* __cplusplus */

#endif 	/* __FreeThreadedDOMDocument30_FWD_DEFINED__ */


#ifndef __FreeThreadedDOMDocument40_FWD_DEFINED__
#define __FreeThreadedDOMDocument40_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeThreadedDOMDocument40 FreeThreadedDOMDocument40;
#else
typedef struct FreeThreadedDOMDocument40 FreeThreadedDOMDocument40;
#endif /* __cplusplus */

#endif 	/* __FreeThreadedDOMDocument40_FWD_DEFINED__ */


#ifndef __FreeThreadedDOMDocument60_FWD_DEFINED__
#define __FreeThreadedDOMDocument60_FWD_DEFINED__

#ifdef __cplusplus
typedef class FreeThreadedDOMDocument60 FreeThreadedDOMDocument60;
#else
typedef struct FreeThreadedDOMDocument60 FreeThreadedDOMDocument60;
#endif /* __cplusplus */

#endif 	/* __FreeThreadedDOMDocument60_FWD_DEFINED__ */


#ifndef __XMLSchemaCache_FWD_DEFINED__
#define __XMLSchemaCache_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLSchemaCache XMLSchemaCache;
#else
typedef struct XMLSchemaCache XMLSchemaCache;
#endif /* __cplusplus */

#endif 	/* __XMLSchemaCache_FWD_DEFINED__ */


#ifndef __XMLSchemaCache26_FWD_DEFINED__
#define __XMLSchemaCache26_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLSchemaCache26 XMLSchemaCache26;
#else
typedef struct XMLSchemaCache26 XMLSchemaCache26;
#endif /* __cplusplus */

#endif 	/* __XMLSchemaCache26_FWD_DEFINED__ */


#ifndef __XMLSchemaCache30_FWD_DEFINED__
#define __XMLSchemaCache30_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLSchemaCache30 XMLSchemaCache30;
#else
typedef struct XMLSchemaCache30 XMLSchemaCache30;
#endif /* __cplusplus */

#endif 	/* __XMLSchemaCache30_FWD_DEFINED__ */


#ifndef __XMLSchemaCache40_FWD_DEFINED__
#define __XMLSchemaCache40_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLSchemaCache40 XMLSchemaCache40;
#else
typedef struct XMLSchemaCache40 XMLSchemaCache40;
#endif /* __cplusplus */

#endif 	/* __XMLSchemaCache40_FWD_DEFINED__ */


#ifndef __XMLSchemaCache60_FWD_DEFINED__
#define __XMLSchemaCache60_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLSchemaCache60 XMLSchemaCache60;
#else
typedef struct XMLSchemaCache60 XMLSchemaCache60;
#endif /* __cplusplus */

#endif 	/* __XMLSchemaCache60_FWD_DEFINED__ */


#ifndef __XSLTemplate_FWD_DEFINED__
#define __XSLTemplate_FWD_DEFINED__

#ifdef __cplusplus
typedef class XSLTemplate XSLTemplate;
#else
typedef struct XSLTemplate XSLTemplate;
#endif /* __cplusplus */

#endif 	/* __XSLTemplate_FWD_DEFINED__ */


#ifndef __XSLTemplate26_FWD_DEFINED__
#define __XSLTemplate26_FWD_DEFINED__

#ifdef __cplusplus
typedef class XSLTemplate26 XSLTemplate26;
#else
typedef struct XSLTemplate26 XSLTemplate26;
#endif /* __cplusplus */

#endif 	/* __XSLTemplate26_FWD_DEFINED__ */


#ifndef __XSLTemplate30_FWD_DEFINED__
#define __XSLTemplate30_FWD_DEFINED__

#ifdef __cplusplus
typedef class XSLTemplate30 XSLTemplate30;
#else
typedef struct XSLTemplate30 XSLTemplate30;
#endif /* __cplusplus */

#endif 	/* __XSLTemplate30_FWD_DEFINED__ */


#ifndef __XSLTemplate40_FWD_DEFINED__
#define __XSLTemplate40_FWD_DEFINED__

#ifdef __cplusplus
typedef class XSLTemplate40 XSLTemplate40;
#else
typedef struct XSLTemplate40 XSLTemplate40;
#endif /* __cplusplus */

#endif 	/* __XSLTemplate40_FWD_DEFINED__ */


#ifndef __XSLTemplate60_FWD_DEFINED__
#define __XSLTemplate60_FWD_DEFINED__

#ifdef __cplusplus
typedef class XSLTemplate60 XSLTemplate60;
#else
typedef struct XSLTemplate60 XSLTemplate60;
#endif /* __cplusplus */

#endif 	/* __XSLTemplate60_FWD_DEFINED__ */


#ifndef __DSOControl_FWD_DEFINED__
#define __DSOControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class DSOControl DSOControl;
#else
typedef struct DSOControl DSOControl;
#endif /* __cplusplus */

#endif 	/* __DSOControl_FWD_DEFINED__ */


#ifndef __DSOControl26_FWD_DEFINED__
#define __DSOControl26_FWD_DEFINED__

#ifdef __cplusplus
typedef class DSOControl26 DSOControl26;
#else
typedef struct DSOControl26 DSOControl26;
#endif /* __cplusplus */

#endif 	/* __DSOControl26_FWD_DEFINED__ */


#ifndef __DSOControl30_FWD_DEFINED__
#define __DSOControl30_FWD_DEFINED__

#ifdef __cplusplus
typedef class DSOControl30 DSOControl30;
#else
typedef struct DSOControl30 DSOControl30;
#endif /* __cplusplus */

#endif 	/* __DSOControl30_FWD_DEFINED__ */


#ifndef __DSOControl40_FWD_DEFINED__
#define __DSOControl40_FWD_DEFINED__

#ifdef __cplusplus
typedef class DSOControl40 DSOControl40;
#else
typedef struct DSOControl40 DSOControl40;
#endif /* __cplusplus */

#endif 	/* __DSOControl40_FWD_DEFINED__ */


#ifndef __XMLHTTP_FWD_DEFINED__
#define __XMLHTTP_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLHTTP XMLHTTP;
#else
typedef struct XMLHTTP XMLHTTP;
#endif /* __cplusplus */

#endif 	/* __XMLHTTP_FWD_DEFINED__ */


#ifndef __XMLHTTP26_FWD_DEFINED__
#define __XMLHTTP26_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLHTTP26 XMLHTTP26;
#else
typedef struct XMLHTTP26 XMLHTTP26;
#endif /* __cplusplus */

#endif 	/* __XMLHTTP26_FWD_DEFINED__ */


#ifndef __XMLHTTP30_FWD_DEFINED__
#define __XMLHTTP30_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLHTTP30 XMLHTTP30;
#else
typedef struct XMLHTTP30 XMLHTTP30;
#endif /* __cplusplus */

#endif 	/* __XMLHTTP30_FWD_DEFINED__ */


#ifndef __XMLHTTP40_FWD_DEFINED__
#define __XMLHTTP40_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLHTTP40 XMLHTTP40;
#else
typedef struct XMLHTTP40 XMLHTTP40;
#endif /* __cplusplus */

#endif 	/* __XMLHTTP40_FWD_DEFINED__ */


#ifndef __XMLHTTP60_FWD_DEFINED__
#define __XMLHTTP60_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLHTTP60 XMLHTTP60;
#else
typedef struct XMLHTTP60 XMLHTTP60;
#endif /* __cplusplus */

#endif 	/* __XMLHTTP60_FWD_DEFINED__ */


#ifndef __ServerXMLHTTP_FWD_DEFINED__
#define __ServerXMLHTTP_FWD_DEFINED__

#ifdef __cplusplus
typedef class ServerXMLHTTP ServerXMLHTTP;
#else
typedef struct ServerXMLHTTP ServerXMLHTTP;
#endif /* __cplusplus */

#endif 	/* __ServerXMLHTTP_FWD_DEFINED__ */


#ifndef __ServerXMLHTTP30_FWD_DEFINED__
#define __ServerXMLHTTP30_FWD_DEFINED__

#ifdef __cplusplus
typedef class ServerXMLHTTP30 ServerXMLHTTP30;
#else
typedef struct ServerXMLHTTP30 ServerXMLHTTP30;
#endif /* __cplusplus */

#endif 	/* __ServerXMLHTTP30_FWD_DEFINED__ */


#ifndef __ServerXMLHTTP40_FWD_DEFINED__
#define __ServerXMLHTTP40_FWD_DEFINED__

#ifdef __cplusplus
typedef class ServerXMLHTTP40 ServerXMLHTTP40;
#else
typedef struct ServerXMLHTTP40 ServerXMLHTTP40;
#endif /* __cplusplus */

#endif 	/* __ServerXMLHTTP40_FWD_DEFINED__ */


#ifndef __ServerXMLHTTP60_FWD_DEFINED__
#define __ServerXMLHTTP60_FWD_DEFINED__

#ifdef __cplusplus
typedef class ServerXMLHTTP60 ServerXMLHTTP60;
#else
typedef struct ServerXMLHTTP60 ServerXMLHTTP60;
#endif /* __cplusplus */

#endif 	/* __ServerXMLHTTP60_FWD_DEFINED__ */


#ifndef __SAXXMLReader_FWD_DEFINED__
#define __SAXXMLReader_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXXMLReader SAXXMLReader;
#else
typedef struct SAXXMLReader SAXXMLReader;
#endif /* __cplusplus */

#endif 	/* __SAXXMLReader_FWD_DEFINED__ */


#ifndef __SAXXMLReader30_FWD_DEFINED__
#define __SAXXMLReader30_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXXMLReader30 SAXXMLReader30;
#else
typedef struct SAXXMLReader30 SAXXMLReader30;
#endif /* __cplusplus */

#endif 	/* __SAXXMLReader30_FWD_DEFINED__ */


#ifndef __SAXXMLReader40_FWD_DEFINED__
#define __SAXXMLReader40_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXXMLReader40 SAXXMLReader40;
#else
typedef struct SAXXMLReader40 SAXXMLReader40;
#endif /* __cplusplus */

#endif 	/* __SAXXMLReader40_FWD_DEFINED__ */


#ifndef __SAXXMLReader60_FWD_DEFINED__
#define __SAXXMLReader60_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXXMLReader60 SAXXMLReader60;
#else
typedef struct SAXXMLReader60 SAXXMLReader60;
#endif /* __cplusplus */

#endif 	/* __SAXXMLReader60_FWD_DEFINED__ */


#ifndef __MXXMLWriter_FWD_DEFINED__
#define __MXXMLWriter_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXXMLWriter MXXMLWriter;
#else
typedef struct MXXMLWriter MXXMLWriter;
#endif /* __cplusplus */

#endif 	/* __MXXMLWriter_FWD_DEFINED__ */


#ifndef __MXXMLWriter30_FWD_DEFINED__
#define __MXXMLWriter30_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXXMLWriter30 MXXMLWriter30;
#else
typedef struct MXXMLWriter30 MXXMLWriter30;
#endif /* __cplusplus */

#endif 	/* __MXXMLWriter30_FWD_DEFINED__ */


#ifndef __MXXMLWriter40_FWD_DEFINED__
#define __MXXMLWriter40_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXXMLWriter40 MXXMLWriter40;
#else
typedef struct MXXMLWriter40 MXXMLWriter40;
#endif /* __cplusplus */

#endif 	/* __MXXMLWriter40_FWD_DEFINED__ */


#ifndef __MXXMLWriter60_FWD_DEFINED__
#define __MXXMLWriter60_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXXMLWriter60 MXXMLWriter60;
#else
typedef struct MXXMLWriter60 MXXMLWriter60;
#endif /* __cplusplus */

#endif 	/* __MXXMLWriter60_FWD_DEFINED__ */


#ifndef __MXHTMLWriter_FWD_DEFINED__
#define __MXHTMLWriter_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXHTMLWriter MXHTMLWriter;
#else
typedef struct MXHTMLWriter MXHTMLWriter;
#endif /* __cplusplus */

#endif 	/* __MXHTMLWriter_FWD_DEFINED__ */


#ifndef __MXHTMLWriter30_FWD_DEFINED__
#define __MXHTMLWriter30_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXHTMLWriter30 MXHTMLWriter30;
#else
typedef struct MXHTMLWriter30 MXHTMLWriter30;
#endif /* __cplusplus */

#endif 	/* __MXHTMLWriter30_FWD_DEFINED__ */


#ifndef __MXHTMLWriter40_FWD_DEFINED__
#define __MXHTMLWriter40_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXHTMLWriter40 MXHTMLWriter40;
#else
typedef struct MXHTMLWriter40 MXHTMLWriter40;
#endif /* __cplusplus */

#endif 	/* __MXHTMLWriter40_FWD_DEFINED__ */


#ifndef __MXHTMLWriter60_FWD_DEFINED__
#define __MXHTMLWriter60_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXHTMLWriter60 MXHTMLWriter60;
#else
typedef struct MXHTMLWriter60 MXHTMLWriter60;
#endif /* __cplusplus */

#endif 	/* __MXHTMLWriter60_FWD_DEFINED__ */


#ifndef __SAXAttributes_FWD_DEFINED__
#define __SAXAttributes_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXAttributes SAXAttributes;
#else
typedef struct SAXAttributes SAXAttributes;
#endif /* __cplusplus */

#endif 	/* __SAXAttributes_FWD_DEFINED__ */


#ifndef __SAXAttributes30_FWD_DEFINED__
#define __SAXAttributes30_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXAttributes30 SAXAttributes30;
#else
typedef struct SAXAttributes30 SAXAttributes30;
#endif /* __cplusplus */

#endif 	/* __SAXAttributes30_FWD_DEFINED__ */


#ifndef __SAXAttributes40_FWD_DEFINED__
#define __SAXAttributes40_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXAttributes40 SAXAttributes40;
#else
typedef struct SAXAttributes40 SAXAttributes40;
#endif /* __cplusplus */

#endif 	/* __SAXAttributes40_FWD_DEFINED__ */


#ifndef __SAXAttributes60_FWD_DEFINED__
#define __SAXAttributes60_FWD_DEFINED__

#ifdef __cplusplus
typedef class SAXAttributes60 SAXAttributes60;
#else
typedef struct SAXAttributes60 SAXAttributes60;
#endif /* __cplusplus */

#endif 	/* __SAXAttributes60_FWD_DEFINED__ */


#ifndef __MXNamespaceManager_FWD_DEFINED__
#define __MXNamespaceManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXNamespaceManager MXNamespaceManager;
#else
typedef struct MXNamespaceManager MXNamespaceManager;
#endif /* __cplusplus */

#endif 	/* __MXNamespaceManager_FWD_DEFINED__ */


#ifndef __MXNamespaceManager40_FWD_DEFINED__
#define __MXNamespaceManager40_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXNamespaceManager40 MXNamespaceManager40;
#else
typedef struct MXNamespaceManager40 MXNamespaceManager40;
#endif /* __cplusplus */

#endif 	/* __MXNamespaceManager40_FWD_DEFINED__ */


#ifndef __MXNamespaceManager60_FWD_DEFINED__
#define __MXNamespaceManager60_FWD_DEFINED__

#ifdef __cplusplus
typedef class MXNamespaceManager60 MXNamespaceManager60;
#else
typedef struct MXNamespaceManager60 MXNamespaceManager60;
#endif /* __cplusplus */

#endif 	/* __MXNamespaceManager60_FWD_DEFINED__ */


#ifndef __XMLDocument_FWD_DEFINED__
#define __XMLDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLDocument XMLDocument;
#else
typedef struct XMLDocument XMLDocument;
#endif /* __cplusplus */

#endif 	/* __XMLDocument_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "objidl.h"
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msxml2_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1997-2006.
//
//--------------------------------------------------------------------------
#define DOMDocument DOMDocument2
#define CLSID_DOMDocument CLSID_DOMDocument2

#ifdef __USE_MSXML2_NAMESPACE__
namespace MSXML2 {
#endif
#ifndef __msxml_h__
typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } 	XML_ERROR;

#endif
#ifdef __ISAXXMLReader_INTERFACE_DEFINED__
#undef __MSXML2_LIBRARY_DEFINED__
#endif


extern RPC_IF_HANDLE __MIDL_itf_msxml2_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml2_0000_0000_v0_0_s_ifspec;


#ifndef __MSXML2_LIBRARY_DEFINED__
#define __MSXML2_LIBRARY_DEFINED__

/* library MSXML2 */
/* [lcid][helpstring][version][uuid] */ 











































































#undef ParseURL
#if !defined(__msxml_h__)
typedef /* [helpstring] */ 
enum tagXMLEMEM_TYPE
    {	XMLELEMTYPE_ELEMENT	= 0,
	XMLELEMTYPE_TEXT	= ( XMLELEMTYPE_ELEMENT + 1 ) ,
	XMLELEMTYPE_COMMENT	= ( XMLELEMTYPE_TEXT + 1 ) ,
	XMLELEMTYPE_DOCUMENT	= ( XMLELEMTYPE_COMMENT + 1 ) ,
	XMLELEMTYPE_DTD	= ( XMLELEMTYPE_DOCUMENT + 1 ) ,
	XMLELEMTYPE_PI	= ( XMLELEMTYPE_DTD + 1 ) ,
	XMLELEMTYPE_OTHER	= ( XMLELEMTYPE_PI + 1 ) 
    } 	XMLELEM_TYPE;

#endif
#if !defined(__msxml_h__) || defined(__IXMLElementNotificationSink_INTERFACE_DEFINED__)
typedef /* [helpstring] */ 
enum tagDOMNodeType
    {	NODE_INVALID	= 0,
	NODE_ELEMENT	= ( NODE_INVALID + 1 ) ,
	NODE_ATTRIBUTE	= ( NODE_ELEMENT + 1 ) ,
	NODE_TEXT	= ( NODE_ATTRIBUTE + 1 ) ,
	NODE_CDATA_SECTION	= ( NODE_TEXT + 1 ) ,
	NODE_ENTITY_REFERENCE	= ( NODE_CDATA_SECTION + 1 ) ,
	NODE_ENTITY	= ( NODE_ENTITY_REFERENCE + 1 ) ,
	NODE_PROCESSING_INSTRUCTION	= ( NODE_ENTITY + 1 ) ,
	NODE_COMMENT	= ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
	NODE_DOCUMENT	= ( NODE_COMMENT + 1 ) ,
	NODE_DOCUMENT_TYPE	= ( NODE_DOCUMENT + 1 ) ,
	NODE_DOCUMENT_FRAGMENT	= ( NODE_DOCUMENT_TYPE + 1 ) ,
	NODE_NOTATION	= ( NODE_DOCUMENT_FRAGMENT + 1 ) 
    } 	DOMNodeType;

#endif
#if !defined(__msxml_sxh_enums__)
#define __msxml_sxh_enums__
typedef /* [helpstring] */ 
enum _SERVERXMLHTTP_OPTION
    {	SXH_OPTION_URL	= -1,
	SXH_OPTION_URL_CODEPAGE	= ( SXH_OPTION_URL + 1 ) ,
	SXH_OPTION_ESCAPE_PERCENT_IN_URL	= ( SXH_OPTION_URL_CODEPAGE + 1 ) ,
	SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS	= ( SXH_OPTION_ESCAPE_PERCENT_IN_URL + 1 ) ,
	SXH_OPTION_SELECT_CLIENT_SSL_CERT	= ( SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS + 1 ) 
    } 	SERVERXMLHTTP_OPTION;

typedef /* [helpstring] */ 
enum _SXH_SERVER_CERT_OPTION
    {	SXH_SERVER_CERT_IGNORE_UNKNOWN_CA	= 0x100,
	SXH_SERVER_CERT_IGNORE_WRONG_USAGE	= 0x200,
	SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID	= 0x1000,
	SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID	= 0x2000,
	SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS	= ( ( ( SXH_SERVER_CERT_IGNORE_UNKNOWN_CA + SXH_SERVER_CERT_IGNORE_WRONG_USAGE )  + SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID )  + SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID ) 
    } 	SXH_SERVER_CERT_OPTION;

typedef /* [helpstring] */ 
enum _SXH_PROXY_SETTING
    {	SXH_PROXY_SET_DEFAULT	= 0,
	SXH_PROXY_SET_PRECONFIG	= 0,
	SXH_PROXY_SET_DIRECT	= 0x1,
	SXH_PROXY_SET_PROXY	= 0x2
    } 	SXH_PROXY_SETTING;

#endif // !defined(__msxml_sxh_enums__)
#if !defined(__msxml_som_enums__)
#define __msxml_som_enums__
typedef /* [helpstring] */ 
enum _SOMITEMTYPE
    {	SOMITEM_SCHEMA	= 0x1000,
	SOMITEM_ATTRIBUTE	= 0x1001,
	SOMITEM_ATTRIBUTEGROUP	= 0x1002,
	SOMITEM_NOTATION	= 0x1003,
	SOMITEM_ANNOTATION	= 0x1004,
	SOMITEM_IDENTITYCONSTRAINT	= 0x1100,
	SOMITEM_KEY	= 0x1101,
	SOMITEM_KEYREF	= 0x1102,
	SOMITEM_UNIQUE	= 0x1103,
	SOMITEM_ANYTYPE	= 0x2000,
	SOMITEM_DATATYPE	= 0x2100,
	SOMITEM_DATATYPE_ANYTYPE	= 0x2101,
	SOMITEM_DATATYPE_ANYURI	= 0x2102,
	SOMITEM_DATATYPE_BASE64BINARY	= 0x2103,
	SOMITEM_DATATYPE_BOOLEAN	= 0x2104,
	SOMITEM_DATATYPE_BYTE	= 0x2105,
	SOMITEM_DATATYPE_DATE	= 0x2106,
	SOMITEM_DATATYPE_DATETIME	= 0x2107,
	SOMITEM_DATATYPE_DAY	= 0x2108,
	SOMITEM_DATATYPE_DECIMAL	= 0x2109,
	SOMITEM_DATATYPE_DOUBLE	= 0x210a,
	SOMITEM_DATATYPE_DURATION	= 0x210b,
	SOMITEM_DATATYPE_ENTITIES	= 0x210c,
	SOMITEM_DATATYPE_ENTITY	= 0x210d,
	SOMITEM_DATATYPE_FLOAT	= 0x210e,
	SOMITEM_DATATYPE_HEXBINARY	= 0x210f,
	SOMITEM_DATATYPE_ID	= 0x2110,
	SOMITEM_DATATYPE_IDREF	= 0x2111,
	SOMITEM_DATATYPE_IDREFS	= 0x2112,
	SOMITEM_DATATYPE_INT	= 0x2113,
	SOMITEM_DATATYPE_INTEGER	= 0x2114,
	SOMITEM_DATATYPE_LANGUAGE	= 0x2115,
	SOMITEM_DATATYPE_LONG	= 0x2116,
	SOMITEM_DATATYPE_MONTH	= 0x2117,
	SOMITEM_DATATYPE_MONTHDAY	= 0x2118,
	SOMITEM_DATATYPE_NAME	= 0x2119,
	SOMITEM_DATATYPE_NCNAME	= 0x211a,
	SOMITEM_DATATYPE_NEGATIVEINTEGER	= 0x211b,
	SOMITEM_DATATYPE_NMTOKEN	= 0x211c,
	SOMITEM_DATATYPE_NMTOKENS	= 0x211d,
	SOMITEM_DATATYPE_NONNEGATIVEINTEGER	= 0x211e,
	SOMITEM_DATATYPE_NONPOSITIVEINTEGER	= 0x211f,
	SOMITEM_DATATYPE_NORMALIZEDSTRING	= 0x2120,
	SOMITEM_DATATYPE_NOTATION	= 0x2121,
	SOMITEM_DATATYPE_POSITIVEINTEGER	= 0x2122,
	SOMITEM_DATATYPE_QNAME	= 0x2123,
	SOMITEM_DATATYPE_SHORT	= 0x2124,
	SOMITEM_DATATYPE_STRING	= 0x2125,
	SOMITEM_DATATYPE_TIME	= 0x2126,
	SOMITEM_DATATYPE_TOKEN	= 0x2127,
	SOMITEM_DATATYPE_UNSIGNEDBYTE	= 0x2128,
	SOMITEM_DATATYPE_UNSIGNEDINT	= 0x2129,
	SOMITEM_DATATYPE_UNSIGNEDLONG	= 0x212a,
	SOMITEM_DATATYPE_UNSIGNEDSHORT	= 0x212b,
	SOMITEM_DATATYPE_YEAR	= 0x212c,
	SOMITEM_DATATYPE_YEARMONTH	= 0x212d,
	SOMITEM_DATATYPE_ANYSIMPLETYPE	= 0x21ff,
	SOMITEM_SIMPLETYPE	= 0x2200,
	SOMITEM_COMPLEXTYPE	= 0x2400,
	SOMITEM_PARTICLE	= 0x4000,
	SOMITEM_ANY	= 0x4001,
	SOMITEM_ANYATTRIBUTE	= 0x4002,
	SOMITEM_ELEMENT	= 0x4003,
	SOMITEM_GROUP	= 0x4100,
	SOMITEM_ALL	= 0x4101,
	SOMITEM_CHOICE	= 0x4102,
	SOMITEM_SEQUENCE	= 0x4103,
	SOMITEM_EMPTYPARTICLE	= 0x4104,
	SOMITEM_NULL	= 0x800,
	SOMITEM_NULL_TYPE	= 0x2800,
	SOMITEM_NULL_ANY	= 0x4801,
	SOMITEM_NULL_ANYATTRIBUTE	= 0x4802,
	SOMITEM_NULL_ELEMENT	= 0x4803
    } 	SOMITEMTYPE;

typedef /* [helpstring] */ 
enum _SCHEMAUSE
    {	SCHEMAUSE_OPTIONAL	= 0,
	SCHEMAUSE_PROHIBITED	= ( SCHEMAUSE_OPTIONAL + 1 ) ,
	SCHEMAUSE_REQUIRED	= ( SCHEMAUSE_PROHIBITED + 1 ) 
    } 	SCHEMAUSE;

typedef /* [helpstring] */ 
enum _SCHEMADERIVATIONMETHOD
    {	SCHEMADERIVATIONMETHOD_EMPTY	= 0,
	SCHEMADERIVATIONMETHOD_SUBSTITUTION	= 0x1,
	SCHEMADERIVATIONMETHOD_EXTENSION	= 0x2,
	SCHEMADERIVATIONMETHOD_RESTRICTION	= 0x4,
	SCHEMADERIVATIONMETHOD_LIST	= 0x8,
	SCHEMADERIVATIONMETHOD_UNION	= 0x10,
	SCHEMADERIVATIONMETHOD_ALL	= 0xff,
	SCHEMADERIVATIONMETHOD_NONE	= 0x100
    } 	SCHEMADERIVATIONMETHOD;

typedef /* [helpstring] */ 
enum _SCHEMACONTENTTYPE
    {	SCHEMACONTENTTYPE_EMPTY	= 0,
	SCHEMACONTENTTYPE_TEXTONLY	= ( SCHEMACONTENTTYPE_EMPTY + 1 ) ,
	SCHEMACONTENTTYPE_ELEMENTONLY	= ( SCHEMACONTENTTYPE_TEXTONLY + 1 ) ,
	SCHEMACONTENTTYPE_MIXED	= ( SCHEMACONTENTTYPE_ELEMENTONLY + 1 ) 
    } 	SCHEMACONTENTTYPE;

typedef /* [helpstring] */ 
enum _SCHEMAPROCESSCONTENTS
    {	SCHEMAPROCESSCONTENTS_NONE	= 0,
	SCHEMAPROCESSCONTENTS_SKIP	= ( SCHEMAPROCESSCONTENTS_NONE + 1 ) ,
	SCHEMAPROCESSCONTENTS_LAX	= ( SCHEMAPROCESSCONTENTS_SKIP + 1 ) ,
	SCHEMAPROCESSCONTENTS_STRICT	= ( SCHEMAPROCESSCONTENTS_LAX + 1 ) 
    } 	SCHEMAPROCESSCONTENTS;

typedef /* [helpstring] */ 
enum _SCHEMAWHITESPACE
    {	SCHEMAWHITESPACE_NONE	= -1,
	SCHEMAWHITESPACE_PRESERVE	= 0,
	SCHEMAWHITESPACE_REPLACE	= 1,
	SCHEMAWHITESPACE_COLLAPSE	= 2
    } 	SCHEMAWHITESPACE;

typedef /* [helpstring] */ 
enum _SCHEMATYPEVARIETY
    {	SCHEMATYPEVARIETY_NONE	= -1,
	SCHEMATYPEVARIETY_ATOMIC	= 0,
	SCHEMATYPEVARIETY_LIST	= 1,
	SCHEMATYPEVARIETY_UNION	= 2
    } 	SCHEMATYPEVARIETY;

#endif // !defined(__msxml_som_enums__)

EXTERN_C const IID LIBID_MSXML2;

#ifndef __IXMLDOMImplementation_INTERFACE_DEFINED__
#define __IXMLDOMImplementation_INTERFACE_DEFINED__

/* interface IXMLDOMImplementation */
/* [uuid][dual][oleautomation][unique][nonextensible][object][local] */ 


EXTERN_C const IID IID_IXMLDOMImplementation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8F-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE hasFeature( 
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ VARIANT_BOOL *hasFeature) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMImplementation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMImplementation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMImplementation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMImplementation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMImplementation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *hasFeature )( 
            IXMLDOMImplementation * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ VARIANT_BOOL *hasFeature);
        
        END_INTERFACE
    } IXMLDOMImplementationVtbl;

    interface IXMLDOMImplementation
    {
        CONST_VTBL struct IXMLDOMImplementationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMImplementation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMImplementation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMImplementation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMImplementation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMImplementation_hasFeature(This,feature,version,hasFeature)	\
    ( (This)->lpVtbl -> hasFeature(This,feature,version,hasFeature) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMImplementation_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMNode_INTERFACE_DEFINED__
#define __IXMLDOMNode_INTERFACE_DEFINED__

/* interface IXMLDOMNode */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF80-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nodeName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nodeValue( 
            /* [retval][out] */ VARIANT *value) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_nodeValue( 
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nodeType( 
            /* [retval][out] */ DOMNodeType *type) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_parentNode( 
            /* [retval][out] */ IXMLDOMNode **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_childNodes( 
            /* [retval][out] */ IXMLDOMNodeList **childList) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_firstChild( 
            /* [retval][out] */ IXMLDOMNode **firstChild) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_lastChild( 
            /* [retval][out] */ IXMLDOMNode **lastChild) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_previousSibling( 
            /* [retval][out] */ IXMLDOMNode **previousSibling) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nextSibling( 
            /* [retval][out] */ IXMLDOMNode **nextSibling) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_attributes( 
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE insertBefore( 
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE replaceChild( 
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeChild( 
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE appendChild( 
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE hasChildNodes( 
            /* [retval][out] */ VARIANT_BOOL *hasChild) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ownerDocument( 
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE cloneNode( 
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nodeTypeString( 
            /* [out][retval] */ BSTR *nodeType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR *text) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_specified( 
            /* [retval][out] */ VARIANT_BOOL *isSpecified) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_definition( 
            /* [out][retval] */ IXMLDOMNode **definitionNode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_nodeTypedValue( 
            /* [out][retval] */ VARIANT *typedValue) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_nodeTypedValue( 
            /* [in] */ VARIANT typedValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_dataType( 
            /* [out][retval] */ VARIANT *dataTypeName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_dataType( 
            /* [in] */ BSTR dataTypeName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_xml( 
            /* [out][retval] */ BSTR *xmlString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE transformNode( 
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE selectNodes( 
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE selectSingleNode( 
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_parsed( 
            /* [out][retval] */ VARIANT_BOOL *isParsed) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_namespaceURI( 
            /* [out][retval] */ BSTR *namespaceURI) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_prefix( 
            /* [out][retval] */ BSTR *prefixString) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_baseName( 
            /* [out][retval] */ BSTR *nameString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE transformNodeToObject( 
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMNode * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMNode * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMNode * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMNode * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMNode * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMNode * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMNode * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMNode * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMNode * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMNode * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMNode * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMNode * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMNode * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMNode * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMNode * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMNode * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMNode * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMNode * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMNode * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        END_INTERFACE
    } IXMLDOMNodeVtbl;

    interface IXMLDOMNode
    {
        CONST_VTBL struct IXMLDOMNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMNode_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMNode_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMNode_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMNode_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMNode_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMNode_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMNode_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMNode_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMNode_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMNode_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMNode_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMNode_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMNode_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMNode_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMNode_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMNode_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMNode_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMNode_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMNode_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMNode_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMNode_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMNode_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMNode_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMNode_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMNode_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMNode_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMNode_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMNode_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMNode_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMNode_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMNode_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMNode_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMNode_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMNode_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMNode_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMNode_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMNode_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMDocumentFragment_INTERFACE_DEFINED__
#define __IXMLDOMDocumentFragment_INTERFACE_DEFINED__

/* interface IXMLDOMDocumentFragment */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMDocumentFragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3efaa413-272f-11d2-836f-0000f87a7782")
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMDocumentFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMDocumentFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMDocumentFragment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMDocumentFragment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMDocumentFragment * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMDocumentFragment * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMDocumentFragment * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        END_INTERFACE
    } IXMLDOMDocumentFragmentVtbl;

    interface IXMLDOMDocumentFragment
    {
        CONST_VTBL struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMDocumentFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMDocumentFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMDocumentFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMDocumentFragment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMDocumentFragment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMDocumentFragment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMDocumentFragment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMDocumentFragment_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMDocumentFragment_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMDocumentFragment_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMDocumentFragment_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMDocumentFragment_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMDocumentFragment_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMDocumentFragment_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMDocumentFragment_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMDocumentFragment_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMDocumentFragment_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMDocumentFragment_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMDocumentFragment_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMDocumentFragment_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMDocumentFragment_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMDocumentFragment_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMDocumentFragment_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMDocumentFragment_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMDocumentFragment_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMDocumentFragment_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMDocumentFragment_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMDocumentFragment_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMDocumentFragment_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMDocumentFragment_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMDocumentFragment_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocumentFragment_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocumentFragment_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMDocumentFragment_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMDocumentFragment_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMDocumentFragment_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMDocumentFragment_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMDocumentFragment_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMDocumentFragment_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMDocumentFragment_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMDocumentFragment_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMDocumentFragment_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMDocumentFragment_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMDocumentFragment_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMDocument_INTERFACE_DEFINED__
#define __IXMLDOMDocument_INTERFACE_DEFINED__

/* interface IXMLDOMDocument */
/* [hidden][unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF81-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_doctype( 
            /* [retval][out] */ IXMLDOMDocumentType **documentType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_implementation( 
            /* [retval][out] */ IXMLDOMImplementation **impl) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_documentElement( 
            /* [retval][out] */ IXMLDOMElement **DOMElement) = 0;
        
        virtual /* [helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_documentElement( 
            /* [in] */ IXMLDOMElement *DOMElement) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createElement( 
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMElement **element) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createDocumentFragment( 
            /* [retval][out] */ IXMLDOMDocumentFragment **docFrag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createTextNode( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMText **text) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createComment( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMComment **comment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createCDATASection( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMCDATASection **cdata) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createProcessingInstruction( 
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMProcessingInstruction **pi) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createAttribute( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attribute) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createEntityReference( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMEntityReference **entityRef) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createNode( 
            /* [in] */ VARIANT Type,
            /* [in] */ BSTR name,
            /* [in] */ BSTR namespaceURI,
            /* [out][retval] */ IXMLDOMNode **node) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE nodeFromID( 
            /* [in] */ BSTR idString,
            /* [out][retval] */ IXMLDOMNode **node) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE load( 
            /* [in] */ VARIANT xmlSource,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ long *value) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_parseError( 
            /* [out][retval] */ IXMLDOMParseError **errorObj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_url( 
            /* [out][retval] */ BSTR *urlString) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_async( 
            /* [out][retval] */ VARIANT_BOOL *isAsync) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_async( 
            /* [in] */ VARIANT_BOOL isAsync) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE abort( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE loadXML( 
            /* [in] */ BSTR bstrXML,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE save( 
            /* [in] */ VARIANT destination) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_validateOnParse( 
            /* [out][retval] */ VARIANT_BOOL *isValidating) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_validateOnParse( 
            /* [in] */ VARIANT_BOOL isValidating) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_resolveExternals( 
            /* [out][retval] */ VARIANT_BOOL *isResolving) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_resolveExternals( 
            /* [in] */ VARIANT_BOOL isResolving) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_preserveWhiteSpace( 
            /* [out][retval] */ VARIANT_BOOL *isPreserving) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_preserveWhiteSpace( 
            /* [in] */ VARIANT_BOOL isPreserving) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_onreadystatechange( 
            /* [in] */ VARIANT readystatechangeSink) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ondataavailable( 
            /* [in] */ VARIANT ondataavailableSink) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ontransformnode( 
            /* [in] */ VARIANT ontransformnodeSink) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_doctype )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMDocumentType **documentType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_implementation )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMImplementation **impl);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_documentElement )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMElement **DOMElement);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_documentElement )( 
            IXMLDOMDocument * This,
            /* [in] */ IXMLDOMElement *DOMElement);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMElement **element);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IXMLDOMDocument * This,
            /* [retval][out] */ IXMLDOMDocumentFragment **docFrag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMText **text);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMComment **comment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMCDATASection **cdata);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMProcessingInstruction **pi);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMEntityReference **entityRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createNode )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT Type,
            /* [in] */ BSTR name,
            /* [in] */ BSTR namespaceURI,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nodeFromID )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR idString,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT xmlSource,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ long *value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parseError )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_async )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT_BOOL *isAsync);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_async )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT_BOOL isAsync);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *abort )( 
            IXMLDOMDocument * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *loadXML )( 
            IXMLDOMDocument * This,
            /* [in] */ BSTR bstrXML,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT destination);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_validateOnParse )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT_BOOL *isValidating);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_validateOnParse )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT_BOOL isValidating);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_resolveExternals )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT_BOOL *isResolving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_resolveExternals )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT_BOOL isResolving);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_preserveWhiteSpace )( 
            IXMLDOMDocument * This,
            /* [out][retval] */ VARIANT_BOOL *isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_preserveWhiteSpace )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT_BOOL isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT readystatechangeSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT ondataavailableSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ontransformnode )( 
            IXMLDOMDocument * This,
            /* [in] */ VARIANT ontransformnodeSink);
        
        END_INTERFACE
    } IXMLDOMDocumentVtbl;

    interface IXMLDOMDocument
    {
        CONST_VTBL struct IXMLDOMDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMDocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMDocument_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMDocument_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMDocument_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMDocument_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMDocument_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMDocument_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMDocument_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMDocument_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMDocument_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMDocument_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMDocument_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMDocument_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMDocument_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMDocument_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMDocument_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMDocument_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMDocument_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMDocument_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMDocument_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMDocument_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMDocument_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMDocument_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMDocument_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMDocument_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMDocument_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMDocument_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMDocument_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMDocument_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMDocument_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMDocument_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMDocument_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMDocument_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMDocument_get_doctype(This,documentType)	\
    ( (This)->lpVtbl -> get_doctype(This,documentType) ) 

#define IXMLDOMDocument_get_implementation(This,impl)	\
    ( (This)->lpVtbl -> get_implementation(This,impl) ) 

#define IXMLDOMDocument_get_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> get_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument_putref_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> putref_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument_createElement(This,tagName,element)	\
    ( (This)->lpVtbl -> createElement(This,tagName,element) ) 

#define IXMLDOMDocument_createDocumentFragment(This,docFrag)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,docFrag) ) 

#define IXMLDOMDocument_createTextNode(This,data,text)	\
    ( (This)->lpVtbl -> createTextNode(This,data,text) ) 

#define IXMLDOMDocument_createComment(This,data,comment)	\
    ( (This)->lpVtbl -> createComment(This,data,comment) ) 

#define IXMLDOMDocument_createCDATASection(This,data,cdata)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,cdata) ) 

#define IXMLDOMDocument_createProcessingInstruction(This,target,data,pi)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,pi) ) 

#define IXMLDOMDocument_createAttribute(This,name,attribute)	\
    ( (This)->lpVtbl -> createAttribute(This,name,attribute) ) 

#define IXMLDOMDocument_createEntityReference(This,name,entityRef)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,entityRef) ) 

#define IXMLDOMDocument_getElementsByTagName(This,tagName,resultList)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,resultList) ) 

#define IXMLDOMDocument_createNode(This,Type,name,namespaceURI,node)	\
    ( (This)->lpVtbl -> createNode(This,Type,name,namespaceURI,node) ) 

#define IXMLDOMDocument_nodeFromID(This,idString,node)	\
    ( (This)->lpVtbl -> nodeFromID(This,idString,node) ) 

#define IXMLDOMDocument_load(This,xmlSource,isSuccessful)	\
    ( (This)->lpVtbl -> load(This,xmlSource,isSuccessful) ) 

#define IXMLDOMDocument_get_readyState(This,value)	\
    ( (This)->lpVtbl -> get_readyState(This,value) ) 

#define IXMLDOMDocument_get_parseError(This,errorObj)	\
    ( (This)->lpVtbl -> get_parseError(This,errorObj) ) 

#define IXMLDOMDocument_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IXMLDOMDocument_get_async(This,isAsync)	\
    ( (This)->lpVtbl -> get_async(This,isAsync) ) 

#define IXMLDOMDocument_put_async(This,isAsync)	\
    ( (This)->lpVtbl -> put_async(This,isAsync) ) 

#define IXMLDOMDocument_abort(This)	\
    ( (This)->lpVtbl -> abort(This) ) 

#define IXMLDOMDocument_loadXML(This,bstrXML,isSuccessful)	\
    ( (This)->lpVtbl -> loadXML(This,bstrXML,isSuccessful) ) 

#define IXMLDOMDocument_save(This,destination)	\
    ( (This)->lpVtbl -> save(This,destination) ) 

#define IXMLDOMDocument_get_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> get_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument_put_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> put_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument_get_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> get_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument_put_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> put_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument_get_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> get_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument_put_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> put_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument_put_onreadystatechange(This,readystatechangeSink)	\
    ( (This)->lpVtbl -> put_onreadystatechange(This,readystatechangeSink) ) 

#define IXMLDOMDocument_put_ondataavailable(This,ondataavailableSink)	\
    ( (This)->lpVtbl -> put_ondataavailable(This,ondataavailableSink) ) 

#define IXMLDOMDocument_put_ontransformnode(This,ontransformnodeSink)	\
    ( (This)->lpVtbl -> put_ontransformnode(This,ontransformnodeSink) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMDocument_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMDocument2_INTERFACE_DEFINED__
#define __IXMLDOMDocument2_INTERFACE_DEFINED__

/* interface IXMLDOMDocument2 */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMDocument2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF95-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMDocument2 : public IXMLDOMDocument
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_namespaces( 
            /* [retval][out] */ IXMLDOMSchemaCollection **namespaceCollection) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_schemas( 
            /* [retval][out] */ VARIANT *otherCollection) = 0;
        
        virtual /* [helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_schemas( 
            /* [in] */ VARIANT otherCollection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE validate( 
            /* [out][retval] */ IXMLDOMParseError **errorObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProperty( 
            /* [in] */ BSTR name,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProperty( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMDocument2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMDocument2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMDocument2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMDocument2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMDocument2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMDocument2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMDocument2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMDocument2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_doctype )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMDocumentType **documentType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_implementation )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMImplementation **impl);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_documentElement )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMElement **DOMElement);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_documentElement )( 
            IXMLDOMDocument2 * This,
            /* [in] */ IXMLDOMElement *DOMElement);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMElement **element);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMDocumentFragment **docFrag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMText **text);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMComment **comment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMCDATASection **cdata);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMProcessingInstruction **pi);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMEntityReference **entityRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createNode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT Type,
            /* [in] */ BSTR name,
            /* [in] */ BSTR namespaceURI,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nodeFromID )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR idString,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT xmlSource,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ long *value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parseError )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_async )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *isAsync);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_async )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT_BOOL isAsync);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *abort )( 
            IXMLDOMDocument2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *loadXML )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR bstrXML,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT destination);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_validateOnParse )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *isValidating);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_validateOnParse )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT_BOOL isValidating);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_resolveExternals )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *isResolving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_resolveExternals )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT_BOOL isResolving);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_preserveWhiteSpace )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ VARIANT_BOOL *isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_preserveWhiteSpace )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT_BOOL isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT readystatechangeSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT ondataavailableSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ontransformnode )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT ontransformnodeSink);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaces )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ IXMLDOMSchemaCollection **namespaceCollection);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_schemas )( 
            IXMLDOMDocument2 * This,
            /* [retval][out] */ VARIANT *otherCollection);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_schemas )( 
            IXMLDOMDocument2 * This,
            /* [in] */ VARIANT otherCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *validate )( 
            IXMLDOMDocument2 * This,
            /* [out][retval] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProperty )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR name,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProperty )( 
            IXMLDOMDocument2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *value);
        
        END_INTERFACE
    } IXMLDOMDocument2Vtbl;

    interface IXMLDOMDocument2
    {
        CONST_VTBL struct IXMLDOMDocument2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMDocument2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMDocument2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMDocument2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMDocument2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMDocument2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMDocument2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMDocument2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMDocument2_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMDocument2_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMDocument2_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMDocument2_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMDocument2_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMDocument2_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMDocument2_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMDocument2_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMDocument2_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMDocument2_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMDocument2_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMDocument2_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMDocument2_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMDocument2_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMDocument2_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMDocument2_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMDocument2_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMDocument2_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMDocument2_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMDocument2_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMDocument2_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMDocument2_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMDocument2_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMDocument2_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument2_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument2_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument2_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument2_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMDocument2_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMDocument2_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMDocument2_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMDocument2_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMDocument2_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMDocument2_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMDocument2_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMDocument2_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMDocument2_get_doctype(This,documentType)	\
    ( (This)->lpVtbl -> get_doctype(This,documentType) ) 

#define IXMLDOMDocument2_get_implementation(This,impl)	\
    ( (This)->lpVtbl -> get_implementation(This,impl) ) 

#define IXMLDOMDocument2_get_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> get_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument2_putref_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> putref_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument2_createElement(This,tagName,element)	\
    ( (This)->lpVtbl -> createElement(This,tagName,element) ) 

#define IXMLDOMDocument2_createDocumentFragment(This,docFrag)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,docFrag) ) 

#define IXMLDOMDocument2_createTextNode(This,data,text)	\
    ( (This)->lpVtbl -> createTextNode(This,data,text) ) 

#define IXMLDOMDocument2_createComment(This,data,comment)	\
    ( (This)->lpVtbl -> createComment(This,data,comment) ) 

#define IXMLDOMDocument2_createCDATASection(This,data,cdata)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,cdata) ) 

#define IXMLDOMDocument2_createProcessingInstruction(This,target,data,pi)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,pi) ) 

#define IXMLDOMDocument2_createAttribute(This,name,attribute)	\
    ( (This)->lpVtbl -> createAttribute(This,name,attribute) ) 

#define IXMLDOMDocument2_createEntityReference(This,name,entityRef)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,entityRef) ) 

#define IXMLDOMDocument2_getElementsByTagName(This,tagName,resultList)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,resultList) ) 

#define IXMLDOMDocument2_createNode(This,Type,name,namespaceURI,node)	\
    ( (This)->lpVtbl -> createNode(This,Type,name,namespaceURI,node) ) 

#define IXMLDOMDocument2_nodeFromID(This,idString,node)	\
    ( (This)->lpVtbl -> nodeFromID(This,idString,node) ) 

#define IXMLDOMDocument2_load(This,xmlSource,isSuccessful)	\
    ( (This)->lpVtbl -> load(This,xmlSource,isSuccessful) ) 

#define IXMLDOMDocument2_get_readyState(This,value)	\
    ( (This)->lpVtbl -> get_readyState(This,value) ) 

#define IXMLDOMDocument2_get_parseError(This,errorObj)	\
    ( (This)->lpVtbl -> get_parseError(This,errorObj) ) 

#define IXMLDOMDocument2_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IXMLDOMDocument2_get_async(This,isAsync)	\
    ( (This)->lpVtbl -> get_async(This,isAsync) ) 

#define IXMLDOMDocument2_put_async(This,isAsync)	\
    ( (This)->lpVtbl -> put_async(This,isAsync) ) 

#define IXMLDOMDocument2_abort(This)	\
    ( (This)->lpVtbl -> abort(This) ) 

#define IXMLDOMDocument2_loadXML(This,bstrXML,isSuccessful)	\
    ( (This)->lpVtbl -> loadXML(This,bstrXML,isSuccessful) ) 

#define IXMLDOMDocument2_save(This,destination)	\
    ( (This)->lpVtbl -> save(This,destination) ) 

#define IXMLDOMDocument2_get_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> get_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument2_put_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> put_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument2_get_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> get_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument2_put_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> put_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument2_get_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> get_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument2_put_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> put_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument2_put_onreadystatechange(This,readystatechangeSink)	\
    ( (This)->lpVtbl -> put_onreadystatechange(This,readystatechangeSink) ) 

#define IXMLDOMDocument2_put_ondataavailable(This,ondataavailableSink)	\
    ( (This)->lpVtbl -> put_ondataavailable(This,ondataavailableSink) ) 

#define IXMLDOMDocument2_put_ontransformnode(This,ontransformnodeSink)	\
    ( (This)->lpVtbl -> put_ontransformnode(This,ontransformnodeSink) ) 


#define IXMLDOMDocument2_get_namespaces(This,namespaceCollection)	\
    ( (This)->lpVtbl -> get_namespaces(This,namespaceCollection) ) 

#define IXMLDOMDocument2_get_schemas(This,otherCollection)	\
    ( (This)->lpVtbl -> get_schemas(This,otherCollection) ) 

#define IXMLDOMDocument2_putref_schemas(This,otherCollection)	\
    ( (This)->lpVtbl -> putref_schemas(This,otherCollection) ) 

#define IXMLDOMDocument2_validate(This,errorObj)	\
    ( (This)->lpVtbl -> validate(This,errorObj) ) 

#define IXMLDOMDocument2_setProperty(This,name,value)	\
    ( (This)->lpVtbl -> setProperty(This,name,value) ) 

#define IXMLDOMDocument2_getProperty(This,name,value)	\
    ( (This)->lpVtbl -> getProperty(This,name,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMDocument2_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMDocument3_INTERFACE_DEFINED__
#define __IXMLDOMDocument3_INTERFACE_DEFINED__

/* interface IXMLDOMDocument3 */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMDocument3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF96-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMDocument3 : public IXMLDOMDocument2
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE validateNode( 
            /* [in] */ IXMLDOMNode *node,
            /* [retval][out] */ IXMLDOMParseError **errorObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE importNode( 
            /* [in] */ IXMLDOMNode *node,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **clone) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMDocument3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMDocument3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMDocument3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMDocument3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMDocument3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMDocument3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMDocument3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMDocument3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_doctype )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMDocumentType **documentType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_implementation )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMImplementation **impl);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_documentElement )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMElement **DOMElement);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_documentElement )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMElement *DOMElement);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMElement **element);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMDocumentFragment **docFrag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMText **text);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMComment **comment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMCDATASection **cdata);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IXMLDOMProcessingInstruction **pi);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMEntityReference **entityRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT Type,
            /* [in] */ BSTR name,
            /* [in] */ BSTR namespaceURI,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nodeFromID )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR idString,
            /* [out][retval] */ IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT xmlSource,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ long *value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parseError )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_async )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *isAsync);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_async )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT_BOOL isAsync);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *abort )( 
            IXMLDOMDocument3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *loadXML )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR bstrXML,
            /* [retval][out] */ VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT destination);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_validateOnParse )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *isValidating);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_validateOnParse )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT_BOOL isValidating);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_resolveExternals )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *isResolving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_resolveExternals )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT_BOOL isResolving);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_preserveWhiteSpace )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ VARIANT_BOOL *isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_preserveWhiteSpace )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT_BOOL isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT readystatechangeSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT ondataavailableSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ontransformnode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT ontransformnodeSink);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaces )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ IXMLDOMSchemaCollection **namespaceCollection);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_schemas )( 
            IXMLDOMDocument3 * This,
            /* [retval][out] */ VARIANT *otherCollection);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_schemas )( 
            IXMLDOMDocument3 * This,
            /* [in] */ VARIANT otherCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *validate )( 
            IXMLDOMDocument3 * This,
            /* [out][retval] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProperty )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR name,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProperty )( 
            IXMLDOMDocument3 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *validateNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *node,
            /* [retval][out] */ IXMLDOMParseError **errorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *importNode )( 
            IXMLDOMDocument3 * This,
            /* [in] */ IXMLDOMNode *node,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **clone);
        
        END_INTERFACE
    } IXMLDOMDocument3Vtbl;

    interface IXMLDOMDocument3
    {
        CONST_VTBL struct IXMLDOMDocument3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMDocument3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMDocument3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMDocument3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMDocument3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMDocument3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMDocument3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMDocument3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMDocument3_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMDocument3_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMDocument3_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMDocument3_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMDocument3_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMDocument3_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMDocument3_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMDocument3_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMDocument3_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMDocument3_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMDocument3_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMDocument3_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMDocument3_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMDocument3_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMDocument3_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMDocument3_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMDocument3_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMDocument3_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMDocument3_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMDocument3_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMDocument3_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMDocument3_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMDocument3_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMDocument3_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument3_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocument3_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument3_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMDocument3_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMDocument3_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMDocument3_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMDocument3_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMDocument3_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMDocument3_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMDocument3_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMDocument3_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMDocument3_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMDocument3_get_doctype(This,documentType)	\
    ( (This)->lpVtbl -> get_doctype(This,documentType) ) 

#define IXMLDOMDocument3_get_implementation(This,impl)	\
    ( (This)->lpVtbl -> get_implementation(This,impl) ) 

#define IXMLDOMDocument3_get_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> get_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument3_putref_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> putref_documentElement(This,DOMElement) ) 

#define IXMLDOMDocument3_createElement(This,tagName,element)	\
    ( (This)->lpVtbl -> createElement(This,tagName,element) ) 

#define IXMLDOMDocument3_createDocumentFragment(This,docFrag)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,docFrag) ) 

#define IXMLDOMDocument3_createTextNode(This,data,text)	\
    ( (This)->lpVtbl -> createTextNode(This,data,text) ) 

#define IXMLDOMDocument3_createComment(This,data,comment)	\
    ( (This)->lpVtbl -> createComment(This,data,comment) ) 

#define IXMLDOMDocument3_createCDATASection(This,data,cdata)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,cdata) ) 

#define IXMLDOMDocument3_createProcessingInstruction(This,target,data,pi)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,pi) ) 

#define IXMLDOMDocument3_createAttribute(This,name,attribute)	\
    ( (This)->lpVtbl -> createAttribute(This,name,attribute) ) 

#define IXMLDOMDocument3_createEntityReference(This,name,entityRef)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,entityRef) ) 

#define IXMLDOMDocument3_getElementsByTagName(This,tagName,resultList)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,resultList) ) 

#define IXMLDOMDocument3_createNode(This,Type,name,namespaceURI,node)	\
    ( (This)->lpVtbl -> createNode(This,Type,name,namespaceURI,node) ) 

#define IXMLDOMDocument3_nodeFromID(This,idString,node)	\
    ( (This)->lpVtbl -> nodeFromID(This,idString,node) ) 

#define IXMLDOMDocument3_load(This,xmlSource,isSuccessful)	\
    ( (This)->lpVtbl -> load(This,xmlSource,isSuccessful) ) 

#define IXMLDOMDocument3_get_readyState(This,value)	\
    ( (This)->lpVtbl -> get_readyState(This,value) ) 

#define IXMLDOMDocument3_get_parseError(This,errorObj)	\
    ( (This)->lpVtbl -> get_parseError(This,errorObj) ) 

#define IXMLDOMDocument3_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IXMLDOMDocument3_get_async(This,isAsync)	\
    ( (This)->lpVtbl -> get_async(This,isAsync) ) 

#define IXMLDOMDocument3_put_async(This,isAsync)	\
    ( (This)->lpVtbl -> put_async(This,isAsync) ) 

#define IXMLDOMDocument3_abort(This)	\
    ( (This)->lpVtbl -> abort(This) ) 

#define IXMLDOMDocument3_loadXML(This,bstrXML,isSuccessful)	\
    ( (This)->lpVtbl -> loadXML(This,bstrXML,isSuccessful) ) 

#define IXMLDOMDocument3_save(This,destination)	\
    ( (This)->lpVtbl -> save(This,destination) ) 

#define IXMLDOMDocument3_get_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> get_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument3_put_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> put_validateOnParse(This,isValidating) ) 

#define IXMLDOMDocument3_get_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> get_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument3_put_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> put_resolveExternals(This,isResolving) ) 

#define IXMLDOMDocument3_get_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> get_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument3_put_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> put_preserveWhiteSpace(This,isPreserving) ) 

#define IXMLDOMDocument3_put_onreadystatechange(This,readystatechangeSink)	\
    ( (This)->lpVtbl -> put_onreadystatechange(This,readystatechangeSink) ) 

#define IXMLDOMDocument3_put_ondataavailable(This,ondataavailableSink)	\
    ( (This)->lpVtbl -> put_ondataavailable(This,ondataavailableSink) ) 

#define IXMLDOMDocument3_put_ontransformnode(This,ontransformnodeSink)	\
    ( (This)->lpVtbl -> put_ontransformnode(This,ontransformnodeSink) ) 


#define IXMLDOMDocument3_get_namespaces(This,namespaceCollection)	\
    ( (This)->lpVtbl -> get_namespaces(This,namespaceCollection) ) 

#define IXMLDOMDocument3_get_schemas(This,otherCollection)	\
    ( (This)->lpVtbl -> get_schemas(This,otherCollection) ) 

#define IXMLDOMDocument3_putref_schemas(This,otherCollection)	\
    ( (This)->lpVtbl -> putref_schemas(This,otherCollection) ) 

#define IXMLDOMDocument3_validate(This,errorObj)	\
    ( (This)->lpVtbl -> validate(This,errorObj) ) 

#define IXMLDOMDocument3_setProperty(This,name,value)	\
    ( (This)->lpVtbl -> setProperty(This,name,value) ) 

#define IXMLDOMDocument3_getProperty(This,name,value)	\
    ( (This)->lpVtbl -> getProperty(This,name,value) ) 


#define IXMLDOMDocument3_validateNode(This,node,errorObj)	\
    ( (This)->lpVtbl -> validateNode(This,node,errorObj) ) 

#define IXMLDOMDocument3_importNode(This,node,deep,clone)	\
    ( (This)->lpVtbl -> importNode(This,node,deep,clone) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMDocument3_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMNodeList_INTERFACE_DEFINED__
#define __IXMLDOMNodeList_INTERFACE_DEFINED__

/* interface IXMLDOMNodeList */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMNodeList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF82-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_item( 
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMNode **listItem) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ long *listLength) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE nextNode( 
            /* [retval][out] */ IXMLDOMNode **nextItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [id][hidden][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMNodeListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMNodeList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMNodeList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMNodeList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMNodeList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMNodeList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMNodeList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMNodeList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_item )( 
            IXMLDOMNodeList * This,
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMNode **listItem);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMNodeList * This,
            /* [retval][out] */ long *listLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nextNode )( 
            IXMLDOMNodeList * This,
            /* [retval][out] */ IXMLDOMNode **nextItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            IXMLDOMNodeList * This);
        
        /* [id][hidden][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IXMLDOMNodeList * This,
            /* [out][retval] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IXMLDOMNodeListVtbl;

    interface IXMLDOMNodeList
    {
        CONST_VTBL struct IXMLDOMNodeListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMNodeList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMNodeList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMNodeList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMNodeList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMNodeList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMNodeList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMNodeList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMNodeList_get_item(This,index,listItem)	\
    ( (This)->lpVtbl -> get_item(This,index,listItem) ) 

#define IXMLDOMNodeList_get_length(This,listLength)	\
    ( (This)->lpVtbl -> get_length(This,listLength) ) 

#define IXMLDOMNodeList_nextNode(This,nextItem)	\
    ( (This)->lpVtbl -> nextNode(This,nextItem) ) 

#define IXMLDOMNodeList_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#define IXMLDOMNodeList_get__newEnum(This,ppUnk)	\
    ( (This)->lpVtbl -> get__newEnum(This,ppUnk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMNodeList_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMNamedNodeMap_INTERFACE_DEFINED__
#define __IXMLDOMNamedNodeMap_INTERFACE_DEFINED__

/* interface IXMLDOMNamedNodeMap */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMNamedNodeMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF83-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getNamedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMNode **namedItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setNamedItem( 
            /* [in] */ IXMLDOMNode *newItem,
            /* [retval][out] */ IXMLDOMNode **nameItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeNamedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMNode **namedItem) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_item( 
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMNode **listItem) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ long *listLength) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getQualifiedItem( 
            /* [in] */ BSTR baseName,
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **qualifiedItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeQualifiedItem( 
            /* [in] */ BSTR baseName,
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **qualifiedItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE nextNode( 
            /* [retval][out] */ IXMLDOMNode **nextItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [id][hidden][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMNamedNodeMapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMNamedNodeMap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMNamedNodeMap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMNamedNodeMap * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getNamedItem )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMNode **namedItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setNamedItem )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ IXMLDOMNode *newItem,
            /* [retval][out] */ IXMLDOMNode **nameItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeNamedItem )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMNode **namedItem);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_item )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMNode **listItem);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMNamedNodeMap * This,
            /* [retval][out] */ long *listLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getQualifiedItem )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ BSTR baseName,
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **qualifiedItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeQualifiedItem )( 
            IXMLDOMNamedNodeMap * This,
            /* [in] */ BSTR baseName,
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **qualifiedItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nextNode )( 
            IXMLDOMNamedNodeMap * This,
            /* [retval][out] */ IXMLDOMNode **nextItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            IXMLDOMNamedNodeMap * This);
        
        /* [id][hidden][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IXMLDOMNamedNodeMap * This,
            /* [out][retval] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IXMLDOMNamedNodeMapVtbl;

    interface IXMLDOMNamedNodeMap
    {
        CONST_VTBL struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMNamedNodeMap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMNamedNodeMap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMNamedNodeMap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMNamedNodeMap_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMNamedNodeMap_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMNamedNodeMap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMNamedNodeMap_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMNamedNodeMap_getNamedItem(This,name,namedItem)	\
    ( (This)->lpVtbl -> getNamedItem(This,name,namedItem) ) 

#define IXMLDOMNamedNodeMap_setNamedItem(This,newItem,nameItem)	\
    ( (This)->lpVtbl -> setNamedItem(This,newItem,nameItem) ) 

#define IXMLDOMNamedNodeMap_removeNamedItem(This,name,namedItem)	\
    ( (This)->lpVtbl -> removeNamedItem(This,name,namedItem) ) 

#define IXMLDOMNamedNodeMap_get_item(This,index,listItem)	\
    ( (This)->lpVtbl -> get_item(This,index,listItem) ) 

#define IXMLDOMNamedNodeMap_get_length(This,listLength)	\
    ( (This)->lpVtbl -> get_length(This,listLength) ) 

#define IXMLDOMNamedNodeMap_getQualifiedItem(This,baseName,namespaceURI,qualifiedItem)	\
    ( (This)->lpVtbl -> getQualifiedItem(This,baseName,namespaceURI,qualifiedItem) ) 

#define IXMLDOMNamedNodeMap_removeQualifiedItem(This,baseName,namespaceURI,qualifiedItem)	\
    ( (This)->lpVtbl -> removeQualifiedItem(This,baseName,namespaceURI,qualifiedItem) ) 

#define IXMLDOMNamedNodeMap_nextNode(This,nextItem)	\
    ( (This)->lpVtbl -> nextNode(This,nextItem) ) 

#define IXMLDOMNamedNodeMap_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#define IXMLDOMNamedNodeMap_get__newEnum(This,ppUnk)	\
    ( (This)->lpVtbl -> get__newEnum(This,ppUnk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMNamedNodeMap_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMCharacterData_INTERFACE_DEFINED__
#define __IXMLDOMCharacterData_INTERFACE_DEFINED__

/* interface IXMLDOMCharacterData */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMCharacterData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF84-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_data( 
            /* [retval][out] */ BSTR *data) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_data( 
            /* [in] */ BSTR data) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ long *dataLength) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE substringData( 
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [retval][out] */ BSTR *data) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE appendData( 
            /* [in] */ BSTR data) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE insertData( 
            /* [in] */ long offset,
            /* [in] */ BSTR data) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE deleteData( 
            /* [in] */ long offset,
            /* [in] */ long count) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE replaceData( 
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [in] */ BSTR data) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMCharacterDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMCharacterData * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMCharacterData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMCharacterData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMCharacterData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMCharacterData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMCharacterData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMCharacterData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMCharacterData * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMCharacterData * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMCharacterData * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMCharacterData * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMCharacterData * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMCharacterData * This,
            /* [retval][out] */ long *dataLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IXMLDOMCharacterData * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IXMLDOMCharacterData * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IXMLDOMCharacterData * This,
            /* [in] */ long offset,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IXMLDOMCharacterData * This,
            /* [in] */ long offset,
            /* [in] */ long count);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IXMLDOMCharacterData * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [in] */ BSTR data);
        
        END_INTERFACE
    } IXMLDOMCharacterDataVtbl;

    interface IXMLDOMCharacterData
    {
        CONST_VTBL struct IXMLDOMCharacterDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMCharacterData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMCharacterData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMCharacterData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMCharacterData_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMCharacterData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMCharacterData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMCharacterData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMCharacterData_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMCharacterData_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMCharacterData_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMCharacterData_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMCharacterData_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMCharacterData_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMCharacterData_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMCharacterData_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMCharacterData_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMCharacterData_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMCharacterData_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMCharacterData_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMCharacterData_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMCharacterData_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMCharacterData_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMCharacterData_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMCharacterData_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMCharacterData_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMCharacterData_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMCharacterData_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMCharacterData_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMCharacterData_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMCharacterData_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMCharacterData_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMCharacterData_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMCharacterData_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMCharacterData_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMCharacterData_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMCharacterData_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMCharacterData_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMCharacterData_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMCharacterData_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMCharacterData_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMCharacterData_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMCharacterData_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMCharacterData_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMCharacterData_get_data(This,data)	\
    ( (This)->lpVtbl -> get_data(This,data) ) 

#define IXMLDOMCharacterData_put_data(This,data)	\
    ( (This)->lpVtbl -> put_data(This,data) ) 

#define IXMLDOMCharacterData_get_length(This,dataLength)	\
    ( (This)->lpVtbl -> get_length(This,dataLength) ) 

#define IXMLDOMCharacterData_substringData(This,offset,count,data)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,data) ) 

#define IXMLDOMCharacterData_appendData(This,data)	\
    ( (This)->lpVtbl -> appendData(This,data) ) 

#define IXMLDOMCharacterData_insertData(This,offset,data)	\
    ( (This)->lpVtbl -> insertData(This,offset,data) ) 

#define IXMLDOMCharacterData_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IXMLDOMCharacterData_replaceData(This,offset,count,data)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,data) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMCharacterData_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMAttribute_INTERFACE_DEFINED__
#define __IXMLDOMAttribute_INTERFACE_DEFINED__

/* interface IXMLDOMAttribute */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF85-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [retval][out] */ BSTR *attributeName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [retval][out] */ VARIANT *attributeValue) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ VARIANT attributeValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMAttribute * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMAttribute * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMAttribute * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMAttribute * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMAttribute * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMAttribute * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMAttribute * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMAttribute * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMAttribute * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ BSTR *attributeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_value )( 
            IXMLDOMAttribute * This,
            /* [retval][out] */ VARIANT *attributeValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_value )( 
            IXMLDOMAttribute * This,
            /* [in] */ VARIANT attributeValue);
        
        END_INTERFACE
    } IXMLDOMAttributeVtbl;

    interface IXMLDOMAttribute
    {
        CONST_VTBL struct IXMLDOMAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMAttribute_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMAttribute_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMAttribute_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMAttribute_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMAttribute_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMAttribute_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMAttribute_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMAttribute_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMAttribute_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMAttribute_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMAttribute_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMAttribute_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMAttribute_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMAttribute_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMAttribute_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMAttribute_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMAttribute_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMAttribute_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMAttribute_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMAttribute_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMAttribute_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMAttribute_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMAttribute_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMAttribute_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMAttribute_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMAttribute_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMAttribute_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMAttribute_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMAttribute_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMAttribute_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMAttribute_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMAttribute_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMAttribute_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMAttribute_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMAttribute_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMAttribute_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMAttribute_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMAttribute_get_name(This,attributeName)	\
    ( (This)->lpVtbl -> get_name(This,attributeName) ) 

#define IXMLDOMAttribute_get_value(This,attributeValue)	\
    ( (This)->lpVtbl -> get_value(This,attributeValue) ) 

#define IXMLDOMAttribute_put_value(This,attributeValue)	\
    ( (This)->lpVtbl -> put_value(This,attributeValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMAttribute_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMElement_INTERFACE_DEFINED__
#define __IXMLDOMElement_INTERFACE_DEFINED__

/* interface IXMLDOMElement */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF86-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_tagName( 
            /* [retval][out] */ BSTR *tagName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ BSTR name,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeAttribute( 
            /* [in] */ BSTR name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAttributeNode( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setAttributeNode( 
            /* [in] */ IXMLDOMAttribute *DOMAttribute,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeAttributeNode( 
            /* [in] */ IXMLDOMAttribute *DOMAttribute,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE normalize( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMElement * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMElement * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMElement * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMElement * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMElement * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMElement * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMElement * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMElement * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMElement * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMElement * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMElement * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMElement * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMElement * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMElement * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tagName )( 
            IXMLDOMElement * This,
            /* [retval][out] */ BSTR *tagName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR name,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMAttribute *DOMAttribute,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IXMLDOMElement * This,
            /* [in] */ IXMLDOMAttribute *DOMAttribute,
            /* [retval][out] */ IXMLDOMAttribute **attributeNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IXMLDOMElement * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IXMLDOMElement * This);
        
        END_INTERFACE
    } IXMLDOMElementVtbl;

    interface IXMLDOMElement
    {
        CONST_VTBL struct IXMLDOMElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMElement_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMElement_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMElement_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMElement_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMElement_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMElement_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMElement_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMElement_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMElement_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMElement_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMElement_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMElement_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMElement_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMElement_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMElement_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMElement_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMElement_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMElement_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMElement_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMElement_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMElement_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMElement_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMElement_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMElement_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMElement_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMElement_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMElement_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMElement_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMElement_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMElement_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMElement_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMElement_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMElement_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMElement_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMElement_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMElement_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMElement_get_tagName(This,tagName)	\
    ( (This)->lpVtbl -> get_tagName(This,tagName) ) 

#define IXMLDOMElement_getAttribute(This,name,value)	\
    ( (This)->lpVtbl -> getAttribute(This,name,value) ) 

#define IXMLDOMElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IXMLDOMElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IXMLDOMElement_getAttributeNode(This,name,attributeNode)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,attributeNode) ) 

#define IXMLDOMElement_setAttributeNode(This,DOMAttribute,attributeNode)	\
    ( (This)->lpVtbl -> setAttributeNode(This,DOMAttribute,attributeNode) ) 

#define IXMLDOMElement_removeAttributeNode(This,DOMAttribute,attributeNode)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,DOMAttribute,attributeNode) ) 

#define IXMLDOMElement_getElementsByTagName(This,tagName,resultList)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,resultList) ) 

#define IXMLDOMElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMElement_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMText_INTERFACE_DEFINED__
#define __IXMLDOMText_INTERFACE_DEFINED__

/* interface IXMLDOMText */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF87-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE splitText( 
            /* [in] */ long offset,
            /* [retval][out] */ IXMLDOMText **rightHandTextNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMText * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMText * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMText * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMText * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMText * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMText * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMText * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMText * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMText * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMText * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMText * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMText * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMText * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMText * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMText * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMText * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMText * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMText * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMText * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMText * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IXMLDOMText * This,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IXMLDOMText * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMText * This,
            /* [retval][out] */ long *dataLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IXMLDOMText * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IXMLDOMText * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IXMLDOMText * This,
            /* [in] */ long offset,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IXMLDOMText * This,
            /* [in] */ long offset,
            /* [in] */ long count);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IXMLDOMText * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *splitText )( 
            IXMLDOMText * This,
            /* [in] */ long offset,
            /* [retval][out] */ IXMLDOMText **rightHandTextNode);
        
        END_INTERFACE
    } IXMLDOMTextVtbl;

    interface IXMLDOMText
    {
        CONST_VTBL struct IXMLDOMTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMText_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMText_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMText_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMText_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMText_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMText_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMText_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMText_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMText_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMText_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMText_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMText_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMText_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMText_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMText_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMText_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMText_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMText_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMText_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMText_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMText_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMText_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMText_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMText_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMText_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMText_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMText_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMText_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMText_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMText_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMText_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMText_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMText_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMText_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMText_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMText_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMText_get_data(This,data)	\
    ( (This)->lpVtbl -> get_data(This,data) ) 

#define IXMLDOMText_put_data(This,data)	\
    ( (This)->lpVtbl -> put_data(This,data) ) 

#define IXMLDOMText_get_length(This,dataLength)	\
    ( (This)->lpVtbl -> get_length(This,dataLength) ) 

#define IXMLDOMText_substringData(This,offset,count,data)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,data) ) 

#define IXMLDOMText_appendData(This,data)	\
    ( (This)->lpVtbl -> appendData(This,data) ) 

#define IXMLDOMText_insertData(This,offset,data)	\
    ( (This)->lpVtbl -> insertData(This,offset,data) ) 

#define IXMLDOMText_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IXMLDOMText_replaceData(This,offset,count,data)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,data) ) 


#define IXMLDOMText_splitText(This,offset,rightHandTextNode)	\
    ( (This)->lpVtbl -> splitText(This,offset,rightHandTextNode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMText_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMComment_INTERFACE_DEFINED__
#define __IXMLDOMComment_INTERFACE_DEFINED__

/* interface IXMLDOMComment */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMComment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF88-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMCommentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMComment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMComment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMComment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMComment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMComment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMComment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMComment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMComment * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMComment * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMComment * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMComment * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMComment * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMComment * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMComment * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMComment * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMComment * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMComment * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMComment * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMComment * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMComment * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMComment * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMComment * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IXMLDOMComment * This,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMComment * This,
            /* [retval][out] */ long *dataLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IXMLDOMComment * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IXMLDOMComment * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IXMLDOMComment * This,
            /* [in] */ long offset,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IXMLDOMComment * This,
            /* [in] */ long offset,
            /* [in] */ long count);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IXMLDOMComment * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [in] */ BSTR data);
        
        END_INTERFACE
    } IXMLDOMCommentVtbl;

    interface IXMLDOMComment
    {
        CONST_VTBL struct IXMLDOMCommentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMComment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMComment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMComment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMComment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMComment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMComment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMComment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMComment_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMComment_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMComment_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMComment_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMComment_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMComment_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMComment_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMComment_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMComment_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMComment_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMComment_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMComment_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMComment_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMComment_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMComment_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMComment_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMComment_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMComment_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMComment_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMComment_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMComment_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMComment_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMComment_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMComment_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMComment_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMComment_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMComment_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMComment_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMComment_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMComment_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMComment_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMComment_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMComment_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMComment_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMComment_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMComment_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMComment_get_data(This,data)	\
    ( (This)->lpVtbl -> get_data(This,data) ) 

#define IXMLDOMComment_put_data(This,data)	\
    ( (This)->lpVtbl -> put_data(This,data) ) 

#define IXMLDOMComment_get_length(This,dataLength)	\
    ( (This)->lpVtbl -> get_length(This,dataLength) ) 

#define IXMLDOMComment_substringData(This,offset,count,data)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,data) ) 

#define IXMLDOMComment_appendData(This,data)	\
    ( (This)->lpVtbl -> appendData(This,data) ) 

#define IXMLDOMComment_insertData(This,offset,data)	\
    ( (This)->lpVtbl -> insertData(This,offset,data) ) 

#define IXMLDOMComment_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IXMLDOMComment_replaceData(This,offset,count,data)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,data) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMComment_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMProcessingInstruction_INTERFACE_DEFINED__
#define __IXMLDOMProcessingInstruction_INTERFACE_DEFINED__

/* interface IXMLDOMProcessingInstruction */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMProcessingInstruction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF89-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_data( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_data( 
            /* [in] */ BSTR value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMProcessingInstructionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMProcessingInstruction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMProcessingInstruction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMProcessingInstruction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMProcessingInstruction * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_target )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IXMLDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IXMLDOMProcessingInstruction * This,
            /* [in] */ BSTR value);
        
        END_INTERFACE
    } IXMLDOMProcessingInstructionVtbl;

    interface IXMLDOMProcessingInstruction
    {
        CONST_VTBL struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMProcessingInstruction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMProcessingInstruction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMProcessingInstruction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMProcessingInstruction_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMProcessingInstruction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMProcessingInstruction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMProcessingInstruction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMProcessingInstruction_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMProcessingInstruction_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMProcessingInstruction_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMProcessingInstruction_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMProcessingInstruction_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMProcessingInstruction_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMProcessingInstruction_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMProcessingInstruction_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMProcessingInstruction_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMProcessingInstruction_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMProcessingInstruction_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMProcessingInstruction_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMProcessingInstruction_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMProcessingInstruction_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMProcessingInstruction_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMProcessingInstruction_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMProcessingInstruction_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMProcessingInstruction_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMProcessingInstruction_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMProcessingInstruction_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMProcessingInstruction_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMProcessingInstruction_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMProcessingInstruction_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMProcessingInstruction_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMProcessingInstruction_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMProcessingInstruction_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMProcessingInstruction_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMProcessingInstruction_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMProcessingInstruction_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMProcessingInstruction_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMProcessingInstruction_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMProcessingInstruction_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMProcessingInstruction_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMProcessingInstruction_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMProcessingInstruction_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMProcessingInstruction_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMProcessingInstruction_get_target(This,name)	\
    ( (This)->lpVtbl -> get_target(This,name) ) 

#define IXMLDOMProcessingInstruction_get_data(This,value)	\
    ( (This)->lpVtbl -> get_data(This,value) ) 

#define IXMLDOMProcessingInstruction_put_data(This,value)	\
    ( (This)->lpVtbl -> put_data(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMProcessingInstruction_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMCDATASection_INTERFACE_DEFINED__
#define __IXMLDOMCDATASection_INTERFACE_DEFINED__

/* interface IXMLDOMCDATASection */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMCDATASection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8A-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMCDATASectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMCDATASection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMCDATASection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMCDATASection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMCDATASection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMCDATASection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMCDATASection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMCDATASection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMCDATASection * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMCDATASection * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMCDATASection * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMCDATASection * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMCDATASection * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_data )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_data )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMCDATASection * This,
            /* [retval][out] */ long *dataLength);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IXMLDOMCDATASection * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [retval][out] */ BSTR *data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IXMLDOMCDATASection * This,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IXMLDOMCDATASection * This,
            /* [in] */ long offset,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IXMLDOMCDATASection * This,
            /* [in] */ long offset,
            /* [in] */ long count);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IXMLDOMCDATASection * This,
            /* [in] */ long offset,
            /* [in] */ long count,
            /* [in] */ BSTR data);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *splitText )( 
            IXMLDOMCDATASection * This,
            /* [in] */ long offset,
            /* [retval][out] */ IXMLDOMText **rightHandTextNode);
        
        END_INTERFACE
    } IXMLDOMCDATASectionVtbl;

    interface IXMLDOMCDATASection
    {
        CONST_VTBL struct IXMLDOMCDATASectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMCDATASection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMCDATASection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMCDATASection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMCDATASection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMCDATASection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMCDATASection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMCDATASection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMCDATASection_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMCDATASection_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMCDATASection_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMCDATASection_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMCDATASection_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMCDATASection_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMCDATASection_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMCDATASection_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMCDATASection_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMCDATASection_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMCDATASection_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMCDATASection_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMCDATASection_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMCDATASection_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMCDATASection_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMCDATASection_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMCDATASection_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMCDATASection_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMCDATASection_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMCDATASection_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMCDATASection_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMCDATASection_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMCDATASection_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMCDATASection_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMCDATASection_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMCDATASection_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMCDATASection_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMCDATASection_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMCDATASection_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMCDATASection_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMCDATASection_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMCDATASection_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMCDATASection_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMCDATASection_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMCDATASection_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMCDATASection_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMCDATASection_get_data(This,data)	\
    ( (This)->lpVtbl -> get_data(This,data) ) 

#define IXMLDOMCDATASection_put_data(This,data)	\
    ( (This)->lpVtbl -> put_data(This,data) ) 

#define IXMLDOMCDATASection_get_length(This,dataLength)	\
    ( (This)->lpVtbl -> get_length(This,dataLength) ) 

#define IXMLDOMCDATASection_substringData(This,offset,count,data)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,data) ) 

#define IXMLDOMCDATASection_appendData(This,data)	\
    ( (This)->lpVtbl -> appendData(This,data) ) 

#define IXMLDOMCDATASection_insertData(This,offset,data)	\
    ( (This)->lpVtbl -> insertData(This,offset,data) ) 

#define IXMLDOMCDATASection_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IXMLDOMCDATASection_replaceData(This,offset,count,data)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,data) ) 


#define IXMLDOMCDATASection_splitText(This,offset,rightHandTextNode)	\
    ( (This)->lpVtbl -> splitText(This,offset,rightHandTextNode) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMCDATASection_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMDocumentType_INTERFACE_DEFINED__
#define __IXMLDOMDocumentType_INTERFACE_DEFINED__

/* interface IXMLDOMDocumentType */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMDocumentType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8B-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [retval][out] */ BSTR *rootName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_entities( 
            /* [retval][out] */ IXMLDOMNamedNodeMap **entityMap) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_notations( 
            /* [retval][out] */ IXMLDOMNamedNodeMap **notationMap) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMDocumentTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMDocumentType * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMDocumentType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMDocumentType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMDocumentType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMDocumentType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMDocumentType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMDocumentType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMDocumentType * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMDocumentType * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMDocumentType * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMDocumentType * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMDocumentType * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMDocumentType * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMDocumentType * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMDocumentType * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMDocumentType * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ BSTR *rootName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_entities )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **entityMap);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_notations )( 
            IXMLDOMDocumentType * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **notationMap);
        
        END_INTERFACE
    } IXMLDOMDocumentTypeVtbl;

    interface IXMLDOMDocumentType
    {
        CONST_VTBL struct IXMLDOMDocumentTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMDocumentType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMDocumentType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMDocumentType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMDocumentType_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMDocumentType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMDocumentType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMDocumentType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMDocumentType_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMDocumentType_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMDocumentType_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMDocumentType_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMDocumentType_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMDocumentType_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMDocumentType_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMDocumentType_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMDocumentType_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMDocumentType_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMDocumentType_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMDocumentType_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMDocumentType_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMDocumentType_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMDocumentType_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMDocumentType_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMDocumentType_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMDocumentType_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMDocumentType_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMDocumentType_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMDocumentType_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMDocumentType_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMDocumentType_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMDocumentType_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocumentType_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMDocumentType_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMDocumentType_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMDocumentType_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMDocumentType_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMDocumentType_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMDocumentType_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMDocumentType_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMDocumentType_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMDocumentType_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMDocumentType_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMDocumentType_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMDocumentType_get_name(This,rootName)	\
    ( (This)->lpVtbl -> get_name(This,rootName) ) 

#define IXMLDOMDocumentType_get_entities(This,entityMap)	\
    ( (This)->lpVtbl -> get_entities(This,entityMap) ) 

#define IXMLDOMDocumentType_get_notations(This,notationMap)	\
    ( (This)->lpVtbl -> get_notations(This,notationMap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMDocumentType_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMNotation_INTERFACE_DEFINED__
#define __IXMLDOMNotation_INTERFACE_DEFINED__

/* interface IXMLDOMNotation */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMNotation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8C-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_publicId( 
            /* [retval][out] */ VARIANT *publicID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_systemId( 
            /* [retval][out] */ VARIANT *systemID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMNotationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMNotation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMNotation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMNotation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMNotation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMNotation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMNotation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMNotation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMNotation * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMNotation * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMNotation * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMNotation * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMNotation * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMNotation * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMNotation * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMNotation * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMNotation * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_publicId )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ VARIANT *publicID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_systemId )( 
            IXMLDOMNotation * This,
            /* [retval][out] */ VARIANT *systemID);
        
        END_INTERFACE
    } IXMLDOMNotationVtbl;

    interface IXMLDOMNotation
    {
        CONST_VTBL struct IXMLDOMNotationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMNotation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMNotation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMNotation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMNotation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMNotation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMNotation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMNotation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMNotation_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMNotation_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMNotation_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMNotation_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMNotation_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMNotation_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMNotation_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMNotation_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMNotation_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMNotation_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMNotation_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMNotation_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMNotation_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMNotation_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMNotation_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMNotation_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMNotation_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMNotation_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMNotation_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMNotation_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMNotation_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMNotation_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMNotation_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMNotation_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMNotation_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMNotation_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMNotation_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMNotation_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMNotation_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMNotation_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMNotation_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMNotation_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMNotation_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMNotation_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMNotation_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMNotation_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMNotation_get_publicId(This,publicID)	\
    ( (This)->lpVtbl -> get_publicId(This,publicID) ) 

#define IXMLDOMNotation_get_systemId(This,systemID)	\
    ( (This)->lpVtbl -> get_systemId(This,systemID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMNotation_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMEntity_INTERFACE_DEFINED__
#define __IXMLDOMEntity_INTERFACE_DEFINED__

/* interface IXMLDOMEntity */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMEntity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8D-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_publicId( 
            /* [retval][out] */ VARIANT *publicID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_systemId( 
            /* [retval][out] */ VARIANT *systemID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_notationName( 
            /* [retval][out] */ BSTR *name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMEntityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMEntity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMEntity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMEntity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMEntity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMEntity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMEntity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMEntity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMEntity * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMEntity * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMEntity * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMEntity * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMEntity * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMEntity * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMEntity * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMEntity * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMEntity * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_publicId )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ VARIANT *publicID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_systemId )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ VARIANT *systemID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_notationName )( 
            IXMLDOMEntity * This,
            /* [retval][out] */ BSTR *name);
        
        END_INTERFACE
    } IXMLDOMEntityVtbl;

    interface IXMLDOMEntity
    {
        CONST_VTBL struct IXMLDOMEntityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMEntity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMEntity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMEntity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMEntity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMEntity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMEntity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMEntity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMEntity_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMEntity_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMEntity_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMEntity_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMEntity_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMEntity_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMEntity_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMEntity_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMEntity_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMEntity_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMEntity_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMEntity_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMEntity_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMEntity_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMEntity_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMEntity_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMEntity_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMEntity_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMEntity_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMEntity_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMEntity_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMEntity_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMEntity_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMEntity_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMEntity_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMEntity_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMEntity_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMEntity_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMEntity_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMEntity_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMEntity_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMEntity_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMEntity_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMEntity_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMEntity_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMEntity_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXMLDOMEntity_get_publicId(This,publicID)	\
    ( (This)->lpVtbl -> get_publicId(This,publicID) ) 

#define IXMLDOMEntity_get_systemId(This,systemID)	\
    ( (This)->lpVtbl -> get_systemId(This,systemID) ) 

#define IXMLDOMEntity_get_notationName(This,name)	\
    ( (This)->lpVtbl -> get_notationName(This,name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMEntity_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMEntityReference_INTERFACE_DEFINED__
#define __IXMLDOMEntityReference_INTERFACE_DEFINED__

/* interface IXMLDOMEntityReference */
/* [unique][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMEntityReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF8E-7B36-11d2-B20E-00C04F983E60")
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMEntityReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMEntityReference * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMEntityReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMEntityReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMEntityReference * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMEntityReference * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMEntityReference * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMEntityReference * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXMLDOMEntityReference * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXMLDOMEntityReference * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXMLDOMEntityReference * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXMLDOMEntityReference * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXMLDOMEntityReference * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXMLDOMEntityReference * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXMLDOMEntityReference * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXMLDOMEntityReference * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXMLDOMEntityReference * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXMLDOMEntityReference * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        END_INTERFACE
    } IXMLDOMEntityReferenceVtbl;

    interface IXMLDOMEntityReference
    {
        CONST_VTBL struct IXMLDOMEntityReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMEntityReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMEntityReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMEntityReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMEntityReference_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMEntityReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMEntityReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMEntityReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMEntityReference_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXMLDOMEntityReference_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXMLDOMEntityReference_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXMLDOMEntityReference_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXMLDOMEntityReference_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXMLDOMEntityReference_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXMLDOMEntityReference_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXMLDOMEntityReference_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXMLDOMEntityReference_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXMLDOMEntityReference_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXMLDOMEntityReference_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXMLDOMEntityReference_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXMLDOMEntityReference_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXMLDOMEntityReference_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXMLDOMEntityReference_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXMLDOMEntityReference_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXMLDOMEntityReference_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXMLDOMEntityReference_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXMLDOMEntityReference_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXMLDOMEntityReference_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXMLDOMEntityReference_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXMLDOMEntityReference_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXMLDOMEntityReference_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXMLDOMEntityReference_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMEntityReference_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXMLDOMEntityReference_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXMLDOMEntityReference_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXMLDOMEntityReference_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXMLDOMEntityReference_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXMLDOMEntityReference_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXMLDOMEntityReference_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXMLDOMEntityReference_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXMLDOMEntityReference_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXMLDOMEntityReference_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXMLDOMEntityReference_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXMLDOMEntityReference_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMEntityReference_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMParseError_INTERFACE_DEFINED__
#define __IXMLDOMParseError_INTERFACE_DEFINED__

/* interface IXMLDOMParseError */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMParseError;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3efaa426-272f-11d2-836f-0000f87a7782")
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_errorCode( 
            /* [out][retval] */ long *errorCode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_url( 
            /* [out][retval] */ BSTR *urlString) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_reason( 
            /* [out][retval] */ BSTR *reasonString) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_srcText( 
            /* [out][retval] */ BSTR *sourceString) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_line( 
            /* [out][retval] */ long *lineNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_linepos( 
            /* [out][retval] */ long *linePosition) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_filepos( 
            /* [out][retval] */ long *filePosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMParseErrorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMParseError * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMParseError * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMParseError * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMParseError * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMParseError * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMParseError * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMParseError * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_errorCode )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ long *errorCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_reason )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ BSTR *reasonString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_srcText )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ BSTR *sourceString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_line )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ long *lineNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_linepos )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ long *linePosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_filepos )( 
            IXMLDOMParseError * This,
            /* [out][retval] */ long *filePosition);
        
        END_INTERFACE
    } IXMLDOMParseErrorVtbl;

    interface IXMLDOMParseError
    {
        CONST_VTBL struct IXMLDOMParseErrorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMParseError_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMParseError_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMParseError_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMParseError_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMParseError_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMParseError_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMParseError_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMParseError_get_errorCode(This,errorCode)	\
    ( (This)->lpVtbl -> get_errorCode(This,errorCode) ) 

#define IXMLDOMParseError_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IXMLDOMParseError_get_reason(This,reasonString)	\
    ( (This)->lpVtbl -> get_reason(This,reasonString) ) 

#define IXMLDOMParseError_get_srcText(This,sourceString)	\
    ( (This)->lpVtbl -> get_srcText(This,sourceString) ) 

#define IXMLDOMParseError_get_line(This,lineNumber)	\
    ( (This)->lpVtbl -> get_line(This,lineNumber) ) 

#define IXMLDOMParseError_get_linepos(This,linePosition)	\
    ( (This)->lpVtbl -> get_linepos(This,linePosition) ) 

#define IXMLDOMParseError_get_filepos(This,filePosition)	\
    ( (This)->lpVtbl -> get_filepos(This,filePosition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMParseError_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMParseError2_INTERFACE_DEFINED__
#define __IXMLDOMParseError2_INTERFACE_DEFINED__

/* interface IXMLDOMParseError2 */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMParseError2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3efaa428-272f-11d2-836f-0000f87a7782")
    IXMLDOMParseError2 : public IXMLDOMParseError
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_errorXPath( 
            /* [retval][out] */ BSTR *xpathexpr) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_allErrors( 
            /* [retval][out] */ IXMLDOMParseErrorCollection **allErrors) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE errorParameters( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *param) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_errorParametersCount( 
            /* [retval][out] */ long *count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMParseError2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMParseError2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMParseError2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMParseError2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMParseError2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMParseError2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMParseError2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMParseError2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_errorCode )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ long *errorCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_reason )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ BSTR *reasonString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_srcText )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ BSTR *sourceString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_line )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ long *lineNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_linepos )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ long *linePosition);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_filepos )( 
            IXMLDOMParseError2 * This,
            /* [out][retval] */ long *filePosition);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_errorXPath )( 
            IXMLDOMParseError2 * This,
            /* [retval][out] */ BSTR *xpathexpr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_allErrors )( 
            IXMLDOMParseError2 * This,
            /* [retval][out] */ IXMLDOMParseErrorCollection **allErrors);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *errorParameters )( 
            IXMLDOMParseError2 * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *param);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_errorParametersCount )( 
            IXMLDOMParseError2 * This,
            /* [retval][out] */ long *count);
        
        END_INTERFACE
    } IXMLDOMParseError2Vtbl;

    interface IXMLDOMParseError2
    {
        CONST_VTBL struct IXMLDOMParseError2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMParseError2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMParseError2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMParseError2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMParseError2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMParseError2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMParseError2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMParseError2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMParseError2_get_errorCode(This,errorCode)	\
    ( (This)->lpVtbl -> get_errorCode(This,errorCode) ) 

#define IXMLDOMParseError2_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IXMLDOMParseError2_get_reason(This,reasonString)	\
    ( (This)->lpVtbl -> get_reason(This,reasonString) ) 

#define IXMLDOMParseError2_get_srcText(This,sourceString)	\
    ( (This)->lpVtbl -> get_srcText(This,sourceString) ) 

#define IXMLDOMParseError2_get_line(This,lineNumber)	\
    ( (This)->lpVtbl -> get_line(This,lineNumber) ) 

#define IXMLDOMParseError2_get_linepos(This,linePosition)	\
    ( (This)->lpVtbl -> get_linepos(This,linePosition) ) 

#define IXMLDOMParseError2_get_filepos(This,filePosition)	\
    ( (This)->lpVtbl -> get_filepos(This,filePosition) ) 


#define IXMLDOMParseError2_get_errorXPath(This,xpathexpr)	\
    ( (This)->lpVtbl -> get_errorXPath(This,xpathexpr) ) 

#define IXMLDOMParseError2_get_allErrors(This,allErrors)	\
    ( (This)->lpVtbl -> get_allErrors(This,allErrors) ) 

#define IXMLDOMParseError2_errorParameters(This,index,param)	\
    ( (This)->lpVtbl -> errorParameters(This,index,param) ) 

#define IXMLDOMParseError2_get_errorParametersCount(This,count)	\
    ( (This)->lpVtbl -> get_errorParametersCount(This,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMParseError2_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMParseErrorCollection_INTERFACE_DEFINED__
#define __IXMLDOMParseErrorCollection_INTERFACE_DEFINED__

/* interface IXMLDOMParseErrorCollection */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMParseErrorCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3efaa429-272f-11d2-836f-0000f87a7782")
    IXMLDOMParseErrorCollection : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_item( 
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMParseError2 **error) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ long *length) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_next( 
            /* [retval][out] */ IXMLDOMParseError2 **error) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [retval][out] */ IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMParseErrorCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMParseErrorCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMParseErrorCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMParseErrorCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMParseErrorCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMParseErrorCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMParseErrorCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMParseErrorCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_item )( 
            IXMLDOMParseErrorCollection * This,
            /* [in] */ long index,
            /* [retval][out] */ IXMLDOMParseError2 **error);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMParseErrorCollection * This,
            /* [retval][out] */ long *length);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_next )( 
            IXMLDOMParseErrorCollection * This,
            /* [retval][out] */ IXMLDOMParseError2 **error);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            IXMLDOMParseErrorCollection * This);
        
        /* [propget][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IXMLDOMParseErrorCollection * This,
            /* [retval][out] */ IUnknown **ppunk);
        
        END_INTERFACE
    } IXMLDOMParseErrorCollectionVtbl;

    interface IXMLDOMParseErrorCollection
    {
        CONST_VTBL struct IXMLDOMParseErrorCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMParseErrorCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMParseErrorCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMParseErrorCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMParseErrorCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMParseErrorCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMParseErrorCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMParseErrorCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMParseErrorCollection_get_item(This,index,error)	\
    ( (This)->lpVtbl -> get_item(This,index,error) ) 

#define IXMLDOMParseErrorCollection_get_length(This,length)	\
    ( (This)->lpVtbl -> get_length(This,length) ) 

#define IXMLDOMParseErrorCollection_get_next(This,error)	\
    ( (This)->lpVtbl -> get_next(This,error) ) 

#define IXMLDOMParseErrorCollection_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#define IXMLDOMParseErrorCollection_get__newEnum(This,ppunk)	\
    ( (This)->lpVtbl -> get__newEnum(This,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMParseErrorCollection_INTERFACE_DEFINED__ */


#ifndef __IXMLDOMSchemaCollection_INTERFACE_DEFINED__
#define __IXMLDOMSchemaCollection_INTERFACE_DEFINED__

/* interface IXMLDOMSchemaCollection */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXMLDOMSchemaCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("373984c8-b845-449b-91e7-45ac83036ade")
    IXMLDOMSchemaCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ VARIANT var) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE get( 
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **schemaNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ BSTR namespaceURI) = 0;
        
        virtual /* [propget][helpstring][id] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ long *length) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_namespaceURI( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *length) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE addCollection( 
            /* [in] */ IXMLDOMSchemaCollection *otherCollection) = 0;
        
        virtual /* [id][hidden][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLDOMSchemaCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLDOMSchemaCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLDOMSchemaCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLDOMSchemaCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ VARIANT var);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *get )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ BSTR namespaceURI,
            /* [retval][out] */ IXMLDOMNode **schemaNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ BSTR namespaceURI);
        
        /* [propget][helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IXMLDOMSchemaCollection * This,
            /* [retval][out] */ long *length);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *length);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *addCollection )( 
            IXMLDOMSchemaCollection * This,
            /* [in] */ IXMLDOMSchemaCollection *otherCollection);
        
        /* [id][hidden][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__newEnum )( 
            IXMLDOMSchemaCollection * This,
            /* [out][retval] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IXMLDOMSchemaCollectionVtbl;

    interface IXMLDOMSchemaCollection
    {
        CONST_VTBL struct IXMLDOMSchemaCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLDOMSchemaCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLDOMSchemaCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLDOMSchemaCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLDOMSchemaCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLDOMSchemaCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLDOMSchemaCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLDOMSchemaCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLDOMSchemaCollection_add(This,namespaceURI,var)	\
    ( (This)->lpVtbl -> add(This,namespaceURI,var) ) 

#define IXMLDOMSchemaCollection_get(This,namespaceURI,schemaNode)	\
    ( (This)->lpVtbl -> get(This,namespaceURI,schemaNode) ) 

#define IXMLDOMSchemaCollection_remove(This,namespaceURI)	\
    ( (This)->lpVtbl -> remove(This,namespaceURI) ) 

#define IXMLDOMSchemaCollection_get_length(This,length)	\
    ( (This)->lpVtbl -> get_length(This,length) ) 

#define IXMLDOMSchemaCollection_get_namespaceURI(This,index,length)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,index,length) ) 

#define IXMLDOMSchemaCollection_addCollection(This,otherCollection)	\
    ( (This)->lpVtbl -> addCollection(This,otherCollection) ) 

#define IXMLDOMSchemaCollection_get__newEnum(This,ppUnk)	\
    ( (This)->lpVtbl -> get__newEnum(This,ppUnk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLDOMSchemaCollection_INTERFACE_DEFINED__ */


#ifndef __IXTLRuntime_INTERFACE_DEFINED__
#define __IXTLRuntime_INTERFACE_DEFINED__

/* interface IXTLRuntime */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXTLRuntime;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3efaa425-272f-11d2-836f-0000f87a7782")
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE uniqueID( 
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pID) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE depth( 
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pDepth) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE childNumber( 
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ancestorChildNumber( 
            /* [in] */ BSTR bstrNodeName,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE absoluteChildNumber( 
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE formatIndex( 
            /* [in] */ long lIndex,
            /* [in] */ BSTR bstrFormat,
            /* [retval][out] */ BSTR *pbstrFormattedString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE formatNumber( 
            /* [in] */ double dblNumber,
            /* [in] */ BSTR bstrFormat,
            /* [retval][out] */ BSTR *pbstrFormattedString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE formatDate( 
            /* [in] */ VARIANT varDate,
            /* [in] */ BSTR bstrFormat,
            /* [optional][in] */ VARIANT varDestLocale,
            /* [retval][out] */ BSTR *pbstrFormattedString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE formatTime( 
            /* [in] */ VARIANT varTime,
            /* [in] */ BSTR bstrFormat,
            /* [optional][in] */ VARIANT varDestLocale,
            /* [retval][out] */ BSTR *pbstrFormattedString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXTLRuntimeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXTLRuntime * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXTLRuntime * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXTLRuntime * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXTLRuntime * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXTLRuntime * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXTLRuntime * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXTLRuntime * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IXTLRuntime * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IXTLRuntime * This,
            /* [retval][out] */ VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IXTLRuntime * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IXTLRuntime * This,
            /* [retval][out] */ DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [in] */ IXMLDOMNode *oldChild,
            /* [retval][out] */ IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *childNode,
            /* [retval][out] */ IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *newChild,
            /* [retval][out] */ IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IXTLRuntime * This,
            /* [retval][out] */ VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IXTLRuntime * This,
            /* [retval][out] */ IXMLDOMDocument **XMLDOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IXTLRuntime * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IXTLRuntime * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IXTLRuntime * This,
            /* [retval][out] */ VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IXTLRuntime * This,
            /* [out][retval] */ IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IXTLRuntime * This,
            /* [out][retval] */ VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IXTLRuntime * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IXTLRuntime * This,
            /* [out][retval] */ VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IXTLRuntime * This,
            /* [in] */ BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [out][retval] */ BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IXTLRuntime * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IXTLRuntime * This,
            /* [in] */ BSTR queryString,
            /* [out][retval] */ IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IXTLRuntime * This,
            /* [out][retval] */ VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IXTLRuntime * This,
            /* [out][retval] */ BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *uniqueID )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *depth )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pDepth);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *childNumber )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ancestorChildNumber )( 
            IXTLRuntime * This,
            /* [in] */ BSTR bstrNodeName,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *absoluteChildNumber )( 
            IXTLRuntime * This,
            /* [in] */ IXMLDOMNode *pNode,
            /* [retval][out] */ long *pNumber);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *formatIndex )( 
            IXTLRuntime * This,
            /* [in] */ long lIndex,
            /* [in] */ BSTR bstrFormat,
            /* [retval][out] */ BSTR *pbstrFormattedString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *formatNumber )( 
            IXTLRuntime * This,
            /* [in] */ double dblNumber,
            /* [in] */ BSTR bstrFormat,
            /* [retval][out] */ BSTR *pbstrFormattedString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *formatDate )( 
            IXTLRuntime * This,
            /* [in] */ VARIANT varDate,
            /* [in] */ BSTR bstrFormat,
            /* [optional][in] */ VARIANT varDestLocale,
            /* [retval][out] */ BSTR *pbstrFormattedString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *formatTime )( 
            IXTLRuntime * This,
            /* [in] */ VARIANT varTime,
            /* [in] */ BSTR bstrFormat,
            /* [optional][in] */ VARIANT varDestLocale,
            /* [retval][out] */ BSTR *pbstrFormattedString);
        
        END_INTERFACE
    } IXTLRuntimeVtbl;

    interface IXTLRuntime
    {
        CONST_VTBL struct IXTLRuntimeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXTLRuntime_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXTLRuntime_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXTLRuntime_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXTLRuntime_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXTLRuntime_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXTLRuntime_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXTLRuntime_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXTLRuntime_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IXTLRuntime_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IXTLRuntime_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IXTLRuntime_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IXTLRuntime_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IXTLRuntime_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IXTLRuntime_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IXTLRuntime_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IXTLRuntime_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IXTLRuntime_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IXTLRuntime_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IXTLRuntime_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IXTLRuntime_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IXTLRuntime_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IXTLRuntime_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IXTLRuntime_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IXTLRuntime_get_ownerDocument(This,XMLDOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,XMLDOMDocument) ) 

#define IXTLRuntime_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IXTLRuntime_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IXTLRuntime_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IXTLRuntime_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IXTLRuntime_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IXTLRuntime_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IXTLRuntime_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IXTLRuntime_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IXTLRuntime_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IXTLRuntime_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IXTLRuntime_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IXTLRuntime_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IXTLRuntime_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IXTLRuntime_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IXTLRuntime_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IXTLRuntime_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IXTLRuntime_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IXTLRuntime_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IXTLRuntime_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IXTLRuntime_uniqueID(This,pNode,pID)	\
    ( (This)->lpVtbl -> uniqueID(This,pNode,pID) ) 

#define IXTLRuntime_depth(This,pNode,pDepth)	\
    ( (This)->lpVtbl -> depth(This,pNode,pDepth) ) 

#define IXTLRuntime_childNumber(This,pNode,pNumber)	\
    ( (This)->lpVtbl -> childNumber(This,pNode,pNumber) ) 

#define IXTLRuntime_ancestorChildNumber(This,bstrNodeName,pNode,pNumber)	\
    ( (This)->lpVtbl -> ancestorChildNumber(This,bstrNodeName,pNode,pNumber) ) 

#define IXTLRuntime_absoluteChildNumber(This,pNode,pNumber)	\
    ( (This)->lpVtbl -> absoluteChildNumber(This,pNode,pNumber) ) 

#define IXTLRuntime_formatIndex(This,lIndex,bstrFormat,pbstrFormattedString)	\
    ( (This)->lpVtbl -> formatIndex(This,lIndex,bstrFormat,pbstrFormattedString) ) 

#define IXTLRuntime_formatNumber(This,dblNumber,bstrFormat,pbstrFormattedString)	\
    ( (This)->lpVtbl -> formatNumber(This,dblNumber,bstrFormat,pbstrFormattedString) ) 

#define IXTLRuntime_formatDate(This,varDate,bstrFormat,varDestLocale,pbstrFormattedString)	\
    ( (This)->lpVtbl -> formatDate(This,varDate,bstrFormat,varDestLocale,pbstrFormattedString) ) 

#define IXTLRuntime_formatTime(This,varTime,bstrFormat,varDestLocale,pbstrFormattedString)	\
    ( (This)->lpVtbl -> formatTime(This,varTime,bstrFormat,varDestLocale,pbstrFormattedString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXTLRuntime_INTERFACE_DEFINED__ */


#ifndef __IXSLTemplate_INTERFACE_DEFINED__
#define __IXSLTemplate_INTERFACE_DEFINED__

/* interface IXSLTemplate */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXSLTemplate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF93-7B36-11d2-B20E-00C04F983E60")
    IXSLTemplate : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_stylesheet( 
            /* [in] */ IXMLDOMNode *stylesheet) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_stylesheet( 
            /* [retval][out] */ IXMLDOMNode **stylesheet) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createProcessor( 
            /* [retval][out] */ IXSLProcessor **ppProcessor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXSLTemplateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXSLTemplate * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXSLTemplate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXSLTemplate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXSLTemplate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXSLTemplate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXSLTemplate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXSLTemplate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_stylesheet )( 
            IXSLTemplate * This,
            /* [in] */ IXMLDOMNode *stylesheet);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_stylesheet )( 
            IXSLTemplate * This,
            /* [retval][out] */ IXMLDOMNode **stylesheet);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createProcessor )( 
            IXSLTemplate * This,
            /* [retval][out] */ IXSLProcessor **ppProcessor);
        
        END_INTERFACE
    } IXSLTemplateVtbl;

    interface IXSLTemplate
    {
        CONST_VTBL struct IXSLTemplateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXSLTemplate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXSLTemplate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXSLTemplate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXSLTemplate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXSLTemplate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXSLTemplate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXSLTemplate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXSLTemplate_putref_stylesheet(This,stylesheet)	\
    ( (This)->lpVtbl -> putref_stylesheet(This,stylesheet) ) 

#define IXSLTemplate_get_stylesheet(This,stylesheet)	\
    ( (This)->lpVtbl -> get_stylesheet(This,stylesheet) ) 

#define IXSLTemplate_createProcessor(This,ppProcessor)	\
    ( (This)->lpVtbl -> createProcessor(This,ppProcessor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXSLTemplate_INTERFACE_DEFINED__ */


#ifndef __IXSLProcessor_INTERFACE_DEFINED__
#define __IXSLProcessor_INTERFACE_DEFINED__

/* interface IXSLProcessor */
/* [unique][helpstring][nonextensible][oleautomation][dual][uuid][object][local] */ 


EXTERN_C const IID IID_IXSLProcessor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2933BF92-7B36-11d2-B20E-00C04F983E60")
    IXSLProcessor : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_input( 
            /* [in] */ VARIANT var) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_input( 
            /* [retval][out] */ VARIANT *pVar) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ownerTemplate( 
            /* [retval][out] */ IXSLTemplate **ppTemplate) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setStartMode( 
            /* [in] */ BSTR mode,
            /* [defaultvalue][in] */ BSTR namespaceURI = L"") = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_startMode( 
            /* [retval][out] */ BSTR *mode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_startModeURI( 
            /* [retval][out] */ BSTR *namespaceURI) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_output( 
            /* [in] */ VARIANT output) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_output( 
            /* [retval][out] */ VARIANT *pOutput) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE transform( 
            /* [retval][out] */ VARIANT_BOOL *pDone) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [retval][out] */ long *pReadyState) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE addParameter( 
            /* [in] */ BSTR baseName,
            /* [in] */ VARIANT parameter,
            /* [defaultvalue][in] */ BSTR namespaceURI = L"") = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE addObject( 
            /* [in] */ IDispatch *obj,
            /* [in] */ BSTR namespaceURI) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_stylesheet( 
            /* [retval][out] */ IXMLDOMNode **stylesheet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXSLProcessorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXSLProcessor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXSLProcessor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXSLProcessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXSLProcessor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXSLProcessor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXSLProcessor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXSLProcessor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_input )( 
            IXSLProcessor * This,
            /* [in] */ VARIANT var);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_input )( 
            IXSLProcessor * This,
            /* [retval][out] */ VARIANT *pVar);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerTemplate )( 
            IXSLProcessor * This,
            /* [retval][out] */ IXSLTemplate **ppTemplate);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setStartMode )( 
            IXSLProcessor * This,
            /* [in] */ BSTR mode,
            /* [defaultvalue][in] */ BSTR namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_startMode )( 
            IXSLProcessor * This,
            /* [retval][out] */ BSTR *mode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_startModeURI )( 
            IXSLProcessor * This,
            /* [retval][out] */ BSTR *namespaceURI);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_output )( 
            IXSLProcessor * This,
            /* [in] */ VARIANT output);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_output )( 
            IXSLProcessor * This,
            /* [retval][out] */ VARIANT *pOutput);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transform )( 
            IXSLProcessor * This,
            /* [retval][out] */ VARIANT_BOOL *pDone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *reset )( 
            IXSLProcessor * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IXSLProcessor * This,
            /* [retval][out] */ long *pReadyState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *addParameter )( 
            IXSLProcessor * This,
            /* [in] */ BSTR baseName,
            /* [in] */ VARIANT parameter,
            /* [defaultvalue][in] */ BSTR namespaceURI);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *addObject )( 
            IXSLProcessor * This,
            /* [in] */ IDispatch *obj,
            /* [in] */ BSTR namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_stylesheet )( 
            IXSLProcessor * This,
            /* [retval][out] */ IXMLDOMNode **stylesheet);
        
        END_INTERFACE
    } IXSLProcessorVtbl;

    interface IXSLProcessor
    {
        CONST_VTBL struct IXSLProcessorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXSLProcessor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXSLProcessor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXSLProcessor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXSLProcessor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXSLProcessor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXSLProcessor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXSLProcessor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXSLProcessor_put_input(This,var)	\
    ( (This)->lpVtbl -> put_input(This,var) ) 

#define IXSLProcessor_get_input(This,pVar)	\
    ( (This)->lpVtbl -> get_input(This,pVar) ) 

#define IXSLProcessor_get_ownerTemplate(This,ppTemplate)	\
    ( (This)->lpVtbl -> get_ownerTemplate(This,ppTemplate) ) 

#define IXSLProcessor_setStartMode(This,mode,namespaceURI)	\
    ( (This)->lpVtbl -> setStartMode(This,mode,namespaceURI) ) 

#define IXSLProcessor_get_startMode(This,mode)	\
    ( (This)->lpVtbl -> get_startMode(This,mode) ) 

#define IXSLProcessor_get_startModeURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_startModeURI(This,namespaceURI) ) 

#define IXSLProcessor_put_output(This,output)	\
    ( (This)->lpVtbl -> put_output(This,output) ) 

#define IXSLProcessor_get_output(This,pOutput)	\
    ( (This)->lpVtbl -> get_output(This,pOutput) ) 

#define IXSLProcessor_transform(This,pDone)	\
    ( (This)->lpVtbl -> transform(This,pDone) ) 

#define IXSLProcessor_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#define IXSLProcessor_get_readyState(This,pReadyState)	\
    ( (This)->lpVtbl -> get_readyState(This,pReadyState) ) 

#define IXSLProcessor_addParameter(This,baseName,parameter,namespaceURI)	\
    ( (This)->lpVtbl -> addParameter(This,baseName,parameter,namespaceURI) ) 

#define IXSLProcessor_addObject(This,obj,namespaceURI)	\
    ( (This)->lpVtbl -> addObject(This,obj,namespaceURI) ) 

#define IXSLProcessor_get_stylesheet(This,stylesheet)	\
    ( (This)->lpVtbl -> get_stylesheet(This,stylesheet) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXSLProcessor_INTERFACE_DEFINED__ */


#ifndef __ISAXXMLReader_INTERFACE_DEFINED__
#define __ISAXXMLReader_INTERFACE_DEFINED__

/* interface ISAXXMLReader */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXXMLReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a4f96ed0-f829-476e-81c0-cdc7bd2a0802")
    ISAXXMLReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getFeature( 
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT_BOOL *pvfValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putFeature( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT_BOOL vfValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getProperty( 
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putProperty( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT varValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getEntityResolver( 
            /* [retval][out] */ ISAXEntityResolver **ppResolver) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putEntityResolver( 
            /* [in] */ ISAXEntityResolver *pResolver) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getContentHandler( 
            /* [retval][out] */ ISAXContentHandler **ppHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putContentHandler( 
            /* [in] */ ISAXContentHandler *pHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getDTDHandler( 
            /* [retval][out] */ ISAXDTDHandler **ppHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putDTDHandler( 
            /* [in] */ ISAXDTDHandler *pHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getErrorHandler( 
            /* [retval][out] */ ISAXErrorHandler **ppHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putErrorHandler( 
            /* [in] */ ISAXErrorHandler *pHandler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getBaseURL( 
            /* [retval][out] */ const wchar_t **ppwchBaseUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putBaseURL( 
            /* [in] */ const wchar_t *pwchBaseUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getSecureBaseURL( 
            /* [retval][out] */ const wchar_t **ppwchSecureBaseUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putSecureBaseURL( 
            /* [in] */ const wchar_t *pwchSecureBaseUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parse( 
            /* [optional][in] */ VARIANT varInput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parseURL( 
            /* [in] */ const wchar_t *pwchUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXXMLReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXXMLReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXXMLReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXXMLReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *getFeature )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT_BOOL *pvfValue);
        
        HRESULT ( STDMETHODCALLTYPE *putFeature )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT_BOOL vfValue);
        
        HRESULT ( STDMETHODCALLTYPE *getProperty )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *putProperty )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT varValue);
        
        HRESULT ( STDMETHODCALLTYPE *getEntityResolver )( 
            ISAXXMLReader * This,
            /* [retval][out] */ ISAXEntityResolver **ppResolver);
        
        HRESULT ( STDMETHODCALLTYPE *putEntityResolver )( 
            ISAXXMLReader * This,
            /* [in] */ ISAXEntityResolver *pResolver);
        
        HRESULT ( STDMETHODCALLTYPE *getContentHandler )( 
            ISAXXMLReader * This,
            /* [retval][out] */ ISAXContentHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putContentHandler )( 
            ISAXXMLReader * This,
            /* [in] */ ISAXContentHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getDTDHandler )( 
            ISAXXMLReader * This,
            /* [retval][out] */ ISAXDTDHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putDTDHandler )( 
            ISAXXMLReader * This,
            /* [in] */ ISAXDTDHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getErrorHandler )( 
            ISAXXMLReader * This,
            /* [retval][out] */ ISAXErrorHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putErrorHandler )( 
            ISAXXMLReader * This,
            /* [in] */ ISAXErrorHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getBaseURL )( 
            ISAXXMLReader * This,
            /* [retval][out] */ const wchar_t **ppwchBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *putBaseURL )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *getSecureBaseURL )( 
            ISAXXMLReader * This,
            /* [retval][out] */ const wchar_t **ppwchSecureBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *putSecureBaseURL )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchSecureBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *parse )( 
            ISAXXMLReader * This,
            /* [optional][in] */ VARIANT varInput);
        
        HRESULT ( STDMETHODCALLTYPE *parseURL )( 
            ISAXXMLReader * This,
            /* [in] */ const wchar_t *pwchUrl);
        
        END_INTERFACE
    } ISAXXMLReaderVtbl;

    interface ISAXXMLReader
    {
        CONST_VTBL struct ISAXXMLReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXXMLReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXXMLReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXXMLReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXXMLReader_getFeature(This,pwchName,pvfValue)	\
    ( (This)->lpVtbl -> getFeature(This,pwchName,pvfValue) ) 

#define ISAXXMLReader_putFeature(This,pwchName,vfValue)	\
    ( (This)->lpVtbl -> putFeature(This,pwchName,vfValue) ) 

#define ISAXXMLReader_getProperty(This,pwchName,pvarValue)	\
    ( (This)->lpVtbl -> getProperty(This,pwchName,pvarValue) ) 

#define ISAXXMLReader_putProperty(This,pwchName,varValue)	\
    ( (This)->lpVtbl -> putProperty(This,pwchName,varValue) ) 

#define ISAXXMLReader_getEntityResolver(This,ppResolver)	\
    ( (This)->lpVtbl -> getEntityResolver(This,ppResolver) ) 

#define ISAXXMLReader_putEntityResolver(This,pResolver)	\
    ( (This)->lpVtbl -> putEntityResolver(This,pResolver) ) 

#define ISAXXMLReader_getContentHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getContentHandler(This,ppHandler) ) 

#define ISAXXMLReader_putContentHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putContentHandler(This,pHandler) ) 

#define ISAXXMLReader_getDTDHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getDTDHandler(This,ppHandler) ) 

#define ISAXXMLReader_putDTDHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putDTDHandler(This,pHandler) ) 

#define ISAXXMLReader_getErrorHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getErrorHandler(This,ppHandler) ) 

#define ISAXXMLReader_putErrorHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putErrorHandler(This,pHandler) ) 

#define ISAXXMLReader_getBaseURL(This,ppwchBaseUrl)	\
    ( (This)->lpVtbl -> getBaseURL(This,ppwchBaseUrl) ) 

#define ISAXXMLReader_putBaseURL(This,pwchBaseUrl)	\
    ( (This)->lpVtbl -> putBaseURL(This,pwchBaseUrl) ) 

#define ISAXXMLReader_getSecureBaseURL(This,ppwchSecureBaseUrl)	\
    ( (This)->lpVtbl -> getSecureBaseURL(This,ppwchSecureBaseUrl) ) 

#define ISAXXMLReader_putSecureBaseURL(This,pwchSecureBaseUrl)	\
    ( (This)->lpVtbl -> putSecureBaseURL(This,pwchSecureBaseUrl) ) 

#define ISAXXMLReader_parse(This,varInput)	\
    ( (This)->lpVtbl -> parse(This,varInput) ) 

#define ISAXXMLReader_parseURL(This,pwchUrl)	\
    ( (This)->lpVtbl -> parseURL(This,pwchUrl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXXMLReader_INTERFACE_DEFINED__ */


#ifndef __ISAXXMLFilter_INTERFACE_DEFINED__
#define __ISAXXMLFilter_INTERFACE_DEFINED__

/* interface ISAXXMLFilter */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXXMLFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70409222-ca09-4475-acb8-40312fe8d145")
    ISAXXMLFilter : public ISAXXMLReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getParent( 
            /* [retval][out] */ ISAXXMLReader **ppReader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE putParent( 
            /* [in] */ ISAXXMLReader *pReader) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXXMLFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXXMLFilter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXXMLFilter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXXMLFilter * This);
        
        HRESULT ( STDMETHODCALLTYPE *getFeature )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT_BOOL *pvfValue);
        
        HRESULT ( STDMETHODCALLTYPE *putFeature )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT_BOOL vfValue);
        
        HRESULT ( STDMETHODCALLTYPE *getProperty )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchName,
            /* [retval][out] */ VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *putProperty )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ VARIANT varValue);
        
        HRESULT ( STDMETHODCALLTYPE *getEntityResolver )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ ISAXEntityResolver **ppResolver);
        
        HRESULT ( STDMETHODCALLTYPE *putEntityResolver )( 
            ISAXXMLFilter * This,
            /* [in] */ ISAXEntityResolver *pResolver);
        
        HRESULT ( STDMETHODCALLTYPE *getContentHandler )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ ISAXContentHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putContentHandler )( 
            ISAXXMLFilter * This,
            /* [in] */ ISAXContentHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getDTDHandler )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ ISAXDTDHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putDTDHandler )( 
            ISAXXMLFilter * This,
            /* [in] */ ISAXDTDHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getErrorHandler )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ ISAXErrorHandler **ppHandler);
        
        HRESULT ( STDMETHODCALLTYPE *putErrorHandler )( 
            ISAXXMLFilter * This,
            /* [in] */ ISAXErrorHandler *pHandler);
        
        HRESULT ( STDMETHODCALLTYPE *getBaseURL )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ const wchar_t **ppwchBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *putBaseURL )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *getSecureBaseURL )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ const wchar_t **ppwchSecureBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *putSecureBaseURL )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchSecureBaseUrl);
        
        HRESULT ( STDMETHODCALLTYPE *parse )( 
            ISAXXMLFilter * This,
            /* [optional][in] */ VARIANT varInput);
        
        HRESULT ( STDMETHODCALLTYPE *parseURL )( 
            ISAXXMLFilter * This,
            /* [in] */ const wchar_t *pwchUrl);
        
        HRESULT ( STDMETHODCALLTYPE *getParent )( 
            ISAXXMLFilter * This,
            /* [retval][out] */ ISAXXMLReader **ppReader);
        
        HRESULT ( STDMETHODCALLTYPE *putParent )( 
            ISAXXMLFilter * This,
            /* [in] */ ISAXXMLReader *pReader);
        
        END_INTERFACE
    } ISAXXMLFilterVtbl;

    interface ISAXXMLFilter
    {
        CONST_VTBL struct ISAXXMLFilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXXMLFilter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXXMLFilter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXXMLFilter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXXMLFilter_getFeature(This,pwchName,pvfValue)	\
    ( (This)->lpVtbl -> getFeature(This,pwchName,pvfValue) ) 

#define ISAXXMLFilter_putFeature(This,pwchName,vfValue)	\
    ( (This)->lpVtbl -> putFeature(This,pwchName,vfValue) ) 

#define ISAXXMLFilter_getProperty(This,pwchName,pvarValue)	\
    ( (This)->lpVtbl -> getProperty(This,pwchName,pvarValue) ) 

#define ISAXXMLFilter_putProperty(This,pwchName,varValue)	\
    ( (This)->lpVtbl -> putProperty(This,pwchName,varValue) ) 

#define ISAXXMLFilter_getEntityResolver(This,ppResolver)	\
    ( (This)->lpVtbl -> getEntityResolver(This,ppResolver) ) 

#define ISAXXMLFilter_putEntityResolver(This,pResolver)	\
    ( (This)->lpVtbl -> putEntityResolver(This,pResolver) ) 

#define ISAXXMLFilter_getContentHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getContentHandler(This,ppHandler) ) 

#define ISAXXMLFilter_putContentHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putContentHandler(This,pHandler) ) 

#define ISAXXMLFilter_getDTDHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getDTDHandler(This,ppHandler) ) 

#define ISAXXMLFilter_putDTDHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putDTDHandler(This,pHandler) ) 

#define ISAXXMLFilter_getErrorHandler(This,ppHandler)	\
    ( (This)->lpVtbl -> getErrorHandler(This,ppHandler) ) 

#define ISAXXMLFilter_putErrorHandler(This,pHandler)	\
    ( (This)->lpVtbl -> putErrorHandler(This,pHandler) ) 

#define ISAXXMLFilter_getBaseURL(This,ppwchBaseUrl)	\
    ( (This)->lpVtbl -> getBaseURL(This,ppwchBaseUrl) ) 

#define ISAXXMLFilter_putBaseURL(This,pwchBaseUrl)	\
    ( (This)->lpVtbl -> putBaseURL(This,pwchBaseUrl) ) 

#define ISAXXMLFilter_getSecureBaseURL(This,ppwchSecureBaseUrl)	\
    ( (This)->lpVtbl -> getSecureBaseURL(This,ppwchSecureBaseUrl) ) 

#define ISAXXMLFilter_putSecureBaseURL(This,pwchSecureBaseUrl)	\
    ( (This)->lpVtbl -> putSecureBaseURL(This,pwchSecureBaseUrl) ) 

#define ISAXXMLFilter_parse(This,varInput)	\
    ( (This)->lpVtbl -> parse(This,varInput) ) 

#define ISAXXMLFilter_parseURL(This,pwchUrl)	\
    ( (This)->lpVtbl -> parseURL(This,pwchUrl) ) 


#define ISAXXMLFilter_getParent(This,ppReader)	\
    ( (This)->lpVtbl -> getParent(This,ppReader) ) 

#define ISAXXMLFilter_putParent(This,pReader)	\
    ( (This)->lpVtbl -> putParent(This,pReader) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXXMLFilter_INTERFACE_DEFINED__ */


#ifndef __ISAXLocator_INTERFACE_DEFINED__
#define __ISAXLocator_INTERFACE_DEFINED__

/* interface ISAXLocator */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXLocator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9b7e472a-0de4-4640-bff3-84d38a051c31")
    ISAXLocator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getColumnNumber( 
            /* [retval][out] */ int *pnColumn) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getLineNumber( 
            /* [retval][out] */ int *pnLine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getPublicId( 
            /* [retval][out] */ const wchar_t **ppwchPublicId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getSystemId( 
            /* [retval][out] */ const wchar_t **ppwchSystemId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXLocatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXLocator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXLocator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXLocator * This);
        
        HRESULT ( STDMETHODCALLTYPE *getColumnNumber )( 
            ISAXLocator * This,
            /* [retval][out] */ int *pnColumn);
        
        HRESULT ( STDMETHODCALLTYPE *getLineNumber )( 
            ISAXLocator * This,
            /* [retval][out] */ int *pnLine);
        
        HRESULT ( STDMETHODCALLTYPE *getPublicId )( 
            ISAXLocator * This,
            /* [retval][out] */ const wchar_t **ppwchPublicId);
        
        HRESULT ( STDMETHODCALLTYPE *getSystemId )( 
            ISAXLocator * This,
            /* [retval][out] */ const wchar_t **ppwchSystemId);
        
        END_INTERFACE
    } ISAXLocatorVtbl;

    interface ISAXLocator
    {
        CONST_VTBL struct ISAXLocatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXLocator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXLocator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXLocator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXLocator_getColumnNumber(This,pnColumn)	\
    ( (This)->lpVtbl -> getColumnNumber(This,pnColumn) ) 

#define ISAXLocator_getLineNumber(This,pnLine)	\
    ( (This)->lpVtbl -> getLineNumber(This,pnLine) ) 

#define ISAXLocator_getPublicId(This,ppwchPublicId)	\
    ( (This)->lpVtbl -> getPublicId(This,ppwchPublicId) ) 

#define ISAXLocator_getSystemId(This,ppwchSystemId)	\
    ( (This)->lpVtbl -> getSystemId(This,ppwchSystemId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXLocator_INTERFACE_DEFINED__ */


#ifndef __ISAXEntityResolver_INTERFACE_DEFINED__
#define __ISAXEntityResolver_INTERFACE_DEFINED__

/* interface ISAXEntityResolver */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXEntityResolver;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07")
    ISAXEntityResolver : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE resolveEntity( 
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [retval][out] */ VARIANT *pvarInput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXEntityResolverVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXEntityResolver * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXEntityResolver * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXEntityResolver * This);
        
        HRESULT ( STDMETHODCALLTYPE *resolveEntity )( 
            ISAXEntityResolver * This,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [retval][out] */ VARIANT *pvarInput);
        
        END_INTERFACE
    } ISAXEntityResolverVtbl;

    interface ISAXEntityResolver
    {
        CONST_VTBL struct ISAXEntityResolverVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXEntityResolver_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXEntityResolver_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXEntityResolver_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXEntityResolver_resolveEntity(This,pwchPublicId,pwchSystemId,pvarInput)	\
    ( (This)->lpVtbl -> resolveEntity(This,pwchPublicId,pwchSystemId,pvarInput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXEntityResolver_INTERFACE_DEFINED__ */


#ifndef __ISAXContentHandler_INTERFACE_DEFINED__
#define __ISAXContentHandler_INTERFACE_DEFINED__

/* interface ISAXContentHandler */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXContentHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44")
    ISAXContentHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE putDocumentLocator( 
            /* [in] */ ISAXLocator *pLocator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startDocument( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endDocument( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startPrefixMapping( 
            /* [in] */ const wchar_t *pwchPrefix,
            /* [in] */ int cchPrefix,
            /* [in] */ const wchar_t *pwchUri,
            /* [in] */ int cchUri) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endPrefixMapping( 
            /* [in] */ const wchar_t *pwchPrefix,
            /* [in] */ int cchPrefix) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startElement( 
            /* [in] */ const wchar_t *pwchNamespaceUri,
            /* [in] */ int cchNamespaceUri,
            /* [in] */ const wchar_t *pwchLocalName,
            /* [in] */ int cchLocalName,
            /* [in] */ const wchar_t *pwchQName,
            /* [in] */ int cchQName,
            /* [in] */ ISAXAttributes *pAttributes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endElement( 
            /* [in] */ const wchar_t *pwchNamespaceUri,
            /* [in] */ int cchNamespaceUri,
            /* [in] */ const wchar_t *pwchLocalName,
            /* [in] */ int cchLocalName,
            /* [in] */ const wchar_t *pwchQName,
            /* [in] */ int cchQName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE characters( 
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ignorableWhitespace( 
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE processingInstruction( 
            /* [in] */ const wchar_t *pwchTarget,
            /* [in] */ int cchTarget,
            /* [in] */ const wchar_t *pwchData,
            /* [in] */ int cchData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE skippedEntity( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXContentHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXContentHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXContentHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXContentHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *putDocumentLocator )( 
            ISAXContentHandler * This,
            /* [in] */ ISAXLocator *pLocator);
        
        HRESULT ( STDMETHODCALLTYPE *startDocument )( 
            ISAXContentHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *endDocument )( 
            ISAXContentHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *startPrefixMapping )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchPrefix,
            /* [in] */ int cchPrefix,
            /* [in] */ const wchar_t *pwchUri,
            /* [in] */ int cchUri);
        
        HRESULT ( STDMETHODCALLTYPE *endPrefixMapping )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchPrefix,
            /* [in] */ int cchPrefix);
        
        HRESULT ( STDMETHODCALLTYPE *startElement )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchNamespaceUri,
            /* [in] */ int cchNamespaceUri,
            /* [in] */ const wchar_t *pwchLocalName,
            /* [in] */ int cchLocalName,
            /* [in] */ const wchar_t *pwchQName,
            /* [in] */ int cchQName,
            /* [in] */ ISAXAttributes *pAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *endElement )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchNamespaceUri,
            /* [in] */ int cchNamespaceUri,
            /* [in] */ const wchar_t *pwchLocalName,
            /* [in] */ int cchLocalName,
            /* [in] */ const wchar_t *pwchQName,
            /* [in] */ int cchQName);
        
        HRESULT ( STDMETHODCALLTYPE *characters )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars);
        
        HRESULT ( STDMETHODCALLTYPE *ignorableWhitespace )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars);
        
        HRESULT ( STDMETHODCALLTYPE *processingInstruction )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchTarget,
            /* [in] */ int cchTarget,
            /* [in] */ const wchar_t *pwchData,
            /* [in] */ int cchData);
        
        HRESULT ( STDMETHODCALLTYPE *skippedEntity )( 
            ISAXContentHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName);
        
        END_INTERFACE
    } ISAXContentHandlerVtbl;

    interface ISAXContentHandler
    {
        CONST_VTBL struct ISAXContentHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXContentHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXContentHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXContentHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXContentHandler_putDocumentLocator(This,pLocator)	\
    ( (This)->lpVtbl -> putDocumentLocator(This,pLocator) ) 

#define ISAXContentHandler_startDocument(This)	\
    ( (This)->lpVtbl -> startDocument(This) ) 

#define ISAXContentHandler_endDocument(This)	\
    ( (This)->lpVtbl -> endDocument(This) ) 

#define ISAXContentHandler_startPrefixMapping(This,pwchPrefix,cchPrefix,pwchUri,cchUri)	\
    ( (This)->lpVtbl -> startPrefixMapping(This,pwchPrefix,cchPrefix,pwchUri,cchUri) ) 

#define ISAXContentHandler_endPrefixMapping(This,pwchPrefix,cchPrefix)	\
    ( (This)->lpVtbl -> endPrefixMapping(This,pwchPrefix,cchPrefix) ) 

#define ISAXContentHandler_startElement(This,pwchNamespaceUri,cchNamespaceUri,pwchLocalName,cchLocalName,pwchQName,cchQName,pAttributes)	\
    ( (This)->lpVtbl -> startElement(This,pwchNamespaceUri,cchNamespaceUri,pwchLocalName,cchLocalName,pwchQName,cchQName,pAttributes) ) 

#define ISAXContentHandler_endElement(This,pwchNamespaceUri,cchNamespaceUri,pwchLocalName,cchLocalName,pwchQName,cchQName)	\
    ( (This)->lpVtbl -> endElement(This,pwchNamespaceUri,cchNamespaceUri,pwchLocalName,cchLocalName,pwchQName,cchQName) ) 

#define ISAXContentHandler_characters(This,pwchChars,cchChars)	\
    ( (This)->lpVtbl -> characters(This,pwchChars,cchChars) ) 

#define ISAXContentHandler_ignorableWhitespace(This,pwchChars,cchChars)	\
    ( (This)->lpVtbl -> ignorableWhitespace(This,pwchChars,cchChars) ) 

#define ISAXContentHandler_processingInstruction(This,pwchTarget,cchTarget,pwchData,cchData)	\
    ( (This)->lpVtbl -> processingInstruction(This,pwchTarget,cchTarget,pwchData,cchData) ) 

#define ISAXContentHandler_skippedEntity(This,pwchName,cchName)	\
    ( (This)->lpVtbl -> skippedEntity(This,pwchName,cchName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXContentHandler_INTERFACE_DEFINED__ */


#ifndef __ISAXDTDHandler_INTERFACE_DEFINED__
#define __ISAXDTDHandler_INTERFACE_DEFINED__

/* interface ISAXDTDHandler */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXDTDHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e15c1baf-afb3-4d60-8c36-19a8c45defed")
    ISAXDTDHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE notationDecl( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unparsedEntityDecl( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId,
            /* [in] */ const wchar_t *pwchNotationName,
            /* [in] */ int cchNotationName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXDTDHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXDTDHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXDTDHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXDTDHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *notationDecl )( 
            ISAXDTDHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId);
        
        HRESULT ( STDMETHODCALLTYPE *unparsedEntityDecl )( 
            ISAXDTDHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId,
            /* [in] */ const wchar_t *pwchNotationName,
            /* [in] */ int cchNotationName);
        
        END_INTERFACE
    } ISAXDTDHandlerVtbl;

    interface ISAXDTDHandler
    {
        CONST_VTBL struct ISAXDTDHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXDTDHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXDTDHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXDTDHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXDTDHandler_notationDecl(This,pwchName,cchName,pwchPublicId,cchPublicId,pwchSystemId,cchSystemId)	\
    ( (This)->lpVtbl -> notationDecl(This,pwchName,cchName,pwchPublicId,cchPublicId,pwchSystemId,cchSystemId) ) 

#define ISAXDTDHandler_unparsedEntityDecl(This,pwchName,cchName,pwchPublicId,cchPublicId,pwchSystemId,cchSystemId,pwchNotationName,cchNotationName)	\
    ( (This)->lpVtbl -> unparsedEntityDecl(This,pwchName,cchName,pwchPublicId,cchPublicId,pwchSystemId,cchSystemId,pwchNotationName,cchNotationName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXDTDHandler_INTERFACE_DEFINED__ */


#ifndef __ISAXErrorHandler_INTERFACE_DEFINED__
#define __ISAXErrorHandler_INTERFACE_DEFINED__

/* interface ISAXErrorHandler */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXErrorHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a60511c4-ccf5-479e-98a3-dc8dc545b7d0")
    ISAXErrorHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE error( 
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fatalError( 
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ignorableWarning( 
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXErrorHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXErrorHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXErrorHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXErrorHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *error )( 
            ISAXErrorHandler * This,
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode);
        
        HRESULT ( STDMETHODCALLTYPE *fatalError )( 
            ISAXErrorHandler * This,
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode);
        
        HRESULT ( STDMETHODCALLTYPE *ignorableWarning )( 
            ISAXErrorHandler * This,
            /* [in] */ ISAXLocator *pLocator,
            /* [in] */ const wchar_t *pwchErrorMessage,
            /* [in] */ HRESULT hrErrorCode);
        
        END_INTERFACE
    } ISAXErrorHandlerVtbl;

    interface ISAXErrorHandler
    {
        CONST_VTBL struct ISAXErrorHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISAXErrorHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISAXErrorHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISAXErrorHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISAXErrorHandler_error(This,pLocator,pwchErrorMessage,hrErrorCode)	\
    ( (This)->lpVtbl -> error(This,pLocator,pwchErrorMessage,hrErrorCode) ) 

#define ISAXErrorHandler_fatalError(This,pLocator,pwchErrorMessage,hrErrorCode)	\
    ( (This)->lpVtbl -> fatalError(This,pLocator,pwchErrorMessage,hrErrorCode) ) 

#define ISAXErrorHandler_ignorableWarning(This,pLocator,pwchErrorMessage,hrErrorCode)	\
    ( (This)->lpVtbl -> ignorableWarning(This,pLocator,pwchErrorMessage,hrErrorCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISAXErrorHandler_INTERFACE_DEFINED__ */


#ifndef __ISAXLexicalHandler_INTERFACE_DEFINED__
#define __ISAXLexicalHandler_INTERFACE_DEFINED__

/* interface ISAXLexicalHandler */
/* [unique][helpstring][uuid][local][object][hidden] */ 


EXTERN_C const IID IID_ISAXLexicalHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f85d5f5-47a8-4497-bda5-84ba04819ea6")
    ISAXLexicalHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE startDTD( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endDTD( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startEntity( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endEntity( 
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startCDATA( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endCDATA( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE comment( 
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISAXLexicalHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISAXLexicalHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISAXLexicalHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISAXLexicalHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *startDTD )( 
            ISAXLexicalHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName,
            /* [in] */ const wchar_t *pwchPublicId,
            /* [in] */ int cchPublicId,
            /* [in] */ const wchar_t *pwchSystemId,
            /* [in] */ int cchSystemId);
        
        HRESULT ( STDMETHODCALLTYPE *endDTD )( 
            ISAXLexicalHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *startEntity )( 
            ISAXLexicalHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName);
        
        HRESULT ( STDMETHODCALLTYPE *endEntity )( 
            ISAXLexicalHandler * This,
            /* [in] */ const wchar_t *pwchName,
            /* [in] */ int cchName);
        
        HRESULT ( STDMETHODCALLTYPE *startCDATA )( 
            ISAXLexicalHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *endCDATA )( 
            ISAXLexicalHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *comment )( 
            ISAXLexicalHandler * This,
            /* [in] */ const wchar_t *pwchChars,
            /* [in] */ int cchChars);
        
        END_INTERFACE
    } ISAXLexicalHandl