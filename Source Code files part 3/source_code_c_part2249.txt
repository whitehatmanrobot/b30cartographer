        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointLimits * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointLimits * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointLimits * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectedPlayers )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionConnections )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerPlayerConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerPlayerConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerCacheDeliveryRate )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerCacheDeliveryRate )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FECPacketSpan )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FECPacketSpan )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerPlayerRapidStartBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerPlayerRapidStartBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        END_INTERFACE
    } IWMSPublishingPointLimitsVtbl;

    interface IWMSPublishingPointLimits
    {
        CONST_VTBL struct IWMSPublishingPointLimitsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointLimits_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointLimits_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointLimits_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointLimits_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointLimits_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointLimits_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointLimits_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointLimits_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointLimits_put_ConnectedPlayers(This,Val)	\
    ( (This)->lpVtbl -> put_ConnectedPlayers(This,Val) ) 

#define IWMSPublishingPointLimits_get_OutgoingDistributionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_OutgoingDistributionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointLimits_put_OutgoingDistributionConnections(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionConnections(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerOutgoingDistributionConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerOutgoingDistributionConnectionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerOutgoingDistributionConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerOutgoingDistributionConnectionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PlayerBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PlayerBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerPlayerConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerPlayerConnectionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerPlayerConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerPlayerConnectionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PlayerCacheDeliveryRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerCacheDeliveryRate(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PlayerCacheDeliveryRate(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerCacheDeliveryRate(This,Val) ) 

#define IWMSPublishingPointLimits_get_FECPacketSpan(This,pVal)	\
    ( (This)->lpVtbl -> get_FECPacketSpan(This,pVal) ) 

#define IWMSPublishingPointLimits_put_FECPacketSpan(This,Val)	\
    ( (This)->lpVtbl -> put_FECPacketSpan(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerPlayerRapidStartBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerPlayerRapidStartBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerPlayerRapidStartBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerPlayerRapidStartBandwidth(This,Val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointLimits_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__
#define __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__

/* interface IWMSPublishingPointTotalCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointTotalCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("240D0C87-309A-4126-BF14-B52A622E95A9")
    IWMSPublishingPointTotalCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateReads( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamDenials( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamErrors( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamTerminations( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileBytesRead( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Advertisements( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointTotalCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointTotalCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointTotalCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointTotalCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileBytesRead )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointTotalCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSPublishingPointTotalCountersVtbl;

    interface IWMSPublishingPointTotalCounters
    {
        CONST_VTBL struct IWMSPublishingPointTotalCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointTotalCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointTotalCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointTotalCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointTotalCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointTotalCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointTotalCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointTotalCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointTotalCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_FileBytesRead(This,pVal)	\
    ( (This)->lpVtbl -> get_FileBytesRead(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointTotalCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__
#define __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__

/* interface IWMSPublishingPointTotalCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointTotalCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FDFABB7F-759A-44da-8B62-EA848C595158")
    IWMSPublishingPointTotalCounters2 : public IWMSPublishingPointTotalCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointTotalCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileBytesRead )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSPublishingPointTotalCounters2Vtbl;

    interface IWMSPublishingPointTotalCounters2
    {
        CONST_VTBL struct IWMSPublishingPointTotalCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointTotalCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointTotalCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointTotalCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointTotalCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointTotalCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointTotalCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointTotalCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointTotalCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_FileBytesRead(This,pVal)	\
    ( (This)->lpVtbl -> get_FileBytesRead(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointTotalCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSPublishingPointTotalCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSServerTotalCounters_INTERFACE_DEFINED__
#define __IWMSServerTotalCounters_INTERFACE_DEFINED__

/* interface IWMSServerTotalCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerTotalCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DAA2A1BB-BC91-438d-BF33-BDE11D2348D5")
    IWMSServerTotalCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateReads( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamDenials( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamErrors( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamTerminations( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendRequests( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendsSent( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateSends( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Advertisements( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerTotalCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerTotalCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerTotalCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerTotalCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerTotalCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerTotalCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequests )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSends )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerTotalCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSServerTotalCountersVtbl;

    interface IWMSServerTotalCounters
    {
        CONST_VTBL struct IWMSServerTotalCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerTotalCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerTotalCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerTotalCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerTotalCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerTotalCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerTotalCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerTotalCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerTotalCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerTotalCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerTotalCounters_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSServerTotalCounters_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSServerTotalCounters_get_UDPResendRequests(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequests(This,pVal) ) 

#define IWMSServerTotalCounters_get_UDPResendsSent(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_LateSends(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSends(This,pVal) ) 

#define IWMSServerTotalCounters_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSServerTotalCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerTotalCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerTotalCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSServerTotalCounters2_INTERFACE_DEFINED__
#define __IWMSServerTotalCounters2_INTERFACE_DEFINED__

/* interface IWMSServerTotalCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerTotalCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E10C815-C2CF-4d47-BB11-8251244712F2")
    IWMSServerTotalCounters2 : public IWMSServerTotalCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerTotalCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerTotalCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerTotalCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerTotalCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequests )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSends )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerTotalCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSServerTotalCounters2Vtbl;

    interface IWMSServerTotalCounters2
    {
        CONST_VTBL struct IWMSServerTotalCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerTotalCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerTotalCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerTotalCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerTotalCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerTotalCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerTotalCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerTotalCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerTotalCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerTotalCounters2_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSServerTotalCounters2_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSServerTotalCounters2_get_UDPResendRequests(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequests(This,pVal) ) 

#define IWMSServerTotalCounters2_get_UDPResendsSent(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_LateSends(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSends(This,pVal) ) 

#define IWMSServerTotalCounters2_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSServerTotalCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerTotalCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSServerTotalCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerTotalCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPoint_INTERFACE_DEFINED__
#define __IWMSPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0EC-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_PUBLISHING_POINT_TYPE
    {	WMS_PUBLISHING_POINT_TYPE_ON_DEMAND	= 1,
	WMS_PUBLISHING_POINT_TYPE_BROADCAST	= 2,
	WMS_PUBLISHING_POINT_TYPE_CACHE_PROXY_ON_DEMAND	= 3,
	WMS_PUBLISHING_POINT_TYPE_CACHE_PROXY_BROADCAST	= 4
    } 	WMS_PUBLISHING_POINT_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("121E6065-D8D9-498c-BE49-C1864DD315E3") 
enum WMS_PUBLISHING_POINT_INTERNAL_TYPE
    {	WMS_PUBLISHING_POINT_INTERNAL_TYPE_ON_DEMAND	= 11,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_BROADCAST	= 12,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_CACHE_PROXY_ON_DEMAND	= 13,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_CACHE_PROXY_BROADCAST	= 14
    } 	WMS_PUBLISHING_POINT_INTERNAL_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0EF-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_PUBLISHING_POINT_STATUS
    {	WMS_PUBLISHING_POINT_RUNNING	= 0,
	WMS_PUBLISHING_POINT_ERROR	= 0x1,
	WMS_PUBLISHING_POINT_ERROR_CRITICAL	= 0x2
    } 	WMS_PUBLISHING_POINT_STATUS;


EXTERN_C const IID IID_IWMSPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1881273F-4BEC-11D2-BF25-00805FBE84A6")
    IWMSPublishingPoint : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowClientsToConnect( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowClientsToConnect( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EventHandlers( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Limits( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileDescriptions( 
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MonikerName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PeakCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Players( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WrapperPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WrapperPath( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Authenticators( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableWrapperPath( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableWrapperPath( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamFilters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DistributionUserName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetDistributionUserNamePassword( 
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CacheProxyExpiration( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CacheProxyExpiration( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsDistributionPasswordSet( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowPlayerSideDiskCaching( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowPlayerSideDiskCaching( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableFEC( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableFEC( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSPublishingPointVtbl;

    interface IWMSPublishingPoint
    {
        CONST_VTBL struct IWMSPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPoint_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPoint2_INTERFACE_DEFINED__
#define __IWMSPublishingPoint2_INTERFACE_DEFINED__

/* interface IWMSPublishingPoint2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("770e846b-de39-4d72-a29f-1b631ca660b4")
    IWMSPublishingPoint2 : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStartupProfile( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStartupProfile( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPoint2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSPublishingPoint2 * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSPublishingPoint2 * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStartupProfile )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStartupProfile )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSPublishingPoint2Vtbl;

    interface IWMSPublishingPoint2
    {
        CONST_VTBL struct IWMSPublishingPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPoint2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPoint2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPoint2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPoint2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPoint2_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSPublishingPoint2_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSPublishingPoint2_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSPublishingPoint2_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSPublishingPoint2_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSPublishingPoint2_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSPublishingPoint2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSPublishingPoint2_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSPublishingPoint2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPoint2_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSPublishingPoint2_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSPublishingPoint2_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSPublishingPoint2_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSPublishingPoint2_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSPublishingPoint2_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSPublishingPoint2_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSPublishingPoint2_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSPublishingPoint2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPublishingPoint2_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSPublishingPoint2_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSPublishingPoint2_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSPublishingPoint2_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSPublishingPoint2_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSPublishingPoint2_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSPublishingPoint2_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSPublishingPoint2_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSPublishingPoint2_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSPublishingPoint2_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSPublishingPoint2_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSPublishingPoint2_get_AllowStartupProfile(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStartupProfile(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowStartupProfile(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStartupProfile(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPoint2_INTERFACE_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__
#define __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSOnDemandPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOnDemandPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ca388b3-eaee-492f-a8d6-8758efc72d76")
    IWMSOnDemandPublishingPoint : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowContentCaching( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowContentCaching( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportXML( 
            /* [in] */ __RPC__in BSTR bstrXMLFileName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableClientWildcardDirectoryAccess( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableClientWildcardDirectoryAccess( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableDownload( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableDownload( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DownloadBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DownloadBandwidth( 
            /* [in] */ long newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOnDemandPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOnDemandPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOnDemandPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOnDemandPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSOnDemandPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSOnDemandPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableDownload )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableDownload )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ long newVal);
        
        END_INTERFACE
    } IWMSOnDemandPublishingPointVtbl;

    interface IWMSOnDemandPublishingPoint
    {
        CONST_VTBL struct IWMSOnDemandPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOnDemandPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOnDemandPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOnDemandPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOnDemandPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOnDemandPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOnDemandPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOnDemandPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOnDemandPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSOnDemandPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSOnDemandPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSOnDemandPublishingPoint_get_AllowContentCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowContentCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowContentCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowContentCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSOnDemandPublishingPoint_get_EnableClientWildcardDirectoryAccess(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableClientWildcardDirectoryAccess(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableClientWildcardDirectoryAccess(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableClientWildcardDirectoryAccess(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableDownload(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableDownload(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableDownload(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableDownload(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_DownloadBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_DownloadBandwidth(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_DownloadBandwidth(This,newVal)	\
    ( (This)->lpVtbl -> put_DownloadBandwidth(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__
#define __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__

/* interface IWMSOnDemandPublishingPoint2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOnDemandPublishingPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3abbf960-54e5-40be-8677-c1758b1239eb")
    IWMSOnDemandPublishingPoint2 : public IWMSOnDemandPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStartupProfile( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStartupProfile( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOnDemandPublishingPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOnDemandPublishingPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOnDemandPublishingPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableDownload )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableDownload )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStartupProfile )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStartupProfile )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSOnDemandPublishingPoint2Vtbl;

    interface IWMSOnDemandPublishingPoint2
    {
        CONST_VTBL struct IWMSOnDemandPublishingPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOnDemandPublishingPoint2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOnDemandPublishingPoint2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOnDemandPublishingPoint2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOnDemandPublishingPoint2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOnDemandPublishingPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOnDemandPublishingPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOnDemandPublishingPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSOnDemandPublishingPoint2_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowContentCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowContentCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowContentCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowContentCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableClientWildcardDirectoryAccess(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableClientWildcardDirectoryAccess(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableClientWildcardDirectoryAccess(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableClientWildcardDirectoryAccess(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableDownload(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableDownload(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableDownload(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableDownload(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_DownloadBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_DownloadBandwidth(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_DownloadBandwidth(This,newVal)	\
    ( (This)->lpVtbl -> put_DownloadBandwidth(This,newVal) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowStartupProfile(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStartupProfile(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowStartupProfile(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStartupProfile(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__ */


#ifndef __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__
#define __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__

/* interface IWMSAnnouncementStreamFormats */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSAnnouncementStreamFormats;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55DDB8E9-05A3-4666-9E20-550F94581B06")
    IWMSAnnouncementStreamFormats : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT varStreamFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSAnnouncementStreamFormatsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSAnnouncementStreamFormats * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSAnnouncementStreamFormats * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSAnnouncementStreamFormats * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ VARIANT varStreamFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IWMSAnnouncementStreamFormats * This);
        
        END_INTERFACE
    } IWMSAnnouncementStreamFormatsVtbl;

    interface IWMSAnnouncementStreamFormats
    {
        CONST_VTBL struct IWMSAnnouncementStreamFormatsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSAnnouncementStreamFormats_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSAnnouncementStreamFormats_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSAnnouncementStreamFormats_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSAnnouncementStreamFormats_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSAnnouncementStreamFormats_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSAnnouncementStreamFormats_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSAnnouncementStreamFormats_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSAnnouncementStreamFormats_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSAnnouncementStreamFormats_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_Add(This,varStreamFormat)	\
    ( (This)->lpVtbl -> Add(This,varStreamFormat) ) 

#define IWMSAnnouncementStreamFormats_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSAnnouncementStreamFormats_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__ */


#ifndef __IWMSBroadcastPublishingPoint_INTERFACE_DEFINED__
#define __IWMSBroadcastPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSBroadcastPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0ED-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_BROADCAST_PUBLISHING_POINT_STATUS
    {	WMS_BROADCAST_PUBLISHING_POINT_STOPPED	= 0,
	WMS_BROADCAST_PUBLISHING_POINT_STARTED_WITHOUT_DATA	= 0x1,
	WMS_BROADCAST_PUBLISHING_POINT_STARTED	= 0x2,
	WMS_BROADCAST_PUBLISHING_POINT_ARCHIVING	= 0x4,
	WMS_BROADCAST_PUBLISHING_POINT_CHANGE_IN_PROGRESS	= 0x8
    } 	WMS_BROADCAST_PUBLISHING_POINT_STATUS;

typedef /* [uuid][public] */  DECLSPEC_UUID("62D6D99D-EB48-4e9e-97DB-C2C09EAADAD4") 
enum WMS_BUFFER_SETTING
    {	WMS_BUFFER_SETTING_UNSPECIFIED	= 0,
	WMS_BUFFER_SETTING_MINIMIZE_STARTUP_LATENCY	= 0x1,
	WMS_BUFFER_SETTING_MINIMIZE_PROPAGATION_LATENCY	= 0x2,
	WMS_NUM_BUFFER_SETTING	= 0x3
    } 	WMS_BUFFER_SETTING;


EXTERN_C const IID IID_IWMSBroadcastPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ca388b4-eaee-492f-a8d6-8758efc72d76")
    IWMSBroadcastPublishingPoint : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStreamSplitting( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStreamSplitting( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowClientToStartAndStop( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowClientToStartAndStop( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BroadcastDataSinks( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SharedPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StartWithoutData( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StartArchive( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BroadcastStatus( 
            /* [retval][out] */ __RPC__out WMS_BROADCAST_PUBLISHING_POINT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StopArchive( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportXML( 
            /* [in] */ __RPC__in BSTR bstrXMLFileName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UpTime( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AnnouncementStreamFormats( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSAnnouncementStreamFormats **ppFileNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Announce( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AnnounceToNSCFile( 
            /* [in] */ __RPC__in BSTR bstrDestinationFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL fOverwriteFlag = FALSE) = 0;
        
        virtual /* [helpstring][id][restricted] */ HRESULT STDMETHODCALLTYPE AnnounceToNSCStream( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppNSCAnnounceStream) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BufferSetting( 
            /* [retval][out] */ __RPC__out WMS_BUFFER_SETTING *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BufferSetting( 
            /* [in] */ WMS_BUFFER_SETTING newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSBroadcastPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSBroadcastPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSBroadcastPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSBroadcastPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSBroadcastPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSBroadcastPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastDataSinks )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedPlaylist )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartWithoutData )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartArchive )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastStatus )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_BROADCAST_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StopArchive )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpTime )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AnnouncementStreamFormats )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSAnnouncementStreamFormats **ppFileNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Announce )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCFile )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrDestinationFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL fOverwriteFlag);
        
        /* [helpstring][id][restricted] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCStream )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppNSCAnnounceStream);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferSetting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_BUFFER_SETTING *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BufferSetting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ WMS_BUFFER_SETTING newVal);
        
        END_INTERFACE
    } IWMSBroadcastPublishingPointVtbl;

    interface IWMSBroadcastPublishingPoint
    {
        CONST_VTBL struct IWMSBroadcastPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSBroadcastPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSBroadcastPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSBroadcastPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSBroadcastPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSBroadcastPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSBroadcastPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSBroadcastPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSBroadcastPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSBroadcastPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSBroadcastPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSBroadcastPublishingPoint_get_AllowStreamSplitting(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStreamSplitting(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowStreamSplitting(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStreamSplitting(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_AllowClientToStartAndStop(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientToStartAndStop(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowClientToStartAndStop(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientToStartAndStop(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_BroadcastDataSinks(This,pVal)	\
    ( (This)->lpVtbl -> get_BroadcastDataSinks(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_SharedPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_SharedPlaylist(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_StartWithoutData(This)	\
    ( (This)->lpVtbl -> StartWithoutData(This) ) 

#define IWMSBroadcastPublishingPoint_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define IWMSBroadcastPublishingPoint_StartArchive(This)	\
    ( (This)->lpVtbl -> StartArchive(This) ) 

#define IWMSBroadcastPublishingPoint_get_BroadcastStatus(This,pVal)	\
    ( (This)->lpVtbl -> get_BroadcastStatus(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWMSBroadcastPublishingPoint_StopArchive(This)	\
    ( (This)->lpVtbl -> StopArchive(This) ) 

#define IWMSBroadcastPublishingPoint_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSBroadcastPublishingPoint_get_UpTime(This,pVal)	\
    ( (This)->lpVtbl -> get_UpTime(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_AnnouncementStreamFormats(This,ppFileNames)	\
    ( (This)->lpVtbl -> get_AnnouncementStreamFormats(This,ppFileNames) ) 

#define IWMSBroadcastPublishingPoint_Announce(This)	\
    ( (This)->lpVtbl -> Announce(This) ) 

#define IWMSBroadcastPublishingPoint_AnnounceToNSCFile(This,bstrDestinationFileName,fOverwriteFlag)	\
    ( (This)->lpVtbl -> AnnounceToNSCFile(This,bstrDestinationFileName,fOverwriteFlag) ) 

#define IWMSBroadcastPublishingPoint_AnnounceToNSCStream(This,ppNSCAnnounceStream)	\
    ( (This)->lpVtbl -> AnnounceToNSCStream(This,ppNSCAnnounceStream) ) 

#define IWMSBroadcastPublishingPoint_get_BufferSetting(This,pVal)	\
    ( (This)->lpVtbl -> get_BufferSetting(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_BufferSetting(This,newVal)	\
    ( (This)->lpVtbl -> put_BufferSetting(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSBroadcastPublishingPoint_INTERFACE_DEFINED__ */


#ifndef __IWMSBroadcastPublishingPoint2_INTERFACE_DEFINED__
#define __IWMSBroadcastPublishingPoint2_INTERFACE_DEFINED__

/* interface IWMSBroadcastPublishingPoint2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSBroadcastPublishingPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c94e9af0-f12d-4bff-b01a-1ce6d7f5d303")
    IWMSBroadcastPublishingPoint2 : public IWMSBroadcastPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStartupProfile( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStartupProfile( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableStartVRootOnServiceStart( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableStartVRootOnServiceStart( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSBroadcastPublishingPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastDataSinks )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedPlaylist )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartWithoutData )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartArchive )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastStatus )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_BROADCAST_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StopArchive )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpTime )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AnnouncementStreamFormats )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSAnnouncementStreamFormats **ppFileNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Announce )( 
            IWMSBroadcastPublishingPoint2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCFile )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR bstrDestinationFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL fOverwriteFlag);
        
        /* [helpstring][id][restricted] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCStream )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppNSCAnnounceStream);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferSetting )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_BUFFER_SETTING *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BufferSetting )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ WMS_BUFFER_SETTING newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStartupProfile )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStartupProfile )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableStartVRootOnServiceStart )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableStartVRootOnServiceStart )( 
            IWMSBroadcastPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSBroadcastPublishingPoint2Vtbl;

    interface IWMSBroadcastPublishingPoint2
    {
        CONST_VTBL struct IWMSBroadcastPublishingPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSBroadcastPublishingPoint2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSBroadcastPublishingPoint2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSBroadcastPublishingPoint2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSBroadcastPublishingPoint2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSBroadcastPublishingPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSBroadcastPublishingPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSBroadcastPublishingPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSBroadcastPublishingPoint2_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSBroadcastPublishingPoint2_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSBroadcastPublishingPoint2_get_AllowStreamSplitting(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStreamSplitting(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_AllowStreamSplitting(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStreamSplitting(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_AllowClientToStartAndStop(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientToStartAndStop(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_AllowClientToStartAndStop(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientToStartAndStop(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_BroadcastDataSinks(This,pVal)	\
    ( (This)->lpVtbl -> get_BroadcastDataSinks(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_SharedPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_SharedPlaylist(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_StartWithoutData(This)	\
    ( (This)->lpVtbl -> StartWithoutData(This) ) 

#define IWMSBroadcastPublishingPoint2_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define IWMSBroadcastPublishingPoint2_StartArchive(This)	\
    ( (This)->lpVtbl -> StartArchive(This) ) 

#define IWMSBroadcastPublishingPoint2_get_BroadcastStatus(This,pVal)	\
    ( (This)->lpVtbl -> get_BroadcastStatus(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWMSBroadcastPublishingPoint2_StopArchive(This)	\
    ( (This)->lpVtbl -> StopArchive(This) ) 

#define IWMSBroadcastPublishingPoint2_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSBroadcastPublishingPoint2_get_UpTime(This,pVal)	\
    ( (This)->lpVtbl -> get_UpTime(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_get_AnnouncementStreamFormats(This,ppFileNames)	\
    ( (This)->lpVtbl -> get_AnnouncementStreamFormats(This,ppFileNames) ) 

#define IWMSBroadcastPublishingPoint2_Announce(This)	\
    ( (This)->lpVtbl -> Announce(This) ) 

#define IWMSBroadcastPublishingPoint2_AnnounceToNSCFile(This,bstrDestinationFileName,fOverwriteFlag)	\
    ( (This)->lpVtbl -> AnnounceToNSCFile(This,bstrDestinationFileName,fOverwriteFlag) ) 

#define IWMSBroadcastPublishingPoint2_AnnounceToNSCStream(This,ppNSCAnnounceStream)	\
    ( (This)->lpVtbl -> AnnounceToNSCStream(This,ppNSCAnnounceStream) ) 

#define IWMSBroadcastPublishingPoint2_get_BufferSetting(This,pVal)	\
    ( (This)->lpVtbl -> get_BufferSetting(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_BufferSetting(This,newVal)	\
    ( (This)->lpVtbl -> put_BufferSetting(This,newVal) ) 


#define IWMSBroadcastPublishingPoint2_get_AllowStartupProfile(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStartupProfile(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_AllowStartupProfile(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStartupProfile(This,newVal) ) 

#define IWMSBroadcastPublishingPoint2_get_EnableStartVRootOnServiceStart(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableStartVRootOnServiceStart(This,pVal) ) 

#define IWMSBroadcastPublishingPoint2_put_EnableStartVRootOnServiceStart(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableStartVRootOnServiceStart(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSBroadcastPublishingPoint2_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPoints_INTERFACE_DEFINED__
#define __IWMSPublishingPoints_INTERFACE_DEFINED__

/* interface IWMSPublishingPoints */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("6ca388b5-eaee-492f-a8d6-8758efc72d76") 
enum WMS_PUBLISHING_POINT_CATEGORY
    {	WMS_PUBLISHING_POINT_ON_DEMAND	= 1,
	WMS_PUBLISHING_POINT_BROADCAST	= 2
    } 	WMS_PUBLISHING_POINT_CATEGORY;


EXTERN_C const IID IID_IWMSPublishingPoints;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1881274D-4BEC-11D2-BF25-00805FBE84A6")
    IWMSPublishingPoints : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in BSTR Name,
            /* [in] */ WMS_PUBLISHING_POINT_CATEGORY Category,
            /* [in] */ __RPC__in BSTR Path,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppNewPubPt) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [in] */ __RPC__in BSTR DestName,
            /* [in] */ __RPC__in_opt IWMSPublishingPoint *pSrcPubPt,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppDestPubPt) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ImportXML( 
            /* [in] */ __RPC__in BSTR bstrNewPubPtName,
            /* [in] */ __RPC__in BSTR bstrXMLFileName,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppNewPubPt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPoints * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPoints * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPoints * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPoints * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPoints * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPoints * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPoints * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSPublishingPoints * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSPublishingPoints * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSPublishingPoints * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSPublishingPoints * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IWMSPublishingPoints * This,
            /* [in] */ __RPC__in BSTR Name,
            /* [in] */ WMS_PUBLISHING_POINT_CATEGORY Category,
            /* [in] */ __RPC__in BSTR Path,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppNewPubPt);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSPublishingPoints * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IWMSPublishingPoints * This,
            /* [in] */ __RPC__in BSTR DestName,
            /* [in] */ __RPC__in_opt IWMSPublishingPoint *pSrcPubPt,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppDestPubPt);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ImportXML )( 
            IWMSPublishingPoints * This,
            /* [in] */ __RPC__in BSTR bstrNewPubPtName,
            /* [in] */ __RPC__in BSTR bstrXMLFileName,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoint **ppNewPubPt);
        
        END_INTERFACE
    } IWMSPublishingPointsVtbl;

    interface IWMSPublishingPoints
    {
        CONST_VTBL struct IWMSPublishingPointsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPoints_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPoints_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPoints_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPoints_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPoints_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPoints_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPoints_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPoints_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSPublishingPoints_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSPublishingPoints_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSPublishingPoints_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSPublishingPoints_Add(This,Name,Category,Path,ppNewPubPt)	\
    ( (This)->lpVtbl -> Add(This,Name,Category,Path,ppNewPubPt) ) 

#define IWMSPublishingPoints_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSPublishingPoints_Clone(This,DestName,pSrcPubPt,ppDestPubPt)	\
    ( (This)->lpVtbl -> Clone(This,DestName,pSrcPubPt,ppDestPubPt) ) 

#define IWMSPublishingPoints_ImportXML(This,bstrNewPubPtName,bstrXMLFileName,ppNewPubPt)	\
    ( (This)->lpVtbl -> ImportXML(This,bstrNewPubPtName,bstrXMLFileName,ppNewPubPt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPoints_INTERFACE_DEFINED__ */


#ifndef __IWMSServerCurrentCounters_INTERFACE_DEFINED__
#define __IWMSServerCurrentCounters_INTERFACE_DEFINED__

/* interface IWMSServerCurrentCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerCurrentCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18FA53CD-8EB9-4b5f-B750-659D9B96DB9F")
    IWMSServerCurrentCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectionQueue( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectionRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileReadRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateReadRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingMMSPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionSendRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerSendRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamErrorRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CacheDownloads( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateSendRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendRequestsRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendsSentRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncomingBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerCurrentCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerCurrentCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerCurrentCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerCurrentCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerCurrentCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerCurrentCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerCurrentCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerCurrentCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionQueue )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileReadRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReadRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingMMSPlayers )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionSendRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerSendRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrorRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheDownloads )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSendRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequestsRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSentRate )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncomingBandwidth )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerCurrentCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSServerCurrentCountersVtbl;

    interface IWMSServerCurrentCounters
    {
        CONST_VTBL struct IWMSServerCurrentCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerCurrentCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerCurrentCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerCurrentCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerCurrentCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerCurrentCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerCurrentCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerCurrentCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerCurrentCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters_get_ConnectionQueue(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectionQueue(This,pVal) ) 

#define IWMSServerCurrentCounters_get_ConnectionRate(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectionRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_FileReadRate(This,pVal)	\
    ( (This)->lpVtbl -> get_FileReadRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters_get_LateReadRate(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReadRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_StreamingMMSPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingMMSPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerCurrentCounters_get_OutgoingDistributionSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters_get_PlayerSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters_get_StreamErrorRate(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrorRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters_get_CacheDownloads(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheDownloads(This,pVal) ) 

#define IWMSServerCurrentCounters_get_LateSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_UDPResendRequestsRate(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequestsRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_UDPResendsSentRate(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSentRate(This,pVal) ) 

#define IWMSServerCurrentCounters_get_IncomingBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_IncomingBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerCurrentCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSServerCurrentCounters2_INTERFACE_DEFINED__
#define __IWMSServerCurrentCounters2_INTERFACE_DEFINED__

/* interface IWMSServerCurrentCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerCurrentCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E061553-1A6E-405f-ADFF-6B1BEF58ECFB")
    IWMSServerCurrentCounters2 : public IWMSServerCurrentCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerCurrentCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerCurrentCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerCurrentCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerCurrentCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerCurrentCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerCurrentCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerCurrentCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerCurrentCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionQueue )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileReadRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReadRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingMMSPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionSendRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerSendRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrorRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheDownloads )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSendRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequestsRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSentRate )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncomingBandwidth )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSServerCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSServerCurrentCounters2Vtbl;

    interface IWMSServerCurrentCounters2
    {
        CONST_VTBL struct IWMSServerCurrentCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerCurrentCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerCurrentCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerCurrentCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerCurrentCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerCurrentCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerCurrentCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerCurrentCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerCurrentCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_ConnectionQueue(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectionQueue(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_ConnectionRate(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectionRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_FileReadRate(This,pVal)	\
    ( (This)->lpVtbl -> get_FileReadRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_LateReadRate(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReadRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_StreamingMMSPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingMMSPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_OutgoingDistributionSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_PlayerSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_StreamErrorRate(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrorRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_CacheDownloads(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheDownloads(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_LateSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSendRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_UDPResendRequestsRate(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequestsRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_UDPResendsSentRate(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSentRate(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_IncomingBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_IncomingBandwidth(This,pVal) ) 

#define IWMSServerCurrentCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSServerCurrentCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerCurrentCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSServerPeakCounters_INTERFACE_DEFINED__
#define __IWMSServerPeakCounters_INTERFACE_DEFINED__

/* interface IWMSServerPeakCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerPeakCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66F2D385-7081-40b9-863C-AFA4E5612CD3")
    IWMSServerPeakCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerSendRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionSendRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerPeakCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerPeakCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerPeakCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerPeakCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerPeakCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerPeakCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerPeakCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerPeakCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerSendRate )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionSendRate )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerPeakCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerPeakCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSServerPeakCountersVtbl;

    interface IWMSServerPeakCounters
    {
        CONST_VTBL struct IWMSServerPeakCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerPeakCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerPeakCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerPeakCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerPeakCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerPeakCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerPeakCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerPeakCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerPeakCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerPeakCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerPeakCounters_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSServerPeakCounters_get_PlayerSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerSendRate(This,pVal) ) 

#define IWMSServerPeakCounters_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSServerPeakCounters_get_OutgoingDistributionSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionSendRate(This,pVal) ) 

#define IWMSServerPeakCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerPeakCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerPeakCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerPeakCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerPeakCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSServerPeakCounters2_INTERFACE_DEFINED__
#define __IWMSServerPeakCounters2_INTERFACE_DEFINED__

/* interface IWMSServerPeakCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerPeakCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F09DBB46-19C0-4fb7-BA22-B38994FBB293")
    IWMSServerPeakCounters2 : public IWMSServerPeakCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerPeakCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerPeakCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerPeakCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerPeakCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerPeakCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerPeakCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerPeakCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerPeakCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerSendRate )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionSendRate )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerPeakCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSServerPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSServerPeakCounters2Vtbl;

    interface IWMSServerPeakCounters2
    {
        CONST_VTBL struct IWMSServerPeakCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerPeakCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerPeakCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerPeakCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerPeakCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerPeakCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerPeakCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerPeakCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerPeakCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerPeakCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerPeakCounters2_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSServerPeakCounters2_get_PlayerSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerSendRate(This,pVal) ) 

#define IWMSServerPeakCounters2_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSServerPeakCounters2_get_OutgoingDistributionSendRate(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionSendRate(This,pVal) ) 

#define IWMSServerPeakCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerPeakCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerPeakCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerPeakCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSServerPeakCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSServerPeakCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSServerPeakCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerPeakCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSServerLimits_INTERFACE_DEFINED__
#define __IWMSServerLimits_INTERFACE_DEFINED__

/* interface IWMSServerLimits */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerLimits;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D06CCFBB-994D-45f8-886E-81E9B7FAEDF1")
    IWMSServerLimits : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConnectedPlayers( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectionRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConnectionRate( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutgoingDistributionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutgoingDistributionConnections( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerOutgoingDistributionConnectionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerOutgoingDistributionConnectionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PlayerBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerInactivityTimeout( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PlayerInactivityTimeout( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerPlayerConnectionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerPlayerConnectionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerAcknowledgementTimeout( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PlayerAcknowledgementTimeout( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CPUUtilizationDuringConnection( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CPUUtilizationDuringConnection( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DiagnosticEvents( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DiagnosticEvents( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncomingBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncomingBandwidth( 
            /* [in] */ long Val) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerLimitsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerLimits * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerLimits * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerLimits * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerLimits * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerLimits * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerLimits * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerLimits * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectedPlayers )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionRate )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectionRate )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBandwidth )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionBandwidth )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionConnections )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBandwidth )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerBandwidth )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerInactivityTimeout )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerInactivityTimeout )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerPlayerConnectionBandwidth )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerPlayerConnectionBandwidth )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAcknowledgementTimeout )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerAcknowledgementTimeout )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CPUUtilizationDuringConnection )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CPUUtilizationDuringConnection )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiagnosticEvents )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiagnosticEvents )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncomingBandwidth )( 
            IWMSServerLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncomingBandwidth )( 
            IWMSServerLimits * This,
            /* [in] */ long Val);
        
        END_INTERFACE
    } IWMSServerLimitsVtbl;

    interface IWMSServerLimits
    {
        CONST_VTBL struct IWMSServerLimitsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerLimits_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerLimits_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerLimits_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerLimits_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerLimits_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerLimits_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerLimits_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerLimits_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerLimits_put_ConnectedPlayers(This,Val)	\
    ( (This)->lpVtbl -> put_ConnectedPlayers(This,Val) ) 

#define IWMSServerLimits_get_ConnectionRate(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectionRate(This,pVal) ) 

#define IWMSServerLimits_put_ConnectionRate(This,Val)	\
    ( (This)->lpVtbl -> put_ConnectionRate(This,Val) ) 

#define IWMSServerLimits_get_OutgoingDistributionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBandwidth(This,pVal) ) 

#define IWMSServerLimits_put_OutgoingDistributionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionBandwidth(This,Val) ) 

#define IWMSServerLimits_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerLimits_put_OutgoingDistributionConnections(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionConnections(This,Val) ) 

#define IWMSServerLimits_get_PerOutgoingDistributionConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerOutgoingDistributionConnectionBandwidth(This,pVal) ) 

#define IWMSServerLimits_put_PerOutgoingDistributionConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerOutgoingDistributionConnectionBandwidth(This,Val) ) 

#define IWMSServerLimits_get_PlayerBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBandwidth(This,pVal) ) 

#define IWMSServerLimits_put_PlayerBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerBandwidth(This,Val) ) 

#define IWMSServerLimits_get_PlayerInactivityTimeout(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerInactivityTimeout(This,pVal) ) 

#define IWMSServerLimits_put_PlayerInactivityTimeout(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerInactivityTimeout(This,Val) ) 

#define IWMSServerLimits_get_PerPlayerConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerPlayerConnectionBandwidth(This,pVal) ) 

#define IWMSServerLimits_put_PerPlayerConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerPlayerConnectionBandwidth(This,Val) ) 

#define IWMSServerLimits_get_PlayerAcknowledgementTimeout(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAcknowledgementTimeout(This,pVal) ) 

#define IWMSServerLimits_put_PlayerAcknowledgementTimeout(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerAcknowledgementTimeout(This,Val) ) 

#define IWMSServerLimits_get_CPUUtilizationDuringConnection(This,pVal)	\
    ( (This)->lpVtbl -> get_CPUUtilizationDuringConnection(This,pVal) ) 

#define IWMSServerLimits_put_CPUUtilizationDuringConnection(This,Val)	\
    ( (This)->lpVtbl -> put_CPUUtilizationDuringConnection(This,Val) ) 

#define IWMSServerLimits_get_DiagnosticEvents(This,pVal)	\
    ( (This)->lpVtbl -> get_DiagnosticEvents(This,pVal) ) 

#define IWMSServerLimits_put_DiagnosticEvents(This,Val)	\
    ( (This)->lpVtbl -> put_DiagnosticEvents(This,Val) ) 

#define IWMSServerLimits_get_IncomingBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_IncomingBandwidth(This,pVal) ) 

#define IWMSServerLimits_put_IncomingBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_IncomingBandwidth(This,Val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerLimits_INTERFACE_DEFINED__ */


#ifndef __IWMSServer_INTERFACE_DEFINED__
#define __IWMSServer_INTERFACE_DEFINED__

/* interface IWMSServer */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0EE-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_SERVER_STATUS
    {	WMS_SERVER_RUNNING	= 0,
	WMS_SERVER_ERROR	= 0x1,
	WMS_SERVER_ERROR_CRITICAL	= 0x2
    } 	WMS_SERVER_STATUS;

typedef /* [uuid][public] */  DECLSPEC_UUID("49A0F530-F475-45a6-99C5-E52382685BA8") 
enum WMS_OS_PRODUCT_TYPE
    {	WMS_OS_PRODUCT_SERVER	= 0x1,
	WMS_OS_PRODUCT_ADVANCED	= 0x2
    } 	WMS_OS_PRODUCT_TYPE;


EXTERN_C const IID IID_IWMSServer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("845FB958-4279-11D2-BF23-00805FBE84A6")
    IWMSServer : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowClientsToConnect( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowClientsToConnect( 
            /* [in] */ VARIANT_BOOL val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Authenticators( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CacheProxy( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlProtocols( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerCurrentCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DataSources( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EventHandlers( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Limits( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerLimits **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileDescriptions( 
            /* [in] */ __RPC__in BSTR Path,
            /* [defaultvalue][in] */ WMS_FILE_TYPE Type,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MediaParsers( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MonikerName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PeakCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerPeakCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlaylistParsers( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PublishingPoints( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoints **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerTotalCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UnicastDataSinks( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Players( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out WMS_SERVER_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreatePlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMDocument **ppPlaylist) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CPUUtilization( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportXML( 
            /* [in] */ __RPC__in BSTR bstrXMLFileName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamFilters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultPluginLoadType( 
            /* [retval][out] */ __RPC__out WMS_PLUGIN_LOAD_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultPluginLoadType( 
            /* [in] */ WMS_PLUGIN_LOAD_TYPE val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableIPAddresses( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSAvailableIPAddresses **ppIPAddrList) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RootDirectories( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSRootDirectories **ppRootDirectories) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DiagnosticEvents( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSDiagnosticEvents **ppDiagEvents) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableReverseProxyMode( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableReverseProxyMode( 
            /* [in] */ VARIANT_BOOL val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileType( 
            /* [in] */ __RPC__in BSTR path,
            /* [retval][out] */ __RPC__out WMS_FILE_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultPath( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DownloadContent( 
            /* [in] */ __RPC__in BSTR SourceUrl,
            /* [in] */ __RPC__in BSTR DestinationUrl,
            /* [defaultvalue][in] */ long lContentSizeLow = -1,
            /* [defaultvalue][in] */ long lContentSizeHigh = -1,
            /* [defaultvalue][in] */ long lBitRate = 0) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OSProductType( 
            /* [retval][out] */ __RPC__out WMS_OS_PRODUCT_TYPE *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServer * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSServer * This,
            /* [in] */ VARIANT_BOOL val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxy )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlProtocols )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSources )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSServer * This,
            /* [in] */ __RPC__in BSTR Path,
            /* [defaultvalue][in] */ WMS_FILE_TYPE Type,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MediaParsers )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlaylistParsers )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PublishingPoints )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPoints **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSServerTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnicastDataSinks )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out WMS_SERVER_STATUS *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePlaylist )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMDocument **ppPlaylist);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CPUUtilization )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSServer * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultPluginLoadType )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out WMS_PLUGIN_LOAD_TYPE *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultPluginLoadType )( 
            IWMSServer * This,
            /* [in] */ WMS_PLUGIN_LOAD_TYPE val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableIPAddresses )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSAvailableIPAddresses **ppIPAddrList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RootDirectories )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSRootDirectories **ppRootDirectories);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiagnosticEvents )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSDiagnosticEvents **ppDiagEvents);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableReverseProxyMode )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableReverseProxyMode )( 
            IWMSServer * This,
            /* [in] */ VARIANT_BOOL val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileType )( 
            IWMSServer * This,
            /* [in] */ __RPC__in BSTR path,
            /* [retval][out] */ __RPC__out WMS_FILE_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultPath )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultPath )( 
            IWMSServer * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DownloadContent )( 
            IWMSServer * This,
            /* [in] */ __RPC__in BSTR SourceUrl,
            /* [in] */ __RPC__in BSTR DestinationUrl,
            /* [defaultvalue][in] */ long lContentSizeLow,
            /* [defaultvalue][in] */ long lContentSizeHigh,
            /* [defaultvalue][in] */ long lBitRate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OSProductType )( 
            IWMSServer * This,
            /* [retval][out] */ __RPC__out WMS_OS_PRODUCT_TYPE *pVal);
        
        END_INTERFACE
    } IWMSServerVtbl;

    interface IWMSServer
    {
        CONST_VTBL struct IWMSServerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServer_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSServer_put_AllowClientsToConnect(This,val)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,val) ) 

#define IWMSServer_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSServer_get_CacheProxy(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxy(This,pVal) ) 

#define IWMSServer_get_ControlProtocols(This,pVal)	\
    ( (This)->lpVtbl -> get_ControlProtocols(This,pVal) ) 

#define IWMSServer_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSServer_get_DataSources(This,pVal)	\
    ( (This)->lpVtbl -> get_DataSources(This,pVal) ) 

#define IWMSServer_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSServer_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSServer_get_FileDescriptions(This,Path,Type,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,Path,Type,pVal) ) 

#define IWMSServer_get_MediaParsers(This,pVal)	\
    ( (This)->lpVtbl -> get_MediaParsers(This,pVal) ) 

#define IWMSServer_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSServer_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSServer_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSServer_get_PlaylistParsers(This,pVal)	\
    ( (This)->lpVtbl -> get_PlaylistParsers(This,pVal) ) 

#define IWMSServer_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSServer_get_PublishingPoints(This,pVal)	\
    ( (This)->lpVtbl -> get_PublishingPoints(This,pVal) ) 

#define IWMSServer_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSServer_get_UnicastDataSinks(This,pVal)	\
    ( (This)->lpVtbl -> get_UnicastDataSinks(This,pVal) ) 

#define IWMSServer_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSServer_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSServer_CreatePlaylist(This,ppPlaylist)	\
    ( (This)->lpVtbl -> CreatePlaylist(This,ppPlaylist) ) 

#define IWMSServer_get_StartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_StartTime(This,pVal) ) 

#define IWMSServer_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServer_get_CPUUtilization(This,pVal)	\
    ( (This)->lpVtbl -> get_CPUUtilization(This,pVal) ) 

#define IWMSServer_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSServer_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSServer_get_Version(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_Version(This,pbstrVal) ) 

#define IWMSServer_get_DefaultPluginLoadType(This,pVal)	\
    ( (This)->lpVtbl -> get_DefaultPluginLoadType(This,pVal) ) 

#define IWMSServer_put_DefaultPluginLoadType(This,val)	\
    ( (This)->lpVtbl -> put_DefaultPluginLoadType(This,val) ) 

#define IWMSServer_get_AvailableIPAddresses(This,ppIPAddrList)	\
    ( (This)->lpVtbl -> get_AvailableIPAddresses(This,ppIPAddrList) ) 

#define IWMSServer_get_RootDirectories(This,ppRootDirectories)	\
    ( (This)->lpVtbl -> get_RootDirectories(This,ppRootDirectories) ) 

#define IWMSServer_get_DiagnosticEvents(This,ppDiagEvents)	\
    ( (This)->lpVtbl -> get_DiagnosticEvents(This,ppDiagEvents) ) 

#define IWMSServer_get_EnableReverseProxyMode(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableReverseProxyMode(This,pVal) ) 

#define IWMSServer_put_EnableReverseProxyMode(This,val)	\
    ( (This)->lpVtbl -> put_EnableReverseProxyMode(This,val) ) 

#define IWMSServer_get_FileType(This,path,pVal)	\
    ( (This)->lpVtbl -> get_FileType(This,path,pVal) ) 

#define IWMSServer_get_DefaultPath(This,pVal)	\
    ( (This)->lpVtbl -> get_DefaultPath(This,pVal) ) 

#define IWMSServer_put_DefaultPath(This,newVal)	\
    ( (This)->lpVtbl -> put_DefaultPath(This,newVal) ) 

#define IWMSServer_DownloadContent(This,SourceUrl,DestinationUrl,lContentSizeLow,lContentSizeHigh,lBitRate)	\
    ( (This)->lpVtbl -> DownloadContent(This,SourceUrl,DestinationUrl,lContentSizeLow,lContentSizeHigh,lBitRate) ) 

#define IWMSServer_get_OSProductType(This,pVal)	\
    ( (This)->lpVtbl -> get_OSProductType(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmsserver_0000_0037 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0037_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     unsigned long *, LPSAFEARRAY * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wmsysprf.h ===
//*@@@+++@@@@******************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//*@@@---@@@@******************************************************************
//
#pragma once
///////////////////////////////////////////////////////////////////////////////

/* fd7f47f1-72a6-45a4-80f0-3aecefc32c07 */
EXTERN_GUID( WMProfile_V40_DialUpMBR, 
             0xfd7f47f1,
             0x72a6,
             0x45a4,
             0x80, 0xf0, 0x3a, 0xec, 0xef, 0xc3, 0x2c, 0x07 );

///////////////////////////////////////////////////////////////////////////////

/* 82cd3321-a94a-4ffc-9c2b-092c10ca16e7 */
EXTERN_GUID( WMProfile_V40_IntranetMBR, 
             0x82cd3321,
             0xa94a,
             0x4ffc,
             0x9c, 0x2b, 0x09, 0x2c, 0x10, 0xca, 0x16, 0xe7 );

///////////////////////////////////////////////////////////////////////////////

/* 5a1c2206-dc5e-4186-beb2-4c5a994b132e */
EXTERN_GUID( WMProfile_V40_2856100MBR, 
             0x5a1c2206,
             0xdc5e,
             0x4186,
             0xbe, 0xb2, 0x4c, 0x5a, 0x99, 0x4b, 0x13, 0x2e );

///////////////////////////////////////////////////////////////////////////////

/* D508978A-11A0-4d15-B0DA-ACDC99D4F890 */
EXTERN_GUID( WMProfile_V40_6VoiceAudio,
             0xD508978A,
             0x11A0,
             0x4d15,
             0xb0, 0xda, 0xac, 0xdc, 0x99, 0xd4, 0xf8, 0x90 );

///////////////////////////////////////////////////////////////////////////////

/* 0f4be81f-d57d-41e1-b2e3-2fad986bfec2 */
EXTERN_GUID( WMProfile_V40_16AMRadio, 
             0x0f4be81f,
             0xd57d,
             0x41e1,
             0xb2, 0xe3, 0x2f, 0xad, 0x98, 0x6b, 0xfe, 0xc2 );

///////////////////////////////////////////////////////////////////////////////

/* 7fa57fc8-6ea4-4645-8abf-b6e5a8f814a1 */
EXTERN_GUID( WMProfile_V40_288FMRadioMono, 
             0x7fa57fc8,
             0x6ea4,
             0x4645,
             0x8a, 0xbf, 0xb6, 0xe5, 0xa8, 0xf8, 0x14, 0xa1 );

///////////////////////////////////////////////////////////////////////////////

/* 22fcf466-aa40-431f-a289-06d0ea1a1e40 */
EXTERN_GUID( WMProfile_V40_288FMRadioStereo, 
             0x22fcf466,
             0xaa40,
             0x431f,
             0xa2, 0x89, 0x06, 0xd0, 0xea, 0x1a, 0x1e, 0x40 );

///////////////////////////////////////////////////////////////////////////////

/* e8026f87-e905-4594-a3c7-00d00041d1d9 */
EXTERN_GUID( WMProfile_V40_56DialUpStereo, 
             0xe8026f87,
             0xe905,
             0x4594,
             0xa3, 0xc7, 0x00, 0xd0, 0x00, 0x41, 0xd1, 0xd9 );

///////////////////////////////////////////////////////////////////////////////

/* 4820b3f7-cbec-41dc-9391-78598714c8e5 */
EXTERN_GUID( WMProfile_V40_64Audio, 
             0x4820b3f7,
             0xcbec,
             0x41dc,
             0x93, 0x91, 0x78, 0x59, 0x87, 0x14, 0xc8, 0xe5 );

///////////////////////////////////////////////////////////////////////////////

/* 0efa0ee3-9e64-41e2-837f-3c0038f327ba */
EXTERN_GUID( WMProfile_V40_96Audio, 
             0x0efa0ee3,
             0x9e64,
             0x41e2,
             0x83, 0x7f, 0x3c, 0x00, 0x38, 0xf3, 0x27, 0xba );

///////////////////////////////////////////////////////////////////////////////

/* 93ddbe12-13dc-4e32-a35e-40378e34279a */
EXTERN_GUID( WMProfile_V40_128Audio, 
             0x93ddbe12,
             0x13dc,
             0x4e32,
             0xa3, 0x5e, 0x40, 0x37, 0x8e, 0x34, 0x27, 0x9a );

///////////////////////////////////////////////////////////////////////////////

/* bb2bc274-0eb6-4da9-b550-ecf7f2b9948f */
EXTERN_GUID( WMProfile_V40_288VideoVoice, 
             0xbb2bc274,
             0x0eb6,
             0x4da9,
             0xb5, 0x50, 0xec, 0xf7, 0xf2, 0xb9, 0x94, 0x8f );

///////////////////////////////////////////////////////////////////////////////

/* ac617f2d-6cbe-4e84-8e9a-ce151a12a354 */
EXTERN_GUID( WMProfile_V40_288VideoAudio, 
             0xac617f2d,
             0x6cbe,
             0x4e84,
             0x8e, 0x9a, 0xce, 0x15, 0x1a, 0x12, 0xa3, 0x54 );

///////////////////////////////////////////////////////////////////////////////

/* abf2f00d-d555-4815-94ce-8275f3a70bfe */
EXTERN_GUID( WMProfile_V40_288VideoWebServer, 
             0xabf2f00d,
             0xd555,
             0x4815,
             0x94, 0xce, 0x82, 0x75, 0xf3, 0xa7, 0x0b, 0xfe );

///////////////////////////////////////////////////////////////////////////////

/* e21713bb-652f-4dab-99de-71e04400270f */
EXTERN_GUID( WMProfile_V40_56DialUpVideo, 
             0xe21713bb,
             0x652f,
             0x4dab,
             0x99, 0xde, 0x71, 0xe0, 0x44, 0x00, 0x27, 0x0f );

///////////////////////////////////////////////////////////////////////////////

/* b756ff10-520f-4749-a399-b780e2fc9250 */
EXTERN_GUID( WMProfile_V40_56DialUpVideoWebServer, 
             0xb756ff10,
             0x520f,
             0x4749,
             0xa3, 0x99, 0xb7, 0x80, 0xe2, 0xfc, 0x92, 0x50 );

///////////////////////////////////////////////////////////////////////////////

/* 8f99ddd8-6684-456b-a0a3-33e1316895f0 */
EXTERN_GUID( WMProfile_V40_100Video, 
             0x8f99ddd8,
             0x6684,
             0x456b,
             0xa0, 0xa3, 0x33, 0xe1, 0x31, 0x68, 0x95, 0xf0 );

///////////////////////////////////////////////////////////////////////////////

/* 541841c3-9339-4f7b-9a22-b11540894e42 */
EXTERN_GUID( WMProfile_V40_250Video, 
             0x541841c3,
             0x9339,
             0x4f7b,
             0x9a, 0x22, 0xb1, 0x15, 0x40, 0x89, 0x4e, 0x42 );

///////////////////////////////////////////////////////////////////////////////

/* 70440e6d-c4ef-4f84-8cd0-d5c28686e784 */
EXTERN_GUID( WMProfile_V40_512Video, 
             0x70440e6d,
             0xc4ef,
             0x4f84,
             0x8c, 0xd0, 0xd5, 0xc2, 0x86, 0x86, 0xe7, 0x84 );

///////////////////////////////////////////////////////////////////////////////

/* b4482a4c-cc17-4b07-a94e-9818d5e0f13f */
EXTERN_GUID( WMProfile_V40_1MBVideo, 
             0xb4482a4c,
             0xcc17,
             0x4b07,
             0xa9, 0x4e, 0x98, 0x18, 0xd5, 0xe0, 0xf1, 0x3f );

///////////////////////////////////////////////////////////////////////////////

/* 55374ac0-309b-4396-b88f-e6e292113f28 */
EXTERN_GUID( WMProfile_V40_3MBVideo, 
             0x55374ac0,
             0x309b,
             0x4396,
             0xb8, 0x8f, 0xe6, 0xe2, 0x92, 0x11, 0x3f, 0x28 );

///////////////////////////////////////////////////////////////////////////////

/* 5B16E74B-4068-45b5-B80E-7BF8C80D2C2F */
EXTERN_GUID( WMProfile_V70_DialUpMBR, 
             0x5b16e74b,
             0x4068,
             0x45b5,
             0xb8, 0xe, 0x7b, 0xf8, 0xc8, 0xd, 0x2c, 0x2f );

///////////////////////////////////////////////////////////////////////////////

/* 045880DC-34B6-4ca9-A326-73557ED143F3 */
EXTERN_GUID( WMProfile_V70_IntranetMBR, 
             0x45880dc,
             0x34b6,
             0x4ca9,
             0xa3, 0x26, 0x73, 0x55, 0x7e, 0xd1, 0x43, 0xf3 );

///////////////////////////////////////////////////////////////////////////////

/* 07DF7A25-3FE2-4a5b-8B1E-348B0721CA70 */
EXTERN_GUID( WMProfile_V70_2856100MBR, 
             0x7df7a25,
             0x3fe2,
             0x4a5b,
             0x8b, 0x1e, 0x34, 0x8b, 0x7, 0x21, 0xca, 0x70 );

///////////////////////////////////////////////////////////////////////////////

/* B952F38E-7DBC-4533-A9CA-B00B1C6E9800 */
EXTERN_GUID( WMProfile_V70_288VideoVoice, 
             0xb952f38e,
             0x7dbc,
             0x4533,
             0xa9, 0xca, 0xb0, 0xb, 0x1c, 0x6e, 0x98, 0x0 );

///////////////////////////////////////////////////////////////////////////////

/* 58BBA0EE-896A-4948-9953-85B736F83947 */
EXTERN_GUID( WMProfile_V70_288VideoAudio, 
             0x58bba0ee,
             0x896a,
             0x4948,
             0x99, 0x53, 0x85, 0xb7, 0x36, 0xf8, 0x39, 0x47 );

///////////////////////////////////////////////////////////////////////////////

/* 70A32E2B-E2DF-4ebd-9105-D9CA194A2D50 */
EXTERN_GUID( WMProfile_V70_288VideoWebServer, 
             0x70a32e2b,
             0xe2df,
             0x4ebd,
             0x91, 0x5, 0xd9, 0xca, 0x19, 0x4a, 0x2d, 0x50 );

///////////////////////////////////////////////////////////////////////////////

/* DEF99E40-57BC-4ab3-B2D1-B6E3CAF64257 */
EXTERN_GUID( WMProfile_V70_56VideoWebServer, 
             0xdef99e40,
             0x57bc,
             0x4ab3,
             0xb2, 0xd1, 0xb6, 0xe3, 0xca, 0xf6, 0x42, 0x57 );

///////////////////////////////////////////////////////////////////////////////

/* C2B7A7E9-7B8E-4992-A1A1-068217A3B311 */
EXTERN_GUID( WMProfile_V70_64VideoISDN,
             0xc2b7a7e9,
             0x7b8e,
             0x4992,
             0xa1, 0xa1, 0x06, 0x82, 0x17, 0xa3, 0xb3, 0x11 );

///////////////////////////////////////////////////////////////////////////////

/* D9F3C932-5EA9-4c6d-89B4-2686E515426E */
EXTERN_GUID( WMProfile_V70_100Video, 
             0xd9f3c932,
             0x5ea9,
             0x4c6d,
             0x89, 0xb4, 0x26, 0x86, 0xe5, 0x15, 0x42, 0x6e );

///////////////////////////////////////////////////////////////////////////////

/* AFE69B3A-403F-4a1b-8007-0E21CFB3DF84 */
EXTERN_GUID( WMProfile_V70_256Video,
             0xafe69b3a,
             0x403f,
             0x4a1b,
             0x80, 0x7, 0xe, 0x21, 0xcf, 0xb3, 0xdf, 0x84 );

///////////////////////////////////////////////////////////////////////////////

/* F3D45FBB-8782-44df-97C6-8678E2F9B13D */
EXTERN_GUID( WMProfile_V70_384Video,
             0xf3d45fbb,
             0x8782,
             0x44df,
             0x97, 0xc6, 0x86, 0x78, 0xe2, 0xf9, 0xb1, 0x3d );

///////////////////////////////////////////////////////////////////////////////

/* 0326EBB6-F76E-4964-B0DB-E729978D35EE */
EXTERN_GUID( WMProfile_V70_768Video, 
             0x326ebb6,
             0xf76e,
             0x4964,
             0xb0, 0xdb, 0xe7, 0x29, 0x97, 0x8d, 0x35, 0xee );

///////////////////////////////////////////////////////////////////////////////

/* 0B89164A-5490-4686-9E37-5A80884E5146 */
EXTERN_GUID( WMProfile_V70_1500Video, 
             0xb89164a,
             0x5490,
             0x4686,
             0x9e, 0x37, 0x5a, 0x80, 0x88, 0x4e, 0x51, 0x46 );

///////////////////////////////////////////////////////////////////////////////

/* AA980124-BF10-4e4f-9AFD-4329A7395CFF */
EXTERN_GUID( WMProfile_V70_2000Video,
             0xaa980124,
             0xbf10,
             0x4e4f, 
             0x9a, 0xfd, 0x43, 0x29, 0xa7, 0x39, 0x5c, 0xff );

///////////////////////////////////////////////////////////////////////////////

/* 7A747920-2449-4d76-99CB-FDB0C90484D4 */
EXTERN_GUID( WMProfile_V70_700FilmContentVideo,
             0x7a747920,
             0x2449,
             0x4d76,
             0x99, 0xcb, 0xfd, 0xb0, 0xc9, 0x4, 0x84, 0xd4 );

///////////////////////////////////////////////////////////////////////////////

/* F6A5F6DF-EE3F-434c-A433-523CE55F516B */
EXTERN_GUID( WMProfile_V70_1500FilmContentVideo,
             0xf6a5f6df,
             0xee3f,
             0x434c,
             0xa4, 0x33, 0x52, 0x3c, 0xe5, 0x5f, 0x51, 0x6b );

///////////////////////////////////////////////////////////////////////////////

/* EABA9FBF-B64F-49b3-AA0C-73FBDD150AD0 */
EXTERN_GUID( WMProfile_V70_6VoiceAudio, 
             0xeaba9fbf,
             0xb64f,
             0x49b3,
             0xaa, 0xc, 0x73, 0xfb, 0xdd, 0x15, 0xa, 0xd0 );

///////////////////////////////////////////////////////////////////////////////

/* C012A833-A03B-44a5-96DC-ED95CC65582D */
EXTERN_GUID( WMProfile_V70_288FMRadioMono, 
             0xc012a833,
             0xa03b,
             0x44a5,
             0x96, 0xdc, 0xed, 0x95, 0xcc, 0x65, 0x58, 0x2d );

///////////////////////////////////////////////////////////////////////////////

/* E96D67C9-1A39-4dc4-B900-B1184DC83620 */
EXTERN_GUID( WMProfile_V70_288FMRadioStereo, 
             0xe96d67c9,
             0x1a39,
             0x4dc4,
             0xb9, 0x0, 0xb1, 0x18, 0x4d, 0xc8, 0x36, 0x20 );

///////////////////////////////////////////////////////////////////////////////

/* 674EE767-0949-4fac-875E-F4C9C292013B */
EXTERN_GUID( WMProfile_V70_56DialUpStereo,
             0x674ee767,
             0x949,
             0x4fac,
             0x87, 0x5e, 0xf4, 0xc9, 0xc2, 0x92, 0x1, 0x3b );

///////////////////////////////////////////////////////////////////////////////

/* 91DEA458-9D60-4212-9C59-D40919C939E4 */
EXTERN_GUID( WMProfile_V70_64AudioISDN,
             0x91dea458,
             0x9d60,
             0x4212,
             0x9c, 0x59, 0xd4, 0x09, 0x19, 0xc9, 0x39, 0xe4 );

///////////////////////////////////////////////////////////////////////////////

/* B29CFFC6-F131-41db-B5E8-99D8B0B945F4 */
EXTERN_GUID( WMProfile_V70_64Audio, 
             0xb29cffc6,
             0xf131,
             0x41db,
             0xb5, 0xe8, 0x99, 0xd8, 0xb0, 0xb9, 0x45, 0xf4 );

///////////////////////////////////////////////////////////////////////////////

/* A9D4B819-16CC-4a59-9F37-693DBB0302D6 */
EXTERN_GUID( WMProfile_V70_96Audio, 
             0xa9d4b819,
             0x16cc,
             0x4a59,
             0x9f, 0x37, 0x69, 0x3d, 0xbb, 0x3, 0x2, 0xd6 );

///////////////////////////////////////////////////////////////////////////////

/* C64CF5DA-DF45-40d3-8027-DE698D68DC66 */
EXTERN_GUID( WMProfile_V70_128Audio, 
             0xc64cf5da,
             0xdf45,
             0x40d3,
             0x80, 0x27, 0xde, 0x69, 0x8d, 0x68, 0xdc, 0x66 );

///////////////////////////////////////////////////////////////////////////////

/* F55EA573-4C02-42b5-9026-A8260C438A9F */
EXTERN_GUID( WMProfile_V70_225VideoPDA, 
             0xf55ea573,
             0x4c02,
             0x42b5,
             0x90, 0x26, 0xa8, 0x26, 0xc, 0x43, 0x8a, 0x9f );

///////////////////////////////////////////////////////////////////////////////

/* 0F472967-E3C6-4797-9694-F0304C5E2F17 */
EXTERN_GUID( WMProfile_V70_150VideoPDA, 
             0xf472967,
             0xe3c6,
             0x4797,
             0x96, 0x94, 0xf0, 0x30, 0x4c, 0x5e, 0x2f, 0x17 );


///////////////////////////////////////////////////////////////////////////////

/* {FEEDBCDF-3FAC-4c93-AC0D-47941EC72C0B} */
EXTERN_GUID( WMProfile_V80_255VideoPDA, 
             0xfeedbcdf,
             0x3fac,
             0x4c93,
             0xac, 0xd, 0x47, 0x94, 0x1e, 0xc7, 0x2c, 0xb );

///////////////////////////////////////////////////////////////////////////////

/* {AEE16DFA-2C14-4a2f-AD3F-A3034031784F} */
EXTERN_GUID( WMProfile_V80_150VideoPDA, 
             0xaee16dfa,
             0x2c14,
             0x4a2f,
             0xad, 0x3f, 0xa3, 0x3, 0x40, 0x31, 0x78, 0x4f );

///////////////////////////////////////////////////////////////////////////////

/* {D66920C4-C21F-4ec8-A0B4-95CF2BD57FC4} */
EXTERN_GUID( WMProfile_V80_28856VideoMBR, 
             0xd66920c4,
             0xc21f,
             0x4ec8,
             0xa0, 0xb4, 0x95, 0xcf, 0x2b, 0xd5, 0x7f, 0xc4 );

///////////////////////////////////////////////////////////////////////////////

/* {5BDB5A0E-979E-47d3-9596-73B386392A55} */
EXTERN_GUID( WMProfile_V80_100768VideoMBR, 
             0x5bdb5a0e,
             0x979e,
             0x47d3,
             0x95, 0x96, 0x73, 0xb3, 0x86, 0x39, 0x2a, 0x55 );

///////////////////////////////////////////////////////////////////////////////

/* {D8722C69-2419-4b36-B4E0-6E17B60564E5} */
EXTERN_GUID( WMProfile_V80_288100VideoMBR, 
             0xd8722c69,
             0x2419,
             0x4b36,
             0xb4, 0xe0, 0x6e, 0x17, 0xb6, 0x5, 0x64, 0xe5 );

///////////////////////////////////////////////////////////////////////////////

/* {3DF678D9-1352-4186-BBF8-74F0C19B6AE2} */
EXTERN_GUID( WMProfile_V80_288Video, 
             0x3df678d9,
             0x1352,
             0x4186,
             0xbb, 0xf8, 0x74, 0xf0, 0xc1, 0x9b, 0x6a, 0xe2 );

///////////////////////////////////////////////////////////////////////////////

/* {254E8A96-2612-405c-8039-F0BF725CED7D} */
EXTERN_GUID( WMProfile_V80_56Video, 
             0x254e8a96,
             0x2612,
             0x405c,
             0x80, 0x39, 0xf0, 0xbf, 0x72, 0x5c, 0xed, 0x7d );

///////////////////////////////////////////////////////////////////////////////

/* {A2E300B4-C2D4-4fc0-B5DD-ECBD948DC0DF} */
EXTERN_GUID( WMProfile_V80_100Video, 
             0xa2e300b4,
             0xc2d4,
             0x4fc0,
             0xb5, 0xdd, 0xec, 0xbd, 0x94, 0x8d, 0xc0, 0xdf );

///////////////////////////////////////////////////////////////////////////////

/* {BBC75500-33D2-4466-B86B-122B201CC9AE} */
EXTERN_GUID( WMProfile_V80_256Video, 
             0xbbc75500,
             0x33d2,
             0x4466,
             0xb8, 0x6b, 0x12, 0x2b, 0x20, 0x1c, 0xc9, 0xae );

///////////////////////////////////////////////////////////////////////////////

/* {29B00C2B-09A9-48bd-AD09-CDAE117D1DA7} */
EXTERN_GUID( WMProfile_V80_384Video, 
             0x29b00c2b,
             0x9a9,
             0x48bd,
             0xad, 0x9, 0xcd, 0xae, 0x11, 0x7d, 0x1d, 0xa7 );

///////////////////////////////////////////////////////////////////////////////

/* {74D01102-E71A-4820-8F0D-13D2EC1E4872} */
EXTERN_GUID( WMProfile_V80_768Video, 
             0x74d01102,
             0xe71a,
             0x4820,
             0x8f, 0xd, 0x13, 0xd2, 0xec, 0x1e, 0x48, 0x72 );

///////////////////////////////////////////////////////////////////////////////

/* {C8C2985F-E5D9-4538-9E23-9B21BF78F745} */
EXTERN_GUID( WMProfile_V80_700NTSCVideo, 
             0xc8c2985f,
             0xe5d9,
             0x4538,
             0x9e, 0x23, 0x9b, 0x21, 0xbf, 0x78, 0xf7, 0x45 );

///////////////////////////////////////////////////////////////////////////////

/* {931D1BEE-617A-4bcd-9905-CCD0786683EE} */
EXTERN_GUID( WMProfile_V80_1400NTSCVideo, 
             0x931d1bee,
             0x617a,
             0x4bcd,
             0x99, 0x5, 0xcc, 0xd0, 0x78, 0x66, 0x83, 0xee );

///////////////////////////////////////////////////////////////////////////////

/* {9227C692-AE62-4f72-A7EA-736062D0E21E} */
EXTERN_GUID( WMProfile_V80_384PALVideo, 
             0x9227c692,
             0xae62,
             0x4f72,
             0xa7, 0xea, 0x73, 0x60, 0x62, 0xd0, 0xe2, 0x1e );

///////////////////////////////////////////////////////////////////////////////

/* {EC298949-639B-45e2-96FD-4AB32D5919C2} */
EXTERN_GUID( WMProfile_V80_700PALVideo, 
             0xec298949,
             0x639b,
             0x45e2,
             0x96, 0xfd, 0x4a, 0xb3, 0x2d, 0x59, 0x19, 0xc2 );

///////////////////////////////////////////////////////////////////////////////

/* {7EA3126D-E1BA-4716-89AF-F65CEE0C0C67} */
EXTERN_GUID( WMProfile_V80_288MonoAudio,  
             0x7ea3126d,
             0xe1ba,
             0x4716,
             0x89, 0xaf, 0xf6, 0x5c, 0xee, 0xc, 0xc, 0x67 );

///////////////////////////////////////////////////////////////////////////////

/* {7E4CAB5C-35DC-45bb-A7C0-19B28070D0CC} */
EXTERN_GUID( WMProfile_V80_288StereoAudio, 
             0x7e4cab5c,
             0x35dc,
             0x45bb,
             0xa7, 0xc0, 0x19, 0xb2, 0x80, 0x70, 0xd0, 0xcc );

///////////////////////////////////////////////////////////////////////////////

/* {60907F9F-B352-47e5-B210-0EF1F47E9F9D} */
EXTERN_GUID( WMProfile_V80_32StereoAudio, 
             0x60907f9f,
             0xb352,
             0x47e5,
             0xb2, 0x10, 0xe, 0xf1, 0xf4, 0x7e, 0x9f, 0x9d );

///////////////////////////////////////////////////////////////////////////////

/* {5EE06BE5-492B-480a-8A8F-12F373ECF9D4} */
EXTERN_GUID( WMProfile_V80_48StereoAudio, 
             0x5ee06be5,
             0x492b,
             0x480a,
             0x8a, 0x8f, 0x12, 0xf3, 0x73, 0xec, 0xf9, 0xd4 );

///////////////////////////////////////////////////////////////////////////////

/* {09BB5BC4-3176-457f-8DD6-3CD919123E2D} */
EXTERN_GUID( WMProfile_V80_64StereoAudio, 
             0x9bb5bc4,
             0x3176,
             0x457f,
             0x8d, 0xd6, 0x3c, 0xd9, 0x19, 0x12, 0x3e, 0x2d );

///////////////////////////////////////////////////////////////////////////////

/* {1FC81930-61F2-436f-9D33-349F2A1C0F10} */
EXTERN_GUID( WMProfile_V80_96StereoAudio, 
             0x1fc81930,
             0x61f2,
             0x436f,
             0x9d, 0x33, 0x34, 0x9f, 0x2a, 0x1c, 0xf, 0x10 );

///////////////////////////////////////////////////////////////////////////////

/* {407B9450-8BDC-4ee5-88B8-6F527BD941F2} */
EXTERN_GUID( WMProfile_V80_128StereoAudio, 
             0x407b9450,
             0x8bdc,
             0x4ee5,
             0x88, 0xb8, 0x6f, 0x52, 0x7b, 0xd9, 0x41, 0xf2 );

///////////////////////////////////////////////////////////////////////////////

/* {8C45B4C7-4AEB-4f78-A5EC-88420B9DADEF} */
EXTERN_GUID( WMProfile_V80_288VideoOnly, 
             0x8c45b4c7,
             0x4aeb,
             0x4f78,
             0xa5, 0xec, 0x88, 0x42, 0xb, 0x9d, 0xad, 0xef );

///////////////////////////////////////////////////////////////////////////////

/* {6E2A6955-81DF-4943-BA50-68A986A708F6} */
EXTERN_GUID( WMProfile_V80_56VideoOnly, 
             0x6e2a6955,
             0x81df,
             0x4943,
             0xba, 0x50, 0x68, 0xa9, 0x86, 0xa7, 0x8, 0xf6 );

///////////////////////////////////////////////////////////////////////////////

/* {3510A862-5850-4886-835F-D78EC6A64042} */
EXTERN_GUID( WMProfile_V80_FAIRVBRVideo, 
             0x3510a862,
             0x5850,
             0x4886,
             0x83, 0x5f, 0xd7, 0x8e, 0xc6, 0xa6, 0x40, 0x42 );

///////////////////////////////////////////////////////////////////////////////

/* {0F10D9D3-3B04-4fb0-A3D3-88D4AC854ACC} */
EXTERN_GUID( WMProfile_V80_HIGHVBRVideo, 
             0xf10d9d3,
             0x3b04,
             0x4fb0,
             0xa3, 0xd3, 0x88, 0xd4, 0xac, 0x85, 0x4a, 0xcc );

///////////////////////////////////////////////////////////////////////////////

/* {048439BA-309C-440e-9CB4-3DCCA3756423} */
EXTERN_GUID( WMProfile_V80_BESTVBRVideo, 
             0x48439ba,
             0x309c,
             0x440e,
             0x9c, 0xb4, 0x3d, 0xcc, 0xa3, 0x75, 0x64, 0x23 );
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WPCrsMsg.h ===
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: CRSWPP_ERROR_FIRST
//
// MessageText:
//
//  CRS WebPost provider's first error message.
//
#define CRSWPP_ERROR_FIRST               0x40042200L

//
// MessageId: CRSWPP_INVALID_POSTINFO_FILE
//
// MessageText:
//
//  The PostInfo file is invalid on the server you selected.
//
#define CRSWPP_INVALID_POSTINFO_FILE     0xC0042201L

//
// MessageId: CRSWPP_NO_MATCHING_MAPURL
//
// MessageText:
//
//  The CRS project you selected has no MAPURL.
//
#define CRSWPP_NO_MATCHING_MAPURL        0xC0042202L

//
// MessageId: CRSWPP_SECURITY_PACKAGE
//
// MessageText:
//
//  The initialization of the security package failed.
//
#define CRSWPP_SECURITY_PACKAGE          0xC0042203L

//
// MessageId: CRSWPP_SECURITY_PACKAGE_NOT_FOUND
//
// MessageText:
//
//  The security package(s) required by the server could not be found on your computer.
//
#define CRSWPP_SECURITY_PACKAGE_NOT_FOUND 0xC0042204L

//
// MessageId: CRSWPP_PROJECT_BINDING_INCOMPLETE
//
// MessageText:
//
//  The CRS provider has not determined which CRS project on the server corresponds to the URL you selected.
//
#define CRSWPP_PROJECT_BINDING_INCOMPLETE 0xC0042205L

//
// MessageId: CRSWPP_SERVER_BINDING_INCOMPLETE
//
// MessageText:
//
//  The CRS provider has not determined the name of the server that corresponds to the URL you selected.
//
#define CRSWPP_SERVER_BINDING_INCOMPLETE 0xC0042206L

//
// MessageId: CRSWPP_SERVER_NOT_RESPONDING
//
// MessageText:
//
//  The CRS server is not responding.
//
#define CRSWPP_SERVER_NOT_RESPONDING     0xC0042207L

//
// MessageId: CRSWPP_FAILED_AUTH
//
// MessageText:
//
//  You do not have the necessary access privileges to publish to this CRS server.
//
#define CRSWPP_FAILED_AUTH               0xC0042208L

//
// MessageId: CRSWPP_POSTINFO_NEEDED
//
// MessageText:
//
//  The CRS provider could not retrieve all of the required information from the PostInfo file on the server.
//
#define CRSWPP_POSTINFO_NEEDED           0x40042209L

//
// MessageId: CRSWPP_BIND_FAILED
//
// MessageText:
//
//  The CRS provider could not connect to the CRS server.
//
#define CRSWPP_BIND_FAILED               0xC004220AL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpdshellextension.h ===
//=============================================================================
//
// @module      WpdShellExtension.h
//
// @created     06-01-2005
//
// @abstract    Contains property keys specific to the WPD shell extension
//
// @copyright   (C) COPYRIGHT MICROSOFT CORPORATION, 2005
//
//=============================================================================


/**************************************************************************** 
* This section contains the WPD NSE CLSID to be used in SHParseDisplayName() 
* 
* 
****************************************************************************/ 
DEFINE_GUID( CLSID_WPD_NAMESPACE_EXTENSION , 0x35786d3c, 0xb075, 0x49b9, 0x88, 0xdd, 0x02, 0x98, 0x76, 0xe1, 0x1c, 0x01 ); 



/**************************************************************************** 
* This section defines all property keys associated with: 
* WPDNSE_OBJECT_PROPERTIES_V1 
* 
* 
****************************************************************************/ 
DEFINE_GUID( WPDNSE_OBJECT_PROPERTIES_V1 , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 ); 

// Properties 
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_HAS_CONTACT_PHOTO , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 2 ); // [ VT_BOOL ] Indicates whether the object has a contact photo resource.  
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_HAS_THUMBNAIL , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 3 ); // [ VT_BOOL ] Indicates whether the object has a thumbnail resource.  
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_HAS_ICON , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 4 ); // [ VT_BOOL ] Indicates whether the object has an icon resource.  
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_HAS_AUDIO_CLIP , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 5 ); // [ VT_BOOL ] Indicates whether the object has a voice annotation resource.  
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_HAS_ALBUM_ART , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 6 ); // [ VT_BOOL ] Indicates whether the object has an album art resource.  
DEFINE_PROPERTYKEY( WPDNSE_OBJECT_OPTIMAL_READ_BLOCK_SIZE , 0x34d71409, 0x4b47, 0x4d80, 0xaa, 0xac, 0x3a, 0x28, 0xa4, 0xa3, 0xb3, 0xe6 , 7 ); // [ VT_UI4 ] The optimal buffer size clients can use to read data chunks of the default resource.  

/**************************************************************************** 
* This section defines all the property page values used with extensible 
* property pages. Property sheet extensions will receive a uint with one of
* of these values in the LOWORD and possibly an index in the HIWORD when
* their IShellPropSheetExt::ReplacePage method is called. Indexes in the
* HIWORD refer to the index into the PIDL array of the item whose property
* page will be replaced. This allows you to replace the correct storage or
* device property page in a multi-select scenario.
* 
* 
****************************************************************************/ 
#define WPDNSE_PROPSHEET_DEVICE_GENERAL     0x00000001
#define WPDNSE_PROPSHEET_STORAGE_GENERAL    0x00000002
#define WPDNSE_PROPSHEET_CONTENT_GENERAL    0x00000004
#define WPDNSE_PROPSHEET_CONTENT_REFERENCES 0x00000008
#define WPDNSE_PROPSHEET_CONTENT_RESOURCES  0x00000010
#define WPDNSE_PROPSHEET_CONTENT_DETAILS    0x00000020



/**************************************************************************** 
* This section defines the IBindCtx options used by IShellFolder::BindToObject.
* 
* 
****************************************************************************/ 
// BindCtx key which tells an IShellFolder to enumerate as quickly as possible.
// A limited property set will be available for objects when this bind option
// is used.  The limited property set contains name, size, date modified, the
// read-only, hidden and system file attributes, and the supported resources.
#define STR_WPDNSE_FAST_ENUM              L"WPDNSE Fast Enum"

// BindCtx key which tells an IShellFolder to enumerate as quickly as possible.
// A limited property set will be available for objects when this bind option
// is used.  The limited property set contains name, persistent unique id, and
// the content type.
#define STR_WPDNSE_SIMPLE_ITEM            L"WPDNSE SimpleItem"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wnnc.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    wnnc.h

Abstract:

    This header provides the Windows Networking WNNC_NET definitions to winnetwk.h
    and the IFS Kit.

Environment:

    User Mode / Kernel Mode

Notes:

--*/

// begin_ntifs
#ifndef _WNNC_
#define _WNNC_

//
// Network types
//

#define     WNNC_NET_MSNET       0x00010000
#define     WNNC_NET_SMB         0x00020000
#define     WNNC_NET_NETWARE     0x00030000
#define     WNNC_NET_VINES       0x00040000
#define     WNNC_NET_10NET       0x00050000
#define     WNNC_NET_LOCUS       0x00060000
#define     WNNC_NET_SUN_PC_NFS  0x00070000
#define     WNNC_NET_LANSTEP     0x00080000
#define     WNNC_NET_9TILES      0x00090000
#define     WNNC_NET_LANTASTIC   0x000A0000
#define     WNNC_NET_AS400       0x000B0000
#define     WNNC_NET_FTP_NFS     0x000C0000
#define     WNNC_NET_PATHWORKS   0x000D0000
#define     WNNC_NET_LIFENET     0x000E0000
#define     WNNC_NET_POWERLAN    0x000F0000
#define     WNNC_NET_BWNFS       0x00100000
#define     WNNC_NET_COGENT      0x00110000
#define     WNNC_NET_FARALLON    0x00120000
#define     WNNC_NET_APPLETALK   0x00130000
#define     WNNC_NET_INTERGRAPH  0x00140000
#define     WNNC_NET_SYMFONET    0x00150000
#define     WNNC_NET_CLEARCASE   0x00160000
#define     WNNC_NET_FRONTIER    0x00170000
#define     WNNC_NET_BMC         0x00180000
#define     WNNC_NET_DCE         0x00190000
#define     WNNC_NET_AVID        0x001A0000
#define     WNNC_NET_DOCUSPACE   0x001B0000
#define     WNNC_NET_MANGOSOFT   0x001C0000
#define     WNNC_NET_SERNET      0x001D0000
#define     WNNC_NET_RIVERFRONT1 0X001E0000
#define     WNNC_NET_RIVERFRONT2 0x001F0000
#define     WNNC_NET_DECORB      0x00200000
#define     WNNC_NET_PROTSTOR    0x00210000
#define     WNNC_NET_FJ_REDIR    0x00220000
#define     WNNC_NET_DISTINCT    0x00230000
#define     WNNC_NET_TWINS       0x00240000
#define     WNNC_NET_RDR2SAMPLE  0x00250000
#define     WNNC_NET_CSC         0x00260000
#define     WNNC_NET_3IN1        0x00270000
#define     WNNC_NET_EXTENDNET   0x00290000
#define     WNNC_NET_STAC        0x002A0000
#define     WNNC_NET_FOXBAT      0x002B0000
#define     WNNC_NET_YAHOO       0x002C0000
#define     WNNC_NET_EXIFS       0x002D0000
#define     WNNC_NET_DAV         0x002E0000
#define     WNNC_NET_KNOWARE     0x002F0000
#define     WNNC_NET_OBJECT_DIRE 0x00300000
#define     WNNC_NET_MASFAX      0x00310000
#define     WNNC_NET_HOB_NFS     0x00320000
#define     WNNC_NET_SHIVA       0x00330000
#define     WNNC_NET_IBMAL       0x00340000
#define     WNNC_NET_LOCK        0x00350000
#define     WNNC_NET_TERMSRV     0x00360000
#define     WNNC_NET_SRT         0x00370000
#define     WNNC_NET_QUINCY      0x00380000
#define     WNNC_NET_OPENAFS     0x00390000
#define     WNNC_NET_AVID1       0X003A0000
#define     WNNC_NET_DFS         0x003B0000
#define     WNNC_NET_KWNP        0x003C0000
#define     WNNC_NET_ZENWORKS    0x003D0000
#define     WNNC_NET_DRIVEONWEB  0x003E0000
#define     WNNC_NET_VMWARE      0x003F0000
#define     WNNC_NET_RSFX        0x00400000
#define     WNNC_NET_MFILES      0x00410000
#define     WNNC_NET_MS_NFS      0x00420000
#define     WNNC_NET_GOOGLE      0x00430000

#define     WNNC_CRED_MANAGER   0xFFFF0000

//
// Network type aliases
//

#define     WNNC_NET_LANMAN      WNNC_NET_SMB


#endif  // _WNNC_
// end_ntifs
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WPFtpMsg.h ===
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: FTPWPP_ERROR_FIRST
//
// MessageText:
//
//  CFtpWpp's first error message.
//
#define FTPWPP_ERROR_FIRST               0x40042300L

//
// MessageId: FTPWPP_ERROR_INETOPEN_FAILED
//
// MessageText:
//
//  The FTP provider could not connect to the internet.
//
#define FTPWPP_ERROR_INETOPEN_FAILED     0xC0042301L

//
// MessageId: FTPWPP_ERROR_AUTHENTICATION_FAILED
//
// MessageText:
//
//  The FTP provider could not log in to the FTP server.
//
#define FTPWPP_ERROR_AUTHENTICATION_FAILED 0xC0042302L

//
// MessageId: FTPWPP_ERROR_LAST
//
// MessageText:
//
//  CFtpWpp's last error message.
//
#define FTPWPP_ERROR_LAST                0x400423FFL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpc.h ===
///////////////////////////////////////////////////////////////////////////////
//
//  File:  Wpc.h
//
//  Comments:
//      This file defines the Windows Parental Controls interfaces and events
//
//  Copyright (C) 2005 Microsoft Corporation  All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////
#pragma once

#include <WpcApi.h>
#include <WpcEvent.h>

#ifndef E_FILE_NOT_FOUND
#define E_FILE_NOT_FOUND  MAKE_SCODE(SEVERITY_ERROR, FACILITY_WIN32, ERROR_FILE_NOT_FOUND)
#endif

#define FACILITY_WPC    0x999   
#define WPCERR(n) MAKE_SCODE(SEVERITY_ERROR, FACILITY_WPC, n)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\workspaceax.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for workspaceax.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __workspaceax_h__
#define __workspaceax_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWorkspaceResTypeRegistry_FWD_DEFINED__
#define __IWorkspaceResTypeRegistry_FWD_DEFINED__
typedef interface IWorkspaceResTypeRegistry IWorkspaceResTypeRegistry;
#endif 	/* __IWorkspaceResTypeRegistry_FWD_DEFINED__ */


/* header files for imported files */
#include "wtypes.h"
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_workspaceax_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------


extern RPC_IF_HANDLE __MIDL_itf_workspaceax_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_workspaceax_0000_0000_v0_0_s_ifspec;

#ifndef __IWorkspaceResTypeRegistry_INTERFACE_DEFINED__
#define __IWorkspaceResTypeRegistry_INTERFACE_DEFINED__

/* interface IWorkspaceResTypeRegistry */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWorkspaceResTypeRegistry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1D428C79-6E2E-4351-A361-C0401A03A0BA")
    IWorkspaceResTypeRegistry : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddResourceType( 
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [in] */ __RPC__in BSTR bstrLauncher) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteResourceType( 
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetRegisteredFileExtensions( 
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *psaFileExtensions) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetResourceTypeInfo( 
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLauncher) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ModifyResourceType( 
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [in] */ __RPC__in BSTR bstrLauncher) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWorkspaceResTypeRegistryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWorkspaceResTypeRegistry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWorkspaceResTypeRegistry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWorkspaceResTypeRegistry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddResourceType )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [in] */ __RPC__in BSTR bstrLauncher);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteResourceType )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetRegisteredFileExtensions )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *psaFileExtensions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetResourceTypeInfo )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLauncher);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ModifyResourceType )( 
            __RPC__in IWorkspaceResTypeRegistry * This,
            /* [in] */ VARIANT_BOOL fMachineWide,
            /* [in] */ __RPC__in BSTR bstrFileExtension,
            /* [in] */ __RPC__in BSTR bstrLauncher);
        
        END_INTERFACE
    } IWorkspaceResTypeRegistryVtbl;

    interface IWorkspaceResTypeRegistry
    {
        CONST_VTBL struct IWorkspaceResTypeRegistryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWorkspaceResTypeRegistry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWorkspaceResTypeRegistry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWorkspaceResTypeRegistry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWorkspaceResTypeRegistry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWorkspaceResTypeRegistry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWorkspaceResTypeRegistry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWorkspaceResTypeRegistry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWorkspaceResTypeRegistry_AddResourceType(This,fMachineWide,bstrFileExtension,bstrLauncher)	\
    ( (This)->lpVtbl -> AddResourceType(This,fMachineWide,bstrFileExtension,bstrLauncher) ) 

#define IWorkspaceResTypeRegistry_DeleteResourceType(This,fMachineWide,bstrFileExtension)	\
    ( (This)->lpVtbl -> DeleteResourceType(This,fMachineWide,bstrFileExtension) ) 

#define IWorkspaceResTypeRegistry_GetRegisteredFileExtensions(This,fMachineWide,psaFileExtensions)	\
    ( (This)->lpVtbl -> GetRegisteredFileExtensions(This,fMachineWide,psaFileExtensions) ) 

#define IWorkspaceResTypeRegistry_GetResourceTypeInfo(This,fMachineWide,bstrFileExtension,pbstrLauncher)	\
    ( (This)->lpVtbl -> GetResourceTypeInfo(This,fMachineWide,bstrFileExtension,pbstrLauncher) ) 

#define IWorkspaceResTypeRegistry_ModifyResourceType(This,fMachineWide,bstrFileExtension,bstrLauncher)	\
    ( (This)->lpVtbl -> ModifyResourceType(This,fMachineWide,bstrFileExtension,bstrLauncher) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWorkspaceResTypeRegistry_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wptypes.h ===
/*-------------------------------------------------------*\
 *
 *	Copyright (c) 1999 Microsoft Corporation
 *
 *	Module Name:
 *
 *		wptypes.h
 *
 *	Abstract:
 *
 *		Data types for the Microsoft Web Publishing API.
 *
\*-------------------------------------------------------*/


#ifndef __WPTYPES_H__
#define __WPTYPES_H__


#ifdef __cplusplus
extern "C" {
#endif


//
//	Site info structures
//

typedef struct tagWPSITEINFOA {

	DWORD dwSize;
	DWORD dwFlags;
	LPSTR lpszSiteName;
	LPSTR lpszSiteURL;

} WPSITEINFOA, *LPWPSITEINFOA;

typedef struct tagWPSITEINFOW {

	DWORD dwSize;
	DWORD dwFlags;
	LPWSTR lpszSiteName;
	LPWSTR lpszSiteURL;

} WPSITEINFOW, *LPWPSITEINFOW;


//
//	Provider info structures
//

typedef struct tagWPPROVINFOA {

	DWORD dwSize;
	DWORD dwFlags;
	DWORD dwPriority;
	LPSTR lpszProviderName;
	LPSTR lpszProviderCLSID;
	LPSTR lpszDllPath;

} WPPROVINFOA, *LPWPPROVINFOA;

typedef struct tagWPPROVINFOW {

	DWORD dwSize;
	DWORD dwFlags;
	DWORD dwPriority;
	LPWSTR lpszProviderName;
	LPWSTR lpszProviderCLSID;
	LPWSTR lpszDllPath;

} WPPROVINFOW, *LPWPPROVINFOW;


#ifdef UNICODE

#define WPSITEINFO				WPSITEINFOW
#define LPWPSITEINFO			LPWPSITEINFOW
#define WPPROVINFO				WPPROVINFOW
#define LPWPPROVINFO			LPWPPROVINFOW

#else

#define WPSITEINFO				WPSITEINFOA
#define LPWPSITEINFO			LPWPSITEINFOA
#define WPPROVINFO				WPPROVINFOA
#define LPWPPROVINFO			LPWPPROVINFOA

#endif


#ifdef __cplusplus
}
#endif



#endif  // __WPTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WPSpiHlp.h ===
/*------------------------------------------------*\
 *
 *	Copyright 1997 - 1999 Microsoft Corporation
 *
 *	Module Name:
 *
 *		wpspihlp.h
 *
 *	Abstract:
 *
 *		Declaration of Microsoft Web Publishing
 *		Service Provider helper functions.
 *
 *	Note:
 *
 *		If you are #including this file in
 *		a Web Publishing Service Provider
 *		implementation, you should first
 *		#define IN_WPPDLL.
 *
\*------------------------------------------------*/


#ifndef __WPSPIHLP_H__
#define __WPSPIHLP_H__


#include <windows.h>
#include "wptypes.h"


#if defined(IN_WPPDLL)
#define WPPFUNC	__declspec( dllexport )
#else
#define WPPFUNC	__declspec( dllimport )
#endif	//	IN_WPPDLL


//
//	Flags
//

#define WPF_FORCE_BIND					0x00000100		//	WppBindToSite


//
//	Helper function declarations and typedefs
//

HRESULT WPPFUNC WINAPI WppBindToSiteA(
	HWND	hwnd,
	LPCSTR	sSiteName,
	LPCSTR	sURL,
    REFIID	riid,
	DWORD	dwFlag,
	DWORD	dwReserved,
    PVOID 	*ppvUnk);

typedef HRESULT (WINAPI *PFN_WPPBINDTOSITEA)(
						HWND	hwnd,
						LPCSTR	sSiteName,
						LPCSTR	sURL,
						REFIID 	riid,
						DWORD	dwFlag,
						DWORD	dwReserved,
						PVOID 	*ppvUnk);


HRESULT WPPFUNC WINAPI WppListSitesA(
	LPDWORD			pdwSitesBufLen,
	LPWPSITEINFOA	pSitesBuffer,
	LPDWORD			pdwNumSites);

typedef HRESULT (WINAPI *PFN_WPPLISTSITESA)(
						LPDWORD			pdwSitesBufLen,
						LPWPSITEINFOA	pSitesBuffer,
						LPDWORD			pdwNumSites);

										
HRESULT WPPFUNC WINAPI WppDeleteSiteA(LPCSTR sSiteName);

typedef HRESULT (WINAPI *PFN_WPPDELETESITEA)(LPCSTR sSiteName);


HRESULT WPPFUNC WINAPI WppBindToSiteW(
	HWND	hwnd,
	LPCWSTR	sSiteName,
	LPCWSTR	sURL,
    REFIID	riid,
	DWORD	dwFlag,
	DWORD	dwReserved,
    PVOID 	*ppvUnk);

typedef HRESULT (WINAPI *PFN_WPPBINDTOSITEW)(
						HWND	hwnd,
						LPCWSTR sSiteName,
						LPCWSTR	sURL,
						REFIID 	riid,
						DWORD	dwFlag,
						DWORD	dwReserved,
						PVOID 	*ppvUnk);

HRESULT WPPFUNC WINAPI WppListSitesW(
	LPDWORD			pdwSitesBufLen,
	LPWPSITEINFOW	pSitesBuffer,
	LPDWORD			pdwNumSites);

typedef HRESULT (WINAPI *PFN_WPPLISTSITESW)(
						LPDWORD			pdwSitesBufLen,
						LPWPSITEINFOW	pSitesBuffer,
						LPDWORD			pdwNumSites);
										
HRESULT WPPFUNC WINAPI WppDeleteSiteW(LPCWSTR sSiteName);

typedef HRESULT (WINAPI *PFN_WPPDELETESITEW)(LPCWSTR sSiteName);


//
//	Entry Points
//

#define	EP_WPPBINDTOSITEW	"WppBindToSiteW"
#define EP_WPPLISTSITESW	"WppListSitesW"
#define EP_WPPDELETESITEW	"WppDeleteSiteW"

#define EP_WPPBINDTOSITEA	"WppBindToSiteA"
#define EP_WPPLISTSITESA	"WppListSitesA"
#define EP_WPPDELETESITEA	"WppDeleteSiteA"



#endif	// __WPSPIHLP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpcapi.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for WpcApi.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __WpcApi_h__
#define __WpcApi_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWPCProviderState_FWD_DEFINED__
#define __IWPCProviderState_FWD_DEFINED__
typedef interface IWPCProviderState IWPCProviderState;
#endif 	/* __IWPCProviderState_FWD_DEFINED__ */


#ifndef __IWPCProviderConfig_FWD_DEFINED__
#define __IWPCProviderConfig_FWD_DEFINED__
typedef interface IWPCProviderConfig IWPCProviderConfig;
#endif 	/* __IWPCProviderConfig_FWD_DEFINED__ */


#ifndef __IWPCSettings_FWD_DEFINED__
#define __IWPCSettings_FWD_DEFINED__
typedef interface IWPCSettings IWPCSettings;
#endif 	/* __IWPCSettings_FWD_DEFINED__ */


#ifndef __IWPCGamesSettings_FWD_DEFINED__
#define __IWPCGamesSettings_FWD_DEFINED__
typedef interface IWPCGamesSettings IWPCGamesSettings;
#endif 	/* __IWPCGamesSettings_FWD_DEFINED__ */


#ifndef __IWPCWebSettings_FWD_DEFINED__
#define __IWPCWebSettings_FWD_DEFINED__
typedef interface IWPCWebSettings IWPCWebSettings;
#endif 	/* __IWPCWebSettings_FWD_DEFINED__ */


#ifndef __IWindowsParentalControlsCore_FWD_DEFINED__
#define __IWindowsParentalControlsCore_FWD_DEFINED__
typedef interface IWindowsParentalControlsCore IWindowsParentalControlsCore;
#endif 	/* __IWindowsParentalControlsCore_FWD_DEFINED__ */


#ifndef __IWindowsParentalControls_FWD_DEFINED__
#define __IWindowsParentalControls_FWD_DEFINED__
typedef interface IWindowsParentalControls IWindowsParentalControls;
#endif 	/* __IWindowsParentalControls_FWD_DEFINED__ */


#ifndef __IWPCProviderSupport_FWD_DEFINED__
#define __IWPCProviderSupport_FWD_DEFINED__
typedef interface IWPCProviderSupport IWPCProviderSupport;
#endif 	/* __IWPCProviderSupport_FWD_DEFINED__ */


#ifndef __WpcSettingsProvider_FWD_DEFINED__
#define __WpcSettingsProvider_FWD_DEFINED__

#ifdef __cplusplus
typedef class WpcSettingsProvider WpcSettingsProvider;
#else
typedef struct WpcSettingsProvider WpcSettingsProvider;
#endif /* __cplusplus */

#endif 	/* __WpcSettingsProvider_FWD_DEFINED__ */


#ifndef __WpcProviderSupport_FWD_DEFINED__
#define __WpcProviderSupport_FWD_DEFINED__

#ifdef __cplusplus
typedef class WpcProviderSupport WpcProviderSupport;
#else
typedef struct WpcProviderSupport WpcProviderSupport;
#endif /* __cplusplus */

#endif 	/* __WpcProviderSupport_FWD_DEFINED__ */


#ifndef __WindowsParentalControls_FWD_DEFINED__
#define __WindowsParentalControls_FWD_DEFINED__

#ifdef __cplusplus
typedef class WindowsParentalControls WindowsParentalControls;
#else
typedef struct WindowsParentalControls WindowsParentalControls;
#endif /* __cplusplus */

#endif 	/* __WindowsParentalControls_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_WpcApi_0000_0000 */
/* [local] */ 

/*******************************************************************************/
/*                                                                             */
/*    Copyright (C) Microsoft Corporation.  All rights reserved.                 */
/*                                                                             */
/*    Interfaces for Windows Parental Controls clients.                        */
/*                                                                             */
/*******************************************************************************/


extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0000_v0_0_s_ifspec;

#ifndef __IWPCProviderState_INTERFACE_DEFINED__
#define __IWPCProviderState_INTERFACE_DEFINED__

/* interface IWPCProviderState */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCProviderState;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50B6A267-C4BD-450b-ADB5-759073837C9E")
    IWPCProviderState : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Enable( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Disable( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCProviderStateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCProviderState * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCProviderState * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCProviderState * This);
        
        HRESULT ( STDMETHODCALLTYPE *Enable )( 
            __RPC__in IWPCProviderState * This);
        
        HRESULT ( STDMETHODCALLTYPE *Disable )( 
            __RPC__in IWPCProviderState * This);
        
        END_INTERFACE
    } IWPCProviderStateVtbl;

    interface IWPCProviderState
    {
        CONST_VTBL struct IWPCProviderStateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCProviderState_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCProviderState_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCProviderState_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCProviderState_Enable(This)	\
    ( (This)->lpVtbl -> Enable(This) ) 

#define IWPCProviderState_Disable(This)	\
    ( (This)->lpVtbl -> Disable(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCProviderState_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WpcApi_0000_0001 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagWPCFLAG_OVERRIDE
    {	WPCFLAG_APPLICATION	= 0x1
    } 	WPCFLAG_OVERRIDE;



extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0001_v0_0_s_ifspec;

#ifndef __IWPCProviderConfig_INTERFACE_DEFINED__
#define __IWPCProviderConfig_INTERFACE_DEFINED__

/* interface IWPCProviderConfig */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCProviderConfig;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEF54196-2D02-4a26-B6E5-D65AF295D0F1")
    IWPCProviderConfig : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUserSummary( 
            /* [in] */ __RPC__in BSTR bstrSID,
            /* [string][out] */ __RPC__deref_out_opt_string BSTR *pbstrUserSummary) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Configure( 
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [string][in] */ __RPC__in_string BSTR bstrSID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestOverride( 
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [string][in] */ __RPC__in_string BSTR bstrPath,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCProviderConfigVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCProviderConfig * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCProviderConfig * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCProviderConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserSummary )( 
            __RPC__in IWPCProviderConfig * This,
            /* [in] */ __RPC__in BSTR bstrSID,
            /* [string][out] */ __RPC__deref_out_opt_string BSTR *pbstrUserSummary);
        
        HRESULT ( STDMETHODCALLTYPE *Configure )( 
            __RPC__in IWPCProviderConfig * This,
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [string][in] */ __RPC__in_string BSTR bstrSID);
        
        HRESULT ( STDMETHODCALLTYPE *RequestOverride )( 
            __RPC__in IWPCProviderConfig * This,
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [string][in] */ __RPC__in_string BSTR bstrPath,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } IWPCProviderConfigVtbl;

    interface IWPCProviderConfig
    {
        CONST_VTBL struct IWPCProviderConfigVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCProviderConfig_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCProviderConfig_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCProviderConfig_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCProviderConfig_GetUserSummary(This,bstrSID,pbstrUserSummary)	\
    ( (This)->lpVtbl -> GetUserSummary(This,bstrSID,pbstrUserSummary) ) 

#define IWPCProviderConfig_Configure(This,hWnd,bstrSID)	\
    ( (This)->lpVtbl -> Configure(This,hWnd,bstrSID) ) 

#define IWPCProviderConfig_RequestOverride(This,hWnd,bstrPath,dwFlags)	\
    ( (This)->lpVtbl -> RequestOverride(This,hWnd,bstrPath,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCProviderConfig_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WpcApi_0000_0002 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagWPCFLAG_RESTRICTION
    {	WPCFLAG_NO_RESTRICTION	= 0,
	WPCFLAG_LOGGING_REQUIRED	= 0x1,
	WPCFLAG_WEB_FILTERED	= 0x2,
	WPCFLAG_HOURS_RESTRICTED	= 0x4,
	WPCFLAG_GAMES_BLOCKED	= 0x8,
	WPCFLAG_APPS_RESTRICTED	= 0x10
    } 	WPCFLAG_RESTRICTION;



extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0002_v0_0_s_ifspec;

#ifndef __IWPCSettings_INTERFACE_DEFINED__
#define __IWPCSettings_INTERFACE_DEFINED__

/* interface IWPCSettings */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8FDF6CA1-0189-47e4-B670-1A8A4636E340")
    IWPCSettings : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsLoggingRequired( 
            /* [out] */ __RPC__out BOOL *pfRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastSettingsChangeTime( 
            /* [out] */ __RPC__out SYSTEMTIME *pTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRestrictions( 
            /* [out] */ __RPC__out DWORD *pdwRestrictions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCSettings * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsLoggingRequired )( 
            __RPC__in IWPCSettings * This,
            /* [out] */ __RPC__out BOOL *pfRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastSettingsChangeTime )( 
            __RPC__in IWPCSettings * This,
            /* [out] */ __RPC__out SYSTEMTIME *pTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetRestrictions )( 
            __RPC__in IWPCSettings * This,
            /* [out] */ __RPC__out DWORD *pdwRestrictions);
        
        END_INTERFACE
    } IWPCSettingsVtbl;

    interface IWPCSettings
    {
        CONST_VTBL struct IWPCSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCSettings_IsLoggingRequired(This,pfRequired)	\
    ( (This)->lpVtbl -> IsLoggingRequired(This,pfRequired) ) 

#define IWPCSettings_GetLastSettingsChangeTime(This,pTime)	\
    ( (This)->lpVtbl -> GetLastSettingsChangeTime(This,pTime) ) 

#define IWPCSettings_GetRestrictions(This,pdwRestrictions)	\
    ( (This)->lpVtbl -> GetRestrictions(This,pdwRestrictions) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCSettings_INTERFACE_DEFINED__ */


#ifndef __IWPCGamesSettings_INTERFACE_DEFINED__
#define __IWPCGamesSettings_INTERFACE_DEFINED__

/* interface IWPCGamesSettings */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCGamesSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("95E87780-E158-489e-B452-BBB850790715")
    IWPCGamesSettings : public IWPCSettings
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsBlocked( 
            /* [in] */ GUID guidAppID,
            /* [out] */ __RPC__out DWORD *pdwReasons) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCGamesSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCGamesSettings * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCGamesSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCGamesSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsLoggingRequired )( 
            __RPC__in IWPCGamesSettings * This,
            /* [out] */ __RPC__out BOOL *pfRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastSettingsChangeTime )( 
            __RPC__in IWPCGamesSettings * This,
            /* [out] */ __RPC__out SYSTEMTIME *pTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetRestrictions )( 
            __RPC__in IWPCGamesSettings * This,
            /* [out] */ __RPC__out DWORD *pdwRestrictions);
        
        HRESULT ( STDMETHODCALLTYPE *IsBlocked )( 
            __RPC__in IWPCGamesSettings * This,
            /* [in] */ GUID guidAppID,
            /* [out] */ __RPC__out DWORD *pdwReasons);
        
        END_INTERFACE
    } IWPCGamesSettingsVtbl;

    interface IWPCGamesSettings
    {
        CONST_VTBL struct IWPCGamesSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCGamesSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCGamesSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCGamesSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCGamesSettings_IsLoggingRequired(This,pfRequired)	\
    ( (This)->lpVtbl -> IsLoggingRequired(This,pfRequired) ) 

#define IWPCGamesSettings_GetLastSettingsChangeTime(This,pTime)	\
    ( (This)->lpVtbl -> GetLastSettingsChangeTime(This,pTime) ) 

#define IWPCGamesSettings_GetRestrictions(This,pdwRestrictions)	\
    ( (This)->lpVtbl -> GetRestrictions(This,pdwRestrictions) ) 


#define IWPCGamesSettings_IsBlocked(This,guidAppID,pdwReasons)	\
    ( (This)->lpVtbl -> IsBlocked(This,guidAppID,pdwReasons) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCGamesSettings_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WpcApi_0000_0004 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagWPCFLAG_WEB_SETTING
    {	WPCFLAG_WEB_SETTING_NOTBLOCKED	= 0,
	WPCFLAG_WEB_SETTING_DOWNLOADSBLOCKED	= 0x1
    } 	WPCFLAG_WEB_SETTING;



extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0004_v0_0_s_ifspec;

#ifndef __IWPCWebSettings_INTERFACE_DEFINED__
#define __IWPCWebSettings_INTERFACE_DEFINED__

/* interface IWPCWebSettings */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCWebSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FFCCBDB8-0992-4c30-B0F1-1CBB09C240AA")
    IWPCWebSettings : public IWPCSettings
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSettings( 
            /* [out] */ __RPC__out DWORD *pdwSettings) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestURLOverride( 
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [in] */ __RPC__in LPCWSTR pcszURL,
            /* [in] */ DWORD cURLs,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(cURLs) LPCWSTR *ppcszSubURLs,
            /* [out] */ __RPC__out BOOL *pfChanged) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCWebSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCWebSettings * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCWebSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCWebSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsLoggingRequired )( 
            __RPC__in IWPCWebSettings * This,
            /* [out] */ __RPC__out BOOL *pfRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastSettingsChangeTime )( 
            __RPC__in IWPCWebSettings * This,
            /* [out] */ __RPC__out SYSTEMTIME *pTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetRestrictions )( 
            __RPC__in IWPCWebSettings * This,
            /* [out] */ __RPC__out DWORD *pdwRestrictions);
        
        HRESULT ( STDMETHODCALLTYPE *GetSettings )( 
            __RPC__in IWPCWebSettings * This,
            /* [out] */ __RPC__out DWORD *pdwSettings);
        
        HRESULT ( STDMETHODCALLTYPE *RequestURLOverride )( 
            __RPC__in IWPCWebSettings * This,
            /* [unique][in] */ __RPC__in_opt HWND hWnd,
            /* [in] */ __RPC__in LPCWSTR pcszURL,
            /* [in] */ DWORD cURLs,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(cURLs) LPCWSTR *ppcszSubURLs,
            /* [out] */ __RPC__out BOOL *pfChanged);
        
        END_INTERFACE
    } IWPCWebSettingsVtbl;

    interface IWPCWebSettings
    {
        CONST_VTBL struct IWPCWebSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCWebSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCWebSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCWebSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCWebSettings_IsLoggingRequired(This,pfRequired)	\
    ( (This)->lpVtbl -> IsLoggingRequired(This,pfRequired) ) 

#define IWPCWebSettings_GetLastSettingsChangeTime(This,pTime)	\
    ( (This)->lpVtbl -> GetLastSettingsChangeTime(This,pTime) ) 

#define IWPCWebSettings_GetRestrictions(This,pdwRestrictions)	\
    ( (This)->lpVtbl -> GetRestrictions(This,pdwRestrictions) ) 


#define IWPCWebSettings_GetSettings(This,pdwSettings)	\
    ( (This)->lpVtbl -> GetSettings(This,pdwSettings) ) 

#define IWPCWebSettings_RequestURLOverride(This,hWnd,pcszURL,cURLs,ppcszSubURLs,pfChanged)	\
    ( (This)->lpVtbl -> RequestURLOverride(This,hWnd,pcszURL,cURLs,ppcszSubURLs,pfChanged) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCWebSettings_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WpcApi_0000_0005 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagWPCFLAG_VISIBILITY
    {	WPCFLAG_WPC_VISIBLE	= 0,
	WPCFLAG_WPC_HIDDEN	= 0x1
    } 	WPCFLAG_VISIBILITY;



extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WpcApi_0000_0005_v0_0_s_ifspec;

#ifndef __IWindowsParentalControlsCore_INTERFACE_DEFINED__
#define __IWindowsParentalControlsCore_INTERFACE_DEFINED__

/* interface IWindowsParentalControlsCore */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWindowsParentalControlsCore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4FF40A0F-3F3B-4d7c-A41B-4F39D7B44D05")
    IWindowsParentalControlsCore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetVisibility( 
            /* [out] */ __RPC__out WPCFLAG_VISIBILITY *peVisibility) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserSettings( 
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCSettings **ppSettings) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWebSettings( 
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCWebSettings **ppSettings) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWebFilterInfo( 
            /* [out] */ __RPC__out GUID *pguidID,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt LPWSTR *ppszName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsParentalControlsCoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsParentalControlsCore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsParentalControlsCore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsParentalControlsCore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetVisibility )( 
            __RPC__in IWindowsParentalControlsCore * This,
            /* [out] */ __RPC__out WPCFLAG_VISIBILITY *peVisibility);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserSettings )( 
            __RPC__in IWindowsParentalControlsCore * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCSettings **ppSettings);
        
        HRESULT ( STDMETHODCALLTYPE *GetWebSettings )( 
            __RPC__in IWindowsParentalControlsCore * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCWebSettings **ppSettings);
        
        HRESULT ( STDMETHODCALLTYPE *GetWebFilterInfo )( 
            __RPC__in IWindowsParentalControlsCore * This,
            /* [out] */ __RPC__out GUID *pguidID,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt LPWSTR *ppszName);
        
        END_INTERFACE
    } IWindowsParentalControlsCoreVtbl;

    interface IWindowsParentalControlsCore
    {
        CONST_VTBL struct IWindowsParentalControlsCoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsParentalControlsCore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsParentalControlsCore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsParentalControlsCore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsParentalControlsCore_GetVisibility(This,peVisibility)	\
    ( (This)->lpVtbl -> GetVisibility(This,peVisibility) ) 

#define IWindowsParentalControlsCore_GetUserSettings(This,pcszSID,ppSettings)	\
    ( (This)->lpVtbl -> GetUserSettings(This,pcszSID,ppSettings) ) 

#define IWindowsParentalControlsCore_GetWebSettings(This,pcszSID,ppSettings)	\
    ( (This)->lpVtbl -> GetWebSettings(This,pcszSID,ppSettings) ) 

#define IWindowsParentalControlsCore_GetWebFilterInfo(This,pguidID,ppszName)	\
    ( (This)->lpVtbl -> GetWebFilterInfo(This,pguidID,ppszName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsParentalControlsCore_INTERFACE_DEFINED__ */


#ifndef __IWindowsParentalControls_INTERFACE_DEFINED__
#define __IWindowsParentalControls_INTERFACE_DEFINED__

/* interface IWindowsParentalControls */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWindowsParentalControls;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28B4D88B-E072-49e6-804D-26EDBE21A7B9")
    IWindowsParentalControls : public IWindowsParentalControlsCore
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetGamesSettings( 
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCGamesSettings **ppSettings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsParentalControlsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsParentalControls * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsParentalControls * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsParentalControls * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetVisibility )( 
            __RPC__in IWindowsParentalControls * This,
            /* [out] */ __RPC__out WPCFLAG_VISIBILITY *peVisibility);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserSettings )( 
            __RPC__in IWindowsParentalControls * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCSettings **ppSettings);
        
        HRESULT ( STDMETHODCALLTYPE *GetWebSettings )( 
            __RPC__in IWindowsParentalControls * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCWebSettings **ppSettings);
        
        HRESULT ( STDMETHODCALLTYPE *GetWebFilterInfo )( 
            __RPC__in IWindowsParentalControls * This,
            /* [out] */ __RPC__out GUID *pguidID,
            /* [unique][out][in] */ __RPC__deref_opt_inout_opt LPWSTR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetGamesSettings )( 
            __RPC__in IWindowsParentalControls * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPCWSTR pcszSID,
            /* [out] */ __RPC__deref_out_opt IWPCGamesSettings **ppSettings);
        
        END_INTERFACE
    } IWindowsParentalControlsVtbl;

    interface IWindowsParentalControls
    {
        CONST_VTBL struct IWindowsParentalControlsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsParentalControls_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsParentalControls_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsParentalControls_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsParentalControls_GetVisibility(This,peVisibility)	\
    ( (This)->lpVtbl -> GetVisibility(This,peVisibility) ) 

#define IWindowsParentalControls_GetUserSettings(This,pcszSID,ppSettings)	\
    ( (This)->lpVtbl -> GetUserSettings(This,pcszSID,ppSettings) ) 

#define IWindowsParentalControls_GetWebSettings(This,pcszSID,ppSettings)	\
    ( (This)->lpVtbl -> GetWebSettings(This,pcszSID,ppSettings) ) 

#define IWindowsParentalControls_GetWebFilterInfo(This,pguidID,ppszName)	\
    ( (This)->lpVtbl -> GetWebFilterInfo(This,pguidID,ppszName) ) 


#define IWindowsParentalControls_GetGamesSettings(This,pcszSID,ppSettings)	\
    ( (This)->lpVtbl -> GetGamesSettings(This,pcszSID,ppSettings) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsParentalControls_INTERFACE_DEFINED__ */


#ifndef __IWPCProviderSupport_INTERFACE_DEFINED__
#define __IWPCProviderSupport_INTERFACE_DEFINED__

/* interface IWPCProviderSupport */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWPCProviderSupport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41EBA572-23ED-4779-BEC1-8DF96206C44C")
    IWPCProviderSupport : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [out] */ __RPC__out GUID *pguidProvider) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWPCProviderSupportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWPCProviderSupport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWPCProviderSupport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWPCProviderSupport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IWPCProviderSupport * This,
            /* [out] */ __RPC__out GUID *pguidProvider);
        
        END_INTERFACE
    } IWPCProviderSupportVtbl;

    interface IWPCProviderSupport
    {
        CONST_VTBL struct IWPCProviderSupportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWPCProviderSupport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWPCProviderSupport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWPCProviderSupport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWPCProviderSupport_GetCurrent(This,pguidProvider)	\
    ( (This)->lpVtbl -> GetCurrent(This,pguidProvider) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWPCProviderSupport_INTERFACE_DEFINED__ */



#ifndef __WPCAPILib_LIBRARY_DEFINED__
#define __WPCAPILib_LIBRARY_DEFINED__

/* library WPCAPILib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_WPCAPILib;

EXTERN_C const CLSID CLSID_WpcSettingsProvider;

#ifdef __cplusplus

class DECLSPEC_UUID("355DFFAA-3B9F-435c-B428-5D44290BC5F2")
WpcSettingsProvider;
#endif

EXTERN_C const CLSID CLSID_WpcProviderSupport;

#ifdef __cplusplus

class DECLSPEC_UUID("BB18C7A0-2186-4be0-97D8-04847B628E02")
WpcProviderSupport;
#endif

EXTERN_C const CLSID CLSID_WindowsParentalControls;

#ifdef __cplusplus

class DECLSPEC_UUID("E77CC89B-7401-4c04-8CED-149DB35ADD04")
WindowsParentalControls;
#endif
#endif /* __WPCAPILib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     __RPC__in unsigned long *, __RPC__in HWND * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WowNT32.h ===
/*++ BUILD Version: 0001    // Increment this if a change has global effects

Copyright (c) 1995-1999, Microsoft Corporation

Module Name:

    wownt32.h

Abstract:

    Procedure declarations for functions in WOW32.DLL callable by
    3rd-party 32-bit thunking code.

--*/

#ifndef _WOWNT32_
#define _WOWNT32_

#if defined(_MSC_VER)
#if _MSC_VER > 1000
#pragma once
#endif
#endif

//
// 16:16 -> 0:32 Pointer translation.
//
// WOWGetVDMPointer will convert the passed in 16-bit address
// to the equivalent 32-bit flat pointer.  If fProtectedMode
// is TRUE, the function treats the upper 16 bits as a selector
// in the local descriptor table.  If fProtectedMode is FALSE,
// the upper 16 bits are treated as a real-mode segment value.
// In either case the lower 16 bits are treated as the offset.
//
// The return value is NULL if the selector is invalid.
//
// NOTE:  Limit checking is not performed in the retail build
// of Windows NT.  It is performed in the checked (debug) build
// of WOW32.DLL, which will cause NULL to be returned when the
// limit is exceeded by the supplied offset.
//

LPVOID WINAPI WOWGetVDMPointer(DWORD vp, DWORD dwBytes,
                               BOOL fProtectedMode);

//
// The following two functions are here for compatibility with
// Windows 95.  On Win95, the global heap can be rearranged,
// invalidating flat pointers returned by WOWGetVDMPointer, while
// a thunk is executing.  On Windows NT, the 16-bit VDM is completely
// halted while a thunk executes, so the only way the heap will
// be rearranged is if a callback is made to Win16 code.
//
// The Win95 versions of these functions call GlobalFix to
// lock down a segment's flat address, and GlobalUnfix to
// release the segment.
//
// The Windows NT implementations of these functions do *not*
// call GlobalFix/GlobalUnfix on the segment, because there
// will not be any heap motion unless a callback occurs.
// If your thunk does callback to the 16-bit side, be sure
// to discard flat pointers and call WOWGetVDMPointer again
// to be sure the flat address is correct.
//

LPVOID WINAPI WOWGetVDMPointerFix(DWORD vp, DWORD dwBytes,
                                  BOOL fProtectedMode);
VOID WINAPI WOWGetVDMPointerUnfix(DWORD vp);


//
// Win16 memory management.
//
// These functions can be used to manage memory in the Win16
// heap.  The following four functions are identical to their
// Win16 counterparts, except that they are called from Win32
// code.
//

WORD  WINAPI WOWGlobalAlloc16(WORD wFlags, DWORD cb);
WORD  WINAPI WOWGlobalFree16(WORD hMem);
DWORD WINAPI WOWGlobalLock16(WORD hMem);
BOOL  WINAPI WOWGlobalUnlock16(WORD hMem);

//
// The following three functions combine two common operations in
// one switch to 16-bit mode.
//

DWORD WINAPI WOWGlobalAllocLock16(WORD wFlags, DWORD cb, WORD *phMem);
WORD  WINAPI WOWGlobalUnlockFree16(DWORD vpMem);
DWORD WINAPI WOWGlobalLockSize16(WORD hMem, PDWORD pcb);

//
// Yielding the Win16 nonpreemptive scheduler
//
// The following two functions are provided for Win32 code called
// via Generic Thunks which needs to yield the Win16 scheduler so
// that tasks in that VDM can execute while the thunk waits for
// something to complete.  These two functions are functionally
// identical to calling back to 16-bit code which calls Yield or
// DirectedYield.
//

VOID WINAPI WOWYield16(VOID);
VOID WINAPI WOWDirectedYield16(WORD htask16);


//
// 16 <--> 32 Handle mapping functions.
//
// NOTE:  While some of these functions perform trivial
// conversions, these functions must be used to maintain
// compatibility with future versions of Windows NT which
// may require different handle mapping.
//

typedef enum _WOW_HANDLE_TYPE { /* WOW */
    WOW_TYPE_HWND,
    WOW_TYPE_HMENU,
    WOW_TYPE_HDWP,
    WOW_TYPE_HDROP,
    WOW_TYPE_HDC,
    WOW_TYPE_HFONT,
    WOW_TYPE_HMETAFILE,
    WOW_TYPE_HRGN,
    WOW_TYPE_HBITMAP,
    WOW_TYPE_HBRUSH,
    WOW_TYPE_HPALETTE,
    WOW_TYPE_HPEN,
    WOW_TYPE_HACCEL,
    WOW_TYPE_HTASK,
    WOW_TYPE_FULLHWND
} WOW_HANDLE_TYPE;

HANDLE WINAPI WOWHandle32 (WORD, WOW_HANDLE_TYPE);
WORD WINAPI WOWHandle16 (HANDLE, WOW_HANDLE_TYPE);

#define HWND_32(h16)      ((HWND)      (WOWHandle32(h16, WOW_TYPE_HWND)))
#define HMENU_32(h16)     ((HMENU)     (WOWHandle32(h16, WOW_TYPE_HMENU)))
#define HDWP_32(h16)      ((HDWP)      (WOWHandle32(h16, WOW_TYPE_HDWP)))
#define HDROP_32(h16)     ((HDROP)     (WOWHandle32(h16, WOW_TYPE_HDROP)))
#define HDC_32(h16)       ((HDC)       (WOWHandle32(h16, WOW_TYPE_HDC)))
#define HFONT_32(h16)     ((HFONT)     (WOWHandle32(h16, WOW_TYPE_HFONT)))
#define HMETAFILE_32(h16) ((HMETAFILE) (WOWHandle32(h16, WOW_TYPE_HMETAFILE)))
#define HRGN_32(h16)      ((HRGN)      (WOWHandle32(h16, WOW_TYPE_HRGN)))
#define HBITMAP_32(h16)   ((HBITMAP)   (WOWHandle32(h16, WOW_TYPE_HBITMAP)))
#define HBRUSH_32(h16)    ((HBRUSH)    (WOWHandle32(h16, WOW_TYPE_HBRUSH)))
#define HPALETTE_32(h16)  ((HPALETTE)  (WOWHandle32(h16, WOW_TYPE_HPALETTE)))
#define HPEN_32(h16)      ((HPEN)      (WOWHandle32(h16, WOW_TYPE_HPEN)))
#define HACCEL_32(h16)	  ((HACCEL)    (WOWHandle32(h16, WOW_TYPE_HACCEL)))
#define HTASK_32(h16)	  ((DWORD)     (WOWHandle32(h16, WOW_TYPE_HTASK)))
#define FULLHWND_32(h16)  ((HWND)      (WOWHandle32(h16, WOW_TYPE_FULLHWND)))

#define HWND_16(h32)      (WOWHandle16(h32, WOW_TYPE_HWND))
#define HMENU_16(h32)     (WOWHandle16(h32, WOW_TYPE_HMENU))
#define HDWP_16(h32)      (WOWHandle16(h32, WOW_TYPE_HDWP))
#define HDROP_16(h32)     (WOWHandle16(h32, WOW_TYPE_HDROP))
#define HDC_16(h32)       (WOWHandle16(h32, WOW_TYPE_HDC))
#define HFONT_16(h32)     (WOWHandle16(h32, WOW_TYPE_HFONT))
#define HMETAFILE_16(h32) (WOWHandle16(h32, WOW_TYPE_HMETAFILE))
#define HRGN_16(h32)      (WOWHandle16(h32, WOW_TYPE_HRGN))
#define HBITMAP_16(h32)   (WOWHandle16(h32, WOW_TYPE_HBITMAP))
#define HBRUSH_16(h32)    (WOWHandle16(h32, WOW_TYPE_HBRUSH))
#define HPALETTE_16(h32)  (WOWHandle16(h32, WOW_TYPE_HPALETTE))
#define HPEN_16(h32)      (WOWHandle16(h32, WOW_TYPE_HPEN))
#define HACCEL_16(h32)	  (WOWHandle16(h32, WOW_TYPE_HACCEL))
#define HTASK_16(h32)	  (WOWHandle16(h32, WOW_TYPE_HTASK))

//
// Generic Callbacks.
//
// WOWCallback16 can be used in Win32 code called
// from 16-bit (such as by using Generic Thunks) to call back to
// the 16-bit side.  The function called must be declared similarly
// to the following:
//
// LONG FAR PASCAL CallbackRoutine(DWORD dwParam);
//
// If you are passing a pointer, declare the parameter as such:
//
// LONG FAR PASCAL CallbackRoutine(VOID FAR *vp);
//
// NOTE: If you are passing a pointer, you'll need to get the
// pointer using WOWGlobalAlloc16 or WOWGlobalAllocLock16
//
// If the function called returns a WORD instead of a DWORD, the
// upper 16 bits of the return value is undefined.  Similarly, if
// the function called has no return value, the entire return value
// is undefined.
//
// WOWCallback16Ex allows any combination of arguments up to
// WCB16_MAX_CBARGS bytes total to be passed to the 16-bit routine.
// cbArgs is used to properly clean up the 16-bit stack after calling
// the routine.  Regardless of the value of cbArgs, WCB16_MAX_CBARGS
// bytes will always be copied from pArgs to the 16-bit stack.  If
// pArgs is less than WCB16_MAX_CBARGS bytes from the end of a page,
// and the next page is inaccessible, WOWCallback16Ex will incur an
// access violation.
//
// If cbArgs is larger than the WCB16_MAX_ARGS which the running
// system supports, the function returns FALSE and GetLastError
// returns ERROR_INVALID_PARAMETER.  Otherwise the function
// returns TRUE and the DWORD pointed to by pdwRetCode contains
// the return code from the callback routine.  If the callback
// routine returns a WORD, the HIWORD of the return code is
// undefined and should be ignored using LOWORD(dwRetCode).
//
// WOWCallback16Ex can call routines using the PASCAL and CDECL
// calling conventions.  The default is to use the PASCAL
// calling convention.  To use CDECL, pass WCB16_CDECL in the
// dwFlags parameter.
//
// The arguments pointed to by pArgs must be in the correct
// order for the callback routine's calling convention.
// To call the PASCAL routine SetWindowText,
//
// LONG FAR PASCAL SetWindowText(HWND hwnd, LPCSTR lpsz);
//
// pArgs would point to an array of words:
//
// WORD SetWindowTextArgs[] = {OFFSETOF(lpsz), SELECTOROF(lpsz), hwnd};
//
// In other words, the arguments are placed in the array in reverse
// order with the least significant word first for DWORDs and offset
// first for FAR pointers.
//
// To call the CDECL routine wsprintf, for example
//
// LPSTR lpszFormat = "%d %s";
// int __cdecl wsprintf(lpsz, lpszFormat, nValue. lpszString);
//
// pArgs would point to the array:
//
// WORD wsprintfArgs[] = {OFFSETOF(lpsz), SELECTOROF(lpsz),
//                        OFFSETOF(lpszFormat), SELECTOROF(lpszFormat),
//                        nValue,
//                        OFFSETOF(lpszString), SELECTOROF(lpszString)};
//
// In other words, the arguments are placed in the array in the order
// listed in the function prototype with the least significant word
// first for DWORDs and offset first for FAR pointers.
//

DWORD WINAPI WOWCallback16(DWORD vpfn16, DWORD dwParam);

#define WCB16_MAX_CBARGS (16)

#define WCB16_PASCAL     (0x0)
#define WCB16_CDECL      (0x1)

BOOL WINAPI WOWCallback16Ex(
                DWORD  vpfn16,
                DWORD  dwFlags,
                DWORD  cbArgs,
                PVOID  pArgs,
                PDWORD pdwRetCode
                );

#endif /* !_WOWNT32_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpframework.h ===
/*++

   Copyright    (c)    2004    Microsoft Corporation

   Module  Name :
     wp_framework.h

   Abstract:

    Definition of 
    - IWorkerProcessFramework and related data and interfaces
    - IProtocolManager and related interfaces


    Protocol manager is a module that gets loaded by worker process in order 
    to handle traffic for a protocol. The actual startup/stopping of protocol 
    activity happens by starting/stopping protocol ListenerChannels.
    
    Protocol manager is expected to handle
    - protocol ListenerChannel commands 
    - health/lifetime monitoring for the internal activity 
    - custom actions (aka RSCA queries/functions)
    - provide custom interfaces what other protocol managers may leverage 
      (it is meant to allow for protocol managers or their internal components
      to share objects with other protocol managers)


   Worker process framework is set of interfaces available in the worker 
   process that are presented to protocol managers.  

   Worker process framework allows protocol managers to
   - retrieve the Config interface to be used within the worker process. 
   - retrieve certain cooked values such as AppPool name that protocol managers
     may need
   - report unhealthy events
   - load another protocol manager to retrieve custom interface
   - some additional utility functions (such as one that returns site ID and 
     virtual path for given AppID)
   
--*/

#ifndef _WP_FRAMEWORK_H_
#define _WP_FRAMEWORK_H_


#include <unknwn.h>

//
// Forward declarations
//

class  IProtocolManager;

//
// Simple refcounted base class 
//

class IWpfReferencedObject
{
public:
    virtual
    ULONG 
    AddRef(
        VOID
    ) = 0;

    virtual
    ULONG 
    Release
    (
        VOID
    ) = 0;
    
};

//
// IWorkerProcessFramework related interfaces
//

// 
// WorkerProcessFramework implements multiple interfaces
// that are used by IProtocolManager instances to retrieve
// configuration/settings and perform actions related to the worker process
// monitoring
//


enum WPF_INTERFACE_ID_ENUM
{
    // retrieve native config interface
    WPF_CONFIG_API_ID = 1,  
    
    // helps to translate application ID to site and virtual path
    WPF_APPLICATION_INFO_UTIL_ID,     
    
    // exposes some settings that have process wide impact such
    // as recycling counters, CLR version ...
    WPF_SETTINGS_ID,     

    // way to request a recycle, shutdown worker pocess
    WPF_ACTIONS_ID,      
    
    // way to ask worker process framework to
    // load a protocol manager and request custom interface
    // of that. This interface allows multiple protocol managers
    // to share objects between them
    //
    WPF_EXPOSE_PROTOCOL_MANAGER_CUSTOM_INTERFACE_ID,  

    // way to get at preload information for an application
    WPF_APPLICATION_PRELOAD_INFO_UTIL_ID,
};


class IWorkerProcessFramework: public IWpfReferencedObject
{
public:

    virtual
    HRESULT 
    GetWpfInterface(
        IN  WPF_INTERFACE_ID_ENUM  WpfInterfaceId,
        OUT PVOID*                 ppInterface 
    ) = 0;

    virtual
    HRESULT 
    GetCustomInterface(
        IN  DWORD                           InterfaceId,
        OUT PVOID*                          ppInterface 
    ) = 0;

    //
    // return the IWorkerProcessFramework version
    // (it is meant to allow consumer to determine
    // what interfaces are available for retrieval)
    //
    virtual
    HRESULT 
    GetInterfaceVersion(
        OUT PDWORD      pdwMajorVersion,
        OUT PDWORD      pdwMinorVersion
    ) = 0;
};

//
// Interface ID: WPF_APPLICATION_INFO_ID
//
// Exposes helper function to retrieve SiteID and Virtual path for the 
// given AppId
//

class IWpfApplicationInfoUtil: public IWpfReferencedObject
{
public:
    virtual 
    HRESULT 
    GetApplicationPropertiesFromAppId(
        IN                                 PCWSTR      pszAppId, 
        __out_ecount_opt(*pcchVirtualPath) PWSTR       pszVirtualPath,
        OUT                                DWORD *     pcchVirtualPath,
        OUT                                DWORD *     pdwSiteId ) = 0;
};


//
// enums used by IWpfSettings (WFP_SETTINGS_ID) interface
// 
    
enum WPF_SETTINGS_STRING_ENUM
{
    CLR_VERSION,
    APP_POOL_NAME,
    APP_HOST_FILE_NAME,
    ROOT_WEB_CONFIG_FILE_NAME,
    CLR_CONFIG_FILE_NAME
};

enum WPF_SETTINGS_DWORD_ENUM
{
    PERIODIC_RESTART_REQUESTS = 1,
    PERIODIC_RESTART_TIME,
    IDLE_TIMEOUT,
    MANAGED_PIPELINE_MODE,
};

enum WPF_SETTINGS_ULONGLONG_ENUM
{
    PERIODIC_RESTART_VIRTUAL_MEMORY,
    PERIODIC_RESTART_PRIVATE_MEMORY,
};

enum WPF_SETTINGS_BOOL_ENUM
{
    ENABLED_CENTRAL_BINARY_LOGGING,
    ENABLED_HOSTABLE_WEB_CORE
};

enum WPF_SETTINGS_HANDLE_ENUM
{
    ANONYMOUS_USER_TOKEN
};

//
// Interface ID: WPF_SETTINGS_ID
//
// Exposes Application Pool / worker process related settings
// (based on applicationhost.config settings)
//

class IWpfSettings : public IWpfReferencedObject
{
public:
    virtual
    HRESULT
    GetDwordProperty(
        IN  WPF_SETTINGS_DWORD_ENUM  SettingId,
        OUT DWORD*                   pdwSetting
    ) = 0;

    virtual
    HRESULT
    GetUlonglongProperty(
        IN  WPF_SETTINGS_ULONGLONG_ENUM  SettingId,
        OUT ULONGLONG*                   pSetting
    ) = 0;

    virtual
    HRESULT
    GetStringProperty(
        IN                             WPF_SETTINGS_STRING_ENUM  SettingId,
        __out_ecount_opt(*pcchSetting) PWSTR                     pszSetting,
        OUT                            DWORD*                    pcchSetting
    ) = 0;
    
    virtual
    HRESULT
    GetBoolProperty(
        IN  WPF_SETTINGS_BOOL_ENUM  SettingId,
        OUT BOOL *                  pfSetting
    ) = 0;

    virtual
    HRESULT
    GetHandleProperty(
        IN  WPF_SETTINGS_HANDLE_ENUM  SettingId,
        OUT HANDLE *                  phSetting
    ) = 0;
};


//
// Interface ID: WPF_ACTIONS_ID
//
// Allows protocol manager to request recycling or
// allows to report health issues (FailWorkerProcess)
//


class IWpfActions : public IWpfReferencedObject
{
public:

    virtual
    VOID
    RecycleWorkerProcess(
        IN PCWSTR   pszReason
    ) = 0;
    
    virtual
    VOID
    FailWorkerProcess(
        IN PCWSTR   pszReason,
        IN HRESULT  hrFailureToReport,
        IN BOOL     fFailOnNextPing = FALSE        
    ) = 0;
};

//
// Interface ID: WPF_EXPOSE_PROTOCOL_MANAGER_CUSTOM_INTERFACE_ID
//
// Some protocol managers may have dependencies on other protocol managers
// (for reasons such as controling the lifetime of a shared singleton
// object). Use of this interface is expected to be very limited.
//

class IWpfExposeProtocolManagerCustomInterface: public IWpfReferencedObject
{
public:

    //
    // Load the given protocol manager and retrieve the requested interface
    // The meaning of the call is to enable one protocol manager to leverage 
    // some functionality implemented in other protocol manager.
    // Note that we don't allow full access to ProtocolManager interfaces 
    // because most of them are only meant for the interaction with 
    // the Worker Process Framework.
    //
    // Also note that when done using custom interface it is necessary 
    // to release the reference to custom interface not later then in 
    // Shutdown() call.
    //

    virtual
    HRESULT
    LoadProtocolManagerAndGetCustomInterface(
        IN PCWSTR                   pProtocolManagerDll,
        IN PCWSTR                   pProtocolManagerDllInitFunction,
        IN DWORD                    dwCustomInterfaceId,
        OUT PVOID*                  ppCustomInterface
    ) = 0;

};

//
// IProtocolManager related interfaces
// - exposed on the Protocol Manager for the Worker Process Framework to use    
//

class IWpfListenerChannelCallback;


//
// IProtocolManager interface and related enum
// listing supported interfaces
//

enum PM_INTERFACE_ID_ENUM
{
    // Protocol ListenerChannel management interface
    PM_LISTENER_CHANNEL_MANAGER_ID = 1,  
    
    // Health/ idle monitoring interface
    PM_HEALTH_AND_IDLE_MONITOR_ID,     
    
    // Custom actions interface (for RSCA query)
    PM_CUSTOM_ACTIONS_ID,  

    // Application preload support
    PM_APPLICATION_PRELOAD_ID,
};

//
// Finally the actual declaration of the IProtocolManager
//

class IProtocolManager   : public IWpfReferencedObject
{
public:
    virtual
    HRESULT 
    GetPmInterface(
        IN  PM_INTERFACE_ID_ENUM  PmInterfaceId,
        OUT PVOID*                ppInterface 
    ) = 0;

    
    virtual
    HRESULT 
    GetCustomInterface(
        IN  DWORD                           InterfaceId,
        OUT PVOID*                          ppInterface 
    ) = 0;
    
    virtual 
    HRESULT 
    Shutdown(
        IN BOOL             fImmediate
    ) = 0;

};


//
// Callback class used by IPmMonitor (PM_MONITOR_ID) interface
//

class IHealthStatusCallback: public IWpfReferencedObject
{
public:
   virtual 
    HRESULT 
    ReportHealth( 
        BOOL fHealthy
    ) = 0;   
};

//
// Interface ID: PM_HEALTH_AND_IDLE_MONITOR_ID
// IProtocolManager needs to expose health/ recycling monitoring means
//

class IPmHealthAndIdleMonitor : public IWpfReferencedObject
{
public:

    virtual 
    HRESULT 
    CheckIdle(
        OUT BOOL *pfIdle
    ) = 0;

    virtual 
    HRESULT 
    CheckHealth(   // health ping response
        IHealthStatusCallback * pIHealthStatusCallback
    ) = 0;    
};

//
// Callback class used by IPmCustomActions (PM_CUSTOM_ACTIONS_PM) interface
// 

class ICustomActionResultCallback
        : public IWpfReferencedObject
{
public:
    virtual
    HRESULT
    ReportResult( 
        IN HRESULT              hrStatus,
        IN PBYTE                pbResponse,
        IN DWORD                cbResponse
    ) = 0;
};

//
// Interface ID: WPF_APPLICATION_PRELOAD_INFO_UTIL_ID
//
// Exposes helper function to retrieve SiteID and Virtual path for the 
// given AppId
//
class IWpfApplicationPreloadUtil : public IWpfReferencedObject
{
public:
    virtual 
    HRESULT
    GetApplicationPreloadInfo(
        IN PCWSTR pszConfigPath,
        OUT BOOL * pfEnabled,
        OUT BSTR * pbstrType,
        OUT SAFEARRAY ** psaPreloadValues
    ) = 0;

    virtual
    HRESULT
    ReportApplicationPreloadFailure(
        IN PCWSTR pszConfigPath,
        IN HRESULT hrFailureCode,
        IN PCWSTR pszErrorString
    ) = 0;
};


class IPmApplicationPreload : public IWpfReferencedObject
{
public:

    virtual
    HRESULT
    PreloadApplication(
        IN DWORD dwSiteId,
        IN PCWSTR pszAppConfigPath
    ) = 0;
};

//
// Interface ID: PM_CUSTOM_ACTIONS_ID
// IProtocolManager needs to expose a way for Custom actions
// (so that custom queries such as RSCA query can be implemented)
//

class IPmCustomActions : public  IWpfReferencedObject
{
public:

    //
    // RunCustomAction can report results back
    // by using a callback interface
    //

    virtual
    HRESULT
    RunCustomAction(
        IN PCWSTR   pszFunctionName,
        IN PCWSTR   pszFunctionArgs,
        IN ICustomActionResultCallback * pCompletionCallbackClass
    ) = 0 ;

};

//
// Used by IPmListenerChannelManager (PM_LISTENER_CHANNEL_MANAGER_ID) 
// Interface ListenerChannelCallback provides notifications about 
// ListenerChannel status changes from Protocol managers.
// It also allows protocol managers to access extra parameters/blob
// that is communicated to worker process when ListenerChannels
// are asked to be started
//

class IWpfListenerChannelCallback : public IWpfReferencedObject
{
public:
    virtual 
    HRESULT 
    ReportStarted(
        VOID
    ) = 0;

    virtual 
    HRESULT 
    ReportStopped(
        HRESULT hr
    ) = 0;

    
    virtual 
    HRESULT 
    ReportMessageReceived(
        VOID
    ) = 0;

    virtual 
    HRESULT 
    GetId(
        OUT DWORD* pdwListenerChannelId
    ) = 0;

    virtual 
    HRESULT 
    GetBlob(
        IN OUT PBYTE pBlob, 
        IN OUT DWORD* pcbBlob 
    ) = 0;
};

//
// Interface ID: PM_LISTENER_CHANNEL_MANAGER_ID
// IProtocolManager needs to expose interface that allows
// controlling ListenerChannels (starting and stopping them)
//

class IPmListenerChannelManager: public IWpfReferencedObject
{
public:

    // Function will ask that a ListenerChannel be launched for
    // a protocol.
    virtual
    HRESULT
    StartListenerChannel(
        IN PCWSTR                          protocolId,
        IN IWpfListenerChannelCallback *   pListenerChannelCallback 
    ) = 0;

    virtual
    HRESULT 
    StopListenerChannel(
        IN PCWSTR                        protocolId,
        IN IWpfListenerChannelCallback * pListenerChannelCallback,
        IN BOOL                          fImmediate
    ) = 0;

    
};


//
// Default entrypoint of the protocol manager dll that allows worker 
// process to instantiate the ProtocolManager instance
//

#define DEFAULT_PROTOCOL_MANAGER_INIT_FUNCTION      L"GetProtocolManager"

typedef HRESULT (*PFN_GET_PROTOCOL_MANAGER)
                    ( IN  IWorkerProcessFramework * pWpFramework,
                      OUT IProtocolManager **       ppProtocolManager );


//
// Entry point for the Managed Runtime Loader method, which can be used
// to customize the loading of the Managed Runtime.
//

#define MANAGED_RUNTIME_LOADER_FUNCTION             "LoadManagedRuntime"

HRESULT __stdcall LoadManagedRuntime(
    PCWSTR pwszRuntimeVersion,
    IUnknown ** ppManagedRuntimeHost );

// Corresponding function typedef
typedef HRESULT (__stdcall *PFNLoadManagedRuntime)(
    PCWSTR pwszRuntimeVersion,
    IUnknown ** ppManagedRuntimeHost );


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpdmtpextensions.h ===
//=============================================================================
//
// @module      WpdMtpExtensions.h
//
// @created     12-08-2004
//
// @abstract    Contains WPD definitions for working with MTP vendor-extended functionalities
//
// @copyright   (C) COPYRIGHT MICROSOFT CORPORATION, 2004
//
//=============================================================================

/**************************************************************************** 
* This section defines WPD commands for MTP vendor-extended operations
****************************************************************************/
// {4D545058-1A2E-4106-A357-771E0819FC56}
DEFINE_GUID( WPD_CATEGORY_MTP_EXT_VENDOR_OPERATIONS , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 );

//
// MTP extended commands for WPD_CATEGORY_MTP_EXT_VENDOR_OPERATIONS
//
// Cmd Key: WPD_COMMAND_MTP_EXT_GET_SUPPORTED_VENDOR_OPCODES
// Usage:   queries for vendor extended operation codes
// Inputs:  None
// Outputs: WPD_PROPERTY_MTP_EXT_VENDOR_OPERATION_CODES: an IPortableDevicePropVariantCollection (of VT_UI4)
//                                which contains all vendor-extended operation codes 
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_GET_SUPPORTED_VENDOR_OPCODES , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 11 ); 

//
// Cmd Key: WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITHOUT_DATA_PHASE 
// Usage:   sends a MTP command block that no data phase follows
// Inputs:  WPD_PROPERTY_MTP_EXT_OPERATION_CODE (VT_UI4): identifies the vendor-extended MTP operation code
//          WPD_PROPERTY_MTP_EXT_OPERATION_PARAMS: An IPortableDevicePropVariantCollection (of VT_UI4)
//                                                 which identifies the required params for the vendor operation code.
// Outputs: WPD_PROPERTY_MTP_EXT_RESPONSE_CODE: [VT_UI4] the response code to the vendor operation code, and 
//          WPD_PROPERTY_MTP_EXT_RESPONSE_PARAMS: An IPortableDevicePropVariantCollection (of VT_UI4) identifying response params if any (could be empty)
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITHOUT_DATA_PHASE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 12 ); 

//
// Cmd Key: WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_READ 
// Usage:   sends a MTP command block followed by a data phase with data from Device to Host
// Inputs:  WPD_PROPERTY_MTP_EXT_OPERATION_CODE (VT_UI4): identifies the vendor-extended MTP operation code
//          WPD_PROPERTY_MTP_EXT_OPERATION_PARAMS: An IPortableDevicePropVariantCollection (of VT_UI4)
//                                                 which identifies the required params for the vendor operation code.
// Outputs: WPD_PROPERTY_MTP_EXT_TRANSFER_TOTAL_DATA_SIZE: [VT_UI8] Returns the total data size in bytes (excluding any overhead) coming from device.
//                                                         if Devie reports unknown datasize (0xFFFFFFFF), call ReadData() repeatedly until a short chunk received
//          WPD_PROPERTY_MTP_EXT_OPTIMAL_TRANSFER_BUFFER_SIZE: [VT_UI4] Returns the optimal size of the transfer buffer
//          WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT: [VT_LPWSTR] Returned as a context idetifier for subsequent data transfer 
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_READ , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 13 ); 

//
// Cmd Key: WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_WRITE 
// Usage:   sends a MTP command block followed by a data phase with data from Host to Device 
// Inputs:  WPD_PROPERTY_MTP_EXT_OPERATION_CODE (VT_UI4): identifies the vendor-extended MTP operation code
//          WPD_PROPERTY_MTP_EXT_OPERATION_PARAMS: An IPortableDevicePropVariantCollection (of VT_UI4)
//                                                 which identifies the required params for the vendor operation code.
//          WPD_PROPERTY_MTP_EXT_TRANSFER_TOTAL_DATA_SIZE: [VT_UI8] Specifies the total data size in bytes (excluding any overhead) to be sent to device
// Outputs: WPD_PROPERTY_MTP_EXT_OPTIMAL_TRANSFER_BUFFER_SIZE: [VT_UI4] Returns the optimal size of the transfer buffer
//          WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT: [VT_LPWSTR] Returned as a context idetifier for subsequent data transfer 
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_WRITE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 14 );

//
// Cmd Key: WPD_COMMAND_MTP_EXT_READ_DATA 
// Usage:   receives a chunk of data from device following WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_READ
// Inputs:  WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT: [VT_LPWSTR] The context idetifier returned in previous calls 
//          WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_READ: [VT_UI4] specifies the next number of bytes to read.
//          WPD_PROPERTY_MTP_EXT_TRANSFER_DATA: [VT_VECTOR|VT_UI1] specifies the buffer to which the data from device will be copied
// Outputs: WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_READ: [VT_UI4] returns actual number of bytes (no overhead) received from device in a read call 
//          WPD_PROPERTY_MTP_EXT_TRANSFER_DATA: [VT_VECTOR|VT_UI1] Returns the buffer with received data
//          
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_READ_DATA , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 15 ); 

//
// Cmd Key: WPD_COMMAND_MTP_EXT_WRITE_DATA 
// Usage:   sends a chunk of data to device following WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_WRITE
// Inputs:  WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT: [VT_LPWSTR] The context idetifier returned in previous calls 
//          WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_WRITE: [VT_UI4] specifies the next number of bytes to write.
//          WPD_PROPERTY_MTP_EXT_TRANSFER_DATA: [VT_VECTOR|VT_UI1] specifies the buffer which contains the data to send to device 
// Outputs: WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_WRITTEN: [VT_UI4] returns actual number of bytes (no overhead) sent to device in a write call 
//    
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_WRITE_DATA , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 16 );

//
// Cmd Key: WPD_COMMAND_MTP_EXT_END_DATA_TRANSFER 
// Usage:   completes a data transfer and read response from device. The transfer is initiated by either 
//              WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_READ, or WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_WRITE
// Inputs:  WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT: [VT_LPWSTR] The context idetifier returned in previous calls 
// Outputs: WPD_PROPERTY_MTP_EXT_RESPONSE_CODE: [VT_UI4] the response code to the vendor operation code, and 
//          WPD_PROPERTY_MTP_EXT_RESPONSE_PARAMS: An IPortableDevicePropVariantCollection (of VT_UI4) identifying response params if any (could be empty)
//  
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_END_DATA_TRANSFER , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 17 );  

//
// Cmd Key: WPD_COMMAND_MTP_EXT_GET_VENDOR_EXTENSION_DESCRIPTION
// Usage:   retrieves the vendor extension description string (as defined by DeviceInfo dataset)
// Inputs:  None
// Outputs: WPD_PROPERTY_MTP_EXT_VENDOR_EXTENSION_DESCRIPTION: [VT_LPWSTR] contains the vendor extension description string 
DEFINE_PROPERTYKEY( WPD_COMMAND_MTP_EXT_GET_VENDOR_EXTENSION_DESCRIPTION , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 18 ); 

// Command Parameters 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_OPERATION_CODE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1001 );    // [ VT_UI4 ] : Input param which identifies the vendor-extended MTP operation code
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_OPERATION_PARAMS , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1002 );    // [ VT_UNKNOWN ] : Input IPortableDevicePropVariantCollection (of VT_UI4) specifying the params for the vendor operation
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_RESPONSE_CODE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1003 );    // [ VT_UI4 ] : Output param which identifies the response code for the vendor operation
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_RESPONSE_PARAMS , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1004 );    // [ VT_UNKNOWN ] : Returns an IPortableDevicePropVariantCollection (of VT_UI4) of response params for the vendor operation
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_VENDOR_OPERATION_CODES , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1005 );    // [ VT_UNKNOWN ] : Returns an IPortableDevicePropVariantCollection (of VT_UI4) of Vendor-extended MTP codes 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1006 );    // [ VT_LPWSTR ] : Returned as a context idetifier (a string value) for subsequent data transfer 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_TOTAL_DATA_SIZE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1007 );    // [ VT_UI8 ] : Input (when writing data) or output (when reading data) param which specifies total data size in bytes (excluding any overhead)
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_READ , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1008 ); // [ VT_UI4 ] : Input param specifying the number of bytes to read from device in a series of read calls 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_READ , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1009 ); // [ VT_UI4 ] : Output param specifying the actual number of bytes (no overhead) received from device in a read call 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_WRITE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1010 ); // [ VT_UI4 ] : Input specifying the number of bytes to send to device in a series of write calls
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_WRITTEN , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1011 ); // [ VT_UI4 ] : Returns the actual number of bytes (no overhead) sent to device in a write call 
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_TRANSFER_DATA , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1012 ); // [ VT_VECTOR|VT_UI1 ] : Stores the binary data to transfer from/to device
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_OPTIMAL_TRANSFER_BUFFER_SIZE , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1013 ); // [ VT_UI4 ] : Returns the optimal size of the transfer buffer
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_VENDOR_EXTENSION_DESCRIPTION , 0x4d545058, 0x1a2e, 0x4106, 0xa3, 0x57, 0x77, 0x1e, 0x8, 0x19, 0xfc, 0x56 , 1014 ); // [ VT_LPWSTR ] : Returns vendor extension description string


/**************************************************************************** 
* This section defines the GUID for MTP Vendor-extended object properties 
****************************************************************************/
//
// Microsoft MTP driver combines this GUID and any vendor-extended MTP object property code (as pid) 
// to construct a WPD PROPERTYKEY, which is reported to WPD applications as a WPD property.
// For example, vendor extended object prop code, 0xD801, will be reported as WPD PROPERTYKEY:
// 	{4D545058-4FCE-4578-95C8-8698A9BC0F49}\D801
//
DEFINE_GUID( WPD_PROPERTIES_MTP_VENDOR_EXTENDED_OBJECT_PROPS , 0x4d545058, 0x4fce, 0x4578, 0x95, 0xc8, 0x86, 0x98, 0xa9, 0xbc, 0xf, 0x49 );


/**************************************************************************** 
* This section defines the GUID for MTP Vendor-extended device properties 
****************************************************************************/
//
// Microsoft MTP driver combines this GUID and any vendor-extended MTP device property code (as pid) 
// to construct a WPD PROPERTYKEY, which is reported to WPD applications as a WPD property.
// For example, vendor extended device prop code, 0xD001, will be reported as WPD PROPERTYKEY:
// 	{4D545058-8900-40b3-8F1D-DC246E1E8370}\D001
//
DEFINE_GUID( WPD_PROPERTIES_MTP_VENDOR_EXTENDED_DEVICE_PROPS , 0x4d545058, 0x8900, 0x40b3, 0x8f, 0x1d, 0xdc, 0x24, 0x6e, 0x1e, 0x83, 0x70 );


/**************************************************************************** 
* This section defines the mapping between WPD formats and MTP Vendor-extended formats
****************************************************************************/
//
// For a MTP vendor-extended format to work with WPD, Microsoft MTP driver creates a new WPD format GUID by combining the vendor 
// format code (UINT16) and WPD_OBJECT_FORMAT_UNSPECIFIED except its highest 16 bits (replaced by the vendor format code).
// For example, vendor-extended format code, 0xB001, will be reported as WPD format GUID:
//	{B0010000-AE6C-4804-98BA-C57B46965FE7}
//


/**************************************************************************** 
* This section defines the mapping between WPD event GUIDs and MTP Vendor-extended event codes
****************************************************************************/
//
// For a MTP vendor-extended event to work with WPD, Microsoft MTP driver creates a new WPD event GUID by 
// replacing the highest 16 bits of WPD_EVENT_MTP_VENDOR_EXTENDED_EVENTS with the vendor event code (UINT16).
// For example, vendor-extended event code, 0xC001, will be reported as WPD event GUID:
//	{C0010000-5738-4ff2-8445-BE3126691059}
//
DEFINE_GUID( WPD_EVENT_MTP_VENDOR_EXTENDED_EVENTS , 0x00000000, 0x5738, 0x4ff2, 0x84, 0x45, 0xbe, 0x31, 0x26, 0x69, 0x10, 0x59);


/**************************************************************************** 
* This section defines the WPD property key for event parameters of a vendor-extended event
****************************************************************************/
//
// Microsoft MTP driver reports a vendor-extended event to WPD with:
//      WPD_EVENT_PARAMETER_EVENT_ID: the WPD event GUID defined above; and 
//      WPD_PROPERTY_MTP_EXT_EVENT_PARAMS: a collection of PROPVARIANTs which map to parameters of the event.
// If there is no parameters for the event, the collection will be empty.
//
//	{4D545058-EF88-4e4d-95C3-4F327F728A96}
DEFINE_PROPERTYKEY( WPD_PROPERTY_MTP_EXT_EVENT_PARAMS , 0x4d545058, 0xef88, 0x4e4d, 0x95, 0xc3, 0x4f, 0x32, 0x7f, 0x72, 0x8a, 0x96 , 1011 );    // [ VT_UNKNOWN ] : Returns an IPortableDevicePropVariantCollection (of VT_UI4) of event params for a vendor-extended event
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WPPstMsg.h ===
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: WPP_ERROR_FIRST
//
// MessageText:
//
//  WebPost Provider first error message.
//
#define WPP_ERROR_FIRST                  0x40042380L

//
// MessageId: WPP_POST_POSTING_URL_ERROR
//
// MessageText:
//
//  The URL you selected, %1, is invalid.
//
#define WPP_POST_POSTING_URL_ERROR       0xC0042381L

//
// MessageId: WPP_POST_POSTING_SERVER_ERROR
//
// MessageText:
//
//  The Web server returned the following error: %1.
//
#define WPP_POST_POSTING_SERVER_ERROR    0xC0042382L

//
// MessageId: WPP_POST_POSTING_NO_RESPONSE_ERROR
//
// MessageText:
//
//  The Web server either is not responding or returned an unrecognized response.
//
#define WPP_POST_POSTING_NO_RESPONSE_ERROR 0xC0042383L

//
// MessageId: WPP_ERROR_LAST
//
// MessageText:
//
//  WebPost Provider last error message.
//
#define WPP_ERROR_LAST                   0x400423FFL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wpcevent.h ===
///////////////////////////////////////////////////////////////////////////////
//
//  File:  WpcEvent.h
//
//  Comments:
//      This file defines the Windows Parental Controls interfaces and events
//
//  Copyright (C) 2005 Microsoft Corporation  All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once 

#include <evntprov.h>

//
// Reasons
//
typedef enum tagWPCFLAG_ISBLOCKED
{
    WPCFLAG_ISBLOCKED_NOTBLOCKED            = 0x00000000,
    WPCFLAG_ISBLOCKED_IMBLOCKED             = 0x00000001,
    WPCFLAG_ISBLOCKED_EMAILBLOCKED          = 0x00000002,
    WPCFLAG_ISBLOCKED_MEDIAPLAYBACKBLOCKED  = 0x00000004,
    WPCFLAG_ISBLOCKED_WEBBLOCKED            = 0x00000008,
    WPCFLAG_ISBLOCKED_GAMESBLOCKED          = 0x00000010,
    WPCFLAG_ISBLOCKED_CONTACTBLOCKED        = 0x00000020, 
    WPCFLAG_ISBLOCKED_FEATUREBLOCKED        = 0x00000040, 
    WPCFLAG_ISBLOCKED_DOWNLOADBLOCKED       = 0x00000080, 
    WPCFLAG_ISBLOCKED_RATINGBLOCKED         = 0x00000100, 
    WPCFLAG_ISBLOCKED_DESCRIPTORBLOCKED     = 0x00000200, 
    WPCFLAG_ISBLOCKED_EXPLICITBLOCK         = 0x00000400,
    WPCFLAG_ISBLOCKED_BADPASS               = 0x00000800,
    WPCFLAG_ISBLOCKED_MAXHOURS              = 0x00001000,
    WPCFLAG_ISBLOCKED_SPECHOURS             = 0x00002000,
    
    WPCFLAG_ISBLOCKED_SETTINGSCHANGEBLOCKED = 0x00004000,

    WPCFLAG_ISBLOCKED_ATTACHMENTBLOCKED     = 0x00008000,
    WPCFLAG_ISBLOCKED_SENDERBLOCKED         = 0x00010000,
    WPCFLAG_ISBLOCKED_RECEIVERBLOCKED       = 0x00020000,
    WPCFLAG_ISBLOCKED_NOTEXPLICITLYALLOWED  = 0x00040000,
    WPCFLAG_ISBLOCKED_NOTINLIST             = 0x00080000,
    WPCFLAG_ISBLOCKED_CATEGORYBLOCKED       = 0x00100000,
    WPCFLAG_ISBLOCKED_CATEGORYNOTINLIST     = 0x00200000,
    WPCFLAG_ISBLOCKED_NOTKIDS               = 0x00400000,
    WPCFLAG_ISBLOCKED_UNRATED               = 0x00800000,
    WPCFLAG_ISBLOCKED_NOACCESS              = 0x01000000,
    WPCFLAG_ISBLOCKED_INTERNALERROR         = 0xFFFFFFFF
} WPCFLAG_ISBLOCKED;

typedef enum tagWPCFLAG_LOGOFF_TYPE
{
    WPCFLAG_LOGOFF_TYPE_LOGOUT              = 0x00000000,
    WPCFLAG_LOGOFF_TYPE_RESTART             = 0x00000001,
    WPCFLAG_LOGOFF_TYPE_SHUTDOWN            = 0x00000002,
    WPCFLAG_LOGOFF_TYPE_FUS                 = 0x00000004,
    WPCFLAG_LOGOFF_TYPE_FORCEDFUS           = 0x00000008
} WPCFLAG_LOGOFF_TYPE;

typedef enum tagWPCFLAG_IM_LEAVE_FLAG
{
    WPCFLAG_IM_LEAVE_NORMAL           = 0x00000000,
    WPCFLAG_IM_LEAVE_FORCED              = 0x00000001,
    WPCFLAG_IM_LEAVE_CONVERSATION_END  = 0x00000002 // This marks the end of the entire conversation
} WPCFLAG_IM_LEAVE;


//Event Data Lengths
//System

#define ARRAY_SEP_CHAR 0x9
typedef enum tagWPC_ARGS_SETTINGSCHANGEEVENT
{
    WPC_ARGS_SETTINGSCHANGEEVENT_CLASS = 0,
    WPC_ARGS_SETTINGSCHANGEEVENT_SETTING,
    WPC_ARGS_SETTINGSCHANGEEVENT_OWNER,
    WPC_ARGS_SETTINGSCHANGEEVENT_OLDVAL,
    WPC_ARGS_SETTINGSCHANGEEVENT_NEWVAL,
    WPC_ARGS_SETTINGSCHANGEEVENT_REASON,
    WPC_ARGS_SETTINGSCHANGEEVENT_OPTIONAL,
    WPC_ARGS_SETTINGSCHANGEEVENT_CARGS
} WPC_ARGS_SETTINGSCHANGEEVENT;


typedef enum tagWPC_ARGS_SAFERAPPBLOCKED
{
    WPC_ARGS_SAFERAPPBLOCKED_TIMESTAMP = 0,
    WPC_ARGS_SAFERAPPBLOCKED_USERID,
    WPC_ARGS_SAFERAPPBLOCKED_PATH,
    WPC_ARGS_SAFERAPPBLOCKED_RULEID,
    WPC_ARGS_SAFERAPPBLOCKED_CARGS
} WPC_ARGS_SAFERAPPBLOCKED;

//Email
typedef enum tagWPC_ARGS_EMAILRECEIEVEDEVENT
{
    WPC_ARGS_EMAILRECEIEVEDEVENT_SENDER = 0,
    WPC_ARGS_EMAILRECEIEVEDEVENT_APPNAME,
    WPC_ARGS_EMAILRECEIEVEDEVENT_APPVERSION,
    WPC_ARGS_EMAILRECEIEVEDEVENT_SUBJECT,
    WPC_ARGS_EMAILRECEIEVEDEVENT_REASON,
    WPC_ARGS_EMAILRECEIEVEDEVENT_RECIPCOUNT,
    WPC_ARGS_EMAILRECEIEVEDEVENT_RECIPIENT,
    WPC_ARGS_EMAILRECEIEVEDEVENT_ATTACHCOUNT,
    WPC_ARGS_EMAILRECEIEVEDEVENT_ATTACHMENTNAME,
    WPC_ARGS_EMAILRECEIEVEDEVENT_RECEIVEDTIME,
    WPC_ARGS_EMAILRECEIEVEDEVENT_EMAILACCOUNT,
    WPC_ARGS_EMAILRECEIEVEDEVENT_CARGS
} WPC_ARGS_EMAILRECEIEVEDEVENT;

typedef enum tagWPC_ARGS_EMAILSENTEVENT
{
    WPC_ARGS_EMAILSENTEVENT_SENDER = 0,
    WPC_ARGS_EMAILSENTEVENT_APPNAME,
    WPC_ARGS_EMAILSENTEVENT_APPVERSION,
    WPC_ARGS_EMAILSENTEVENT_SUBJECT,
    WPC_ARGS_EMAILSENTEVENT_REASON,
    WPC_ARGS_EMAILSENTEVENT_RECIPCOUNT,
    WPC_ARGS_EMAILSENTEVENT_RECIPIENT,
    WPC_ARGS_EMAILSENTEVENT_ATTACHCOUNT,
    WPC_ARGS_EMAILSENTEVENT_ATTACHMENTNAME,
    WPC_ARGS_EMAILSENTEVENT_EMAILACCOUNT,
    WPC_ARGS_EMAILSENTEVENT_CARGS
} WPC_ARGS_EMAILSENTEVENT;


typedef enum tagWPC_ARGS_EMAILCONTACTEVENT
{
    WPC_ARGS_EMAILCONTACTEVENT_APPNAME = 0,
    WPC_ARGS_EMAILCONTACTEVENT_APPVERSION,
    WPC_ARGS_EMAILCONTACTEVENT_OLDNAME,
    WPC_ARGS_EMAILCONTACTEVENT_OLDID,
    WPC_ARGS_EMAILCONTACTEVENT_NEWNAME,
    WPC_ARGS_EMAILCONTACTEVENT_NEWID,
    WPC_ARGS_EMAILCONTACTEVENT_REASON,
    WPC_ARGS_EMAILCONTACTEVENT_EMAILACCOUNT,
    WPC_ARGS_EMAILCONTACTEVENT_CARGS
} WPC_ARGS_EMAILCONTACTEVENT;

//Media
typedef enum tagWPC_MEDIA_TYPE
{   
    WPC_MEDIA_TYPE_OTHER    = 0,
    WPC_MEDIA_TYPE_DVD,
    WPC_MEDIA_TYPE_RECORDED_TV,
    WPC_MEDIA_TYPE_AUDIO_FILE,
    WPC_MEDIA_TYPE_CD_AUDIO,
    WPC_MEDIA_TYPE_VIDEO_FILE,
    WPC_MEDIA_TYPE_PICTURE_FILE,
    WPC_MEDIA_TYPE_MAX
}   WPC_MEDIA_TYPE;


typedef enum tagWPC_MEDIA_EXPLICIT_TYPE
{   
    WPC_MEDIA_EXPLICIT_FALSE = 0,
    WPC_MEDIA_EXPLICIT_TRUE,
    WPC_MEDIA_EXPLICIT_UNKNOWN
}   WPC_MEDIA_EXPLICIT;

typedef enum tagWPC_ARGS_MEDIAPLAYBACKEVENT
{
    WPC_ARGS_MEDIAPLAYBACKEVENT_APPNAME = 0,
    WPC_ARGS_MEDIAPLAYBACKEVENT_APPVERSION,
    WPC_ARGS_MEDIAPLAYBACKEVENT_MEDIATYPE,
    WPC_ARGS_MEDIAPLAYBACKEVENT_PATH,
    WPC_ARGS_MEDIAPLAYBACKEVENT_TITLE,
    WPC_ARGS_MEDIAPLAYBACKEVENT_PML,
    WPC_ARGS_MEDIAPLAYBACKEVENT_ALBUM,
    WPC_ARGS_MEDIAPLAYBACKEVENT_EXPLICIT,
    WPC_ARGS_MEDIAPLAYBACKEVENT_REASON,
    WPC_ARGS_MEDIAPLAYBACKEVENT_CARGS
} WPC_ARGS_MEDIAPLAYBACKEVENT;

typedef enum tagWPC_ARGS_MEDIADOWNLOADEVENT
{
    WPC_ARGS_MEDIADOWNLOADEVENT_APPNAME = 0,
    WPC_ARGS_MEDIADOWNLOADEVENT_APPVERSION,
    WPC_ARGS_MEDIADOWNLOADEVENT_MEDIATYPE,
    WPC_ARGS_MEDIADOWNLOADEVENT_PATH,
    WPC_ARGS_MEDIADOWNLOADEVENT_TITLE,
    WPC_ARGS_MEDIADOWNLOADEVENT_PML,
    WPC_ARGS_MEDIADOWNLOADEVENT_ALBUM,
    WPC_ARGS_MEDIADOWNLOADEVENT_EXPLICIT,
    WPC_ARGS_MEDIADOWNLOADEVENT_REASON,
    WPC_ARGS_MEDIADOWNLOADEVENT_CARGS
} WPC_ARGS_MEDIADOWNLOADEVENT;

//IM
typedef enum tagWPC_ARGS_CONVERSATIONINITEVENT
{
    WPC_ARGS_CONVERSATIONINITEVENT_APPNAME = 0,
    WPC_ARGS_CONVERSATIONINITEVENT_APPVERSION,
    WPC_ARGS_CONVERSATIONINITEVENT_ACCOUNTNAME,
    WPC_ARGS_CONVERSATIONINITEVENT_CONVID,
    WPC_ARGS_CONVERSATIONINITEVENT_REQUESTINGIP,
    WPC_ARGS_CONVERSATIONINITEVENT_SENDER,
    WPC_ARGS_CONVERSATIONINITEVENT_REASON,
    WPC_ARGS_CONVERSATIONINITEVENT_RECIPCOUNT,
    WPC_ARGS_CONVERSATIONINITEVENT_RECIPIENT,
    WPC_ARGS_CONVERSATIONINITEVENT_CARGS
} WPC_ARGS_CONVERSATIONINITEVENT;

typedef enum tagWPC_ARGS_CONVERSATIONJOINEVENT
{
    WPC_ARGS_CONVERSATIONJOINEVENT_APPNAME = 0,
    WPC_ARGS_CONVERSATIONJOINEVENT_APPVERSION,
    WPC_ARGS_CONVERSATIONJOINEVENT_ACCOUNTNAME,
    WPC_ARGS_CONVERSATIONJOINEVENT_CONVID,
    WPC_ARGS_CONVERSATIONJOINEVENT_JOININGIP,
    WPC_ARGS_CONVERSATIONJOINEVENT_JOININGUSER,
    WPC_ARGS_CONVERSATIONJOINEVENT_REASON,
    WPC_ARGS_CONVERSATIONJOINEVENT_MEMBERCOUNT,
    WPC_ARGS_CONVERSATIONJOINEVENT_MEMBER,
    WPC_ARGS_CONVERSATIONJOINEVENT_SENDER,
    WPC_ARGS_CONVERSATIONJOINEVENT_CARGS
} WPC_ARGS_CONVERSATIONJOINEVENT;

typedef enum tagWPC_ARGS_CONVERSATIONLEAVEEVENT
{
    WPC_ARGS_CONVERSATIONLEAVEEVENT_APPNAME = 0,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_APPVERSION,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_ACCOUNTNAME,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_CONVID,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_LEAVINGIP,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_LEAVINGUSER,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_REASON,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_MEMBERCOUNT,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_MEMBER,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_FLAGS,
    WPC_ARGS_CONVERSATIONLEAVEEVENT_CARGS
} WPC_ARGS_CONVERSATIONLEAVEEVENT;

typedef enum tagWPCFLAG_IM_FEATURE
{
    WPCFLAG_IM_FEATURE_NONE =     0x00,
    WPCFLAG_IM_FEATURE_VIDEO =    0x01,
    WPCFLAG_IM_FEATURE_AUDIO =    0x02,
    WPCFLAG_IM_FEATURE_GAME =     0x04,
    WPCFLAG_IM_FEATURE_SMS =      0x08,
    WPCFLAG_IM_FEATURE_FILESWAP = 0x10,
    WPCFLAG_IM_FEATURE_URLSWAP =  0x20,
    WPCFLAG_IM_FEATURE_SENDING = 0x80000000, // Top bit means sending or receiving.
    WPCFLAG_IM_FEATURE_ALL =      0xFFFFFFFF
} WPCFLAG_IM_FEATURE;

typedef enum tagWPC_ARGS_IMFEATUREEVENT
{
    WPC_ARGS_IMFEATUREEVENT_APPNAME = 0,
    WPC_ARGS_IMFEATUREEVENT_APPVERSION,
    WPC_ARGS_IMFEATUREEVENT_ACCOUNTNAME,
    WPC_ARGS_IMFEATUREEVENT_CONVID,
    WPC_ARGS_IMFEATUREEVENT_MEDIATYPE,
    WPC_ARGS_IMFEATUREEVENT_REASON,
    WPC_ARGS_IMFEATUREEVENT_RECIPCOUNT,
    WPC_ARGS_IMFEATUREEVENT_RECIPIENT,
    WPC_ARGS_IMFEATUREEVENT_SENDER,
    WPC_ARGS_IMFEATUREEVENT_SENDERIP,
    WPC_ARGS_IMFEATUREEVENT_DATA,
    WPC_ARGS_IMFEATUREEVENT_CARGS
} WPC_ARGS_IMFEATUREEVENT;

typedef enum tagWPC_ARGS_IMCONTACTEVENT
{
    WPC_ARGS_IMCONTACTEVENT_APPNAME = 0,
    WPC_ARGS_IMCONTACTEVENT_APPVERSION,
    WPC_ARGS_IMCONTACTEVENT_ACCOUNTNAME,
    WPC_ARGS_IMCONTACTEVENT_OLDNAME,
    WPC_ARGS_IMCONTACTEVENT_OLDID,
    WPC_ARGS_IMCONTACTEVENT_NEWNAME,
    WPC_ARGS_IMCONTACTEVENT_NEWID,
    WPC_ARGS_IMCONTACTEVENT_REASON,
    WPC_ARGS_IMCONTACTEVENT_CARGS
} WPC_ARGS_IMCONTACTEVENT;
//Games
typedef enum tagWPC_ARGS_GAMESTARTEVENT
{
    WPC_ARGS_GAMESTARTEVENT_APPID = 0,
    WPC_ARGS_GAMESTARTEVENT_INSTANCEID,
    WPC_ARGS_GAMESTARTEVENT_APPVERSION,
    WPC_ARGS_GAMESTARTEVENT_PATH,
    WPC_ARGS_GAMESTARTEVENT_RATING,
    WPC_ARGS_GAMESTARTEVENT_RATINGSYSTEM,
    WPC_ARGS_GAMESTARTEVENT_REASON,
    WPC_ARGS_GAMESTARTEVENT_DESCCOUNT,
    WPC_ARGS_GAMESTARTEVENT_DESCRIPTOR,
    WPC_ARGS_GAMESTARTEVENT_PID,
    WPC_ARGS_GAMESTARTEVENT_CARGS
} WPC_ARGS_GAMESTARTEVENT;

//Web
// Don't change anything in this--IE7 relies on it!!
typedef enum tagWPC_ARGS_FILEDOWNLOADEVENT
{
    WPC_ARGS_FILEDOWNLOADEVENT_URL = 0,
    WPC_ARGS_FILEDOWNLOADEVENT_APPNAME,
    WPC_ARGS_FILEDOWNLOADEVENT_VERSION,
    WPC_ARGS_FILEDOWNLOADEVENT_BLOCKED,
    WPC_ARGS_FILEDOWNLOADEVENT_PATH,
    WPC_ARGS_FILEDOWNLOADEVENT_CARGS
} WPC_ARGS_FILEDOWNLOADEVENT;

typedef enum tagWPC_ARGS_URLVISITEVENT
{
    WPC_ARGS_URLVISITEVENT_URL = 0,
    WPC_ARGS_URLVISITEVENT_APPNAME,
    WPC_ARGS_URLVISITEVENT_VERSION,
    WPC_ARGS_URLVISITEVENT_REASON,
    WPC_ARGS_URLVISITEVENT_RATINGSYSTEMID,
    WPC_ARGS_URLVISITEVENT_CATCOUNT,
    WPC_ARGS_URLVISITEVENT_CATEGORY,
    WPC_ARGS_URLVISITEVENT_CARGS
} WPC_ARGS_URLVISITEVENT;

typedef enum tagWPC_ARGS_CUSTOMEVENT
{
    WPC_ARGS_CUSTOMEVENT_PUBLISHER = 0,
    WPC_ARGS_CUSTOMEVENT_APPNAME,
    WPC_ARGS_CUSTOMEVENT_APPVERSION,
    WPC_ARGS_CUSTOMEVENT_EVENT,
    WPC_ARGS_CUSTOMEVENT_VALUE1,
    WPC_ARGS_CUSTOMEVENT_VALUE2,
    WPC_ARGS_CUSTOMEVENT_VALUE3,
    WPC_ARGS_CUSTOMEVENT_BLOCKED,
    WPC_ARGS_CUSTOMEVENT_REASON,
    WPC_ARGS_CUSTOMEVENT_CARGS
} WPC_ARGS_CUSTOMEVENT;

typedef enum tagWPC_ARGS_WEBOVERRIDEEVENT
{
    WPC_ARGS_WEBOVERRIDEEVENT_USERID = 0,
    WPC_ARGS_WEBOVERRIDEEVENT_URL,
    WPC_ARGS_WEBOVERRIDEEVENT_REASON,
    WPC_ARGS_WEBOVERRIDEEVENT_CARGS
} WPC_ARGS_WEBOVERRIDEEVENT;

typedef enum tagWPC_ARGS_APPOVERRIDEEVENT
{
    WPC_ARGS_APPOVERRIDEEVENT_USERID = 0,
    WPC_ARGS_APPOVERRIDEEVENT_PATH,
    WPC_ARGS_APPOVERRIDEEVENT_REASON,
    WPC_ARGS_APPOVERRIDEEVENT_CARGS
} WPC_ARGS_APPOVERRIDEEVENT;

//
// This is the list of settings that are written out to the log file as the setting id.
//
typedef enum tagWPC_SETTINGS
{
    WPC_SETTINGS_WPC_EXTENSION_PATH = 0,
    WPC_SETTINGS_WPC_EXTENSION_SILO,
    WPC_SETTINGS_WPC_EXTENSION_IMAGE_PATH,
    WPC_SETTINGS_WPC_EXTENSION_DISABLEDIMAGE_PATH,
    WPC_SETTINGS_WPC_EXTENSION_NAME,
    WPC_SETTINGS_WPC_EXTENSION_SUB_TITLE,
    WPC_SETTINGS_SYSTEM_CURRENT_RATING_SYSTEM,
    WPC_SETTINGS_SYSTEM_LAST_LOG_VIEW,
    WPC_SETTINGS_SYSTEM_LOG_VIEW_REMINDER_INTERVAL,
    WPC_SETTINGS_SYSTEM_HTTP_EXEMPTION_LIST,
    WPC_SETTINGS_SYSTEM_URL_EXEMPTION_LIST,
    WPC_SETTINGS_SYSTEM_FILTER_ID,
    WPC_SETTINGS_SYSTEM_FILTER_NAME, 
    WPC_SETTINGS_SYSTEM_LOCALE,
    WPC_SETTINGS_ALLOW_BLOCK,
    WPC_SETTINGS_GAME_BLOCKED,
    WPC_SETTINGS_GAME_ALLOW_UNRATED,
    WPC_SETTINGS_GAME_MAX_ALLOWED,
    WPC_SETTINGS_GAME_DENIED_DESCRIPTORS,
    WPC_SETTINGS_USER_WPC_ENABLED,
    WPC_SETTINGS_USER_LOGGING_REQUIRED,
    WPC_SETTINGS_USER_HOURLY_RESTRICTIONS,
    WPC_SETTINGS_USER_OVERRRIDE_REQUESTS,
    WPC_SETTINGS_USER_LOGON_HOURS,
    WPC_SETTINGS_USER_APP_RESTRICTIONS,
    WPC_SETTINGS_WEB_FILTER_ON,
    WPC_SETTINGS_WEB_DOWNLOAD_BLOCKED,
    WPC_SETTINGS_WEB_FILTER_LEVEL,
    WPC_SETTINGS_WEB_BLOCKED_CATEGORY_LIST,
    WPC_SETTINGS_WEB_BLOCK_UNRATED,
    WPC_SETTINGS_WPC_ENABLED,
    WPC_SETTINGS_WPC_LOGGING_REQUIRED,
    WPC_SETTINGS_RATING_SYSTEM_PATH,
    WPC_SETTINGS_WPC_PROVIDER_CURRENT,
    WPC_SETTING_COUNT
} WPC_SETTINGS;
//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
//+
// Provider Microsoft-Windows-ParentalControls Event Count 17
//+
EXTERN_C __declspec(selectany) const GUID WPCPROV = {0x01090065, 0xb467, 0x4503, {0x9b, 0x28, 0x53, 0x37, 0x66, 0x76, 0x10, 0x87}};

//
// Channel
//
#define WPCCHANNEL 0x10

//
// Opcodes
//
#define WPC_SETTINGS_LOCATE 0x14
#define WPC_SETTINGS_MODIFY 0x15
#define WPC_APP_LAUNCH 0x16
#define WPC_SYSTEM 0x17
#define WPC_WEB 0x18

//
// Tasks
//
#define WPCPROV_TASK_SettingChange 0x1
#define WPCPROV_TASK_GameStart 0x2
#define WPCPROV_TASK_UrlVisit 0x3
#define WPCPROV_TASK_EmailReceived 0x4
#define WPCPROV_TASK_EmailSent 0x5
#define WPCPROV_TASK_MediaPlayback 0x6
#define WPCPROV_TASK_IMInvitation 0x7
#define WPCPROV_TASK_IMJoin 0x8
#define WPCPROV_TASK_IMLeave 0x9
#define WPCPROV_TASK_FileDownload 0xa
#define WPCPROV_TASK_IMFeature 0xb
#define WPCPROV_TASK_Custom 0xd
#define WPCPROV_TASK_EmailContact 0xe
#define WPCPROV_TASK_IMContact 0xf
#define WPCPROV_TASK_AppBlocked 0x10
#define WPCPROV_TASK_AppOverride 0x11
#define WPCPROV_TASK_WebOverride 0x12
//
// Keyword
//
#define WPCPROV_KEYWORD_WPC 0x10
#define WPCPROV_KEYWORD_ThirdParty 0x20

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_SYS_SETTINGCHANGE = {0x1, 0x0, 0x10, 0x4, 0x15, 0x1, 0x8000000000000010};
#define WPCEVENT_SYS_SETTINGCHANGE_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_GAME_START = {0x2, 0x0, 0x10, 0x4, 0x16, 0x2, 0x8000000000000030};
#define WPCEVENT_GAME_START_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_WEB_URLVISIT = {0x3, 0x0, 0x10, 0x4, 0x18, 0x3, 0x8000000000000010};
#define WPCEVENT_WEB_URLVISIT_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_EMAIL_RECEIVED = {0x4, 0x0, 0x10, 0x4, 0x16, 0x4, 0x8000000000000030};
#define WPCEVENT_EMAIL_RECEIVED_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_EMAIL_SENT = {0x5, 0x0, 0x10, 0x4, 0x16, 0x5, 0x8000000000000030};
#define WPCEVENT_EMAIL_SENT_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_MEDIA_PLAYBACK = {0x6, 0x0, 0x10, 0x4, 0x16, 0x6, 0x8000000000000030};
#define WPCEVENT_MEDIA_PLAYBACK_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_IM_INVITATION = {0x7, 0x0, 0x10, 0x4, 0x16, 0x7, 0x8000000000000030};
#define WPCEVENT_IM_INVITATION_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_IM_JOIN = {0x8, 0x0, 0x10, 0x4, 0x16, 0x8, 0x8000000000000030};
#define WPCEVENT_IM_JOIN_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_IM_LEAVE = {0x9, 0x0, 0x10, 0x4, 0x16, 0x9, 0x8000000000000030};
#define WPCEVENT_IM_LEAVE_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_WEB_FILEDOWNLOAD = {0xa, 0x0, 0x10, 0x4, 0x18, 0xa, 0x8000000000000030};
#define WPCEVENT_WEB_FILEDOWNLOAD_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_IM_FEATURE = {0xb, 0x0, 0x10, 0x4, 0x16, 0xb, 0x8000000000000030};
#define WPCEVENT_IM_FEATURE_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_CUSTOM = {0xd, 0x0, 0x10, 0x4, 0x17, 0xd, 0x8000000000000030};
#define WPCEVENT_CUSTOM_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_EMAIL_CONTACT = {0xe, 0x0, 0x10, 0x4, 0x16, 0xe, 0x8000000000000030};
#define WPCEVENT_EMAIL_CONTACT_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_IM_CONTACT = {0xf, 0x0, 0x10, 0x4, 0x16, 0xf, 0x8000000000000030};
#define WPCEVENT_IM_CONTACT_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_SYSTEM_APPBLOCKED = {0x10, 0x0, 0x10, 0x4, 0x16, 0x10, 0x8000000000000010};
#define WPCEVENT_SYSTEM_APPBLOCKED_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_APPOVERRIDE = {0x11, 0x0, 0x10, 0x4, 0x16, 0x11, 0x8000000000000010};
#define WPCEVENT_APPOVERRIDE_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WPCEVENT_WEBOVERRIDE = {0x12, 0x0, 0x10, 0x4, 0x16, 0x12, 0x8000000000000010};
#define WPCEVENT_WEBOVERRIDE_value 0x12
#define MSG_Keyword_WPC                      0x10000005L
#define MSG_Keyword_ThirdParty               0x10000006L
#define MSG_Opcode_Locate                    0x30000014L
#define MSG_Opcode_Modify                    0x30000015L
#define MSG_Opcode_Launch                    0x30000016L
#define MSG_Opcode_System                    0x30000017L
#define MSG_Opcode_Web                       0x30000018L
#define MSG_Task_SettingChange               0x70000001L
#define MSG_Task_GameStart                   0x70000002L
#define MSG_Task_UrlVisit                    0x70000003L
#define MSG_Task_EmailReceived               0x70000004L
#define MSG_Task_EmailSent                   0x70000005L
#define MSG_Task_MediaPlayback               0x70000006L
#define MSG_Task_IMInvitation                0x70000007L
#define MSG_Task_IMJoin                      0x70000008L
#define MSG_Task_IMLeave                     0x70000009L
#define MSG_Task_FileDownload                0x7000000AL
#define MSG_Task_IMFeature                   0x7000000BL
#define MSG_Task_Custom                      0x7000000DL
#define MSG_Task_EmailContact                0x7000000EL
#define MSG_Task_IMContact                   0x7000000FL
#define MSG_Task_AppBlocked                  0x70000010L
#define MSG_Task_AppOverride                 0x70000011L
#define MSG_Task_WebOverride                 0x70000012L
#define MSG_Publisher_Name                   0x90000001L
#define MSG_Event_SettingChange              0xB0000001L
#define MSG_Event_GameStart                  0xB0000002L
#define MSG_Event_UrlVisit                   0xB0000003L
#define MSG_Event_EmailReceived              0xB0000004L
#define MSG_Event_EmailSent                  0xB0000005L
#define MSG_Event_MediaPlayback              0xB0000006L
#define MSG_Event_IMInvitation               0xB0000007L
#define MSG_Event_IMJoin                     0xB0000008L
#define MSG_Event_IMLeave                    0xB0000009L
#define MSG_Event_FileDownload               0xB000000AL
#define MSG_Event_IMFeature                  0xB000000BL
#define MSG_Event_Custom                     0xB000000DL
#define MSG_Event_EmailContact               0xB000000EL
#define MSG_Event_IMContact                  0xB000000FL
#define MSG_Event_AppBlocked                 0xB0000010L
#define MSG_Event_AppOverride                0xB0000011L
#define MSG_Event_WebOverride                0xB0000012L
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WS2dnet.h ===
//************************************************************************
//  Winsock V2.0  DECnet definitions		File: WS2DNET.H 
//************************************************************************

#ifndef WS2DNET_H
#define WS2DNET_H

#include <winsock2.h>

#pragma pack(push,ws2dnet,1)
   
//
//  DECnet WinSock Definitions
//
#define DNPROTO_NSP      1  // DECnet NSP transport protocol
#define DNPROTO_RAW    255 

#define DN_MAXADDL      20  // maximum DECnet address length
#define DN_ADDL          2  // DECnet NSP address length
#define DN_MAXOPTL      16  // Maximum DECnet optional data length
#define DN_MAXOBJL      16  // Maximum DECnet object name length
#define DN_MAXACCL      39  // Maximum DECnet access string length
#define DN_MAXALIASL   128  // Maximum DECnet alias string length
#define DN_MAXNODEL      7  // Maximum DECnet Phase IV node string length

// DECnet Extension Function Identifiers
#define WS2API_DECNET_dnet_addr     1
#define WS2API_DECNET_dnet_eof      2
#define WS2API_DECNET_dnet_getacc   3
#define WS2API_DECNET_dnet_getalias 4
#define WS2API_DECNET_dnet_htoa     5
#define WS2API_DECNET_dnet_ntoa     6
#define WS2API_DECNET_getnodeadd    7
#define WS2API_DECNET_getnodebyaddr 8
#define WS2API_DECNET_getnodebyname 9
#define WS2API_DECNET_getnodename   10
#define WS2API_DECNET_MAX           10

//
//  DECnet address structure
//  
typedef struct dn_naddr {
	unsigned short	a_len;		        // length of address  
	unsigned char   a_addr[DN_MAXADDL]; // address as bytes  
} DNNADDR, FAR *LPDNNADDR;

//
//  DECnet socket address structure
//  
typedef struct sockaddr_dn {
	unsigned short	sdn_family;	    // AF_DECnet  
	unsigned char	sdn_flags;	    // flags  
	unsigned char	sdn_objnum;	    // object number  
	unsigned short	sdn_objnamel;	// size of object name  
	char sdn_objname[DN_MAXOBJL];	// object name  
	struct dn_naddr  sdn_add;	    // node address  
} SOCKADDRDN, FAR *LPSOCKADDRDN;

#define sdn_nodeaddrl	sdn_add.a_len	// node address length  
#define sdn_nodeaddr	sdn_add.a_addr 	// node address  

//  Common DECnet object numbers (used in sockaddr_dn)
#define DNOBJECT_FAL	17		// file access listener  
#define DNOBJECT_NICE	19		// network management  
#define DNOBJECT_DTERM	23		// remote terminals  
#define DNOBJECT_MIRROR	25		// loopback mirror  
#define DNOBJECT_EVR	26		// event receiver  
#define DNOBJECT_MAIL11	27		// Mail-11 service  
#define DNOBJECT_PHONE	29		// phone utility  
#define DNOBJECT_CTERM	42		// command terminals  
#define DNOBJECT_DTR	63		// data test receiver  

//
//  DECnet node structure
//
typedef struct	nodeent_f {
	char 		FAR * n_name;   // name of node  
	unsigned short	n_addrtype;	// node address type  
	unsigned short	n_length;	// address length
	unsigned char	FAR * n_addr;	// address  
	unsigned char	FAR * n_params;	// node parameters  
	unsigned char   n_reserved[16];	// Reserved
} NODEENTF, FAR *LPNODEENTF;                                          

//
//  DECnet set/get DSO_CONDATA, DSO_DISDATA (optional data) structure
//  
typedef struct optdata_dn {
	unsigned short	opt_status;	          // extended status return  
	unsigned short	opt_optl;	          // user data length 
	unsigned char   opt_data[DN_MAXOPTL]; // user data  
} OPTDATADN, FAR *LPOPTDATADN;

//
//  DECnet set/get DSO_CONACCESS access (control data) structure
//  
typedef struct accessdata_dn {
	unsigned short	acc_accl;	            // account string length 
	unsigned char	acc_acc[DN_MAXACCL+1];	// account string  
	unsigned short	acc_passl;	            // password string length  
	unsigned char	acc_pass[DN_MAXACCL+1];	// password string  
	unsigned short	acc_userl;	            // user string length 
	unsigned char	acc_user[DN_MAXACCL+1];	// user string  
} ACCESSDATADN, FAR *LPACCESSDATADN;

//
//  DECnet call data structure (concatenated access and optional data)
//
typedef struct calldata_dn { 
    struct optdata_dn       optdata_dn;
    struct accessdata_dn    accessdata_dn;
} CALLDATADN, FAR *LPCALLDATADN;   
    
//
//  DECnet incoming access control structure
//
typedef struct dnet_accent {
    unsigned char dac_status;      // Reserved 
    unsigned char dac_type;        // DN_NONE, etc.      
    char dac_username[DN_MAXACCL+1];  
    char dac_password[DN_MAXACCL+1]; 
} DNETACCENT, FAR *LPDNETACCENT;

#define DN_NONE          0x00   
#define DN_RO            0x01
#define DN_WO            0x02
#define DN_RW            0x03

// DECnet logical link information structure
typedef struct linkinfo_dn {
	unsigned short	idn_segsize;	/* segment size for link */
	unsigned char	idn_linkstate;	/* logical link state */
}LINKINFODN, FAR *LPLINKINFODN;

#define SO_LINKINFO	        7		/* set/get link information */
#define LL_INACTIVE		    0		/* logical link inactive */
#define LL_CONNECTING	    1		/* logical link connecting */
#define LL_RUNNING		    2		/* logical link running */
#define LL_DISCONNECTING	3		/* logical link disconnecting */

#pragma pack(pop,ws2dnet)

//*********************************************************************
//  DECnet WinSock 2 extended function prototypes	
//*********************************************************************  
struct dn_naddr FAR *WSAAPI dnet_addr(const char FAR *);
int WSAAPI dnet_eof(SOCKET);
struct dnet_accent FAR *WSAAPI dnet_getacc(const struct dnet_accent FAR *);
char FAR *WSAAPI dnet_getalias(const char FAR *);
char FAR *WSAAPI dnet_htoa(const struct dn_naddr FAR *);
char FAR *WSAAPI dnet_ntoa(const struct dn_naddr FAR *);
struct dn_naddr FAR *WSAAPI getnodeadd(void);
struct nodeent_f FAR *WSAAPI getnodebyaddr(const unsigned char FAR *addr, int, int);
struct nodeent_f FAR *WSAAPI getnodebyname(const char FAR *);
char FAR *WSAAPI getnodename(void);

// typedefs for C++ compatability
typedef struct dn_naddr FAR * (WSAAPI * LPDNETADDR)(const char FAR *);
typedef int (WSAAPI * LPDNETEOF)(SOCKET);
typedef struct dnet_accent FAR * (WSAAPI * LPDNETGETACC)(const struct 
dnet_accent FAR *);
typedef char FAR * (WSAAPI * LPDNETGETALIAS)(const char FAR *);
typedef char FAR * (WSAAPI * LPDNETHTOA)(const struct dn_naddr FAR *);
typedef char FAR * (WSAAPI * LPDNETNTOA)(const struct dn_naddr FAR *);
typedef struct dn_naddr FAR * (WSAAPI * LPGETNODEADD)(void);
typedef struct nodeent_f FAR * (WSAAPI * LPGETNODEBYADDR)(const unsigned 
char FAR *addr, int, int);
typedef struct nodeent_f FAR * (WSAAPI * LPGETNODEBYNAME)(const char FAR 
*);
typedef char FAR * (WSAAPI * LPGETNODENAME)(void);

#endif	// WS2DNET_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WPWizMsg.h ===
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: WPWIZ_ERROR_FIRST
//
// MessageText:
//
//  Web Publishing Wizard first error message.
//
#define WPWIZ_ERROR_FIRST                0x40042000L

//
// MessageId: WPWIZ_ERROR_UNKNOWN
//
// MessageText:
//
//  An unknown error occurred in the Web Publishing Wizard.
//
#define WPWIZ_ERROR_UNKNOWN              0xC0042001L

//
// MessageId: WPWIZ_ERROR_PROV_QI
//
// MessageText:
//
//  The Web Publishing Wizard was unable to determine the version number of your service provider.
//
#define WPWIZ_ERROR_PROV_QI              0xC0042002L

//
// MessageId: WPWIZ_ERROR_INIT_FAILED
//
// MessageText:
//
//  An error occurred while attempting to start the Web Publishing Wizard.
//
#define WPWIZ_ERROR_INIT_FAILED          0xC0042003L

//
// MessageId: WPWIZ_ERROR_COCREATE_WEBPOST
//
// MessageText:
//
//  The Web Publishing Wizard is not installed correctly. Please uninstall and then reinstall the wizard.
//
#define WPWIZ_ERROR_COCREATE_WEBPOST     0xC0042004L

//
// MessageId: WPWIZ_ERROR_NO_PROVIDERS
//
// MessageText:
//
//  The Web Publishing Wizard could not run because there are no service providers installed.
//
#define WPWIZ_ERROR_NO_PROVIDERS         0xC0042005L

//
// MessageId: WPWIZ_ERROR_STATE_PTR
//
// MessageText:
//
//  An internal error (0x2006) occurred in the Web Publishing Wizard.
//
#define WPWIZ_ERROR_STATE_PTR            0xC0042006L

//
// MessageId: WPWIZ_ERROR_WEBPOST_PTR
//
// MessageText:
//
//  An internal error (0x2007) occurred in the Web Publishing Wizard.
//
#define WPWIZ_ERROR_WEBPOST_PTR          0xC0042007L

//
// MessageId: WPWIZ_ERROR_FILE_NOT_FOUND
//
// MessageText:
//
//  The file(s) you selected to publish could not be found.
//
#define WPWIZ_ERROR_FILE_NOT_FOUND       0xC0042008L

//
// MessageId: WPWIZ_ERROR_PROPSHEET_ERROR
//
// MessageText:
//
//  An error occurred in the user interface of the Web Publishing Wizard.
//
#define WPWIZ_ERROR_PROPSHEET_ERROR      0xC0042009L

//
// MessageId: WPWIZ_ERROR_OUTOFMEMORY
//
// MessageText:
//
//  The Web Publishing Wizard has run out of memory. Please close other running applications before continuing.
//
#define WPWIZ_ERROR_OUTOFMEMORY          0xC004200AL

//
// MessageId: WPWIZ_ERROR_LAST
//
// MessageText:
//
//  Web Publishing Wizard last error message.
//
#define WPWIZ_ERROR_LAST                 0x400420FFL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WS2atm.h ===
/*++

Copyright (c) 1997-1999  Microsoft Corporation

Module Name:

	ws2atm.h

Abstract:

	Winsock 2 ATM Annex definitions.

Revision History:

Notes:

--*/

#ifndef _WS2ATM_H_
#define _WS2ATM_H_

#if _MSC_VER > 1000
#pragma once
#endif

#include <pshpack4.h>

#define ATMPROTO_AALUSER           0x00   /* User-defined AAL */
#define ATMPROTO_AAL1              0x01   /* AAL 1 */
#define ATMPROTO_AAL2              0x02   /* AAL 2 */
#define ATMPROTO_AAL34             0x03   /* AAL 3/4 */
#define ATMPROTO_AAL5              0x05   /* AAL 5 */

#define SAP_FIELD_ABSENT           0xFFFFFFFE
#define SAP_FIELD_ANY              0xFFFFFFFF
#define SAP_FIELD_ANY_AESA_SEL     0xFFFFFFFA
#define SAP_FIELD_ANY_AESA_REST    0xFFFFFFFB

/*
 *  values used for AddressType in struct ATM_ADDRESS
 */
#define ATM_E164               0x01   /* E.164 addressing scheme */
#define ATM_NSAP               0x02   /* NSAP-style ATM Endsystem Address scheme */
#define ATM_AESA               0x02   /* NSAP-style ATM Endsystem Address scheme */

#define ATM_ADDR_SIZE          20
typedef struct {
    DWORD AddressType;                /* E.164 or NSAP-style ATM Endsystem Address */
    DWORD NumofDigits;                /* number of digits; */
    UCHAR Addr[ATM_ADDR_SIZE];        /* IA5 digits for E164, BCD encoding for NSAP */
                                      /* format as defined in the ATM Forum UNI 3.1 */
} ATM_ADDRESS;

/*
 *  values used for Layer2Protocol in B-LLI
 */
#define BLLI_L2_ISO_1745           0x01   /* Basic mode ISO 1745                      */
#define BLLI_L2_Q921               0x02   /* CCITT Rec. Q.921                         */
#define BLLI_L2_X25L               0x06   /* CCITT Rec. X.25, link layer              */
#define BLLI_L2_X25M               0x07   /* CCITT Rec. X.25, multilink               */
#define BLLI_L2_ELAPB              0x08   /* Extended LAPB; for half duplex operation */
#define BLLI_L2_HDLC_ARM           0x09   /* HDLC ARM (ISO 4335)                      */
#define BLLI_L2_HDLC_NRM           0x0A   /* HDLC NRM (ISO 4335)                      */
#define BLLI_L2_HDLC_ABM           0x0B   /* HDLC ABM (ISO 4335)                      */
#define BLLI_L2_LLC                0x0C   /* LAN logical link control (ISO 8802/2)    */
#define BLLI_L2_X75                0x0D   /* CCITT Rec. X.75, single link procedure   */
#define BLLI_L2_Q922               0x0E   /* CCITT Rec. Q.922                         */
#define BLLI_L2_USER_SPECIFIED     0x10   /* User Specified                           */
#define BLLI_L2_ISO_7776           0x11   /* ISO 7776 DTE-DTE operation               */

/*
 *  values used for Layer3Protocol in B-LLI
 */
#define BLLI_L3_X25                0x06   /* CCITT Rec. X.25, packet layer            */
#define BLLI_L3_ISO_8208           0x07   /* ISO/IEC 8208 (X.25 packet layer for DTE  */
#define BLLI_L3_X223               0x08   /* X.223/ISO 8878                           */
#define BLLI_L3_SIO_8473           0x09   /* ISO/IEC 8473 (OSI connectionless)        */
#define BLLI_L3_T70                0x0A   /* CCITT Rec. T.70 min. network layer       */
#define BLLI_L3_ISO_TR9577         0x0B   /* ISO/IEC TR 9577 Network Layer Protocol ID*/
#define BLLI_L3_USER_SPECIFIED     0x10   /* User Specified                           */

/*
 *  values used for Layer3IPI in B-LLI
 */
#define BLLI_L3_IPI_SNAP           0x80   /* IEEE 802.1 SNAP identifier               */
#define BLLI_L3_IPI_IP             0xCC   /* Internet Protocol (IP) identifier        */

typedef struct {
    DWORD Layer2Protocol;                 /* User information layer 2 protocol           */
    DWORD Layer2UserSpecifiedProtocol;    /* User specified layer 2 protocol information */
    DWORD Layer3Protocol;                 /* User information layer 3 protocol           */
    DWORD Layer3UserSpecifiedProtocol;    /* User specified layer 3 protocol information */
    DWORD Layer3IPI;                      /* ISO/IEC TR 9577 Initial Protocol Identifier */
    UCHAR SnapID[5];                      /* SNAP ID consisting of OUI and PID           */
} ATM_BLLI;

/*
 *  values used for the HighLayerInfoType field in ATM_BHLI
 */
#define BHLI_ISO                   0x00   /* ISO                                 */
#define BHLI_UserSpecific          0x01   /* User Specific                       */
#define BHLI_HighLayerProfile      0x02   /* High layer profile (only in UNI3.0) */
#define BHLI_VendorSpecificAppId   0x03   /* Vendor-Specific Application ID      */

typedef struct {
    DWORD HighLayerInfoType;          /* High Layer Information Type      */
    DWORD HighLayerInfoLength;        /* number of bytes in HighLayerInfo */
    UCHAR HighLayerInfo[8];           /* the value dependent on the       */
                                      /*   HighLayerInfoType field        */
} ATM_BHLI;

typedef struct sockaddr_atm {
    u_short satm_family;              /* address family should be AF_ATM  */
    ATM_ADDRESS satm_number;          /* ATM address                      */
    ATM_BLLI satm_blli;               /* B-LLI                            */
    ATM_BHLI satm_bhli;               /* B-HLI                            */
} sockaddr_atm, SOCKADDR_ATM, *PSOCKADDR_ATM, *LPSOCKADDR_ATM;

typedef enum {
    IE_AALParameters,
    IE_TrafficDescriptor,
    IE_BroadbandBearerCapability,
    IE_BHLI,
    IE_BLLI,
    IE_CalledPartyNumber,
    IE_CalledPartySubaddress,
    IE_CallingPartyNumber,
    IE_CallingPartySubaddress,
    IE_Cause,
    IE_QOSClass,
    IE_TransitNetworkSelection,
} Q2931_IE_TYPE;

typedef struct {
    Q2931_IE_TYPE IEType;
    ULONG         IELength;
    UCHAR         IE[1];
} Q2931_IE;

/*
 *  manifest constants for the AALType field in struct AAL_PARAMETERS_IE
 */
typedef enum {
    AALTYPE_5     = 5,   /* AAL 5 */
    AALTYPE_USER  = 16,  /* user-defined AAL */
} AAL_TYPE;

/*
 *  values used for the Mode field in struct AAL5_PARAMETERS
 */
#define AAL5_MODE_MESSAGE           0x01
#define AAL5_MODE_STREAMING         0x02

/*
 *  values used for the SSCSType field in struct AAL5_PARAMETERS
 */
#define AAL5_SSCS_NULL              0x00
#define AAL5_SSCS_SSCOP_ASSURED     0x01
#define AAL5_SSCS_SSCOP_NON_ASSURED 0x02
#define AAL5_SSCS_FRAME_RELAY       0x04

typedef struct {
    ULONG ForwardMaxCPCSSDUSize;
    ULONG BackwardMaxCPCSSDUSize;
    UCHAR Mode;                        /* only available in UNI 3.0 */
    UCHAR SSCSType;
} AAL5_PARAMETERS;

typedef struct {
    ULONG UserDefined;
} AALUSER_PARAMETERS;

typedef struct {
    AAL_TYPE AALType;
    union {
        AAL5_PARAMETERS     AAL5Parameters;
        AALUSER_PARAMETERS  AALUserParameters;
    } AALSpecificParameters;
} AAL_PARAMETERS_IE;

typedef struct {
    ULONG PeakCellRate_CLP0;
    ULONG PeakCellRate_CLP01;
    ULONG SustainableCellRate_CLP0;
    ULONG SustainableCellRate_CLP01;
    ULONG MaxBurstSize_CLP0;
    ULONG MaxBurstSize_CLP01;
    BOOL  Tagging;
} ATM_TD;

typedef struct {
    ATM_TD Forward;
    ATM_TD Backward;
    BOOL   BestEffort;
} ATM_TRAFFIC_DESCRIPTOR_IE;

/*
 *  values used for the BearerClass field in struct ATM_BROADBAND_BEARER_CAPABILITY_IE
 */
#define BCOB_A                   0x01   /* Bearer class A                      */
#define BCOB_C                   0x03   /* Bearer class C                      */
#define BCOB_X                   0x10   /* Bearer class X                      */

/*
 *  values used for the TrafficType field in struct ATM_BROADBAND_BEARER_CAPABILITY_IE
 */
#define TT_NOIND                 0x00   /* No indication of traffic type       */
#define TT_CBR                   0x04   /* Constant bit rate                   */
#define TT_VBR                   0x08   /* Variable bit rate                   */

/*
 *  values used for the TimingRequirements field in struct ATM_BROADBAND_BEARER_CAPABILITY_IE
 */
#define TR_NOIND                 0x00   /* No timing requirement indication    */
#define TR_END_TO_END            0x01   /* End-to-end timing required          */
#define TR_NO_END_TO_END         0x02   /* End-to-end timing not required      */

/*
 *  values used for the ClippingSusceptability field in struct ATM_BROADBAND_BEARER_CAPABILITY_IE
 */
#define CLIP_NOT                 0x00   /* Not susceptible to clipping         */
#define CLIP_SUS                 0x20   /* Susceptible to clipping             */

/*
 *  values used for the UserPlaneConnectionConfig field in
 *  struct ATM_BROADBAND_BEARER_CAPABILITY_IE
 */
#define UP_P2P                   0x00   /* Point-to-point connection           */
#define UP_P2MP                  0x01   /* Point-to-multipoint connection      */

typedef struct {
    UCHAR BearerClass;
    UCHAR TrafficType;
    UCHAR TimingRequirements;
    UCHAR ClippingSusceptability;
    UCHAR UserPlaneConnectionConfig;
} ATM_BROADBAND_BEARER_CAPABILITY_IE;

typedef ATM_BHLI ATM_BHLI_IE;

/*
 *  values used for the Layer2Mode field in struct ATM_BLLI_IE
 */
#define BLLI_L2_MODE_NORMAL         0x40
#define BLLI_L2_MODE_EXT            0x80

/*
 *  values used for the Layer3Mode field in struct ATM_BLLI_IE
 */
#define BLLI_L3_MODE_NORMAL         0x40
#define BLLI_L3_MODE_EXT            0x80

/*
 *  values used for the Layer3DefaultPacketSize field in struct ATM_BLLI_IE
 */
#define BLLI_L3_PACKET_16           0x04
#define BLLI_L3_PACKET_32           0x05
#define BLLI_L3_PACKET_64           0x06
#define BLLI_L3_PACKET_128          0x07
#define BLLI_L3_PACKET_256          0x08
#define BLLI_L3_PACKET_512          0x09
#define BLLI_L3_PACKET_1024         0x0A
#define BLLI_L3_PACKET_2048         0x0B
#define BLLI_L3_PACKET_4096         0x0C

typedef struct {
    DWORD Layer2Protocol;                 /* User information layer 2 protocol           */
    UCHAR Layer2Mode;
    UCHAR Layer2WindowSize;
    DWORD Layer2UserSpecifiedProtocol;    /* User specified layer 2 protocol information */
    DWORD Layer3Protocol;                 /* User information layer 3 protocol           */
    UCHAR Layer3Mode;
    UCHAR Layer3DefaultPacketSize;
    UCHAR Layer3PacketWindowSize;
    DWORD Layer3UserSpecifiedProtocol;    /* User specified layer 3 protocol information */
    DWORD Layer3IPI;                      /* ISO/IEC TR 9577 Initial Protocol Identifier */
    UCHAR SnapID[5];                      /* SNAP ID consisting of OUI and PID           */
} ATM_BLLI_IE;

typedef ATM_ADDRESS ATM_CALLED_PARTY_NUMBER_IE;

typedef ATM_ADDRESS ATM_CALLED_PARTY_SUBADDRESS_IE;

/*
 *  values used for the Presentation_Indication field in
 *  struct ATM_CALLING_PARTY_NUMBER_IE
 */
#define PI_ALLOWED                  0x00
#define PI_RESTRICTED               0x40
#define PI_NUMBER_NOT_AVAILABLE     0x80

/*
 *  values used for the Screening_Indicator field in
 *  struct ATM_CALLING_PARTY_NUMBER_IE
 */
#define SI_USER_NOT_SCREENED        0x00
#define SI_USER_PASSED              0x01
#define SI_USER_FAILED              0x02
#define SI_NETWORK                  0x03

typedef struct {
    ATM_ADDRESS ATM_Number;
    UCHAR       Presentation_Indication;
    UCHAR       Screening_Indicator;
} ATM_CALLING_PARTY_NUMBER_IE;

typedef ATM_ADDRESS ATM_CALLING_PARTY_SUBADDRESS_IE;

/*
 *  values used for the Location field in struct ATM_CAUSE_IE
 */
#define CAUSE_LOC_USER                      0x00
#define CAUSE_LOC_PRIVATE_LOCAL             0x01
#define CAUSE_LOC_PUBLIC_LOCAL              0x02
#define CAUSE_LOC_TRANSIT_NETWORK           0x03
#define CAUSE_LOC_PUBLIC_REMOTE             0x04
#define CAUSE_LOC_PRIVATE_REMOTE            0x05
#define CAUSE_LOC_INTERNATIONAL_NETWORK     0x07
#define CAUSE_LOC_BEYOND_INTERWORKING       0x0A

/*
 *  values used for the Cause field in struct ATM_CAUSE_IE
 */
#define CAUSE_UNALLOCATED_NUMBER                0x01
#define CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK       0x02
#define CAUSE_NO_ROUTE_TO_DESTINATION           0x03
#define CAUSE_VPI_VCI_UNACCEPTABLE              0x0A
#define CAUSE_NORMAL_CALL_CLEARING              0x10
#define CAUSE_USER_BUSY                         0x11
#define CAUSE_NO_USER_RESPONDING                0x12
#define CAUSE_CALL_REJECTED                     0x15
#define CAUSE_NUMBER_CHANGED                    0x16
#define CAUSE_USER_REJECTS_CLIR                 0x17
#define CAUSE_DESTINATION_OUT_OF_ORDER          0x1B
#define CAUSE_INVALID_NUMBER_FORMAT             0x1C
#define CAUSE_STATUS_ENQUIRY_RESPONSE           0x1E
#define CAUSE_NORMAL_UNSPECIFIED                0x1F
#define CAUSE_VPI_VCI_UNAVAILABLE               0x23
#define CAUSE_NETWORK_OUT_OF_ORDER              0x26
#define CAUSE_TEMPORARY_FAILURE                 0x29
#define CAUSE_ACCESS_INFORMAION_DISCARDED       0x2B
#define CAUSE_NO_VPI_VCI_AVAILABLE              0x2D
#define CAUSE_RESOURCE_UNAVAILABLE              0x2F
#define CAUSE_QOS_UNAVAILABLE                   0x31
#define CAUSE_USER_CELL_RATE_UNAVAILABLE        0x33
#define CAUSE_BEARER_CAPABILITY_UNAUTHORIZED    0x39
#define CAUSE_BEARER_CAPABILITY_UNAVAILABLE     0x3A
#define CAUSE_OPTION_UNAVAILABLE                0x3F
#define CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED   0x41
#define CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS    0x49
#define CAUSE_INVALID_CALL_REFERENCE            0x51
#define CAUSE_CHANNEL_NONEXISTENT               0x52
#define CAUSE_INCOMPATIBLE_DESTINATION          0x58
#define CAUSE_INVALID_ENDPOINT_REFERENCE        0x59
#define CAUSE_INVALID_TRANSIT_NETWORK_SELECTION 0x5B
#define CAUSE_TOO_MANY_PENDING_ADD_PARTY        0x5C
#define CAUSE_AAL_PARAMETERS_UNSUPPORTED        0x5D
#define CAUSE_MANDATORY_IE_MISSING              0x60
#define CAUSE_UNIMPLEMENTED_MESSAGE_TYPE        0x61
#define CAUSE_UNIMPLEMENTED_IE                  0x63
#define CAUSE_INVALID_IE_CONTENTS               0x64
#define CAUSE_INVALID_STATE_FOR_MESSAGE         0x65
#define CAUSE_RECOVERY_ON_TIMEOUT               0x66
#define CAUSE_INCORRECT_MESSAGE_LENGTH          0x68
#define CAUSE_PROTOCOL_ERROR                    0x6F

/*
 *  values used for the Condition portion of the Diagnostics field
 *  in struct ATM_CAUSE_IE, for certain Cause values
 */
#define CAUSE_COND_UNKNOWN                  0x00
#define CAUSE_COND_PERMANENT                0x01
#define CAUSE_COND_TRANSIENT                0x02

/*
 *  values used for the Rejection Reason portion of the Diagnostics field
 *  in struct ATM_CAUSE_IE, for certain Cause values
 */
#define CAUSE_REASON_USER                   0x00
#define CAUSE_REASON_IE_MISSING             0x04
#define CAUSE_REASON_IE_INSUFFICIENT        0x08

/*
 *  values used for the P-U flag of the Diagnostics field
 *  in struct ATM_CAUSE_IE, for certain Cause values
 */
#define CAUSE_PU_PROVIDER                   0x00
#define CAUSE_PU_USER                       0x08

/*
 *  values used for the N-A flag of the Diagnostics field
 *  in struct ATM_CAUSE_IE, for certain Cause values
 */
#define CAUSE_NA_NORMAL                     0x00
#define CAUSE_NA_ABNORMAL                   0x04

typedef struct {
    UCHAR Location;
    UCHAR Cause;
    UCHAR DiagnosticsLength;
    UCHAR Diagnostics[4];
} ATM_CAUSE_IE;

/*
 *  values used for the QOSClassForward and QOSClassBackward
 *  field in struct ATM_QOS_CLASS_IE
 */
#define QOS_CLASS0                  0x00
#define QOS_CLASS1                  0x01
#define QOS_CLASS2                  0x02
#define QOS_CLASS3                  0x03
#define QOS_CLASS4                  0x04

typedef struct {
    UCHAR QOSClassForward;
    UCHAR QOSClassBackward;
} ATM_QOS_CLASS_IE;

/*
 *  values used for the TypeOfNetworkId field in struct ATM_TRANSIT_NETWORK_SELECTION_IE
 */
#define TNS_TYPE_NATIONAL           0x40

/*
 *  values used for the NetworkIdPlan field in struct ATM_TRANSIT_NETWORK_SELECTION_IE
 */
#define TNS_PLAN_CARRIER_ID_CODE    0x01

typedef struct {
    UCHAR TypeOfNetworkId;
    UCHAR NetworkIdPlan;
    UCHAR NetworkIdLength;
    UCHAR NetworkId[1];
} ATM_TRANSIT_NETWORK_SELECTION_IE;

/*
 *  ATM specific Ioctl codes
 */
#define SIO_GET_NUMBER_OF_ATM_DEVICES   0x50160001
#define SIO_GET_ATM_ADDRESS             0xd0160002
#define SIO_ASSOCIATE_PVC               0x90160003
#define SIO_GET_ATM_CONNECTION_ID       0x50160004

/* ATM Connection Identifier */

typedef struct {
    DWORD  DeviceNumber;
    DWORD  VPI;
    DWORD  VCI;
} ATM_CONNECTION_ID;

/*
 * Input buffer format for SIO_ASSOCIATE_PVC
 */

typedef struct {
   ATM_CONNECTION_ID   PvcConnectionId;
   QOS                 PvcQos;
} ATM_PVC_PARAMS;

#include <poppack.h>

#endif   /* _WS2ATM_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsbapperror.h ===
/*--

 Copyright (C) 2007 Microsoft Corporation

 Module Name:

     wsbapperror.h

 Abstract:

     This module contains the specific error codes returned by
     the COM interfaces implemented by the application to integrate 
     with Windows Server Backup

 --*/

#ifndef _WSBAPPERROR_H
#define _WSBAPPERROR_H

#define SEVERITY_OF(code)          ((code>>30) & 0x00000003)
#define FACILITY_OF(code)          ((code>>16) & 0x00000FFF)

//
//  Values are 32 bit values laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_WSBAPP                  0x7A


//
// Define the severity codes
//
#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3


//
// MessageId: WSBAPP_E_COMPONENT_CONSISTENCY_CHECK_FAILED
//
// MessageText:
//
// The component consistency check failed.
//
#define WSBAPP_E_COMPONENT_CONSISTENCY_CHECK_FAILED ((HRESULT)0x807A0001L)

//
// MessageId: WSBAPP_E_COMPONENT_PRE_RESTORE_FAILED
//
// MessageText:
//
// The pre-restore steps for the component failed.
//
#define WSBAPP_E_COMPONENT_PRE_RESTORE_FAILED ((HRESULT)0x807A0002L)

//
// MessageId: WSBAPP_E_COMPONENT_POST_RESTORE_FAILED
//
// MessageText:
//
// The post-restore steps for the component failed.
//
#define WSBAPP_E_COMPONENT_POST_RESTORE_FAILED ((HRESULT)0x807A0003L)

//
// MessageId: WSBAPP_ASYNC_IN_PROGRESS
//
// MessageText:
//
// An asynchronous operation is in progress.
//
#define WSBAPP_ASYNC_IN_PROGRESS         ((HRESULT)0x407A0004L)

#endif // _WSBAPPERROR_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\Wscapi.h ===
#pragma once

#if(_WIN32_WINNT >= 0x0600)
typedef enum _WSC_SECURITY_PROVIDER
{
    // Represents the aggregation of all firewalls for this computer.
    WSC_SECURITY_PROVIDER_FIREWALL =                   0x1,
    // Represents the Automatic updating settings for this computer.
    WSC_SECURITY_PROVIDER_AUTOUPDATE_SETTINGS  =       0x2,
    // Represents the aggregation of all antivirus products for this comptuer.
    WSC_SECURITY_PROVIDER_ANTIVIRUS =                  0x4,
    // Represents the aggregation of all antispyware products for this comptuer.
    WSC_SECURITY_PROVIDER_ANTISPYWARE =                0x8,
    // Represents the settings that restrict the access of web sites in each of the internet zones.
    WSC_SECURITY_PROVIDER_INTERNET_SETTINGS =          0x10,
    // Represents the User Account Control settings on this machine.
    WSC_SECURITY_PROVIDER_USER_ACCOUNT_CONTROL =       0x20,
    // Represents the running state of the Security Center service on this machine.
    WSC_SECURITY_PROVIDER_SERVICE =                    0x40,

    WSC_SECURITY_PROVIDER_NONE =                       0,

    // Aggregates all of the items that Security Center monitors.
    WSC_SECURITY_PROVIDER_ALL =                             WSC_SECURITY_PROVIDER_FIREWALL | 
                                                            WSC_SECURITY_PROVIDER_AUTOUPDATE_SETTINGS | 
                                                            WSC_SECURITY_PROVIDER_ANTIVIRUS | 
                                                            WSC_SECURITY_PROVIDER_ANTISPYWARE | 
                                                            WSC_SECURITY_PROVIDER_INTERNET_SETTINGS | 
                                                            WSC_SECURITY_PROVIDER_USER_ACCOUNT_CONTROL | 
                                                            WSC_SECURITY_PROVIDER_SERVICE
} WSC_SECURITY_PROVIDER, *PWSC_SECURITY_PROVIDER;

typedef enum _WSC_SECURITY_PROVIDER_HEALTH
{
    WSC_SECURITY_PROVIDER_HEALTH_GOOD, // Green pillar in English locales
    WSC_SECURITY_PROVIDER_HEALTH_NOTMONITORED, // Yellow pillar in English locales
    WSC_SECURITY_PROVIDER_HEALTH_POOR,  // Red pillar in English locales
    WSC_SECURITY_PROVIDER_HEALTH_SNOOZE, // Yellow pillar in English locales
} WSC_SECURITY_PROVIDER_HEALTH, *PWSC_SECURITY_PROVIDER_HEALTH;


// The WscRegisterForChanges function registers a callback function to be run when Windows Security Center (WSC) detects 
// a change that could affect the health of one of the security providers.
// 
// Parameters:
// Reserved [in]: Reserved. Must be NULL.
// phCallbackRegistration [out]: A pointer to a handle to the callback registration. When you are finished using 
//                               the callback function, unregister it by calling the WscUnRegisterChanges function.
// lpCallbackAddress [in]: A pointer to the application-defined function to be called when a change to the WSC 
//                         service occurs. This function is also called when the WSC service is started or stopped.
// pContext [in]: A pointer to a variable to be passed as the lpParameter parameter to the function pointed to by the 
//                lpCallbackAddress parameter.
//
// Return Values:
// Returns S_OK if the function succeeds, otherwise returns an error code.
//
// Remarks:
// When you want to cease receiving notification to your callback method, you can unregister it by calling the 
// WscUnRegisterChanges function.




STDAPI WscRegisterForChanges(LPVOID Reserved, 
                             PHANDLE phCallbackRegistration,
                             LPTHREAD_START_ROUTINE lpCallbackAddress, 
                             PVOID pContext);

// The WscUnRegisterChanges function cancels a callback registration that was made by a call to the WscRegisterForChanges 
// function.
// 
// Parameters:
// hRegistrationHandle [in]: The handle to the registration context returned as the phCallbackRegistration of the 
//                           WscRegisterForChanges function. 
//
// Return Values:
// Returns S_OK if the function succeeds, otherwise returns an error code.

STDAPI WscUnRegisterChanges(HANDLE hRegistrationHandle);

// The WscGetSecurityProviderHealth function gets the aggregate health state of the security provider categories represented 
// by the specified WSC_SECURITY_PROVIDER enumeration values.
// 
// Parameters:
// Providers [in]: One or more of the values in the WSC_SECURITY_PROVIDER enumeration. To specify more than one value, 
//                 combine the individual values by performing a bitwise OR operation.
// pHealth [out]: A pointer to a variable that takes the value of one of the members of the WSC_SECURITY_PROVIDER_HEALTH 
//                enumeration. If more than one provider is specified in the Providers parameter, the value of this parameter 
//                is the health of the least healthy of the specified provider categories. 
//
// Return values:  
// Returns S_OK if the function succeeds, otherwise returns an error code. If the WSC service is not running, the return value 
// is always S_FALSE and the pHealth out parameter is always set to WSC_SECURITY_PROVIDER_HEALTH_POOR.
// 

STDAPI WscGetSecurityProviderHealth(DWORD Providers,
                                    PWSC_SECURITY_PROVIDER_HEALTH pHealth);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WS2tcpip.h ===
/*
**  WS2TCPIP.H - WinSock2 Extension for TCP/IP protocols
**
**  This file contains TCP/IP specific information for use
**  by WinSock2 compatible applications.
**
**  Copyright (c) Microsoft Corporation. All rights reserved.
**
**  To provide the backward compatibility, all the TCP/IP
**  specific definitions that were included in the WINSOCK.H
**   file are now included in WINSOCK2.H file. WS2TCPIP.H
**  file includes only the definitions  introduced in the
**  "WinSock 2 Protocol-Specific Annex" document.
**
**  Rev 0.3 Nov 13, 1995
**      Rev 0.4 Dec 15, 1996
*/

#ifndef _WS2TCPIP_H_
#define _WS2TCPIP_H_

#if _MSC_VER > 1000
#pragma once
#endif

#include <winsock2.h>
#include <ws2ipdef.h>
#include <limits.h>

/* Option to use with [gs]etsockopt at the IPPROTO_UDP level */

#define UDP_NOCHECKSUM  1
#define UDP_CHECKSUM_COVERAGE   20  /* Set/get UDP-Lite checksum coverage */

#ifdef _MSC_VER
#define WS2TCPIP_INLINE __inline
#else
#define WS2TCPIP_INLINE extern inline /* GNU style */
#endif

/* Error codes from getaddrinfo() */

#define EAI_AGAIN           WSATRY_AGAIN
#define EAI_BADFLAGS        WSAEINVAL
#define EAI_FAIL            WSANO_RECOVERY
#define EAI_FAMILY          WSAEAFNOSUPPORT
#define EAI_MEMORY          WSA_NOT_ENOUGH_MEMORY
#define EAI_NOSECURENAME    WSA_SECURE_HOST_NOT_FOUND
//#define EAI_NODATA        WSANO_DATA
#define EAI_NONAME          WSAHOST_NOT_FOUND
#define EAI_SERVICE         WSATYPE_NOT_FOUND
#define EAI_SOCKTYPE        WSAESOCKTNOSUPPORT
#define EAI_IPSECPOLICY     WSA_IPSEC_NAME_POLICY_ERROR
//
//  DCR_FIX:  EAI_NODATA remove or fix
//
//  EAI_NODATA was removed from rfc2553bis
//  need to find out from the authors why and
//  determine the error for "no records of this type"
//  temporarily, we'll keep #define to avoid changing
//  code that could change back;  use NONAME
//

#define EAI_NODATA      EAI_NONAME

//  Switchable definition for GetAddrInfo()

#ifdef UNICODE
typedef ADDRINFOW       ADDRINFOT, *PADDRINFOT;
#else
typedef ADDRINFOA       ADDRINFOT, *PADDRINFOT;
#endif

//  RFC standard definition for getaddrinfo()

typedef ADDRINFOA       ADDRINFO, FAR * LPADDRINFO;

#if (_WIN32_WINNT >= 0x0600)

#ifdef UNICODE
typedef ADDRINFOEXW     ADDRINFOEX, *PADDRINFOEX;
#else
typedef ADDRINFOEXA     ADDRINFOEX, *PADDRINFOEX;
#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

WINSOCK_API_LINKAGE
INT
WSAAPI
getaddrinfo(
    __in_opt        PCSTR               pNodeName,
    __in_opt        PCSTR               pServiceName,
    __in_opt        const ADDRINFOA *   pHints,
    __deref_out     PADDRINFOA *        ppResult
    );

#if (NTDDI_VERSION >= NTDDI_WINXPSP2) || (_WIN32_WINNT >= 0x0502)
WINSOCK_API_LINKAGE
INT
WSAAPI
GetAddrInfoW(
    __in_opt        PCWSTR              pNodeName,
    __in_opt        PCWSTR              pServiceName,
    __in_opt        const ADDRINFOW *   pHints,
    __deref_out     PADDRINFOW *        ppResult
    );

#define GetAddrInfoA    getaddrinfo

#ifdef UNICODE
#define GetAddrInfo     GetAddrInfoW
#else
#define GetAddrInfo     GetAddrInfoA
#endif
#endif

#if INCL_WINSOCK_API_TYPEDEFS
typedef
INT
(WSAAPI * LPFN_GETADDRINFO)(
    __in_opt        PCSTR               pNodeName,
    __in_opt        PCSTR               pServiceName,
    __in_opt        const ADDRINFOA *   pHints,
    __deref_out     PADDRINFOA *        ppResult
    );

typedef
INT
(WSAAPI * LPFN_GETADDRINFOW)(
    __in_opt        PCWSTR              pNodeName,
    __in_opt        PCWSTR              pServiceName,
    __in_opt        const ADDRINFOW *   pHints,
    __deref_out     PADDRINFOW *        ppResult
    );

#define LPFN_GETADDRINFOA      LPFN_GETADDRINFO

#ifdef UNICODE
#define LPFN_GETADDRINFOT      LPFN_GETADDRINFOW
#else
#define LPFN_GETADDRINFOT      LPFN_GETADDRINFOA
#endif
#endif

#if (_WIN32_WINNT >= 0x0600)

typedef
void
(CALLBACK * LPLOOKUPSERVICE_COMPLETION_ROUTINE)(
    __in      DWORD    dwError,
    __in      DWORD    dwBytes,
    __in      LPWSAOVERLAPPED lpOverlapped
    );

WINSOCK_API_LINKAGE
INT
WSAAPI
GetAddrInfoExA(
    __in_opt    PCSTR           pName,
    __in_opt    PCSTR           pServiceName,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    const ADDRINFOEXA *hints,
    __deref_out PADDRINFOEXA *  ppResult,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

WINSOCK_API_LINKAGE
INT
WSAAPI
GetAddrInfoExW(
    __in_opt    PCWSTR          pName,
    __in_opt    PCWSTR          pServiceName,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    const ADDRINFOEXW *hints,
    __deref_out PADDRINFOEXW *  ppResult,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpHandle
    );

#ifdef UNICODE
#define GetAddrInfoEx       GetAddrInfoExW
#else
#define GetAddrInfoEx       GetAddrInfoExA
#endif

#if INCL_WINSOCK_API_TYPEDEFS

typedef
INT
(WSAAPI *LPFN_GETADDRINFOEXA)(
    __in        PCSTR           pName,
    __in_opt    PCSTR           pServiceName,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    const ADDRINFOEXA *hints,
    __deref_out PADDRINFOEXA   *ppResult,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

typedef
INT
(WSAAPI *LPFN_GETADDRINFOEXW)(
    __in        PCWSTR          pName,
    __in_opt    PCWSTR          pServiceName,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    const ADDRINFOEXW *hints,
    __deref_out PADDRINFOEXW   *ppResult,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpHandle
    );

#ifdef UNICODE
#define LPFN_GETADDRINFOEX      LPFN_GETADDRINFOEXW
#else
#define LPFN_GETADDRINFOEX      LPFN_GETADDRINFOEXA
#endif
#endif

#endif

#if (_WIN32_WINNT >= 0x0600)

WINSOCK_API_LINKAGE
INT
WSAAPI
SetAddrInfoExA(
    __in        PCSTR           pName,
    __in_opt    PCSTR           pServiceName,
    __in_opt    SOCKET_ADDRESS *pAddresses,
    __in        DWORD           dwAddressCount,
    __in_opt    LPBLOB          lpBlob,
    __in        DWORD           dwFlags,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

WINSOCK_API_LINKAGE
INT
WSAAPI
SetAddrInfoExW(
    __in        PCWSTR          pName,
    __in_opt    PCWSTR          pServiceName,
    __in_opt    SOCKET_ADDRESS *pAddresses,
    __in        DWORD           dwAddressCount,
    __in_opt    LPBLOB          lpBlob,
    __in        DWORD           dwFlags,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

#ifdef UNICODE
#define SetAddrInfoEx       SetAddrInfoExW
#else
#define SetAddrInfoEx       SetAddrInfoExA
#endif

#if INCL_WINSOCK_API_TYPEDEFS
typedef
INT
(WSAAPI *LPFN_SETADDRINFOEXA)(
    __in        PCSTR           pName,
    __in_opt    PCSTR           pServiceName,
    __in_opt    SOCKET_ADDRESS *pAddresses,
    __in        DWORD           dwAddressCount,
    __in_opt    LPBLOB          lpBlob,
    __in        DWORD           dwFlags,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

typedef
INT
(WSAAPI *LPFN_SETADDRINFOEXW)(
    __in        PCWSTR          pName,
    __in_opt    PCWSTR          pServiceName,
    __in_opt    SOCKET_ADDRESS *pAddresses,
    __in        DWORD           dwAddressCount,
    __in_opt    LPBLOB          lpBlob,
    __in        DWORD           dwFlags,
    __in        DWORD           dwNameSpace,
    __in_opt    LPGUID          lpNspId,
    __in_opt    struct timeval *timeout,
    __in_opt    LPOVERLAPPED    lpOverlapped,
    __in_opt    LPLOOKUPSERVICE_COMPLETION_ROUTINE  lpCompletionRoutine,
    __out_opt   LPHANDLE        lpNameHandle
    );

#ifdef UNICODE
#define LPFN_SETADDRINFOEX      LPFN_SETADDRINFOEXW
#else
#define LPFN_SETADDRINFOEX      LPFN_SETADDRINFOEXA
#endif
#endif

#endif

WINSOCK_API_LINKAGE
VOID
WSAAPI
freeaddrinfo(
    __in_opt        PADDRINFOA      pAddrInfo
    );

#if (NTDDI_VERSION >= NTDDI_WINXPSP2) || (_WIN32_WINNT >= 0x0502)
WINSOCK_API_LINKAGE
VOID
WSAAPI
FreeAddrInfoW(
    __in_opt        PADDRINFOW      pAddrInfo
    );

#define FreeAddrInfoA   freeaddrinfo

#ifdef UNICODE
#define FreeAddrInfo    FreeAddrInfoW
#else
#define FreeAddrInfo    FreeAddrInfoA
#endif
#endif


#if INCL_WINSOCK_API_TYPEDEFS
typedef
VOID
(WSAAPI * LPFN_FREEADDRINFO)(
    __in_opt        PADDRINFOA      pAddrInfo
    );
typedef
VOID
(WSAAPI * LPFN_FREEADDRINFOW)(
    __in_opt        PADDRINFOW      pAddrInfo
    );

#define LPFN_FREEADDRINFOA      LPFN_FREEADDRINFO

#ifdef UNICODE
#define LPFN_FREEADDRINFOT      LPFN_FREEADDRINFOW
#else
#define LPFN_FREEADDRINFOT      LPFN_FREEADDRINFOA
#endif
#endif

#if (_WIN32_WINNT >= 0x0600)

WINSOCK_API_LINKAGE
void
WSAAPI
FreeAddrInfoEx(
    __in_opt  PADDRINFOEXA    pAddrInfoEx
    );

WINSOCK_API_LINKAGE
void
WSAAPI
FreeAddrInfoExW(
    __in_opt  PADDRINFOEXW    pAddrInfoEx
    );

#define FreeAddrInfoExA     FreeAddrInfoEx

#ifdef UNICODE
#define FreeAddrInfoEx      FreeAddrInfoExW
#endif

#ifdef INCL_WINSOCK_API_TYPEDEFS
typedef
void
(WSAAPI *LPFN_FREEADDRINFOEXA)(
    __in    PADDRINFOEXA    pAddrInfoEx
    );

typedef
void
(WSAAPI *LPFN_FREEADDRINFOEXW)(
    __in    PADDRINFOEXW    pAddrInfoEx
    );


#ifdef UNICODE
#define LPFN_FREEADDRINFOEX     LPFN_FREEADDRINFOEXW
#else
#define LPFN_FREEADDRINFOEX     LPFN_FREEADDRINFOEXA
#endif

#endif
#endif

typedef int socklen_t;

WINSOCK_API_LINKAGE
INT
WSAAPI
getnameinfo(
    __in_bcount(SockaddrLength)         const SOCKADDR *    pSockaddr,
    __in                                socklen_t           SockaddrLength,
    __out_ecount_opt(NodeBufferSize)    PCHAR               pNodeBuffer,
    __in                                DWORD               NodeBufferSize,
    __out_ecount_opt(ServiceBufferSize) PCHAR               pServiceBuffer,
    __in                                DWORD               ServiceBufferSize,
    __in                                INT                 Flags
    );

#if (NTDDI_VERSION >= NTDDI_WINXPSP2) || (_WIN32_WINNT >= 0x0502)
WINSOCK_API_LINKAGE
INT
WSAAPI
GetNameInfoW(
    __in_bcount(SockaddrLength)         const SOCKADDR *    pSockaddr,
    __in                                socklen_t           SockaddrLength,
    __out_ecount_opt(NodeBufferSize)    PWCHAR              pNodeBuffer,
    __in                                DWORD               NodeBufferSize,
    __out_ecount_opt(ServiceBufferSize) PWCHAR              pServiceBuffer,
    __in                                DWORD               ServiceBufferSize,
    __in                                INT                 Flags
    );

#define GetNameInfoA    getnameinfo

#ifdef UNICODE
#define GetNameInfo     GetNameInfoW
#else
#define GetNameInfo     GetNameInfoA
#endif
#endif

#if INCL_WINSOCK_API_TYPEDEFS
typedef
int
(WSAAPI * LPFN_GETNAMEINFO)(
    __in_bcount(SockaddrLength)         const SOCKADDR *    pSockaddr,
    __in                                socklen_t           SockaddrLength,
    __out_ecount_opt(NodeBufferSize)    PCHAR               pNodeBuffer,
    __in                                DWORD               NodeBufferSize,
    __out_ecount_opt(ServiceBufferSize) PCHAR               pServiceBuffer,
    __in                                DWORD               ServiceBufferSize,
    __in                                INT                 Flags
    );

typedef
INT
(WSAAPI * LPFN_GETNAMEINFOW)(
    __in_bcount(SockaddrLength)         const SOCKADDR *    pSockaddr,
    __in                                socklen_t           SockaddrLength,
    __out_ecount_opt(NodeBufferSize)    PWCHAR              pNodeBuffer,
    __in                                DWORD               NodeBufferSize,
    __out_ecount_opt(ServiceBufferSize) PWCHAR              pServiceBuffer,
    __in                                DWORD               ServiceBufferSize,
    __in                                INT                 Flags
    );

#define LPFN_GETNAMEINFOA      LPFN_GETNAMEINFO

#ifdef UNICODE
#define LPFN_GETNAMEINFOT      LPFN_GETNAMEINFOW
#else
#define LPFN_GETNAMEINFOT      LPFN_GETNAMEINFOA
#endif
#endif


#if (NTDDI_VERSION >= NTDDI_VISTA)
WINSOCK_API_LINKAGE
INT
WSAAPI
inet_pton(
    __in                                INT             Family,
    __in                                PCSTR           pszAddrString,
    __out_bcount(sizeof(IN6_ADDR))      PVOID           pAddrBuf
    );

INT
WSAAPI
InetPtonW(
    __in                                INT             Family,
    __in                                PCWSTR          pszAddrString,
    __out_bcount(sizeof(IN6_ADDR))      PVOID           pAddrBuf
    );

PCSTR
WSAAPI
inet_ntop(
    __in                                INT             Family,
    __in                                PVOID           pAddr,
    __out_ecount(StringBufSize)         PSTR            pStringBuf,
    __in                                size_t          StringBufSize
    );

PCWSTR
WSAAPI
InetNtopW(
    __in                                INT             Family,
    __in                                PVOID           pAddr,
    __out_ecount(StringBufSize)         PWSTR           pStringBuf,
    __in                                size_t          StringBufSize
    );

#define InetPtonA       inet_pton
#define InetNtopA       inet_ntop

#ifdef UNICODE
#define InetPton        InetPtonW
#define InetNtop        InetNtopW
#else
#define InetPton        InetPtonA
#define InetNtop        InetNtopA
#endif

#if INCL_WINSOCK_API_TYPEDEFS
typedef
INT
(WSAAPI * LPFN_INET_PTONA)(
    __in                                INT             Family,
    __in                                PCSTR           pszAddrString,
    __out_bcount(sizeof(IN6_ADDR))      PVOID           pAddrBuf
    );

typedef
INT
(WSAAPI * LPFN_INET_PTONW)(
    __in                                INT             Family,
    __in                                PCWSTR          pszAddrString,
    __out_bcount(sizeof(IN6_ADDR))      PVOID           pAddrBuf
    );

typedef
PCSTR
(WSAAPI * LPFN_INET_NTOPA)(
    __in                                INT             Family,
    __in                                PVOID           pAddr,
    __out_ecount(StringBufSize)         PSTR            pStringBuf,
    __in                                size_t          StringBufSize
    );

typedef
PCWSTR
(WSAAPI * LPFN_INET_NTOPW)(
    __in                                INT             Family,
    __in                                PVOID           pAddr,
    __out_ecount(StringBufSize)         PWSTR           pStringBuf,
    __in                                size_t          StringBufSize
    );

#ifdef UNICODE
#define LPFN_INET_PTON          LPFN_INET_PTONW
#define LPFN_INET_NTOP          LPFN_INET_NTOPW
#else
#define LPFN_INET_PTON          LPFN_INET_PTONA
#define LPFN_INET_NTOP          LPFN_INET_NTOPA
#endif

#endif  //  TYPEDEFS
#endif  //  (NTDDI_VERSION >= NTDDI_VISTA)



#if INCL_WINSOCK_API_PROTOTYPES
#ifdef UNICODE
#define gai_strerror   gai_strerrorW
#else
#define gai_strerror   gai_strerrorA
#endif  /* UNICODE */

// WARNING: The gai_strerror inline functions below use static buffers,
// and hence are not thread-safe.  We'll use buffers long enough to hold
// 1k characters.  Any system error messages longer than this will be
// returned as empty strings.  However 1k should work for the error codes
// used by getaddrinfo().
#define GAI_STRERROR_BUFFER_SIZE 1024

WS2TCPIP_INLINE
char *
gai_strerrorA(
    __in int ecode)
{
    DWORD dwMsgLen;
    static char buff[GAI_STRERROR_BUFFER_SIZE + 1];

    dwMsgLen = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM
                             |FORMAT_MESSAGE_IGNORE_INSERTS
                             |FORMAT_MESSAGE_MAX_WIDTH_MASK,
                              NULL,
                              ecode,
                              MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                              (LPSTR)buff,
                              GAI_STRERROR_BUFFER_SIZE,
                              NULL);

    return buff;
}

WS2TCPIP_INLINE
WCHAR *
gai_strerrorW(
    __in int ecode
    )
{
    DWORD dwMsgLen;
    static WCHAR buff[GAI_STRERROR_BUFFER_SIZE + 1];

    dwMsgLen = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM
                             |FORMAT_MESSAGE_IGNORE_INSERTS
                             |FORMAT_MESSAGE_MAX_WIDTH_MASK,
                              NULL,
                              ecode,
                              MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                              (LPWSTR)buff,
                              GAI_STRERROR_BUFFER_SIZE,
                              NULL);

    return buff;
}
#endif /* INCL_WINSOCK_API_PROTOTYPES */


/* Multicast source filter APIs from RFC 3678. */

WS2TCPIP_INLINE
int
setipv4sourcefilter(
    __in SOCKET Socket,
    __in IN_ADDR Interface,
    __in IN_ADDR Group,
    __in MULTICAST_MODE_TYPE FilterMode,
    __in ULONG SourceCount,
    __in CONST IN_ADDR *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PIP_MSFILTER Filter;

    if (SourceCount >
        (((ULONG) (ULONG_MAX - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Size = IP_MSFILTER_SIZE(SourceCount);
    Filter = (PIP_MSFILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == NULL) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Filter->imsf_multiaddr = Group;
    Filter->imsf_interface = Interface;
    Filter->imsf_fmode = FilterMode;
    Filter->imsf_numsrc = SourceCount;
    if (SourceCount > 0) {
        CopyMemory(Filter->imsf_slist, SourceList,
                   SourceCount * sizeof(*SourceList));
    }

    Error = WSAIoctl(Socket, SIOCSIPMSFILTER, Filter, Size, NULL, 0,
                     &Returned, NULL, NULL);

    HeapFree(GetProcessHeap(), 0, Filter);

    return Error;
}

WS2TCPIP_INLINE
int
getipv4sourcefilter(
    __in SOCKET Socket,
    __in IN_ADDR Interface,
    __in IN_ADDR Group,
    __out MULTICAST_MODE_TYPE *FilterMode,
    __inout ULONG *SourceCount,
    __out IN_ADDR *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PIP_MSFILTER Filter;

    if (*SourceCount >
        (((ULONG) (ULONG_MAX - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Size = IP_MSFILTER_SIZE(*SourceCount);
    Filter = (PIP_MSFILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == NULL) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Filter->imsf_multiaddr = Group;
    Filter->imsf_interface = Interface;
    Filter->imsf_numsrc = *SourceCount;

    Error = WSAIoctl(Socket, SIOCGIPMSFILTER, Filter, Size, Filter, Size,
                     &Returned, NULL, NULL);

    if (Error == 0) {
        if (*SourceCount > 0) {
            CopyMemory(SourceList, Filter->imsf_slist,
                       *SourceCount * sizeof(*SourceList));
            *SourceCount = Filter->imsf_numsrc;
        }
        *FilterMode = Filter->imsf_fmode;
    }

    HeapFree(GetProcessHeap(), 0, Filter);

    return Error;
}

#if (NTDDI_VERSION >= NTDDI_WINXP)
WS2TCPIP_INLINE
int
setsourcefilter(
    __in SOCKET Socket,
    __in ULONG Interface,
    __in CONST SOCKADDR *Group,
    __in int GroupLength,
    __in MULTICAST_MODE_TYPE FilterMode,
    __in ULONG SourceCount,
    __in CONST SOCKADDR_STORAGE *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PGROUP_FILTER Filter;

    if (SourceCount >=
        (((ULONG) (ULONG_MAX - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Size = GROUP_FILTER_SIZE(SourceCount);
    Filter = (PGROUP_FILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == NULL) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Filter->gf_interface = Interface;
    ZeroMemory(&Filter->gf_group, sizeof(Filter->gf_group));
    CopyMemory(&Filter->gf_group, Group, GroupLength);
    Filter->gf_fmode = FilterMode;
    Filter->gf_numsrc = SourceCount;
    if (SourceCount > 0) {
        CopyMemory(Filter->gf_slist, SourceList,
                   SourceCount * sizeof(*SourceList));
    }

    Error = WSAIoctl(Socket, SIOCSMSFILTER, Filter, Size, NULL, 0,
                     &Returned, NULL, NULL);

    HeapFree(GetProcessHeap(), 0, Filter);

    return Error;
}

WS2TCPIP_INLINE
int
getsourcefilter(
    __in SOCKET Socket,
    __in ULONG Interface,
    __in CONST SOCKADDR *Group,
    __in int GroupLength,
    __out MULTICAST_MODE_TYPE *FilterMode,
    __inout ULONG *SourceCount,
    __out SOCKADDR_STORAGE *SourceList
    )
{
    int Error;
    DWORD Size, Returned;
    PGROUP_FILTER Filter;

    if (*SourceCount >
        (((ULONG) (ULONG_MAX - sizeof(*Filter))) / sizeof(*SourceList))) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Size = GROUP_FILTER_SIZE(*SourceCount);
    Filter = (PGROUP_FILTER) HeapAlloc(GetProcessHeap(), 0, Size);
    if (Filter == NULL) {
        WSASetLastError(WSAENOBUFS);
        return SOCKET_ERROR;
    }

    Filter->gf_interface = Interface;
    ZeroMemory(&Filter->gf_group, sizeof(Filter->gf_group));
    CopyMemory(&Filter->gf_group, Group, GroupLength);
    Filter->gf_numsrc = *SourceCount;

    Error = WSAIoctl(Socket, SIOCGMSFILTER, Filter, Size, Filter, Size,
                     &Returned, NULL, NULL);

    if (Error == 0) {
        if (*SourceCount > 0) {
            CopyMemory(SourceList, Filter->gf_slist,
                       *SourceCount * sizeof(*SourceList));
            *SourceCount = Filter->gf_numsrc;
        }
        *FilterMode = Filter->gf_fmode;
    }

    HeapFree(GetProcessHeap(), 0, Filter);

    return Error;
}
#endif

#ifdef IDEAL_SEND_BACKLOG_IOCTLS

//
// Wrapper functions for the ideal send backlog query and change notification
// ioctls
//

WS2TCPIP_INLINE 
int  
idealsendbacklogquery(
    __in SOCKET s,
    __out ULONG *pISB
    )
{
    DWORD bytes;

    return WSAIoctl(s, SIO_IDEAL_SEND_BACKLOG_QUERY, 
                    NULL, 0, pISB, sizeof(*pISB), &bytes, NULL, NULL);
}


WS2TCPIP_INLINE 
int  
idealsendbacklognotify(
    __in SOCKET s,
    __in_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    )
{
    DWORD bytes;

    return WSAIoctl(s, SIO_IDEAL_SEND_BACKLOG_CHANGE, 
                    NULL, 0, NULL, 0, &bytes, 
                    lpOverlapped, lpCompletionRoutine);
}

#endif

#if (_WIN32_WINNT >= 0x0600)
#ifdef _SECURE_SOCKET_TYPES_DEFINED_

//
// Secure socket API definitions
//

WINSOCK_API_LINKAGE
INT
WSAAPI
WSASetSocketSecurity (
   __in SOCKET Socket,
   __in_bcount_opt(SecuritySettingsLen) const SOCKET_SECURITY_SETTINGS* SecuritySettings,
   __in ULONG SecuritySettingsLen,
   __in_opt LPWSAOVERLAPPED Overlapped,
   __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine
);

WINSOCK_API_LINKAGE
INT
WSAAPI
WSAQuerySocketSecurity (
   __in SOCKET Socket,
   __in_bcount_opt(SecurityQueryTemplateLen) const SOCKET_SECURITY_QUERY_TEMPLATE* SecurityQueryTemplate,
   __in ULONG SecurityQueryTemplateLen,
   __out_bcount_part_opt(*SecurityQueryInfoLen, *SecurityQueryInfoLen) SOCKET_SECURITY_QUERY_INFO* SecurityQueryInfo,
   __inout ULONG* SecurityQueryInfoLen,
   __in_opt LPWSAOVERLAPPED Overlapped,
   __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine
);

WINSOCK_API_LINKAGE
INT
WSAAPI
WSASetSocketPeerTargetName (
   __in SOCKET Socket,
   __in_bcount(PeerTargetNameLen) const SOCKET_PEER_TARGET_NAME* PeerTargetName,
   __in ULONG PeerTargetNameLen,
   __in_opt LPWSAOVERLAPPED Overlapped,
   __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine
);

WINSOCK_API_LINKAGE
INT
WSAAPI
WSADeleteSocketPeerTargetName (
   __in SOCKET Socket,
   __in_bcount(PeerAddrLen) const struct sockaddr* PeerAddr,
   __in ULONG PeerAddrLen,
   __in_opt LPWSAOVERLAPPED Overlapped,
   __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine
);

WINSOCK_API_LINKAGE
INT
WSAAPI
WSAImpersonateSocketPeer (
   __in SOCKET Socket,
   __in_bcount_opt(PeerAddrLen) const struct sockaddr* PeerAddr,
   __in ULONG PeerAddrLen
);

WINSOCK_API_LINKAGE
INT
WSAAPI
WSARevertImpersonation ();

#endif //_SECURE_SOCKET_TYPES_DEFINED_
#endif //(_WIN32_WINNT >= 0x0600)

#ifdef __cplusplus
}
#endif

//
// Unless the build environment is explicitly targeting only
// platforms that include built-in getaddrinfo() support, include
// the backwards-compatibility version of the relevant APIs.
//
#if !defined(_WIN32_WINNT) || (_WIN32_WINNT <= 0x0500)
#include <wspiapi.h>
#endif

#endif  /* _WS2TCPIP_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\ws2def.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    ws2def.h

Abstract:
 
    This file contains the core definitions for the Winsock2
    specification that can be used by both user-mode and 
    kernel mode modules.

    This file is included in WINSOCK2.H. User mode applications
    should include WINSOCK2.H rather than including this file
    directly. This file can not be included by a module that also
    includes WINSOCK.H.
 
Environment:

    user mode or kernel mode

--*/

#ifndef _WS2DEF_
#define _WS2DEF_

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(_WINSOCK2API_) && defined(_WINSOCKAPI_)    
#error Do not include winsock.h and ws2def.h in the same module. Instead include only winsock2.h.
#endif

#pragma warning(push)
#pragma warning(disable:4201)
#pragma warning(disable:4214) // bit field types other than int

//
// Allow Winsock components to disable PREfast errors.
//

#if defined(_PREFAST_) && defined(IPV6_PREFAST_SAFE)
#include <ipv6prefast.h>
#endif // _PREFAST_

#if(_WIN32_WINNT >= 0x0600)

#ifdef _MSC_VER
#define WS2DEF_INLINE __inline
#else
#define WS2DEF_INLINE extern inline /* GNU style */
#endif

#endif//(_WIN32_WINNT >= 0x0600)

#include <inaddr.h>

//#if(_WIN32_WINNT >= 0x0600)

//
// Address families.
//

typedef USHORT ADDRESS_FAMILY;

//#endif//(_WIN32_WINNT >= 0x0600)

//
// Although AF_UNSPEC is defined for backwards compatibility, using
// AF_UNSPEC for the "af" parameter when creating a socket is STRONGLY
// DISCOURAGED.  The interpretation of the "protocol" parameter
// depends on the actual address family chosen.  As environments grow
// to include more and more address families that use overlapping
// protocol values there is more and more chance of choosing an
// undesired address family when AF_UNSPEC is used.
//
#define AF_UNSPEC       0               // unspecified
#define AF_UNIX         1               // local to host (pipes, portals)
#define AF_INET         2               // internetwork: UDP, TCP, etc.
#define AF_IMPLINK      3               // arpanet imp addresses
#define AF_PUP          4               // pup protocols: e.g. BSP
#define AF_CHAOS        5               // mit CHAOS protocols
#define AF_NS           6               // XEROX NS protocols
#define AF_IPX          AF_NS           // IPX protocols: IPX, SPX, etc.
#define AF_ISO          7               // ISO protocols
#define AF_OSI          AF_ISO          // OSI is ISO
#define AF_ECMA         8               // european computer manufacturers
#define AF_DATAKIT      9               // datakit protocols
#define AF_CCITT        10              // CCITT protocols, X.25 etc
#define AF_SNA          11              // IBM SNA
#define AF_DECnet       12              // DECnet
#define AF_DLI          13              // Direct data link interface
#define AF_LAT          14              // LAT
#define AF_HYLINK       15              // NSC Hyperchannel
#define AF_APPLETALK    16              // AppleTalk
#define AF_NETBIOS      17              // NetBios-style addresses
#define AF_VOICEVIEW    18              // VoiceView
#define AF_FIREFOX      19              // Protocols from Firefox
#define AF_UNKNOWN1     20              // Somebody is using this!
#define AF_BAN          21              // Banyan
#define AF_ATM          22              // Native ATM Services
#define AF_INET6        23              // Internetwork Version 6
#define AF_CLUSTER      24              // Microsoft Wolfpack
#define AF_12844        25              // IEEE 1284.4 WG AF
#define AF_IRDA         26              // IrDA
#define AF_NETDES       28              // Network Designers OSI & gateway

#if(_WIN32_WINNT < 0x0501)
#define AF_MAX          29
#else //(_WIN32_WINNT < 0x0501)

#define AF_TCNPROCESS   29
#define AF_TCNMESSAGE   30
#define AF_ICLFXBM      31

#if(_WIN32_WINNT < 0x0600)
#define AF_MAX          32
#else //(_WIN32_WINNT < 0x0600)
#define AF_BTH          32              // Bluetooth RFCOMM/L2CAP protocols
#if(_WIN32_WINNT < 0x0601)
#define AF_MAX          33
#else //(_WIN32_WINNT < 0x0601)
#define AF_LINK         33
#define AF_MAX          34
#endif //(_WIN32_WINNT < 0x0601)
#endif //(_WIN32_WINNT < 0x0600)

#endif //(_WIN32_WINNT < 0x0501)

//
// Socket types.
//

#define SOCK_STREAM     1
#define SOCK_DGRAM      2
#define SOCK_RAW        3
#define SOCK_RDM        4
#define SOCK_SEQPACKET  5

//
// Define a level for socket I/O controls in the same numbering space as
// IPPROTO_TCP, IPPROTO_IP, etc.
//

#define SOL_SOCKET 0xffff

//
// Define socket-level options.
//

#define SO_DEBUG        0x0001      // turn on debugging info recording 
#define SO_ACCEPTCONN   0x0002      // socket has had listen()
#define SO_REUSEADDR    0x0004      // allow local address reuse
#define SO_KEEPALIVE    0x0008      // keep connections alive
#define SO_DONTROUTE    0x0010      // just use interface addresses
#define SO_BROADCAST    0x0020      // permit sending of broadcast msgs
#define SO_USELOOPBACK  0x0040      // bypass hardware when possible
#define SO_LINGER       0x0080      // linger on close if data present
#define SO_OOBINLINE    0x0100      // leave received OOB data in line

#define SO_DONTLINGER   (int)(~SO_LINGER)
#define SO_EXCLUSIVEADDRUSE \
    ((int)(~SO_REUSEADDR))          // disallow local address reuse

#define SO_SNDBUF       0x1001      // send buffer size
#define SO_RCVBUF       0x1002      // receive buffer size
#define SO_SNDLOWAT     0x1003      // send low-water mark
#define SO_RCVLOWAT     0x1004      // receive low-water mark
#define SO_SNDTIMEO     0x1005      // send timeout
#define SO_RCVTIMEO     0x1006      // receive timeout
#define SO_ERROR        0x1007      // get error status and clear
#define SO_TYPE         0x1008      // get socket type
#define SO_BSP_STATE    0x1009      // get socket 5-tuple state

#define SO_GROUP_ID     0x2001      // ID of a socket group
#define SO_GROUP_PRIORITY 0x2002    // the relative priority within a group
#define SO_MAX_MSG_SIZE 0x2003      // maximum message size

#define SO_CONDITIONAL_ACCEPT 0x3002 // enable true conditional accept:
                                    // connection is not ack-ed to the
                                    // other side until conditional
                                    // function returns CF_ACCEPT
#define SO_PAUSE_ACCEPT 0x3003      // pause accepting new connections
#define SO_COMPARTMENT_ID 0x3004    // get/set the compartment for a socket
#if (_WIN32_WINNT >= 0x0600)
#define SO_RANDOMIZE_PORT 0x3005    // randomize assignment of wildcard ports
#define SO_PORT_SCALABILITY 0x3006  // enable port scalability
#endif //(_WIN32_WINNT >= 0x0600)

//
// Base constant used for defining WSK-specific options.
//

#define WSK_SO_BASE  0x4000

//
// Options to use with [gs]etsockopt at the IPPROTO_TCP level.
//

#define TCP_NODELAY         0x0001

//
// Structure used to store most addresses.
//
typedef struct sockaddr {

#if (_WIN32_WINNT < 0x0600)
    u_short sa_family;
#else 
    ADDRESS_FAMILY sa_family;           // Address family.
#endif //(_WIN32_WINNT < 0x0600)

    CHAR sa_data[14];                   // Up to 14 bytes of direct address.
} SOCKADDR, *PSOCKADDR, FAR *LPSOCKADDR;

#ifndef __CSADDR_DEFINED__
#define __CSADDR_DEFINED__


/*
 * SockAddr Information
 */
typedef struct _SOCKET_ADDRESS {
    __field_bcount(iSockaddrLength) LPSOCKADDR lpSockaddr;
    INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;

/*
 * Address list returned via SIO_ADDRESS_LIST_QUERY
 */
typedef struct _SOCKET_ADDRESS_LIST {
    INT             iAddressCount;
    SOCKET_ADDRESS  Address[1];
} SOCKET_ADDRESS_LIST, *PSOCKET_ADDRESS_LIST, FAR *LPSOCKET_ADDRESS_LIST;

#if (_WIN32_WINNT >= 0x0600)

#define SIZEOF_SOCKET_ADDRESS_LIST(AddressCount) \
    (FIELD_OFFSET(SOCKET_ADDRESS_LIST, Address) + \
     AddressCount * sizeof(SOCKET_ADDRESS))

#endif //(_WIN32_WINNT >= 0x0600)

/*
 * CSAddr Information
 */
typedef struct _CSADDR_INFO {
    SOCKET_ADDRESS LocalAddr ;
    SOCKET_ADDRESS RemoteAddr ;
    INT iSocketType ;
    INT iProtocol ;
} CSADDR_INFO, *PCSADDR_INFO, FAR * LPCSADDR_INFO ;
#endif /* __CSADDR_DEFINED__ */

//
// Portable socket structure (RFC 2553).
//

//
// Desired design of maximum size and alignment.
// These are implementation specific.
//
#define _SS_MAXSIZE 128                 // Maximum size
#define _SS_ALIGNSIZE (sizeof(__int64)) // Desired alignment

//
// Definitions used for sockaddr_storage structure paddings design.
//

#if(_WIN32_WINNT >= 0x0600)
#define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof(USHORT))
#define _SS_PAD2SIZE (_SS_MAXSIZE - (sizeof(USHORT) + _SS_PAD1SIZE + _SS_ALIGNSIZE))
#else 
#define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof (short))
#define _SS_PAD2SIZE (_SS_MAXSIZE - (sizeof (short) + _SS_PAD1SIZE \
                                                    + _SS_ALIGNSIZE))
#endif //(_WIN32_WINNT >= 0x0600)

typedef struct sockaddr_storage {
    ADDRESS_FAMILY ss_family;      // address family

    CHAR __ss_pad1[_SS_PAD1SIZE];  // 6 byte pad, this is to make
                                   //   implementation specific pad up to
                                   //   alignment field that follows explicit
                                   //   in the data structure
    __int64 __ss_align;            // Field to force desired structure
    CHAR __ss_pad2[_SS_PAD2SIZE];  // 112 byte pad to achieve desired size;
                                   //   _SS_MAXSIZE value minus size of
                                   //   ss_family, __ss_pad1, and
                                   //   __ss_align fields is 112
} SOCKADDR_STORAGE_LH, *PSOCKADDR_STORAGE_LH, FAR *LPSOCKADDR_STORAGE_LH;

typedef struct sockaddr_storage_xp {
    short ss_family;               // Address family.

    CHAR __ss_pad1[_SS_PAD1SIZE];  // 6 byte pad, this is to make
                                   //   implementation specific pad up to
                                   //   alignment field that follows explicit
                                   //   in the data structure
    __int64 __ss_align;            // Field to force desired structure
    CHAR __ss_pad2[_SS_PAD2SIZE];  // 112 byte pad to achieve desired size;
                                   //   _SS_MAXSIZE value minus size of
                                   //   ss_family, __ss_pad1, and
                                   //   __ss_align fields is 112
} SOCKADDR_STORAGE_XP, *PSOCKADDR_STORAGE_XP, FAR *LPSOCKADDR_STORAGE_XP;


#if(_WIN32_WINNT >= 0x0600)
typedef SOCKADDR_STORAGE_LH SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE, FAR *LPSOCKADDR_STORAGE;
#elif (_WIN32_WINNT >= 0x0501)
typedef SOCKADDR_STORAGE_XP SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE, FAR *LPSOCKADDR_STORAGE;
#endif


/*
 * WinSock 2 extension -- manifest constants for WSAIoctl()
 */
#define IOC_UNIX                      0x00000000
#define IOC_WS2                       0x08000000
#define IOC_PROTOCOL                  0x10000000
#define IOC_VENDOR                    0x18000000

#if (_WIN32_WINNT >= 0x0600)
/*
 * WSK-specific IO control codes are Winsock2 codes with the highest-order
 * 3 bits of the Vendor/AddressFamily-specific field set to 1.
 */
#define IOC_WSK                       (IOC_WS2|0x07000000)
#endif //(_WIN32_WINNT >= 0x0600)

#define _WSAIO(x,y)                   (IOC_VOID|(x)|(y))
#define _WSAIOR(x,y)                  (IOC_OUT|(x)|(y))
#define _WSAIOW(x,y)                  (IOC_IN|(x)|(y))
#define _WSAIORW(x,y)                 (IOC_INOUT|(x)|(y))

#define SIO_ASSOCIATE_HANDLE          _WSAIOW(IOC_WS2,1)
#define SIO_ENABLE_CIRCULAR_QUEUEING  _WSAIO(IOC_WS2,2)
#define SIO_FIND_ROUTE                _WSAIOR(IOC_WS2,3)
#define SIO_FLUSH                     _WSAIO(IOC_WS2,4)
#define SIO_GET_BROADCAST_ADDRESS     _WSAIOR(IOC_WS2,5)
#define SIO_GET_EXTENSION_FUNCTION_POINTER  _WSAIORW(IOC_WS2,6)
#define SIO_GET_QOS                   _WSAIORW(IOC_WS2,7)
#define SIO_GET_GROUP_QOS             _WSAIORW(IOC_WS2,8)
#define SIO_MULTIPOINT_LOOPBACK       _WSAIOW(IOC_WS2,9)
#define SIO_MULTICAST_SCOPE           _WSAIOW(IOC_WS2,10)
#define SIO_SET_QOS                   _WSAIOW(IOC_WS2,11)
#define SIO_SET_GROUP_QOS             _WSAIOW(IOC_WS2,12)
#define SIO_TRANSLATE_HANDLE          _WSAIORW(IOC_WS2,13)
#define SIO_ROUTING_INTERFACE_QUERY   _WSAIORW(IOC_WS2,20)
#define SIO_ROUTING_INTERFACE_CHANGE  _WSAIOW(IOC_WS2,21)
#define SIO_ADDRESS_LIST_QUERY        _WSAIOR(IOC_WS2,22)
#define SIO_ADDRESS_LIST_CHANGE       _WSAIO(IOC_WS2,23)
#define SIO_QUERY_TARGET_PNP_HANDLE   _WSAIOR(IOC_WS2,24)

#if(_WIN32_WINNT >= 0x0501)
#define SIO_ADDRESS_LIST_SORT         _WSAIORW(IOC_WS2,25)
#endif //(_WIN32_WINNT >= 0x0501)

#if (_WIN32_WINNT >= 0x0600)
#define SIO_RESERVED_1                _WSAIOW(IOC_WS2,26)
#define SIO_RESERVED_2                _WSAIOW(IOC_WS2,33)
#endif //(_WIN32_WINNT >= 0x0600)

//
// Constants and structures defined by the internet system (RFC 790)
//

//
// N.B. required for backwards compatability to support 0 = IP for the
// level argument to get/setsockopt.
//
#define IPPROTO_IP              0

//
// Protocols.  The IPv6 defines are specified in RFC 2292.
//
typedef enum {
#if(_WIN32_WINNT >= 0x0501)
    IPPROTO_HOPOPTS       = 0,  // IPv6 Hop-by-Hop options
#endif//(_WIN32_WINNT >= 0x0501)
    IPPROTO_ICMP          = 1,
    IPPROTO_IGMP          = 2,
    IPPROTO_GGP           = 3,
#if(_WIN32_WINNT >= 0x0501)
    IPPROTO_IPV4          = 4,
#endif//(_WIN32_WINNT >= 0x0501)
#if(_WIN32_WINNT >= 0x0600)
    IPPROTO_ST            = 5,
#endif//(_WIN32_WINNT >= 0x0600)
    IPPROTO_TCP           = 6,
#if(_WIN32_WINNT >= 0x0600)
    IPPROTO_CBT           = 7,
    IPPROTO_EGP           = 8,
    IPPROTO_IGP           = 9,
#endif//(_WIN32_WINNT >= 0x0600)    
    IPPROTO_PUP           = 12,
    IPPROTO_UDP           = 17,
    IPPROTO_IDP           = 22,
#if(_WIN32_WINNT >= 0x0600)    
    IPPROTO_RDP           = 27,
#endif//(_WIN32_WINNT >= 0x0600)    

#if(_WIN32_WINNT >= 0x0501)
    IPPROTO_IPV6          = 41, // IPv6 header
    IPPROTO_ROUTING       = 43, // IPv6 Routing header
    IPPROTO_FRAGMENT      = 44, // IPv6 fragmentation header
    IPPROTO_ESP           = 50, // encapsulating security payload
    IPPROTO_AH            = 51, // authentication header
    IPPROTO_ICMPV6        = 58, // ICMPv6
    IPPROTO_NONE          = 59, // IPv6 no next header
    IPPROTO_DSTOPTS       = 60, // IPv6 Destination options
#endif//(_WIN32_WINNT >= 0x0501)

    IPPROTO_ND            = 77,
#if(_WIN32_WINNT >= 0x0501)
    IPPROTO_ICLFXBM       = 78,
#endif//(_WIN32_WINNT >= 0x0501)
#if(_WIN32_WINNT >= 0x0600)    
    IPPROTO_PIM           = 103,
    IPPROTO_PGM           = 113,
    IPPROTO_L2TP          = 115,
    IPPROTO_SCTP          = 132,
#endif//(_WIN32_WINNT >= 0x0600)    
    IPPROTO_RAW           = 255,

    IPPROTO_MAX           = 256,
//
//  These are reserved for internal use by Windows.
//
    IPPROTO_RESERVED_RAW  = 257,
    IPPROTO_RESERVED_IPSEC  = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD  = 259,
    IPPROTO_RESERVED_MAX  = 260
} IPPROTO, *PIPROTO;

//
// Port/socket numbers: network standard functions
//
#define IPPORT_TCPMUX           1
#define IPPORT_ECHO             7
#define IPPORT_DISCARD          9
#define IPPORT_SYSTAT           11
#define IPPORT_DAYTIME          13
#define IPPORT_NETSTAT          15
#define IPPORT_QOTD             17
#define IPPORT_MSP              18
#define IPPORT_CHARGEN          19
#define IPPORT_FTP_DATA         20
#define IPPORT_FTP              21
#define IPPORT_TELNET           23
#define IPPORT_SMTP             25
#define IPPORT_TIMESERVER       37
#define IPPORT_NAMESERVER       42
#define IPPORT_WHOIS            43
#define IPPORT_MTP              57

/*
 * Port/socket numbers: host specific functions
 */
#define IPPORT_TFTP             69
#define IPPORT_RJE              77
#define IPPORT_FINGER           79
#define IPPORT_TTYLINK          87
#define IPPORT_SUPDUP           95

/*
 * UNIX TCP sockets
 */
#define IPPORT_POP3             110
#define IPPORT_NTP              123
#define IPPORT_EPMAP            135
#define IPPORT_NETBIOS_NS       137
#define IPPORT_NETBIOS_DGM      138
#define IPPORT_NETBIOS_SSN      139
#define IPPORT_IMAP             143
#define IPPORT_SNMP             161
#define IPPORT_SNMP_TRAP        162
#define IPPORT_IMAP3            220
#define IPPORT_LDAP             389
#define IPPORT_HTTPS            443
#define IPPORT_MICROSOFT_DS     445
#define IPPORT_EXECSERVER       512
#define IPPORT_LOGINSERVER      513
#define IPPORT_CMDSERVER        514
#define IPPORT_EFSSERVER        520

/*
 * UNIX UDP sockets
 */
#define IPPORT_BIFFUDP          512
#define IPPORT_WHOSERVER        513
#define IPPORT_ROUTESERVER      520
                                        /* 520+1 also used */

/*
 * Ports < IPPORT_RESERVED are reserved for
 * privileged processes (e.g. root).
 */
#define IPPORT_RESERVED         1024
#if (_WIN32_WINNT >= 0x0600)
#define IPPORT_REGISTERED_MIN   IPPORT_RESERVED
#define IPPORT_REGISTERED_MAX   0xbfff
#define IPPORT_DYNAMIC_MIN      0xc000
#define IPPORT_DYNAMIC_MAX      0xffff
#endif //(_WIN32_WINNT >= 0x0600)

/*
 * Definitions of bits in internet address integers.
 * On subnets, the decomposition of addresses to host and net parts
 * is done according to subnet mask, not the masks here.
 *
 * N.B. RFC-compliant definitions for host-order elements are named IN_xxx,
 * while network-order elements are named IN4_xxx.
 */
#define IN_CLASSA(i)            (((LONG)(i) & 0x80000000) == 0)
#define IN_CLASSA_NET           0xff000000
#define IN_CLASSA_NSHIFT        24
#define IN_CLASSA_HOST          0x00ffffff
#define IN_CLASSA_MAX           128

#define IN_CLASSB(i)            (((LONG)(i) & 0xc0000000) == 0x80000000)
#define IN_CLASSB_NET           0xffff0000
#define IN_CLASSB_NSHIFT        16
#define IN_CLASSB_HOST          0x0000ffff
#define IN_CLASSB_MAX           65536

#define IN_CLASSC(i)            (((LONG)(i) & 0xe0000000) == 0xc0000000)
#define IN_CLASSC_NET           0xffffff00
#define IN_CLASSC_NSHIFT        8
#define IN_CLASSC_HOST          0x000000ff

#define IN_CLASSD(i)            (((long)(i) & 0xf0000000) == 0xe0000000)
#define IN_CLASSD_NET           0xf0000000       /* These ones aren't really */
#define IN_CLASSD_NSHIFT        28               /* net and host fields, but */
#define IN_CLASSD_HOST          0x0fffffff       /* routing needn't know.    */
#define IN_MULTICAST(i)         IN_CLASSD(i)

#define INADDR_ANY              (ULONG)0x00000000
#define INADDR_LOOPBACK         0x7f000001
#define INADDR_BROADCAST        (ULONG)0xffffffff
#define INADDR_NONE             0xffffffff


//
// Scope ID definition
//
typedef enum {
    ScopeLevelInterface    = 1,
    ScopeLevelLink         = 2,
    ScopeLevelSubnet       = 3,
    ScopeLevelAdmin        = 4,
    ScopeLevelSite         = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal       = 14,
    ScopeLevelCount        = 16
} SCOPE_LEVEL;

typedef struct {
    union {
        struct {
            ULONG Zone : 28;
            ULONG Level : 4;
        };
        ULONG Value;
    };
} SCOPE_ID, *PSCOPE_ID;

#define SCOPEID_UNSPECIFIED_INIT    { 0 }

//
// IPv4 Socket address, Internet style
//

typedef struct sockaddr_in {

#if(_WIN32_WINNT < 0x0600)
    short   sin_family;    
#else //(_WIN32_WINNT < 0x0600)
    ADDRESS_FAMILY sin_family;
#endif //(_WIN32_WINNT < 0x0600)

    USHORT sin_port;
    IN_ADDR sin_addr;
    CHAR sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN;

//
// Datalink (MAC) address
//
// If you don't use the entire sdl_data field, then fill it starting with the low
// bytes...
//

#if(_WIN32_WINNT >= 0x0601)

typedef struct sockaddr_dl {
    ADDRESS_FAMILY sdl_family;
    UCHAR sdl_data[8];
    UCHAR sdl_zero[4];
} SOCKADDR_DL, *PSOCKADDR_DL;

#endif //(_WIN32_WINNT >= 0x0601)

#define IOCPARM_MASK    0x7f            /* parameters must be < 128 bytes */
#define IOC_VOID        0x20000000      /* no parameters */
#define IOC_OUT         0x40000000      /* copy out parameters */
#define IOC_IN          0x80000000      /* copy in parameters */
#define IOC_INOUT       (IOC_IN|IOC_OUT)
                                        /* 0x20000000 distinguishes new &
                                           old ioctl's */
#define _IO(x,y)        (IOC_VOID|((x)<<8)|(y))

#define _IOR(x,y,t)     (IOC_OUT|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y))

#define _IOW(x,y,t)     (IOC_IN|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y))

/*
 * WinSock 2 extension -- WSABUF and QOS struct, include qos.h
 * to pull in FLOWSPEC and related definitions
 */

typedef struct _WSABUF {
    ULONG len;     /* the length of the buffer */
    __field_bcount(len) CHAR FAR *buf; /* the pointer to the buffer */
} WSABUF, FAR * LPWSABUF;

/*
 * WSAMSG -- for WSASendMsg 
 */

typedef struct _WSAMSG {
    __field_bcount(namelen) LPSOCKADDR       name;              /* Remote address */
    INT              namelen;           /* Remote address length */
    LPWSABUF         lpBuffers;         /* Data buffer array */

#if(_WIN32_WINNT >= 0x0600)
    ULONG            dwBufferCount;     /* Number of elements in the array */
#else
    DWORD            dwBufferCount;     /* Number of elements in the array */
#endif //(_WIN32_WINNT>=0x0600)

    WSABUF           Control;           /* Control buffer */

#if(_WIN32_WINNT >= 0x0600)
    ULONG            dwFlags;           /* Flags */
#else
    DWORD            dwFlags;           /* Flags */
#endif //(_WIN32_WINNT>=0x0600)

} WSAMSG, *PWSAMSG, * FAR LPWSAMSG;

/*
 * Layout of ancillary data objects in the control buffer (RFC 2292).
 */
#if(_WIN32_WINNT >= 0x0600) 
#define _WSACMSGHDR cmsghdr
#endif //(_WIN32_WINNT>=0x0600)

typedef struct _WSACMSGHDR {
    SIZE_T      cmsg_len;
    INT         cmsg_level;
    INT         cmsg_type;
    /* followed by UCHAR cmsg_data[] */
} WSACMSGHDR, *PWSACMSGHDR, FAR *LPWSACMSGHDR;

#if(_WIN32_WINNT >= 0x0600)
typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
#endif //(_WIN32_WINNT>=0x0600)

/*
 * Alignment macros for header and data members of
 * the control buffer.
 */
#define WSA_CMSGHDR_ALIGN(length)                           \
            ( ((length) + TYPE_ALIGNMENT(WSACMSGHDR)-1) &   \
                (~(TYPE_ALIGNMENT(WSACMSGHDR)-1)) )         \

#define WSA_CMSGDATA_ALIGN(length)                          \
            ( ((length) + MAX_NATURAL_ALIGNMENT-1) &        \
                (~(MAX_NATURAL_ALIGNMENT-1)) )

#if(_WIN32_WINNT >= 0x0600)
#define CMSGHDR_ALIGN WSA_CMSGHDR_ALIGN
#define CMSGDATA_ALIGN WSA_CMSGDATA_ALIGN
#endif //(_WIN32_WINNT>=0x0600)

/*
 *  WSA_CMSG_FIRSTHDR
 *
 *  Returns a pointer to the first ancillary data object, 
 *  or a null pointer if there is no ancillary data in the 
 *  control buffer of the WSAMSG structure.
 *
 *  LPCMSGHDR 
 *  WSA_CMSG_FIRSTHDR (
 *      LPWSAMSG    msg
 *      );
 */
#define WSA_CMSG_FIRSTHDR(msg) \
    ( ((msg)->Control.len >= sizeof(WSACMSGHDR))            \
        ? (LPWSACMSGHDR)(msg)->Control.buf                  \
        : (LPWSACMSGHDR)NULL )

#if(_WIN32_WINNT >= 0x0600)
#define CMSG_FIRSTHDR WSA_CMSG_FIRSTHDR
#endif //(_WIN32_WINNT>=0x0600)

/* 
 *  WSA_CMSG_NXTHDR
 *
 *  Returns a pointer to the next ancillary data object,
 *  or a null if there are no more data objects.
 *
 *  LPCMSGHDR 
 *  WSA_CMSG_NEXTHDR (
 *      LPWSAMSG        msg,
 *      LPWSACMSGHDR    cmsg
 *      );
 */
#define WSA_CMSG_NXTHDR(msg, cmsg)                          \
    ( ((cmsg) == NULL)                                      \
        ? WSA_CMSG_FIRSTHDR(msg)                            \
        : ( ( ((PUCHAR)(cmsg) +                             \
                    WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len) +   \
                    sizeof(WSACMSGHDR) ) >                  \
                (PUCHAR)((msg)->Control.buf) +              \
                    (msg)->Control.len )                    \
            ? (LPWSACMSGHDR)NULL                            \
            : (LPWSACMSGHDR)((PUCHAR)(cmsg) +               \
                WSA_CMSGHDR_ALIGN((cmsg)->cmsg_len)) ) )

#if(_WIN32_WINNT >= 0x0600)
#define CMSG_NXTHDR WSA_CMSG_NXTHDR
#endif //(_WIN32_WINNT>=0x0600)

/* 
 *  WSA_CMSG_DATA
 *
 *  Returns a pointer to the first byte of data (what is referred 
 *  to as the cmsg_data member though it is not defined in 
 *  the structure).
 *
 *  Note that RFC 2292 defines this as CMSG_DATA, but that name
 *  is already used by wincrypt.h, and so Windows has used WSA_CMSG_DATA.
 *
 *  PUCHAR
 *  WSA_CMSG_DATA (
 *      LPWSACMSGHDR   pcmsg
 *      );
 */
#define WSA_CMSG_DATA(cmsg)             \
            ( (PUCHAR)(cmsg) + WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) )

/*
 *  WSA_CMSG_SPACE
 *
 *  Returns total size of an ancillary data object given 
 *  the amount of data. Used to allocate the correct amount 
 *  of space.
 *
 *  SIZE_T
 *  WSA_CMSG_SPACE (
 *      SIZE_T length
 *      );
 */
#define WSA_CMSG_SPACE(length)  \
        (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR) + WSA_CMSGHDR_ALIGN(length)))

#if(_WIN32_WINNT >= 0x0600)
#define CMSG_SPACE WSA_CMSG_SPACE
#endif //(_WIN32_WINNT>=0x0600)

/*
 *  WSA_CMSG_LEN
 *
 *  Returns the value to store in cmsg_len given the amount of data.
 *
 *  SIZE_T
 *  WSA_CMSG_LEN (
 *      SIZE_T length
 *  );
 */
#define WSA_CMSG_LEN(length)    \
         (WSA_CMSGDATA_ALIGN(sizeof(WSACMSGHDR)) + length)

#if(_WIN32_WINNT >= 0x0600)
#define CMSG_LEN WSA_CMSG_LEN
#endif //(_WIN32_WINNT>=0x0600)

/*
 * Definition for flags member of the WSAMSG structure
 * This is in addition to other MSG_xxx flags defined
 * for recv/recvfrom/send/sendto.
 */
#define MSG_TRUNC       0x0100
#define MSG_CTRUNC      0x0200
#define MSG_BCAST       0x0400
#define MSG_MCAST       0x0800

//
//  Flags used in "hints" argument to getaddrinfo()
//      - AI_ADDRCONFIG is supported starting with Vista
//      - default is AI_ADDRCONFIG ON whether the flag is set or not
//        because the performance penalty in not having ADDRCONFIG in
//        the multi-protocol stack environment is severe;
//        this defaulting may be disabled by specifying the AI_ALL flag,
//        in that case AI_ADDRCONFIG must be EXPLICITLY specified to
//        enable ADDRCONFIG behavior
//

#define AI_PASSIVE                  0x00000001  // Socket address will be used in bind() call
#define AI_CANONNAME                0x00000002  // Return canonical name in first ai_canonname
#define AI_NUMERICHOST              0x00000004  // Nodename must be a numeric address string
#define AI_NUMERICSERV              0x00000008  // Servicename must be a numeric port number

#define AI_ALL                      0x00000100  // Query both IP6 and IP4 with AI_V4MAPPED
#define AI_ADDRCONFIG               0x00000400  // Resolution only if global address configured
#define AI_V4MAPPED                 0x00000800  // On v6 failure, query v4 and convert to V4MAPPED format

#define AI_NON_AUTHORITATIVE        0x00004000  // LUP_NON_AUTHORITATIVE
#define AI_SECURE                   0x00008000  // LUP_SECURE
#define AI_RETURN_PREFERRED_NAMES   0x00010000  // LUP_RETURN_PREFERRED_NAMES

#define AI_FQDN                     0x00020000  // Return the FQDN in ai_canonname
#define AI_FILESERVER               0x00040000  // Resolving fileserver name resolution 

//
//  Structure used in getaddrinfo() call
//

typedef struct addrinfo
{
    int                 ai_flags;       // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int                 ai_family;      // PF_xxx
    int                 ai_socktype;    // SOCK_xxx
    int                 ai_protocol;    // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t              ai_addrlen;     // Length of ai_addr
    char *              ai_canonname;   // Canonical name for nodename
    __field_bcount(ai_addrlen) struct sockaddr *   ai_addr;        // Binary address
    struct addrinfo *   ai_next;        // Next structure in linked list
}
ADDRINFOA, *PADDRINFOA;

typedef struct addrinfoW
{
    int                 ai_flags;       // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int                 ai_family;      // PF_xxx
    int                 ai_socktype;    // SOCK_xxx
    int                 ai_protocol;    // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t              ai_addrlen;     // Length of ai_addr
    PWSTR               ai_canonname;   // Canonical name for nodename
    __field_bcount(ai_addrlen) struct sockaddr *   ai_addr;        // Binary address
    struct addrinfoW *  ai_next;        // Next structure in linked list
}
ADDRINFOW, *PADDRINFOW;

#if (_WIN32_WINNT >= 0x0600)

typedef struct addrinfoexA
{
    int                 ai_flags;       // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int                 ai_family;      // PF_xxx
    int                 ai_socktype;    // SOCK_xxx
    int                 ai_protocol;    // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t              ai_addrlen;     // Length of ai_addr
    char               *ai_canonname;   // Canonical name for nodename
    struct sockaddr    *ai_addr;        // Binary address
    void               *ai_blob;
    size_t              ai_bloblen;
    LPGUID              ai_provider;
    struct addrinfoexA *ai_next;        // Next structure in linked list
} ADDRINFOEXA, *PADDRINFOEXA, *LPADDRINFOEXA;

typedef struct addrinfoexW
{
    int                 ai_flags;       // AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    int                 ai_family;      // PF_xxx
    int                 ai_socktype;    // SOCK_xxx
    int                 ai_protocol;    // 0 or IPPROTO_xxx for IPv4 and IPv6
    size_t              ai_addrlen;     // Length of ai_addr
    PWSTR               ai_canonname;   // Canonical name for nodename
    __field_bcount(ai_addrlen) struct sockaddr    *ai_addr;        // Binary address
    __field_ecount(ai_bloblen) void               *ai_blob;
    size_t              ai_bloblen;
    LPGUID              ai_provider;
    struct addrinfoexW *ai_next;        // Next structure in linked list
} ADDRINFOEXW, *PADDRINFOEXW, *LPADDRINFOEXW;

#endif

//
// Flags for getaddrinfo()
//

// Name Spaces

#define NS_ALL                      (0)

#define NS_SAP                      (1)
#define NS_NDS                      (2)
#define NS_PEER_BROWSE              (3)
#define NS_SLP                      (5)
#define NS_DHCP                     (6)

#define NS_TCPIP_LOCAL              (10)
#define NS_TCPIP_HOSTS              (11)
#define NS_DNS                      (12)
#define NS_NETBT                    (13)
#define NS_WINS                     (14)

#if(_WIN32_WINNT >= 0x0501)
#define NS_NLA                      (15)    /* Network Location Awareness */
#endif //(_WIN32_WINNT >= 0x0501)

#if(_WIN32_WINNT >= 0x0600)
#define NS_BTH                      (16)    /* Bluetooth SDP Namespace */
#endif //(_WIN32_WINNT >= 0x0600)

#define NS_NBP                      (20)

#define NS_MS                       (30)
#define NS_STDA                     (31)
#define NS_NTDS                     (32)

#if(_WIN32_WINNT >= 0x0600)
#define NS_EMAIL                    (37)
#define NS_PNRPNAME                 (38)
#define NS_PNRPCLOUD                (39)
#endif //(_WIN32_WINNT >= 0x0600)

#define NS_X500                     (40)
#define NS_NIS                      (41)
#define NS_NISPLUS                  (42)

#define NS_WRQ                      (50)

#define NS_NETDES                   (60)    /* Network Designers Limited */

//
// Flags for getnameinfo()
//

#define NI_NOFQDN       0x01  /* Only return nodename portion for local hosts */
#define NI_NUMERICHOST  0x02  /* Return numeric form of the host's address */
#define NI_NAMEREQD     0x04  /* Error if the host's name not in DNS */
#define NI_NUMERICSERV  0x08  /* Return numeric form of the service (port #) */
#define NI_DGRAM        0x10  /* Service is a datagram service */

#define NI_MAXHOST      1025  /* Max size of a fully-qualified domain name */
#define NI_MAXSERV      32    /* Max size of a service name */

#pragma warning(pop)

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\ws2bth.h ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

        ws2bth.h

Abstract:

        Winsock 2 Bluetooth Annex definitions.
        
Notes:

        Change BT_* to BTH_*        

--*/

#ifndef __WS2BTH__H
#define __WS2BTH__H

#if _MSC_VER >= 1200
#pragma warning(push)
#endif
#pragma warning(disable:4201) // nameless struct/union

#if (NTDDI_VERSION >= NTDDI_WINXPSP2)

#include <bthdef.h>

#include <pshpack1.h>

#define BT_PORT_ANY        ((ULONG)-1)
#define BT_PORT_MIN        0x1
#define BT_PORT_MAX        0xffff
#define BT_PORT_DYN_FIRST  0x1001

//
// These three definitions are duplicated in winsock2.h to reserve ordinals
//
#ifndef AF_BTH
#define AF_BTH  32
#endif
#ifndef PF_BTH
#define PF_BTH  AF_BTH
#endif
#ifndef NS_BTH
#define NS_BTH  16
#endif

typedef struct _SOCKADDR_BTH
{
    USHORT      addressFamily;  // Always AF_BTH
    BTH_ADDR    btAddr;         // Bluetooth device address
    GUID        serviceClassId; // [OPTIONAL] system will query SDP for port
    ULONG       port;           // RFCOMM channel or L2CAP PSM
} SOCKADDR_BTH, *PSOCKADDR_BTH;


DEFINE_GUID(SVCID_BTH_PROVIDER, 0x6aa63e0, 0x7d60, 0x41ff, 0xaf, 0xb2, 0x3e, 0xe6, 0xd2, 0xd9, 0x39, 0x2d);
#define BTH_ADDR_STRING_SIZE        12  // max size from WSAAddressToString

//
// Bluetooth protocol #s are assigned according to the Bluetooth
// Assigned Numbers portion of the Bluetooth Specification
//
#define BTHPROTO_RFCOMM  0x0003
#define BTHPROTO_L2CAP   0x0100

#define SOL_RFCOMM  BTHPROTO_RFCOMM
#define SOL_L2CAP   BTHPROTO_L2CAP
#define SOL_SDP     0x0101

//
// SOCKET OPTIONS
//
#define SO_BTH_AUTHENTICATE 0x80000001  // optlen=sizeof(ULONG), optval = &(ULONG)TRUE/FALSE 
#define SO_BTH_ENCRYPT      0x00000002  // optlen=sizeof(ULONG), optval = &(ULONG)TRUE/FALSE
#define SO_BTH_MTU          0x80000007  // optlen=sizeof(ULONG), optval = &mtu
#define SO_BTH_MTU_MAX      0x80000008  // optlen=sizeof(ULONG), optval = &max. mtu
#define SO_BTH_MTU_MIN      0x8000000a  // optlen=sizeof(ULONG), optval = &min. mtu

//
// Socket option parameters
//
// 3-DH5 => payload of 1021 => L2cap payload of 1017 => RFComm payload of 1011
#define RFCOMM_MAX_MTU      0x000003F3  // L2CAP MTU (1017) - RFCOMM header size (6)
#define RFCOMM_MIN_MTU      0x00000017  // RFCOMM spec sec 5.3 table 5.1

//
// NAME SERVICE PROVIDER DEFINITIONS
// For calling WSASetService
// and WSALookupServiceBegin, WSALookupServiceNext, WSALookupServiceEnd
// with Bluetooth-specific extensions
//
#define BTH_SDP_VERSION         1

//
// [OPTIONAL] passed in BLOB member of WSAQUERYSET
// QUERYSET and its lpBlob member are copied & converted
// to unicode in the system for non-unicode applications.  
// However, nothing is copied back upon return.  In 
// order for the system to return data such as pRecordHandle, 
// it much have an extra level of indirection from lpBlob 
//
typedef struct _BTH_SET_SERVICE {

        //
        // This version number will change when/if the binary format of
        // SDP records change, affecting the format of pRecord.
        // Set to BTH_SDP_VERSION by client, and returned by system
        //
        PULONG pSdpVersion;

        //
        // Handle to SDP record.  When BTH_SET_SERVICE structure is later 
        // passed to WSASetService RNRSERVICE_DELETE, this handle identifies the
        // record to delete.
        //
        HANDLE *pRecordHandle;
                        
        // 
        // COD_SERVICE_* bit(s) associated with this SDP record, which will be
        // advertised when the local radio is found during device inquiry.
        // When the last SDP record associated with a bit is deleted, that
        // service bit is no longer reported in repsonse to inquiries 
        //
        ULONG fCodService;    // COD_SERVICE_* bits

        ULONG Reserved[5];    // Reserved by system.  Must be zero.                
        ULONG ulRecordLength; // length of pRecord which follows
        UCHAR pRecord[1];     // SDP record as defined by bluetooth spec
        
} BTH_SET_SERVICE, *PBTH_SET_SERVICE;

//
// Default device inquiry duration in seconds
//
// The application thread will be blocked in WSALookupServiceBegin
// for the duration of the device inquiry, so this value needs to
// be balanced against the chance that a device that is actually
// present might not being found by Bluetooth in this time
//
// Paging improvements post-1.1 will cause devices to be 
// found generally uniformly in the 0-6 sec timeperiod
//
#define SDP_DEFAULT_INQUIRY_SECONDS         6
#define SDP_MAX_INQUIRY_SECONDS             60

//
// Default maximum number of devices to search for
//
#define SDP_DEFAULT_INQUIRY_MAX_RESPONSES   255

#define SDP_SERVICE_SEARCH_REQUEST           1
#define SDP_SERVICE_ATTRIBUTE_REQUEST        2
#define SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST 3

//
// [OPTIONAL] input restrictions on device inquiry
// Passed in BLOB of LUP_CONTAINERS (device) search
//
typedef struct _BTH_QUERY_DEVICE {
    ULONG   LAP;                    // reserved: must be 0 (GIAC inquiry only)
    UCHAR   length;                 // requested length of inquiry (seconds)       
} BTH_QUERY_DEVICE, *PBTH_QUERY_DEVICE;

//
// [OPTIONAL] Restrictions on searching for a particular service
// Passed in BLOB of !LUP_CONTAINERS (service) search
//
typedef struct _BTH_QUERY_SERVICE {
	ULONG                   type;           // one of SDP_SERVICE_*
	ULONG                   serviceHandle;
	SdpQueryUuid            uuids[MAX_UUIDS_IN_QUERY];
	ULONG                   numRange;
	SdpAttributeRange       pRange[1];
} BTH_QUERY_SERVICE, *PBTH_QUERY_SERVICE;

//
// BTHNS_RESULT_*
//
// Bluetooth specific flags returned from WSALookupServiceNext 
// in WSAQUERYSET.dwOutputFlags in response to device inquiry
//

//
// Local device is paired with remote device
//
#define BTHNS_RESULT_DEVICE_CONNECTED      0x00010000
#define BTHNS_RESULT_DEVICE_REMEMBERED     0x00020000
#define BTHNS_RESULT_DEVICE_AUTHENTICATED  0x00040000

//
// SOCKET IOCTLs
//

#define SIO_RFCOMM_SEND_COMMAND        _WSAIORW (IOC_VENDOR, 101)
#define SIO_RFCOMM_WAIT_COMMAND        _WSAIORW (IOC_VENDOR, 102)

//
// These IOCTLs are for test/validation/conformance and may only be
// present in debug/checked builds of the system
//
#define SIO_BTH_PING                      _WSAIORW (IOC_VENDOR, 8)
#define SIO_BTH_INFO                      _WSAIORW (IOC_VENDOR, 9)
#define SIO_RFCOMM_SESSION_FLOW_OFF       _WSAIORW (IOC_VENDOR, 103)
#define SIO_RFCOMM_TEST                   _WSAIORW (IOC_VENDOR, 104)
#define SIO_RFCOMM_USECFC                 _WSAIORW (IOC_VENDOR, 105)
/*      RESERVED                          _WSAIORW (IOC_VENDOR, 106) */


//
// SOCKET IOCTL DEFINITIONS
//

#ifndef BIT
#define BIT(b)   (1<<(b))
#endif

//
// Structure definition from Bluetooth RFCOMM spec, TS 07.10 5.4.6.3.7
//
typedef struct _RFCOMM_MSC_DATA {
    UCHAR       Signals;

        #define MSC_EA_BIT      EA_BIT
        #define MSC_FC_BIT      BIT(1)      // Flow control, clear if we can receive
        #define MSC_RTC_BIT     BIT(2)      // Ready to communicate, set when ready
        #define MSC_RTR_BIT     BIT(3)      // Ready to receive, set when ready
        #define MSC_RESERVED (BIT(4)|BIT(5))// Reserved by spec, must be 0
        #define MSC_IC_BIT      BIT(6)      // Incoming call
        #define MSC_DV_BIT      BIT(7)      // Data valid

    UCHAR       Break;

        #define MSC_BREAK_BIT   BIT(1)      // Set if sending break
        #define MSC_SET_BREAK_LENGTH(b, l)  ((b) = ((b)&0x3) | (((l)&0xf) << 4))

} RFCOMM_MSC_DATA, *PRFCOMM_MSC_DATA;

//
// Structure definition from Bluetooth RFCOMM spec, TS 07.10 5.4.6.3.10
//
typedef struct _RFCOMM_RLS_DATA {

    UCHAR       LineStatus;

        #define RLS_ERROR           0x01
        #define RLS_OVERRUN         0x02
        #define RLS_PARITY          0x04
        #define RLS_FRAMING         0x08

} RFCOMM_RLS_DATA, *PRFCOMM_RLS_DATA;

//
// Structure definition from Bluetooth RFCOMM spec, TS 07.10 5.4.6.3.9
//
typedef struct _RFCOMM_RPN_DATA {
    UCHAR       Baud;

        #define RPN_BAUD_2400       0
        #define RPN_BAUD_4800       1
        #define RPN_BAUD_7200       2
        #define RPN_BAUD_9600       3
        #define RPN_BAUD_19200      4
        #define RPN_BAUD_38400      5
        #define RPN_BAUD_57600      6
        #define RPN_BAUD_115200     7
        #define RPN_BAUD_230400     8

    UCHAR       Data;

        #define RPN_DATA_5          0x0
        #define RPN_DATA_6          0x1
        #define RPN_DATA_7          0x2
        #define RPN_DATA_8          0x3

        #define RPN_STOP_1          0x0
        #define RPN_STOP_1_5        0x4

        #define RPN_PARITY_NONE     0x00
        #define RPN_PARITY_ODD      0x08
        #define RPN_PARITY_EVEN     0x18
        #define RPN_PARITY_MARK     0x28
        #define RPN_PARITY_SPACE    0x38

    UCHAR       FlowControl;

        #define RPN_FLOW_X_IN       0x01
        #define RPN_FLOW_X_OUT      0x02
        #define RPN_FLOW_RTR_IN     0x04
        #define RPN_FLOW_RTR_OUT    0x08
        #define RPN_FLOW_RTC_IN     0x10
        #define RPN_FLOW_RTC_OUT    0x20

    UCHAR       XonChar;
    UCHAR       XoffChar;
    UCHAR       ParameterMask1;

        #define RPN_PARAM_BAUD      0x01
        #define RPN_PARAM_DATA      0x02
        #define RPN_PARAM_STOP      0x04
        #define RPN_PARAM_PARITY    0x08
        #define RPN_PARAM_P_TYPE    0x10
        #define RPN_PARAM_XON       0x20
        #define RPN_PARAM_XOFF      0x40

    UCHAR       ParameterMask2;

        #define RPN_PARAM_X_IN      0x01
        #define RPN_PARAM_X_OUT     0x02
        #define RPN_PARAM_RTR_IN    0x04
        #define RPN_PARAM_RTR_OUT   0x08
        #define RPN_PARAM_RTC_IN    0x10
        #define RPN_PARAM_RTC_OUT   0x20

} RFCOMM_RPN_DATA, *PRFCOMM_RPN_DATA;

#define RFCOMM_CMD_NONE             0
#define RFCOMM_CMD_MSC              1
#define RFCOMM_CMD_RLS              2
#define RFCOMM_CMD_RPN              3
#define RFCOMM_CMD_RPN_REQUEST      4
#define RFCOMM_CMD_RPN_RESPONSE     5
/*      RESERVED_CMD                6 */

typedef struct _RFCOMM_COMMAND
{
    ULONG       CmdType;          // one of RFCOMM_CMD_*
    union
    {
        RFCOMM_MSC_DATA    MSC;
        RFCOMM_RLS_DATA    RLS;
        RFCOMM_RPN_DATA    RPN;
    } Data;
} RFCOMM_COMMAND, *PRFCOMM_COMMAND;

//
// These structures are for test/validation/conformance and may only be
// present in debug/checked builds of the system
//
typedef struct _BTH_PING_REQ {
    BTH_ADDR  btAddr;
    UCHAR    dataLen;
    UCHAR    data[MAX_L2CAP_PING_DATA_LENGTH];
} BTH_PING_REQ, *PBTH_PING_REQ;

typedef struct _BTH_PING_RSP {
    UCHAR    dataLen;
    UCHAR    data[MAX_L2CAP_PING_DATA_LENGTH];
} BTH_PING_RSP, *PBTH_PING_RSP;

typedef struct _BTH_INFO_REQ {
    BTH_ADDR  btAddr;
    USHORT   infoType;
} BTH_INFO_REQ, *PBTH_INFO_REQ;

typedef struct _BTH_INFO_RSP {
    USHORT  result;
    UCHAR   dataLen;
    union {
        USHORT  connectionlessMTU;
        UCHAR   data[MAX_L2CAP_INFO_DATA_LENGTH];
    };
} BTH_INFO_RSP, *PBTH_INFO_RSP;

//
// WinCE compatible struct names
//
typedef struct _BTH_SET_SERVICE BTHNS_SETBLOB, *PBTHNS_SETBLOB;
typedef struct _BTH_QUERY_DEVICE BTHNS_INQUIRYBLOB, *PBTHNS_INQUIRYBLOB;
typedef struct _BTH_QUERY_SERVICE BTHNS_RESTRICTIONBLOB, *PBTHNS_RESTRICTIONBLOB;

#include <poppack.h>

#endif // (NTDDI_VERSION >= NTDDI_WINXPSP2)

#if _MSC_VER >= 1200
#pragma warning(pop)
#else
#pragma warning(default:4201)
#endif

#endif // __WS2BTH__H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsbapp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsbapp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsbapp_h__
#define __wsbapp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWsbApplicationBackupSupport_FWD_DEFINED__
#define __IWsbApplicationBackupSupport_FWD_DEFINED__
typedef interface IWsbApplicationBackupSupport IWsbApplicationBackupSupport;
#endif 	/* __IWsbApplicationBackupSupport_FWD_DEFINED__ */


#ifndef __IWsbApplicationRestoreSupport_FWD_DEFINED__
#define __IWsbApplicationRestoreSupport_FWD_DEFINED__
typedef interface IWsbApplicationRestoreSupport IWsbApplicationRestoreSupport;
#endif 	/* __IWsbApplicationRestoreSupport_FWD_DEFINED__ */


#ifndef __IWsbApplicationAsync_FWD_DEFINED__
#define __IWsbApplicationAsync_FWD_DEFINED__
typedef interface IWsbApplicationAsync IWsbApplicationAsync;
#endif 	/* __IWsbApplicationAsync_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsbapp_0000_0000 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_wsbapp_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsbapp_0000_0000_v0_0_s_ifspec;

#ifndef __IWsbApplicationBackupSupport_INTERFACE_DEFINED__
#define __IWsbApplicationBackupSupport_INTERFACE_DEFINED__

/* interface IWsbApplicationBackupSupport */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWsbApplicationBackupSupport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1EFF3510-4A27-46ad-B9E0-08332F0F4F6D")
    IWsbApplicationBackupSupport : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CheckConsistency( 
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in][range] */ __RPC__in_range(0,1000) DWORD cVolumes,
            /* [size_is][string][unique][in] */ __RPC__in_ecount_full_opt(cVolumes) LPWSTR *rgwszSourceVolumePath,
            /* [size_is][string][unique][in] */ __RPC__in_ecount_full_opt(cVolumes) LPWSTR *rgwszSnapshotVolumePath,
            /* [out] */ __RPC__deref_out_opt IWsbApplicationAsync **ppAsync) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWsbApplicationBackupSupportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWsbApplicationBackupSupport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWsbApplicationBackupSupport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWsbApplicationBackupSupport * This);
        
        HRESULT ( STDMETHODCALLTYPE *CheckConsistency )( 
            __RPC__in IWsbApplicationBackupSupport * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in][range] */ __RPC__in_range(0,1000) DWORD cVolumes,
            /* [size_is][string][unique][in] */ __RPC__in_ecount_full_opt(cVolumes) LPWSTR *rgwszSourceVolumePath,
            /* [size_is][string][unique][in] */ __RPC__in_ecount_full_opt(cVolumes) LPWSTR *rgwszSnapshotVolumePath,
            /* [out] */ __RPC__deref_out_opt IWsbApplicationAsync **ppAsync);
        
        END_INTERFACE
    } IWsbApplicationBackupSupportVtbl;

    interface IWsbApplicationBackupSupport
    {
        CONST_VTBL struct IWsbApplicationBackupSupportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWsbApplicationBackupSupport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWsbApplicationBackupSupport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWsbApplicationBackupSupport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWsbApplicationBackupSupport_CheckConsistency(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,cVolumes,rgwszSourceVolumePath,rgwszSnapshotVolumePath,ppAsync)	\
    ( (This)->lpVtbl -> CheckConsistency(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,cVolumes,rgwszSourceVolumePath,rgwszSnapshotVolumePath,ppAsync) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWsbApplicationBackupSupport_INTERFACE_DEFINED__ */


#ifndef __IWsbApplicationRestoreSupport_INTERFACE_DEFINED__
#define __IWsbApplicationRestoreSupport_INTERFACE_DEFINED__

/* interface IWsbApplicationRestoreSupport */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWsbApplicationRestoreSupport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8D3BDB38-4EE8-4718-85F9-C7DBC4AB77AA")
    IWsbApplicationRestoreSupport : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PreRestore( 
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in] */ BOOLEAN bNoRollForward) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostRestore( 
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in] */ BOOLEAN bNoRollForward) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OrderComponents( 
            /* [in][range] */ __RPC__in_range(0,10000) DWORD cComponents,
            /* [size_is][string][in] */ __RPC__in_ecount_full(cComponents) LPWSTR *rgComponentName,
            /* [size_is][string][in] */ __RPC__in_ecount_full(cComponents) LPWSTR *rgComponentLogicalPaths,
            /* [size_is][size_is][string][out] */ __RPC__deref_out_ecount_full_opt_string(cComponents) LPWSTR **prgComponentName,
            /* [size_is][size_is][string][out] */ __RPC__deref_out_ecount_full_opt_string(cComponents) LPWSTR **prgComponentLogicalPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRollForwardSupported( 
            /* [out] */ __RPC__out BOOLEAN *pbRollForwardSupported) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWsbApplicationRestoreSupportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWsbApplicationRestoreSupport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWsbApplicationRestoreSupport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWsbApplicationRestoreSupport * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreRestore )( 
            __RPC__in IWsbApplicationRestoreSupport * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in] */ BOOLEAN bNoRollForward);
        
        HRESULT ( STDMETHODCALLTYPE *PostRestore )( 
            __RPC__in IWsbApplicationRestoreSupport * This,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszWriterMetadata,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentName,
            /* [string][unique][in] */ __RPC__in_opt_string LPWSTR wszComponentLogicalPath,
            /* [in] */ BOOLEAN bNoRollForward);
        
        HRESULT ( STDMETHODCALLTYPE *OrderComponents )( 
            __RPC__in IWsbApplicationRestoreSupport * This,
            /* [in][range] */ __RPC__in_range(0,10000) DWORD cComponents,
            /* [size_is][string][in] */ __RPC__in_ecount_full(cComponents) LPWSTR *rgComponentName,
            /* [size_is][string][in] */ __RPC__in_ecount_full(cComponents) LPWSTR *rgComponentLogicalPaths,
            /* [size_is][size_is][string][out] */ __RPC__deref_out_ecount_full_opt_string(cComponents) LPWSTR **prgComponentName,
            /* [size_is][size_is][string][out] */ __RPC__deref_out_ecount_full_opt_string(cComponents) LPWSTR **prgComponentLogicalPath);
        
        HRESULT ( STDMETHODCALLTYPE *IsRollForwardSupported )( 
            __RPC__in IWsbApplicationRestoreSupport * This,
            /* [out] */ __RPC__out BOOLEAN *pbRollForwardSupported);
        
        END_INTERFACE
    } IWsbApplicationRestoreSupportVtbl;

    interface IWsbApplicationRestoreSupport
    {
        CONST_VTBL struct IWsbApplicationRestoreSupportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWsbApplicationRestoreSupport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWsbApplicationRestoreSupport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWsbApplicationRestoreSupport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWsbApplicationRestoreSupport_PreRestore(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,bNoRollForward)	\
    ( (This)->lpVtbl -> PreRestore(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,bNoRollForward) ) 

#define IWsbApplicationRestoreSupport_PostRestore(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,bNoRollForward)	\
    ( (This)->lpVtbl -> PostRestore(This,wszWriterMetadata,wszComponentName,wszComponentLogicalPath,bNoRollForward) ) 

#define IWsbApplicationRestoreSupport_OrderComponents(This,cComponents,rgComponentName,rgComponentLogicalPaths,prgComponentName,prgComponentLogicalPath)	\
    ( (This)->lpVtbl -> OrderComponents(This,cComponents,rgComponentName,rgComponentLogicalPaths,prgComponentName,prgComponentLogicalPath) ) 

#define IWsbApplicationRestoreSupport_IsRollForwardSupported(This,pbRollForwardSupported)	\
    ( (This)->lpVtbl -> IsRollForwardSupported(This,pbRollForwardSupported) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWsbApplicationRestoreSupport_INTERFACE_DEFINED__ */


#ifndef __IWsbApplicationAsync_INTERFACE_DEFINED__
#define __IWsbApplicationAsync_INTERFACE_DEFINED__

/* interface IWsbApplicationAsync */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWsbApplicationAsync;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0843F6F7-895C-44a6-B0C2-05A5022AA3A1")
    IWsbApplicationAsync : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryStatus( 
            /* [out] */ __RPC__out HRESULT *phrResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWsbApplicationAsyncVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWsbApplicationAsync * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWsbApplicationAsync * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWsbApplicationAsync * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryStatus )( 
            __RPC__in IWsbApplicationAsync * This,
            /* [out] */ __RPC__out HRESULT *phrResult);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            __RPC__in IWsbApplicationAsync * This);
        
        END_INTERFACE
    } IWsbApplicationAsyncVtbl;

    interface IWsbApplicationAsync
    {
        CONST_VTBL struct IWsbApplicationAsyncVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWsbApplicationAsync_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWsbApplicationAsync_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWsbApplicationAsync_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWsbApplicationAsync_QueryStatus(This,phrResult)	\
    ( (This)->lpVtbl -> QueryStatus(This,phrResult) ) 

#define IWsbApplicationAsync_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWsbApplicationAsync_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\ws2ipdef.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    ws2ipdef.h

Abstract:

    This file contains TCP/IP specific information for use
    by WinSock2 compatible applications.
  
   Copyright (c) Microsoft Corporation. All rights reserved.
  
    To provide the backward compatibility, all the TCP/IP
    specific definitions that were included in the WINSOCK.H
    file are now included in WINSOCK2.H file. WS2TCPIP.H
    file includes only the definitions  introduced in the
    "WinSock 2 Protocol-Specific Annex" document.
  
    Rev 0.3 Nov 13, 1995
        Rev 0.4 Dec 15, 1996

Environment:

    user mode or kernel mode

--*/

#ifndef _WS2IPDEF_
#define _WS2IPDEF_

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

#pragma warning(push)
#pragma warning(disable:4201)
#pragma warning(disable:4127) // conditional expression is constant

#ifdef _PREFAST_    
#pragma prefast(push)
#pragma prefast(disable: 24002, "This code requires explicit usage of IPv4 address types.")
#endif    
    
#ifndef WS2IPDEF_ASSERT
#define WS2IPDEF_ASSERT(exp) ((VOID) 0)
#endif

#ifdef _MSC_VER
#define WS2TCPIP_INLINE __inline
#else
#define WS2TCPIP_INLINE extern inline /* GNU style */
#endif
    
#include <in6addr.h>

//
// Old IPv6 socket address structure (retained for sockaddr_gen definition).
//

struct sockaddr_in6_old {
    SHORT sin6_family;          // AF_INET6.
    USHORT sin6_port;           // Transport level port number.
    ULONG sin6_flowinfo;        // IPv6 flow information.
    IN6_ADDR sin6_addr;         // IPv6 address.
};

typedef union sockaddr_gen {
    struct sockaddr Address;
    struct sockaddr_in AddressIn;
    struct sockaddr_in6_old AddressIn6;
} sockaddr_gen;

//
// Structure to keep interface specific information
//
    
typedef struct _INTERFACE_INFO {
    ULONG iiFlags;              // Interface flags.
    sockaddr_gen iiAddress;     // Interface address.
    sockaddr_gen iiBroadcastAddress; // Broadcast address.
    sockaddr_gen iiNetmask;     // Network mask.
} INTERFACE_INFO, FAR *LPINTERFACE_INFO;

//
// New structure that does not have dependency on the address size.
//

typedef struct _INTERFACE_INFO_EX {
    ULONG iiFlags;              // Interface flags.
    SOCKET_ADDRESS iiAddress;   // Interface address.
    SOCKET_ADDRESS iiBroadcastAddress; // Broadcast address.
    SOCKET_ADDRESS iiNetmask;   // Network mask.
} INTERFACE_INFO_EX, FAR *LPINTERFACE_INFO_EX;

//
// Possible flags for the  iiFlags - bitmask.
//
    
#define IFF_UP              0x00000001 // Interface is up.
#define IFF_BROADCAST       0x00000002 // Broadcast is  supported.
#define IFF_LOOPBACK        0x00000004 // This is loopback interface.
#define IFF_POINTTOPOINT    0x00000008 // This is point-to-point interface.
#define IFF_MULTICAST       0x00000010 // Multicast is supported.

    
//
// Options to use with [gs]etsockopt at the IPPROTO_IP level.
// The values should be consistent with the IPv6 equivalents.
//
#define IP_OPTIONS                 1 // Set/get IP options.
#define IP_HDRINCL                 2 // Header is included with data.
#define IP_TOS                     3 // IP type of service.
#define IP_TTL                     4 // IP TTL (hop limit).
#define IP_MULTICAST_IF            9 // IP multicast interface.
#define IP_MULTICAST_TTL          10 // IP multicast TTL (hop limit).
#define IP_MULTICAST_LOOP         11 // IP multicast loopback.
#define IP_ADD_MEMBERSHIP         12 // Add an IP group membership.
#define IP_DROP_MEMBERSHIP        13 // Drop an IP group membership.
#define IP_DONTFRAGMENT           14 // Don't fragment IP datagrams.
#define IP_ADD_SOURCE_MEMBERSHIP  15 // Join IP group/source.
#define IP_DROP_SOURCE_MEMBERSHIP 16 // Leave IP group/source.
#define IP_BLOCK_SOURCE           17 // Block IP group/source.
#define IP_UNBLOCK_SOURCE         18 // Unblock IP group/source.
#define IP_PKTINFO                19 // Receive packet information.
#define IP_HOPLIMIT               21 // Receive packet hop limit.
#define IP_RECEIVE_BROADCAST      22 // Allow/block broadcast reception.
#define IP_RECVIF                 24 // Receive arrival interface.
#define IP_RECVDSTADDR            25 // Receive destination address.
#define IP_IFLIST                 28 // Enable/Disable an interface list.
#define IP_ADD_IFLIST             29 // Add an interface list entry.
#define IP_DEL_IFLIST             30 // Delete an interface list entry.
#define IP_UNICAST_IF             31 // IP unicast interface.
#define IP_RTHDR                  32 // Set/get IPv6 routing header.
#define IP_RECVRTHDR              38 // Receive the routing header.
#define IP_TCLASS                 39 // Packet traffic class.
#define IP_RECVTCLASS             40 // Receive packet traffic class.
#define IP_ORIGINAL_ARRIVAL_IF    47 // Original Arrival Interface Index.

#define IP_UNSPECIFIED_TYPE_OF_SERVICE -1

#define IPV6_ADDRESS_BITS RTL_BITS_OF(IN6_ADDR)

//
// IPv6 socket address structure, RFC 3493.
//

//
// NB: The LH version of sockaddr_in6 has the struct tag sockaddr_in6 rather
// than sockaddr_in6_lh.  This is to make sure that standard sockets apps
// that conform to RFC 2553 (Basic Socket Interface Extensions for IPv6).
//
typedef struct sockaddr_in6 {
    ADDRESS_FAMILY sin6_family; // AF_INET6.
    USHORT sin6_port;           // Transport level port number.
    ULONG  sin6_flowinfo;       // IPv6 flow information.
    IN6_ADDR sin6_addr;         // IPv6 address.
    union {
        ULONG sin6_scope_id;     // Set of interfaces for a scope.
        SCOPE_ID sin6_scope_struct; 
    };
} SOCKADDR_IN6_LH, *PSOCKADDR_IN6_LH, FAR *LPSOCKADDR_IN6_LH;

typedef struct sockaddr_in6_w2ksp1 {
    short   sin6_family;        /* AF_INET6 */
    USHORT sin6_port;          /* Transport level port number */
    ULONG  sin6_flowinfo;      /* IPv6 flow information */
    struct in6_addr sin6_addr;  /* IPv6 address */
    ULONG sin6_scope_id;       /* set of interfaces for a scope */
} SOCKADDR_IN6_W2KSP1, *PSOCKADDR_IN6_W2KSP1, FAR *LPSOCKADDR_IN6_W2KSP1;

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef SOCKADDR_IN6_LH SOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_LH FAR *LPSOCKADDR_IN6;
#elif(NTDDI_VERSION >= NTDDI_WIN2KSP1)
typedef SOCKADDR_IN6_W2KSP1 SOCKADDR_IN6;
typedef SOCKADDR_IN6_W2KSP1 *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_W2KSP1 FAR *LPSOCKADDR_IN6;
#else
typedef SOCKADDR_IN6_LH SOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_LH FAR *LPSOCKADDR_IN6;
#endif

typedef union _SOCKADDR_INET {
    SOCKADDR_IN Ipv4;
    SOCKADDR_IN6 Ipv6;
    ADDRESS_FAMILY si_family;    
} SOCKADDR_INET, *PSOCKADDR_INET;

//
// Structure to hold a pair of source, destination addresses.
//
typedef struct _sockaddr_in6_pair
{
    PSOCKADDR_IN6 SourceAddress;
    PSOCKADDR_IN6 DestinationAddress;
} SOCKADDR_IN6_PAIR, *PSOCKADDR_IN6_PAIR;

//
// Macro that works for both IPv4 and IPv6
//
#define SS_PORT(ssp) (((PSOCKADDR_IN)(ssp))->sin_port)

#if (NTDDI_VERSION >= NTDDI_WIN2KSP1)
//
// N.B. These addresses are in network byte order.
//

#define IN6ADDR_ANY_INIT { 0 }

#define IN6ADDR_LOOPBACK_INIT { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 }

#define IN6ADDR_ALLNODESONNODE_INIT { \
    0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 \
}

#define IN6ADDR_ALLNODESONLINK_INIT { \
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 \
}

#define IN6ADDR_ALLROUTERSONLINK_INIT { \
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 \
}

#define IN6ADDR_ALLMLDV2ROUTERSONLINK_INIT { \
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 \
}

#define IN6ADDR_TEREDOINITIALLINKLOCALADDRESS_INIT { \
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe \
}

//
// The old link local address for XP-SP2/Win2K3 machines.
//
#define IN6ADDR_TEREDOOLDLINKLOCALADDRESSXP_INIT {   \
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00,  'T',   'E',  'R',  'E',  'D',  'O' \
}

//
// The old link local address for Vista Beta-2 and earlier machines.
//
#define IN6ADDR_TEREDOOLDLINKLOCALADDRESSVISTA_INIT {       \
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
}

#define IN6ADDR_LINKLOCALPREFIX_INIT { 0xfe, 0x80, }

#define IN6ADDR_MULTICASTPREFIX_INIT { 0xff, 0x00, }

#define IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_INIT { \
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0x00, 0x01, 0xff, \
}

#define IN6ADDR_V4MAPPEDPREFIX_INIT { \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    0x00, 0x00, 0xff, 0xff, \
}

#define IN6ADDR_6TO4PREFIX_INIT { 0x20, 0x02, }

#define IN6ADDR_TEREDOPREFIX_INIT { 0x20, 0x01, 0x00, 0x00, }

#define IN6ADDR_TEREDOPREFIX_INIT_OLD { 0x3f, 0xfe, 0x83, 0x1f, }

#define IN6ADDR_LINKLOCALPREFIX_LENGTH 64

#define IN6ADDR_MULTICASTPREFIX_LENGTH 8

#define IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH 104

#define IN6ADDR_V4MAPPEDPREFIX_LENGTH 96

#define IN6ADDR_6TO4PREFIX_LENGTH 16

#define IN6ADDR_TEREDOPREFIX_LENGTH 32

#ifdef __cplusplus
extern "C" {
#endif

//
// N.B. These addresses are in network byte order.
//
extern CONST SCOPE_ID scopeid_unspecified;

extern CONST IN_ADDR in4addr_any;
extern CONST IN_ADDR in4addr_loopback;
extern CONST IN_ADDR in4addr_broadcast;
extern CONST IN_ADDR in4addr_allnodesonlink;
extern CONST IN_ADDR in4addr_allroutersonlink;
extern CONST IN_ADDR in4addr_alligmpv3routersonlink;
extern CONST IN_ADDR in4addr_allteredohostsonlink;
extern CONST IN_ADDR in4addr_linklocalprefix;
extern CONST IN_ADDR in4addr_multicastprefix;

extern CONST IN6_ADDR in6addr_any;
extern CONST IN6_ADDR in6addr_loopback;
extern CONST IN6_ADDR in6addr_allnodesonnode;
extern CONST IN6_ADDR in6addr_allnodesonlink;
extern CONST IN6_ADDR in6addr_allroutersonlink;
extern CONST IN6_ADDR in6addr_allmldv2routersonlink;
extern CONST IN6_ADDR in6addr_teredoinitiallinklocaladdress;
extern CONST IN6_ADDR in6addr_linklocalprefix;
extern CONST IN6_ADDR in6addr_multicastprefix;
extern CONST IN6_ADDR in6addr_solicitednodemulticastprefix;
extern CONST IN6_ADDR in6addr_v4mappedprefix;
extern CONST IN6_ADDR in6addr_6to4prefix;
extern CONST IN6_ADDR in6addr_teredoprefix;
extern CONST IN6_ADDR in6addr_teredoprefix_old;

#ifdef __cplusplus
}
#endif

#ifndef __midl

WS2TCPIP_INLINE
BOOLEAN
IN6_ADDR_EQUAL(CONST IN6_ADDR *x, CONST IN6_ADDR *y)
{
    __int64 UNALIGNED *a;
    __int64 UNALIGNED *b;

    a = (__int64 UNALIGNED *)x;
    b = (__int64 UNALIGNED *)y;

    return (BOOLEAN)((a[1] == b[1]) && (a[0] == b[0]));
}

//
// RFC 3542 uses IN6_ARE_ADDR_EQUAL().
//
#define IN6_ARE_ADDR_EQUAL IN6_ADDR_EQUAL

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_UNSPECIFIED(CONST IN6_ADDR *a)
{
    //
    // We can't use the in6addr_any variable, since that would
    // require existing callers to link with a specific library.
    //
    return (BOOLEAN)((a->s6_words[0] == 0) &&
                     (a->s6_words[1] == 0) &&
                     (a->s6_words[2] == 0) &&
                     (a->s6_words[3] == 0) &&
                     (a->s6_words[4] == 0) &&
                     (a->s6_words[5] == 0) &&
                     (a->s6_words[6] == 0) &&
                     (a->s6_words[7] == 0));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_LOOPBACK(CONST IN6_ADDR *a)
{
    //
    // We can't use the in6addr_loopback variable, since that would
    // require existing callers to link with a specific library.
    //
    return (BOOLEAN)((a->s6_words[0] == 0) &&
                     (a->s6_words[1] == 0) &&
                     (a->s6_words[2] == 0) &&
                     (a->s6_words[3] == 0) &&
                     (a->s6_words[4] == 0) &&
                     (a->s6_words[5] == 0) &&
                     (a->s6_words[6] == 0) &&
                     (a->s6_words[7] == 0x0100));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MULTICAST(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(a->s6_bytes[0] == 0xff);
}

//
//  Does the address have a format prefix
//  that indicates it uses EUI-64 interface identifiers?
//
WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_EUI64(CONST IN6_ADDR *a)
{
    //
    // Format prefixes 001 through 111, except for multicast.
    //
    return (BOOLEAN)(((a->s6_bytes[0] & 0xe0) != 0) &&
                     !IN6_IS_ADDR_MULTICAST(a));
}

//
//  Is this the subnet router anycast address?
//  See RFC 2373.
//
WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->s6_words[4] == 0) &&
                     (a->s6_words[5] == 0) &&
                     (a->s6_words[6] == 0) &&
                     (a->s6_words[7] == 0));
}

//
//  Is this a subnet reserved anycast address?
//  See RFC 2526. It talks about non-EUI-64
//  addresses as well, but IMHO that part
//  of the RFC doesn't make sense. For example,
//  it shouldn't apply to multicast or v4-compatible
//  addresses.
//
WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_EUI64(a) &&
                     (a->s6_words[4] == 0xfffd) &&
                     (a->s6_words[5] == 0xffff) &&
                     (a->s6_words[6] == 0xffff) &&
                     ((a->s6_words[7] & 0x80ff) == 0x80ff));
}

//
//  As best we can tell from simple inspection,
//  is this an anycast address?
//
WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_ANYCAST(CONST IN6_ADDR *a)
{
    return (IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(a) || 
            IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(a));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_LINKLOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)((a->s6_bytes[0] == 0xfe) && 
                     ((a->s6_bytes[1] & 0xc0) == 0x80));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_SITELOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)((a->s6_bytes[0] == 0xfe) && 
                     ((a->s6_bytes[1] & 0xc0) == 0xc0));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_GLOBAL(CONST IN6_ADDR *a)
{
    //
    // Check the format prefix and exclude addresses
    // whose high 4 bits are all zero or all one.
    // This is a cheap way of excluding v4-compatible,
    // v4-mapped, loopback, multicast, link-local, site-local.
    //
    ULONG High = (a->s6_bytes[0] & 0xf0);
    return (BOOLEAN)((High != 0) && (High != 0xf0));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_V4MAPPED(CONST IN6_ADDR *a)
{
    return (BOOLEAN)((a->s6_words[0] == 0) &&
                     (a->s6_words[1] == 0) &&
                     (a->s6_words[2] == 0) &&
                     (a->s6_words[3] == 0) &&
                     (a->s6_words[4] == 0) &&
                     (a->s6_words[5] == 0xffff));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_V4COMPAT(CONST IN6_ADDR *a)
{
    return (BOOLEAN)((a->s6_words[0] == 0) &&
                     (a->s6_words[1] == 0) &&
                     (a->s6_words[2] == 0) &&
                     (a->s6_words[3] == 0) &&
                     (a->s6_words[4] == 0) &&
                     (a->s6_words[5] == 0) &&
                     !((a->s6_words[6] == 0) &&
                       (a->s6_addr[14] == 0) &&
                       ((a->s6_addr[15] == 0) || (a->s6_addr[15] == 1))));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_V4TRANSLATED(CONST IN6_ADDR *a)
{
    return (BOOLEAN)((a->s6_words[0] == 0) &&
                     (a->s6_words[1] == 0) &&
                     (a->s6_words[2] == 0) &&
                     (a->s6_words[3] == 0) &&
                     (a->s6_words[4] == 0xffff) &&
                     (a->s6_words[5] == 0));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MC_NODELOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->s6_bytes[1] & 0xf) == 1));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MC_LINKLOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->s6_bytes[1] & 0xf) == 2));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MC_SITELOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->s6_bytes[1] & 0xf) == 5));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MC_ORGLOCAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->s6_bytes[1] & 0xf) == 8));
}

WS2TCPIP_INLINE
BOOLEAN
IN6_IS_ADDR_MC_GLOBAL(CONST IN6_ADDR *a)
{
    return (BOOLEAN)(IN6_IS_ADDR_MULTICAST(a) &&
                     ((a->s6_bytes[1] & 0xf) == 0xe));
}

WS2TCPIP_INLINE 
VOID
IN6_SET_ADDR_UNSPECIFIED(PIN6_ADDR a)
{
    //
    // We can't use the in6addr_any variable, since that would
    // require existing callers to link with a specific library.
    //
    memset(a->s6_bytes, 0, sizeof(IN6_ADDR));
}

WS2TCPIP_INLINE 
VOID
IN6_SET_ADDR_LOOPBACK(PIN6_ADDR a)
{
    //
    // We can't use the in6addr_loopback variable, since that would
    // require existing callers to link with a specific library.
    //
    memset(a->s6_bytes, 0, sizeof(IN6_ADDR));
    a->s6_bytes[15] = 1;
}

WS2TCPIP_INLINE
VOID
IN6ADDR_SETANY(PSOCKADDR_IN6 a)
{
    a->sin6_family = AF_INET6;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_UNSPECIFIED(&a->sin6_addr);
    a->sin6_scope_id = 0;
}

WS2TCPIP_INLINE
VOID
IN6ADDR_SETLOOPBACK(PSOCKADDR_IN6 a)
{
    a->sin6_family = AF_INET6;
    a->sin6_port = 0;
    a->sin6_flowinfo = 0;
    IN6_SET_ADDR_LOOPBACK(&a->sin6_addr);
    a->sin6_scope_id = 0;
}

WS2TCPIP_INLINE
BOOLEAN
IN6ADDR_ISANY(CONST SOCKADDR_IN6 *a)
{
    WS2IPDEF_ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr);
}

WS2TCPIP_INLINE
BOOLEAN
IN6ADDR_ISLOOPBACK(CONST SOCKADDR_IN6 *a)
{
    WS2IPDEF_ASSERT(a->sin6_family == AF_INET6);
    return IN6_IS_ADDR_LOOPBACK(&a->sin6_addr);
}

WS2TCPIP_INLINE
BOOLEAN
IN6ADDR_ISEQUAL(CONST SOCKADDR_IN6 *a, CONST SOCKADDR_IN6 *b)
{
    WS2IPDEF_ASSERT(a->sin6_family == AF_INET6);
    return (BOOLEAN)(a->sin6_scope_id == b->sin6_scope_id &&
                     IN6_ADDR_EQUAL(&a->sin6_addr, &b->sin6_addr));
}

WS2TCPIP_INLINE
BOOLEAN
IN6ADDR_ISUNSPECIFIED(CONST SOCKADDR_IN6 *a)
{
    WS2IPDEF_ASSERT(a->sin6_family == AF_INET6);
    return (BOOLEAN)(a->sin6_scope_id == 0 &&
                     IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr));
}

#endif // __midl

#endif // (NTDDI_VERSION >= NTDDI_WIN2KSP1) 

//
// TCP/IP specific Ioctl codes.
//
#define SIO_GET_INTERFACE_LIST     _IOR('t', 127, ULONG)
#define SIO_GET_INTERFACE_LIST_EX  _IOR('t', 126, ULONG)
#define SIO_SET_MULTICAST_FILTER   _IOW('t', 125, ULONG)
#define SIO_GET_MULTICAST_FILTER   _IOW('t', 124 | IOC_IN, ULONG)
#define SIOCSIPMSFILTER            SIO_SET_MULTICAST_FILTER
#define SIOCGIPMSFILTER            SIO_GET_MULTICAST_FILTER

//
// Protocol independent ioctls for setting and retrieving multicast filters. 
//
#define SIOCSMSFILTER     _IOW('t', 126, ULONG)
#define SIOCGMSFILTER     _IOW('t', 127 | IOC_IN, ULONG)

#if (NTDDI_VERSION >= NTDDI_VISTASP1)

#define IDEAL_SEND_BACKLOG_IOCTLS

//
// Query and change notification ioctls for the ideal send backlog size
// for a given connection. Clients should use the wrappers defined in 
// ws2tcpip.h rather than using these ioctls directly.
//

#define SIO_IDEAL_SEND_BACKLOG_QUERY   _IOR('t', 123, ULONG)
#define SIO_IDEAL_SEND_BACKLOG_CHANGE   _IO('t', 122)

#endif

//
// Protocol independent multicast source filter options.
//
#define MCAST_JOIN_GROUP            41	// Join all sources for a group.
#define MCAST_LEAVE_GROUP           42  // Drop all sources for a group.
#define MCAST_BLOCK_SOURCE          43	// Block IP group/source.
#define MCAST_UNBLOCK_SOURCE        44	// Unblock IP group/source.
#define MCAST_JOIN_SOURCE_GROUP     45	// Join IP group/source.
#define MCAST_LEAVE_SOURCE_GROUP    46	// Leave IP group/source.

//
// Definitions of MCAST_INCLUDE and MCAST_EXCLUDE for multicast source filter. 
//
typedef enum {
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE 
} MULTICAST_MODE_TYPE;

//
// Structure for IP_MREQ (used by IP_ADD_MEMBERSHIP and IP_DROP_MEMBERSHIP). 
//
typedef struct ip_mreq {
    IN_ADDR imr_multiaddr;  // IP multicast address of group.
    IN_ADDR imr_interface;  // Local IP address of interface.
} IP_MREQ, *PIP_MREQ;

//
// Structure for IP_MREQ_SOURCE (used by IP_BLOCK_SOURCE, IP_UNBLOCK_SOURCE
// etc.). 
//
typedef struct ip_mreq_source {
    IN_ADDR imr_multiaddr;  // IP multicast address of group.
    IN_ADDR imr_sourceaddr; // IP address of source.
    IN_ADDR imr_interface;  // Local IP address of interface.
} IP_MREQ_SOURCE, *PIP_MREQ_SOURCE;

//
// Structure for IP_MSFILTER (used by SIOCSIPMSFILTER and SIOCGIPMSFILTER). 
// 
typedef struct ip_msfilter {
    IN_ADDR imsf_multiaddr;  // IP multicast address of group.
    IN_ADDR imsf_interface;  // Local IP address of interface.
    MULTICAST_MODE_TYPE imsf_fmode;        // Filter mode.
    ULONG imsf_numsrc;       // Number of sources in src_list.
    IN_ADDR imsf_slist[1];   // Start of source list.
} IP_MSFILTER, *PIP_MSFILTER;

#define IP_MSFILTER_SIZE(NumSources) \
    (sizeof(IP_MSFILTER) - sizeof(IN_ADDR) + (NumSources) * sizeof(IN_ADDR))

//
// Options to use with [gs]etsockopt at the IPPROTO_IPV6 level.
// These are specified in RFCs 3493 and 3542.
// The values should be consistent with the IPv6 equivalents.
//
#define IPV6_HOPOPTS           1 // Set/get IPv6 hop-by-hop options.
#define IPV6_HDRINCL           2 // Header is included with data.
#define IPV6_UNICAST_HOPS      4 // IP unicast hop limit.
#define IPV6_MULTICAST_IF      9 // IP multicast interface.
#define IPV6_MULTICAST_HOPS   10 // IP multicast hop limit.
#define IPV6_MULTICAST_LOOP   11 // IP multicast loopback.
#define IPV6_ADD_MEMBERSHIP   12 // Add an IP group membership.
#define IPV6_JOIN_GROUP       IPV6_ADD_MEMBERSHIP
#define IPV6_DROP_MEMBERSHIP  13 // Drop an IP group membership.
#define IPV6_LEAVE_GROUP      IPV6_DROP_MEMBERSHIP
#define IPV6_DONTFRAG         14 // Don't fragment IP datagrams.
#define IPV6_PKTINFO          19 // Receive packet information.
#define IPV6_HOPLIMIT         21 // Receive packet hop limit.
#define IPV6_PROTECTION_LEVEL 23 // Set/get IPv6 protection level.
#define IPV6_RECVIF           24 // Receive arrival interface.
#define IPV6_RECVDSTADDR      25 // Receive destination address.
#define IPV6_CHECKSUM         26 // Offset to checksum for raw IP socket send.
#define IPV6_V6ONLY           27 // Treat wildcard bind as AF_INET6-only.
#define IPV6_IFLIST           28 // Enable/Disable an interface list.
#define IPV6_ADD_IFLIST       29 // Add an interface list entry.
#define IPV6_DEL_IFLIST       30 // Delete an interface list entry.
#define IPV6_UNICAST_IF       31 // IP unicast interface.
#define IPV6_RTHDR            32 // Set/get IPv6 routing header.
#define IPV6_RECVRTHDR        38 // Receive the routing header.
#define IPV6_TCLASS           39 // Packet traffic class.
#define IPV6_RECVTCLASS       40 // Receive packet traffic class.

#define IP_UNSPECIFIED_HOP_LIMIT -1

#define IP_PROTECTION_LEVEL   IPV6_PROTECTION_LEVEL
//
// Values of IPV6_PROTECTION_LEVEL.
//
#define PROTECTION_LEVEL_UNRESTRICTED   10 // For peer-to-peer apps. 
#define PROTECTION_LEVEL_EDGERESTRICTED 20 // Same as unrestricted. Except for
                                           // Teredo.
#define PROTECTION_LEVEL_RESTRICTED     30 // For Intranet apps.

#if (NTDDI_VERSION < NTDDI_VISTA)
#define PROTECTION_LEVEL_DEFAULT        PROTECTION_LEVEL_EDGERESTRICTED
#else
#define PROTECTION_LEVEL_DEFAULT        ((UINT)-1)
#endif
//
// Structure for IPV6_JOIN_GROUP and IPV6_LEAVE_GROUP (also,
// IPV6_ADD_MEMBERSHIP and IPV6_DROP_MEMBERSHIP).
//
typedef struct ipv6_mreq {
    IN6_ADDR ipv6mr_multiaddr;  // IPv6 multicast address.
    ULONG ipv6mr_interface;     // Interface index.
} IPV6_MREQ, *PIPV6_MREQ;

#if (NTDDI_VERSION >= NTDDI_WINXP)
//
// Structure for GROUP_REQ used by protocol independent source filters
// (MCAST_JOIN_GROUP and MCAST_LEAVE_GROUP). 
//
typedef struct group_req {
    ULONG gr_interface;         // Interface index.
    SOCKADDR_STORAGE gr_group;  // Multicast address.
} GROUP_REQ, *PGROUP_REQ;

//
// Structure for GROUP_SOURCE_REQ used by protocol independent source filters
// (MCAST_JOIN_SOURCE_GROUP, MCAST_LEAVE_SOURCE_GROUP etc.).
//
typedef struct group_source_req {
    ULONG gsr_interface;        // Interface index.
    SOCKADDR_STORAGE gsr_group; // Group address.
    SOCKADDR_STORAGE gsr_source; // Source address.
} GROUP_SOURCE_REQ, *PGROUP_SOURCE_REQ;

//
// Structure for GROUP_FILTER used by protocol independent source filters
// (SIOCSMSFILTER and SIOCGMSFILTER).
//
typedef struct group_filter {
    ULONG gf_interface;         // Interface index.
    SOCKADDR_STORAGE gf_group;  // Multicast address.
    MULTICAST_MODE_TYPE gf_fmode; // Filter mode.
    ULONG gf_numsrc;            // Number of sources.
    SOCKADDR_STORAGE gf_slist[1]; // Source address.
} GROUP_FILTER, *PGROUP_FILTER;

#define GROUP_FILTER_SIZE(numsrc) \
   (sizeof(GROUP_FILTER) - sizeof(SOCKADDR_STORAGE) \
   + (numsrc) * sizeof(SOCKADDR_STORAGE))
#endif

//
// Structure for IP_PKTINFO option.
//
typedef struct in_pktinfo {
    IN_ADDR ipi_addr;     // Source/destination IPv4 address.
    ULONG ipi_ifindex;    // Send/receive interface index.
} IN_PKTINFO, *PIN_PKTINFO;

C_ASSERT(sizeof(IN_PKTINFO) == 8);

//
// Structure for IPV6_PKTINFO option.
//
typedef struct in6_pktinfo {
    IN6_ADDR ipi6_addr;    // Source/destination IPv6 address.
    ULONG ipi6_ifindex;    // Send/receive interface index.
} IN6_PKTINFO, *PIN6_PKTINFO;

C_ASSERT(sizeof(IN6_PKTINFO) == 20);

//
// Maximum length of address literals (potentially including a port number)
// generated by any address-to-string conversion routine.  This length can
// be used when declaring buffers used with getnameinfo, WSAAddressToString,
// inet_ntoa, etc.  We just provide one define, rather than one per api,
// to avoid confusion.
//
// The totals are derived from the following data:
//  15: IPv4 address
//  45: IPv6 address including embedded IPv4 address
//  11: Scope Id
//   2: Brackets around IPv6 address when port is present
//   6: Port (including colon)
//   1: Terminating null byte
//
#define INET_ADDRSTRLEN  22
#define INET6_ADDRSTRLEN 65



//
// Options to use with [gs]etsockopt at the IPPROTO_TCP level.
// TCP_NODELAY is defined in ws2def.h for historical reasons.
//

//
// Offload preferences supported.
//
#define TCP_OFFLOAD_NO_PREFERENCE	0
#define	TCP_OFFLOAD_NOT_PREFERRED	1
#define TCP_OFFLOAD_PREFERRED		2

//      TCP_NODELAY         	 0x0001
#define TCP_EXPEDITED_1122  	 0x0002
#define TCP_KEEPALIVE       	 3
#define TCP_MAXSEG          	 4
#define TCP_MAXRT           	 5
#define TCP_STDURG          	 6
#define TCP_NOURG           	 7
#define TCP_ATMARK          	 8
#define TCP_NOSYNRETRIES    	 9
#define TCP_TIMESTAMPS      	 10
#define TCP_OFFLOAD_PREFERENCE	 11
#define TCP_CONGESTION_ALGORITHM 12
#define TCP_DELAY_FIN_ACK        13

#ifdef _PREFAST_
#pragma prefast(pop)
#endif

#pragma warning(pop)

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WS2spi.h ===
//$TAG BIZDEV
//  $IPCategory:     
//  $DealPointID:    118736
//  $AgreementName:  berkeley software distribution license
//  $AgreementType:  oss license
//  $ExternalOrigin: regents of the university of california
//$ENDTAG

//$TAG ENGR 
//  $Owner:    vadime
//  $Module:   published_inc
//
//$ENDTAG

/* WS2SPI.H -- definitions to be used with the WinSock service provider.
 *
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * This header file corresponds to version 2.2.x of the WinSock SPI
 * specification.
 *
 * This file includes parts which are Copyright (c) 1982-1986 Regents
 * of the University of California.  All rights reserved.  The
 * Berkeley Software License Agreement specifies the terms and
 * conditions for redistribution.
 */

#ifndef _WINSOCK2SPI_
#define _WINSOCK2SPI_

#if _MSC_VER > 1000
#pragma once
#endif

/*
 * Pull in WINSOCK2.H if necessary
 */

#ifndef _WINSOCK2API_
#include <winsock2.h>
#endif /* _WINSOCK2API_ */

/*
 * Ensure structures are packed consistently.
 */

#if !defined(_WIN64)
#include <pshpack4.h>
#endif

#define WSPDESCRIPTION_LEN 255

#define WSS_OPERATION_IN_PROGRESS 0x00000103L

typedef struct WSPData {
    WORD         wVersion;
    WORD         wHighVersion;
    WCHAR        szDescription[WSPDESCRIPTION_LEN+1];
} WSPDATA, FAR * LPWSPDATA;

typedef struct _WSATHREADID {
    HANDLE      ThreadHandle;
    DWORD_PTR    Reserved;
} WSATHREADID, FAR * LPWSATHREADID;

/*
 * SPI function linkage.
 */

#define WSPAPI WSAAPI


#ifdef __cplusplus
extern "C" {
#endif

/*
 * Pointer to a blocking callback. A pointer to a blocking callback is
 * returned from the WPUQueryBlockingCallback() upcall. Note that this
 * function's signature is not identical to an application's blocking
 * hook function.
 */

typedef
BOOL
(CALLBACK FAR * LPBLOCKINGCALLBACK)(
    DWORD_PTR dwContext
    );

/*
 * Pointer to a user APC function. This is used as a parameter to the
 * WPUQueueUserApc() upcall. Note that this function's signature is not
 * identical to an application's completion routine.
 */

typedef
VOID
(CALLBACK FAR * LPWSAUSERAPC)(
    DWORD_PTR dwContext
    );

/*
 * Pointers to the individual entries in a service provider's proc table.
 */

typedef
__checkReturn
SOCKET
(WSPAPI * LPWSPACCEPT)(
    __in SOCKET s,
    __out_bcount_part_opt(*addrlen, *addrlen) struct sockaddr FAR * addr,
    __inout_opt LPINT addrlen,
    __in_opt LPCONDITIONPROC lpfnCondition,
    __in_opt DWORD_PTR dwCallbackData,
    __out LPINT lpErrno
    );

typedef
INT
(WSPAPI * LPWSPADDRESSTOSTRING)(
    __in_bcount(dwAddressLength) LPSOCKADDR lpsaAddress,
    __in DWORD dwAddressLength,
    __in_opt LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __out_ecount_part(*lpdwAddressStringLength, *lpdwAddressStringLength) LPWSTR lpszAddressString,
    __inout LPDWORD lpdwAddressStringLength,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPASYNCSELECT)(
    __in SOCKET s,
    __in HWND hWnd,
    __in unsigned int wMsg,
    __in long lEvent,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPBIND)(
    __in SOCKET s,
    __in_bcount(namelen) const struct sockaddr FAR * name,
    __in int namelen,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPCANCELBLOCKINGCALL)(
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPCLEANUP)(
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPCLOSESOCKET)(
    __in SOCKET s,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPCONNECT)(
    __in SOCKET s,
    __in_bcount(namelen) const struct sockaddr FAR * name,
    __in int namelen,
    __in_opt LPWSABUF lpCallerData,
    __out_opt LPWSABUF lpCalleeData,
    __in_opt LPQOS lpSQOS,
    __in_opt LPQOS lpGQOS,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPDUPLICATESOCKET)(
    __in SOCKET s,
    __in DWORD dwProcessId,
    __out LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPENUMNETWORKEVENTS)(
    __in SOCKET s,
    __in WSAEVENT hEventObject,
    __out LPWSANETWORKEVENTS lpNetworkEvents,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPEVENTSELECT)(
    __in SOCKET s,
    __in WSAEVENT hEventObject,
    __in long lNetworkEvents,
    __out LPINT lpErrno
    );

typedef
BOOL
(WSPAPI * LPWSPGETOVERLAPPEDRESULT)(
    __in SOCKET s,
    __in LPWSAOVERLAPPED lpOverlapped,
    __out LPDWORD lpcbTransfer,
    __in BOOL fWait,
    __out LPDWORD lpdwFlags,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPGETPEERNAME)(
    __in SOCKET s,
    __out_bcount_part(*namelen, *namelen) struct sockaddr FAR * name,
    __inout LPINT namelen,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPGETSOCKNAME)(
    __in SOCKET s,
    __out_bcount_part(*namelen, *namelen) struct sockaddr FAR * name,
    __inout LPINT namelen,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPGETSOCKOPT)(
    __in SOCKET s,
    __in int level,
    __in int optname,
    __out_bcount(*optlen) char FAR * optval,
    __inout LPINT optlen,
    __out LPINT lpErrno
    );

typedef
BOOL
(WSPAPI * LPWSPGETQOSBYNAME)(
    __in SOCKET s,
    __in LPWSABUF lpQOSName,
    __out LPQOS lpQOS,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPIOCTL)(
    __in SOCKET s,
    __in DWORD dwIoControlCode,
    __in_bcount_opt(cbInBuffer) LPVOID lpvInBuffer,
    __in DWORD cbInBuffer,
    __out_bcount_part_opt(cbOutBuffer, *lpcbBytesReturned) LPVOID lpvOutBuffer,
    __in DWORD cbOutBuffer,
    __out LPDWORD lpcbBytesReturned,
    __inout_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    __in_opt LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

typedef
SOCKET
(WSPAPI * LPWSPJOINLEAF)(
    __in SOCKET s,
    __in_bcount(namelen) const struct sockaddr FAR * name,
    __in int namelen,
    __in_opt LPWSABUF lpCallerData,
    __out_opt LPWSABUF lpCalleeData,
    __in_opt LPQOS lpSQOS,
    __in_opt LPQOS lpGQOS,
    __in DWORD dwFlags,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPLISTEN)(
    __in SOCKET s,
    __in int backlog,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPRECV)(
    __in SOCKET s,
    __in_ecount(dwBufferCount) LPWSABUF lpBuffers,
    __in DWORD dwBufferCount,
    __out_opt LPDWORD lpNumberOfBytesRecvd,
    __inout LPDWORD lpFlags,
    __inout_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    __in_opt LPWSATHREADID lpThreadId,
    __in LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPRECVDISCONNECT)(
    __in SOCKET s,
    __in_opt LPWSABUF lpInboundDisconnectData,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPRECVFROM)(
    __in SOCKET s,
    __in_ecount(dwBufferCount) LPWSABUF lpBuffers,
    __in DWORD dwBufferCount,
    __out_opt LPDWORD lpNumberOfBytesRecvd,
    __inout LPDWORD lpFlags,
    __out_bcount_part_opt(*lpFromLen, *lpFromLen) struct sockaddr FAR * lpFrom,
    __inout_opt LPINT lpFromlen,
    __inout_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    __in_opt LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSELECT)(
    __in int nfds,
    __inout_opt fd_set FAR * readfds,
    __inout_opt fd_set FAR * writefds,
    __inout_opt fd_set FAR * exceptfds,
    __in_opt const struct timeval FAR * timeout,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSEND)(
    __in SOCKET s,
    __in_ecount(dwBufferCount) LPWSABUF lpBuffers,
    __in DWORD dwBufferCount,
    __out_opt LPDWORD lpNumberOfBytesSent,
    __in DWORD dwFlags,
    __inout_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    __in_opt LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSENDDISCONNECT)(
    __in SOCKET s,
    __in_opt LPWSABUF lpOutboundDisconnectData,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSENDTO)(
    __in SOCKET s,
    __in_ecount(dwBufferCount) LPWSABUF lpBuffers,
    __in DWORD dwBufferCount,
    __out_opt LPDWORD lpNumberOfBytesSent,
    __in DWORD dwFlags,
    __in_bcount_opt(iToLen) const struct sockaddr FAR * lpTo,
    __in int iTolen,
    __inout_opt LPWSAOVERLAPPED lpOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    __in_opt LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSETSOCKOPT)(
    __in SOCKET s,
    __in int level,
    __in int optname,
    __in_bcount_opt(optlen) const char FAR * optval,
    __in int optlen,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSPSHUTDOWN)(
    __in SOCKET s,
    __in int how,
    __out LPINT lpErrno
    );

typedef
__checkReturn
SOCKET
(WSPAPI * LPWSPSOCKET)(
    __in int af,
    __in int type,
    __in int protocol,
    __in_opt LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __in GROUP g,
    __in DWORD dwFlags,
    __out LPINT lpErrno
    );

typedef
INT
(WSPAPI * LPWSPSTRINGTOADDRESS)(
    __in LPWSTR AddressString,
    __in INT AddressFamily,
    __in_opt LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __out_bcount_part(*lpAddressLength, *lpAddressLength) LPSOCKADDR lpAddress,
    __inout LPINT lpAddressLength,
    __out LPINT lpErrno
    );

/*
 * A service provider proc table. This structure is returned by value
 * from the service provider's WSPStartup() entrypoint.
 */

typedef struct _WSPPROC_TABLE {

    LPWSPACCEPT              lpWSPAccept;
    LPWSPADDRESSTOSTRING     lpWSPAddressToString;
    LPWSPASYNCSELECT         lpWSPAsyncSelect;
    LPWSPBIND                lpWSPBind;
    LPWSPCANCELBLOCKINGCALL  lpWSPCancelBlockingCall;
    LPWSPCLEANUP             lpWSPCleanup;
    LPWSPCLOSESOCKET         lpWSPCloseSocket;
    LPWSPCONNECT             lpWSPConnect;
    LPWSPDUPLICATESOCKET     lpWSPDuplicateSocket;
    LPWSPENUMNETWORKEVENTS   lpWSPEnumNetworkEvents;
    LPWSPEVENTSELECT         lpWSPEventSelect;
    LPWSPGETOVERLAPPEDRESULT lpWSPGetOverlappedResult;
    LPWSPGETPEERNAME         lpWSPGetPeerName;
    LPWSPGETSOCKNAME         lpWSPGetSockName;
    LPWSPGETSOCKOPT          lpWSPGetSockOpt;
    LPWSPGETQOSBYNAME        lpWSPGetQOSByName;
    LPWSPIOCTL               lpWSPIoctl;
    LPWSPJOINLEAF            lpWSPJoinLeaf;
    LPWSPLISTEN              lpWSPListen;
    LPWSPRECV                lpWSPRecv;
    LPWSPRECVDISCONNECT      lpWSPRecvDisconnect;
    LPWSPRECVFROM            lpWSPRecvFrom;
    LPWSPSELECT              lpWSPSelect;
    LPWSPSEND                lpWSPSend;
    LPWSPSENDDISCONNECT      lpWSPSendDisconnect;
    LPWSPSENDTO              lpWSPSendTo;
    LPWSPSETSOCKOPT          lpWSPSetSockOpt;
    LPWSPSHUTDOWN            lpWSPShutdown;
    LPWSPSOCKET              lpWSPSocket;
    LPWSPSTRINGTOADDRESS     lpWSPStringToAddress;

} WSPPROC_TABLE, FAR * LPWSPPROC_TABLE;

/*
 * Pointers to the individual entries in the upcall table.
 */

typedef
BOOL
(WSPAPI * LPWPUCLOSEEVENT)(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUCLOSESOCKETHANDLE)(
    __in SOCKET s,
    __out LPINT lpErrno
    );

typedef
WSAEVENT
(WSPAPI * LPWPUCREATEEVENT)(
    __out LPINT lpErrno
    );

typedef
__checkReturn
SOCKET
(WSPAPI * LPWPUCREATESOCKETHANDLE)(
    __in DWORD dwCatalogEntryId,
    __in DWORD_PTR dwContext,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUFDISSET)(
    __in SOCKET s,
    __in fd_set FAR * fdset
    );

typedef
int
(WSPAPI * LPWPUGETPROVIDERPATH)(
    __in LPGUID lpProviderId,
    __out_ecount(*lpProviderDllPathLen) WCHAR FAR * lpszProviderDllPath,
    __inout LPINT lpProviderDllPathLen,
    __out LPINT lpErrno
    );

typedef
SOCKET
(WSPAPI * LPWPUMODIFYIFSHANDLE)(
    __in DWORD dwCatalogEntryId,
    __in SOCKET ProposedHandle,
    __out LPINT lpErrno
    );

typedef
BOOL
(WSPAPI * LPWPUPOSTMESSAGE)(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
    );

typedef
int
(WSPAPI * LPWPUQUERYBLOCKINGCALLBACK)(
    __in DWORD dwCatalogEntryId,
    __out LPBLOCKINGCALLBACK FAR * lplpfnCallback,
    __out PDWORD_PTR lpdwContext,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUQUERYSOCKETHANDLECONTEXT)(
    __in SOCKET s,
    __out PDWORD_PTR lpContext,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUQUEUEAPC)(
    __in LPWSATHREADID lpThreadId,
    __in LPWSAUSERAPC lpfnUserApc,
    __in DWORD_PTR dwContext,
    __out LPINT lpErrno
    );

typedef
BOOL
(WSPAPI * LPWPURESETEVENT)(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

typedef
BOOL
(WSPAPI * LPWPUSETEVENT)(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUOPENCURRENTTHREAD)(
    __out LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWPUCLOSETHREAD)(
    __in LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );


// Available only directly from ws2_32.dll
typedef
int
(WSPAPI * LPWPUCOMPLETEOVERLAPPEDREQUEST) (
    __in SOCKET s,
    __inout LPWSAOVERLAPPED lpOverlapped,
    __in DWORD dwError,
    __in DWORD cbTransferred,
    __out LPINT lpErrno
);

/*
 * The upcall table. This structure is passed by value to the service
 * provider's WSPStartup() entrypoint.
 */

typedef struct _WSPUPCALLTABLE {

    LPWPUCLOSEEVENT               lpWPUCloseEvent;
    LPWPUCLOSESOCKETHANDLE        lpWPUCloseSocketHandle;
    LPWPUCREATEEVENT              lpWPUCreateEvent;
    LPWPUCREATESOCKETHANDLE       lpWPUCreateSocketHandle;
    LPWPUFDISSET                  lpWPUFDIsSet;
    LPWPUGETPROVIDERPATH          lpWPUGetProviderPath;
    LPWPUMODIFYIFSHANDLE          lpWPUModifyIFSHandle;
    LPWPUPOSTMESSAGE              lpWPUPostMessage;
    LPWPUQUERYBLOCKINGCALLBACK    lpWPUQueryBlockingCallback;
    LPWPUQUERYSOCKETHANDLECONTEXT lpWPUQuerySocketHandleContext;
    LPWPUQUEUEAPC                 lpWPUQueueApc;
    LPWPURESETEVENT               lpWPUResetEvent;
    LPWPUSETEVENT                 lpWPUSetEvent;
    LPWPUOPENCURRENTTHREAD        lpWPUOpenCurrentThread;
    LPWPUCLOSETHREAD              lpWPUCloseThread;

} WSPUPCALLTABLE, FAR * LPWSPUPCALLTABLE;

/*
 *  WinSock 2 SPI socket function prototypes
 */

__control_entrypoint(DllExport)
__checkReturn
int
WSPAPI
WSPStartup(
    __in WORD wVersionRequested,
    __in LPWSPDATA lpWSPData,
    __in LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __in WSPUPCALLTABLE UpcallTable,
    __out LPWSPPROC_TABLE lpProcTable
    );

typedef
__checkReturn
int
(WSPAPI * LPWSPSTARTUP)(
    __in WORD wVersionRequested,
    __in LPWSPDATA lpWSPData,
    __in LPWSAPROTOCOL_INFOW lpProtocolInfo,
    __in WSPUPCALLTABLE UpcallTable,
    __out LPWSPPROC_TABLE lpProcTable
    );

/*
 * Installation and configuration entrypoints.
 */

__control_entrypoint(DllExport)
int
WSPAPI
WSCEnumProtocols(
    __in_opt LPINT lpiProtocols,
    __out_bcount_part_opt(*lpdwBufferLength, *lpdwBufferLength) LPWSAPROTOCOL_INFOW lpProtocolBuffer,
    __inout LPDWORD lpdwBufferLength,
    __out   LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSCENUMPROTOCOLS)(
    __in_opt LPINT   lpiProtocols,
    __out_bcount_part_opt(*lpdwBufferLength, *lpdwBufferlength) LPWSAPROTOCOL_INFOW lpProtocolBuffer,
    __inout LPDWORD lpdwBufferLength,
    __out   LPINT   lpErrno
    );

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

/*
 * 64-bit architectures capable of running 32-bit code have
 * separate 64-bit and 32-bit catalogs.  API with '32' prefix
 * allow 32 bit catalog manipulations by 64 bit process.
 */
__control_entrypoint(DllExport)
int
WSPAPI
WSCEnumProtocols32(
    __in_opt LPINT   lpiProtocols,
    __out_bcount(*lpdwBufferLength) LPWSAPROTOCOL_INFOW lpProtocolBuffer,
    __inout  LPDWORD lpdwBufferLength,
    __out    LPINT   lpErrno
    );
#endif //(defined(_WIN64) && _WIN32_WINNT >= 0x0501)

__control_entrypoint(DllExport)
int
WSPAPI
WSCDeinstallProvider(
    __in LPGUID lpProviderId,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSCDEINSTALLPROVIDER)(
    __in  LPGUID lpProviderId,
    __out LPINT lpErrno
    );

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

__control_entrypoint(DllExport)
int
WSPAPI
WSCDeinstallProvider32(
    __in   LPGUID lpProviderId,
    __out  LPINT lpErrno
    );
#endif //(defined(_WIN64) && _WIN32_WINNT >= 0x0501)

__control_entrypoint(DllExport)
int
WSPAPI
WSCInstallProvider(
    __in LPGUID lpProviderId,
    __in_z const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in  DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSCINSTALLPROVIDER)(
    __in LPGUID lpProviderId,
    __in_z const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

/*
 * This API manipulates 64-bit and 32-bit catalogs simulteneously.
 * It is needed to guarantee the same catalog IDs for provider catalog
 * entries in both 64-bit and 32-bit catalogs.
 */
__control_entrypoint(DllExport)
int
WSPAPI
WSCInstallProvider64_32(
    __in LPGUID lpProviderId,
    __in_z const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );
#endif //(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

__control_entrypoint(DllExport)
int
WSPAPI
WSCGetProviderPath(
    __in LPGUID lpProviderId,
    __out_ecount_part(*lpProviderDllPathLen, *lpProviderDllPathLen) WCHAR FAR * lpszProviderDllPath,
    __inout LPINT lpProviderDllPathLen,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSCGETPROVIDERPATH)(
    __in LPGUID lpProviderId,
    __out_ecount_part(*lpProviderDllPathLen, *lpProviderDllPathLen) WCHAR FAR * lpszProviderDllPath,
    __inout LPINT lpProviderDllPathLen,
    __out LPINT lpErrno
    );

#if(_WIN32_WINNT >= 0x0501)
#if defined(_WIN64)
__control_entrypoint(DllExport)
int
WSPAPI
WSCGetProviderPath32(
    __in LPGUID lpProviderId,
    __out_ecount_part(*lpProviderDllPathLen, *lpProviderDllPathLen) WCHAR FAR * lpszProviderDllPath,
    __inout LPINT lpProviderDllPathLen,
    __out LPINT lpErrno
    );
#endif

__control_entrypoint(DllExport)
int
WSPAPI
WSCUpdateProvider(
    __in  LPGUID lpProviderId,
    __in_z const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in  DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );

typedef
int
(WSPAPI * LPWSCUPDATEPROVIDER)(
    __in  LPGUID lpProviderId,
    __in_z  const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in  DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );

#if defined(_WIN64)
__control_entrypoint(DllExport)
int
WSPAPI
WSCUpdateProvider32(
    __in  LPGUID lpProviderId,
    __in_z  const WCHAR FAR * lpszProviderDllPath,
    __in_ecount(dwNumberOfEntries) const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in  DWORD dwNumberOfEntries,
    __out LPINT lpErrno
    );
#endif
#endif //(_WIN32_WINNT >= 0x0501)

#if (_WIN32_WINNT < 0x0600)
int
WSPAPI
WSCInstallQOSTemplate (
    __in  const LPGUID    Guid,
    __in  LPWSABUF        QosName,
    __in  LPQOS           Qos
    );

typedef
int
(WSPAPI * LPWSCINSTALLQOSTEMPLATE)(
    __in const LPGUID    Guid,
    __in LPWSABUF        QosName,
    __in LPQOS           Qos
    );

int
WSPAPI
WSCRemoveQOSTemplate (
    __in  const LPGUID    Guid,
    __in  LPWSABUF        QosName
    );

typedef
int
(WSPAPI * LPWSCREMOVEQOSTEMPLATE)(
    __in const LPGUID    Guid,
    __in LPWSABUF        QosName
    );

#endif //(_WIN32_WINNT < 0x0600)

#if(_WIN32_WINNT >= 0x0600)

//
// LSP Categorization
//

#define LSP_SYSTEM             0x80000000
#define LSP_INSPECTOR          0x00000001
#define LSP_REDIRECTOR         0x00000002
#define LSP_PROXY              0x00000004
#define LSP_FIREWALL           0x00000008
#define LSP_INBOUND_MODIFY     0x00000010
#define LSP_OUTBOUND_MODIFY    0x00000020
#define LSP_CRYPTO_COMPRESS    0x00000040
#define LSP_LOCAL_CACHE        0x00000080

//
// Provider Information APIs
//

typedef enum _WSC_PROVIDER_INFO_TYPE {
//  InfoType is:                  Info points to:
    ProviderInfoLspCategories, // DWORD (LspCategories)
    ProviderInfoAudit,         // struct WSC_PROVIDER_AUDIT_INFO
} WSC_PROVIDER_INFO_TYPE ;

typedef struct _WSC_PROVIDER_AUDIT_INFO {
    DWORD   RecordSize;     // Size of this audit record, in bytes (includes this field)
    PVOID   Reserved;       // Reserved
    // Install Time (GMT)
    // User SID of account performing install
    // Length (in characters) of Full Path
    // Full Path of EXE performing install
} WSC_PROVIDER_AUDIT_INFO;

__control_entrypoint(DllExport)
int
WSPAPI
WSCSetProviderInfo( 
    __in LPGUID lpProviderId,
    __in WSC_PROVIDER_INFO_TYPE InfoType,
    __in_bcount(InfoSize) PBYTE Info,
    __in size_t InfoSize,
    __in DWORD Flags,
    __out LPINT lpErrno
    );

__control_entrypoint(DllExport)
int
WSPAPI
WSCGetProviderInfo( 
    __in LPGUID lpProviderId,
    __in WSC_PROVIDER_INFO_TYPE InfoType,
    __out_bcount_part(*InfoSize, *InfoSize) PBYTE Info,
    __inout size_t *InfoSize,
    __in DWORD Flags,
    __out LPINT lpErrno
    );

#if defined(_WIN64)

__control_entrypoint(DllExport)
int
WSPAPI
WSCSetProviderInfo32( 
    __in LPGUID lpProviderId,
    __in WSC_PROVIDER_INFO_TYPE InfoType,
    __in_bcount(InfoSize) PBYTE Info,
    __in size_t InfoSize,
    __in DWORD Flags,
    __out LPINT lpErrno
    );

__control_entrypoint(DllExport)
int
WSPAPI
WSCGetProviderInfo32( 
    __in LPGUID lpProviderId,
    __in WSC_PROVIDER_INFO_TYPE InfoType,
    __out_bcount_part(*InfoSize, *InfoSize) PBYTE Info,
    __inout size_t *InfoSize,
    __in DWORD Flags,
    __out LPINT lpErrno
    );

#endif // (_WIN64)

//
// App Permitted LSP Categorization APIs
//

__control_entrypoint(DllExport)
int
WSPAPI
WSCSetApplicationCategory(
    __in_ecount(PathLength) LPCWSTR Path,
    __in DWORD PathLength,
    __in_ecount_opt(ExtraLength) LPCWSTR Extra,
    __in DWORD ExtraLength,
    __in DWORD PermittedLspCategories,
    __out_opt DWORD * pPrevPermLspCat,
    __out LPINT lpErrno
    );

__control_entrypoint(DllExport)
int
WSPAPI
WSCGetApplicationCategory(
    __in_ecount(PathLength) LPCWSTR Path,
    __in DWORD PathLength,
    __in_ecount_opt(ExtraLength) LPCWSTR Extra,
    __in DWORD ExtraLength,
    __out DWORD * pPermittedLspCategories,
    __out LPINT lpErrno
    );

#endif //(_WIN32_WINNT >= 0x0600)


/*
 *  The following upcall function prototypes are only used by WinSock 2 DLL and
 *  should not be used by any service providers.
 */

BOOL
WSPAPI
WPUCloseEvent(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

int
WSPAPI
WPUCloseSocketHandle(
    __in SOCKET s,
    __out LPINT lpErrno
    );

WSAEVENT
WSPAPI
WPUCreateEvent(
    __out LPINT lpErrno
    );

SOCKET
WSPAPI
WPUCreateSocketHandle(
    __in DWORD dwCatalogEntryId,
    __in DWORD_PTR dwContext,
    __out LPINT lpErrno
    );

__control_entrypoint(DispatchTable)
int
WSPAPI
WPUFDIsSet(
    __in SOCKET s,
    __in fd_set FAR * fdset
    );

int
WSPAPI
WPUGetProviderPath(
    __in LPGUID lpProviderId,
    __out_ecount(*lpProviderDllPathLen) WCHAR FAR * lpszProviderDllPath,
    __inout LPINT lpProviderDllPathLen,
    __out LPINT lpErrno
    );

SOCKET
WSPAPI
WPUModifyIFSHandle(
    __in DWORD dwCatalogEntryId,
    __in SOCKET ProposedHandle,
    __out LPINT lpErrno
    );

__control_entrypoint(DispatchTable)
BOOL
WSPAPI
WPUPostMessage(
    __in HWND hWnd,
    __in UINT Msg,
    __in WPARAM wParam,
    __in LPARAM lParam
    );

int
WSPAPI
WPUQueryBlockingCallback(
    __in DWORD dwCatalogEntryId,
    __out LPBLOCKINGCALLBACK FAR * lplpfnCallback,
    __out PDWORD_PTR lpdwContext,
    __out LPINT lpErrno
    );

int
WSPAPI
WPUQuerySocketHandleContext(
    __in SOCKET s,
    __out PDWORD_PTR lpContext,
    __out LPINT lpErrno
    );

__control_entrypoint(DispatchTable)
int
WSPAPI
WPUQueueApc(
    __in LPWSATHREADID lpThreadId,
    __in LPWSAUSERAPC lpfnUserApc,
    __in DWORD_PTR dwContext,
    __out LPINT lpErrno
    );

BOOL
WSPAPI
WPUResetEvent(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

BOOL
WSPAPI
WPUSetEvent(
    __in WSAEVENT hEvent,
    __out LPINT lpErrno
    );

__control_entrypoint(DispatchTable)
int
WSPAPI
WPUCompleteOverlappedRequest (
    __in SOCKET s, 	
    __inout LPWSAOVERLAPPED lpOverlapped, 	
    __in DWORD dwError, 	
    __in DWORD cbTransferred, 	
    __out LPINT lpErrno
);

#if(_WIN32_WINNT >= 0x0501)
__control_entrypoint(DispatchTable)
int
WSPAPI
WPUOpenCurrentThread(
    __out LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );

__control_entrypoint(DispatchTable)
int
WSPAPI
WPUCloseThread(
    __in LPWSATHREADID lpThreadId,
    __out LPINT lpErrno
    );
#endif //(_WIN32_WINNT >= 0x0501)

/*
 * Installing and uninstalling name space providers.
 */

#if(_WIN32_WINNT >= 0x0501)
/*
 * SPI and API for enumerating name space providers are
 * currently equivalent since there is no concept of a hidden
 * name space provider
 */
#define WSCEnumNameSpaceProviders WSAEnumNameSpaceProvidersW
#define LPFN_WSCENUMNAMESPACEPROVIDERS LPFN_WSAENUMNAMESPACEPROVIDERSW

#if defined(_WIN64)
INT
WSAAPI
WSCEnumNameSpaceProviders32(
    __inout LPDWORD             lpdwBufferLength,
    __out_bcount(*lpdwBufferLength) LPWSANAMESPACE_INFOW lpnspBuffer
    );
#endif
#endif //(_WIN32_WINNT >= 0x0501)

#if(_WIN32_WINNT >= 0x0600)
#define WSCEnumNameSpaceProvidersEx WSAEnumNameSpaceProvidersExW
#define LPFN_WSCENUMNAMESPACEPROVIDERSEX LPFN_WSAENUMNAMESPACEPROVIDERSEXW

#if defined(_WIN64)
INT
WSAAPI
WSCEnumNameSpaceProvidersEx32(
    __inout LPDWORD     lpdwBufferLength,
    __out_bcount(*lpdwBufferLength) LPWSANAMESPACE_INFOEXW lpnspBuffer
    );
#endif //(_WIN64)
#endif //(_WIN32_WINNT >= 0x0600)

INT
WSPAPI
WSCInstallNameSpace (
    __in LPWSTR lpszIdentifier,
    __in LPWSTR lpszPathName,
    __in DWORD dwNameSpace,
    __in DWORD dwVersion,
    __in LPGUID lpProviderId
    );

typedef
INT
(WSPAPI * LPWSCINSTALLNAMESPACE)(
    __in LPWSTR lpszIdentifier,
    __in LPWSTR lpszPathName,
    __in DWORD dwNameSpace,
    __in DWORD dwVersion,
    __in LPGUID lpProviderId
    );

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))
INT
WSPAPI
WSCInstallNameSpace32 (
    __in LPWSTR lpszIdentifier,
    __in LPWSTR lpszPathName,
    __in DWORD dwNameSpace,
    __in DWORD dwVersion,
    __in LPGUID lpProviderId
    );
#endif //(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

INT
WSPAPI
WSCUnInstallNameSpace (
    __in LPGUID lpProviderId
    );

typedef
INT
(WSPAPI * LPWSCUNINSTALLNAMESPACE)(
    __in LPGUID lpProviderId
    );

#if (_WIN32_WINNT >= 0x0600 )
INT
WSPAPI
WSCInstallNameSpaceEx(
    __in LPWSTR lpszIdentifier,
    __in LPWSTR lpszPathName,
    __in DWORD dwNameSpace,
    __in DWORD dwVersion,
    __in LPGUID lpProviderId,
    __in LPBLOB lpProviderSpecific
    );
#endif //(defined(_WIN32_WINNT >= 0x0600)

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0600))
INT
WSPAPI
WSCInstallNameSpaceEx32(
    __in LPWSTR lpszIdentifier,
    __in LPWSTR lpszPathName,
    __in DWORD dwNameSpace,
    __in DWORD dwVersion,
    __in LPGUID lpProviderId,
    __in LPBLOB lpProviderSpecific
    );
#endif //(defined(_WIN64) && (_WIN32_WINNT >= 0x0600))

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))
INT
WSPAPI
WSCUnInstallNameSpace32 (
    __in LPGUID lpProviderId
    );
#endif //(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

INT
WSPAPI
WSCEnableNSProvider (
    __in LPGUID lpProviderId,
    __in BOOL fEnable
    );

typedef
INT
(WSPAPI * LPWSCENABLENSPROVIDER)(
    __in LPGUID lpProviderId,
    __in BOOL fEnable
    );

#if(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))
INT
WSPAPI
WSCEnableNSProvider32 (
    __in LPGUID lpProviderId,
    __in BOOL fEnable
    );
#endif //(defined(_WIN64) && (_WIN32_WINNT >= 0x0501))

#if (_WIN32_WINNT >= 0x0600)

#if defined(_WIN64)
int WSPAPI WSCInstallProviderAndChains64_32(
#else
int WSPAPI WSCInstallProviderAndChains(
#endif
    __in LPGUID lpProviderId,
    __in const LPWSTR lpszProviderDllPath,
#if defined(_WIN64)
    __in const LPWSTR lpszProviderDllPath32,
#endif
    __in const LPWSTR lpszLspName,
    __in DWORD dwServiceFlags,
    __inout_ecount(dwNumberOfEntries) LPWSAPROTOCOL_INFOW lpProtocolInfoList,
    __in DWORD dwNumberOfEntries,
    __out_opt LPDWORD lpdwCatalogEntryId,
    __out LPINT lpErrno);

#endif //(_WIN32_WINNT >= 0x0600)


/*
 * Pointers to the individual entries in the namespace proc table.
 */

typedef
INT
(WSAAPI * LPNSPCLEANUP)(
    __in LPGUID lpProviderId
    );

typedef
INT
(WSAAPI * LPNSPLOOKUPSERVICEBEGIN)(
    __in LPGUID lpProviderId,
    __in LPWSAQUERYSETW lpqsRestrictions,
    __in LPWSASERVICECLASSINFOW lpServiceClassInfo,
    __in DWORD dwControlFlags,
    __out LPHANDLE lphLookup
    );

typedef
INT
(WSAAPI * LPNSPLOOKUPSERVICENEXT)(
    __in HANDLE hLookup,
    __in DWORD dwControlFlags,
    __inout LPDWORD lpdwBufferLength,
    __out_bcount_part(*lpdwBufferLength, *lpdwBufferlength) LPWSAQUERYSETW lpqsResults
    );

#if(_WIN32_WINNT >= 0x0501)
typedef
INT
(WSAAPI * LPNSPIOCTL)(
    __in     HANDLE          hLookup,
    __in     DWORD           dwControlCode,
    __in_bcount(cbInBuffer) LPVOID          lpvInBuffer,
    __in     DWORD           cbInBuffer,
    __out_bcount_part(cbOutBuffer, *lpcbBytesreturned) LPVOID          lpvOutBuffer,
    __in     DWORD           cbOutBuffer,
    __out    LPDWORD         lpcbBytesReturned,
    __in_opt LPWSACOMPLETION lpCompletion,
    __in     LPWSATHREADID   lpThreadId
    );
#endif //(_WIN32_WINNT >= 0x0501)

typedef
INT
(WSAAPI * LPNSPLOOKUPSERVICEEND)(
    __in HANDLE hLookup
    );

typedef
INT
(WSAAPI * LPNSPSETSERVICE)(
    __in LPGUID lpProviderId,
    __in LPWSASERVICECLASSINFOW lpServiceClassInfo,
    __in LPWSAQUERYSETW lpqsRegInfo,
    __in WSAESETSERVICEOP essOperation,
    __in DWORD dwControlFlags
    );

typedef
INT
(WSAAPI * LPNSPINSTALLSERVICECLASS)(
    __in LPGUID lpProviderId,
    __in LPWSASERVICECLASSINFOW lpServiceClassInfo
    );

typedef
INT
(WSAAPI * LPNSPREMOVESERVICECLASS)(
    __in LPGUID lpProviderId,
    __in LPGUID lpServiceClassId
    );

typedef
INT
(WSAAPI * LPNSPGETSERVICECLASSINFO)(
    __in LPGUID lpProviderId,
    __in LPDWORD lpdwBufSize,
    __in LPWSASERVICECLASSINFOW lpServiceClassInfo
    );

/*
 * The name space service provider procedure table.
 */

typedef struct _NSP_ROUTINE {

    /* Structure version information: */
    DWORD           cbSize;
    DWORD           dwMajorVersion;
    DWORD           dwMinorVersion;

    /* Procedure-pointer table: */

    LPNSPCLEANUP             NSPCleanup;
    LPNSPLOOKUPSERVICEBEGIN  NSPLookupServiceBegin;
    LPNSPLOOKUPSERVICENEXT   NSPLookupServiceNext;
    LPNSPLOOKUPSERVICEEND    NSPLookupServiceEnd;
    LPNSPSETSERVICE          NSPSetService;
    LPNSPINSTALLSERVICECLASS NSPInstallServiceClass;
    LPNSPREMOVESERVICECLASS  NSPRemoveServiceClass;
    LPNSPGETSERVICECLASSINFO NSPGetServiceClassInfo;

#if(_WIN32_WINNT >= 0x0501)
    // These APIs were added later, so must appear here
    // to keep the pointers in the structure in order.
    // Namespaces unaware of these APIs will set cbSize
    // to match the size of FIELD_OFFSET(NSP_ROUTINE, NSPIoctl).
    LPNSPIOCTL               NSPIoctl;
#endif //(_WIN32_WINNT >= 0x0501)

} NSP_ROUTINE, FAR * LPNSP_ROUTINE;

/*
 * Startup procedures.
 */

__checkReturn
INT
WSAAPI
NSPStartup(
    __in LPGUID lpProviderId,
    __inout LPNSP_ROUTINE lpnspRoutines
    );

typedef
__checkReturn
INT
(WSAAPI * LPNSPSTARTUP)(
    __in LPGUID lpProviderId,
    __inout LPNSP_ROUTINE lpnspRoutines
    );

typedef
__checkReturn
INT
(WSAAPI * LPNSPV2STARTUP)(
    __in LPGUID lpProviderId,
    __deref_out LPVOID * ppvClientSessionArg
    );

typedef
INT
(WSAAPI * LPNSPV2CLEANUP)(
    __in LPGUID lpProviderId,
    __in LPVOID pvClientSessionArg
    );

typedef
INT
(WSAAPI * LPNSPV2LOOKUPSERVICEBEGIN)(
    __in LPGUID lpProviderId,
    __in LPWSAQUERYSET2W lpqsRestrictions,
    __in DWORD dwControlFlags,
    __in LPVOID lpvClientSessionArg,
    __out LPHANDLE lphLookup
    );

typedef
VOID
(WSAAPI * LPNSPV2LOOKUPSERVICENEXTEX)(
    __in HANDLE hAsyncCall,
    __in HANDLE hLookup,
    __in DWORD dwControlFlags,
    __in LPDWORD lpdwBufferLength,
    __out LPWSAQUERYSET2W lpqsResults
    );

typedef
INT
(WSAAPI * LPNSPV2LOOKUPSERVICEEND)(
    __in HANDLE hLookup
    );

typedef
VOID
(WSAAPI * LPNSPV2SETSERVICEEX)(
    __in HANDLE hAsyncCall,
    __in LPGUID lpProviderId,
    __in LPWSAQUERYSET2W lpqsRegInfo,
    __in WSAESETSERVICEOP essOperation,
    __in DWORD dwControlFlags,
    __in LPVOID lpvClientSessionArg 
    );

typedef
VOID
(WSAAPI * LPNSPV2CLIENTSESSIONRUNDOWN)(
    __in LPGUID lpProviderId,
    __in LPVOID pvClientSessionArg
    );

typedef struct _NSPV2_ROUTINE {  
    DWORD cbSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    LPNSPV2STARTUP NSPv2Startup;
    LPNSPV2CLEANUP NSPv2Cleanup;
    LPNSPV2LOOKUPSERVICEBEGIN NSPv2LookupServiceBegin;  
    LPNSPV2LOOKUPSERVICENEXTEX NSPv2LookupServiceNextEx;
    LPNSPV2LOOKUPSERVICEEND NSPv2LookupServiceEnd;  
    LPNSPV2SETSERVICEEX NSPv2SetServiceEx;
    LPNSPV2CLIENTSESSIONRUNDOWN NSPv2ClientSessionRundown;
} NSPV2_ROUTINE, *PNSPV2_ROUTINE, *LPNSPV2_ROUTINE;
typedef const NSPV2_ROUTINE * PCNSPV2_ROUTINE, * LPCNSPV2_ROUTINE;

#if(_WIN32_WINNT >= 0x0600)

INT WSAAPI WSAAdvertiseProvider(
        __in                const GUID *                    puuidProviderId,
        __in                const LPCNSPV2_ROUTINE          pNSPv2Routine);

INT WSAAPI WSAUnadvertiseProvider(
        __in                const GUID *                    puuidProviderId);

INT WSAAPI WSAProviderCompleteAsyncCall(
        __in                HANDLE                          hAsyncCall,
        __in                INT                             iRetCode);

#endif //(_WIN32_WINNT >= 0x0600)

#ifdef __cplusplus
}
#endif

#if !defined(_WIN64)
#include <poppack.h>
#endif

#endif  /* _WINSOCK2SPI_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdapi.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  Component: WSDAPI - Microsoft Web Services for Devices API
// 
//  File: wsdapi.h
//
//  Abstract: Top-level header file
//
//  Notes: If using winsock, winsock2.h should be included before this file
//
//--------------------------------------------------------------------------
#pragma once

#include <wsdbase.h>
#include <wsdattachment.h>
#include <wsdxml.h>
#include <wsddisco.h>
#include <wsdclient.h>
#include <wsdhost.h>
#include <wsdtypes.h>
#include <wsdutil.h>
#include <wsdns.h>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdattachment.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsdattachment.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsdattachment_h__
#define __wsdattachment_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDAttachment_FWD_DEFINED__
#define __IWSDAttachment_FWD_DEFINED__
typedef interface IWSDAttachment IWSDAttachment;
#endif 	/* __IWSDAttachment_FWD_DEFINED__ */


#ifndef __IWSDOutboundAttachment_FWD_DEFINED__
#define __IWSDOutboundAttachment_FWD_DEFINED__
typedef interface IWSDOutboundAttachment IWSDOutboundAttachment;
#endif 	/* __IWSDOutboundAttachment_FWD_DEFINED__ */


#ifndef __IWSDInboundAttachment_FWD_DEFINED__
#define __IWSDInboundAttachment_FWD_DEFINED__
typedef interface IWSDInboundAttachment IWSDInboundAttachment;
#endif 	/* __IWSDInboundAttachment_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsdattachment_0000_0000 */
/* [local] */ 




HRESULT WINAPI
WSDCreateOutboundAttachment(
    __deref_out IWSDOutboundAttachment** ppAttachment);


extern RPC_IF_HANDLE __MIDL_itf_wsdattachment_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdattachment_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDAttachment_INTERFACE_DEFINED__
#define __IWSDAttachment_INTERFACE_DEFINED__

/* interface IWSDAttachment */
/* [uuid][object] */ 


EXTERN_C const IID IID_IWSDAttachment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5d55a616-9df8-4b09-b156-9ba351a48b76")
    IWSDAttachment : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IWSDAttachmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWSDAttachment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWSDAttachment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWSDAttachment * This);
        
        END_INTERFACE
    } IWSDAttachmentVtbl;

    interface IWSDAttachment
    {
        CONST_VTBL struct IWSDAttachmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDAttachment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDAttachment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDAttachment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDAttachment_INTERFACE_DEFINED__ */


#ifndef __IWSDOutboundAttachment_INTERFACE_DEFINED__
#define __IWSDOutboundAttachment_INTERFACE_DEFINED__

/* interface IWSDOutboundAttachment */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDOutboundAttachment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa302f8d-5a22-4ba5-b392-aa8486f4c15d")
    IWSDOutboundAttachment : public IWSDAttachment
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [annotation][size_is][in] */ 
            __in_ecount(dwBytesToWrite)  const BYTE *pBuffer,
            /* [in] */ DWORD dwBytesToWrite,
            /* [annotation][out] */ 
            __out  LPDWORD pdwNumberOfBytesWritten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDOutboundAttachmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDOutboundAttachment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDOutboundAttachment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDOutboundAttachment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            IWSDOutboundAttachment * This,
            /* [annotation][size_is][in] */ 
            __in_ecount(dwBytesToWrite)  const BYTE *pBuffer,
            /* [in] */ DWORD dwBytesToWrite,
            /* [annotation][out] */ 
            __out  LPDWORD pdwNumberOfBytesWritten);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWSDOutboundAttachment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            IWSDOutboundAttachment * This);
        
        END_INTERFACE
    } IWSDOutboundAttachmentVtbl;

    interface IWSDOutboundAttachment
    {
        CONST_VTBL struct IWSDOutboundAttachmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDOutboundAttachment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDOutboundAttachment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDOutboundAttachment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 



#define IWSDOutboundAttachment_Write(This,pBuffer,dwBytesToWrite,pdwNumberOfBytesWritten)	\
    ( (This)->lpVtbl -> Write(This,pBuffer,dwBytesToWrite,pdwNumberOfBytesWritten) ) 

#define IWSDOutboundAttachment_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWSDOutboundAttachment_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDOutboundAttachment_INTERFACE_DEFINED__ */


#ifndef __IWSDInboundAttachment_INTERFACE_DEFINED__
#define __IWSDInboundAttachment_INTERFACE_DEFINED__

/* interface IWSDInboundAttachment */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDInboundAttachment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5bd6ca65-233c-4fb8-9f7a-2641619655c9")
    IWSDInboundAttachment : public IWSDAttachment
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [annotation][length_is][size_is][out] */ 
            __out_ecount_part(dwBytesToRead, *pdwNumberOfBytesRead)  BYTE *pBuffer,
            /* [in] */ DWORD dwBytesToRead,
            /* [out] */ LPDWORD pdwNumberOfBytesRead) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDInboundAttachmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDInboundAttachment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDInboundAttachment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDInboundAttachment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            IWSDInboundAttachment * This,
            /* [annotation][length_is][size_is][out] */ 
            __out_ecount_part(dwBytesToRead, *pdwNumberOfBytesRead)  BYTE *pBuffer,
            /* [in] */ DWORD dwBytesToRead,
            /* [out] */ LPDWORD pdwNumberOfBytesRead);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWSDInboundAttachment * This);
        
        END_INTERFACE
    } IWSDInboundAttachmentVtbl;

    interface IWSDInboundAttachment
    {
        CONST_VTBL struct IWSDInboundAttachmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDInboundAttachment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDInboundAttachment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDInboundAttachment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 



#define IWSDInboundAttachment_Read(This,pBuffer,dwBytesToRead,pdwNumberOfBytesRead)	\
    ( (This)->lpVtbl -> Read(This,pBuffer,dwBytesToRead,pdwNumberOfBytesRead) ) 

#define IWSDInboundAttachment_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDInboundAttachment_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsddisco.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsddisco.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsddisco_h__
#define __wsddisco_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDiscoveryProvider_FWD_DEFINED__
#define __IWSDiscoveryProvider_FWD_DEFINED__
typedef interface IWSDiscoveryProvider IWSDiscoveryProvider;
#endif 	/* __IWSDiscoveryProvider_FWD_DEFINED__ */


#ifndef __IWSDiscoveryProviderNotify_FWD_DEFINED__
#define __IWSDiscoveryProviderNotify_FWD_DEFINED__
typedef interface IWSDiscoveryProviderNotify IWSDiscoveryProviderNotify;
#endif 	/* __IWSDiscoveryProviderNotify_FWD_DEFINED__ */


#ifndef __IWSDiscoveredService_FWD_DEFINED__
#define __IWSDiscoveredService_FWD_DEFINED__
typedef interface IWSDiscoveredService IWSDiscoveredService;
#endif 	/* __IWSDiscoveredService_FWD_DEFINED__ */


#ifndef __IWSDiscoveryPublisher_FWD_DEFINED__
#define __IWSDiscoveryPublisher_FWD_DEFINED__
typedef interface IWSDiscoveryPublisher IWSDiscoveryPublisher;
#endif 	/* __IWSDiscoveryPublisher_FWD_DEFINED__ */


#ifndef __IWSDiscoveryPublisherNotify_FWD_DEFINED__
#define __IWSDiscoveryPublisherNotify_FWD_DEFINED__
typedef interface IWSDiscoveryPublisherNotify IWSDiscoveryPublisherNotify;
#endif 	/* __IWSDiscoveryPublisherNotify_FWD_DEFINED__ */


#ifndef __IWSDScopeMatchingRule_FWD_DEFINED__
#define __IWSDScopeMatchingRule_FWD_DEFINED__
typedef interface IWSDScopeMatchingRule IWSDScopeMatchingRule;
#endif 	/* __IWSDScopeMatchingRule_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "wsdxmldom.h"
#include "wsdtypes.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsddisco_0000_0000 */
/* [local] */ 








HRESULT WINAPI
WSDCreateDiscoveryProvider(
    IWSDXMLContext* pContext,
    __deref_out IWSDiscoveryProvider** ppProvider);
#if (WINVER >= _WIN32_WINNT_WIN7)
HRESULT WINAPI
WSDCreateDiscoveryProvider2(
    IWSDXMLContext* pContext,
    __in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,
    DWORD dwConfigParamCount,
    __deref_out IWSDiscoveryProvider** ppProvider);
#endif


extern RPC_IF_HANDLE __MIDL_itf_wsddisco_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsddisco_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDiscoveryProvider_INTERFACE_DEFINED__
#define __IWSDiscoveryProvider_INTERFACE_DEFINED__

/* interface IWSDiscoveryProvider */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDiscoveryProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8FFC8E55-F0EB-480F-88B7-B435DD281D45")
    IWSDiscoveryProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAddressFamily( 
            /* [in] */ DWORD dwAddressFamily) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ IWSDiscoveryProviderNotify *pSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SearchById( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SearchByAddress( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszAddress,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SearchByType( 
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszMatchBy,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetXMLContext( 
            /* [annotation][out] */ 
            __deref_out  IWSDXMLContext **ppContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDiscoveryProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDiscoveryProvider * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDiscoveryProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDiscoveryProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAddressFamily )( 
            IWSDiscoveryProvider * This,
            /* [in] */ DWORD dwAddressFamily);
        
        HRESULT ( STDMETHODCALLTYPE *Attach )( 
            IWSDiscoveryProvider * This,
            /* [in] */ IWSDiscoveryProviderNotify *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IWSDiscoveryProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *SearchById )( 
            IWSDiscoveryProvider * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag);
        
        HRESULT ( STDMETHODCALLTYPE *SearchByAddress )( 
            IWSDiscoveryProvider * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszAddress,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag);
        
        HRESULT ( STDMETHODCALLTYPE *SearchByType )( 
            IWSDiscoveryProvider * This,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszMatchBy,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag);
        
        HRESULT ( STDMETHODCALLTYPE *GetXMLContext )( 
            IWSDiscoveryProvider * This,
            /* [annotation][out] */ 
            __deref_out  IWSDXMLContext **ppContext);
        
        END_INTERFACE
    } IWSDiscoveryProviderVtbl;

    interface IWSDiscoveryProvider
    {
        CONST_VTBL struct IWSDiscoveryProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDiscoveryProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDiscoveryProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDiscoveryProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDiscoveryProvider_SetAddressFamily(This,dwAddressFamily)	\
    ( (This)->lpVtbl -> SetAddressFamily(This,dwAddressFamily) ) 

#define IWSDiscoveryProvider_Attach(This,pSink)	\
    ( (This)->lpVtbl -> Attach(This,pSink) ) 

#define IWSDiscoveryProvider_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#define IWSDiscoveryProvider_SearchById(This,pszId,pszTag)	\
    ( (This)->lpVtbl -> SearchById(This,pszId,pszTag) ) 

#define IWSDiscoveryProvider_SearchByAddress(This,pszAddress,pszTag)	\
    ( (This)->lpVtbl -> SearchByAddress(This,pszAddress,pszTag) ) 

#define IWSDiscoveryProvider_SearchByType(This,pTypesList,pScopesList,pszMatchBy,pszTag)	\
    ( (This)->lpVtbl -> SearchByType(This,pTypesList,pScopesList,pszMatchBy,pszTag) ) 

#define IWSDiscoveryProvider_GetXMLContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetXMLContext(This,ppContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDiscoveryProvider_INTERFACE_DEFINED__ */


#ifndef __IWSDiscoveryProviderNotify_INTERFACE_DEFINED__
#define __IWSDiscoveryProviderNotify_INTERFACE_DEFINED__

/* interface IWSDiscoveryProviderNotify */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDiscoveryProviderNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("73ee3ced-b6e6-4329-a546-3e8ad46563d2")
    IWSDiscoveryProviderNotify : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IWSDiscoveredService *pService) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ IWSDiscoveredService *pService) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SearchFailed( 
            /* [in] */ HRESULT hr,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SearchComplete( 
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDiscoveryProviderNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDiscoveryProviderNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDiscoveryProviderNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDiscoveryProviderNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IWSDiscoveryProviderNotify * This,
            /* [in] */ IWSDiscoveredService *pService);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWSDiscoveryProviderNotify * This,
            /* [in] */ IWSDiscoveredService *pService);
        
        HRESULT ( STDMETHODCALLTYPE *SearchFailed )( 
            IWSDiscoveryProviderNotify * This,
            /* [in] */ HRESULT hr,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag);
        
        HRESULT ( STDMETHODCALLTYPE *SearchComplete )( 
            IWSDiscoveryProviderNotify * This,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszTag);
        
        END_INTERFACE
    } IWSDiscoveryProviderNotifyVtbl;

    interface IWSDiscoveryProviderNotify
    {
        CONST_VTBL struct IWSDiscoveryProviderNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDiscoveryProviderNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDiscoveryProviderNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDiscoveryProviderNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDiscoveryProviderNotify_Add(This,pService)	\
    ( (This)->lpVtbl -> Add(This,pService) ) 

#define IWSDiscoveryProviderNotify_Remove(This,pService)	\
    ( (This)->lpVtbl -> Remove(This,pService) ) 

#define IWSDiscoveryProviderNotify_SearchFailed(This,hr,pszTag)	\
    ( (This)->lpVtbl -> SearchFailed(This,hr,pszTag) ) 

#define IWSDiscoveryProviderNotify_SearchComplete(This,pszTag)	\
    ( (This)->lpVtbl -> SearchComplete(This,pszTag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDiscoveryProviderNotify_INTERFACE_DEFINED__ */


#ifndef __IWSDiscoveredService_INTERFACE_DEFINED__
#define __IWSDiscoveredService_INTERFACE_DEFINED__

/* interface IWSDiscoveredService */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDiscoveredService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4BAD8A3B-B374-4420-9632-AAC945B374AA")
    IWSDiscoveredService : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEndpointReference( 
            /* [annotation][out] */ 
            __deref_out  WSD_ENDPOINT_REFERENCE **ppEndpointReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypes( 
            /* [annotation][out] */ 
            __deref_out  WSD_NAME_LIST **ppTypesList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScopes( 
            /* [annotation][out] */ 
            __deref_out  WSD_URI_LIST **ppScopesList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetXAddrs( 
            /* [annotation][out] */ 
            __deref_out  WSD_URI_LIST **ppXAddrsList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMetadataVersion( 
            /* [annotation][out] */ 
            __out  ULONGLONG *pullMetadataVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedDiscoXML( 
            /* [annotation][out] */ 
            __deref_out  WSDXML_ELEMENT **ppHeaderAny,
            /* [annotation][out] */ 
            __deref_out  WSDXML_ELEMENT **ppBodyAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProbeResolveTag( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszTag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRemoteTransportAddress( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszRemoteTransportAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLocalTransportAddress( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszLocalTransportAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLocalInterfaceGUID( 
            /* [annotation][out] */ 
            __out  GUID *pGuid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInstanceId( 
            /* [annotation][out] */ 
            __out  ULONGLONG *pullInstanceId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDiscoveredServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDiscoveredService * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDiscoveredService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDiscoveredService * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEndpointReference )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  WSD_ENDPOINT_REFERENCE **ppEndpointReference);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypes )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  WSD_NAME_LIST **ppTypesList);
        
        HRESULT ( STDMETHODCALLTYPE *GetScopes )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  WSD_URI_LIST **ppScopesList);
        
        HRESULT ( STDMETHODCALLTYPE *GetXAddrs )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  WSD_URI_LIST **ppXAddrsList);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadataVersion )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __out  ULONGLONG *pullMetadataVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedDiscoXML )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  WSDXML_ELEMENT **ppHeaderAny,
            /* [annotation][out] */ 
            __deref_out  WSDXML_ELEMENT **ppBodyAny);
        
        HRESULT ( STDMETHODCALLTYPE *GetProbeResolveTag )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszTag);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteTransportAddress )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszRemoteTransportAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalTransportAddress )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszLocalTransportAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalInterfaceGUID )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __out  GUID *pGuid);
        
        HRESULT ( STDMETHODCALLTYPE *GetInstanceId )( 
            IWSDiscoveredService * This,
            /* [annotation][out] */ 
            __out  ULONGLONG *pullInstanceId);
        
        END_INTERFACE
    } IWSDiscoveredServiceVtbl;

    interface IWSDiscoveredService
    {
        CONST_VTBL struct IWSDiscoveredServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDiscoveredService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDiscoveredService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDiscoveredService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDiscoveredService_GetEndpointReference(This,ppEndpointReference)	\
    ( (This)->lpVtbl -> GetEndpointReference(This,ppEndpointReference) ) 

#define IWSDiscoveredService_GetTypes(This,ppTypesList)	\
    ( (This)->lpVtbl -> GetTypes(This,ppTypesList) ) 

#define IWSDiscoveredService_GetScopes(This,ppScopesList)	\
    ( (This)->lpVtbl -> GetScopes(This,ppScopesList) ) 

#define IWSDiscoveredService_GetXAddrs(This,ppXAddrsList)	\
    ( (This)->lpVtbl -> GetXAddrs(This,ppXAddrsList) ) 

#define IWSDiscoveredService_GetMetadataVersion(This,pullMetadataVersion)	\
    ( (This)->lpVtbl -> GetMetadataVersion(This,pullMetadataVersion) ) 

#define IWSDiscoveredService_GetExtendedDiscoXML(This,ppHeaderAny,ppBodyAny)	\
    ( (This)->lpVtbl -> GetExtendedDiscoXML(This,ppHeaderAny,ppBodyAny) ) 

#define IWSDiscoveredService_GetProbeResolveTag(This,ppszTag)	\
    ( (This)->lpVtbl -> GetProbeResolveTag(This,ppszTag) ) 

#define IWSDiscoveredService_GetRemoteTransportAddress(This,ppszRemoteTransportAddress)	\
    ( (This)->lpVtbl -> GetRemoteTransportAddress(This,ppszRemoteTransportAddress) ) 

#define IWSDiscoveredService_GetLocalTransportAddress(This,ppszLocalTransportAddress)	\
    ( (This)->lpVtbl -> GetLocalTransportAddress(This,ppszLocalTransportAddress) ) 

#define IWSDiscoveredService_GetLocalInterfaceGUID(This,pGuid)	\
    ( (This)->lpVtbl -> GetLocalInterfaceGUID(This,pGuid) ) 

#define IWSDiscoveredService_GetInstanceId(This,pullInstanceId)	\
    ( (This)->lpVtbl -> GetInstanceId(This,pullInstanceId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDiscoveredService_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsddisco_0000_0003 */
/* [local] */ 

HRESULT WINAPI
WSDCreateDiscoveryPublisher(
    IWSDXMLContext* pContext,
    __deref_out IWSDiscoveryPublisher** ppPublisher);
#if (WINVER >= _WIN32_WINNT_WIN7)
HRESULT WINAPI
WSDCreateDiscoveryPublisher2(
    IWSDXMLContext* pContext,
    __in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,
    DWORD dwConfigParamCount,
    __deref_out IWSDiscoveryPublisher** ppPublisher);
#endif


extern RPC_IF_HANDLE __MIDL_itf_wsddisco_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsddisco_0000_0003_v0_0_s_ifspec;

#ifndef __IWSDiscoveryPublisher_INTERFACE_DEFINED__
#define __IWSDiscoveryPublisher_INTERFACE_DEFINED__

/* interface IWSDiscoveryPublisher */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDiscoveryPublisher;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AE01E1A8-3FF9-4148-8116-057CC616FE13")
    IWSDiscoveryPublisher : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAddressFamily( 
            /* [in] */ DWORD dwAddressFamily) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterNotificationSink( 
            /* [in] */ IWSDiscoveryPublisherNotify *pSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnRegisterNotificationSink( 
            /* [in] */ IWSDiscoveryPublisherNotify *pSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Publish( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnPublish( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MatchProbe( 
            /* [in] */ const WSD_SOAP_MESSAGE *pProbeMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MatchResolve( 
            /* [in] */ const WSD_SOAP_MESSAGE *pResolveMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PublishEx( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MatchProbeEx( 
            /* [in] */ const WSD_SOAP_MESSAGE *pProbeMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MatchResolveEx( 
            /* [in] */ const WSD_SOAP_MESSAGE *pResolveMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterScopeMatchingRule( 
            /* [in] */ IWSDScopeMatchingRule *pScopeMatchingRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnRegisterScopeMatchingRule( 
            /* [in] */ IWSDScopeMatchingRule *pScopeMatchingRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetXMLContext( 
            /* [annotation][out] */ 
            __deref_out  IWSDXMLContext **ppContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDiscoveryPublisherVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDiscoveryPublisher * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDiscoveryPublisher * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAddressFamily )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ DWORD dwAddressFamily);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterNotificationSink )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ IWSDiscoveryPublisherNotify *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *UnRegisterNotificationSink )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ IWSDiscoveryPublisherNotify *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *Publish )( 
            IWSDiscoveryPublisher * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList);
        
        HRESULT ( STDMETHODCALLTYPE *UnPublish )( 
            IWSDiscoveryPublisher * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny);
        
        HRESULT ( STDMETHODCALLTYPE *MatchProbe )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pProbeMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList);
        
        HRESULT ( STDMETHODCALLTYPE *MatchResolve )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pResolveMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList);
        
        HRESULT ( STDMETHODCALLTYPE *PublishEx )( 
            IWSDiscoveryPublisher * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny);
        
        HRESULT ( STDMETHODCALLTYPE *MatchProbeEx )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pProbeMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny);
        
        HRESULT ( STDMETHODCALLTYPE *MatchResolveEx )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pResolveMessage,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [annotation][in] */ 
            __in  LPCWSTR pszId,
            /* [in] */ ULONGLONG ullMetadataVersion,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ ULONGLONG ullMessageNumber,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszSessionId,
            /* [optional][in] */ const WSD_NAME_LIST *pTypesList,
            /* [optional][in] */ const WSD_URI_LIST *pScopesList,
            /* [optional][in] */ const WSD_URI_LIST *pXAddrsList,
            /* [optional][in] */ const WSDXML_ELEMENT *pHeaderAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pReferenceParameterAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pPolicyAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pEndpointReferenceAny,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterScopeMatchingRule )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ IWSDScopeMatchingRule *pScopeMatchingRule);
        
        HRESULT ( STDMETHODCALLTYPE *UnRegisterScopeMatchingRule )( 
            IWSDiscoveryPublisher * This,
            /* [in] */ IWSDScopeMatchingRule *pScopeMatchingRule);
        
        HRESULT ( STDMETHODCALLTYPE *GetXMLContext )( 
            IWSDiscoveryPublisher * This,
            /* [annotation][out] */ 
            __deref_out  IWSDXMLContext **ppContext);
        
        END_INTERFACE
    } IWSDiscoveryPublisherVtbl;

    interface IWSDiscoveryPublisher
    {
        CONST_VTBL struct IWSDiscoveryPublisherVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDiscoveryPublisher_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDiscoveryPublisher_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDiscoveryPublisher_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDiscoveryPublisher_SetAddressFamily(This,dwAddressFamily)	\
    ( (This)->lpVtbl -> SetAddressFamily(This,dwAddressFamily) ) 

#define IWSDiscoveryPublisher_RegisterNotificationSink(This,pSink)	\
    ( (This)->lpVtbl -> RegisterNotificationSink(This,pSink) ) 

#define IWSDiscoveryPublisher_UnRegisterNotificationSink(This,pSink)	\
    ( (This)->lpVtbl -> UnRegisterNotificationSink(This,pSink) ) 

#define IWSDiscoveryPublisher_Publish(This,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList)	\
    ( (This)->lpVtbl -> Publish(This,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList) ) 

#define IWSDiscoveryPublisher_UnPublish(This,pszId,ullInstanceId,ullMessageNumber,pszSessionId,pAny)	\
    ( (This)->lpVtbl -> UnPublish(This,pszId,ullInstanceId,ullMessageNumber,pszSessionId,pAny) ) 

#define IWSDiscoveryPublisher_MatchProbe(This,pProbeMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList)	\
    ( (This)->lpVtbl -> MatchProbe(This,pProbeMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList) ) 

#define IWSDiscoveryPublisher_MatchResolve(This,pResolveMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList)	\
    ( (This)->lpVtbl -> MatchResolve(This,pResolveMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList) ) 

#define IWSDiscoveryPublisher_PublishEx(This,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny)	\
    ( (This)->lpVtbl -> PublishEx(This,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny) ) 

#define IWSDiscoveryPublisher_MatchProbeEx(This,pProbeMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny)	\
    ( (This)->lpVtbl -> MatchProbeEx(This,pProbeMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny) ) 

#define IWSDiscoveryPublisher_MatchResolveEx(This,pResolveMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny)	\
    ( (This)->lpVtbl -> MatchResolveEx(This,pResolveMessage,pMessageParameters,pszId,ullMetadataVersion,ullInstanceId,ullMessageNumber,pszSessionId,pTypesList,pScopesList,pXAddrsList,pHeaderAny,pReferenceParameterAny,pPolicyAny,pEndpointReferenceAny,pAny) ) 

#define IWSDiscoveryPublisher_RegisterScopeMatchingRule(This,pScopeMatchingRule)	\
    ( (This)->lpVtbl -> RegisterScopeMatchingRule(This,pScopeMatchingRule) ) 

#define IWSDiscoveryPublisher_UnRegisterScopeMatchingRule(This,pScopeMatchingRule)	\
    ( (This)->lpVtbl -> UnRegisterScopeMatchingRule(This,pScopeMatchingRule) ) 

#define IWSDiscoveryPublisher_GetXMLContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetXMLContext(This,ppContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDiscoveryPublisher_INTERFACE_DEFINED__ */


#ifndef __IWSDiscoveryPublisherNotify_INTERFACE_DEFINED__
#define __IWSDiscoveryPublisherNotify_INTERFACE_DEFINED__

/* interface IWSDiscoveryPublisherNotify */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDiscoveryPublisherNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e67651b0-337a-4b3c-9758-733388568251")
    IWSDiscoveryPublisherNotify : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProbeHandler( 
            /* [in] */ const WSD_SOAP_MESSAGE *pSoap,
            /* [in] */ IWSDMessageParameters *pMessageParameters) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResolveHandler( 
            /* [in] */ const WSD_SOAP_MESSAGE *pSoap,
            /* [in] */ IWSDMessageParameters *pMessageParameters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDiscoveryPublisherNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDiscoveryPublisherNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDiscoveryPublisherNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDiscoveryPublisherNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProbeHandler )( 
            IWSDiscoveryPublisherNotify * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pSoap,
            /* [in] */ IWSDMessageParameters *pMessageParameters);
        
        HRESULT ( STDMETHODCALLTYPE *ResolveHandler )( 
            IWSDiscoveryPublisherNotify * This,
            /* [in] */ const WSD_SOAP_MESSAGE *pSoap,
            /* [in] */ IWSDMessageParameters *pMessageParameters);
        
        END_INTERFACE
    } IWSDiscoveryPublisherNotifyVtbl;

    interface IWSDiscoveryPublisherNotify
    {
        CONST_VTBL struct IWSDiscoveryPublisherNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDiscoveryPublisherNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDiscoveryPublisherNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDiscoveryPublisherNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDiscoveryPublisherNotify_ProbeHandler(This,pSoap,pMessageParameters)	\
    ( (This)->lpVtbl -> ProbeHandler(This,pSoap,pMessageParameters) ) 

#define IWSDiscoveryPublisherNotify_ResolveHandler(This,pSoap,pMessageParameters)	\
    ( (This)->lpVtbl -> ResolveHandler(This,pSoap,pMessageParameters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDiscoveryPublisherNotify_INTERFACE_DEFINED__ */


#ifndef __IWSDScopeMatchingRule_INTERFACE_DEFINED__
#define __IWSDScopeMatchingRule_INTERFACE_DEFINED__

/* interface IWSDScopeMatchingRule */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDScopeMatchingRule;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fcafe424-fef5-481a-bd9f-33ce0574256f")
    IWSDScopeMatchingRule : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetScopeRule( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszScopeMatchingRule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MatchScopes( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszScope1,
            /* [annotation][in] */ 
            __in  LPCWSTR pszScope2,
            /* [annotation][out] */ 
            __out  BOOL *pfMatch) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDScopeMatchingRuleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDScopeMatchingRule * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDScopeMatchingRule * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDScopeMatchingRule * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetScopeRule )( 
            IWSDScopeMatchingRule * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszScopeMatchingRule);
        
        HRESULT ( STDMETHODCALLTYPE *MatchScopes )( 
            IWSDScopeMatchingRule * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszScope1,
            /* [annotation][in] */ 
            __in  LPCWSTR pszScope2,
            /* [annotation][out] */ 
            __out  BOOL *pfMatch);
        
        END_INTERFACE
    } IWSDScopeMatchingRuleVtbl;

    interface IWSDScopeMatchingRule
    {
        CONST_VTBL struct IWSDScopeMatchingRuleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDScopeMatchingRule_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDScopeMatchingRule_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDScopeMatchingRule_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDScopeMatchingRule_GetScopeRule(This,ppszScopeMatchingRule)	\
    ( (This)->lpVtbl -> GetScopeRule(This,ppszScopeMatchingRule) ) 

#define IWSDScopeMatchingRule_MatchScopes(This,pszScope1,pszScope2,pfMatch)	\
    ( (This)->lpVtbl -> MatchScopes(This,pszScope1,pszScope2,pfMatch) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDScopeMatchingRule_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdns.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  Component: WSDAPI - Microsoft Web Services for Devices API
// 
//  File: wsdns.h
//
//  Abstract: WSDAPI Namespace Definitions
//
//  THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT MODIFY IT BY HAND.
//
//--------------------------------------------------------------------------
#pragma once

    
// 
// Namespace http://schemas.xmlsoap.org/ws/2004/08/eventing
// 
#define NAMESPACE_ENCODING_EVENTING WSDXML_NAMESPACE_ENCODING(0,0)
extern WSDXML_NAME Names_Eventing[];
extern WSDXML_NAMESPACE Namespace_Eventing;


#define WSE_Identifier                         WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_EVENTING)
#define WSE_DeliveryModeRequestedUnavailable   WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_EVENTING)
#define WSE_InvalidExpirationTime              WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_EVENTING)
#define WSE_UnsupportedExpirationTime          WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_EVENTING)
#define WSE_FilteringNotSupported              WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_EVENTING)
#define WSE_FilteringRequestedUnavailable      WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_EVENTING)
#define WSE_EventSourceUnableToProcess         WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_EVENTING)
#define WSE_UnableToRenew                      WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_EVENTING)
#define WSE_InvalidMessage                     WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_EVENTING)
#define WSE_SupportedDialect                   WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_EVENTING)
#define WSE_SupportedDeliveryMode              WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_EVENTING)
#define WSE_Eventing                           WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_EVENTING)
#define WSE_Subscribe                          WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_EVENTING)
#define WSE_SubscribeResponse                  WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_EVENTING)
#define WSE_ReturnValue                        WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_EVENTING)
#define WSE_EndTo                              WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_EVENTING)
#define WSE_Mode                               WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_EVENTING)
#define WSE_Push                               WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_EVENTING)
#define WSE_NotifyTo                           WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_EVENTING)
#define WSE_Data                               WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_EVENTING)
#define WSE_Delivery                           WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_EVENTING)
#define WSE_Duration                           WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_EVENTING)
#define WSE_DateTime                           WSDXML_NAME_ENCODING(22,NAMESPACE_ENCODING_EVENTING)
#define WSE_Expires                            WSDXML_NAME_ENCODING(23,NAMESPACE_ENCODING_EVENTING)
#define WSE_Dialect                            WSDXML_NAME_ENCODING(24,NAMESPACE_ENCODING_EVENTING)
#define WSE_FilterAction                       WSDXML_NAME_ENCODING(25,NAMESPACE_ENCODING_EVENTING)
#define WSE_Filter                             WSDXML_NAME_ENCODING(26,NAMESPACE_ENCODING_EVENTING)
#define WSE_Any                                WSDXML_NAME_ENCODING(27,NAMESPACE_ENCODING_EVENTING)
#define WSE_SubscriptionManager                WSDXML_NAME_ENCODING(28,NAMESPACE_ENCODING_EVENTING)
#define WSE_Any_1                              WSDXML_NAME_ENCODING(29,NAMESPACE_ENCODING_EVENTING)
#define WSE_Renew                              WSDXML_NAME_ENCODING(30,NAMESPACE_ENCODING_EVENTING)
#define WSE_RenewResponse                      WSDXML_NAME_ENCODING(31,NAMESPACE_ENCODING_EVENTING)
#define WSE_GetStatus                          WSDXML_NAME_ENCODING(32,NAMESPACE_ENCODING_EVENTING)
#define WSE_GetStatusResponse                  WSDXML_NAME_ENCODING(33,NAMESPACE_ENCODING_EVENTING)
#define WSE_Unsubscribe                        WSDXML_NAME_ENCODING(34,NAMESPACE_ENCODING_EVENTING)
#define WSE_UnsubscribeResponse                WSDXML_NAME_ENCODING(35,NAMESPACE_ENCODING_EVENTING)
#define WSE_EventSink                          WSDXML_NAME_ENCODING(36,NAMESPACE_ENCODING_EVENTING)
#define WSE_SubscriptionEnd                    WSDXML_NAME_ENCODING(37,NAMESPACE_ENCODING_EVENTING)
#define WSE_Status                             WSDXML_NAME_ENCODING(38,NAMESPACE_ENCODING_EVENTING)
#define WSE_String                             WSDXML_NAME_ENCODING(39,NAMESPACE_ENCODING_EVENTING)
#define WSE_Reason                             WSDXML_NAME_ENCODING(40,NAMESPACE_ENCODING_EVENTING)

// 
// Namespace http://schemas.xmlsoap.org/ws/2004/08/addressing
// 
#define NAMESPACE_ENCODING_ADDRESSING WSDXML_NAMESPACE_ENCODING(1,0)
extern WSDXML_NAME Names_Addressing[];
extern WSDXML_NAMESPACE Namespace_Addressing;


#define WSA_EndpointReference                  WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_Address                            WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ReferenceParameters                WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_PortType                           WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ServiceName                        WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_PortName                           WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_MessageID                          WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_RelatesTo                          WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_RelationshipType                   WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_Reply                              WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ReplyTo                            WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_From                               WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_FaultTo                            WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_To                                 WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_Action                             WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_Recipient                          WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_InvalidMessageInformationHeader    WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_MessageInformationHeaderRequired   WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_DestinationUnreachable             WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ActionNotSupported                 WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_EndpointUnavailable                WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ReferenceProperties                WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_Element                            WSDXML_NAME_ENCODING(22,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_RetryAfter                         WSDXML_NAME_ENCODING(23,NAMESPACE_ENCODING_ADDRESSING)
#define WSA_ReplyAfter                         WSDXML_NAME_ENCODING(24,NAMESPACE_ENCODING_ADDRESSING)

// 
// Namespace http://schemas.xmlsoap.org/ws/2005/04/discovery
// 
#define NAMESPACE_ENCODING_DISCOVERY WSDXML_NAMESPACE_ENCODING(2,0)
extern WSDXML_NAME Names_Discovery[];
extern WSDXML_NAMESPACE Namespace_Discovery;


#define WSDISCO_Hello             WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Bye               WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Probe             WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_ProbeMatches      WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_ProbeMatch        WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Resolve           WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_ResolveMatch      WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Types             WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Scopes            WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_MetadataVersion   WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Transport         WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_AppSequence       WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_InstanceId        WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_SequenceId        WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_MessageNumber     WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_MatchBy           WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_XAddrs            WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_DiscoveryProxy    WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_TargetService     WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Element           WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_ResolveMatches    WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Id                WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Security          WSDXML_NAME_ENCODING(22,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Sig               WSDXML_NAME_ENCODING(23,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Scheme            WSDXML_NAME_ENCODING(24,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_KeyId             WSDXML_NAME_ENCODING(25,NAMESPACE_ENCODING_DISCOVERY)
#define WSDISCO_Refs              WSDXML_NAME_ENCODING(26,NAMESPACE_ENCODING_DISCOVERY)

// 
// Namespace http://www.w3.org/2004/08/xop/include
// 
#define NAMESPACE_ENCODING_INCLUDE WSDXML_NAMESPACE_ENCODING(3,0)
extern WSDXML_NAME Names_Include[];
extern WSDXML_NAMESPACE Namespace_Include;


#define XOP_Include   WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_INCLUDE)
#define XOP_Href      WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_INCLUDE)

// 
// Namespace http://www.w3.org/XML/1998/namespace
// 
#define NAMESPACE_ENCODING_XML WSDXML_NAMESPACE_ENCODING(4,0)
extern WSDXML_NAME Names_XML[];
extern WSDXML_NAMESPACE Namespace_XML;


#define XML_Lang    WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_XML)
#define XML_Space   WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_XML)

// 
// Namespace http://schemas.xmlsoap.org/ws/2006/02/devprof
// 
#define NAMESPACE_ENCODING_DEVPROF WSDXML_NAMESPACE_ENCODING(5,0)
extern WSDXML_NAME Names_Devprof[];
extern WSDXML_NAMESPACE Namespace_Devprof;


#define WSD_Device                     WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_DEVPROF)
#define WSD_FilterActionNotSupported   WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Actions                    WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Element                    WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ThisModel                  WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Manufacturer               WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ManufacturerUrl            WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ModelName                  WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ModelNumber                WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ModelUrl                   WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_DEVPROF)
#define WSD_PresentationUrl            WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ThisDevice                 WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_DEVPROF)
#define WSD_FriendlyName               WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_DEVPROF)
#define WSD_FirmwareVersion            WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_DEVPROF)
#define WSD_SerialNumber               WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Types                      WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_DEVPROF)
#define WSD_ServiceId                  WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Host                       WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Hosted                     WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Relationship               WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Type                       WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_DEVPROF)
#define WSD_Data                       WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_DEVPROF)

// 
// Namespace http://schemas.xmlsoap.org/ws/2004/09/mex
// 
#define NAMESPACE_ENCODING_MEX WSDXML_NAMESPACE_ENCODING(6,0)
extern WSDXML_NAME Names_Mex[];
extern WSDXML_NAMESPACE Namespace_Mex;


#define WSX_Mex                   WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_MEX)
#define WSX_GetMetadata           WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_MEX)
#define WSX_GetMetadataResponse   WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_MEX)
#define WSX_ReturnValue           WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_MEX)
#define WSX_MetadataSection       WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_MEX)
#define WSX_Dialect               WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_MEX)
#define WSX_Identifier            WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_MEX)
#define WSX_Data                  WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_MEX)
#define WSX_MetadataReference     WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_MEX)
#define WSX_Location              WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_MEX)
#define WSX_Element               WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_MEX)
#define WSX_Metadata              WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_MEX)

// 
// Namespace http://www.w3.org/2003/05/soap-envelope
// 
#define NAMESPACE_ENCODING_ENVELOPE WSDXML_NAMESPACE_ENCODING(7,0)
extern WSDXML_NAME Names_Envelope[];
extern WSDXML_NAMESPACE Namespace_Envelope;


#define SOAP_Envelope              WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Header                WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Body                  WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_MustUnderstand        WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Role                  WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Actor                 WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Fault                 WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Code                  WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Subcode               WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Value                 WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Reason                WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Text                  WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Node                  WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Role_1                WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Detail                WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Upgrade               WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_SupportedEnvelope     WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_NotUnderstood         WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_VersionMismatch       WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_MustUnderstand_1      WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_DataEncodingUnknown   WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Sender                WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Receiver              WSDXML_NAME_ENCODING(22,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Element               WSDXML_NAME_ENCODING(23,NAMESPACE_ENCODING_ENVELOPE)
#define SOAP_Relay                 WSDXML_NAME_ENCODING(24,NAMESPACE_ENCODING_ENVELOPE)

// 
// Namespace http://docs.oasis-open.org/ws-dd/ns/discovery/2008/09
// 
#define NAMESPACE_ENCODING_DISCOVERY11 WSDXML_NAMESPACE_ENCODING(8,0)
extern WSDXML_NAME Names_Discovery11[];
extern WSDXML_NAMESPACE Namespace_Discovery11;


#define DPP_Hello             WSDXML_NAME_ENCODING(0,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Bye               WSDXML_NAME_ENCODING(1,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Probe             WSDXML_NAME_ENCODING(2,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_ProbeMatches      WSDXML_NAME_ENCODING(3,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_ProbeMatch        WSDXML_NAME_ENCODING(4,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Resolve           WSDXML_NAME_ENCODING(5,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_ResolveMatch      WSDXML_NAME_ENCODING(6,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Types             WSDXML_NAME_ENCODING(7,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Scopes            WSDXML_NAME_ENCODING(8,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_MetadataVersion   WSDXML_NAME_ENCODING(9,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Transport         WSDXML_NAME_ENCODING(10,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_AppSequence       WSDXML_NAME_ENCODING(11,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_InstanceId        WSDXML_NAME_ENCODING(12,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_SequenceId        WSDXML_NAME_ENCODING(13,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_MessageNumber     WSDXML_NAME_ENCODING(14,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_MatchBy           WSDXML_NAME_ENCODING(15,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_XAddrs            WSDXML_NAME_ENCODING(16,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_DiscoveryProxy    WSDXML_NAME_ENCODING(17,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_TargetService     WSDXML_NAME_ENCODING(18,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Element           WSDXML_NAME_ENCODING(19,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_ResolveMatches    WSDXML_NAME_ENCODING(20,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Id                WSDXML_NAME_ENCODING(21,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Security          WSDXML_NAME_ENCODING(22,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Sig               WSDXML_NAME_ENCODING(23,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Scheme            WSDXML_NAME_ENCODING(24,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_KeyId             WSDXML_NAME_ENCODING(25,NAMESPACE_ENCODING_DISCOVERY11)
#define DPP_Refs              WSDXML_NAME_ENCODING(26,NAMESPACE_ENCODING_DISCOVERY11)

extern WSDXML_NAMESPACE* WSDNamespaces[9];
#define WSDRegisterNamespaces(pContext) pContext->SetNamespaces(WSDNamespaces,(sizeof(WSDNamespaces) / sizeof(WSDNamespaces[0])),0)

// 
// Port type http://schemas.xmlsoap.org/ws/2004/09/mex/mex
// 
extern WSD_OPERATION Operations_mex[1];
extern WSD_PORT_TYPE PortType_mex;

// 
// Port type http://schemas.xmlsoap.org/ws/2004/08/eventing/Eventing
// 
extern WSD_OPERATION Operations_Eventing[4];
extern WSD_PORT_TYPE PortType_Eventing;

// 
// Port type http://schemas.xmlsoap.org/ws/2004/08/eventing/EventSink
// 
extern WSD_OPERATION Operations_EventSink[1];
extern WSD_PORT_TYPE PortType_EventSink;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdhost.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsdhost.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsdhost_h__
#define __wsdhost_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDDeviceHost_FWD_DEFINED__
#define __IWSDDeviceHost_FWD_DEFINED__
typedef interface IWSDDeviceHost IWSDDeviceHost;
#endif 	/* __IWSDDeviceHost_FWD_DEFINED__ */


#ifndef __IWSDDeviceHostNotify_FWD_DEFINED__
#define __IWSDDeviceHostNotify_FWD_DEFINED__
typedef interface IWSDDeviceHostNotify IWSDDeviceHostNotify;
#endif 	/* __IWSDDeviceHostNotify_FWD_DEFINED__ */


#ifndef __IWSDServiceMessaging_FWD_DEFINED__
#define __IWSDServiceMessaging_FWD_DEFINED__
typedef interface IWSDServiceMessaging IWSDServiceMessaging;
#endif 	/* __IWSDServiceMessaging_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wsdxmldom.h"
#include "wsdtypes.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsdhost_0000_0000 */
/* [local] */ 






HRESULT WINAPI
WSDCreateDeviceHost(
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __deref_out IWSDDeviceHost** ppDeviceHost);
HRESULT WINAPI
WSDCreateDeviceHostAdvanced(
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __in_ecount_opt(dwHostAddressCount) IWSDAddress** ppHostAddresses,
    DWORD dwHostAddressCount,
    __deref_out IWSDDeviceHost** ppDeviceHost);
#if (WINVER >= _WIN32_WINNT_WIN7)
HRESULT WINAPI
WSDCreateDeviceHost2(
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,
    DWORD dwConfigParamCount,
    __deref_out IWSDDeviceHost** ppDeviceHost);
#endif


extern RPC_IF_HANDLE __MIDL_itf_wsdhost_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdhost_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDDeviceHost_INTERFACE_DEFINED__
#define __IWSDDeviceHost_INTERFACE_DEFINED__

/* interface IWSDDeviceHost */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDDeviceHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("917fe891-3d13-4138-9809-934c8abeb12c")
    IWSDDeviceHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszLocalId,
            /* [optional][in] */ IWSDXMLContext *pContext,
            /* [annotation][optional][in] */ 
            __in_ecount_opt(dwHostAddressCount)  IWSDAddress **ppHostAddresses,
            /* [optional][in] */ DWORD dwHostAddressCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ const WSD_URI_LIST *pScopeList,
            /* [optional][in] */ IWSDDeviceHostNotify *pNotificationSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterPortType( 
            /* [in] */ const WSD_PORT_TYPE *pPortType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMetadata( 
            /* [in] */ const WSD_THIS_MODEL_METADATA *pThisModelMetadata,
            /* [in] */ const WSD_THIS_DEVICE_METADATA *pThisDeviceMetadata,
            /* [optional][in] */ const WSD_HOST_METADATA *pHostMetadata,
            /* [optional][in] */ const WSD_METADATA_SECTION_LIST *pCustomMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterService( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [in] */ IUnknown *pService) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RetireService( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddDynamicService( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszEndpointAddress,
            /* [optional][in] */ const WSD_PORT_TYPE *pPortType,
            /* [optional][in] */ const WSDXML_NAME *pPortName,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny,
            /* [optional][in] */ IUnknown *pService) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveDynamicService( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetServiceDiscoverable( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [in] */ BOOL fDiscoverable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SignalEvent( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][in] */ 
            __in_opt  const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDDeviceHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDDeviceHost * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDDeviceHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDDeviceHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszLocalId,
            /* [optional][in] */ IWSDXMLContext *pContext,
            /* [annotation][optional][in] */ 
            __in_ecount_opt(dwHostAddressCount)  IWSDAddress **ppHostAddresses,
            /* [optional][in] */ DWORD dwHostAddressCount);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWSDDeviceHost * This,
            /* [in] */ ULONGLONG ullInstanceId,
            /* [in] */ const WSD_URI_LIST *pScopeList,
            /* [optional][in] */ IWSDDeviceHostNotify *pNotificationSink);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWSDDeviceHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            IWSDDeviceHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterPortType )( 
            IWSDDeviceHost * This,
            /* [in] */ const WSD_PORT_TYPE *pPortType);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetadata )( 
            IWSDDeviceHost * This,
            /* [in] */ const WSD_THIS_MODEL_METADATA *pThisModelMetadata,
            /* [in] */ const WSD_THIS_DEVICE_METADATA *pThisDeviceMetadata,
            /* [optional][in] */ const WSD_HOST_METADATA *pHostMetadata,
            /* [optional][in] */ const WSD_METADATA_SECTION_LIST *pCustomMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterService )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [in] */ IUnknown *pService);
        
        HRESULT ( STDMETHODCALLTYPE *RetireService )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId);
        
        HRESULT ( STDMETHODCALLTYPE *AddDynamicService )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][optional][in] */ 
            __in_opt  LPCWSTR pszEndpointAddress,
            /* [optional][in] */ const WSD_PORT_TYPE *pPortType,
            /* [optional][in] */ const WSDXML_NAME *pPortName,
            /* [optional][in] */ const WSDXML_ELEMENT *pAny,
            /* [optional][in] */ IUnknown *pService);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveDynamicService )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId);
        
        HRESULT ( STDMETHODCALLTYPE *SetServiceDiscoverable )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [in] */ BOOL fDiscoverable);
        
        HRESULT ( STDMETHODCALLTYPE *SignalEvent )( 
            IWSDDeviceHost * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][in] */ 
            __in_opt  const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation);
        
        END_INTERFACE
    } IWSDDeviceHostVtbl;

    interface IWSDDeviceHost
    {
        CONST_VTBL struct IWSDDeviceHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDDeviceHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDDeviceHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDDeviceHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDDeviceHost_Init(This,pszLocalId,pContext,ppHostAddresses,dwHostAddressCount)	\
    ( (This)->lpVtbl -> Init(This,pszLocalId,pContext,ppHostAddresses,dwHostAddressCount) ) 

#define IWSDDeviceHost_Start(This,ullInstanceId,pScopeList,pNotificationSink)	\
    ( (This)->lpVtbl -> Start(This,ullInstanceId,pScopeList,pNotificationSink) ) 

#define IWSDDeviceHost_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWSDDeviceHost_Terminate(This)	\
    ( (This)->lpVtbl -> Terminate(This) ) 

#define IWSDDeviceHost_RegisterPortType(This,pPortType)	\
    ( (This)->lpVtbl -> RegisterPortType(This,pPortType) ) 

#define IWSDDeviceHost_SetMetadata(This,pThisModelMetadata,pThisDeviceMetadata,pHostMetadata,pCustomMetadata)	\
    ( (This)->lpVtbl -> SetMetadata(This,pThisModelMetadata,pThisDeviceMetadata,pHostMetadata,pCustomMetadata) ) 

#define IWSDDeviceHost_RegisterService(This,pszServiceId,pService)	\
    ( (This)->lpVtbl -> RegisterService(This,pszServiceId,pService) ) 

#define IWSDDeviceHost_RetireService(This,pszServiceId)	\
    ( (This)->lpVtbl -> RetireService(This,pszServiceId) ) 

#define IWSDDeviceHost_AddDynamicService(This,pszServiceId,pszEndpointAddress,pPortType,pPortName,pAny,pService)	\
    ( (This)->lpVtbl -> AddDynamicService(This,pszServiceId,pszEndpointAddress,pPortType,pPortName,pAny,pService) ) 

#define IWSDDeviceHost_RemoveDynamicService(This,pszServiceId)	\
    ( (This)->lpVtbl -> RemoveDynamicService(This,pszServiceId) ) 

#define IWSDDeviceHost_SetServiceDiscoverable(This,pszServiceId,fDiscoverable)	\
    ( (This)->lpVtbl -> SetServiceDiscoverable(This,pszServiceId,fDiscoverable) ) 

#define IWSDDeviceHost_SignalEvent(This,pszServiceId,pBody,pOperation)	\
    ( (This)->lpVtbl -> SignalEvent(This,pszServiceId,pBody,pOperation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDDeviceHost_INTERFACE_DEFINED__ */


#ifndef __IWSDDeviceHostNotify_INTERFACE_DEFINED__
#define __IWSDDeviceHostNotify_INTERFACE_DEFINED__

/* interface IWSDDeviceHostNotify */
/* [restricted][unique][helpstring][uuid][object] */ 




EXTERN_C const IID IID_IWSDDeviceHostNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5bee9f9-eeda-41fe-96f7-f45e14990fb0")
    IWSDDeviceHostNotify : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetService( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppService) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDDeviceHostNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWSDDeviceHostNotify * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWSDDeviceHostNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWSDDeviceHostNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetService )( 
            __RPC__in IWSDDeviceHostNotify * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppService);
        
        END_INTERFACE
    } IWSDDeviceHostNotifyVtbl;

    interface IWSDDeviceHostNotify
    {
        CONST_VTBL struct IWSDDeviceHostNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDDeviceHostNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDDeviceHostNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDDeviceHostNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDDeviceHostNotify_GetService(This,pszServiceId,ppService)	\
    ( (This)->lpVtbl -> GetService(This,pszServiceId,ppService) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDDeviceHostNotify_INTERFACE_DEFINED__ */


#ifndef __IWSDServiceMessaging_INTERFACE_DEFINED__
#define __IWSDServiceMessaging_INTERFACE_DEFINED__

/* interface IWSDServiceMessaging */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDServiceMessaging;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("94974cf4-0cab-460d-a3f6-7a0ad623c0e6")
    IWSDServiceMessaging : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SendResponse( 
            /* [annotation][in] */ 
            __in_opt  void *pBody,
            /* [in] */ WSD_OPERATION *pOperation,
            /* [in] */ IWSDMessageParameters *pMessageParameters) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FaultRequest( 
            /* [in] */ WSD_SOAP_HEADER *pRequestHeader,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [optional][in] */ WSD_SOAP_FAULT *pFault) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDServiceMessagingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDServiceMessaging * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDServiceMessaging * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDServiceMessaging * This);
        
        HRESULT ( STDMETHODCALLTYPE *SendResponse )( 
            IWSDServiceMessaging * This,
            /* [annotation][in] */ 
            __in_opt  void *pBody,
            /* [in] */ WSD_OPERATION *pOperation,
            /* [in] */ IWSDMessageParameters *pMessageParameters);
        
        HRESULT ( STDMETHODCALLTYPE *FaultRequest )( 
            IWSDServiceMessaging * This,
            /* [in] */ WSD_SOAP_HEADER *pRequestHeader,
            /* [in] */ IWSDMessageParameters *pMessageParameters,
            /* [optional][in] */ WSD_SOAP_FAULT *pFault);
        
        END_INTERFACE
    } IWSDServiceMessagingVtbl;

    interface IWSDServiceMessaging
    {
        CONST_VTBL struct IWSDServiceMessagingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDServiceMessaging_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDServiceMessaging_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDServiceMessaging_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDServiceMessaging_SendResponse(This,pBody,pOperation,pMessageParameters)	\
    ( (This)->lpVtbl -> SendResponse(This,pBody,pOperation,pMessageParameters) ) 

#define IWSDServiceMessaging_FaultRequest(This,pRequestHeader,pMessageParameters,pFault)	\
    ( (This)->lpVtbl -> FaultRequest(This,pRequestHeader,pMessageParameters,pFault) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDServiceMessaging_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WShisotp.h ===
/* File: .streams.include.src/mod  wshisotp.h            Version: Initial */
/*
 *   wshisotp.h
 *   Copyright (c) 1994-1999, Microsoft Corp. All rights reserved.
 *
 *   Windows Sockets include file for ISO TP4.  This file contains all
 *   standardized ISO TP4 information.  Include this header file after
 *   winsock.h.
 *
 *   The information contained in this header file was originally
 *   created by Alcatel TITN Inc.
 */

#ifndef _WSHISOTP_
#define _WSHISOTP_

#if _MSC_VER > 1000
#pragma once
#endif

/*
 * Protocol values for ISO transport protocols.
 */

#define ISOPROTO_TP0       25      /* connection orientated transport protocol */
#define ISOPROTO_TP1       26      /* not implemented */
#define ISOPROTO_TP2       27      /* not implemented */
#define ISOPROTO_TP3       28      /* not implemented */
#define ISOPROTO_TP4       29      /* connection orientated transport protocol */
#define ISOPROTO_TP        ISOPROTO_TP4
#define ISOPROTO_CLTP      30      /* connectionless transport */
#define ISOPROTO_CLNP      31      /* connectionless internetworking protocol */
#define ISOPROTO_X25       32      /* cons */
#define ISOPROTO_INACT_NL  33      /* inactive network layer */
#define ISOPROTO_ESIS      34      /* ES-IS protocol */
#define ISOPROTO_INTRAISIS 35      /* IS-IS protocol */

#define IPPROTO_RAW        255     /* raw clnp */
#define IPPROTO_MAX        256

/*
 *   The maximum size of the tranport address (tp_addr field of a
 *   sockaddr_tp structure) is 64.
 */

#define ISO_MAX_ADDR_LENGTH 64

/*
 *   There are two types of ISO addresses, hierarchical and
 *   non-hierarchical.  For hierarchical addresses, the tp_addr
 *   field contains both the transport selector and the network
 *   address.  For non-hierarchical addresses, tp_addr contains only
 *   the transport address, which must be translated by the ISO TP4
 *   transport provider into the transport selector and network address.
 */

#define ISO_HIERARCHICAL            0
#define ISO_NON_HIERARCHICAL        1

/*
 *   The format of the address structure (sockaddr) to pass to Windows
 *   Sockets APIs.
 *
 */

typedef struct sockaddr_tp {
   u_short tp_family;          /* Always AF_ISO */
   u_short tp_addr_type;       /* ISO_HIERARCHICAL or ISO_NON_HIERARCHICAL
*/
   u_short tp_taddr_len;       /* Length of transport address, <= 52 */
   u_short tp_tsel_len;        /* Length of transport selector, <= 32 */
                               /* 0 if ISO_NON_HIERARCHICAL */
   u_char tp_addr[ISO_MAX_ADDR_LENGTH];
} SOCKADDR_TP, *PSOCKADDR_TP, *LPSOCKADDR_TP;

#define ISO_SET_TP_ADDR(sa_tp, port, portlen, node, nodelen)              \
            (sa_tp)->tp_family = AF_ISO;                         \
            (sa_tp)->tp_addr_type = ISO_HIERARCHICAL;            \
            (sa_tp)->tp_tsel_len = (portlen);              \
            (sa_tp)->tp_taddr_len = (portlen) + (nodelen); \
            memcpy(&(sa_tp)->tp_addr, (port), (portlen)); \
            memcpy(&(sa_tp)->tp_addr[portlen], (node), (nodelen));


/*
 *   Expedited Data Usage Negotiation option.
 *   Default when the option is not present is be EXP_DATA_USE
 *   as per ISO 8073
 */

#define ISO_EXP_DATA_USE  00    /* Use of Expedited Data */
#define ISO_EXP_DATA_NUSE 01    /* Non-use of Expedited Data */

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdclient.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsdclient.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsdclient_h__
#define __wsdclient_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDEndpointProxy_FWD_DEFINED__
#define __IWSDEndpointProxy_FWD_DEFINED__
typedef interface IWSDEndpointProxy IWSDEndpointProxy;
#endif 	/* __IWSDEndpointProxy_FWD_DEFINED__ */


#ifndef __IWSDMetadataExchange_FWD_DEFINED__
#define __IWSDMetadataExchange_FWD_DEFINED__
typedef interface IWSDMetadataExchange IWSDMetadataExchange;
#endif 	/* __IWSDMetadataExchange_FWD_DEFINED__ */


#ifndef __IWSDServiceProxy_FWD_DEFINED__
#define __IWSDServiceProxy_FWD_DEFINED__
typedef interface IWSDServiceProxy IWSDServiceProxy;
#endif 	/* __IWSDServiceProxy_FWD_DEFINED__ */


#ifndef __IWSDServiceProxyEventing_FWD_DEFINED__
#define __IWSDServiceProxyEventing_FWD_DEFINED__
typedef interface IWSDServiceProxyEventing IWSDServiceProxyEventing;
#endif 	/* __IWSDServiceProxyEventing_FWD_DEFINED__ */


#ifndef __IWSDDeviceProxy_FWD_DEFINED__
#define __IWSDDeviceProxy_FWD_DEFINED__
typedef interface IWSDDeviceProxy IWSDDeviceProxy;
#endif 	/* __IWSDDeviceProxy_FWD_DEFINED__ */


#ifndef __IWSDAsyncResult_FWD_DEFINED__
#define __IWSDAsyncResult_FWD_DEFINED__
typedef interface IWSDAsyncResult IWSDAsyncResult;
#endif 	/* __IWSDAsyncResult_FWD_DEFINED__ */


#ifndef __IWSDAsyncCallback_FWD_DEFINED__
#define __IWSDAsyncCallback_FWD_DEFINED__
typedef interface IWSDAsyncCallback IWSDAsyncCallback;
#endif 	/* __IWSDAsyncCallback_FWD_DEFINED__ */


#ifndef __IWSDEventingStatus_FWD_DEFINED__
#define __IWSDEventingStatus_FWD_DEFINED__
typedef interface IWSDEventingStatus IWSDEventingStatus;
#endif 	/* __IWSDEventingStatus_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wsdxmldom.h"
#include "wsdtypes.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsdclient_0000_0000 */
/* [local] */ 











HRESULT WINAPI
WSDCreateDeviceProxy(
    __in LPCWSTR pszDeviceId,
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __deref_out IWSDDeviceProxy** ppDeviceProxy);
HRESULT WINAPI
WSDCreateDeviceProxyAdvanced(
    __in LPCWSTR pszDeviceId,
    IWSDAddress* pDeviceAddress,
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __deref_out IWSDDeviceProxy** ppDeviceProxy);
#if (WINVER >= _WIN32_WINNT_WIN7)
HRESULT WINAPI
WSDCreateDeviceProxy2(
    __in LPCWSTR pszDeviceId,
    __in LPCWSTR pszLocalId,
    IWSDXMLContext* pContext,
    __in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,
    DWORD dwConfigParamCount,
    __deref_out IWSDDeviceProxy** ppDeviceProxy);
#endif


extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDEndpointProxy_INTERFACE_DEFINED__
#define __IWSDEndpointProxy_INTERFACE_DEFINED__

/* interface IWSDEndpointProxy */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDEndpointProxy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1860d430-b24c-4975-9f90-dbb39baa24ec")
    IWSDEndpointProxy : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SendOneWayRequest( 
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendTwoWayRequest( 
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [optional][in] */ const WSD_SYNCHRONOUS_RESPONSE_CONTEXT *pResponseContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendTwoWayRequestAsync( 
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [in] */ IUnknown *pAsyncState,
            /* [in] */ IWSDAsyncCallback *pCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **pResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AbortAsyncOperation( 
            /* [in] */ IWSDAsyncResult *pAsyncResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessFault( 
            /* [in] */ const WSD_SOAP_FAULT *pFault) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetErrorInfo( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszErrorInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFaultInfo( 
            /* [annotation][out] */ 
            __deref_out  WSD_SOAP_FAULT **ppFault) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDEndpointProxyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDEndpointProxy * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDEndpointProxy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDEndpointProxy * This);
        
        HRESULT ( STDMETHODCALLTYPE *SendOneWayRequest )( 
            IWSDEndpointProxy * This,
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *SendTwoWayRequest )( 
            IWSDEndpointProxy * This,
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [optional][in] */ const WSD_SYNCHRONOUS_RESPONSE_CONTEXT *pResponseContext);
        
        HRESULT ( STDMETHODCALLTYPE *SendTwoWayRequestAsync )( 
            IWSDEndpointProxy * This,
            /* [in] */ const void *pBody,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [in] */ IUnknown *pAsyncState,
            /* [in] */ IWSDAsyncCallback *pCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AbortAsyncOperation )( 
            IWSDEndpointProxy * This,
            /* [in] */ IWSDAsyncResult *pAsyncResult);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessFault )( 
            IWSDEndpointProxy * This,
            /* [in] */ const WSD_SOAP_FAULT *pFault);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorInfo )( 
            IWSDEndpointProxy * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszErrorInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetFaultInfo )( 
            IWSDEndpointProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_SOAP_FAULT **ppFault);
        
        END_INTERFACE
    } IWSDEndpointProxyVtbl;

    interface IWSDEndpointProxy
    {
        CONST_VTBL struct IWSDEndpointProxyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDEndpointProxy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDEndpointProxy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDEndpointProxy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDEndpointProxy_SendOneWayRequest(This,pBody,pOperation)	\
    ( (This)->lpVtbl -> SendOneWayRequest(This,pBody,pOperation) ) 

#define IWSDEndpointProxy_SendTwoWayRequest(This,pBody,pOperation,pResponseContext)	\
    ( (This)->lpVtbl -> SendTwoWayRequest(This,pBody,pOperation,pResponseContext) ) 

#define IWSDEndpointProxy_SendTwoWayRequestAsync(This,pBody,pOperation,pAsyncState,pCallback,pResult)	\
    ( (This)->lpVtbl -> SendTwoWayRequestAsync(This,pBody,pOperation,pAsyncState,pCallback,pResult) ) 

#define IWSDEndpointProxy_AbortAsyncOperation(This,pAsyncResult)	\
    ( (This)->lpVtbl -> AbortAsyncOperation(This,pAsyncResult) ) 

#define IWSDEndpointProxy_ProcessFault(This,pFault)	\
    ( (This)->lpVtbl -> ProcessFault(This,pFault) ) 

#define IWSDEndpointProxy_GetErrorInfo(This,ppszErrorInfo)	\
    ( (This)->lpVtbl -> GetErrorInfo(This,ppszErrorInfo) ) 

#define IWSDEndpointProxy_GetFaultInfo(This,ppFault)	\
    ( (This)->lpVtbl -> GetFaultInfo(This,ppFault) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDEndpointProxy_INTERFACE_DEFINED__ */


#ifndef __IWSDMetadataExchange_INTERFACE_DEFINED__
#define __IWSDMetadataExchange_INTERFACE_DEFINED__

/* interface IWSDMetadataExchange */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDMetadataExchange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("06996d57-1d67-4928-9307-3d7833fdb846")
    IWSDMetadataExchange : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMetadata( 
            /* [out] */ WSD_METADATA_SECTION_LIST **MetadataOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDMetadataExchangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDMetadataExchange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDMetadataExchange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDMetadataExchange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            IWSDMetadataExchange * This,
            /* [out] */ WSD_METADATA_SECTION_LIST **MetadataOut);
        
        END_INTERFACE
    } IWSDMetadataExchangeVtbl;

    interface IWSDMetadataExchange
    {
        CONST_VTBL struct IWSDMetadataExchangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDMetadataExchange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDMetadataExchange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDMetadataExchange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDMetadataExchange_GetMetadata(This,MetadataOut)	\
    ( (This)->lpVtbl -> GetMetadata(This,MetadataOut) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDMetadataExchange_INTERFACE_DEFINED__ */


#ifndef __IWSDServiceProxy_INTERFACE_DEFINED__
#define __IWSDServiceProxy_INTERFACE_DEFINED__

/* interface IWSDServiceProxy */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDServiceProxy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d4c7fb9c-03ab-4175-9d67-094fafebf487")
    IWSDServiceProxy : public IWSDMetadataExchange
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginGetMetadata( 
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndGetMetadata( 
            /* [in] */ IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_out  WSD_METADATA_SECTION_LIST **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetServiceMetadata( 
            /* [annotation][out] */ 
            __deref_out  WSD_SERVICE_METADATA **ppServiceMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubscribeToOperation( 
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [in] */ IUnknown *pUnknown,
            /* [in] */ const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnsubscribeToOperation( 
            /* [in] */ const WSD_OPERATION *pOperation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEventingStatusCallback( 
            /* [optional][in] */ IWSDEventingStatus *pStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEndpointProxy( 
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppProxy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDServiceProxyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDServiceProxy * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDServiceProxy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDServiceProxy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            IWSDServiceProxy * This,
            /* [out] */ WSD_METADATA_SECTION_LIST **MetadataOut);
        
        HRESULT ( STDMETHODCALLTYPE *BeginGetMetadata )( 
            IWSDServiceProxy * This,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndGetMetadata )( 
            IWSDServiceProxy * This,
            /* [in] */ IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_out  WSD_METADATA_SECTION_LIST **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetServiceMetadata )( 
            IWSDServiceProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_SERVICE_METADATA **ppServiceMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SubscribeToOperation )( 
            IWSDServiceProxy * This,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [in] */ IUnknown *pUnknown,
            /* [in] */ const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *UnsubscribeToOperation )( 
            IWSDServiceProxy * This,
            /* [in] */ const WSD_OPERATION *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *SetEventingStatusCallback )( 
            IWSDServiceProxy * This,
            /* [optional][in] */ IWSDEventingStatus *pStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetEndpointProxy )( 
            IWSDServiceProxy * This,
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppProxy);
        
        END_INTERFACE
    } IWSDServiceProxyVtbl;

    interface IWSDServiceProxy
    {
        CONST_VTBL struct IWSDServiceProxyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDServiceProxy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDServiceProxy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDServiceProxy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDServiceProxy_GetMetadata(This,MetadataOut)	\
    ( (This)->lpVtbl -> GetMetadata(This,MetadataOut) ) 


#define IWSDServiceProxy_BeginGetMetadata(This,ppResult)	\
    ( (This)->lpVtbl -> BeginGetMetadata(This,ppResult) ) 

#define IWSDServiceProxy_EndGetMetadata(This,pResult,ppMetadata)	\
    ( (This)->lpVtbl -> EndGetMetadata(This,pResult,ppMetadata) ) 

#define IWSDServiceProxy_GetServiceMetadata(This,ppServiceMetadata)	\
    ( (This)->lpVtbl -> GetServiceMetadata(This,ppServiceMetadata) ) 

#define IWSDServiceProxy_SubscribeToOperation(This,pOperation,pUnknown,pAny,ppAny)	\
    ( (This)->lpVtbl -> SubscribeToOperation(This,pOperation,pUnknown,pAny,ppAny) ) 

#define IWSDServiceProxy_UnsubscribeToOperation(This,pOperation)	\
    ( (This)->lpVtbl -> UnsubscribeToOperation(This,pOperation) ) 

#define IWSDServiceProxy_SetEventingStatusCallback(This,pStatus)	\
    ( (This)->lpVtbl -> SetEventingStatusCallback(This,pStatus) ) 

#define IWSDServiceProxy_GetEndpointProxy(This,ppProxy)	\
    ( (This)->lpVtbl -> GetEndpointProxy(This,ppProxy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDServiceProxy_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdclient_0000_0002 */
/* [local] */ 

#if (WINVER >= _WIN32_WINNT_WIN7)


extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0002_v0_0_s_ifspec;

#ifndef __IWSDServiceProxyEventing_INTERFACE_DEFINED__
#define __IWSDServiceProxyEventing_INTERFACE_DEFINED__

/* interface IWSDServiceProxyEventing */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDServiceProxyEventing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9279d6d-1012-4a94-b8cc-fd35d2202bfe")
    IWSDServiceProxyEventing : public IWSDServiceProxy
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnknown,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginSubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnknown,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndSubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnsubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [in] */ const WSDXML_ELEMENT *pAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginUnsubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndUnsubscribeToMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenewMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginRenewMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndRenewMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatusForMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginGetStatusForMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndGetStatusForMultipleOperations( 
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDServiceProxyEventingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDServiceProxyEventing * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDServiceProxyEventing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDServiceProxyEventing * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMetadata )( 
            IWSDServiceProxyEventing * This,
            /* [out] */ WSD_METADATA_SECTION_LIST **MetadataOut);
        
        HRESULT ( STDMETHODCALLTYPE *BeginGetMetadata )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndGetMetadata )( 
            IWSDServiceProxyEventing * This,
            /* [in] */ IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_out  WSD_METADATA_SECTION_LIST **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetServiceMetadata )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][out] */ 
            __deref_out  WSD_SERVICE_METADATA **ppServiceMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SubscribeToOperation )( 
            IWSDServiceProxyEventing * This,
            /* [in] */ const WSD_OPERATION *pOperation,
            /* [in] */ IUnknown *pUnknown,
            /* [in] */ const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *UnsubscribeToOperation )( 
            IWSDServiceProxyEventing * This,
            /* [in] */ const WSD_OPERATION *pOperation);
        
        HRESULT ( STDMETHODCALLTYPE *SetEventingStatusCallback )( 
            IWSDServiceProxyEventing * This,
            /* [optional][in] */ IWSDEventingStatus *pStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetEndpointProxy )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppProxy);
        
        HRESULT ( STDMETHODCALLTYPE *SubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnknown,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *BeginSubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnknown,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndSubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *UnsubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [in] */ const WSDXML_ELEMENT *pAny);
        
        HRESULT ( STDMETHODCALLTYPE *BeginUnsubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndUnsubscribeToMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *RenewMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *BeginRenewMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSD_EVENTING_EXPIRES *pExpires,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndRenewMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatusForMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        HRESULT ( STDMETHODCALLTYPE *BeginGetStatusForMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in_opt  const WSDXML_ELEMENT *pAny,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pAsyncState,
            /* [annotation][in] */ 
            __in_opt  IWSDAsyncCallback *pAsyncCallback,
            /* [annotation][out] */ 
            __deref_out  IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndGetStatusForMultipleOperations )( 
            IWSDServiceProxyEventing * This,
            /* [annotation][in] */ 
            __in_ecount(dwOperationCount)  const WSD_OPERATION *pOperations,
            /* [in] */ DWORD dwOperationCount,
            /* [annotation][in] */ 
            __in  IWSDAsyncResult *pResult,
            /* [annotation][out] */ 
            __deref_opt_out  WSD_EVENTING_EXPIRES **ppExpires,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_ELEMENT **ppAny);
        
        END_INTERFACE
    } IWSDServiceProxyEventingVtbl;

    interface IWSDServiceProxyEventing
    {
        CONST_VTBL struct IWSDServiceProxyEventingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDServiceProxyEventing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDServiceProxyEventing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDServiceProxyEventing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDServiceProxyEventing_GetMetadata(This,MetadataOut)	\
    ( (This)->lpVtbl -> GetMetadata(This,MetadataOut) ) 


#define IWSDServiceProxyEventing_BeginGetMetadata(This,ppResult)	\
    ( (This)->lpVtbl -> BeginGetMetadata(This,ppResult) ) 

#define IWSDServiceProxyEventing_EndGetMetadata(This,pResult,ppMetadata)	\
    ( (This)->lpVtbl -> EndGetMetadata(This,pResult,ppMetadata) ) 

#define IWSDServiceProxyEventing_GetServiceMetadata(This,ppServiceMetadata)	\
    ( (This)->lpVtbl -> GetServiceMetadata(This,ppServiceMetadata) ) 

#define IWSDServiceProxyEventing_SubscribeToOperation(This,pOperation,pUnknown,pAny,ppAny)	\
    ( (This)->lpVtbl -> SubscribeToOperation(This,pOperation,pUnknown,pAny,ppAny) ) 

#define IWSDServiceProxyEventing_UnsubscribeToOperation(This,pOperation)	\
    ( (This)->lpVtbl -> UnsubscribeToOperation(This,pOperation) ) 

#define IWSDServiceProxyEventing_SetEventingStatusCallback(This,pStatus)	\
    ( (This)->lpVtbl -> SetEventingStatusCallback(This,pStatus) ) 

#define IWSDServiceProxyEventing_GetEndpointProxy(This,ppProxy)	\
    ( (This)->lpVtbl -> GetEndpointProxy(This,ppProxy) ) 


#define IWSDServiceProxyEventing_SubscribeToMultipleOperations(This,pOperations,dwOperationCount,pUnknown,pExpires,pAny,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> SubscribeToMultipleOperations(This,pOperations,dwOperationCount,pUnknown,pExpires,pAny,ppExpires,ppAny) ) 

#define IWSDServiceProxyEventing_BeginSubscribeToMultipleOperations(This,pOperations,dwOperationCount,pUnknown,pExpires,pAny,pAsyncState,pAsyncCallback,ppResult)	\
    ( (This)->lpVtbl -> BeginSubscribeToMultipleOperations(This,pOperations,dwOperationCount,pUnknown,pExpires,pAny,pAsyncState,pAsyncCallback,ppResult) ) 

#define IWSDServiceProxyEventing_EndSubscribeToMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> EndSubscribeToMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny) ) 

#define IWSDServiceProxyEventing_UnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pAny)	\
    ( (This)->lpVtbl -> UnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pAny) ) 

#define IWSDServiceProxyEventing_BeginUnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pAny,pAsyncState,pAsyncCallback,ppResult)	\
    ( (This)->lpVtbl -> BeginUnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pAny,pAsyncState,pAsyncCallback,ppResult) ) 

#define IWSDServiceProxyEventing_EndUnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pResult)	\
    ( (This)->lpVtbl -> EndUnsubscribeToMultipleOperations(This,pOperations,dwOperationCount,pResult) ) 

#define IWSDServiceProxyEventing_RenewMultipleOperations(This,pOperations,dwOperationCount,pExpires,pAny,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> RenewMultipleOperations(This,pOperations,dwOperationCount,pExpires,pAny,ppExpires,ppAny) ) 

#define IWSDServiceProxyEventing_BeginRenewMultipleOperations(This,pOperations,dwOperationCount,pExpires,pAny,pAsyncState,pAsyncCallback,ppResult)	\
    ( (This)->lpVtbl -> BeginRenewMultipleOperations(This,pOperations,dwOperationCount,pExpires,pAny,pAsyncState,pAsyncCallback,ppResult) ) 

#define IWSDServiceProxyEventing_EndRenewMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> EndRenewMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny) ) 

#define IWSDServiceProxyEventing_GetStatusForMultipleOperations(This,pOperations,dwOperationCount,pAny,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> GetStatusForMultipleOperations(This,pOperations,dwOperationCount,pAny,ppExpires,ppAny) ) 

#define IWSDServiceProxyEventing_BeginGetStatusForMultipleOperations(This,pOperations,dwOperationCount,pAny,pAsyncState,pAsyncCallback,ppResult)	\
    ( (This)->lpVtbl -> BeginGetStatusForMultipleOperations(This,pOperations,dwOperationCount,pAny,pAsyncState,pAsyncCallback,ppResult) ) 

#define IWSDServiceProxyEventing_EndGetStatusForMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny)	\
    ( (This)->lpVtbl -> EndGetStatusForMultipleOperations(This,pOperations,dwOperationCount,pResult,ppExpires,ppAny) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDServiceProxyEventing_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdclient_0000_0003 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdclient_0000_0003_v0_0_s_ifspec;

#ifndef __IWSDDeviceProxy_INTERFACE_DEFINED__
#define __IWSDDeviceProxy_INTERFACE_DEFINED__

/* interface IWSDDeviceProxy */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDDeviceProxy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eee0c031-c578-4c0e-9a3b-973c35f409db")
    IWSDDeviceProxy : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszDeviceId,
            /* [in] */ IWSDAddress *pDeviceAddress,
            /* [annotation][in] */ 
            __in  LPCWSTR pszLocalId,
            /* [optional][in] */ IWSDXMLContext *pContext,
            /* [optional][in] */ IWSDDeviceProxy *pSponsor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginGetMetadata( 
            /* [out] */ IWSDAsyncResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndGetMetadata( 
            /* [in] */ IWSDAsyncResult *pResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostMetadata( 
            /* [annotation][out] */ 
            __deref_out  WSD_HOST_METADATA **ppHostMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThisModelMetadata( 
            /* [annotation][out] */ 
            __deref_out  WSD_THIS_MODEL_METADATA **ppManufacturerMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThisDeviceMetadata( 
            /* [annotation][out] */ 
            __deref_out  WSD_THIS_DEVICE_METADATA **ppThisDeviceMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllMetadata( 
            /* [annotation][out] */ 
            __deref_out  WSD_METADATA_SECTION_LIST **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetServiceProxyById( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][out] */ 
            __deref_out  IWSDServiceProxy **ppServiceProxy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetServiceProxyByType( 
            /* [in] */ const WSDXML_NAME *pType,
            /* [annotation][out] */ 
            __deref_out  IWSDServiceProxy **ppServiceProxy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEndpointProxy( 
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppProxy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDDeviceProxyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDDeviceProxy * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDDeviceProxy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDDeviceProxy * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IWSDDeviceProxy * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszDeviceId,
            /* [in] */ IWSDAddress *pDeviceAddress,
            /* [annotation][in] */ 
            __in  LPCWSTR pszLocalId,
            /* [optional][in] */ IWSDXMLContext *pContext,
            /* [optional][in] */ IWSDDeviceProxy *pSponsor);
        
        HRESULT ( STDMETHODCALLTYPE *BeginGetMetadata )( 
            IWSDDeviceProxy * This,
            /* [out] */ IWSDAsyncResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *EndGetMetadata )( 
            IWSDDeviceProxy * This,
            /* [in] */ IWSDAsyncResult *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostMetadata )( 
            IWSDDeviceProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_HOST_METADATA **ppHostMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetThisModelMetadata )( 
            IWSDDeviceProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_THIS_MODEL_METADATA **ppManufacturerMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetThisDeviceMetadata )( 
            IWSDDeviceProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_THIS_DEVICE_METADATA **ppThisDeviceMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllMetadata )( 
            IWSDDeviceProxy * This,
            /* [annotation][out] */ 
            __deref_out  WSD_METADATA_SECTION_LIST **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetServiceProxyById )( 
            IWSDDeviceProxy * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszServiceId,
            /* [annotation][out] */ 
            __deref_out  IWSDServiceProxy **ppServiceProxy);
        
        HRESULT ( STDMETHODCALLTYPE *GetServiceProxyByType )( 
            IWSDDeviceProxy * This,
            /* [in] */ const WSDXML_NAME *pType,
            /* [annotation][out] */ 
            __deref_out  IWSDServiceProxy **ppServiceProxy);
        
        HRESULT ( STDMETHODCALLTYPE *GetEndpointProxy )( 
            IWSDDeviceProxy * This,
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppProxy);
        
        END_INTERFACE
    } IWSDDeviceProxyVtbl;

    interface IWSDDeviceProxy
    {
        CONST_VTBL struct IWSDDeviceProxyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDDeviceProxy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDDeviceProxy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDDeviceProxy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDDeviceProxy_Init(This,pszDeviceId,pDeviceAddress,pszLocalId,pContext,pSponsor)	\
    ( (This)->lpVtbl -> Init(This,pszDeviceId,pDeviceAddress,pszLocalId,pContext,pSponsor) ) 

#define IWSDDeviceProxy_BeginGetMetadata(This,ppResult)	\
    ( (This)->lpVtbl -> BeginGetMetadata(This,ppResult) ) 

#define IWSDDeviceProxy_EndGetMetadata(This,pResult)	\
    ( (This)->lpVtbl -> EndGetMetadata(This,pResult) ) 

#define IWSDDeviceProxy_GetHostMetadata(This,ppHostMetadata)	\
    ( (This)->lpVtbl -> GetHostMetadata(This,ppHostMetadata) ) 

#define IWSDDeviceProxy_GetThisModelMetadata(This,ppManufacturerMetadata)	\
    ( (This)->lpVtbl -> GetThisModelMetadata(This,ppManufacturerMetadata) ) 

#define IWSDDeviceProxy_GetThisDeviceMetadata(This,ppThisDeviceMetadata)	\
    ( (This)->lpVtbl -> GetThisDeviceMetadata(This,ppThisDeviceMetadata) ) 

#define IWSDDeviceProxy_GetAllMetadata(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetAllMetadata(This,ppMetadata) ) 

#define IWSDDeviceProxy_GetServiceProxyById(This,pszServiceId,ppServiceProxy)	\
    ( (This)->lpVtbl -> GetServiceProxyById(This,pszServiceId,ppServiceProxy) ) 

#define IWSDDeviceProxy_GetServiceProxyByType(This,pType,ppServiceProxy)	\
    ( (This)->lpVtbl -> GetServiceProxyByType(This,pType,ppServiceProxy) ) 

#define IWSDDeviceProxy_GetEndpointProxy(This,ppProxy)	\
    ( (This)->lpVtbl -> GetEndpointProxy(This,ppProxy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDDeviceProxy_INTERFACE_DEFINED__ */


#ifndef __IWSDAsyncResult_INTERFACE_DEFINED__
#define __IWSDAsyncResult_INTERFACE_DEFINED__

/* interface IWSDAsyncResult */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDAsyncResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11a9852a-8dd8-423e-b537-9356db4fbfb8")
    IWSDAsyncResult : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetCallback( 
            /* [in] */ IWSDAsyncCallback *pCallback,
            /* [in] */ IUnknown *pAsyncState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetWaitHandle( 
            /* [in] */ HANDLE hWaitHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasCompleted( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAsyncState( 
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppAsyncState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEvent( 
            /* [annotation][out] */ 
            __out  WSD_EVENT *pEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEndpointProxy( 
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppEndpoint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDAsyncResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDAsyncResult * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDAsyncResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDAsyncResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetCallback )( 
            IWSDAsyncResult * This,
            /* [in] */ IWSDAsyncCallback *pCallback,
            /* [in] */ IUnknown *pAsyncState);
        
        HRESULT ( STDMETHODCALLTYPE *SetWaitHandle )( 
            IWSDAsyncResult * This,
            /* [in] */ HANDLE hWaitHandle);
        
        HRESULT ( STDMETHODCALLTYPE *HasCompleted )( 
            IWSDAsyncResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAsyncState )( 
            IWSDAsyncResult * This,
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppAsyncState);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            IWSDAsyncResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            IWSDAsyncResult * This,
            /* [annotation][out] */ 
            __out  WSD_EVENT *pEvent);
        
        HRESULT ( STDMETHODCALLTYPE *GetEndpointProxy )( 
            IWSDAsyncResult * This,
            /* [annotation][out] */ 
            __deref_out  IWSDEndpointProxy **ppEndpoint);
        
        END_INTERFACE
    } IWSDAsyncResultVtbl;

    interface IWSDAsyncResult
    {
        CONST_VTBL struct IWSDAsyncResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDAsyncResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDAsyncResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDAsyncResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDAsyncResult_SetCallback(This,pCallback,pAsyncState)	\
    ( (This)->lpVtbl -> SetCallback(This,pCallback,pAsyncState) ) 

#define IWSDAsyncResult_SetWaitHandle(This,hWaitHandle)	\
    ( (This)->lpVtbl -> SetWaitHandle(This,hWaitHandle) ) 

#define IWSDAsyncResult_HasCompleted(This)	\
    ( (This)->lpVtbl -> HasCompleted(This) ) 

#define IWSDAsyncResult_GetAsyncState(This,ppAsyncState)	\
    ( (This)->lpVtbl -> GetAsyncState(This,ppAsyncState) ) 

#define IWSDAsyncResult_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#define IWSDAsyncResult_GetEvent(This,pEvent)	\
    ( (This)->lpVtbl -> GetEvent(This,pEvent) ) 

#define IWSDAsyncResult_GetEndpointProxy(This,ppEndpoint)	\
    ( (This)->lpVtbl -> GetEndpointProxy(This,ppEndpoint) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDAsyncResult_INTERFACE_DEFINED__ */


#ifndef __IWSDAsyncCallback_INTERFACE_DEFINED__
#define __IWSDAsyncCallback_INTERFACE_DEFINED__

/* interface IWSDAsyncCallback */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDAsyncCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a63e109d-ce72-49e2-ba98-e845f5ee1666")
    IWSDAsyncCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AsyncOperationComplete( 
            /* [in] */ IWSDAsyncResult *pAsyncResult,
            /* [in] */ IUnknown *pAsyncState) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDAsyncCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDAsyncCallback * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDAsyncCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDAsyncCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *AsyncOperationComplete )( 
            IWSDAsyncCallback * This,
            /* [in] */ IWSDAsyncResult *pAsyncResult,
            /* [in] */ IUnknown *pAsyncState);
        
        END_INTERFACE
    } IWSDAsyncCallbackVtbl;

    interface IWSDAsyncCallback
    {
        CONST_VTBL struct IWSDAsyncCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDAsyncCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDAsyncCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDAsyncCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDAsyncCallback_AsyncOperationComplete(This,pAsyncResult,pAsyncState)	\
    ( (This)->lpVtbl -> AsyncOperationComplete(This,pAsyncResult,pAsyncState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDAsyncCallback_INTERFACE_DEFINED__ */


#ifndef __IWSDEventingStatus_INTERFACE_DEFINED__
#define __IWSDEventingStatus_INTERFACE_DEFINED__

/* interface IWSDEventingStatus */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDEventingStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("49b17f52-637a-407a-ae99-fbe82a4d38c0")
    IWSDEventingStatus : public IUnknown
    {
    public:
        virtual void STDMETHODCALLTYPE SubscriptionRenewed( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction) = 0;
        
        virtual void STDMETHODCALLTYPE SubscriptionRenewalFailed( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction,
            /* [in] */ HRESULT hr) = 0;
        
        virtual void STDMETHODCALLTYPE SubscriptionEnded( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDEventingStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDEventingStatus * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDEventingStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDEventingStatus * This);
        
        void ( STDMETHODCALLTYPE *SubscriptionRenewed )( 
            IWSDEventingStatus * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction);
        
        void ( STDMETHODCALLTYPE *SubscriptionRenewalFailed )( 
            IWSDEventingStatus * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction,
            /* [in] */ HRESULT hr);
        
        void ( STDMETHODCALLTYPE *SubscriptionEnded )( 
            IWSDEventingStatus * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszSubscriptionAction);
        
        END_INTERFACE
    } IWSDEventingStatusVtbl;

    interface IWSDEventingStatus
    {
        CONST_VTBL struct IWSDEventingStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDEventingStatus_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDEventingStatus_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDEventingStatus_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDEventingStatus_SubscriptionRenewed(This,pszSubscriptionAction)	\
    ( (This)->lpVtbl -> SubscriptionRenewed(This,pszSubscriptionAction) ) 

#define IWSDEventingStatus_SubscriptionRenewalFailed(This,pszSubscriptionAction,hr)	\
    ( (This)->lpVtbl -> SubscriptionRenewalFailed(This,pszSubscriptionAction,hr) ) 

#define IWSDEventingStatus_SubscriptionEnded(This,pszSubscriptionAction)	\
    ( (This)->lpVtbl -> SubscriptionEnded(This,pszSubscriptionAction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDEventingStatus_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdtypes.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  Component: WSDAPI - Microsoft Web Services for Devices API
// 
//  File: wsdtypes.h
//
//  Abstract: WSDAPI Built-in Type Definitions
//
//  THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT MODIFY IT BY HAND.
//
//--------------------------------------------------------------------------
#pragma once

//
// Forward definitions
//
interface IWSDMessageParameters;   // wsdbase.idl
interface IWSDServiceMessaging;    // wsdhost.idl

// decl referenced base types
typedef struct _WSD_DURATION WSD_DURATION;
typedef struct _WSD_DATETIME WSD_DATETIME;

typedef struct _WSD_HANDLER_CONTEXT WSD_HANDLER_CONTEXT;
typedef struct _WSD_EVENT WSD_EVENT;

typedef HRESULT (*WSD_STUB_FUNCTION) (   
    IUnknown* server,
    IWSDServiceMessaging* session,
    WSD_EVENT* event
);

typedef enum _WSD_PROTOCOL_TYPE
{
    WSD_PT_NONE  = 0x00,
    WSD_PT_UDP   = 0x01,
    WSD_PT_HTTP  = 0x02,
    WSD_PT_HTTPS = 0x04,
    WSD_PT_ALL   = 0xff,
} WSD_PROTOCOL_TYPE;

typedef struct _WSD_OPERATION
{
    WSDXML_TYPE* RequestType;
    WSDXML_TYPE* ResponseType;
    WSD_STUB_FUNCTION RequestStubFunction;
} WSD_OPERATION;

//
// Context for handling incoming messages.
//
typedef 
HRESULT (*PWSD_SOAP_MESSAGE_HANDLER)(
    IUnknown* thisUnknown,
    WSD_EVENT* event);

//
// Context for handling incoming messages.
//
struct _WSD_HANDLER_CONTEXT
{
    PWSD_SOAP_MESSAGE_HANDLER Handler;
    void* PVoid;
    IUnknown* Unknown;
};

//
// WSDEventType distinguishes types of events produced by the session layer.
//
typedef enum _WSDEventType
{
    WSDET_NONE                 = 0,
    WSDET_INCOMING_MESSAGE     = 1,
    WSDET_INCOMING_FAULT       = 2,
    WSDET_TRANSMISSION_FAILURE = 3,
    WSDET_RESPONSE_TIMEOUT     = 4,
} WSDEventType;

typedef struct _WSD_SYNCHRONOUS_RESPONSE_CONTEXT
{
    HRESULT hr;
    HANDLE eventHandle;
    IWSDMessageParameters* messageParameters;
    void* results;
} WSD_SYNCHRONOUS_RESPONSE_CONTEXT;

typedef struct _WSD_PORT_TYPE
{
    DWORD EncodedName;
    DWORD OperationCount;
    WSD_OPERATION* Operations;
    WSD_PROTOCOL_TYPE ProtocolType;
} WSD_PORT_TYPE;

        
typedef struct _WSD_RELATIONSHIP_METADATA WSD_RELATIONSHIP_METADATA;
typedef struct _WSD_SERVICE_METADATA_LIST WSD_SERVICE_METADATA_LIST;
typedef struct _WSD_HOST_METADATA WSD_HOST_METADATA;
typedef struct _WSD_ENDPOINT_REFERENCE_LIST WSD_ENDPOINT_REFERENCE_LIST;
typedef struct _WSD_SERVICE_METADATA WSD_SERVICE_METADATA;
typedef struct _WSD_THIS_DEVICE_METADATA WSD_THIS_DEVICE_METADATA;
typedef struct _WSD_THIS_MODEL_METADATA WSD_THIS_MODEL_METADATA;
typedef struct _WSD_LOCALIZED_STRING_LIST WSD_LOCALIZED_STRING_LIST;
typedef struct _WSD_SOAP_FAULT_REASON WSD_SOAP_FAULT_REASON;
typedef struct _WSD_SOAP_FAULT_SUBCODE WSD_SOAP_FAULT_SUBCODE;
typedef struct _WSD_SOAP_FAULT_CODE WSD_SOAP_FAULT_CODE;
typedef struct _WSD_SOAP_FAULT WSD_SOAP_FAULT;
typedef struct _WSD_APP_SEQUENCE WSD_APP_SEQUENCE;
typedef struct _WSD_HEADER_RELATESTO WSD_HEADER_RELATESTO;
typedef struct _WSD_SOAP_HEADER WSD_SOAP_HEADER;
typedef struct _WSD_SOAP_MESSAGE WSD_SOAP_MESSAGE;
typedef struct _WSD_RESOLVE_MATCHES WSD_RESOLVE_MATCHES;
typedef struct _WSD_RESOLVE_MATCH WSD_RESOLVE_MATCH;
typedef struct _WSD_RESOLVE WSD_RESOLVE;
typedef struct _WSD_PROBE_MATCH WSD_PROBE_MATCH;
typedef struct _WSD_PROBE_MATCH_LIST WSD_PROBE_MATCH_LIST;
typedef struct _WSD_PROBE_MATCHES WSD_PROBE_MATCHES;
typedef struct _WSD_PROBE WSD_PROBE;
typedef struct _WSD_BYE WSD_BYE;
typedef struct _WSD_SCOPES WSD_SCOPES;
typedef struct _WSD_NAME_LIST WSD_NAME_LIST;
typedef struct _WSD_HELLO WSD_HELLO;
typedef struct _WSD_REFERENCE_PARAMETERS WSD_REFERENCE_PARAMETERS;
typedef struct _WSD_REFERENCE_PROPERTIES WSD_REFERENCE_PROPERTIES;
typedef struct _WSD_ENDPOINT_REFERENCE WSD_ENDPOINT_REFERENCE;
typedef struct _WSD_METADATA_SECTION WSD_METADATA_SECTION;
typedef struct _WSD_METADATA_SECTION_LIST WSD_METADATA_SECTION_LIST;
typedef struct _WSD_URI_LIST WSD_URI_LIST;
typedef struct _WSD_EVENTING_FILTER_ACTION WSD_EVENTING_FILTER_ACTION;
typedef struct _WSD_EVENTING_FILTER WSD_EVENTING_FILTER;
typedef struct _WSD_EVENTING_EXPIRES WSD_EVENTING_EXPIRES;
typedef struct _WSD_EVENTING_DELIVERY_MODE_PUSH WSD_EVENTING_DELIVERY_MODE_PUSH;
typedef struct _WSD_EVENTING_DELIVERY_MODE WSD_EVENTING_DELIVERY_MODE;
typedef struct _WSD_LOCALIZED_STRING WSD_LOCALIZED_STRING;

// 
// Structure definition WSD_RELATIONSHIP_METADATA
// 
struct _WSD_RELATIONSHIP_METADATA
{
    const WCHAR* Type;
    WSD_HOST_METADATA* Data;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_SERVICE_METADATA_LIST
// 
struct _WSD_SERVICE_METADATA_LIST
{
    WSD_SERVICE_METADATA_LIST* Next;
    WSD_SERVICE_METADATA* Element;
};

// 
// Structure definition WSD_HOST_METADATA
// 
struct _WSD_HOST_METADATA
{
    WSD_SERVICE_METADATA* Host; // optional
    WSD_SERVICE_METADATA_LIST* Hosted; // optional
};

// 
// Structure definition WSD_ENDPOINT_REFERENCE_LIST
// 
struct _WSD_ENDPOINT_REFERENCE_LIST
{
    WSD_ENDPOINT_REFERENCE_LIST* Next;
    WSD_ENDPOINT_REFERENCE* Element;
};

// 
// Structure definition WSD_SERVICE_METADATA
// 
struct _WSD_SERVICE_METADATA
{
    WSD_ENDPOINT_REFERENCE_LIST* EndpointReference;
    WSD_NAME_LIST* Types; // optional
    const WCHAR* ServiceId;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_THIS_DEVICE_METADATA
// 
struct _WSD_THIS_DEVICE_METADATA
{
    WSD_LOCALIZED_STRING_LIST* FriendlyName;
    const WCHAR* FirmwareVersion; // optional
    const WCHAR* SerialNumber; // optional
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_THIS_MODEL_METADATA
// 
struct _WSD_THIS_MODEL_METADATA
{
    WSD_LOCALIZED_STRING_LIST* Manufacturer;
    const WCHAR* ManufacturerUrl; // optional
    WSD_LOCALIZED_STRING_LIST* ModelName;
    const WCHAR* ModelNumber; // optional
    const WCHAR* ModelUrl; // optional
    const WCHAR* PresentationUrl; // optional
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_LOCALIZED_STRING_LIST
// 
struct _WSD_LOCALIZED_STRING_LIST
{
    WSD_LOCALIZED_STRING_LIST* Next;
    WSD_LOCALIZED_STRING* Element;
};

// 
// Structure definition WSD_SOAP_FAULT_REASON
// 
struct _WSD_SOAP_FAULT_REASON
{
    WSD_LOCALIZED_STRING_LIST* Text;
};

// 
// Structure definition WSD_SOAP_FAULT_SUBCODE
// 
struct _WSD_SOAP_FAULT_SUBCODE
{
    WSDXML_NAME* Value;
    WSD_SOAP_FAULT_SUBCODE* Subcode; // optional
};

// 
// Structure definition WSD_SOAP_FAULT_CODE
// 
struct _WSD_SOAP_FAULT_CODE
{
    WSDXML_NAME* Value;
    WSD_SOAP_FAULT_SUBCODE* Subcode; // optional
};

// 
// Structure definition WSD_SOAP_FAULT
// 
struct _WSD_SOAP_FAULT
{
    WSD_SOAP_FAULT_CODE* Code;
    WSD_SOAP_FAULT_REASON* Reason;
    const WCHAR* Node; // optional
    const WCHAR* Role; // optional
    WSDXML_ELEMENT* Detail; // optional
};

// 
// Structure definition WSD_APP_SEQUENCE
// 
struct _WSD_APP_SEQUENCE
{
    ULONGLONG InstanceId;
    const WCHAR* SequenceId; // optional
    ULONGLONG MessageNumber;
};

// 
// Structure definition WSD_HEADER_RELATESTO
// 
struct _WSD_HEADER_RELATESTO
{
    WSDXML_NAME* RelationshipType; // optional
    const WCHAR* MessageID;
};

// 
// Structure definition WSD_SOAP_HEADER
// 
struct _WSD_SOAP_HEADER
{
    const WCHAR* To;
    const WCHAR* Action;
    const WCHAR* MessageID; // optional
    WSD_HEADER_RELATESTO RelatesTo; // optional
    WSD_ENDPOINT_REFERENCE* ReplyTo; // optional
    WSD_ENDPOINT_REFERENCE* From; // optional
    WSD_ENDPOINT_REFERENCE* FaultTo; // optional
    WSD_APP_SEQUENCE* AppSequence; // optional
    WSDXML_ELEMENT* AnyHeaders;
};

// 
// Structure definition WSD_SOAP_MESSAGE
// 
struct _WSD_SOAP_MESSAGE
{
    WSD_SOAP_HEADER Header;
    void* Body;
    WSDXML_TYPE* BodyType;
};

// 
// Structure definition WSD_RESOLVE_MATCHES
// 
struct _WSD_RESOLVE_MATCHES
{
    WSD_RESOLVE_MATCH* ResolveMatch; // optional
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_RESOLVE_MATCH
// 
struct _WSD_RESOLVE_MATCH
{
    WSD_ENDPOINT_REFERENCE* EndpointReference;
    WSD_NAME_LIST* Types; // optional
    WSD_SCOPES* Scopes; // optional
    WSD_URI_LIST* XAddrs;
    ULONGLONG MetadataVersion;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_RESOLVE
// 
struct _WSD_RESOLVE
{
    WSD_ENDPOINT_REFERENCE* EndpointReference;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_PROBE_MATCH
// 
struct _WSD_PROBE_MATCH
{
    WSD_ENDPOINT_REFERENCE* EndpointReference;
    WSD_NAME_LIST* Types; // optional
    WSD_SCOPES* Scopes; // optional
    WSD_URI_LIST* XAddrs; // optional
    ULONGLONG MetadataVersion;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_PROBE_MATCH_LIST
// 
struct _WSD_PROBE_MATCH_LIST
{
    WSD_PROBE_MATCH_LIST* Next;
    WSD_PROBE_MATCH* Element;
};

// 
// Structure definition WSD_PROBE_MATCHES
// 
struct _WSD_PROBE_MATCHES
{
    WSD_PROBE_MATCH_LIST* ProbeMatch;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_PROBE
// 
struct _WSD_PROBE
{
    WSD_NAME_LIST* Types; // optional
    WSD_SCOPES* Scopes; // optional
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_BYE
// 
struct _WSD_BYE
{
    WSD_ENDPOINT_REFERENCE* EndpointReference;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_SCOPES
// 
struct _WSD_SCOPES
{
    const WCHAR* MatchBy; // optional
    WSD_URI_LIST* Scopes; // optional
};

// 
// Structure definition WSD_NAME_LIST
// 
struct _WSD_NAME_LIST
{
    WSD_NAME_LIST* Next;
    WSDXML_NAME* Element;
};

// 
// Structure definition WSD_HELLO
// 
struct _WSD_HELLO
{
    WSD_ENDPOINT_REFERENCE* EndpointReference;
    WSD_NAME_LIST* Types; // optional
    WSD_SCOPES* Scopes; // optional
    WSD_URI_LIST* XAddrs; // optional
    ULONGLONG MetadataVersion;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_REFERENCE_PARAMETERS
// 
struct _WSD_REFERENCE_PARAMETERS
{
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_REFERENCE_PROPERTIES
// 
struct _WSD_REFERENCE_PROPERTIES
{
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_ENDPOINT_REFERENCE
// 
struct _WSD_ENDPOINT_REFERENCE
{
    const WCHAR* Address;
    WSD_REFERENCE_PROPERTIES ReferenceProperties; // optional
    WSD_REFERENCE_PARAMETERS ReferenceParameters; // optional
    WSDXML_NAME* PortType; // optional
    WSDXML_NAME* ServiceName; // optional
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_METADATA_SECTION
// 
struct _WSD_METADATA_SECTION
{
    const WCHAR* Dialect;
    const WCHAR* Identifier; // optional
    void* Data;
    WSD_ENDPOINT_REFERENCE* MetadataReference;
    const WCHAR* Location;
    WSDXML_ELEMENT* Any; // optional
};

// 
// Structure definition WSD_METADATA_SECTION_LIST
// 
struct _WSD_METADATA_SECTION_LIST
{
    WSD_METADATA_SECTION_LIST* Next;
    WSD_METADATA_SECTION* Element;
};

// 
// Structure definition WSD_URI_LIST
// 
struct _WSD_URI_LIST
{
    WSD_URI_LIST* Next;
    const WCHAR* Element;
};

// 
// Structure definition WSD_EVENTING_FILTER_ACTION
// 
struct _WSD_EVENTING_FILTER_ACTION
{
    WSD_URI_LIST* Actions;
};

// 
// Structure definition WSD_EVENTING_FILTER
// 
struct _WSD_EVENTING_FILTER
{
    const WCHAR* Dialect; // optional
    WSD_EVENTING_FILTER_ACTION* FilterAction;
    void* Data;
};

// 
// Structure definition WSD_EVENTING_EXPIRES
// 
struct _WSD_EVENTING_EXPIRES
{
    WSD_DURATION* Duration;
    WSD_DATETIME* DateTime;
};

// 
// Structure definition WSD_EVENTING_DELIVERY_MODE_PUSH
// 
struct _WSD_EVENTING_DELIVERY_MODE_PUSH
{
    WSD_ENDPOINT_REFERENCE* NotifyTo;
};

// 
// Structure definition WSD_EVENTING_DELIVERY_MODE
// 
struct _WSD_EVENTING_DELIVERY_MODE
{
    const WCHAR* Mode; // optional
    WSD_EVENTING_DELIVERY_MODE_PUSH* Push;
    void* Data;
};

// 
// Structure definition WSD_LOCALIZED_STRING
// 
struct _WSD_LOCALIZED_STRING
{
    const WCHAR* lang; // optional
    const WCHAR* String;
};

#define TYPE_ENCODING_WSD_RELATIONSHIP_METADATA WSDXML_TYPE_ENCODING(0,0)
extern WSDXML_TYPE Type_WSD_RELATIONSHIP_METADATA;

#define TYPE_ENCODING_WSD_HOST_METADATA WSDXML_TYPE_ENCODING(1,0)
extern WSDXML_TYPE Type_WSD_HOST_METADATA;

#define TYPE_ENCODING_WSD_SERVICE_METADATA WSDXML_TYPE_ENCODING(2,0)
extern WSDXML_TYPE Type_WSD_SERVICE_METADATA;

#define TYPE_ENCODING_WSD_THIS_DEVICE_METADATA WSDXML_TYPE_ENCODING(3,0)
extern WSDXML_TYPE Type_WSD_THIS_DEVICE_METADATA;

#define TYPE_ENCODING_WSD_THIS_MODEL_METADATA WSDXML_TYPE_ENCODING(4,0)
extern WSDXML_TYPE Type_WSD_THIS_MODEL_METADATA;

#define TYPE_ENCODING_WSD_SOAP_FAULT_REASON WSDXML_TYPE_ENCODING(5,0)
extern WSDXML_TYPE Type_WSD_SOAP_FAULT_REASON;

#define TYPE_ENCODING_WSD_SOAP_FAULT_SUBCODE WSDXML_TYPE_ENCODING(6,0)
extern WSDXML_TYPE Type_WSD_SOAP_FAULT_SUBCODE;

#define TYPE_ENCODING_WSD_SOAP_FAULT_CODE WSDXML_TYPE_ENCODING(7,0)
extern WSDXML_TYPE Type_WSD_SOAP_FAULT_CODE;

#define TYPE_ENCODING_WSD_SOAP_FAULT WSDXML_TYPE_ENCODING(8,0)
extern WSDXML_TYPE Type_WSD_SOAP_FAULT;

#define TYPE_ENCODING_WSD_APP_SEQUENCE WSDXML_TYPE_ENCODING(9,0)
extern WSDXML_TYPE Type_WSD_APP_SEQUENCE;

#define TYPE_ENCODING_WSD_HEADER_RELATESTO WSDXML_TYPE_ENCODING(10,0)
extern WSDXML_TYPE Type_WSD_HEADER_RELATESTO;

#define TYPE_ENCODING_WSD_SOAP_HEADER WSDXML_TYPE_ENCODING(11,0)
extern WSDXML_TYPE Type_WSD_SOAP_HEADER;

#define TYPE_ENCODING_WSD_SOAP_MESSAGE WSDXML_TYPE_ENCODING(12,0)
extern WSDXML_TYPE Type_WSD_SOAP_MESSAGE;

#define TYPE_ENCODING_WSD_RESOLVE_MATCHES WSDXML_TYPE_ENCODING(13,0)
extern WSDXML_TYPE Type_WSD_RESOLVE_MATCHES;

#define TYPE_ENCODING_WSD_RESOLVE_MATCH WSDXML_TYPE_ENCODING(14,0)
extern WSDXML_TYPE Type_WSD_RESOLVE_MATCH;

#define TYPE_ENCODING_WSD_RESOLVE WSDXML_TYPE_ENCODING(15,0)
extern WSDXML_TYPE Type_WSD_RESOLVE;

#define TYPE_ENCODING_WSD_PROBE_MATCH WSDXML_TYPE_ENCODING(16,0)
extern WSDXML_TYPE Type_WSD_PROBE_MATCH;

#define TYPE_ENCODING_WSD_PROBE_MATCHES WSDXML_TYPE_ENCODING(17,0)
extern WSDXML_TYPE Type_WSD_PROBE_MATCHES;

#define TYPE_ENCODING_WSD_PROBE WSDXML_TYPE_ENCODING(18,0)
extern WSDXML_TYPE Type_WSD_PROBE;

#define TYPE_ENCODING_WSD_BYE WSDXML_TYPE_ENCODING(19,0)
extern WSDXML_TYPE Type_WSD_BYE;

#define TYPE_ENCODING_WSD_SCOPES WSDXML_TYPE_ENCODING(20,0)
extern WSDXML_TYPE Type_WSD_SCOPES;

#define TYPE_ENCODING_WSD_HELLO WSDXML_TYPE_ENCODING(21,0)
extern WSDXML_TYPE Type_WSD_HELLO;

#define TYPE_ENCODING_WSD_REFERENCE_PARAMETERS WSDXML_TYPE_ENCODING(22,0)
extern WSDXML_TYPE Type_WSD_REFERENCE_PARAMETERS;

#define TYPE_ENCODING_WSD_REFERENCE_PROPERTIES WSDXML_TYPE_ENCODING(23,0)
extern WSDXML_TYPE Type_WSD_REFERENCE_PROPERTIES;

#define TYPE_ENCODING_WSD_ENDPOINT_REFERENCE WSDXML_TYPE_ENCODING(24,0)
extern WSDXML_TYPE Type_WSD_ENDPOINT_REFERENCE;

#define TYPE_ENCODING_WSD_METADATA_SECTION WSDXML_TYPE_ENCODING(25,0)
extern WSDXML_TYPE Type_WSD_METADATA_SECTION;

#define TYPE_ENCODING_WSD_EVENTING_FILTER_ACTION WSDXML_TYPE_ENCODING(26,0)
extern WSDXML_TYPE Type_WSD_EVENTING_FILTER_ACTION;

#define TYPE_ENCODING_WSD_EVENTING_FILTER WSDXML_TYPE_ENCODING(27,0)
extern WSDXML_TYPE Type_WSD_EVENTING_FILTER;

#define TYPE_ENCODING_WSD_EVENTING_EXPIRES WSDXML_TYPE_ENCODING(28,0)
extern WSDXML_TYPE Type_WSD_EVENTING_EXPIRES;

#define TYPE_ENCODING_WSD_EVENTING_DELIVERY_MODE_PUSH WSDXML_TYPE_ENCODING(29,0)
extern WSDXML_TYPE Type_WSD_EVENTING_DELIVERY_MODE_PUSH;

#define TYPE_ENCODING_WSD_EVENTING_DELIVERY_MODE WSDXML_TYPE_ENCODING(30,0)
extern WSDXML_TYPE Type_WSD_EVENTING_DELIVERY_MODE;

#define TYPE_ENCODING_WSD_LOCALIZED_STRING WSDXML_TYPE_ENCODING(31,0)
extern WSDXML_TYPE Type_WSD_LOCALIZED_STRING;

#define TYPE_ENCODING_WSD11_RESOLVE_MATCH WSDXML_TYPE_ENCODING(32,0)
extern WSDXML_TYPE Type_WSD11_RESOLVE_MATCH;

#define TYPE_ENCODING_WSD11_RESOLVE_MATCHES WSDXML_TYPE_ENCODING(33,0)
extern WSDXML_TYPE Type_WSD11_RESOLVE_MATCHES;

#define TYPE_ENCODING_WSD11_RESOLVE WSDXML_TYPE_ENCODING(34,0)
extern WSDXML_TYPE Type_WSD11_RESOLVE;

#define TYPE_ENCODING_WSD11_PROBE_MATCH WSDXML_TYPE_ENCODING(35,0)
extern WSDXML_TYPE Type_WSD11_PROBE_MATCH;

#define TYPE_ENCODING_WSD11_PROBE_MATCHES WSDXML_TYPE_ENCODING(36,0)
extern WSDXML_TYPE Type_WSD11_PROBE_MATCHES;

#define TYPE_ENCODING_WSD11_PROBE WSDXML_TYPE_ENCODING(37,0)
extern WSDXML_TYPE Type_WSD11_PROBE;

#define TYPE_ENCODING_WSD11_BYE WSDXML_TYPE_ENCODING(38,0)
extern WSDXML_TYPE Type_WSD11_BYE;

#define TYPE_ENCODING_WSD11_HELLO WSDXML_TYPE_ENCODING(39,0)
extern WSDXML_TYPE Type_WSD11_HELLO;


extern WSDXML_TYPE* WSDTypes[40];

// WSDRegisterTypes is used to register field types
// with an XML context so it can look up matching type tables.
#define WSDRegisterTypes(pContext) pContext->SetTypes(WSDTypes,(sizeof(WSDTypes) / sizeof(WSDTypes[0])),0)

//
// Port type http://schemas.xmlsoap.org/ws/2004/09/mex/mex
// Message structure definitions
//
typedef struct
{
    WSD_METADATA_SECTION_LIST* Metadata;
}
RESPONSEBODY_GetMetadata;

//
// Port type http://schemas.xmlsoap.org/ws/2004/08/eventing/Eventing
// Message structure definitions
//
typedef struct
{
    WSD_ENDPOINT_REFERENCE* EndTo;
    WSD_EVENTING_DELIVERY_MODE* Delivery;
    WSD_EVENTING_EXPIRES* Expires;
    WSD_EVENTING_FILTER* Filter;
    WSDXML_ELEMENT* Any;
}
REQUESTBODY_Subscribe;

typedef struct
{
    WSD_ENDPOINT_REFERENCE* SubscriptionManager;
    WSD_EVENTING_EXPIRES* expires;
    WSDXML_ELEMENT* any;
}
RESPONSEBODY_Subscribe;

typedef struct
{
    WSD_EVENTING_EXPIRES* Expires;
    WSDXML_ELEMENT* Any;
}
REQUESTBODY_Renew;

typedef struct
{
    WSD_EVENTING_EXPIRES* expires;
    WSDXML_ELEMENT* any;
}
RESPONSEBODY_Renew;

typedef struct
{
    WSDXML_ELEMENT* Any;
}
REQUESTBODY_GetStatus;

typedef struct
{
    WSD_EVENTING_EXPIRES* expires;
    WSDXML_ELEMENT* any;
}
RESPONSEBODY_GetStatus;

typedef struct
{
    WSDXML_ELEMENT* any;
}
REQUESTBODY_Unsubscribe;

//
// Port type http://schemas.xmlsoap.org/ws/2004/08/eventing/EventSink
// Message structure definitions
//
typedef struct
{
    WSD_ENDPOINT_REFERENCE* SubscriptionManager;
    const WCHAR* Status;
    WSD_LOCALIZED_STRING* Reason;
    WSDXML_ELEMENT* Any;
}
RESPONSEBODY_SubscriptionEnd;

 

typedef struct _WSD_UNKNOWN_LOOKUP
{
    WSDXML_ELEMENT* Any;
} WSD_UNKNOWN_LOOKUP;

struct _WSD_EVENT
{
    HRESULT Hr;
    DWORD EventType;
    WCHAR* DispatchTag;
    WSD_HANDLER_CONTEXT HandlerContext;
    WSD_SOAP_MESSAGE* Soap;
    WSD_OPERATION* Operation;
    IWSDMessageParameters* MessageParameters;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsipv6ok.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    wsipv6ok.h
    
Abstract:

    This module contains defines used to flag usage of IPv6 incompatible
    defines, stuctures and functions.  They cause *cryptic* compile time
    error messages to be generated.  Currently, this header is only
    included from winsock2.h.

    NOTE: The compile time flag, IPV6STRICT, must be defined.

--*/

#ifndef _WSIPV6OK_
#define _WSIPV6OK_

#pragma once

#ifdef IPV6STRICT

//
// prevent substitutions in these headers by including them first.
//
#include <ws2tcpip.h>
#include <wspiapi.h>

#undef AF_INET
#define AF_INET AF_INET_IPV6INCOMPATIBLE
#undef PF_INET
#define PF_INET PF_INET_IPV6INCOMPATIBLE
#undef in_addr
#define in_addr in_addr_IPV6INCOMPATIBLE
#undef IN_ADDR
#define IN_ADDR IN_ADDR_IPV6INCOMPATIBLE
#undef PIN_ADDR
#define PIN_ADDR PIN_ADDR_IPV6INCOMPATIBLE
#undef LPIN_ADDR
#define LPIN_ADDR LPIN_ADDR_IPV6INCOMPATIBLE
#undef IPAddr
#define IPAddr IPAddr_IPV6INCOMPATIBLE
#undef sockaddr_in
#define sockaddr_in sockaddr_in_IPV6INCOMPATIBLE
#undef SOCKADDR_IN
#define SOCKADDR_IN SOCKADDR_IN_IPV6INCOMPATIBLE
#undef PSOCKADDR_IN
#define PSOCKADDR_IN PSOCKADDR_IN_IPV6INCOMPATIBLE
#undef LPSOCKADDR_IN
#define LPSOCKADDR_IN LPSOCKADDR_IN_IPV6INCOMPATIBLE
#undef INADDR_ANY
#define INADDR_ANY INADDR_ANY_IPV6INCOMPATIBLE
#undef INADDR_LOOPBACK
#define INADDR_LOOPBACK INADDR_LOOPBACK_IPV6INCOMPATIBLE
#undef IPPROTO_IP
#define IPPROTO_IP IPPROTO_IP_IPV6INCOMPATIBLE
#undef IP_MULTICAST_IF
#define IP_MULTICAST_IF IP_MULTICAST_IF_IPV6INCOMPATIBLE
#undef IP_MULTICAST_TTL
#define IP_MULTICAST_TTL IP_MULTICAST_TTL_IPV6INCOMPATIBLE
#undef IP_MULTICAST_LOOP
#define IP_MULTICAST_LOOP IP_MULTICAST_LOOP_IPV6INCOMPATIBLE
#undef IP_ADD_MEMBERSHIP
#define IP_ADD_MEMBERSHIP IP_ADD_MEMBERSHIP_IPV6INCOMPATIBLE
#undef IP_DROP_MEMBERSHIP
#define IP_DROP_MEMBERSHIP IP_DROP_MEMBERSHIP_IPV6INCOMPATIBLE
#undef ip_mreq
#define ip_mreq ip_mreq_IPV6INCOMPATIBLE
#undef gethostbyname
#define gethostbyname(a) gethostbyname_IPV6INCOMPATIBLE
#undef hostent
#define hostent hostent_IPV6INCOMPATIBLE
#undef HOSTENT
#define HOSTENT HOSTENT_IPV6INCOMPATIBLE
#undef PHOSTENT
#define PHOSTENT PHOSTENT_IPV6INCOMPATIBLE
#undef LPHOSTENT
#define LPHOSTENT LPHOSTENT_IPV6INCOMPATIBLE
#undef inet_addr
#define inet_addr(a) inet_addr_IPV6INCOMPATIBLE
#undef gethostbyaddr
#define gethostbyaddr(a,b,c) gethostbyaddr_IPV6INCOMPATIBLE
#undef inet_ntoa
#define inet_ntoa(a) inet_ntoa_IPV6INCOMPATIBLE
#undef IN_MULTICAST
#define IN_MULTICAST(a) IN_MULTICAST_IPV6INCOMPATIBLE
#undef IN_CLASSD
#define IN_CLASSD(a) IN_CLASSD_IPV6INCOMPATIBLE
#undef IP_TTL
#define IP_TTL IP_TTL_IPV6INCOMPATIBLE
#undef IN_CLASSA
#define IN_CLASSA(a) IN_CLASSA_IPV6INCOMPATIBLE
#undef IN_CLASSB
#define IN_CLASSB(a) IN_CLASSB_IPV6INCOMPATIBLE
#undef IN_CLASSC
#define IN_CLASSC(a) IN_CLASSC_IPV6INCOMPATIBLE
#undef INADDR_BROADCAST
#define INADDR_BROADCAST(a) INADDR_BROADCAST_IPV6INCOMPATIBLE
#undef WSAAsyncGetHostByAddr
#define WSAAsyncGetHostByAddr(a,b,c,d,e,f,g) WSAAsyncGetHostByAddr_IPV6INCOMPATIBLE
#undef WSAAsyncGetHostByName
#define WSAAsyncGetHostByName(a,b,c,d,e) WSAAsyncGetHostByName_IPV6INCOMPATIBLE

#endif // IPV6STRICT

#endif // _WSIPV6OK_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WSipx.h ===
/*
 *   wsipx.h
 *
 *   Microsoft Windows
 *   Copyright (C) Microsoft Corporation, 1992-1999.
 *
 *   Windows Sockets include file for IPX/SPX.  This file contains all
 *   standardized IPX/SPX information.  Include this header file after
 *   winsock.h.
 *
 *   To open an IPX socket, call socket() with an address family of
 *   AF_IPX, a socket type of SOCK_DGRAM, and protocol NSPROTO_IPX.
 *   Note that the protocol value must be specified, it cannot be 0.
 *   All IPX packets are sent with the packet type field of the IPX
 *   header set to 0.
 *
 *   To open an SPX or SPXII socket, call socket() with an address
 *   family of AF_IPX, socket type of SOCK_SEQPACKET or SOCK_STREAM,
 *   and protocol of NSPROTO_SPX or NSPROTO_SPXII.  If SOCK_SEQPACKET
 *   is specified, then the end of message bit is respected, and
 *   recv() calls are not completed until a packet is received with
 *   the end of message bit set.  If SOCK_STREAM is specified, then
 *   the end of message bit is not respected, and recv() completes
 *   as soon as any data is received, regardless of the setting of the
 *   end of message bit.  Send coalescing is never performed, and sends
 *   smaller than a single packet are always sent with the end of
 *   message bit set.  Sends larger than a single packet are packetized
 *   with the end of message bit set on only the last packet of the
 *   send.
 *
 */

#ifndef _WSIPX_
#define _WSIPX_

#if _MSC_VER > 1000
#pragma once
#endif

/*
 *   This is the structure of the SOCKADDR structure for IPX and SPX.
 *
 */

typedef struct sockaddr_ipx {
    short sa_family;
    char  sa_netnum[4];
    char  sa_nodenum[6];
    unsigned short sa_socket;
} SOCKADDR_IPX, *PSOCKADDR_IPX,FAR *LPSOCKADDR_IPX;

/*
 *   Protocol families used in the "protocol" parameter of the socket() API.
 *
 */

#define NSPROTO_IPX      1000
#define NSPROTO_SPX      1256
#define NSPROTO_SPXII    1257

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdbase.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsdbase.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsdbase_h__
#define __wsdbase_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDAddress_FWD_DEFINED__
#define __IWSDAddress_FWD_DEFINED__
typedef interface IWSDAddress IWSDAddress;
#endif 	/* __IWSDAddress_FWD_DEFINED__ */


#ifndef __IWSDTransportAddress_FWD_DEFINED__
#define __IWSDTransportAddress_FWD_DEFINED__
typedef interface IWSDTransportAddress IWSDTransportAddress;
#endif 	/* __IWSDTransportAddress_FWD_DEFINED__ */


#ifndef __IWSDMessageParameters_FWD_DEFINED__
#define __IWSDMessageParameters_FWD_DEFINED__
typedef interface IWSDMessageParameters IWSDMessageParameters;
#endif 	/* __IWSDMessageParameters_FWD_DEFINED__ */


#ifndef __IWSDUdpMessageParameters_FWD_DEFINED__
#define __IWSDUdpMessageParameters_FWD_DEFINED__
typedef interface IWSDUdpMessageParameters IWSDUdpMessageParameters;
#endif 	/* __IWSDUdpMessageParameters_FWD_DEFINED__ */


#ifndef __IWSDUdpAddress_FWD_DEFINED__
#define __IWSDUdpAddress_FWD_DEFINED__
typedef interface IWSDUdpAddress IWSDUdpAddress;
#endif 	/* __IWSDUdpAddress_FWD_DEFINED__ */


#ifndef __IWSDHttpMessageParameters_FWD_DEFINED__
#define __IWSDHttpMessageParameters_FWD_DEFINED__
typedef interface IWSDHttpMessageParameters IWSDHttpMessageParameters;
#endif 	/* __IWSDHttpMessageParameters_FWD_DEFINED__ */


#ifndef __IWSDHttpAddress_FWD_DEFINED__
#define __IWSDHttpAddress_FWD_DEFINED__
typedef interface IWSDHttpAddress IWSDHttpAddress;
#endif 	/* __IWSDHttpAddress_FWD_DEFINED__ */


#ifndef __IWSDSSLClientCertificate_FWD_DEFINED__
#define __IWSDSSLClientCertificate_FWD_DEFINED__
typedef interface IWSDSSLClientCertificate IWSDSSLClientCertificate;
#endif 	/* __IWSDSSLClientCertificate_FWD_DEFINED__ */


#ifndef __IWSDSignatureProperty_FWD_DEFINED__
#define __IWSDSignatureProperty_FWD_DEFINED__
typedef interface IWSDSignatureProperty IWSDSignatureProperty;
#endif 	/* __IWSDSignatureProperty_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "wincrypt.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsdbase_0000_0000 */
/* [local] */ 







#if (WINVER >= _WIN32_WINNT_WIN7)
typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wsdbase_0000_0000_0001
    {	WSD_CONFIG_MAX_INBOUND_MESSAGE_SIZE	= 1,
	WSD_CONFIG_MAX_OUTBOUND_MESSAGE_SIZE	= 2,
	WSD_SECURITY_SSL_CERT_FOR_CLIENT_AUTH	= 3,
	WSD_SECURITY_SSL_SERVER_CERT_VALIDATION	= 4,
	WSD_SECURITY_SSL_CLIENT_CERT_VALIDATION	= 5,
	WSD_SECURITY_SSL_NEGOTIATE_CLIENT_CERT	= 6,
	WSD_SECURITY_COMPACTSIG_SIGNING_CERT	= 7,
	WSD_SECURITY_COMPACTSIG_VALIDATION	= 8,
	WSD_CONFIG_HOSTING_ADDRESSES	= 9,
	WSD_CONFIG_DEVICE_ADDRESSES	= 10
    } 	WSD_CONFIG_PARAM_TYPE;

typedef struct _WSD_CONFIG_PARAM
    {
    WSD_CONFIG_PARAM_TYPE configParamType;
    PVOID pConfigData;
    DWORD dwConfigDataSize;
    } 	WSD_CONFIG_PARAM;

typedef struct _WSD_CONFIG_PARAM *PWSD_CONFIG_PARAM;

typedef struct _WSD_SECURITY_CERT_VALIDATION
    {
    PCCERT_CONTEXT *certMatchArray;
    DWORD dwCertMatchArrayCount;
    HCERTSTORE hCertMatchStore;
    HCERTSTORE hCertIssuerStore;
    DWORD dwCertCheckOptions;
    } 	WSD_SECURITY_CERT_VALIDATION;

typedef struct _WSD_SECURITY_CERT_VALIDATION *PWSD_SECURITY_CERT_VALIDATION;

typedef struct _WSD_SECURITY_SIGNATURE_VALIDATION
    {
    PCCERT_CONTEXT *signingCertArray;
    DWORD dwSigningCertArrayCount;
    HCERTSTORE hSigningCertStore;
    DWORD dwFlags;
    } 	WSD_SECURITY_SIGNATURE_VALIDATION;

typedef struct _WSD_SECURITY_SIGNATURE_VALIDATION *PWSD_SECURITY_SIGNATURE_VALIDATION;

#define WSDAPI_SSL_CERT_APPLY_DEFAULT_CHECKS     0x0
#define WSDAPI_SSL_CERT_IGNORE_REVOCATION        0x1
#define WSDAPI_SSL_CERT_IGNORE_EXPIRY            0x2
#define WSDAPI_SSL_CERT_IGNORE_WRONG_USAGE       0x4
#define WSDAPI_SSL_CERT_IGNORE_UNKNOWN_CA        0x8
#define WSDAPI_SSL_CERT_IGNORE_INVALID_CN        0x10
#define WSDAPI_COMPACTSIG_ACCEPT_ALL_MESSAGES    0x1
typedef struct _WSD_CONFIG_ADDRESSES
    {
    IWSDAddress **addresses;
    DWORD dwAddressCount;
    } 	WSD_CONFIG_ADDRESSES;

typedef struct _WSD_CONFIG_ADDRESSES *PWSD_CONFIG_ADDRESSES;

#endif
#define WSDAPI_ADDRESSFAMILY_IPV4 1
#define WSDAPI_ADDRESSFAMILY_IPV6 2


extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDAddress_INTERFACE_DEFINED__
#define __IWSDAddress_INTERFACE_DEFINED__

/* interface IWSDAddress */
/* [local][uuid][object] */ 




EXTERN_C const IID IID_IWSDAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b9574c6c-12a6-4f74-93a1-3318ff605759")
    IWSDAddress : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Serialize( 
            /* [annotation][size_is][out] */ 
            __out_ecount(cchLength)  LPWSTR pszBuffer,
            /* [in] */ DWORD cchLength,
            /* [in] */ BOOL fSafe) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Deserialize( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszBuffer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            IWSDAddress * This,
            /* [annotation][size_is][out] */ 
            __out_ecount(cchLength)  LPWSTR pszBuffer,
            /* [in] */ DWORD cchLength,
            /* [in] */ BOOL fSafe);
        
        HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
            IWSDAddress * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszBuffer);
        
        END_INTERFACE
    } IWSDAddressVtbl;

    interface IWSDAddress
    {
        CONST_VTBL struct IWSDAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDAddress_Serialize(This,pszBuffer,cchLength,fSafe)	\
    ( (This)->lpVtbl -> Serialize(This,pszBuffer,cchLength,fSafe) ) 

#define IWSDAddress_Deserialize(This,pszBuffer)	\
    ( (This)->lpVtbl -> Deserialize(This,pszBuffer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDAddress_INTERFACE_DEFINED__ */


#ifndef __IWSDTransportAddress_INTERFACE_DEFINED__
#define __IWSDTransportAddress_INTERFACE_DEFINED__

/* interface IWSDTransportAddress */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDTransportAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70d23498-4ee6-4340-a3df-d845d2235467")
    IWSDTransportAddress : public IWSDAddress
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPort( 
            /* [annotation][out] */ 
            __out  WORD *pwPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPort( 
            /* [in] */ WORD wPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTransportAddress( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTransportAddressEx( 
            /* [in] */ BOOL fSafe,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTransportAddress( 
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDTransportAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDTransportAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDTransportAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDTransportAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            IWSDTransportAddress * This,
            /* [annotation][size_is][out] */ 
            __out_ecount(cchLength)  LPWSTR pszBuffer,
            /* [in] */ DWORD cchLength,
            /* [in] */ BOOL fSafe);
        
        HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
            IWSDTransportAddress * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IWSDTransportAddress * This,
            /* [annotation][out] */ 
            __out  WORD *pwPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetPort )( 
            IWSDTransportAddress * This,
            /* [in] */ WORD wPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddress )( 
            IWSDTransportAddress * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddressEx )( 
            IWSDTransportAddress * This,
            /* [in] */ BOOL fSafe,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransportAddress )( 
            IWSDTransportAddress * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszAddress);
        
        END_INTERFACE
    } IWSDTransportAddressVtbl;

    interface IWSDTransportAddress
    {
        CONST_VTBL struct IWSDTransportAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDTransportAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDTransportAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDTransportAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDTransportAddress_Serialize(This,pszBuffer,cchLength,fSafe)	\
    ( (This)->lpVtbl -> Serialize(This,pszBuffer,cchLength,fSafe) ) 

#define IWSDTransportAddress_Deserialize(This,pszBuffer)	\
    ( (This)->lpVtbl -> Deserialize(This,pszBuffer) ) 


#define IWSDTransportAddress_GetPort(This,pwPort)	\
    ( (This)->lpVtbl -> GetPort(This,pwPort) ) 

#define IWSDTransportAddress_SetPort(This,wPort)	\
    ( (This)->lpVtbl -> SetPort(This,wPort) ) 

#define IWSDTransportAddress_GetTransportAddress(This,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddress(This,ppszAddress) ) 

#define IWSDTransportAddress_GetTransportAddressEx(This,fSafe,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddressEx(This,fSafe,ppszAddress) ) 

#define IWSDTransportAddress_SetTransportAddress(This,pszAddress)	\
    ( (This)->lpVtbl -> SetTransportAddress(This,pszAddress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDTransportAddress_INTERFACE_DEFINED__ */


#ifndef __IWSDMessageParameters_INTERFACE_DEFINED__
#define __IWSDMessageParameters_INTERFACE_DEFINED__

/* interface IWSDMessageParameters */
/* [uuid][object] */ 


EXTERN_C const IID IID_IWSDMessageParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1fafe8a2-e6fc-4b80-b6cf-b7d45c416d7c")
    IWSDMessageParameters : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLocalAddress( 
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLocalAddress( 
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRemoteAddress( 
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRemoteAddress( 
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLowerParameters( 
            /* [out] */ __RPC__deref_out_opt IWSDMessageParameters **ppTxParams) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDMessageParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWSDMessageParameters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWSDMessageParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWSDMessageParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalAddress )( 
            __RPC__in IWSDMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocalAddress )( 
            __RPC__in IWSDMessageParameters * This,
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteAddress )( 
            __RPC__in IWSDMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteAddress )( 
            __RPC__in IWSDMessageParameters * This,
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLowerParameters )( 
            __RPC__in IWSDMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDMessageParameters **ppTxParams);
        
        END_INTERFACE
    } IWSDMessageParametersVtbl;

    interface IWSDMessageParameters
    {
        CONST_VTBL struct IWSDMessageParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDMessageParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDMessageParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDMessageParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDMessageParameters_GetLocalAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetLocalAddress(This,ppAddress) ) 

#define IWSDMessageParameters_SetLocalAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetLocalAddress(This,pAddress) ) 

#define IWSDMessageParameters_GetRemoteAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetRemoteAddress(This,ppAddress) ) 

#define IWSDMessageParameters_SetRemoteAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetRemoteAddress(This,pAddress) ) 

#define IWSDMessageParameters_GetLowerParameters(This,ppTxParams)	\
    ( (This)->lpVtbl -> GetLowerParameters(This,ppTxParams) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDMessageParameters_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0003 */
/* [local] */ 

HRESULT WINAPI
WSDCreateUdpMessageParameters(
    IWSDUdpMessageParameters** ppTxParams);
typedef struct _WSDUdpRetransmitParams
    {
    ULONG ulSendDelay;
    ULONG ulRepeat;
    ULONG ulRepeatMinDelay;
    ULONG ulRepeatMaxDelay;
    ULONG ulRepeatUpperDelay;
    } 	WSDUdpRetransmitParams;



extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0003_v0_0_s_ifspec;

#ifndef __IWSDUdpMessageParameters_INTERFACE_DEFINED__
#define __IWSDUdpMessageParameters_INTERFACE_DEFINED__

/* interface IWSDUdpMessageParameters */
/* [uuid][object] */ 


EXTERN_C const IID IID_IWSDUdpMessageParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9934149f-8f0c-447b-aa0b-73124b0ca7f0")
    IWSDUdpMessageParameters : public IWSDMessageParameters
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetRetransmitParams( 
            /* [in] */ __RPC__in const WSDUdpRetransmitParams *pParams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRetransmitParams( 
            /* [out] */ __RPC__out WSDUdpRetransmitParams *pParams) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDUdpMessageParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWSDUdpMessageParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWSDUdpMessageParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalAddress )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocalAddress )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteAddress )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteAddress )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [in] */ __RPC__in_opt IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLowerParameters )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [out] */ __RPC__deref_out_opt IWSDMessageParameters **ppTxParams);
        
        HRESULT ( STDMETHODCALLTYPE *SetRetransmitParams )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [in] */ __RPC__in const WSDUdpRetransmitParams *pParams);
        
        HRESULT ( STDMETHODCALLTYPE *GetRetransmitParams )( 
            __RPC__in IWSDUdpMessageParameters * This,
            /* [out] */ __RPC__out WSDUdpRetransmitParams *pParams);
        
        END_INTERFACE
    } IWSDUdpMessageParametersVtbl;

    interface IWSDUdpMessageParameters
    {
        CONST_VTBL struct IWSDUdpMessageParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDUdpMessageParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDUdpMessageParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDUdpMessageParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDUdpMessageParameters_GetLocalAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetLocalAddress(This,ppAddress) ) 

#define IWSDUdpMessageParameters_SetLocalAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetLocalAddress(This,pAddress) ) 

#define IWSDUdpMessageParameters_GetRemoteAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetRemoteAddress(This,ppAddress) ) 

#define IWSDUdpMessageParameters_SetRemoteAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetRemoteAddress(This,pAddress) ) 

#define IWSDUdpMessageParameters_GetLowerParameters(This,ppTxParams)	\
    ( (This)->lpVtbl -> GetLowerParameters(This,ppTxParams) ) 


#define IWSDUdpMessageParameters_SetRetransmitParams(This,pParams)	\
    ( (This)->lpVtbl -> SetRetransmitParams(This,pParams) ) 

#define IWSDUdpMessageParameters_GetRetransmitParams(This,pParams)	\
    ( (This)->lpVtbl -> GetRetransmitParams(This,pParams) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDUdpMessageParameters_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0004 */
/* [local] */ 

HRESULT WINAPI
WSDCreateUdpAddress(
    __deref_out IWSDUdpAddress** ppAddress);
#if 1
// Forward declaration to avoid winsock2.h inclusion
#ifndef __CSADDR_DEFINED__
struct SOCKADDR_STORAGE;
#endif // __CSADDR_DEFINED__
#else  // 1
// Bogus definition used to make MIDL compiler happy
typedef void SOCKADDR_STORAGE;

#endif // 1
typedef 
enum _WSDUdpMessageType
    {	ONE_WAY	= 0,
	TWO_WAY	= ( ONE_WAY + 1 ) 
    } 	WSDUdpMessageType;



extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0004_v0_0_s_ifspec;

#ifndef __IWSDUdpAddress_INTERFACE_DEFINED__
#define __IWSDUdpAddress_INTERFACE_DEFINED__

/* interface IWSDUdpAddress */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDUdpAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74d6124a-a441-4f78-a1eb-97a8d1996893")
    IWSDUdpAddress : public IWSDTransportAddress
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSockaddr( 
            /* [in] */ const SOCKADDR_STORAGE *pSockAddr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSockaddr( 
            /* [annotation][out] */ 
            __out  SOCKADDR_STORAGE *pSockAddr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExclusive( 
            /* [in] */ BOOL fExclusive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExclusive( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMessageType( 
            /* [in] */ WSDUdpMessageType messageType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMessageType( 
            /* [annotation][out] */ 
            __out  WSDUdpMessageType *pMessageType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTTL( 
            /* [in] */ DWORD dwTTL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTTL( 
            /* [annotation][out] */ 
            __out  DWORD *pdwTTL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAlias( 
            /* [in] */ const GUID *pAlias) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAlias( 
            /* [annotation][out] */ 
            __out  GUID *pAlias) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDUdpAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDUdpAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDUdpAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDUdpAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            IWSDUdpAddress * This,
            /* [annotation][size_is][out] */ 
            __out_ecount(cchLength)  LPWSTR pszBuffer,
            /* [in] */ DWORD cchLength,
            /* [in] */ BOOL fSafe);
        
        HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
            IWSDUdpAddress * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __out  WORD *pwPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetPort )( 
            IWSDUdpAddress * This,
            /* [in] */ WORD wPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddress )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddressEx )( 
            IWSDUdpAddress * This,
            /* [in] */ BOOL fSafe,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransportAddress )( 
            IWSDUdpAddress * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetSockaddr )( 
            IWSDUdpAddress * This,
            /* [in] */ const SOCKADDR_STORAGE *pSockAddr);
        
        HRESULT ( STDMETHODCALLTYPE *GetSockaddr )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __out  SOCKADDR_STORAGE *pSockAddr);
        
        HRESULT ( STDMETHODCALLTYPE *SetExclusive )( 
            IWSDUdpAddress * This,
            /* [in] */ BOOL fExclusive);
        
        HRESULT ( STDMETHODCALLTYPE *GetExclusive )( 
            IWSDUdpAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetMessageType )( 
            IWSDUdpAddress * This,
            /* [in] */ WSDUdpMessageType messageType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMessageType )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __out  WSDUdpMessageType *pMessageType);
        
        HRESULT ( STDMETHODCALLTYPE *SetTTL )( 
            IWSDUdpAddress * This,
            /* [in] */ DWORD dwTTL);
        
        HRESULT ( STDMETHODCALLTYPE *GetTTL )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __out  DWORD *pdwTTL);
        
        HRESULT ( STDMETHODCALLTYPE *SetAlias )( 
            IWSDUdpAddress * This,
            /* [in] */ const GUID *pAlias);
        
        HRESULT ( STDMETHODCALLTYPE *GetAlias )( 
            IWSDUdpAddress * This,
            /* [annotation][out] */ 
            __out  GUID *pAlias);
        
        END_INTERFACE
    } IWSDUdpAddressVtbl;

    interface IWSDUdpAddress
    {
        CONST_VTBL struct IWSDUdpAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDUdpAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDUdpAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDUdpAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDUdpAddress_Serialize(This,pszBuffer,cchLength,fSafe)	\
    ( (This)->lpVtbl -> Serialize(This,pszBuffer,cchLength,fSafe) ) 

#define IWSDUdpAddress_Deserialize(This,pszBuffer)	\
    ( (This)->lpVtbl -> Deserialize(This,pszBuffer) ) 


#define IWSDUdpAddress_GetPort(This,pwPort)	\
    ( (This)->lpVtbl -> GetPort(This,pwPort) ) 

#define IWSDUdpAddress_SetPort(This,wPort)	\
    ( (This)->lpVtbl -> SetPort(This,wPort) ) 

#define IWSDUdpAddress_GetTransportAddress(This,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddress(This,ppszAddress) ) 

#define IWSDUdpAddress_GetTransportAddressEx(This,fSafe,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddressEx(This,fSafe,ppszAddress) ) 

#define IWSDUdpAddress_SetTransportAddress(This,pszAddress)	\
    ( (This)->lpVtbl -> SetTransportAddress(This,pszAddress) ) 


#define IWSDUdpAddress_SetSockaddr(This,pSockAddr)	\
    ( (This)->lpVtbl -> SetSockaddr(This,pSockAddr) ) 

#define IWSDUdpAddress_GetSockaddr(This,pSockAddr)	\
    ( (This)->lpVtbl -> GetSockaddr(This,pSockAddr) ) 

#define IWSDUdpAddress_SetExclusive(This,fExclusive)	\
    ( (This)->lpVtbl -> SetExclusive(This,fExclusive) ) 

#define IWSDUdpAddress_GetExclusive(This)	\
    ( (This)->lpVtbl -> GetExclusive(This) ) 

#define IWSDUdpAddress_SetMessageType(This,messageType)	\
    ( (This)->lpVtbl -> SetMessageType(This,messageType) ) 

#define IWSDUdpAddress_GetMessageType(This,pMessageType)	\
    ( (This)->lpVtbl -> GetMessageType(This,pMessageType) ) 

#define IWSDUdpAddress_SetTTL(This,dwTTL)	\
    ( (This)->lpVtbl -> SetTTL(This,dwTTL) ) 

#define IWSDUdpAddress_GetTTL(This,pdwTTL)	\
    ( (This)->lpVtbl -> GetTTL(This,pdwTTL) ) 

#define IWSDUdpAddress_SetAlias(This,pAlias)	\
    ( (This)->lpVtbl -> SetAlias(This,pAlias) ) 

#define IWSDUdpAddress_GetAlias(This,pAlias)	\
    ( (This)->lpVtbl -> GetAlias(This,pAlias) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDUdpAddress_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0005 */
/* [local] */ 

HRESULT WINAPI
WSDCreateHttpMessageParameters(
    __deref_out IWSDHttpMessageParameters** ppTxParams);


extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0005_v0_0_s_ifspec;

#ifndef __IWSDHttpMessageParameters_INTERFACE_DEFINED__
#define __IWSDHttpMessageParameters_INTERFACE_DEFINED__

/* interface IWSDHttpMessageParameters */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDHttpMessageParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("540bd122-5c83-4dec-b396-ea62a2697fdf")
    IWSDHttpMessageParameters : public IWSDMessageParameters
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetInboundHttpHeaders( 
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszHeaders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInboundHttpHeaders( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszHeaders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutboundHttpHeaders( 
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszHeaders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutboundHttpHeaders( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszHeaders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetID( 
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetID( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetContext( 
            /* [in] */ IUnknown *pContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContext( 
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDHttpMessageParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDHttpMessageParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDHttpMessageParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDHttpMessageParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalAddress )( 
            IWSDHttpMessageParameters * This,
            /* [out] */ IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocalAddress )( 
            IWSDHttpMessageParameters * This,
            /* [in] */ IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteAddress )( 
            IWSDHttpMessageParameters * This,
            /* [out] */ IWSDAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteAddress )( 
            IWSDHttpMessageParameters * This,
            /* [in] */ IWSDAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLowerParameters )( 
            IWSDHttpMessageParameters * This,
            /* [out] */ IWSDMessageParameters **ppTxParams);
        
        HRESULT ( STDMETHODCALLTYPE *SetInboundHttpHeaders )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszHeaders);
        
        HRESULT ( STDMETHODCALLTYPE *GetInboundHttpHeaders )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszHeaders);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutboundHttpHeaders )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszHeaders);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutboundHttpHeaders )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszHeaders);
        
        HRESULT ( STDMETHODCALLTYPE *SetID )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszId);
        
        HRESULT ( STDMETHODCALLTYPE *GetID )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszId);
        
        HRESULT ( STDMETHODCALLTYPE *SetContext )( 
            IWSDHttpMessageParameters * This,
            /* [in] */ IUnknown *pContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            IWSDHttpMessageParameters * This,
            /* [annotation][out] */ 
            __deref_out  IUnknown **ppContext);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IWSDHttpMessageParameters * This);
        
        END_INTERFACE
    } IWSDHttpMessageParametersVtbl;

    interface IWSDHttpMessageParameters
    {
        CONST_VTBL struct IWSDHttpMessageParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDHttpMessageParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDHttpMessageParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDHttpMessageParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDHttpMessageParameters_GetLocalAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetLocalAddress(This,ppAddress) ) 

#define IWSDHttpMessageParameters_SetLocalAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetLocalAddress(This,pAddress) ) 

#define IWSDHttpMessageParameters_GetRemoteAddress(This,ppAddress)	\
    ( (This)->lpVtbl -> GetRemoteAddress(This,ppAddress) ) 

#define IWSDHttpMessageParameters_SetRemoteAddress(This,pAddress)	\
    ( (This)->lpVtbl -> SetRemoteAddress(This,pAddress) ) 

#define IWSDHttpMessageParameters_GetLowerParameters(This,ppTxParams)	\
    ( (This)->lpVtbl -> GetLowerParameters(This,ppTxParams) ) 


#define IWSDHttpMessageParameters_SetInboundHttpHeaders(This,pszHeaders)	\
    ( (This)->lpVtbl -> SetInboundHttpHeaders(This,pszHeaders) ) 

#define IWSDHttpMessageParameters_GetInboundHttpHeaders(This,ppszHeaders)	\
    ( (This)->lpVtbl -> GetInboundHttpHeaders(This,ppszHeaders) ) 

#define IWSDHttpMessageParameters_SetOutboundHttpHeaders(This,pszHeaders)	\
    ( (This)->lpVtbl -> SetOutboundHttpHeaders(This,pszHeaders) ) 

#define IWSDHttpMessageParameters_GetOutboundHttpHeaders(This,ppszHeaders)	\
    ( (This)->lpVtbl -> GetOutboundHttpHeaders(This,ppszHeaders) ) 

#define IWSDHttpMessageParameters_SetID(This,pszId)	\
    ( (This)->lpVtbl -> SetID(This,pszId) ) 

#define IWSDHttpMessageParameters_GetID(This,ppszId)	\
    ( (This)->lpVtbl -> GetID(This,ppszId) ) 

#define IWSDHttpMessageParameters_SetContext(This,pContext)	\
    ( (This)->lpVtbl -> SetContext(This,pContext) ) 

#define IWSDHttpMessageParameters_GetContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetContext(This,ppContext) ) 

#define IWSDHttpMessageParameters_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDHttpMessageParameters_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0006 */
/* [local] */ 

HRESULT WINAPI
WSDCreateHttpAddress(
    __deref_out IWSDHttpAddress** ppAdress);


extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0006_v0_0_s_ifspec;

#ifndef __IWSDHttpAddress_INTERFACE_DEFINED__
#define __IWSDHttpAddress_INTERFACE_DEFINED__

/* interface IWSDHttpAddress */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDHttpAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d09ac7bd-2a3e-4b85-8605-2737ff3e4ea0")
    IWSDHttpAddress : public IWSDTransportAddress
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSecure( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSecure( 
            /* [in] */ BOOL fSecure) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPath( 
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPath( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDHttpAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDHttpAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDHttpAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDHttpAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            IWSDHttpAddress * This,
            /* [annotation][size_is][out] */ 
            __out_ecount(cchLength)  LPWSTR pszBuffer,
            /* [in] */ DWORD cchLength,
            /* [in] */ BOOL fSafe);
        
        HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
            IWSDHttpAddress * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IWSDHttpAddress * This,
            /* [annotation][out] */ 
            __out  WORD *pwPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetPort )( 
            IWSDHttpAddress * This,
            /* [in] */ WORD wPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddress )( 
            IWSDHttpAddress * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportAddressEx )( 
            IWSDHttpAddress * This,
            /* [in] */ BOOL fSafe,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransportAddress )( 
            IWSDHttpAddress * This,
            /* [annotation][in] */ 
            __in_opt  LPCWSTR pszAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecure )( 
            IWSDHttpAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetSecure )( 
            IWSDHttpAddress * This,
            /* [in] */ BOOL fSecure);
        
        HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IWSDHttpAddress * This,
            /* [annotation][out] */ 
            __deref_out  LPCWSTR *ppszPath);
        
        HRESULT ( STDMETHODCALLTYPE *SetPath )( 
            IWSDHttpAddress * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszPath);
        
        END_INTERFACE
    } IWSDHttpAddressVtbl;

    interface IWSDHttpAddress
    {
        CONST_VTBL struct IWSDHttpAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDHttpAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDHttpAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDHttpAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDHttpAddress_Serialize(This,pszBuffer,cchLength,fSafe)	\
    ( (This)->lpVtbl -> Serialize(This,pszBuffer,cchLength,fSafe) ) 

#define IWSDHttpAddress_Deserialize(This,pszBuffer)	\
    ( (This)->lpVtbl -> Deserialize(This,pszBuffer) ) 


#define IWSDHttpAddress_GetPort(This,pwPort)	\
    ( (This)->lpVtbl -> GetPort(This,pwPort) ) 

#define IWSDHttpAddress_SetPort(This,wPort)	\
    ( (This)->lpVtbl -> SetPort(This,wPort) ) 

#define IWSDHttpAddress_GetTransportAddress(This,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddress(This,ppszAddress) ) 

#define IWSDHttpAddress_GetTransportAddressEx(This,fSafe,ppszAddress)	\
    ( (This)->lpVtbl -> GetTransportAddressEx(This,fSafe,ppszAddress) ) 

#define IWSDHttpAddress_SetTransportAddress(This,pszAddress)	\
    ( (This)->lpVtbl -> SetTransportAddress(This,pszAddress) ) 


#define IWSDHttpAddress_GetSecure(This)	\
    ( (This)->lpVtbl -> GetSecure(This) ) 

#define IWSDHttpAddress_SetSecure(This,fSecure)	\
    ( (This)->lpVtbl -> SetSecure(This,fSecure) ) 

#define IWSDHttpAddress_GetPath(This,ppszPath)	\
    ( (This)->lpVtbl -> GetPath(This,ppszPath) ) 

#define IWSDHttpAddress_SetPath(This,pszPath)	\
    ( (This)->lpVtbl -> SetPath(This,pszPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDHttpAddress_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0007 */
/* [local] */ 

#if (WINVER >= _WIN32_WINNT_WIN7)


extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0007_v0_0_s_ifspec;

#ifndef __IWSDSSLClientCertificate_INTERFACE_DEFINED__
#define __IWSDSSLClientCertificate_INTERFACE_DEFINED__

/* interface IWSDSSLClientCertificate */
/* [local][uuid][object] */ 


EXTERN_C const IID IID_IWSDSSLClientCertificate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("de105e87-a0da-418e-98ad-27b9eed87bdc")
    IWSDSSLClientCertificate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClientCertificate( 
            /* [annotation][out][in] */ 
            __deref_out  PCCERT_CONTEXT *ppCertContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMappedAccessToken( 
            /* [annotation][out][in] */ 
            __out  HANDLE *phToken) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDSSLClientCertificateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDSSLClientCertificate * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDSSLClientCertificate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDSSLClientCertificate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientCertificate )( 
            IWSDSSLClientCertificate * This,
            /* [annotation][out][in] */ 
            __deref_out  PCCERT_CONTEXT *ppCertContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetMappedAccessToken )( 
            IWSDSSLClientCertificate * This,
            /* [annotation][out][in] */ 
            __out  HANDLE *phToken);
        
        END_INTERFACE
    } IWSDSSLClientCertificateVtbl;

    interface IWSDSSLClientCertificate
    {
        CONST_VTBL struct IWSDSSLClientCertificateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDSSLClientCertificate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDSSLClientCertificate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDSSLClientCertificate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDSSLClientCertificate_GetClientCertificate(This,ppCertContext)	\
    ( (This)->lpVtbl -> GetClientCertificate(This,ppCertContext) ) 

#define IWSDSSLClientCertificate_GetMappedAccessToken(This,phToken)	\
    ( (This)->lpVtbl -> GetMappedAccessToken(This,phToken) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDSSLClientCertificate_INTERFACE_DEFINED__ */


#ifndef __IWSDSignatureProperty_INTERFACE_DEFINED__
#define __IWSDSignatureProperty_INTERFACE_DEFINED__

/* interface IWSDSignatureProperty */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDSignatureProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03ce20aa-71c4-45e2-b32e-3766c61c790f")
    IWSDSignatureProperty : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsMessageSigned( 
            /* [annotation][out] */ 
            __out  BOOL *pbSigned) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsMessageSignatureTrusted( 
            /* [annotation][out] */ 
            __out  BOOL *pbSignatureTrusted) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKeyInfo( 
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwKeyInfoSize, *pdwKeyInfoSize)  BYTE *pbKeyInfo,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwKeyInfoSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignature( 
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwSignatureSize, *pdwSignatureSize)  BYTE *pbSignature,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwSignatureSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSignedInfoHash( 
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwHashSize, *pdwHashSize)  BYTE *pbSignedInfoHash,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwHashSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDSignaturePropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDSignatureProperty * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDSignatureProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDSignatureProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsMessageSigned )( 
            IWSDSignatureProperty * This,
            /* [annotation][out] */ 
            __out  BOOL *pbSigned);
        
        HRESULT ( STDMETHODCALLTYPE *IsMessageSignatureTrusted )( 
            IWSDSignatureProperty * This,
            /* [annotation][out] */ 
            __out  BOOL *pbSignatureTrusted);
        
        HRESULT ( STDMETHODCALLTYPE *GetKeyInfo )( 
            IWSDSignatureProperty * This,
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwKeyInfoSize, *pdwKeyInfoSize)  BYTE *pbKeyInfo,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwKeyInfoSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignature )( 
            IWSDSignatureProperty * This,
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwSignatureSize, *pdwSignatureSize)  BYTE *pbSignature,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwSignatureSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSignedInfoHash )( 
            IWSDSignatureProperty * This,
            /* [annotation][size_is][out] */ 
            __out_bcount_part_opt(*pdwHashSize, *pdwHashSize)  BYTE *pbSignedInfoHash,
            /* [annotation][out][in] */ 
            __inout  DWORD *pdwHashSize);
        
        END_INTERFACE
    } IWSDSignaturePropertyVtbl;

    interface IWSDSignatureProperty
    {
        CONST_VTBL struct IWSDSignaturePropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDSignatureProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDSignatureProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDSignatureProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDSignatureProperty_IsMessageSigned(This,pbSigned)	\
    ( (This)->lpVtbl -> IsMessageSigned(This,pbSigned) ) 

#define IWSDSignatureProperty_IsMessageSignatureTrusted(This,pbSignatureTrusted)	\
    ( (This)->lpVtbl -> IsMessageSignatureTrusted(This,pbSignatureTrusted) ) 

#define IWSDSignatureProperty_GetKeyInfo(This,pbKeyInfo,pdwKeyInfoSize)	\
    ( (This)->lpVtbl -> GetKeyInfo(This,pbKeyInfo,pdwKeyInfoSize) ) 

#define IWSDSignatureProperty_GetSignature(This,pbSignature,pdwSignatureSize)	\
    ( (This)->lpVtbl -> GetSignature(This,pbSignature,pdwSignatureSize) ) 

#define IWSDSignatureProperty_GetSignedInfoHash(This,pbSignedInfoHash,pdwHashSize)	\
    ( (This)->lpVtbl -> GetSignedInfoHash(This,pbSignedInfoHash,pdwHashSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDSignatureProperty_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wsdbase_0000_0009 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdbase_0000_0009_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WSnetbs.h ===
/*
 *   wsnetbs.h
 *   Copyright (c) 1994-1999, Microsoft Corp. All rights reserved.
 *
 *   Windows Sockets include file for NETBIOS.  This file contains all
 *   standardized NETBIOS information.  Include this header file after
 *   winsock.h.
 *
 */

#ifndef _WSNETBS_
#define _WSNETBS_

#if _MSC_VER > 1000
#pragma once
#endif

/*
 *   This is the structure of the SOCKADDR structure for NETBIOS.
 *
 */

#define NETBIOS_NAME_LENGTH 16

typedef struct sockaddr_nb {
    short   snb_family;
    u_short snb_type;
    char    snb_name[NETBIOS_NAME_LENGTH];
} SOCKADDR_NB, *PSOCKADDR_NB,FAR *LPSOCKADDR_NB;

/*
 * Bit values for the snb_type field of SOCKADDR_NB.
 *
 */

#define NETBIOS_UNIQUE_NAME         (0x0000)
#define NETBIOS_GROUP_NAME          (0x0001)
#define NETBIOS_TYPE_QUICK_UNIQUE   (0x0002)
#define NETBIOS_TYPE_QUICK_GROUP    (0x0003)

/*
 * A macro convenient for setting up NETBIOS SOCKADDRs.
 *
 */

#define SET_NETBIOS_SOCKADDR(_snb,_type,_name,_port)                          \
    {                                                                         \
        int _i;                                                               \
        (_snb)->snb_family = AF_NETBIOS;                                      \
        (_snb)->snb_type = (_type);                                           \
        for (_i=0; _i<NETBIOS_NAME_LENGTH-1; _i++) {                          \
            (_snb)->snb_name[_i] = ' ';                                       \
        }                                                                     \
        for (_i=0; *((_name)+_i) != '\0' && _i<NETBIOS_NAME_LENGTH-1; _i++) { \
            (_snb)->snb_name[_i] = *((_name)+_i);                             \
        }                                                                     \
        (_snb)->snb_name[NETBIOS_NAME_LENGTH-1] = (_port);                    \
    }

/*
 *   To open a NetBIOS socket, call the socket() function as follows:
 *
 *       s = socket( AF_NETBIOS, {SOCK_SEQPACKET|SOCK_DGRAM}, -Lana );
 *
 *   where Lana is the NetBIOS Lana number of interest.  For example, to
 *   open a socket for Lana 2, specify -2 as the "protocol" parameter
 *   to the socket() function.
 *
 */


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdxmldom.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  Component: WSDAPI - Microsoft Web Services for Devices API
// 
//  File: wsdxmldom.h
//
//  Abstract: WSDAPI XML Type Definitions
//
//--------------------------------------------------------------------------
#pragma once

// pragma once does not guard properly when included into .idl
#ifndef __WSDXMLDOM_H__
#define __WSDXMLDOM_H__

typedef struct _WSDXML_NAMESPACE WSDXML_NAMESPACE;
typedef struct _WSDXML_NAME WSDXML_NAME;
typedef struct _WSDXML_TYPE WSDXML_TYPE;
typedef struct _WSDXML_PREFIX_MAPPING WSDXML_PREFIX_MAPPING;
typedef struct _WSDXML_ATTRIBUTE WSDXML_ATTRIBUTE;
typedef struct _WSDXML_NODE WSDXML_NODE;
typedef struct _WSDXML_ELEMENT WSDXML_ELEMENT;
typedef struct _WSDXML_TEXT WSDXML_TEXT;
typedef struct _WSDXML_ELEMENT_LIST WSDXML_ELEMENT_LIST;

struct _WSDXML_NAMESPACE
{
    const WCHAR* Uri;
    const WCHAR* PreferredPrefix;
    WSDXML_NAME* Names;
    WORD NamesCount;
    WORD Encoding;
};

struct _WSDXML_NAME
{
    WSDXML_NAMESPACE* Space;
    WCHAR* LocalName;
};

struct _WSDXML_TYPE
{
    const WCHAR* Uri;
    const BYTE* Table;
};

struct _WSDXML_PREFIX_MAPPING
{
    DWORD Refs;
    WSDXML_PREFIX_MAPPING* Next;
    WSDXML_NAMESPACE* Space;
    WCHAR* Prefix;
};

struct _WSDXML_ATTRIBUTE
{
    WSDXML_ELEMENT* Element;
    WSDXML_ATTRIBUTE* Next;
    WSDXML_NAME* Name;
    WCHAR* Value;
};

struct _WSDXML_NODE
{
    enum
    {   
        ElementType,
        TextType
    } Type;
    WSDXML_ELEMENT* Parent;
    WSDXML_NODE* Next;
};

struct _WSDXML_ELEMENT
{
    WSDXML_NODE Node;
    WSDXML_NAME* Name;
    WSDXML_ATTRIBUTE* FirstAttribute;
    WSDXML_NODE* FirstChild;
    WSDXML_PREFIX_MAPPING* PrefixMappings;
};

struct _WSDXML_TEXT
{
	WSDXML_NODE Node;
    WCHAR* Text;
};

struct _WSDXML_ELEMENT_LIST
{
    WSDXML_ELEMENT_LIST* Next;
    WSDXML_ELEMENT* Element;
};

#endif //  __WSDXMLDOM_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdutil.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//  Component: WSDAPI - Microsoft Web Services for Devices API
// 
//  File: wsdutil.h
//
//  Abstract: WSDAPI Utilities
//
//--------------------------------------------------------------------------
#pragma once

//
// Helpful macros
//
#define WSD_DEFAULT_HOSTING_ADDRESS L"http://*:5357/"
#define WSD_DEFAULT_SECURE_HOSTING_ADDRESS L"https://*:5358/"
#define WSD_DEFAULT_EVENTING_ADDRESS L"http://*:5357/"

#ifdef __cplusplus
extern "C" {
#endif

//
// Configuration
//

// MessageSize: DWORD value between 32768 and 1048576
#define WSDAPI_OPTION_MAX_INBOUND_MESSAGE_SIZE 0x0001

#if (WINVER >= _WIN32_WINNT_WIN7)
// XMLDebug: Send XML strings to debugger session
#define WSDAPI_OPTION_TRACE_XML_TO_DEBUGGER 0x0002

// XMLFile: Send XML strings to file
#define WSDAPI_OPTION_TRACE_XML_TO_FILE 0x0003
#endif
    
HRESULT WINAPI
WSDSetConfigurationOption(
    DWORD dwOption,
    __in_bcount(cbInBuffer) LPVOID pVoid,
    DWORD cbInBuffer);

HRESULT WINAPI
WSDGetConfigurationOption(
    DWORD dwOption,
    __out_bcount(cbOutBuffer) LPVOID pVoid,
    DWORD cbOutBuffer);
    
//
// Linked memory
//

void * WINAPI 
WSDAllocateLinkedMemory(
    void* pParent, 
    size_t cbSize);

void WINAPI
WSDFreeLinkedMemory(
    void *pVoid);

void WINAPI
WSDAttachLinkedMemory(
    void* pParent,
    void* pChild);

void WINAPI
WSDDetachLinkedMemory(
    void* pVoid);

//
// XML helpers 
//

typedef struct _WSDXML_ELEMENT WSDXML_ELEMENT; 

HRESULT WINAPI
WSDXMLBuildAnyForSingleElement(
    WSDXML_NAME* pElementName, 
    __in_opt LPCWSTR pszText, 
    WSDXML_ELEMENT** ppAny);

HRESULT WINAPI
WSDXMLGetValueFromAny(
    __in LPCWSTR pszNamespace,
    __in LPCWSTR pszName, 
    WSDXML_ELEMENT* pAny, 
    LPCWSTR* ppszValue);

HRESULT WINAPI
WSDXMLAddSibling(
    WSDXML_ELEMENT* pFirst,
    WSDXML_ELEMENT* pSecond);

HRESULT WINAPI
WSDXMLAddChild(
    WSDXML_ELEMENT* pParent,
    WSDXML_ELEMENT* pChild);

HRESULT WINAPI
WSDXMLCleanupElement(
    WSDXML_ELEMENT* pAny);    

HRESULT WINAPI
WSDGenerateFault(
    __in LPCWSTR pszCode,
    __in_opt LPCWSTR pszSubCode,
    __in LPCWSTR pszReason,
    __in_opt LPCWSTR pszDetail,
    __in IWSDXMLContext* pContext,
    __deref_out WSD_SOAP_FAULT** ppFault);

HRESULT WINAPI
WSDGenerateFaultEx(
    __in WSDXML_NAME* pCode, 
    __in_opt WSDXML_NAME* pSubCode, 
    __in WSD_LOCALIZED_STRING_LIST* pReasons, 
    __in_opt LPCWSTR pszDetail, 
    __deref_out WSD_SOAP_FAULT** ppFault);

#if (WINVER >= _WIN32_WINNT_WIN7)
HRESULT WINAPI
WSDUriEncode(
    __in_ecount(cchSource) LPCWSTR source,
    __in DWORD cchSource,
    __out_ecount(*cchDestOut) LPWSTR *destOut,
    __out_opt DWORD *cchDestOut);

HRESULT WINAPI
WSDUriDecode(
    __in_ecount(cchSource) LPCWSTR source,
    __in DWORD cchSource,
    __out_ecount(*cchDestOut) LPWSTR *destOut,
    __out_opt DWORD *cchDestOut);
#endif

#ifdef __cplusplus
};
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsrm.h ===
/*	
**	wsrm.h - winsock extension for Reliable Multicast (RMCast) Transport
**
**	This file contains PGM specific information for use by WinSock2 compatible
**  applications that need Reliable Multicast Transport.
**
**  Copyright (c) Microsoft Corporation. All rights reserved.
**
**	Created: Mar 12, 2000
**
*/

#ifndef _WSRM_H_
#define _WSRM_H_

#pragma once

#define IPPROTO_RM      113
#define MAX_MCAST_TTL   255

//
// options for setsockopt, getsockopt
//
#define RM_OPTIONSBASE      1000

// Set/Query rate (Kb/Sec) + window size (Kb and/or MSec) -- described by RM_SEND_WINDOW below
#define RM_RATE_WINDOW_SIZE             (RM_OPTIONSBASE + 1)

// Set the size of the next message -- (ULONG)
#define RM_SET_MESSAGE_BOUNDARY         (RM_OPTIONSBASE + 2)

// flush the entire data (window) right now -- not implemented
#define RM_FLUSHCACHE                   (RM_OPTIONSBASE + 3)

// Set or Query the window advance method on the sender -- methods enumerated in eWINDOW_ADVANCE_METHOD
#define RM_SENDER_WINDOW_ADVANCE_METHOD (RM_OPTIONSBASE + 4)

// get sender statistics
#define RM_SENDER_STATISTICS            (RM_OPTIONSBASE + 5)

// allow a late-joiner to NAK any packet upto the lowest sequence Id
#define RM_LATEJOIN                     (RM_OPTIONSBASE + 6)

// set IP multicast outgoing interface
#define RM_SET_SEND_IF                  (RM_OPTIONSBASE + 7)

// add IP multicast incoming interface
#define RM_ADD_RECEIVE_IF               (RM_OPTIONSBASE + 8)

// delete IP multicast incoming interface
#define RM_DEL_RECEIVE_IF               (RM_OPTIONSBASE + 9)

// Set/Query the Window's Advance rate (has to be less that MAX_WINDOW_INCREMENT_PERCENTAGE)
#define RM_SEND_WINDOW_ADV_RATE         (RM_OPTIONSBASE + 10)

// Instruct to use parity-based forward error correction schemes
#define RM_USE_FEC                      (RM_OPTIONSBASE + 11)

// Set the Ttl of the MCast packets -- (ULONG)
#define RM_SET_MCAST_TTL                (RM_OPTIONSBASE + 12)

// get receiver statistics
#define RM_RECEIVER_STATISTICS          (RM_OPTIONSBASE + 13)

// get receiver statistics
#define RM_HIGH_SPEED_INTRANET_OPT      (RM_OPTIONSBASE + 14)

//==============================================================
//
// Definitions
//
#define     SENDER_DEFAULT_RATE_KBITS_PER_SEC        56             // 56 Kbits/Sec
#define     SENDER_DEFAULT_WINDOW_SIZE_BYTES         10 *1000*1000  // 10 Megs

#define     SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE     15             // 15%
#define     MAX_WINDOW_INCREMENT_PERCENTAGE          25             // 25%

#define     SENDER_DEFAULT_LATE_JOINER_PERCENTAGE    0              // 0%
#define     SENDER_MAX_LATE_JOINER_PERCENTAGE        75             // 75%

#define     BITS_PER_BYTE                             8
#define     LOG2_BITS_PER_BYTE                        3

enum eWINDOW_ADVANCE_METHOD
{
    E_WINDOW_ADVANCE_BY_TIME = 1,       // Default mode
    E_WINDOW_USE_AS_DATA_CACHE
};

//==============================================================
//
// Structures
//
typedef struct _RM_SEND_WINDOW
{
    ULONG   RateKbitsPerSec;            // Send rate
    ULONG   WindowSizeInMSecs;
    ULONG   WindowSizeInBytes;
} RM_SEND_WINDOW;

typedef struct _RM_SENDER_STATS
{
    ULONGLONG   DataBytesSent;          // # client data bytes sent out so far
    ULONGLONG   TotalBytesSent;         // SPM, OData and RData bytes
    ULONGLONG   NaksReceived;           // # NAKs received so far
    ULONGLONG   NaksReceivedTooLate;    // # NAKs recvd after window advanced
    ULONGLONG   NumOutstandingNaks;     // # NAKs yet to be responded to
    ULONGLONG   NumNaksAfterRData;      // # NAKs yet to be responded to
    ULONGLONG   RepairPacketsSent;      // # Repairs (RDATA) sent so far
    ULONGLONG   BufferSpaceAvailable;   // # partial messages dropped
    ULONGLONG   TrailingEdgeSeqId;      // smallest (oldest) Sequence Id in the window
    ULONGLONG   LeadingEdgeSeqId;       // largest (newest) Sequence Id in the window
    ULONGLONG   RateKBitsPerSecOverall; // Internally calculated send-rate from the beginning
    ULONGLONG   RateKBitsPerSecLast;    // Send-rate calculated every INTERNAL_RATE_CALCULATION_FREQUENCY
    ULONGLONG   TotalODataPacketsSent;  // # ODATA packets sent so far
} RM_SENDER_STATS;


typedef struct _RM_RECEIVER_STATS
{
    ULONGLONG   NumODataPacketsReceived;// # OData sequences received
    ULONGLONG   NumRDataPacketsReceived;// # RData sequences received
    ULONGLONG   NumDuplicateDataPackets;// # RData sequences received

    ULONGLONG   DataBytesReceived;      // # client data bytes received out so far
    ULONGLONG   TotalBytesReceived;     // SPM, OData and RData bytes
    ULONGLONG   RateKBitsPerSecOverall; // Internally calculated Receive-rate from the beginning
    ULONGLONG   RateKBitsPerSecLast;    // Receive-rate calculated every INTERNAL_RATE_CALCULATION_FREQUENCY

    ULONGLONG   TrailingEdgeSeqId;      // smallest (oldest) Sequence Id in the window
    ULONGLONG   LeadingEdgeSeqId;       // largest (newest) Sequence Id in the window
    ULONGLONG   AverageSequencesInWindow;
    ULONGLONG   MinSequencesInWindow;
    ULONGLONG   MaxSequencesInWindow;

    ULONGLONG   FirstNakSequenceNumber; // # First Outstanding Nak
    ULONGLONG   NumPendingNaks;         // # Sequences waiting for Ncfs
    ULONGLONG   NumOutstandingNaks;     // # Sequences for which Ncfs have been received, but no data
    ULONGLONG   NumDataPacketsBuffered; // # Data packets currently buffered by transport
    ULONGLONG   TotalSelectiveNaksSent; // # Selective NAKs sent so far
    ULONGLONG   TotalParityNaksSent;    // # Parity NAKs sent so far
} RM_RECEIVER_STATS;


typedef struct _RM_FEC_INFO
{
    USHORT              FECBlockSize;
    USHORT              FECProActivePackets;
    UCHAR               FECGroupSize;
    BOOLEAN             fFECOnDemandParityEnabled;
} RM_FEC_INFO;

#endif  /* _WSRM_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsdxml.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsdxml.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsdxml_h__
#define __wsdxml_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSDXMLContext_FWD_DEFINED__
#define __IWSDXMLContext_FWD_DEFINED__
typedef interface IWSDXMLContext IWSDXMLContext;
#endif 	/* __IWSDXMLContext_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsdxml_0000_0000 */
/* [local] */ 


typedef struct _WSDXML_NAMESPACE WSDXML_NAMESPACE;

typedef struct _WSDXML_NAME WSDXML_NAME;

typedef struct _WSDXML_TYPE WSDXML_TYPE;

typedef struct _WSDXML_PREFIX_MAPPING WSDXML_PREFIX_MAPPING;

typedef struct _WSDXML_ATTRIBUTE WSDXML_ATTRIBUTE;

typedef struct _WSDXML_NODE WSDXML_NODE;

typedef struct _WSDXML_ELEMENT WSDXML_ELEMENT;

typedef struct _WSDXML_TEXT WSDXML_TEXT;

typedef struct _WSDXML_ELEMENT_LIST WSDXML_ELEMENT_LIST;

typedef const WSDXML_NAMESPACE *PCWSDXML_NAMESPACE;

typedef const WSDXML_TYPE *PCWSDXML_TYPE;

typedef struct _WSD_DATETIME
    {
    BOOL isPositive;
    ULONG year;
    UCHAR month;
    UCHAR day;
    UCHAR hour;
    UCHAR minute;
    UCHAR second;
    UINT millisecond;
    BOOL TZIsLocal;
    BOOL TZIsPositive;
    UCHAR TZHour;
    UCHAR TZMinute;
    } 	WSD_DATETIME;

typedef struct _WSD_DURATION
    {
    BOOL isPositive;
    ULONG year;
    ULONG month;
    ULONG day;
    ULONG hour;
    ULONG minute;
    ULONG second;
    ULONG millisecond;
    } 	WSD_DURATION;


enum __MIDL___MIDL_itf_wsdxml_0000_0000_0001
    {	OpNone	= 0,
	OpEndOfTable	= ( OpNone + 1 ) ,
	OpBeginElement_	= ( OpEndOfTable + 1 ) ,
	OpBeginAnyElement	= ( OpBeginElement_ + 1 ) ,
	OpEndElement	= ( OpBeginAnyElement + 1 ) ,
	OpElement_	= ( OpEndElement + 1 ) ,
	OpAnyElement	= ( OpElement_ + 1 ) ,
	OpAnyElements	= ( OpAnyElement + 1 ) ,
	OpAnyText	= ( OpAnyElements + 1 ) ,
	OpAttribute_	= ( OpAnyText + 1 ) ,
	OpBeginChoice	= ( OpAttribute_ + 1 ) ,
	OpEndChoice	= ( OpBeginChoice + 1 ) ,
	OpBeginSequence	= ( OpEndChoice + 1 ) ,
	OpEndSequence	= ( OpBeginSequence + 1 ) ,
	OpBeginAll	= ( OpEndSequence + 1 ) ,
	OpEndAll	= ( OpBeginAll + 1 ) ,
	OpAnything	= ( OpEndAll + 1 ) ,
	OpAnyNumber	= ( OpAnything + 1 ) ,
	OpOneOrMore	= ( OpAnyNumber + 1 ) ,
	OpOptional	= ( OpOneOrMore + 1 ) ,
	OpFormatBool_	= ( OpOptional + 1 ) ,
	OpFormatInt8_	= ( OpFormatBool_ + 1 ) ,
	OpFormatInt16_	= ( OpFormatInt8_ + 1 ) ,
	OpFormatInt32_	= ( OpFormatInt16_ + 1 ) ,
	OpFormatInt64_	= ( OpFormatInt32_ + 1 ) ,
	OpFormatUInt8_	= ( OpFormatInt64_ + 1 ) ,
	OpFormatUInt16_	= ( OpFormatUInt8_ + 1 ) ,
	OpFormatUInt32_	= ( OpFormatUInt16_ + 1 ) ,
	OpFormatUInt64_	= ( OpFormatUInt32_ + 1 ) ,
	OpFormatUnicodeString_	= ( OpFormatUInt64_ + 1 ) ,
	OpFormatDom_	= ( OpFormatUnicodeString_ + 1 ) ,
	OpFormatStruct_	= ( OpFormatDom_ + 1 ) ,
	OpFormatUri_	= ( OpFormatStruct_ + 1 ) ,
	OpFormatUuidUri_	= ( OpFormatUri_ + 1 ) ,
	OpFormatName_	= ( OpFormatUuidUri_ + 1 ) ,
	OpFormatListInsertTail_	= ( OpFormatName_ + 1 ) ,
	OpFormatType_	= ( OpFormatListInsertTail_ + 1 ) ,
	OpFormatDynamicType_	= ( OpFormatType_ + 1 ) ,
	OpFormatLookupType_	= ( OpFormatDynamicType_ + 1 ) ,
	OpFormatDuration_	= ( OpFormatLookupType_ + 1 ) ,
	OpFormatDateTime_	= ( OpFormatDuration_ + 1 ) ,
	OpFormatFloat_	= ( OpFormatDateTime_ + 1 ) ,
	OpFormatDouble_	= ( OpFormatFloat_ + 1 ) ,
	OpProcess_	= ( OpFormatDouble_ + 1 ) ,
	OpQualifiedAttribute_	= ( OpProcess_ + 1 ) ,
	OpFormatXMLDeclaration_	= ( OpQualifiedAttribute_ + 1 ) ,
	OpFormatMax	= ( OpFormatXMLDeclaration_ + 1 ) 
    } ;
#define OFFSET(type,field) ((DWORD_PTR)(&((type*)0)->field))
#define BYTE0(n) (BYTE)((((DWORD)n)>>0)&0xFF)
#define BYTE1(n) (BYTE)((((DWORD)n)>>8)&0xFF)
#define BYTE2(n) (BYTE)((((DWORD)n)>>16)&0xFF)
#define BYTE3(n) (BYTE)((((DWORD)n)>>24)&0xFF)
#define BYTES(n) BYTE0(n), BYTE1(n), BYTE2(n), BYTE3(n)
#define OpBeginElement(name)                    OpBeginElement_,        BYTES(name)
#define OpElement(name)                         OpElement_,             BYTES(name)
#define OpAttribute(name)                       OpAttribute_,           BYTES(name)
#define OpFormatBool(type,field,isptr)          OpFormatBool_,          BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatInt8(type,field,isptr)          OpFormatInt8_,          BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatInt16(type,field,isptr)         OpFormatInt16_,         BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatInt32(type,field,isptr)         OpFormatInt32_,         BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatInt64(type,field,isptr)         OpFormatInt64_,         BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatUInt8(type,field,isptr)         OpFormatUInt8_,         BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatUInt16(type,field,isptr)        OpFormatUInt16_,        BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatUInt32(type,field,isptr)        OpFormatUInt32_,        BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatUInt64(type,field,isptr)        OpFormatUInt64_,        BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatUnicodeString(type,field)       OpFormatUnicodeString_, BYTES(OFFSET(type,field))
#define OpFormatDom(type,field)                 OpFormatDom_,           BYTES(OFFSET(type,field))
#define OpFormatStruct(sType,type,field)        OpFormatStruct_,        BYTES(sizeof(sType)),BYTES(OFFSET(type,field))
#define OpFormatPointerToStruct(sType)          OpFormatStruct_,        BYTES(sizeof(sType)),BYTES(0)
#define OpFormatUri(type,field)                 OpFormatUri_,           BYTES(OFFSET(type,field))
#define OpFormatUuidUri(type,field,isptr)       OpFormatUuidUri_,       BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatName(type,field)                OpFormatName_,          BYTES(OFFSET(type,field))
#define OpFormatListInsertTail(s,type,field)    OpFormatListInsertTail_,BYTES(sizeof(s)),BYTES(OFFSET(type,field))
#define OpFormatType(table,type,field)          OpFormatType_,          BYTES(table),BYTES(OFFSET(type,field))
#define OpFormatDynamicType(name,type,field)    OpFormatDynamicType_,   BYTES(name),BYTES(OFFSET(type,field))
#define OpFormatLookupType(uriField,type,field) OpFormatLookupType_, BYTES(OFFSET(type,uriField)),BYTES(OFFSET(type,field))
#define OpFormatDuration(type,field)            OpFormatDuration_,      BYTES(OFFSET(type,field))
#define OpFormatDateTime(type,field)            OpFormatDateTime_,      BYTES(OFFSET(type,field))
#define OpFormatFloat(type,field,isptr)         OpFormatFloat_,         BYTES(isptr),BYTES(OFFSET(type,field))
#define OpFormatDouble(type,field,isptr)        OpFormatDouble_,        BYTES(isptr),BYTES(OFFSET(type,field))
#define OpProcess(type,field)                   OpProcess_,             BYTES(OFFSET(type,field))
#define OpQualifiedAttribute(name)              OpQualifiedAttribute_,  BYTES(name)
#define OpFormatXMLDeclaration(type,field)      OpFormatXMLDeclaration_,BYTES(OFFSET(type,field))
#define WSDXML_TYPE_ENCODING(typeIndex,layerNumber) ((((DWORD)layerNumber) << 28) | typeIndex)
#define WSDXML_NAMESPACE_ENCODING(namespaceIndex,layerNumber) ((((WORD)layerNumber) << 12) | namespaceIndex)
#define WSDXML_NAME_ENCODING(nameIndex,nameSpaceEncoding) ((((DWORD)nameSpaceEncoding) << 16) | nameIndex)
HRESULT WINAPI
WSDXMLGetNameFromBuiltinNamespace(
    __in LPCWSTR pszNamespace,
    __in LPCWSTR pszName,
    __deref_out WSDXML_NAME** ppName);
HRESULT WINAPI
WSDXMLCreateContext(
    __deref_out IWSDXMLContext** ppContext);


extern RPC_IF_HANDLE __MIDL_itf_wsdxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsdxml_0000_0000_v0_0_s_ifspec;

#ifndef __IWSDXMLContext_INTERFACE_DEFINED__
#define __IWSDXMLContext_INTERFACE_DEFINED__

/* interface IWSDXMLContext */
/* [local][restricted][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWSDXMLContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("75d8f3ee-3e5a-43b4-a15a-bcf6887460c0")
    IWSDXMLContext : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddNamespace( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszUri,
            /* [annotation][in] */ 
            __in  LPCWSTR pszSuggestedPrefix,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_NAMESPACE **ppNamespace) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddNameToNamespace( 
            /* [annotation][in] */ 
            __in  LPCWSTR pszUri,
            /* [annotation][in] */ 
            __in  LPCWSTR pszName,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_NAME **ppName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNamespaces( 
            /* [annotation][size_is][in] */ 
            __in_ecount(wNamespacesCount)  const PCWSDXML_NAMESPACE *pNamespaces,
            /* [in] */ WORD wNamespacesCount,
            /* [in] */ BYTE bLayerNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTypes( 
            /* [annotation][size_is][in] */ 
            __in_ecount(dwTypesCount)  const PCWSDXML_TYPE *pTypes,
            /* [in] */ DWORD dwTypesCount,
            /* [in] */ BYTE bLayerNumber) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSDXMLContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSDXMLContext * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSDXMLContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSDXMLContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            IWSDXMLContext * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszUri,
            /* [annotation][in] */ 
            __in  LPCWSTR pszSuggestedPrefix,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_NAMESPACE **ppNamespace);
        
        HRESULT ( STDMETHODCALLTYPE *AddNameToNamespace )( 
            IWSDXMLContext * This,
            /* [annotation][in] */ 
            __in  LPCWSTR pszUri,
            /* [annotation][in] */ 
            __in  LPCWSTR pszName,
            /* [annotation][out] */ 
            __deref_opt_out  WSDXML_NAME **ppName);
        
        HRESULT ( STDMETHODCALLTYPE *SetNamespaces )( 
            IWSDXMLContext * This,
            /* [annotation][size_is][in] */ 
            __in_ecount(wNamespacesCount)  const PCWSDXML_NAMESPACE *pNamespaces,
            /* [in] */ WORD wNamespacesCount,
            /* [in] */ BYTE bLayerNumber);
        
        HRESULT ( STDMETHODCALLTYPE *SetTypes )( 
            IWSDXMLContext * This,
            /* [annotation][size_is][in] */ 
            __in_ecount(dwTypesCount)  const PCWSDXML_TYPE *pTypes,
            /* [in] */ DWORD dwTypesCount,
            /* [in] */ BYTE bLayerNumber);
        
        END_INTERFACE
    } IWSDXMLContextVtbl;

    interface IWSDXMLContext
    {
        CONST_VTBL struct IWSDXMLContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSDXMLContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSDXMLContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSDXMLContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSDXMLContext_AddNamespace(This,pszUri,pszSuggestedPrefix,ppNamespace)	\
    ( (This)->lpVtbl -> AddNamespace(This,pszUri,pszSuggestedPrefix,ppNamespace) ) 

#define IWSDXMLContext_AddNameToNamespace(This,pszUri,pszName,ppName)	\
    ( (This)->lpVtbl -> AddNameToNamespace(This,pszUri,pszName,ppName) ) 

#define IWSDXMLContext_SetNamespaces(This,pNamespaces,wNamespacesCount,bLayerNumber)	\
    ( (This)->lpVtbl -> SetNamespaces(This,pNamespaces,wNamespacesCount,bLayerNumber) ) 

#define IWSDXMLContext_SetTypes(This,pTypes,dwTypesCount,bLayerNumber)	\
    ( (This)->lpVtbl -> SetTypes(This,pTypes,dwTypesCount,bLayerNumber) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSDXMLContext_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WSvns.h ===
/*******************************************************************************
 *
 *   wsvns.h
 *
 *  Copyright (C) Microsoft Corporation, 1992-1999.
 *
 *   Windows Sockets include file for VINES IP.  This file contains all
 *   standardized VINES IP information.  Include this header file after
 *   winsock.h.
 *
 *   To open an VINES IP socket, call socket() with an address family of
 *   AF_BAN, a socket type of SOCK_DGRAM, SOCK_STREAM, or SOCK_SEQPACKET,
 *   and protocol of 0.
 *
 ******************************************************************************/

#ifndef _WSVNS_
#define _WSVNS_

#if _MSC_VER > 1000
#pragma once
#endif

/*
 * Socket address, VINES IP style.  Address fields and port field are defined
 * as a sequence of bytes.  This is done because they are byte ordered
 * BIG ENDIAN, ala most significant byte first.
 */
typedef struct sockaddr_vns {
    u_short sin_family;			// = AF_BAN
    u_char  net_address[4];		// network address
    u_char  subnet_addr[2];		// subnet address
    u_char  port[2];			// msb=port[0], lsb=port[1]
    u_char  hops;			// # hops for broadcasts
    u_char  filler[5];			// filler, zeros
} SOCKADDR_VNS, *PSOCKADDR_VNS, FAR *LPSOCKADDR_VNS;

#define VNSPROTO_IPC		1
#define VNSPROTO_RELIABLE_IPC	2
#define VNSPROTO_SPP		3


#endif _WSVNS_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsmerror.h ===
/*
 * Copyright (C) 2004 Microsoft Corporation
 */
#undef FACILITY_WINRM
// Define WSMAN specific error codes
//
//
//  Values are 32 bit values laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_WINRM                   0x33


//
// Define the severity codes
//


//
// MessageId: ERROR_WSMAN_RESOURCE_NOT_FOUND
//
// MessageText:
//
// The WS-Management service cannot process the request. The service cannot find the resource identified by the resource URI and selectors.
//
#define ERROR_WSMAN_RESOURCE_NOT_FOUND   0x80338000L

//
// MessageId: ERROR_WSMAN_INVALID_ACTIONURI
//
// MessageText:
//
// The WS-Management service cannot process the request. The WS-Addressing action URI is invalid. Check the documentation for information on how to construct an action URI.
//
#define ERROR_WSMAN_INVALID_ACTIONURI    0x80338001L

// Same text as ERROR_WSMAN_INVALID_RESOURCE_URI, but some code in R2 uses this error code
//
// MessageId: ERROR_WSMAN_INVALID_URI
//
// MessageText:
//
// The WS-Management service cannot process the request. The resource URI is missing or it has an incorrect format.
// Check the documentation or use the following command for information on how to construct a resource URI: "winrm help uris". 
//
#define ERROR_WSMAN_INVALID_URI          0x80338002L

//
// MessageId: ERROR_WSMAN_PROVIDER_FAILURE
//
// MessageText:
//
// An error was encountered inside the plugin.
//
#define ERROR_WSMAN_PROVIDER_FAILURE     0x80338003L

//
// MessageId: ERROR_WSMAN_BATCH_COMPLETE
//
// MessageText:
//
// The WS-Management service cannot complete the request. The WSManEnumerator object is full and no more items can be added.
//
#define ERROR_WSMAN_BATCH_COMPLETE       0x80338004L

//
// MessageId: ERROR_WSMAN_CONFIG_CORRUPTED
//
// MessageText:
//
// The WS-Management configuration is corrupted. Use the following command to restore defaults:
// %n%n
// winrm invoke Restore http://schemas.microsoft.com/wbem/wsman/1/config @{}
// %n%n
// Then add any custom configuration settings.
//
#define ERROR_WSMAN_CONFIG_CORRUPTED     0x80338005L

//
// MessageId: ERROR_WSMAN_PULL_IN_PROGRESS
//
// MessageText:
//
// The WS-Management service cannot process a pull request because a pull operation is already in progress.
//
#define ERROR_WSMAN_PULL_IN_PROGRESS     0x80338006L

//
// MessageId: ERROR_WSMAN_ENUMERATION_CLOSED
//
// MessageText:
//
// The WS-Management enumeration session is finished or cancelled and cannot be used. Start a new enumeration.
//
#define ERROR_WSMAN_ENUMERATION_CLOSED   0x80338007L

//
// MessageId: ERROR_WSMAN_SUBSCRIPTION_CLOSED
//
// MessageText:
//
// The event subscription is already closed and cannot be used. Start a new subscription.
//
#define ERROR_WSMAN_SUBSCRIPTION_CLOSED  0x80338008L

//
// MessageId: ERROR_WSMAN_SUBSCRIPTION_CLOSE_IN_PROGRESS
//
// MessageText:
//
// The event subscription session is closing and cannot be used. Start a new subscription.
//
#define ERROR_WSMAN_SUBSCRIPTION_CLOSE_IN_PROGRESS 0x80338009L

//
// MessageId: ERROR_WSMAN_SUBSCRIPTION_CLIENT_DID_NOT_CALL_WITHIN_HEARTBEAT
//
// MessageText:
//
// The application or script that has an event subscription did not request a pull operation within the heartbeat interval.
// The subscription session was closed. Start a new subscription.
//
#define ERROR_WSMAN_SUBSCRIPTION_CLIENT_DID_NOT_CALL_WITHIN_HEARTBEAT 0x8033800AL

//
// MessageId: ERROR_WSMAN_SUBSCRIPTION_NO_HEARTBEAT
//
// MessageText:
//
// The event source did not return events within the heartbeat interval.
// The subscription session was closed. Start a new subscription.
//
#define ERROR_WSMAN_SUBSCRIPTION_NO_HEARTBEAT 0x8033800BL

//
// MessageId: ERROR_WSMAN_UNSUPPORTED_TIMEOUT
//
// MessageText:
//
// The WS-Management service does not support the specified timeout.
// The value specified is smaller than the minimum allowed value for this setting.
// Change the timeout value and try the request again.
//
#define ERROR_WSMAN_UNSUPPORTED_TIMEOUT  0x8033800CL

// wsa, code=VersionMismatch, subcode=, details=version mismatch
//
// MessageId: ERROR_WSMAN_SOAP_VERSION_MISMATCH
//
// MessageText:
//
// The WS-Management service does not support the SOAP version specified in the request.
//
#define ERROR_WSMAN_SOAP_VERSION_MISMATCH 0x8033800DL

// wsa, code=DataEncodingUnknown, subcode=, details=version mismatch
//
// MessageId: ERROR_WSMAN_SOAP_DATA_ENCODING_UNKNOWN
//
// MessageText:
//
// The WS-Management service does not support the encoding specified in the request.
//
#define ERROR_WSMAN_SOAP_DATA_ENCODING_UNKNOWN 0x8033800EL

// wsa, code=Sender, subcode=WS-Addressing InvalidMessageInformationHeader, details=invalid_header
//
// MessageId: ERROR_WSMAN_INVALID_MESSAGE_INFORMATION_HEADER
//
// MessageText:
//
// The WS-Management service cannot process the request. The request contains one or more invalid SOAP headers.
//
#define ERROR_WSMAN_INVALID_MESSAGE_INFORMATION_HEADER 0x8033800FL

//
// MessageId: ERROR_WSMAN_SOAP_FAULT_MUST_UNDERSTAND
//
// MessageText:
//
// The WS-Management service cannot process a SOAP header in the request that is marked as mustUnderstand by the client. 
// This could be caused by the use of a version of the protocol which is not supported, or may be an incompatibility 
// between the client and server implementations.
//
#define ERROR_WSMAN_SOAP_FAULT_MUST_UNDERSTAND 0x80338010L

// wsa, code=Sender, subcode=WS-Addressing MessageInformationHeaderRequired, details=missing_header
//
// MessageId: ERROR_WSMAN_MESSAGE_INFORMATION_HEADER_REQUIRED
//
// MessageText:
//
// The WS-Management service cannot process the request. The request does not have all the expected SOAP headers.
//
#define ERROR_WSMAN_MESSAGE_INFORMATION_HEADER_REQUIRED 0x80338011L

// wsa, code=Sender, subcode=WS-Addressing DestinationUnreachable, details=
//
// MessageId: ERROR_WSMAN_DESTINATION_UNREACHABLE
//
// MessageText:
//
// The client cannot connect to the destination specified in the request.
// Verify that the service on the destination is running and is accepting requests.
// Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM.
// If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig".
//
#define ERROR_WSMAN_DESTINATION_UNREACHABLE 0x80338012L

// wsa, code=Sender, subcode=WS-Addressing ActionNotsupported, details=action
//
// MessageId: ERROR_WSMAN_ACTION_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the action specified in the request.
//
#define ERROR_WSMAN_ACTION_NOT_SUPPORTED 0x80338013L

// This is probably what will wrap all other Windows error codes and so should not explicitly be used
// wsa, code=Receiver, subcode=WS-Addressing EndpointUnavailable, details=
//
// MessageId: ERROR_WSMAN_ENDPOINT_UNAVAILABLE
//
// MessageText:
//
// The WS-Management service cannot process the request because the resource is offline. Retry the request
// later when the resource is online.
//
#define ERROR_WSMAN_ENDPOINT_UNAVAILABLE 0x80338014L

// wsa, code=Sender, subcode=wxf:InvalidRepresentation, details=
//
// MessageId: ERROR_WSMAN_INVALID_REPRESENTATION
//
// MessageText:
//
// The WS-Management service cannot identify the format of the object passed to a Put or Create method.
// The input XML may not be appropriate for the resource or uses the wrong schema for the resource.
// Change the input XML in the request.
//
#define ERROR_WSMAN_INVALID_REPRESENTATION 0x80338015L

// wsen, code=Sender, subcode=WS-Enumeration InvalidExpirationTime, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_INVALID_EXPIRATION_TIME
//
// MessageText:
//
// The expiration time passed to the WS-Management Enumerate method is not valid. The time value may be zero
// or refer to a time in the past. Change the expiration time and try the request again.
// 
//
#define ERROR_WSMAN_ENUMERATE_INVALID_EXPIRATION_TIME 0x80338016L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature - WS-Management faultDetail/ExpirationTime, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TIME
//
// MessageText:
//
// The data source does not support expiration time. Remove the expiration time from the request and try the request again.
//
#define ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TIME 0x80338017L

// wsen, code=Sender, subcode=WS-Enumeration FilteringNotSupported, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_FILTERING_NOT_SUPPORTED
//
// MessageText:
//
// The data source does not support filtering. Remove the filter from the request and try the request again.
//
#define ERROR_WSMAN_ENUMERATE_FILTERING_NOT_SUPPORTED 0x80338018L

// wsen, code=Sender, subcode=WS-Enumeration FilterDialectRequestedUnavailable, details=supported_dialects
//
// MessageId: ERROR_WSMAN_ENUMERATE_FILTER_DIALECT_REQUESTED_UNAVAILABLE
//
// MessageText:
//
// The filter dialect (the type associated with the filter) was not supported for this resource.
// Change the filter dialect or remove it from the request and try the request again.
//
#define ERROR_WSMAN_ENUMERATE_FILTER_DIALECT_REQUESTED_UNAVAILABLE 0x80338019L

// wsen, code=Sender, subcode=WS-Enumeration CannotProcessFilter, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_CANNOT_PROCESS_FILTER
//
// MessageText:
//
// The data source could not process the filter. The filter might be missing or it might be invalid.
// Change the filter and try the request again. 
//
#define ERROR_WSMAN_ENUMERATE_CANNOT_PROCESS_FILTER 0x8033801AL

// wsen, code=Receiver, subcode=WS-Enumeration InvalidEnumerationContext, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_INVALID_ENUMERATION_CONTEXT
//
// MessageText:
//
// The WS-Enumeration context in the enumeration is not valid. Enumeration may have been completed or canceled.
// You cannot use this enumeration context anymore. Start a new enumeration.
//
#define ERROR_WSMAN_ENUMERATE_INVALID_ENUMERATION_CONTEXT 0x8033801BL

// wsen, code=Receiver, subcode=WS-Enumeration TimedOut, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_TIMED_OUT
//
// MessageText:
//
// The pull operation did not get any data in the MaxTime duration. But the enumeration is still valid.
// The client can attempt to do another pull request to retrieve data.
//
#define ERROR_WSMAN_ENUMERATE_TIMED_OUT  0x8033801CL

// wsen, code=Receiver, subcode=WS-Enumeration UnableToRenew, details=
//
// MessageId: ERROR_WSMAN_ENUMERATE_UNABLE_TO_RENEW
//
// MessageText:
//
// The WS-Management service cannot renew the enumeration. Start a new enumeration.
//
#define ERROR_WSMAN_ENUMERATE_UNABLE_TO_RENEW 0x8033801DL

// wse, code=Sender, subcode=WS-Eventing DeliveryModeRequestedUnavailable, details=List of delivery modes that are supported
//
// MessageId: ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_UNAVAILABLE
//
// MessageText:
//
// The WS-Management service does not support the delivery mode for the specified resource. The client should change the
// subscription to use one of the supported delivery modes.
//
#define ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_UNAVAILABLE 0x8033801EL

// wse, code=Sender, subcode=WS-Eventing InvalidExpirationTime, details=
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_EXPIRATION_TIME
//
// MessageText:
//
// The expiration time of the subscription is invalid. The time is either not supported, zero or a time that happened in the past.
// Change the expiration time and try the request again.
//
#define ERROR_WSMAN_EVENTING_INVALID_EXPIRATION_TIME 0x8033801FL

// wse, code=Sender, subcode=WS-Eventing UnsupportedExpirationType, details=
//
// MessageId: ERROR_WSMAN_EVENTING_UNSUPPORTED_EXPIRATION_TYPE
//
// MessageText:
//
// The expiration time specified for subscription was invalid. Specify the expiration time as a duration.
//
#define ERROR_WSMAN_EVENTING_UNSUPPORTED_EXPIRATION_TYPE 0x80338020L

// wse, code=Sender, subcode=WS-Eventing FilteringNotSupported, details=
//
// MessageId: ERROR_WSMAN_EVENTING_FILTERING_NOT_SUPPORTED
//
// MessageText:
//
// The event source does not support filtering. Remove the filter from the request and try the request again.
//
#define ERROR_WSMAN_EVENTING_FILTERING_NOT_SUPPORTED 0x80338021L

// wse, code=Sender, subcode=WS-Eventing FilteringRequestedUnavailable, details=
//
// MessageId: ERROR_WSMAN_EVENTING_FILTERING_REQUESTED_UNAVAILABLE
//
// MessageText:
//
// The event source cannot process the specified filter.
// Change the filter or remove it from the request and try the request again.
//
#define ERROR_WSMAN_EVENTING_FILTERING_REQUESTED_UNAVAILABLE 0x80338022L

// wse, code=Receiver, subcode=WS-Eventing EventSourceUnableToProcess, details=
//
// MessageId: ERROR_WSMAN_EVENTING_SOURCE_UNABLE_TO_PROCESS
//
// MessageText:
//
// The event source cannot process the subscription.
//
#define ERROR_WSMAN_EVENTING_SOURCE_UNABLE_TO_PROCESS 0x80338023L

// wse, code=Receiver, subcode=WS-Eventing UnableToRenew, details=
//
// MessageId: ERROR_WSMAN_EVENTING_UNABLE_TO_RENEW
//
// MessageText:
//
// The WS-Management service cannot renew the event subscription. Create a new subscription.
//
#define ERROR_WSMAN_EVENTING_UNABLE_TO_RENEW 0x80338024L

// wse, code=Sender, subcode=WS-Eventing InvalidMessage, details=
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_MESSAGE
//
// MessageText:
//
// The WS-Management service cannot complete the WS-Eventing request because the request had some unknown or invalid content and could
// not be processed.
//
#define ERROR_WSMAN_EVENTING_INVALID_MESSAGE 0x80338025L

//
// MessageId: ERROR_WSMAN_ENVELOPE_TOO_LARGE
//
// MessageText:
//
// The WS-Management service cannot process the response because it is larger than the maximum size allowed.
//
#define ERROR_WSMAN_ENVELOPE_TOO_LARGE   0x80338026L

// wsman, code=Sender, subcode=WS-Management InvalidBody, details=
//
// MessageId: ERROR_WSMAN_INVALID_SOAP_BODY
//
// MessageText:
//
// The WS-Management service cannot process the request because the request packet does not have a valid SOAP body.
//
#define ERROR_WSMAN_INVALID_SOAP_BODY    0x80338027L

// wsman, code=Sender, subcode=WS-Management InvalidResumptionContext, details=
//
// MessageId: ERROR_WSMAN_INVALID_RESUMPTION_CONTEXT
//
// MessageText:
//
// The resumption context specified in the subscription is invalid. It may have expired, or be in the wrong format.
//
#define ERROR_WSMAN_INVALID_RESUMPTION_CONTEXT 0x80338028L

// wsman, code=Receiver, subcode=WS-Management Timedout, details=
//
// MessageId: ERROR_WSMAN_OPERATION_TIMEDOUT
//
// MessageText:
//
// The WS-Management service cannot complete the operation within the time specified in OperationTimeout. 
//
#define ERROR_WSMAN_OPERATION_TIMEDOUT   0x80338029L

// wsman, code=Sender, subcode=WS-Management ResumptionNotSupported, details=
//
// MessageId: ERROR_WSMAN_RESUMPTION_NOT_SUPPORTED
//
// MessageText:
//
// The event source does not support subscriptions that can be resumed.
//
#define ERROR_WSMAN_RESUMPTION_NOT_SUPPORTED 0x8033802AL

// wsman, code=Sender, subcode=WS-Management ResumptionTypeNotSupported, details=
//
// MessageId: ERROR_WSMAN_RESUMPTION_TYPE_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the type of resumption requested by the subscription.
//
#define ERROR_WSMAN_RESUMPTION_TYPE_NOT_SUPPORTED 0x8033802BL

// wsman, code=Sender, subcode=WS-Management UnsupportedEncoding, details=
//
// MessageId: ERROR_WSMAN_UNSUPPORTED_ENCODING
//
// MessageText:
//
// The request contains character encoding that is unsupported. WS-Management only supports requests that are
// encoded in UTF-8 or UTF-16. Change the character encoding in the request and try the request again.
//
#define ERROR_WSMAN_UNSUPPORTED_ENCODING 0x8033802CL

// wsman, code=Sender, subcode=WS-Management UriLimit, details=
//
// MessageId: ERROR_WSMAN_URI_LIMIT
//
// MessageText:
//
// The URI is longer than the maximum length allowed.
//
#define ERROR_WSMAN_URI_LIMIT            0x8033802DL

// wsman, code=Sender, subcode=WS-Management InvalidProposedID, details=
//
// MessageId: ERROR_WSMAN_INVALID_PROPOSED_ID
//
// MessageText:
//
// The WS-Management service cannot process the request because the subscription ID is invalid.
//
#define ERROR_WSMAN_INVALID_PROPOSED_ID  0x8033802EL

// wsman, code=Sender, subcode=WS-Management InvalidBatchParameter, details=
//
// MessageId: ERROR_WSMAN_INVALID_BATCH_PARAMETER
//
// MessageText:
//
// The WS-Management service cannot process the batch request. The request must specify either MaxItems, MaxCharacters,
// or MaxTime.
//
#define ERROR_WSMAN_INVALID_BATCH_PARAMETER 0x8033802FL

// wsman, code=Sender, subcode=WS-Management NoAck, details=
//
// MessageId: ERROR_WSMAN_NO_ACK
//
// MessageText:
//
// The receiver of the event did not acknowledge the event delivery.
// Submit the subscription again without the acknowledgement option.
//
#define ERROR_WSMAN_NO_ACK               0x80338030L

// wsman, code=Sender, subcode=WS-Management ActionMismatch, details=
//
// MessageId: ERROR_WSMAN_ACTION_MISMATCH
//
// MessageText:
//
// The WS-Management service cannot process the request because the WS-Addressing Action URI in the request is not
// compatible with the resource.
//
#define ERROR_WSMAN_ACTION_MISMATCH      0x80338031L

// wsman, code=Sender, subcode=WS-Management Concurrency, details=
//
// MessageId: ERROR_WSMAN_CONCURRENCY
//
// MessageText:
//
// The WS-Management service cannot complete the WS-Addressing Action URI in the request because the resource
// was already in use.
//
#define ERROR_WSMAN_CONCURRENCY          0x80338032L

// wsman, code=Sender, subcode=WS-Management AlreadyExists, details=
//
// MessageId: ERROR_WSMAN_ALREADY_EXISTS
//
// MessageText:
//
// The WS-Management service cannot create the resource because it already exists.
//
#define ERROR_WSMAN_ALREADY_EXISTS       0x80338033L

// wsman, code=Receiver, subcode=WS-Management DeliveryRefused, details=
//
// MessageId: ERROR_WSMAN_DELIVERY_REFUSED
//
// MessageText:
//
// The WS-Management service cannot complete the request because the receiver does not accept the delivery of events.
// The receiver requests that the subscription be cancelled. Event receivers return this message to force the
// cancellation of a subscription.
//
#define ERROR_WSMAN_DELIVERY_REFUSED     0x80338034L

// wsman, code=Sender, subcode=WS-Management EncodingLimit, details=
//
// MessageId: ERROR_WSMAN_ENCODING_LIMIT
//
// MessageText:
//
// The WS-Management service cannot process the request because the encoding of the request exceeds an internal
// encoding limit. Reconfigure the client to send messages which fit the encoding limits of the service.
//
#define ERROR_WSMAN_ENCODING_LIMIT       0x80338035L

// wsman, code=Sender, subcode=wsse:FailedAuthentication, details=
//
// MessageId: ERROR_WSMAN_FAILED_AUTHENTICATION
//
// MessageText:
//
// The WS-Management service cannot authenticate the sender.
//
#define ERROR_WSMAN_FAILED_AUTHENTICATION 0x80338036L

// wsman, code=Sender, subcode=WS-Management IncompatibleEPR, details=
//
// MessageId: ERROR_WSMAN_INCOMPATIBLE_EPR
//
// MessageText:
//
// The WS-Management service does not support the format of the WS-Addressing Endpoint Reference.
//
#define ERROR_WSMAN_INCOMPATIBLE_EPR     0x80338037L

// wsman, code=Sender, subcode=WS-Management InvalidBookmark, details=
//
// MessageId: ERROR_WSMAN_INVALID_BOOKMARK
//
// MessageText:
//
// The bookmark in the subscription is invalid. The bookmark may be expired or corrupted. Issue a new subscription
// without any bookmarks or locate the correct bookmark.
//
#define ERROR_WSMAN_INVALID_BOOKMARK     0x80338038L

// wsman, code=Sender, subcode=WS-Management InvalidOptions, details=
//
// MessageId: ERROR_WSMAN_INVALID_OPTIONS
//
// MessageText:
//
// The WS-Management service cannot process the request because one or more options are not valid. The option names or
// values may not be valid or they are used in incorrect combinations. Retrieve the catalog entry for the resource and
// determine how to correct the invalid option values.
//
#define ERROR_WSMAN_INVALID_OPTIONS      0x80338039L

// wsman, code=Sender, subcode=WS-Management InvalidParameter, details=
//
// MessageId: ERROR_WSMAN_INVALID_PARAMETER
//
// MessageText:
//
// The WS-Management service cannot process the request because a parameter for the operation is not valid.
//
#define ERROR_WSMAN_INVALID_PARAMETER    0x8033803AL

// wsman, code=Sender, subcode=WS-Management InvalidResourceURI, details=
//
// MessageId: ERROR_WSMAN_INVALID_RESOURCE_URI
//
// MessageText:
//
// The WS-Management service cannot process the request. The resource URI is missing or it has an incorrect format.
// Check the documentation or use the following command for information on how to construct a resource URI: "winrm help uris".
//
#define ERROR_WSMAN_INVALID_RESOURCE_URI 0x8033803BL

// wsman, code=Sender, subcode=WS-Management InvalidSystem, details=
//
// MessageId: ERROR_WSMAN_INVALID_SYSTEM
//
// MessageText:
//
// The WS-Management service requires a valid System URI to process the request.
//
#define ERROR_WSMAN_INVALID_SYSTEM       0x8033803CL

// wsman, code=Sender, subcode=WS-Management InvalidSelectors, details=
//
// MessageId: ERROR_WSMAN_INVALID_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the selectors for the resource are not valid.
//
#define ERROR_WSMAN_INVALID_SELECTORS    0x8033803DL

// wsman, code=Sender, subcode=WS-Management MetadaRedirect, details=
//
// MessageId: ERROR_WSMAN_METADATA_REDIRECT
//
// MessageText:
//
// The metadata that was requested is not available at the current address. Retry with new addresse.
//
#define ERROR_WSMAN_METADATA_REDIRECT    0x8033803EL

// wsman, code=Sender, subcode=WS-Management QuotaLimit, details=
//
// MessageId: ERROR_WSMAN_QUOTA_LIMIT
//
// MessageText:
//
// The WS-Management service is busy servicing other requests. Retry later.
//
#define ERROR_WSMAN_QUOTA_LIMIT          0x8033803FL

// wsman, code=Sender, subcode=WS-Management RenameFailure, details=
//
// MessageId: ERROR_WSMAN_RENAME_FAILURE
//
// MessageText:
//
// The WS-Management service cannot rename the resource. The selectors for the resource are not correct. The
// resource may exist already, the address may be incorrect, or the resource URI may be invalid. Change the
// request and retry.
//
#define ERROR_WSMAN_RENAME_FAILURE       0x80338040L

// wsman, code=Sender, subcode=WS-Management SchemaValidationError, details=
//
// MessageId: ERROR_WSMAN_SCHEMA_VALIDATION_ERROR
//
// MessageText:
//
// The SOAP XML in the message does not match the corresponding XML schema definition. Change the XML and retry.
//
#define ERROR_WSMAN_SCHEMA_VALIDATION_ERROR 0x80338041L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details=
//
// MessageId: ERROR_WSMAN_UNSUPPORTED_FEATURE
//
// MessageText:
//
// The WS-Management service does not support the specified feature. Remove the unsupported feature from the request and retry.
//
#define ERROR_WSMAN_UNSUPPORTED_FEATURE  0x80338042L

//
// MessageId: ERROR_WSMAN_INVALID_XML
//
// MessageText:
//
// The WS-Management service cannot process the request because the XML is invalid.
//
#define ERROR_WSMAN_INVALID_XML          0x80338043L

//
// MessageId: ERROR_WSMAN_INVALID_KEY
//
// MessageText:
//
// The WS-Management service cannot process the request because the URI contains an unexpected selector.
//
#define ERROR_WSMAN_INVALID_KEY          0x80338044L

//
// MessageId: ERROR_WSMAN_DELIVER_IN_PROGRESS
//
// MessageText:
//
// The event source is attempting to deliver an event when a delivery is in progress already.
//
#define ERROR_WSMAN_DELIVER_IN_PROGRESS  0x80338045L

//
// MessageId: ERROR_WSMAN_SYSTEM_NOT_FOUND
//
// MessageText:
//
// The WS-Management service cannot locate the system.
//
#define ERROR_WSMAN_SYSTEM_NOT_FOUND     0x80338046L

//
// MessageId: ERROR_WSMAN_MAX_ENVELOPE_SIZE
//
// MessageText:
//
// The maximum envelope size in the request is too large.
// Change the maximum envelope size and try the request again. 
//
#define ERROR_WSMAN_MAX_ENVELOPE_SIZE    0x80338047L

//
// MessageId: ERROR_WSMAN_MAX_ENVELOPE_SIZE_EXCEEDED
//
// MessageText:
//
// The response that the WS-Management service computed exceeds the maximum envelope size in the request.
//
#define ERROR_WSMAN_MAX_ENVELOPE_SIZE_EXCEEDED 0x80338048L

//
// MessageId: ERROR_WSMAN_SERVER_ENVELOPE_LIMIT
//
// MessageText:
//
// The response that the WS-Management service computed exceed the internal limit for envelope size.
//
#define ERROR_WSMAN_SERVER_ENVELOPE_LIMIT 0x80338049L

//
// MessageId: ERROR_WSMAN_SELECTOR_LIMIT
//
// MessageText:
//
// The WS-Management service cannot process the request because the URI contains too many selectors.
//
#define ERROR_WSMAN_SELECTOR_LIMIT       0x8033804AL

//
// MessageId: ERROR_WSMAN_OPTION_LIMIT
//
// MessageText:
//
// The WS-Management service cannot process the request because it contains too many options.
//
#define ERROR_WSMAN_OPTION_LIMIT         0x8033804BL

//
// MessageId: ERROR_WSMAN_CHARACTER_SET
//
// MessageText:
//
// The WS-Management service does not support the character set used in the request. Change the request to use UTF-8 or UTF-16.
//
#define ERROR_WSMAN_CHARACTER_SET        0x8033804CL

//
// MessageId: ERROR_WSMAN_UNREPORTABLE_SUCCESS
//
// MessageText:
//
// The operation succeeded and cannot be reversed but the result is too large to send.
//
#define ERROR_WSMAN_UNREPORTABLE_SUCCESS 0x8033804DL

//
// MessageId: ERROR_WSMAN_WHITESPACE
//
// MessageText:
//
// The WS-Management service does not support white space in the request XML.
//
#define ERROR_WSMAN_WHITESPACE           0x8033804EL

//
// MessageId: ERROR_WSMAN_FILTERING_REQUIRED
//
// MessageText:
//
// The WS-Management service does not support the filter dialect in the request. The filter dialect is the type of filter, such
// as XPath or WQL.
//
#define ERROR_WSMAN_FILTERING_REQUIRED   0x8033804FL

//
// MessageId: ERROR_WSMAN_BOOKMARK_EXPIRED
//
// MessageText:
//
// The WS-Management service cannot process the request because it contains a bookmark that is expired.
//
#define ERROR_WSMAN_BOOKMARK_EXPIRED     0x80338050L

//
// MessageId: ERROR_WSMAN_OPTIONS_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support options.
//
#define ERROR_WSMAN_OPTIONS_NOT_SUPPORTED 0x80338051L

//
// MessageId: ERROR_WSMAN_OPTIONS_INVALID_NAME
//
// MessageText:
//
// The WS-Management service cannot process the request because one or more of the options has an invalid name.
//
#define ERROR_WSMAN_OPTIONS_INVALID_NAME 0x80338052L

//
// MessageId: ERROR_WSMAN_OPTIONS_INVALID_VALUE
//
// MessageText:
//
// The WS-Management service cannot process the request because one or more of the options has an invalid value.
//
#define ERROR_WSMAN_OPTIONS_INVALID_VALUE 0x80338053L

//
// MessageId: ERROR_WSMAN_PARAMETER_TYPE_MISMATCH
//
// MessageText:
//
// The WS-Management service cannot process the request. A parameter that is required for the operation is not the
// correct type.
//
#define ERROR_WSMAN_PARAMETER_TYPE_MISMATCH 0x80338054L

//
// MessageId: ERROR_WSMAN_INVALID_PARAMETER_NAME
//
// MessageText:
//
// The WS-Management service cannot process the request. A parameter name is invalid.
//
#define ERROR_WSMAN_INVALID_PARAMETER_NAME 0x80338055L

//
// MessageId: ERROR_WSMAN_INVALID_XML_VALUES
//
// MessageText:
//
// The WS-Management service cannot process the request because the XML content has invalid values.
//
#define ERROR_WSMAN_INVALID_XML_VALUES   0x80338056L

//
// MessageId: ERROR_WSMAN_INVALID_XML_MISSING_VALUES
//
// MessageText:
//
// The WS-Management service cannot process the request because the XML content has missing values.
//
#define ERROR_WSMAN_INVALID_XML_MISSING_VALUES 0x80338057L

//
// MessageId: ERROR_WSMAN_INVALID_XML_NAMESPACE
//
// MessageText:
//
// The WS-Management service cannot identify the format of the object passed to a Put or Create method.
// The XML namespace for the input XML is invalid. Change the XML namespace for the input XML in the request.
//
#define ERROR_WSMAN_INVALID_XML_NAMESPACE 0x80338058L

//
// MessageId: ERROR_WSMAN_INVALID_XML_FRAGMENT
//
// MessageText:
//
// The WS-Management service cannot process the request because an XML fragment in the URI is invalid.
//
#define ERROR_WSMAN_INVALID_XML_FRAGMENT 0x80338059L

//
// MessageId: ERROR_WSMAN_INSUFFCIENT_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the request did not contain all required selectors.
//
#define ERROR_WSMAN_INSUFFCIENT_SELECTORS 0x8033805AL

//
// MessageId: ERROR_WSMAN_UNEXPECTED_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the request contained invalid selectors for the resource.
//
#define ERROR_WSMAN_UNEXPECTED_SELECTORS 0x8033805BL

//
// MessageId: ERROR_WSMAN_SELECTOR_TYPEMISMATCH
//
// MessageText:
//
// The WS-Management service cannot process the request because a value for a selector is of the wrong type.
//
#define ERROR_WSMAN_SELECTOR_TYPEMISMATCH 0x8033805CL

//
// MessageId: ERROR_WSMAN_INVALID_SELECTOR_VALUE
//
// MessageText:
//
// The WS-Management service cannot process the request because a value for the selector is invalid.
//
#define ERROR_WSMAN_INVALID_SELECTOR_VALUE 0x8033805DL

//
// MessageId: ERROR_WSMAN_AMBIGUOUS_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the selectors for the resource are ambiguous.
//
#define ERROR_WSMAN_AMBIGUOUS_SELECTORS  0x8033805EL

//
// MessageId: ERROR_WSMAN_DUPLICATE_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the request contains duplicate selectors.
//
#define ERROR_WSMAN_DUPLICATE_SELECTORS  0x8033805FL

//
// MessageId: ERROR_WSMAN_INVALID_TARGET_SELECTORS
//
// MessageText:
//
// The WS-Management service cannot process the request because the request contains invalid selectors for the target resource.
//
#define ERROR_WSMAN_INVALID_TARGET_SELECTORS 0x80338060L

//
// MessageId: ERROR_WSMAN_INVALID_TARGET_RESOURCEURI
//
// MessageText:
//
// The WS-Management service cannot process the request because the request contains an invalid URI for the target resource.
//
#define ERROR_WSMAN_INVALID_TARGET_RESOURCEURI 0x80338061L

//
// MessageId: ERROR_WSMAN_INVALID_TARGET_SYSTEM
//
// MessageText:
//
// The WS-Management service cannot process the request because the request contains an invalid target system.
//
#define ERROR_WSMAN_INVALID_TARGET_SYSTEM 0x80338062L

//
// MessageId: ERROR_WSMAN_TARGET_ALREADY_EXISTS
//
// MessageText:
//
// The WS-Management service cannot process a Create request because the target already exists.
//
#define ERROR_WSMAN_TARGET_ALREADY_EXISTS 0x80338063L

//
// MessageId: ERROR_WSMAN_AUTHORIZATION_MODE_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the mode of authorization.
//
#define ERROR_WSMAN_AUTHORIZATION_MODE_NOT_SUPPORTED 0x80338064L

//
// MessageId: ERROR_WSMAN_ACK_NOT_SUPPORTED
//
// MessageText:
//
// The client does not support acknowledgment.
//
#define ERROR_WSMAN_ACK_NOT_SUPPORTED    0x80338065L

//
// MessageId: ERROR_WSMAN_OPERATION_TIMEOUT_NOT_SUPPORTED
//
// MessageText:
//
// The data source does not support timeouts for the operation.
//
#define ERROR_WSMAN_OPERATION_TIMEOUT_NOT_SUPPORTED 0x80338066L

//
// MessageId: ERROR_WSMAN_LOCALE_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the locale.
//
#define ERROR_WSMAN_LOCALE_NOT_SUPPORTED 0x80338067L

//
// MessageId: ERROR_WSMAN_EXPIRATION_TIME_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the expiration time.
//
#define ERROR_WSMAN_EXPIRATION_TIME_NOT_SUPPORTED 0x80338068L

//
// MessageId: ERROR_WSMAN_DELIVERY_RETRIES_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not retry deliveries.
//
#define ERROR_WSMAN_DELIVERY_RETRIES_NOT_SUPPORTED 0x80338069L

//
// MessageId: ERROR_WSMAN_HEARTBEATS_NOT_SUPPORTED
//
// MessageText:
//
// The event source does not support heartbeats.
//
#define ERROR_WSMAN_HEARTBEATS_NOT_SUPPORTED 0x8033806AL

//
// MessageId: ERROR_WSMAN_BOOKMARKS_NOT_SUPPORTED
//
// MessageText:
//
// The event source does not support bookmarks.
//
#define ERROR_WSMAN_BOOKMARKS_NOT_SUPPORTED 0x8033806BL

//
// MessageId: ERROR_WSMAN_MAXITEMS_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the configuration for MaxItems.
//
#define ERROR_WSMAN_MAXITEMS_NOT_SUPPORTED 0x8033806CL

//
// MessageId: ERROR_WSMAN_MAXTIME_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the configuration for MaxTime.
//
#define ERROR_WSMAN_MAXTIME_NOT_SUPPORTED 0x8033806DL

//
// MessageId: ERROR_WSMAN_MAXENVELOPE_SIZE_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the value in the configuration for MaxEnvelopeSize.
//
#define ERROR_WSMAN_MAXENVELOPE_SIZE_NOT_SUPPORTED 0x8033806EL

//
// MessageId: ERROR_WSMAN_MAXENVELOPE_POLICY_NOT_SUPPORTED
//
// MessageText:
//
// The event source does not support the MaxEnvelopePolicy.
//
#define ERROR_WSMAN_MAXENVELOPE_POLICY_NOT_SUPPORTED 0x8033806FL

//
// MessageId: ERROR_WSMAN_FILTERING_REQUIRED_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support unfiltered enumeration.  
//
#define ERROR_WSMAN_FILTERING_REQUIRED_NOT_SUPPORTED 0x80338070L

//
// MessageId: ERROR_WSMAN_INSECURE_ADDRESS_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support insecure addresses.
//
#define ERROR_WSMAN_INSECURE_ADDRESS_NOT_SUPPORTED 0x80338071L

//
// MessageId: ERROR_WSMAN_FORMAT_MISMATCH_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support format mismatch.
//
#define ERROR_WSMAN_FORMAT_MISMATCH_NOT_SUPPORTED 0x80338072L

//
// MessageId: ERROR_WSMAN_FORMAT_SECURITY_TOKEN_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the format of the security token.
//
#define ERROR_WSMAN_FORMAT_SECURITY_TOKEN_NOT_SUPPORTED 0x80338073L

//
// MessageId: ERROR_WSMAN_BAD_METHOD
//
// MessageText:
//
// The service returned a response that indicates that the method is unsupported.
//
#define ERROR_WSMAN_BAD_METHOD           0x80338074L

//
// MessageId: ERROR_WSMAN_UNSUPPORTED_MEDIA
//
// MessageText:
//
// The WS-Management service does not support the specified media type.
//
#define ERROR_WSMAN_UNSUPPORTED_MEDIA    0x80338075L

//
// MessageId: ERROR_WSMAN_UNSUPPORTED_ADDRESSING_MODE
//
// MessageText:
//
// The WS-Management service does not support the addressing mode.
//
#define ERROR_WSMAN_UNSUPPORTED_ADDRESSING_MODE 0x80338076L

//
// MessageId: ERROR_WSMAN_FRAGMENT_TRANSFER_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service does not support fragment transfer.
//
#define ERROR_WSMAN_FRAGMENT_TRANSFER_NOT_SUPPORTED 0x80338077L

//
// MessageId: ERROR_WSMAN_ENUMERATION_INITIALIZING
//
// MessageText:
//
// The client sent a request before the enumeration was initialized.
//
#define ERROR_WSMAN_ENUMERATION_INITIALIZING 0x80338078L

//
// MessageId: ERROR_WSMAN_CONNECTOR_GET
//
// MessageText:
//
// The WS-Management service failed to locate the component that can process the request.
//
#define ERROR_WSMAN_CONNECTOR_GET        0x80338079L

//
// MessageId: ERROR_WSMAN_URI_QUERY_STRING_SYNTAX_ERROR
//
// MessageText:
//
// A syntax error occurred in the query string for the resource URI.
//
#define ERROR_WSMAN_URI_QUERY_STRING_SYNTAX_ERROR 0x8033807AL

//
// MessageId: ERROR_WSMAN_INEXISTENT_MAC_ADDRESS
//
// MessageText:
//
// The MAC that is configured is not in the list of enabled DHCP adapters on the computer.
//
#define ERROR_WSMAN_INEXISTENT_MAC_ADDRESS 0x8033807BL

//
// MessageId: ERROR_WSMAN_NO_UNICAST_ADDRESSES
//
// MessageText:
//
// The MAC address that is configured does not have any unicast addresses.
//
#define ERROR_WSMAN_NO_UNICAST_ADDRESSES 0x8033807CL

//
// MessageId: ERROR_WSMAN_NO_DHCP_ADDRESSES
//
// MessageText:
//
// The WS-Management service cannot find the dynamic IP address on the adapter with the configured MAC address.
//
#define ERROR_WSMAN_NO_DHCP_ADDRESSES    0x8033807DL

//
// MessageId: ERROR_WSMAN_MIN_ENVELOPE_SIZE
//
// MessageText:
//
// The WS-Management service cannot process the request because the envelope size in the request is too small.
//
#define ERROR_WSMAN_MIN_ENVELOPE_SIZE    0x8033807EL

//
// MessageId: ERROR_WSMAN_EPR_NESTING_EXCEEDED
//
// MessageText:
//
// The WS-Management service cannot process the request. The EndPointReference contains more nested EndPointReferences
// than WS-Management supports.
//
#define ERROR_WSMAN_EPR_NESTING_EXCEEDED 0x8033807FL

//
// MessageId: ERROR_WSMAN_REQUEST_INIT_ERROR
//
// MessageText:
//
// The WS-Management service cannot initialize the request.
//
#define ERROR_WSMAN_REQUEST_INIT_ERROR   0x80338080L

//
// MessageId: ERROR_WSMAN_INVALID_TIMEOUT_HEADER
//
// MessageText:
//
// The WS-Management service cannot process the request because the timeout header in the request is invalid.
//
#define ERROR_WSMAN_INVALID_TIMEOUT_HEADER 0x80338081L

//
// MessageId: ERROR_WSMAN_CERT_NOT_FOUND
//
// MessageText:
//
// The WS-Management service cannot find the certificate that was requested.
//
#define ERROR_WSMAN_CERT_NOT_FOUND       0x80338082L

//
// MessageId: ERROR_WSMAN_PLUGIN_FAILED
//
// MessageText:
//
// The WS-Management service cannot process the request. The data source failed to return results for the request.
//
#define ERROR_WSMAN_PLUGIN_FAILED        0x80338083L

//
// MessageId: ERROR_WSMAN_ENUMERATION_INVALID
//
// MessageText:
//
// The enumeration is invalid because previous Pull request failed.
//
#define ERROR_WSMAN_ENUMERATION_INVALID  0x80338084L

//
// MessageId: ERROR_WSMAN_CONFIG_CANNOT_CHANGE_MUTUAL
//
// MessageText:
//
// The WS-Management service cannot change a mutual configuration.
//
#define ERROR_WSMAN_CONFIG_CANNOT_CHANGE_MUTUAL 0x80338085L

//
// MessageId: ERROR_WSMAN_ENUMERATION_MODE_UNSUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the specified enumeration mode.
//
#define ERROR_WSMAN_ENUMERATION_MODE_UNSUPPORTED 0x80338086L

//
// MessageId: ERROR_WSMAN_MUSTUNDERSTAND_ON_LOCALE_UNSUPPORTED
//
// MessageText:
//
// The WS-Management service cannot guarantee that all data is returned in the requested locale as some
// data sources may not be able to comply. Resend the remote request with locale as a hint (the SOAP
// header should have mustUnderstand="false")
//
#define ERROR_WSMAN_MUSTUNDERSTAND_ON_LOCALE_UNSUPPORTED 0x80338087L

//
// MessageId: ERROR_WSMAN_POLICY_CORRUPTED
//
// MessageText:
//
// The WSMan group policy configuration is corrupted.
//
#define ERROR_WSMAN_POLICY_CORRUPTED     0x80338088L

//
// MessageId: ERROR_WSMAN_LISTENER_ADDRESS_INVALID
//
// MessageText:
//
// The listener address specified is invalid. The address can be specified in one of the following formats: *, IP:<ip_address>, MAC:<mac_address>.
// Change the listener address and try the request again.
//
#define ERROR_WSMAN_LISTENER_ADDRESS_INVALID 0x80338089L

//
// MessageId: ERROR_WSMAN_CONFIG_CANNOT_CHANGE_GPO_CONTROLLED_SETTING
//
// MessageText:
//
// Cannot change GPO controlled setting.
//
#define ERROR_WSMAN_CONFIG_CANNOT_CHANGE_GPO_CONTROLLED_SETTING 0x8033808AL

//
// MessageId: ERROR_WSMAN_EVENTING_CONCURRENT_CLIENT_RECEIVE
//
// MessageText:
//
// The client is attempting to concurrently receive events from a single subscription session.This is not supported.
//
#define ERROR_WSMAN_EVENTING_CONCURRENT_CLIENT_RECEIVE 0x8033808BL

//
// MessageId: ERROR_WSMAN_EVENTING_FAST_SENDER
//
// MessageText:
//
// The source is sending event batches faster than the subscriber can consume.
// This can happen if acknowledgments are not specified for the subscription and
// new events are arriving from the source before the client has consumed them.
//
#define ERROR_WSMAN_EVENTING_FAST_SENDER 0x8033808CL

//
// MessageId: ERROR_WSMAN_EVENTING_INSECURE_PUSHSUBSCRIPTION_CONNECTION
//
// MessageText:
//
// The source is sending events in a connection that did not match the security restrictions imposed by the client.
//
#define ERROR_WSMAN_EVENTING_INSECURE_PUSHSUBSCRIPTION_CONNECTION 0x8033808DL

//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_EVENTSOURCE
//
// MessageText:
//
// The WS-Management client cannot process the request.The event source identity does not match the identity of the machine that the client subscribed to.
//
#define ERROR_WSMAN_EVENTING_INVALID_EVENTSOURCE 0x8033808EL

//
// MessageId: ERROR_WSMAN_EVENTING_NOMATCHING_LISTENER
//
// MessageText:
//
// The client could not start a valid listener to receive subscription events based on the specified input settings.
//
#define ERROR_WSMAN_EVENTING_NOMATCHING_LISTENER 0x8033808FL

//
// MessageId: ERROR_WSMAN_FRAGMENT_DIALECT_REQUESTED_UNAVAILABLE
//
// MessageText:
//
// The fragment path dialect is not supported for this resource.
//
#define ERROR_WSMAN_FRAGMENT_DIALECT_REQUESTED_UNAVAILABLE 0x80338090L

//
// MessageId: ERROR_WSMAN_MISSING_FRAGMENT_PATH
//
// MessageText:
//
// Cannot execute the Fragment-Level operation. The fragment path cannot be missing if the fragment dialect is specified.
//
#define ERROR_WSMAN_MISSING_FRAGMENT_PATH 0x80338091L

//
// MessageId: ERROR_WSMAN_INVALID_FRAGMENT_DIALECT
//
// MessageText:
//
// Cannot execute the Fragment-Level operation because of invalid value for the fragment dialect.
//
#define ERROR_WSMAN_INVALID_FRAGMENT_DIALECT 0x80338092L

//
// MessageId: ERROR_WSMAN_INVALID_FRAGMENT_PATH
//
// MessageText:
//
// Cannot execute the Fragment-Level operation because the fragment path is invalid. Check the syntax of the fragment path string.
// Also check the spelling and the case of the property names in the fragment path string: they have to match the spelling and the case of the resource properties.
//
#define ERROR_WSMAN_INVALID_FRAGMENT_PATH 0x80338093L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /FormatMismatch
//
// MessageId: ERROR_WSMAN_EVENTING_INCOMPATIBLE_BATCHPARAMS_AND_DELIVERYMODE
//
// MessageText:
//
// The specified batch parameter is incompatible with the specified event delivery mode. This can happen if batchSettings for a specific mode are
// passed for a different mode. For example, batchSettings like "MaxItems" and
// "MaxLatency" are not compatible with single event push mode or pull mode.
//
#define ERROR_WSMAN_EVENTING_INCOMPATIBLE_BATCHPARAMS_AND_DELIVERYMODE 0x80338094L

// wsman, code=Sender, subcode=WS-Eventing EventSourceUnableToProcess, details= /UnusableAddress
//
// MessageId: ERROR_WSMAN_EVENTING_LOOPBACK_TESTFAILED
//
// MessageText:
//
// The connectivity test from the push subscription source to the client failed. This can happen if the client machine initiating the push subscription
// is unreachable from the server machine where the event source is located. Possible reasons include firewall or some other network boundary.
// Modify subscription to use Pull based subscription.
//
#define ERROR_WSMAN_EVENTING_LOOPBACK_TESTFAILED 0x80338095L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_ENDTO_ADDRESSS
//
// MessageText:
//
// The subscribe packet had an EndTo element address that does not match the NotifyTo element address or it was invalid. For subscription the EndTo element
// need not be present in the subscription request. If it exists then it's address should match the address specified in NotifyTo element.
//
#define ERROR_WSMAN_EVENTING_INVALID_ENDTO_ADDRESSS 0x80338096L

//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_INCOMING_EVENT_PACKET_HEADER
//
// MessageText:
//
// The event source sent an event packet whose header could not be processed by the client. This can happen if it was malformed
// or if the header had a mustUnderstand attribute that could not be understood by the client.
//
#define ERROR_WSMAN_EVENTING_INVALID_INCOMING_EVENT_PACKET_HEADER 0x80338097L

//
// MessageId: ERROR_WSMAN_SESSION_ALREADY_CLOSED
//
// MessageText:
//
// An operation is being attempted on a session that is being closed.This can happen if the session that is being used is also being closed
// by another thread.
//
#define ERROR_WSMAN_SESSION_ALREADY_CLOSED 0x80338098L

//
// MessageId: ERROR_WSMAN_SUBSCRIPTION_LISTENER_NOLONGERVALID
//
// MessageText:
//
// The listener on which the subscription session was established is no longer valid. This can happen if the WSMAN service listener configuration has been changed
// and a subscription was already active and using one of the configurations that was deleted.
//
#define ERROR_WSMAN_SUBSCRIPTION_LISTENER_NOLONGERVALID 0x80338099L

//
// MessageId: ERROR_WSMAN_PROVIDER_LOAD_FAILED
//
// MessageText:
//
// The system failed to load the plugin.
//
#define ERROR_WSMAN_PROVIDER_LOAD_FAILED 0x8033809AL

// wse, code=Receiver, subcode=WS Eventing SourceShuttingDown, details=,
//
// MessageId: ERROR_WSMAN_EVENTING_SUBSCRIPTIONCLOSED_BYREMOTESERVICE
//
// MessageText:
//
// The WS-Management service on the remote machine with which this subscription had been set up has requested that the subscription be closed.
// This can happen if the WS-Management service on the remote machine was being shutdown.
// To correct this problem restart the WS-Management service on the remote machine and re-create the subscription.
//
#define ERROR_WSMAN_EVENTING_SUBSCRIPTIONCLOSED_BYREMOTESERVICE 0x8033809BL

// wse, code=Receiver, subcode=WS Eventing DeliveryFailure, details=, 
//
// MessageId: ERROR_WSMAN_EVENTING_DELIVERYFAILED_FROMSOURCE
//
// MessageText:
//
// The event source was unable to deliver events to the client.This can happen due to network issues preventing the source from connecting
// to the client.
//
#define ERROR_WSMAN_EVENTING_DELIVERYFAILED_FROMSOURCE 0x8033809CL

//
// MessageId: ERROR_WSMAN_SECURITY_UNMAPPED
//
// MessageText:
//
// An unknown security error occurred.
//
#define ERROR_WSMAN_SECURITY_UNMAPPED    0x8033809DL

// wse, code=Receiver, subcode=WS Eventing SourceCancelling, details=, 
//
// MessageId: ERROR_WSMAN_EVENTING_SUBSCRIPTION_CANCELLED_BYSOURCE
//
// MessageText:
//
// The event source cancelled the subscription session.
//
#define ERROR_WSMAN_EVENTING_SUBSCRIPTION_CANCELLED_BYSOURCE 0x8033809EL

//
// MessageId: ERROR_WSMAN_INVALID_HOSTNAME_PATTERN
//
// MessageText:
//
// TrustedHosts list contains an invalid hostname or hostname pattern.
//
#define ERROR_WSMAN_INVALID_HOSTNAME_PATTERN 0x8033809FL

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO
//
// MessageText:
//
// The subscribe packet does not have NotifyTo element in the delivery section. 
//
#define ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO 0x803380A0L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO_ADDRESSS
//
// MessageText:
//
// The subscribe packet does not have Address element in the NotifyTo section. 
//
#define ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO_ADDRESSS 0x803380A1L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_NOTIFYTO_ADDRESSS
//
// MessageText:
//
// The subscribe packet contains invalid Address in the NotifyTo section. 
//
#define ERROR_WSMAN_EVENTING_INVALID_NOTIFYTO_ADDRESSS 0x803380A2L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_LOCALE_IN_DELIVERY
//
// MessageText:
//
// The subscribe packet contains invalid Locale value in the delivery section.
//
#define ERROR_WSMAN_EVENTING_INVALID_LOCALE_IN_DELIVERY 0x803380A3L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_EVENTING_INVALID_HEARTBEAT
//
// MessageText:
//
// The subscribe packet contains invalid heartbeat value.
//
#define ERROR_WSMAN_EVENTING_INVALID_HEARTBEAT 0x803380A4L

//
// MessageId: ERROR_WSMAN_MACHINE_OPTION_REQUIRED
//
// MessageText:
//
// The WS-Management service cannot process the request. This request is valid only when the -remote option is specified. 
//
#define ERROR_WSMAN_MACHINE_OPTION_REQUIRED 0x803380A5L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details=/OptionSet
//
// MessageId: ERROR_WSMAN_UNSUPPORTED_FEATURE_OPTIONS
//
// MessageText:
//
// The WS-Management service does not support the options feature for the specified resource. Remove the options from the request and retry.
//
#define ERROR_WSMAN_UNSUPPORTED_FEATURE_OPTIONS 0x803380A6L

// wsman, code=Sender, subcode=WS-Management UnsupportedFeature, details= /AddressingMode
//
// MessageId: ERROR_WSMAN_BATCHSIZE_TOO_SMALL
//
// MessageText:
//
// The subscribe packet contains batch size value which is smaller than supported value.
//
#define ERROR_WSMAN_BATCHSIZE_TOO_SMALL  0x803380A7L

// wse, code=Sender, subcode=WS-Eventing DeliveryModeRequestedUnavailable, details=List of delivery modes that are supported
//
// MessageId: ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_INVALID
//
// MessageText:
//
// The WS-Management service cannot process the subscribe request. The delivery mode is either invalid or missing.
//
#define ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_INVALID 0x803380A8L

//
// MessageId: ERROR_WSMAN_PROVSYS_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service cannot process the request. The provider method was not found.
//
#define ERROR_WSMAN_PROVSYS_NOT_SUPPORTED 0x803380A9L

//
// MessageId: ERROR_WSMAN_PUSH_SUBSCRIPTION_CONFIG_INVALID
//
// MessageText:
//
// The WinRM client could not create a push subscription because there are no listeners configured that match the specified hostname and transport, or because there is no enabled firewall exception on the port used by the selected listener.
// Change the hostname and transport, create an appropriate firewall exception, or run winrm quickconfig.
//
#define ERROR_WSMAN_PUSH_SUBSCRIPTION_CONFIG_INVALID 0x803380AAL

//
// MessageId: ERROR_WSMAN_CREDS_PASSED_WITH_NO_AUTH_FLAG
//
// MessageText:
//
// The WinRM client could not process the request because credentials were specified along with the 'no authentication' flag.  
// No user name, password or client certificate should be specified with the 'no authentication' option.
//
#define ERROR_WSMAN_CREDS_PASSED_WITH_NO_AUTH_FLAG 0x803380ABL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for this request.
// Remove or change the invalid flag and try the request again.
//
#define ERROR_WSMAN_CLIENT_INVALID_FLAG  0x803380ACL

//
// MessageId: ERROR_WSMAN_CLIENT_MULTIPLE_AUTH_FLAGS
//
// MessageText:
//
// The WinRM client cannot process the request. The request must specify only one authentication mechanism.
// If the flag for 'no authentication' is used, no auhentication mechanism should be specified.
// Change the request to specify only one authentication mechanism or 'no authentication' and try again.
//
#define ERROR_WSMAN_CLIENT_MULTIPLE_AUTH_FLAGS 0x803380ADL

//
// MessageId: ERROR_WSMAN_CLIENT_SPN_WRONG_AUTH
//
// MessageText:
//
// The WinRM client cannot process the request. The SPN Server Port can only be used when the authentication mechanism is Negotiate or Kerberos.
// Remove the SPN Server Port or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CLIENT_SPN_WRONG_AUTH 0x803380AEL

//
// MessageId: ERROR_WSMAN_CLIENT_CERT_UNNEEDED_CREDS
//
// MessageText:
//
// The WinRM client cannot process the request. The request must not include credentials when using a smart card or default certificate.
// Remove the credentials or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CLIENT_CERT_UNNEEDED_CREDS 0x803380AFL

//
// MessageId: ERROR_WSMAN_CLIENT_USERNAME_PASSWORD_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include user name and password when Basic or Digest authentication mechanism is used.
// Add the user name and password or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CLIENT_USERNAME_PASSWORD_NEEDED 0x803380B0L

//
// MessageId: ERROR_WSMAN_CLIENT_CERT_UNNEEDED_USERNAME
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must not include user name and password when a certificate is used for authentication.
// Remove the user name and password or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CLIENT_CERT_UNNEEDED_USERNAME 0x803380B1L

//
// MessageId: ERROR_WSMAN_CLIENT_CREDENTIALS_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include credentials if they specify the following flag: WSManFlagCredUsernamePassword.
// Add the credentials or remove the WSManFlagCredUsernamePassword flag and try the request again.
//
#define ERROR_WSMAN_CLIENT_CREDENTIALS_NEEDED 0x803380B2L

//
// MessageId: ERROR_WSMAN_CLIENT_CREDENTIALS_FLAG_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. Requests with credentials must include the following flag: WSManFlagCredUsernamePassword.
// Add the flag or remove the credentials and try the request again.
//
#define ERROR_WSMAN_CLIENT_CREDENTIALS_FLAG_NEEDED 0x803380B3L

//
// MessageId: ERROR_WSMAN_CLIENT_CERT_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include the certificate thumbprint when a certificate is used for authentication.
// Change the request to include the certificate thumbprint and try again.
//
#define ERROR_WSMAN_CLIENT_CERT_NEEDED   0x803380B4L

//
// MessageId: ERROR_WSMAN_CLIENT_CERT_UNKNOWN_TYPE
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include the type of certificate to use for authentication.
// Change the request to include the type of the certificate and try again.
//
#define ERROR_WSMAN_CLIENT_CERT_UNKNOWN_TYPE 0x803380B5L

//
// MessageId: ERROR_WSMAN_CLIENT_CERT_UNKNOWN_LOCATION
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include the location (machine or user certificate store) of the certificate used for authentication.
// Change the request to include the location of the certificate and try again.
//
#define ERROR_WSMAN_CLIENT_CERT_UNKNOWN_LOCATION 0x803380B6L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_CERT
//
// MessageText:
//
// The WinRM client cannot process the request. The certificate structure was incomplete.
// Change the certificate structure and try the request again.
//
#define ERROR_WSMAN_CLIENT_INVALID_CERT  0x803380B7L

//
// MessageId: ERROR_WSMAN_CLIENT_LOCAL_INVALID_CREDS
//
// MessageText:
//
// The WinRM client cannot process the request. Credentials must not be provided for local requests.
// Remove the credentials and try the request again.
//
#define ERROR_WSMAN_CLIENT_LOCAL_INVALID_CREDS 0x803380B8L

//
// MessageId: ERROR_WSMAN_CLIENT_LOCAL_INVALID_CONNECTION_OPTIONS
//
// MessageText:
//
// The WinRM client cannot process the request. Connection options must not be provided for local requests.
// Remove the connection options and try the request again.
//
#define ERROR_WSMAN_CLIENT_LOCAL_INVALID_CONNECTION_OPTIONS 0x803380B9L

//
// MessageId: ERROR_WSMAN_CLIENT_CREATESESSION_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManCreateSession function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_CREATESESSION_NULL_PARAM 0x803380BAL

//
// MessageId: ERROR_WSMAN_CLIENT_ENUMERATE_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManEnumerate function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_ENUMERATE_NULL_PARAM 0x803380BBL

//
// MessageId: ERROR_WSMAN_CLIENT_SUBSCRIBE_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManSubscribe function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_SUBSCRIBE_NULL_PARAM 0x803380BCL

//
// MessageId: ERROR_WSMAN_CLIENT_NULL_RESULT_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. The parameter that should contain the result of the request is null.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_NULL_RESULT_PARAM 0x803380BDL

//
// MessageId: ERROR_WSMAN_CLIENT_NO_HANDLE
//
// MessageText:
//
// The WinRM client cannot process the request. The request is missing the session or enumeration handle.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_NO_HANDLE     0x803380BEL

//
// MessageId: ERROR_WSMAN_CLIENT_BLANK_URI
//
// MessageText:
//
// The WinRM client cannot process the request. The resource URI must not be "" (blank or empty string) or NULL.
// Change the resource URI and try the request again.
//
#define ERROR_WSMAN_CLIENT_BLANK_URI     0x803380BFL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_RESOURCE_LOCATOR
//
// MessageText:
//
// The WinRM client cannot process the request. The resource locator was invalid.
// Change the resource locator and try the request again.
//
#define ERROR_WSMAN_CLIENT_INVALID_RESOURCE_LOCATOR 0x803380C0L

//
// MessageId: ERROR_WSMAN_CLIENT_BLANK_INPUT_XML
//
// MessageText:
//
// The WinRM client cannot process the request. The input XML must not be "" (blank or empty string) or NULL.
// Change the input XML and try the request again.
//
#define ERROR_WSMAN_CLIENT_BLANK_INPUT_XML 0x803380C1L

//
// MessageId: ERROR_WSMAN_CLIENT_BATCH_ITEMS_TOO_SMALL
//
// MessageText:
//
// The WinRM client cannot process the request. The maximum number of elements to be retrieved in a batch is too small.
// Change the value for the maximum number of elements in a batch and try the request again.
//
#define ERROR_WSMAN_CLIENT_BATCH_ITEMS_TOO_SMALL 0x803380C2L

//
// MessageId: ERROR_WSMAN_CLIENT_MAX_CHARS_TOO_SMALL
//
// MessageText:
//
// The WinRM client cannot process the request. The maximum number of characters to be retrieved in a batch is too small.
// Change the value for the maximum number of characters in a batch and try the request again.
//
#define ERROR_WSMAN_CLIENT_MAX_CHARS_TOO_SMALL 0x803380C3L

//
// MessageId: ERROR_WSMAN_CLIENT_BLANK_ACTION_URI
//
// MessageText:
//
// The WinRM client cannot process the request. The action URI must not be "" (blank or empty string) or NULL.
// Change the action URI and try the request again.
//
#define ERROR_WSMAN_CLIENT_BLANK_ACTION_URI 0x803380C4L

//
// MessageId: ERROR_WSMAN_CLIENT_ZERO_HEARTBEAT
//
// MessageText:
//
// The WinRM client cannot process the request. The heartbeat interval must be greater than 0.
// Change the heartbeat interval and try the request again.
//
#define ERROR_WSMAN_CLIENT_ZERO_HEARTBEAT 0x803380C5L

//
// MessageId: ERROR_WSMAN_CLIENT_MULTIPLE_DELIVERY_MODES
//
// MessageText:
//
// The WinRM client cannot process the request. The request must contain one and only one delivery mode.
// Change the request to contain only one delivery mode and try again.
//
#define ERROR_WSMAN_CLIENT_MULTIPLE_DELIVERY_MODES 0x803380C6L

//
// MessageId: ERROR_WSMAN_CLIENT_MULTIPLE_ENVELOPE_POLICIES
//
// MessageText:
//
// The WinRM client cannot process the request. The request contained multiple settings for the policy regarding the maximum envelope size.
// Change the request to contain only one setting for the policy and try again.
//
#define ERROR_WSMAN_CLIENT_MULTIPLE_ENVELOPE_POLICIES 0x803380C7L

//
// MessageId: ERROR_WSMAN_CLIENT_UNKNOWN_EXPIRATION_TYPE
//
// MessageText:
//
// The WinRM client cannot process the request. The request contained an expiration time, but did not specify if it was absolute or relative.
// Change the request to specify the type of the expiration time (absolute or relative) and try again.
//
#define ERROR_WSMAN_CLIENT_UNKNOWN_EXPIRATION_TYPE 0x803380C8L

//
// MessageId: ERROR_WSMAN_CLIENT_MISSING_EXPIRATION
//
// MessageText:
//
// The WinRM client cannot process the request. The request specified the type of the expiration time (absolute or relative) but it did not contain an expiration time.
// Change the request to include the expiration time and try again.
//
#define ERROR_WSMAN_CLIENT_MISSING_EXPIRATION 0x803380C9L

//
// MessageId: ERROR_WSMAN_CLIENT_PULL_INVALID_FLAGS
//
// MessageText:
//
// The WinRM client cannot process the request. The pull subscription request contained flags related to a push subscription.
// Change the flags and try the request again.
//
#define ERROR_WSMAN_CLIENT_PULL_INVALID_FLAGS 0x803380CAL

//
// MessageId: ERROR_WSMAN_CLIENT_PUSH_UNSUPPORTED_TRANSPORT
//
// MessageText:
//
// The WinRM client cannot process the request. The push subcription request contained a delivery transport that is not supported. Only HTTP and HTTPS transports are supported.
// Change the delivery transport and try the request again.
//
#define ERROR_WSMAN_CLIENT_PUSH_UNSUPPORTED_TRANSPORT 0x803380CBL

//
// MessageId: ERROR_WSMAN_CLIENT_PUSH_HOST_TOO_LONG
//
// MessageText:
//
// The WinRM client cannot process the request. The delivery address for push subscriptions was too long.
// Change the delivery address and try the request again.
//
#define ERROR_WSMAN_CLIENT_PUSH_HOST_TOO_LONG 0x803380CCL

//
// MessageId: ERROR_WSMAN_CLIENT_COMPRESSION_INVALID_OPTION
//
// MessageText:
//
// The WinRM client cannot process the request. The request contained the compression option but contained an unrecognized value.
// Change the value for the compression option and try the request again.
//
#define ERROR_WSMAN_CLIENT_COMPRESSION_INVALID_OPTION 0x803380CDL

//
// MessageId: ERROR_WSMAN_CLIENT_DELIVERENDSUBSCRIPTION_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManDeliverEndSubscriptionNotification function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_DELIVERENDSUBSCRIPTION_NULL_PARAM 0x803380CEL

//
// MessageId: ERROR_WSMAN_CLIENT_DELIVEREVENTS_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManDeliverEvents function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_DELIVEREVENTS_NULL_PARAM 0x803380CFL

//
// MessageId: ERROR_WSMAN_CLIENT_GETBOOKMARK_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManGetBookmark function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETBOOKMARK_NULL_PARAM 0x803380D0L

//
// MessageId: ERROR_WSMAN_CLIENT_DECODEOBJECT_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManDecodeObject function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_DECODEOBJECT_NULL_PARAM 0x803380D1L

//
// MessageId: ERROR_WSMAN_CLIENT_ENCODEOBJECT_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManEncodeObject(Ex) function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_ENCODEOBJECT_NULL_PARAM 0x803380D2L

//
// MessageId: ERROR_WSMAN_CLIENT_ENUMERATORADDOBJECT_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManEnumeratorAddObject function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_ENUMERATORADDOBJECT_NULL_PARAM 0x803380D3L

//
// MessageId: ERROR_WSMAN_CLIENT_ENUMERATORNEXTOBJECT_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManEnumeratorNextObject function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_ENUMERATORNEXTOBJECT_NULL_PARAM 0x803380D4L

//
// MessageId: ERROR_WSMAN_CLIENT_CONSTRUCTERROR_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManConstructError function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_CONSTRUCTERROR_NULL_PARAM 0x803380D5L

//
// MessageId: ERROR_WSMAN_SERVER_NONPULLSUBSCRIBE_NULL_PARAM
//
// MessageText:
//
// The WinRM service cannot process the request. Push subscriptions are not supported for local session. Change subscription type to Pull and try again.
//
#define ERROR_WSMAN_SERVER_NONPULLSUBSCRIBE_NULL_PARAM 0x803380D6L

//
// MessageId: ERROR_WSMAN_CLIENT_UNENCRYPTED_HTTP_ONLY
//
// MessageText:
//
// The WinRM client cannot process the request. The unencrypted flag only applies to the HTTP transport.
// Remove the unencrypted flag or change the transport and try again the request.
//
#define ERROR_WSMAN_CLIENT_UNENCRYPTED_HTTP_ONLY 0x803380D7L

//
// MessageId: ERROR_WSMAN_CANNOT_USE_CERTIFICATES_FOR_HTTP
//
// MessageText:
//
// The WinRM client cannot process the request. Certificate parameters are not valid when the HTTP transport is also specified.
// Remove the certificate parameters or change the transport and try again the request.
//
#define ERROR_WSMAN_CANNOT_USE_CERTIFICATES_FOR_HTTP 0x803380D8L

//
// MessageId: ERROR_WSMAN_CONNECTIONSTR_INVALID
//
// MessageText:
//
// The WinRM client cannot process the request. The connection string should be of the form [<transport>://]<host>[:<port>][/<suffix>] where transport is one of "http" or "https".
// Transport, port and suffix are optional. The host may be a hostname or an IP address.
// For IPv6 addresses, enclose the address in brackets - e.g. "http://[1::2]:80/wsman".
// Change the connection string and try the request again.
//
#define ERROR_WSMAN_CONNECTIONSTR_INVALID 0x803380D9L

//
// MessageId: ERROR_WSMAN_TRANSPORT_NOT_SUPPORTED
//
// MessageText:
//
// The WinRM client cannot process the request. The connection string contains an unsupported transport.
// Valid transports are "http" or "https".
// Change the connection string and try the request again.
//
#define ERROR_WSMAN_TRANSPORT_NOT_SUPPORTED 0x803380DAL

//
// MessageId: ERROR_WSMAN_PORT_INVALID
//
// MessageText:
//
// The WinRM client cannot process the request. The port specified in the connnection string is invalid.
// Valid values are between 1 and 65535.
// Change the value for port and try the request again.
//
#define ERROR_WSMAN_PORT_INVALID         0x803380DBL

//
// MessageId: ERROR_WSMAN_CONFIG_PORT_INVALID
//
// MessageText:
//
// The WinRM client cannot process the request. The port specified in the configuration is invalid.
// Valid values are between 1 and 65535.
// Change the value for port and try the request again.
//
#define ERROR_WSMAN_CONFIG_PORT_INVALID  0x803380DCL

//
// MessageId: ERROR_WSMAN_SENDHEARBEAT_EMPTY_ENUMERATOR
//
// MessageText:
//
// The WinRM service cannot process the request. WSMAN_FLAG_SEND_HEARTBEAT flag requires the event enumerator to be empty.
// Change the flag or change the event enumerator and try the request again.
//
#define ERROR_WSMAN_SENDHEARBEAT_EMPTY_ENUMERATOR 0x803380DDL

//
// MessageId: ERROR_WSMAN_CLIENT_UNENCRYPTED_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Unencrypted traffic is currently disabled in the client configuration.
// Change the client configuration and try the request again.
//
#define ERROR_WSMAN_CLIENT_UNENCRYPTED_DISABLED 0x803380DEL

//
// MessageId: ERROR_WSMAN_CLIENT_BASIC_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Basic authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
//
#define ERROR_WSMAN_CLIENT_BASIC_AUTHENTICATION_DISABLED 0x803380DFL

//
// MessageId: ERROR_WSMAN_CLIENT_DIGEST_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Digest authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
//
#define ERROR_WSMAN_CLIENT_DIGEST_AUTHENTICATION_DISABLED 0x803380E0L

//
// MessageId: ERROR_WSMAN_CLIENT_NEGOTIATE_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Negotiate authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
// If this is a request for the local configuration, use one of the enabled authentication mechanisms still enabled.
// To use Kerberos, specify the local computer name as the remote destination. 
// To use Basic, specify the local computer name as the remote destination, specify Basic authentication and provide user name and password.
//
#define ERROR_WSMAN_CLIENT_NEGOTIATE_AUTHENTICATION_DISABLED 0x803380E1L

//
// MessageId: ERROR_WSMAN_CLIENT_KERBEROS_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Kerberos authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
//
#define ERROR_WSMAN_CLIENT_KERBEROS_AUTHENTICATION_DISABLED 0x803380E2L

//
// MessageId: ERROR_WSMAN_CLIENT_CERTIFICATES_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request. Certificate authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
//
#define ERROR_WSMAN_CLIENT_CERTIFICATES_AUTHENTICATION_DISABLED 0x803380E3L

//
// MessageId: ERROR_WSMAN_SERVER_NOT_TRUSTED
//
// MessageText:
//
// The WinRM client cannot process the request. If the authentication scheme is different from Kerberos, or if the client computer is not joined to a domain,
// then HTTPS transport must be used or the destination machine must be added to the TrustedHosts configuration setting.
// Use winrm.cmd to configure TrustedHosts. Note that computers in the TrustedHosts list might not be authenticated.
// You can get more information about that by running the following command: winrm help config.
//
#define ERROR_WSMAN_SERVER_NOT_TRUSTED   0x803380E4L

//
// MessageId: ERROR_WSMAN_EXPLICIT_CREDENTIALS_REQUIRED
//
// MessageText:
//
// The WinRM client cannot process the request. Default credentials can be used only with Kerberos authentication or Negotiate authentication under HTTPS if the Allow implicit credentials for Negotiate is specified.
// Explicit credentials must be provided if any other authentication scheme is specified.
//
#define ERROR_WSMAN_EXPLICIT_CREDENTIALS_REQUIRED 0x803380E5L

//
// MessageId: ERROR_WSMAN_CERT_THUMBPRINT_NOT_BLANK
//
// MessageText:
//
// The WinRM client cannot process the request. The CertificateThumbprint property must be empty when the SSL configuration will be shared with another service.
//
#define ERROR_WSMAN_CERT_THUMBPRINT_NOT_BLANK 0x803380E6L

//
// MessageId: ERROR_WSMAN_CERT_THUMBPRINT_BLANK
//
// MessageText:
//
// The WinRM client cannot process the request. The CertificateThumbprint property must not be "" (blank or empty string) or NULL.
//
#define ERROR_WSMAN_CERT_THUMBPRINT_BLANK 0x803380E7L

//
// MessageId: ERROR_WSMAN_CONFIG_CANNOT_SHARE_SSL_CONFIG
//
// MessageText:
//
// The WinRM client cannot process the request. The WinRM client tried to create an SSL configuration for a pair of IP address and port according to the request,
// but the SSL configuration for that pair is owned by another service and cannot be shared. 
// Use a different IP address and port combination and try the request again.
//
#define ERROR_WSMAN_CONFIG_CANNOT_SHARE_SSL_CONFIG 0x803380E8L

//
// MessageId: ERROR_WSMAN_CONFIG_CERT_CN_DOES_NOT_MATCH_HOSTNAME
//
// MessageText:
//
// The WinRM client cannot process the request. The certificate CN and the hostname that were provided do not match.
//
#define ERROR_WSMAN_CONFIG_CERT_CN_DOES_NOT_MATCH_HOSTNAME 0x803380E9L

//
// MessageId: ERROR_WSMAN_CONFIG_HOSTNAME_CHANGE_WITHOUT_CERT
//
// MessageText:
//
// <not used>
//
#define ERROR_WSMAN_CONFIG_HOSTNAME_CHANGE_WITHOUT_CERT 0x803380EAL

//
// MessageId: ERROR_WSMAN_CONFIG_THUMBPRINT_SHOULD_BE_EMPTY
//
// MessageText:
//
// The WinRM client cannot process the request. When HTTP is the transport, the Certificate thumbprint must be blank.
// HTTP does not use the Certificate thumbprint.
//
#define ERROR_WSMAN_CONFIG_THUMBPRINT_SHOULD_BE_EMPTY 0x803380EBL

//
// MessageId: ERROR_WSMAN_INVALID_IPFILTER
//
// MessageText:
//
// The WinRM client cannot process the request. The IP Filter is invalid.
// Ranges are specified using the syntax IP1-IP2. Multiple ranges are separated using , as delimiter.
// * is used to indicate that the service should listen on all available IPs on the machine.
// When * is used, other ranges in the filter are ignored. If filter is blank, the service doesn't listen on any address.
// For example, if service should be restricted to listen on only IPv4 addresses, IPv6 filter should be left empty.
// %nExample IPv4 filters:
// 2.0.0.1-2.0.0.20, 24.0.0.1-24.0.0.22
// 
// %n Example IPv6 filters:
// 3FFE:FFFF:7654:FEDA:1245:BA98:0000:0000-3FFE:FFFF:7654:FEDA:1245:BA98:3210:4562
//
#define ERROR_WSMAN_INVALID_IPFILTER     0x803380ECL

//
// MessageId: ERROR_WSMAN_CANNOT_CHANGE_KEYS
//
// MessageText:
//
// The WinRM client cannot process the request. The input XML modifies selectors or keys for the instance.
// You cannot create a new instance or change the identity of an instance by changing the keys.
// Change the input XML and try the request again.
//
#define ERROR_WSMAN_CANNOT_CHANGE_KEYS   0x803380EDL

//
// MessageId: ERROR_WSMAN_CERT_INVALID_USAGE
//
// MessageText:
//
// The WinRM client cannot process the request. The Enhanced Key Usage (EKU) field of the certificate is not set to "Server Authentication".
// Retry the request with a certificate that has the correct EKU.
//
#define ERROR_WSMAN_CERT_INVALID_USAGE   0x803380EEL

//
// MessageId: ERROR_WSMAN_RESPONSE_NO_RESULTS
//
// MessageText:
//
// The WinRM client cannot process the request. The response from the destination computer does not include any results.
//
#define ERROR_WSMAN_RESPONSE_NO_RESULTS  0x803380EFL

//
// MessageId: ERROR_WSMAN_CREATE_RESPONSE_NO_EPR
//
// MessageText:
//
// The WinRM client cannot process the request. The response to a create request did not contain a valid end point reference.
// The ResourceCreated element was not found or did not contain valid content.
//
#define ERROR_WSMAN_CREATE_RESPONSE_NO_EPR 0x803380F0L

//
// MessageId: ERROR_WSMAN_RESPONSE_INVALID_ENUMERATION_CONTEXT
//
// MessageText:
//
// The WinRM client cannot process the request. The response from the destination computer does not contain a valid SOAP enumeration context.
//
#define ERROR_WSMAN_RESPONSE_INVALID_ENUMERATION_CONTEXT 0x803380F1L

//
// MessageId: ERROR_WSMAN_RESPONSE_NO_XML_FRAGMENT_WRAPPER
//
// MessageText:
//
// The WinRM client cannot process the request. The response from the destination computer contains a WS-Management FragmentTransfer header but the content of the body is not wrapped by the WS-Management XmlFragment wrapper.
//
#define ERROR_WSMAN_RESPONSE_NO_XML_FRAGMENT_WRAPPER 0x803380F2L

//
// MessageId: ERROR_WSMAN_RESPONSE_INVALID_MESSAGE_INFORMATION_HEADER
//
// MessageText:
//
// The WinRM client cannot process the request. The response from the destination computer contains one or more invalid SOAP headers.
//
#define ERROR_WSMAN_RESPONSE_INVALID_MESSAGE_INFORMATION_HEADER 0x803380F3L

//
// MessageId: ERROR_WSMAN_RESPONSE_NO_SOAP_HEADER_BODY
//
// MessageText:
//
// The WinRM client cannot process the request. It cannot find any SOAP Headers or Body elements in the response from the destination computer.
//
#define ERROR_WSMAN_RESPONSE_NO_SOAP_HEADER_BODY 0x803380F4L

//
// MessageId: ERROR_WSMAN_HTTP_NO_RESPONSE_DATA
//
// MessageText:
//
// The WinRM client cannot process the request. The destination computer returned an empty response to the request.
//
#define ERROR_WSMAN_HTTP_NO_RESPONSE_DATA 0x803380F5L

//
// MessageId: ERROR_WSMAN_RESPONSE_INVALID_SOAP_FAULT
//
// MessageText:
//
// The WinRM client cannot process the request. The destination computer returned an invalid SOAP fault.
//
#define ERROR_WSMAN_RESPONSE_INVALID_SOAP_FAULT 0x803380F6L

//
// MessageId: ERROR_WSMAN_HTTP_INVALID_CONTENT_TYPE_IN_RESPONSE_DATA
//
// MessageText:
//
// The WinRM client cannot process the request. It cannot determine the content type of the HTTP response from the destination computer. The content type is absent or invalid.
//
#define ERROR_WSMAN_HTTP_INVALID_CONTENT_TYPE_IN_RESPONSE_DATA 0x803380F7L

//
// MessageId: ERROR_WSMAN_HTTP_CONTENT_TYPE_MISSMATCH_RESPONSE_DATA
//
// MessageText:
//
// The WinRM client cannot process the request. The HTTP response from the destination computer was not in the same format as the request. A Unicode request packet may have been sent and an ANSI packet received.
//
#define ERROR_WSMAN_HTTP_CONTENT_TYPE_MISSMATCH_RESPONSE_DATA 0x803380F8L

//
// MessageId: ERROR_WSMAN_CANNOT_DECRYPT
//
// MessageText:
//
// The WinRM client cannot process the request. The encrypted message body has an invalid format and cannot be decrypted. Ensure that the service is encrypting the message body according to the specifications.
//
#define ERROR_WSMAN_CANNOT_DECRYPT       0x803380F9L

//
// MessageId: ERROR_WSMAN_INVALID_URI_WMI_SINGLETON
//
// MessageText:
//
// The WinRM client cannot process the request. The resource URI is not valid: it does not contain keys, but the class selected is not a singleton.
// To access an instance which is not a singleton, keys must be provided.
// Use the following command to get more information in how to construct a resource URI: "winrm help uris".
//
#define ERROR_WSMAN_INVALID_URI_WMI_SINGLETON 0x803380FAL

//
// MessageId: ERROR_WSMAN_INVALID_URI_WMI_ENUM_WQL
//
// MessageText:
//
// The WinRM client cannot process the request. The resource URI for an enumeration operation with WQL filter must not contain keys and the class name must be '*' (star).
// Use the following command to get more information in how to construct a resource URI: "winrm help uris".
//
#define ERROR_WSMAN_INVALID_URI_WMI_ENUM_WQL 0x803380FBL

//
// MessageId: ERROR_WSMAN_NO_IDENTIFY_FOR_LOCAL_SESSION
//
// MessageText:
//
// The WS-Management identification operation is only available on remote sessions.
//
#define ERROR_WSMAN_NO_IDENTIFY_FOR_LOCAL_SESSION 0x803380FCL

//
// MessageId: ERROR_WSMAN_NO_PUSH_SUBSCRIPTION_FOR_LOCAL_SESSION
//
// MessageText:
//
// Subscribe operation with Push delivery mode is only available on remote sessions.
//
#define ERROR_WSMAN_NO_PUSH_SUBSCRIPTION_FOR_LOCAL_SESSION 0x803380FDL

//
// MessageId: ERROR_WSMAN_INVALID_SUBSCRIPTION_MANAGER
//
// MessageText:
//
// The subscription manager address is invalid. The response was not received from the address to which the subscription request was sent.
//
#define ERROR_WSMAN_INVALID_SUBSCRIPTION_MANAGER 0x803380FEL

//
// MessageId: ERROR_WSMAN_NON_PULL_SUBSCRIPTION_NOT_SUPPORTED
//
// MessageText:
//
// Only subscriptions with Pull delivery mode are supported by the plugin.
//
#define ERROR_WSMAN_NON_PULL_SUBSCRIPTION_NOT_SUPPORTED 0x803380FFL

//
// MessageId: ERROR_WSMAN_WMI_MAX_NESTED
//
// MessageText:
//
// WinRM cannot process the request because the WMI object contains too many levels of nested embedded objects.
//
#define ERROR_WSMAN_WMI_MAX_NESTED       0x80338100L

//
// MessageId: ERROR_WSMAN_REMOTE_CIMPATH_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service cannot process the request. 
// It does not support retrieving a WMI object that contains a property of type CIM_REFERENCE and the value of that property contains a remote machine name.
//
#define ERROR_WSMAN_REMOTE_CIMPATH_NOT_SUPPORTED 0x80338101L

//
// MessageId: ERROR_WSMAN_WMI_PROVIDER_NOT_CAPABLE
//
// MessageText:
//
// The WS-Management service cannot process the request. The WMI service reported that the WMI provider could not perform the requested operation.
//
#define ERROR_WSMAN_WMI_PROVIDER_NOT_CAPABLE 0x80338102L

//
// MessageId: ERROR_WSMAN_WMI_INVALID_VALUE
//
// MessageText:
//
// The WS-Management service cannot process the request. A value retrieved from the WMI service or the WMI provider is invalid.
//
#define ERROR_WSMAN_WMI_INVALID_VALUE    0x80338103L

//
// MessageId: ERROR_WSMAN_WMI_SVC_ACCESS_DENIED
//
// MessageText:
//
// The WS-Management service cannot process the request. The WMI service returned an 'access denied' error.
//
#define ERROR_WSMAN_WMI_SVC_ACCESS_DENIED 0x80338104L

//
// MessageId: ERROR_WSMAN_WMI_PROVIDER_ACCESS_DENIED
//
// MessageText:
//
// The WS-Management service cannot process the request. The WMI provider returned an 'access denied' error.
//
#define ERROR_WSMAN_WMI_PROVIDER_ACCESS_DENIED 0x80338105L

//
// MessageId: ERROR_WSMAN_WMI_CANNOT_CONNECT_ACCESS_DENIED
//
// MessageText:
//
// The WS-Management service cannot process the request. An 'access denied' error was received when connecting to the WMI service on the computer specified.
//
#define ERROR_WSMAN_WMI_CANNOT_CONNECT_ACCESS_DENIED 0x80338106L

//
// MessageId: ERROR_WSMAN_INVALID_FILTER_XML
//
// MessageText:
//
// The WS-Management service cannot process the request because the filter XML is invalid.
//
#define ERROR_WSMAN_INVALID_FILTER_XML   0x80338107L

//
// MessageId: ERROR_WSMAN_ENUMERATE_WMI_INVALID_KEY
//
// MessageText:
//
// The WS-Management service cannot process the request. The resource URI for an Enumerate operation must not contain keys.
//
#define ERROR_WSMAN_ENUMERATE_WMI_INVALID_KEY 0x80338108L

//
// MessageId: ERROR_WSMAN_INVALID_FRAGMENT_PATH_BLANK
//
// MessageText:
//
// Cannot execute the Fragment-Level operation because the fragment path contains either "" (blank or empty string) or NULL.
// Change the value of the fragment path and try the request again.
//
#define ERROR_WSMAN_INVALID_FRAGMENT_PATH_BLANK 0x80338109L

//
// MessageId: ERROR_WSMAN_INVALID_CHARACTERS_IN_RESPONSE
//
// MessageText:
//
// The WinRM client cannot process the request. The response received from the destination machine contains invalid characters and cannot be processed.
//
#define ERROR_WSMAN_INVALID_CHARACTERS_IN_RESPONSE 0x8033810AL

//
// MessageId: ERROR_WSMAN_KERBEROS_IPADDRESS
//
// MessageText:
//
// The WinRM client cannot process the request.
// Kerberos authentication cannot be used when the destination is an IP address.
// Specify a DNS or NetBIOS destination or specify Basic or Negotiate authentication.
//
#define ERROR_WSMAN_KERBEROS_IPADDRESS   0x8033810BL

//
// MessageId: ERROR_WSMAN_CLIENT_WORKGROUP_NO_KERBEROS
//
// MessageText:
//
// The WinRM client cannot process the request. Kerberos authentication cannot be used if the client computer or the destination computer are not joined to a domain.
// Specify a different authentication mechanism than Kerberos.
//
#define ERROR_WSMAN_CLIENT_WORKGROUP_NO_KERBEROS 0x8033810CL

//
// MessageId: ERROR_WSMAN_INVALID_BATCH_SETTINGS_PARAMETER
//
// MessageText:
//
// The WinRM client cannot process the request. The batch settings parameter is invalid.
//
#define ERROR_WSMAN_INVALID_BATCH_SETTINGS_PARAMETER 0x8033810DL

//
// MessageId: ERROR_WSMAN_SERVER_DESTINATION_LOCALHOST
//
// MessageText:
//
// The WinRM client cannot process the request. If you do not specify an authentication mechanism or you specify Kerberos, then you cannot use "localhost" or "127.0.0.1" or "[::1]" for the remote host name.
// You can explicitly specify a different authentication mechanism than Kerberos or specify the remote host as a DNS name or NetBIOS name.
//
#define ERROR_WSMAN_SERVER_DESTINATION_LOCALHOST 0x8033810EL

//
// MessageId: ERROR_WSMAN_UNKNOWN_HTTP_STATUS_RETURNED
//
// MessageText:
//
// The WinRM client received an unknown HTTP status code from the remote WS-Management service.
//
#define ERROR_WSMAN_UNKNOWN_HTTP_STATUS_RETURNED 0x8033810FL

// This error message is deprecated
//
// MessageId: ERROR_WSMAN_UNSUPPORTED_HTTP_STATUS_REDIRECT
//
// MessageText:
//
// The WinRM client received a HTTP redirect status code from the remote WS-Management service. WinRM does not support redirects.
//
#define ERROR_WSMAN_UNSUPPORTED_HTTP_STATUS_REDIRECT 0x80338110L

//
// MessageId: ERROR_WSMAN_HTTP_REQUEST_TOO_LARGE_STATUS
//
// MessageText:
//
// The WinRM client sent a request to the remote WS-Management service and got a response saying the request was too large.
//
#define ERROR_WSMAN_HTTP_REQUEST_TOO_LARGE_STATUS 0x80338111L

//
// MessageId: ERROR_WSMAN_HTTP_SERVICE_UNAVAILABLE_STATUS
//
// MessageText:
//
// The connection to the specified remote host was refused.
// Verify that the WS-Management service is running on the remote host and configured to listen for requests on the correct port and HTTP URL.
//
#define ERROR_WSMAN_HTTP_SERVICE_UNAVAILABLE_STATUS 0x80338112L

//
// MessageId: ERROR_WSMAN_HTTP_NOT_FOUND_STATUS
//
// MessageText:
//
// The WinRM client sent a request to an HTTP server and got a response saying the requested HTTP URL was not available.
// This is usually returned by a HTTP server that does not support the WS-Management protocol.
//
#define ERROR_WSMAN_HTTP_NOT_FOUND_STATUS 0x80338113L

//
// MessageId: ERROR_WSMAN_EVENTING_MISSING_LOCALE_IN_DELIVERY
//
// MessageText:
//
// The subscribe packet had a Locale element with missing lang attribute. The lang attribute is required for the Locale element. 
//
#define ERROR_WSMAN_EVENTING_MISSING_LOCALE_IN_DELIVERY 0x80338114L

//
// MessageId: ERROR_WSMAN_QUICK_CONFIG_FAILED_CERT_REQUIRED
//
// MessageText:
//
// Cannot create a WinRM listener on HTTPS because this machine does not have an appropriate certificate. To be used for SSL, a certificate must have a CN matching the hostname, be appropriate for Server Authentication, and not be expired, revoked, or self-signed.
//
#define ERROR_WSMAN_QUICK_CONFIG_FAILED_CERT_REQUIRED 0x80338115L

//
// MessageId: ERROR_WSMAN_QUICK_CONFIG_FIREWALL_EXCEPTIONS_DISALLOWED
//
// MessageText:
//
// Firewall does not allow exceptions; WinRM cannot be setup for remote access.
//
#define ERROR_WSMAN_QUICK_CONFIG_FIREWALL_EXCEPTIONS_DISALLOWED 0x80338116L

//
// MessageId: ERROR_WSMAN_QUICK_CONFIG_LOCAL_POLICY_CHANGE_DISALLOWED
//
// MessageText:
//
// The Windows Remote Management (WinRM) service cannot be configured for remote access because Group Policy does not allow local firewall changes. Check the Group Policy settings to allow local firewall exceptions and add WinRM to the firewall exceptions.
//
#define ERROR_WSMAN_QUICK_CONFIG_LOCAL_POLICY_CHANGE_DISALLOWED 0x80338117L

//
// MessageId: ERROR_WSMAN_INVALID_SELECTOR_NAME
//
// MessageText:
//
// The WinRM client cannot proces the request, The selector name is invalid, Change the selector name and try the request again.
//
#define ERROR_WSMAN_INVALID_SELECTOR_NAME 0x80338118L

//
// MessageId: ERROR_WSMAN_ENCODING_TYPE
//
// MessageText:
//
// The WS-Management service does not support the encoding type specified.
//
#define ERROR_WSMAN_ENCODING_TYPE        0x80338119L

//
// MessageId: ERROR_WSMAN_ENDPOINT_UNAVAILABLE_INVALID_VALUE
//
// MessageText:
//
// The WS-Management service cannot process the request because the selector values do not match a known resource, or the resource is offline. 
// Retry the request later when the resource is online, or try a different selector.
//
#define ERROR_WSMAN_ENDPOINT_UNAVAILABLE_INVALID_VALUE 0x8033811AL

//
// MessageId: ERROR_WSMAN_INVALID_HEADER
//
// MessageText:
//
// The WS-Management service cannot process the request because the a header in the request is invalid.
//
#define ERROR_WSMAN_INVALID_HEADER       0x8033811BL

//
// MessageId: ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TYPE
//
// MessageText:
//
// The expiration time specified for enumeration was invalid. Specify the expiration time as a duration.
//
#define ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TYPE 0x8033811CL

//
// MessageId: ERROR_WSMAN_MAX_ELEMENTS_NOT_SUPPORTED
//
// MessageText:
//
// The WS-Management service received a request which specified a maximum number of elements, but the service does not support this feature.
// Retry the request without this element specified.
//
#define ERROR_WSMAN_MAX_ELEMENTS_NOT_SUPPORTED 0x8033811DL

//
// MessageId: ERROR_WSMAN_WMI_PROVIDER_INVALID_PARAMETER
//
// MessageText:
//
// The WS-Management service cannot process the request. The WMI provider returned an 'invalid parameter' error.
//
#define ERROR_WSMAN_WMI_PROVIDER_INVALID_PARAMETER 0x8033811EL

//
// MessageId: ERROR_WSMAN_CLIENT_MULTIPLE_ENUM_MODE_FLAGS
//
// MessageText:
//
// The WinRM client cannot process the request. The request must contain one and only one enumeration mode.
// Change the request to contain only one enumeration mode and try again.
//
#define ERROR_WSMAN_CLIENT_MULTIPLE_ENUM_MODE_FLAGS 0x8033811FL

//
// MessageId: ERROR_WINRS_CLIENT_INVALID_FLAG
//
// MessageText:
//
// The WinRS client cannot process the request. An invalid flag was specified for this request.
// Remove or change the invalid flag and try the request again.
//
#define ERROR_WINRS_CLIENT_INVALID_FLAG  0x80338120L

//
// MessageId: ERROR_WINRS_CLIENT_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. One of the parameters required is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_NULL_PARAM    0x80338121L

// wsman, code=Sender, subcode=WS-Management CannotProcessFilter, details=
//
// MessageId: ERROR_WSMAN_CANNOT_PROCESS_FILTER
//
// MessageText:
//
// The data source could not process the filter. The filter might be missing, invalid or too complex to process.
// If a service only supports a subset of a filter dialect (such as XPath level 1), it may return this fault for valid
// filter expressions outside of the supported subset.
// Change the filter and try the request again. 
//
#define ERROR_WSMAN_CANNOT_PROCESS_FILTER 0x80338122L

//
// MessageId: ERROR_WSMAN_CLIENT_ENUMERATORADDEVENT_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManEnumeratorAddEvent function is null or zero. Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_ENUMERATORADDEVENT_NULL_PARAM 0x80338123L

//
// MessageId: ERROR_WSMAN_ADDOBJECT_MISSING_OBJECT
//
// MessageText:
//
// The WinRM client cannot process the request. The object parameter for the WSManEnumeratorAddObject function is null or zero, but the enumeration mode is Object or ObjectAndEPR.
//
#define ERROR_WSMAN_ADDOBJECT_MISSING_OBJECT 0x80338124L

//
// MessageId: ERROR_WSMAN_ADDOBJECT_MISSING_EPR
//
// MessageText:
//
// The WinRM client cannot process the request. The EPR parameter for the WSManEnumeratorAddObject function is null or zero, but the enumeration mode is EPR or ObjectAndEPR.
//
#define ERROR_WSMAN_ADDOBJECT_MISSING_EPR 0x80338125L

// Returned by client when get timeout from network layer
//
// MessageId: ERROR_WSMAN_NETWORK_TIMEDOUT
//
// MessageText:
//
// The WinRM client cannot complete the operation within the time specified. Check if the machine name is valid and is reachable over the network and firewall exception for Windows Remote Management service is enabled.
//
#define ERROR_WSMAN_NETWORK_TIMEDOUT     0x80338126L

//
// MessageId: ERROR_WINRS_RECEIVE_IN_PROGRESS
//
// MessageText:
//
// Not used. To be removed.
//
#define ERROR_WINRS_RECEIVE_IN_PROGRESS  0x80338127L

//
// MessageId: ERROR_WINRS_RECEIVE_NO_RESPONSE_DATA
//
// MessageText:
//
// The WinRS client cannot process the Receive request because the shell plugin returned an empty response to the request.
//
#define ERROR_WINRS_RECEIVE_NO_RESPONSE_DATA 0x80338128L

//
// MessageId: ERROR_WINRS_CLIENT_CREATESHELL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManCreateShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_CREATESHELL_NULL_PARAM 0x80338129L

//
// MessageId: ERROR_WINRS_CLIENT_CLOSESHELL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WinrsCloseShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_CLOSESHELL_NULL_PARAM 0x8033812AL

//
// MessageId: ERROR_WINRS_CLIENT_FREECREATESHELLRESULT_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. The parameter required for the WinrsFreeCreateShellResult function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_FREECREATESHELLRESULT_NULL_PARAM 0x8033812BL

//
// MessageId: ERROR_WINRS_CLIENT_RUNCOMMAND_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManRunShellCommand function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_RUNCOMMAND_NULL_PARAM 0x8033812CL

//
// MessageId: ERROR_WINRS_CLIENT_FREERUNCOMMANDRESULT_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. The parameter required for the WinrsFreeRunCommandResult function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_FREERUNCOMMANDRESULT_NULL_PARAM 0x8033812DL

//
// MessageId: ERROR_WINRS_CLIENT_SIGNAL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManSignalShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_SIGNAL_NULL_PARAM 0x8033812EL

//
// MessageId: ERROR_WINRS_CLIENT_RECEIVE_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSMansReceiveShellOutput function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_RECEIVE_NULL_PARAM 0x8033812FL

//
// MessageId: ERROR_WINRS_CLIENT_FREEPULLRESULT_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. The parameter required for the WinrsFreePullResult function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_FREEPULLRESULT_NULL_PARAM 0x80338130L

//
// MessageId: ERROR_WINRS_CLIENT_PULL_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. One of the parameters required for the WinrsPull function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_PULL_NULL_PARAM 0x80338131L

//
// MessageId: ERROR_WINRS_CLIENT_CLOSERECEIVEHANDLE_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. The parameter required for the WinrsCloseReceiveHandle function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_CLOSERECEIVEHANDLE_NULL_PARAM 0x80338132L

//
// MessageId: ERROR_WINRS_CLIENT_SEND_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManSendShellInput function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_SEND_NULL_PARAM 0x80338133L

//
// MessageId: ERROR_WINRS_CLIENT_PUSH_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. One of the parameters required for the WinrsPush function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_PUSH_NULL_PARAM 0x80338134L

//
// MessageId: ERROR_WINRS_CLIENT_CLOSESENDHANDLE_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. The parameter required for the WinrsCloseSendHandle function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_CLOSESENDHANDLE_NULL_PARAM 0x80338135L

//
// MessageId: ERROR_WINRS_CLIENT_GET_NULL_PARAM
//
// MessageText:
//
// The WinRS client cannot process the request. One of the parameters required for the WinrsGet function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WINRS_CLIENT_GET_NULL_PARAM 0x80338136L

//
// MessageId: ERROR_WSMAN_POLYMORPHISM_MODE_UNSUPPORTED
//
// MessageText:
//
// The WS-Management service does not support the specified polymorphism mode. Try changing the polymorphism mode specified, and try again.
//
#define ERROR_WSMAN_POLYMORPHISM_MODE_UNSUPPORTED 0x80338137L

//
// MessageId: ERROR_WSMAN_REQUEST_NOT_SUPPORTED_AT_SERVICE
//
// MessageText:
//
// The WS-Management service cannot process the request because the specified URI is not supported on the service side. Retry the request with local session.
//
#define ERROR_WSMAN_REQUEST_NOT_SUPPORTED_AT_SERVICE 0x80338138L

//
// MessageId: ERROR_WSMAN_URI_NON_DMTF_CLASS
//
// MessageText:
//
// The WS-Management service cannot process the request. A DMTF resource URI was used to access a non-DMTF class. Try again using a non-DMTF resource URI.
//
#define ERROR_WSMAN_URI_NON_DMTF_CLASS   0x80338139L

//
// MessageId: ERROR_WSMAN_URI_WRONG_DMTF_VERSION
//
// MessageText:
//
// The WS-Management service cannot process the request. The DMTF class in the repository uses a different major version number from the requested class. This class can be accessed using a non-DMTF resource URI.
//
#define ERROR_WSMAN_URI_WRONG_DMTF_VERSION 0x8033813AL

//
// MessageId: ERROR_WSMAN_DIFFERENT_CIM_SELECTOR
//
// MessageText:
//
// The WS-Management service cannot process the request. The resource URI and __cimnamespace selector attempted to use different namespaces. Try removing the __cimnamespace selector or using a DMTF resource URI. If a non-DMTF resource URI is used with a __cimnamespace selector, the namespaces must match.
//
#define ERROR_WSMAN_DIFFERENT_CIM_SELECTOR 0x8033813BL

//
// MessageId: ERROR_WSMAN_PUSHSUBSCRIPTION_INVALIDUSERACCOUNT
//
// MessageText:
//
// The WS-Management client cannot process the request. To use the WSManSubscribe API the user has to be running under Network Service account. No other account is supported currently for push subscriptions.
//
#define ERROR_WSMAN_PUSHSUBSCRIPTION_INVALIDUSERACCOUNT 0x8033813CL

//
// MessageId: ERROR_WSMAN_EVENTING_NONDOMAINJOINED_PUBLISHER
//
// MessageText:
//
// The WS-Management client cannot process the request. The event source machine is not joined to a domain.
// To set up a push subscription session to an event source the source has to be connected to a domain.
// To fix this problem either join the event source machine to a domain or use PULL as the delivery mode for the subscription.
//
#define ERROR_WSMAN_EVENTING_NONDOMAINJOINED_PUBLISHER 0x8033813DL

//
// MessageId: ERROR_WSMAN_EVENTING_NONDOMAINJOINED_COLLECTOR
//
// MessageText:
//
// The WS-Management client cannot process the request. The subscriber machine is not joined to a domain.
// To set up a push subscription session to an event source, the subscriber machine has to be connected to a domain.
// To fix this problem either join the subscriber machine to a domain or use PULL as the delivery mode for the subscription.
//
#define ERROR_WSMAN_EVENTING_NONDOMAINJOINED_COLLECTOR 0x8033813EL

//
// MessageId: ERROR_WSMAN_CONFIG_READONLY_PROPERTY
//
// MessageText:
//
// The WinRM client cannot process the request because it is trying to update a read-only setting.
// Remove this setting from the command and try again.
//
#define ERROR_WSMAN_CONFIG_READONLY_PROPERTY 0x8033813FL

//
// MessageId: ERROR_WINRS_CODE_PAGE_NOT_SUPPORTED
//
// MessageText:
//
// The WinRS client cannot process the request. The server cannot set Code Page.
// You may want to use the CHCP command to change the client Code Page to 437 and receive the results in English.
//
#define ERROR_WINRS_CODE_PAGE_NOT_SUPPORTED 0x80338140L

//
// MessageId: ERROR_WSMAN_CLIENT_DISABLE_LOOPBACK_WITH_EXPLICIT_CREDENTIALS
//
// MessageText:
//
// Not used. To be removed.
//
#define ERROR_WSMAN_CLIENT_DISABLE_LOOPBACK_WITH_EXPLICIT_CREDENTIALS 0x80338141L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_DISABLE_LOOPBACK
//
// MessageText:
//
// Not used. To be removed.
//
#define ERROR_WSMAN_CLIENT_INVALID_DISABLE_LOOPBACK 0x80338142L

//
// MessageId: ERROR_WSMAN_CLIENT_ENUM_RECEIVED_TOO_MANY_ITEMS
//
// MessageText:
//
// The WS-Management client received too many results from the server.
// The server implementation should never return more items than are specified by the client.
//
#define ERROR_WSMAN_CLIENT_ENUM_RECEIVED_TOO_MANY_ITEMS 0x80338143L

//
// MessageId: ERROR_WSMAN_MULTIPLE_CREDENTIALS
//
// MessageText:
//
// The WinRM client cannot process the request. A certificate thumbprint was specified together with a user name or password. 
// Only one type of credentials can be specified. Remove the credentials that does not correspond to the authentication mechanism that you indend to use and try the request again.
//
#define ERROR_WSMAN_MULTIPLE_CREDENTIALS 0x80338144L

//
// MessageId: ERROR_WSMAN_AUTHENTICATION_INVALID_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. The flag that specifies the authentication mechanism to use is incorrect.
// Remove or change the invalid flag and try the request again.
//
#define ERROR_WSMAN_AUTHENTICATION_INVALID_FLAG 0x80338145L

//
// MessageId: ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_DEFAULT_AUTHENTICATION
//
// MessageText:
//
// The WinRM client cannot process the request. When an authentication mechanism is not specified, only user name and password credentials are allowed.
// If you want to use a different type of credentials then you need to specify the authentication mechanism.
// Specify the authentication mechanism or the correct credentials and try the request again.
//
#define ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_DEFAULT_AUTHENTICATION 0x80338146L

//
// MessageId: ERROR_WSMAN_CLIENT_USERNAME_AND_PASSWORD_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. For authentication mechanisms that require the credentials of an user account, both user name and password must be specified.
// Specify the missing user name or password and try the request again.
//
#define ERROR_WSMAN_CLIENT_USERNAME_AND_PASSWORD_NEEDED 0x80338147L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_CERT_DNS_OR_UPN
//
// MessageText:
//
// The WinRM client cannot process the request. If you are using a machine certificate, it must contain a DNS name in the Subject Alternative Name extension or in the Subject Name field, and no UPN name.
// If you are using an user certificate, it must contain an UPN name in the Subject Alternative Name extention, and no DNS name.
// Change the certificate structure and try the request again.
//
#define ERROR_WSMAN_CLIENT_INVALID_CERT_DNS_OR_UPN 0x80338148L

//
// MessageId: ERROR_WSMAN_CREATESHELL_NULL_ENVIRONMENT_VARIABLE_NAME
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the environment variable name passed to the WSManCreateShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CREATESHELL_NULL_ENVIRONMENT_VARIABLE_NAME 0x80338149L

//
// MessageId: ERROR_WSMAN_SHELL_ALREADY_CLOSED
//
// MessageText:
//
// An operation is being attempted on a shell that is being closed. This can happen if the shell that is being used is also being closed by another thread.
//
#define ERROR_WSMAN_SHELL_ALREADY_CLOSED 0x8033814AL

//
// MessageId: ERROR_WSMAN_CREATESHELL_NULL_STREAMID
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the stream id name passed to the WSManCreateShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CREATESHELL_NULL_STREAMID 0x8033814BL

//
// MessageId: ERROR_WSMAN_SHELL_INVALID_SHELL_HANDLE
//
// MessageText:
//
// The WinRM Shell client cannot process the request. The shell handle passed to the WSMan Shell function is not valid.
// The shell handle is valid only when WSManCreateShell function completes successfully. Change the request including a valid shell handle and try again.
//
#define ERROR_WSMAN_SHELL_INVALID_SHELL_HANDLE 0x8033814CL

//
// MessageId: ERROR_WSMAN_SHELL_INVALID_COMMAND_HANDLE
//
// MessageText:
//
// The WinRM Shell client cannot process the request. The command handle passed to the WSMan Shell function is not valid.
// The command handle is valid only when WSManRunShellCommand function completes successfully. Change the request including a valid shell handle and try again.
//
#define ERROR_WSMAN_SHELL_INVALID_COMMAND_HANDLE 0x8033814DL

//
// MessageId: ERROR_WSMAN_RUNSHELLCOMMAND_NULL_ARGUMENT
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the argument value passed to the WSManRunShellCommand function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_RUNSHELLCOMMAND_NULL_ARGUMENT 0x8033814EL

//
// MessageId: ERROR_WSMAN_COMMAND_ALREADY_CLOSED
//
// MessageText:
//
// An operation is being attempted on a command that is being closed. This can happen if the command handle that is being used is also being freed
// by another thread.
//
#define ERROR_WSMAN_COMMAND_ALREADY_CLOSED 0x8033814FL

//
// MessageId: ERROR_WSMAN_SENDSHELLINPUT_INVALID_STREAMID_INDEX
//
// MessageText:
//
// The WinRM Shell client cannot process the request. The stream id index from within WSMAN_STREAM_ELEMENT passed to the WSManSendShellInput function is invalid.
// The stream id index should be an index from within inputStreamSet array passed to the WSManCreateShell function.
// Change the request with a valid index and try again.
//
#define ERROR_WSMAN_SENDSHELLINPUT_INVALID_STREAMID_INDEX 0x80338150L

//
// MessageId: ERROR_WSMAN_SHELL_SYNCHRONOUS_NOT_SUPPORTED
//
// MessageText:
//
// Not used. To be removed.
//
#define ERROR_WSMAN_SHELL_SYNCHRONOUS_NOT_SUPPORTED 0x80338151L

//
// MessageId: ERROR_WSMAN_NO_CERTMAPPING_OPERATION_FOR_LOCAL_SESSION
//
// MessageText:
//
// The WS-Management operations to update the certificate mapping store of the WINRM service config can only be done remotely.
//
#define ERROR_WSMAN_NO_CERTMAPPING_OPERATION_FOR_LOCAL_SESSION 0x80338152L

//
// MessageId: ERROR_WSMAN_CERTMAPPING_CONFIGLIMIT_EXCEEDED
//
// MessageText:
//
// The WINRM certificate mapping configuration store has reached an internal limit and cannot create any more entries. Remove some entries and try again.
//
#define ERROR_WSMAN_CERTMAPPING_CONFIGLIMIT_EXCEEDED 0x80338153L

//
// MessageId: ERROR_WSMAN_CERTMAPPING_INVALIDUSERCREDENTIALS
//
// MessageText:
//
// The WINRM certificate mapping configuration operation cannot be completed because the user credentials could not be verified. 
// Please check the username and password used for mapping this certificate and verify that it is a non-domain account and try again.
// 
//
#define ERROR_WSMAN_CERTMAPPING_INVALIDUSERCREDENTIALS 0x80338154L

//
// MessageId: ERROR_WSMAN_CERT_INVALID_USAGE_CLIENT
//
// MessageText:
//
// The WinRM client cannot process the request. The Enhanced Key Usage (EKU) field of the certificate is not set to "Client Authentication".
// Retry the request with a certificate that has the correct EKU.
//
#define ERROR_WSMAN_CERT_INVALID_USAGE_CLIENT 0x80338155L

//
// MessageId: ERROR_WSMAN_CERT_MISSING_AUTH_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. A certificate thumbprint was specified, but the following flag is missing: WSManFlagUseClientCertificate.
// Add the flag and try the request again.
//
#define ERROR_WSMAN_CERT_MISSING_AUTH_FLAG 0x80338156L

//
// MessageId: ERROR_WSMAN_CERT_MULTIPLE_CREDENTIALS_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. The following flags cannot be specified together: WSManFlagUseClientCertificate and WSManFlagCredUsernamePassword.
// Remove one of the flags and try the request again.
//
#define ERROR_WSMAN_CERT_MULTIPLE_CREDENTIALS_FLAG 0x80338157L

//
// MessageId: ERROR_WSMAN_CONFIG_SHELL_URI_INVALID
//
// MessageText:
//
// The WinRM client cannot process the request because the CustomRemoteShell URI specified is invalid.
// CustomRemoteShell URI should start with WinRM shell resource URI prefix: "http://schemas.microsoft.com/wbem/wsman/1/windows/shell".
// The URI should not contain invalid characters including '*', '?', white spaces and tabs.
// The CustomRemoteShell URI cannot be longer than 1023 characters.
//
#define ERROR_WSMAN_CONFIG_SHELL_URI_INVALID 0x80338158L

//
// MessageId: ERROR_WSMAN_CONFIG_SHELL_URI_CMDSHELLURI_NOTPERMITTED
//
// MessageText:
//
// The WinRM client cannot process the request because the CustomRemoteShell URI specified is invalid.
// Windows command shell URI ("http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd") cannot be a CustomRemoteShell URI.
//
#define ERROR_WSMAN_CONFIG_SHELL_URI_CMDSHELLURI_NOTPERMITTED 0x80338159L

//
// MessageId: ERROR_WSMAN_CONFIG_SHELLURI_INVALID_PROCESSPATH
//
// MessageText:
//
// The WinRM client cannot process the request because the process path specified for the CustomRemoteShell table entry is invalid.
// The process path should be absolute and should point to an existing executable.
//
#define ERROR_WSMAN_CONFIG_SHELLURI_INVALID_PROCESSPATH 0x8033815AL

//
// MessageId: ERROR_WINRS_SHELL_URI_INVALID
//
// MessageText:
//
// Not used. To be removed.
//
#define ERROR_WINRS_SHELL_URI_INVALID    0x8033815BL

//
// MessageId: ERROR_WSMAN_INVALID_SECURITY_DESCRIPTOR
//
// MessageText:
//
// The WinRM client cannot process the request because the provided security descriptor is invalid.
//
#define ERROR_WSMAN_INVALID_SECURITY_DESCRIPTOR 0x8033815CL

//
// MessageId: ERROR_WSMAN_POLICY_TOO_COMPLEX
//
// MessageText:
//
// The WinRM service cannot process the request because the WS-Policy contained in the DeliverTo is too complex or uses a structure not understood by the service.
// The WinRM service supports a single layer of policy assertions underneath a wsp:ExactlyOne element.
//
#define ERROR_WSMAN_POLICY_TOO_COMPLEX   0x8033815DL

//
// MessageId: ERROR_WSMAN_POLICY_CANNOT_COMPLY
//
// MessageText:
//
// The WinRM service cannot process the request because the WS-Policy contained in the DeliverTo does not contain any options that the service can comply with.
// The WinRM service supports the following profiles: Negotiate or Kerberos over HTTP, Negotiate or Kerberos over HTTPS, and mutual certificate authentication over HTTPS using issuer thumbprints.
//
#define ERROR_WSMAN_POLICY_CANNOT_COMPLY 0x8033815EL

//
// MessageId: ERROR_WSMAN_INVALID_CONNECTIONRETRY
//
// MessageText:
//
// The WinRM service cannot process the request because the wsman:ConnectionRetry element in the DeliverTo is invalid.
//
#define ERROR_WSMAN_INVALID_CONNECTIONRETRY 0x8033815FL

//
// MessageId: ERROR_WSMAN_URISECURITY_INVALIDURIKEY
//
// MessageText:
//
// WinRM cannot make the configuration change. 
// The URI supplied for the certificate mapping operation is not valid. 
// It must contain at least one character.
// It must not contain internal whitespace.
// It must not contain '?' character.
// A prefix may be specified by using "*" as the last character.
// The URI cannot be longer than 1023 characters.
//
#define ERROR_WSMAN_URISECURITY_INVALIDURIKEY 0x80338160L

//
// MessageId: ERROR_WSMAN_CERTMAPPING_INVALIDSUBJECTKEY
//
// MessageText:
//
// WinRM cannot make the configuration change.
// The Subject used for the certificate mapping operation is not valid. 
// It must contain at least one character. 
// It must contain at most one "*" character which should be the first character.
// (This may be the only character in which case it matches all subjects). 
// The Subject cannot be longer than 1023 characters.
//
#define ERROR_WSMAN_CERTMAPPING_INVALIDSUBJECTKEY 0x80338161L

//
// MessageId: ERROR_WSMAN_CERTMAPPING_INVALIDISSUERKEY
//
// MessageText:
//
// WinRM cannot make the configuration change because the Issuer used for the certificate mapping operation is not valid. 
// The certificate identified by the issuer thumbprint must be present in the machine "Trusted Root Certification Authorities" or "Intermediate Certification Authorities" store. 
// The certificate must have key usage that allows it to sign other certificates.
//
#define ERROR_WSMAN_CERTMAPPING_INVALIDISSUERKEY 0x80338162L

//
// MessageId: ERROR_WSMAN_INVALID_PUBLISHERS_TYPE
//
// MessageText:
//
// The WinRM client cannot process the request because the type field in the WSMAN_ALLOWED_PUBLISHERS argument is invalid.
// Collector-initiated subscriptions must use WSMAN_SINGLE_PUBLISHER and Source-initiated subscriptions must use WSMAN_MULTIPLE_PUBLISHERS.
//
#define ERROR_WSMAN_INVALID_PUBLISHERS_TYPE 0x80338163L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_DELIVERY_RETRY
//
// MessageText:
//
// The WinRM client cannot process the request because the delivery retry parameters are invalid.
// If delivery retry is requested, the deliveryRetryInterval and deliveryRetryAttempts fields must both be nonzero.
//
#define ERROR_WSMAN_CLIENT_INVALID_DELIVERY_RETRY 0x80338164L

//
// MessageId: ERROR_WSMAN_CLIENT_NULL_PUBLISHERS
//
// MessageText:
//
// The WinRM client cannot process the request.
// The required WSMAN_ALLOWED_PUBLISHERS settings is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_NULL_PUBLISHERS 0x80338165L

//
// MessageId: ERROR_WSMAN_CLIENT_NULL_ISSUERS
//
// MessageText:
//
// The WinRM client cannot process the request because client certificate subject filters were specified without any issuers.
// When using client certificate authentication, specify at least one issuer thumbprint.
//
#define ERROR_WSMAN_CLIENT_NULL_ISSUERS  0x80338166L

//
// MessageId: ERROR_WSMAN_CLIENT_NO_SOURCES
//
// MessageText:
//
// The WinRM client cannot process the request because the subscription contains no domain or non-domain sources.
// Subscriptions using WSMAN_MULTIPLE_PUBLISHERS must specify either a security descriptor or an issuer list or both.
//
#define ERROR_WSMAN_CLIENT_NO_SOURCES    0x80338167L

//
// MessageId: ERROR_WSMAN_INVALID_SUBSCRIBE_OBJECT
//
// MessageText:
//
// The WinRM service cannot process the request because the subscription manager returned invalid enumeration results.
// The m:Subscription XML object or m:Version element is missing or invalid.
//
#define ERROR_WSMAN_INVALID_SUBSCRIBE_OBJECT 0x80338168L

//
// MessageId: ERROR_WSMAN_PUBLIC_FIREWALL_PROFILE_ACTIVE
//
// MessageText:
//
// WinRM firewall exception will not work since one of the network connection types on this machine is set to Public.
// Change the network connection type to either Domain or Private and try again.
//
#define ERROR_WSMAN_PUBLIC_FIREWALL_PROFILE_ACTIVE 0x80338169L

//
// MessageId: ERROR_WSMAN_CERTMAPPING_PASSWORDTOOLONG
//
// MessageText:
//
// WinRM cannot make the configuration change.
// The Password used for updating the certificate mapping configuration is not valid. 
// It cannot be longer than 255 characters.
//
#define ERROR_WSMAN_CERTMAPPING_PASSWORDTOOLONG 0x8033816AL

//
// MessageId: ERROR_WSMAN_CERTMAPPING_PASSWORDBLANK
//
// MessageText:
//
// WinRM cannot make the configuration change.
// The Password used for updating the certificate mapping configuration is not valid. 
// A user account used for configuring a certificate mapping cannot have a blank password.
//
#define ERROR_WSMAN_CERTMAPPING_PASSWORDBLANK 0x8033816BL

//
// MessageId: ERROR_WSMAN_CERTMAPPING_PASSWORDUSERTUPLE
//
// MessageText:
//
// WinRM cannot make the configuration change.
// The credential used for updating or creating the certificate mapping configuration is not valid. 
// The credential consists of both Password and UserName being supplied together in a pair.
//
#define ERROR_WSMAN_CERTMAPPING_PASSWORDUSERTUPLE 0x8033816CL

//
// MessageId: ERROR_WSMAN_INVALID_PROVIDER_RESPONSE
//
// MessageText:
//
// The WinRM service executed an operation and the provider returned inconclusive information regarding success or failure of the operation.
// The status was marked as failed, but no error code was given.
//
#define ERROR_WSMAN_INVALID_PROVIDER_RESPONSE 0x8033816DL

//
// MessageId: ERROR_WSMAN_SHELL_NOT_INITIALIZED
//
// MessageText:
//
// The WS-Management service on the remote machine cannot process the shell request.
// This can happen if the WS-Management service on the remote machine was being shutdown.
// To correct this problem restart the WS-Management service on the remote machine and re-send the shell request.
//
#define ERROR_WSMAN_SHELL_NOT_INITIALIZED 0x8033816EL

//
// MessageId: ERROR_WSMAN_CONFIG_SHELLURI_INVALID_OPERATION_ON_KEY
//
// MessageText:
//
// The WinRM service cannot process the request. 
// The URI parameter is the key to CustomRemoteShell table and cannot be modified.
//
#define ERROR_WSMAN_CONFIG_SHELLURI_INVALID_OPERATION_ON_KEY 0x8033816FL

//
// MessageId: ERROR_WSMAN_HTTP_STATUS_SERVER_ERROR
//
// MessageText:
//
// The WinRM client received an HTTP server error status (500), but the remote service did not include any other information about the cause of the failure.
//
#define ERROR_WSMAN_HTTP_STATUS_SERVER_ERROR 0x80338170L

//
// MessageId: ERROR_WSMAN_HTTP_STATUS_BAD_REQUEST
//
// MessageText:
//
// The WinRM client received an HTTP bad request status (400), but the remote service did not include any other information about the cause of the failure.
//
#define ERROR_WSMAN_HTTP_STATUS_BAD_REQUEST 0x80338171L

//
// MessageId: ERROR_WSMAN_CONFIG_CANNOT_CHANGE_CERTMAPPING_KEYS
//
// MessageText:
//
// The WinRM service cannot make the configuration change.
// The selector keys of Subject, URI or Issuer cannot be changed by overriding the selector key value in the body. 
//
#define ERROR_WSMAN_CONFIG_CANNOT_CHANGE_CERTMAPPING_KEYS 0x80338172L

//
// MessageId: ERROR_WSMAN_HTML_ERROR
//
// MessageText:
//
// The WinRM client cannot process the request because it received an HTML error packet.
//
#define ERROR_WSMAN_HTML_ERROR           0x80338173L

//
// MessageId: ERROR_WSMAN_CLIENT_INITIALIZE_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManInitialize function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_INITIALIZE_NULL_PARAM 0x80338174L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_INIT_APPLICATION_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManInitialize API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_INIT_APPLICATION_FLAG 0x80338175L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_DEINIT_APPLICATION_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManDeinitialize API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_DEINIT_APPLICATION_FLAG 0x80338176L

//
// MessageId: ERROR_WSMAN_CLIENT_SETSESSIONOPTION_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManSetSessionOption function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_SETSESSIONOPTION_NULL_PARAM 0x80338177L

//
// MessageId: ERROR_WSMAN_CLIENT_SETSESSIONOPTION_INVALID_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManSetSessionOption function is invalid.
// Change the invalid parameter and try again.
//
#define ERROR_WSMAN_CLIENT_SETSESSIONOPTION_INVALID_PARAM 0x80338178L

//
// MessageId: ERROR_WSMAN_CLIENT_GETSESSIONOPTION_INVALID_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required to get a session option is invalid.
// Change the invalid parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETSESSIONOPTION_INVALID_PARAM 0x80338179L

//
// MessageId: ERROR_WSMAN_CLIENT_CREATESHELL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManCreateShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_CREATESHELL_NULL_PARAM 0x8033817AL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_CREATE_SHELL_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManCreateShell API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_CREATE_SHELL_FLAG 0x8033817BL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_CLOSE_SHELL_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManCloseShell API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_CLOSE_SHELL_FLAG 0x8033817CL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_CLOSE_COMMAND_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManCloseCommand API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_CLOSE_COMMAND_FLAG 0x8033817DL

//
// MessageId: ERROR_WSMAN_CLIENT_CLOSESHELL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManCloseShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_CLOSESHELL_NULL_PARAM 0x8033817EL

//
// MessageId: ERROR_WSMAN_CLIENT_CLOSECOMMAND_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManCloseCommand function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_CLOSECOMMAND_NULL_PARAM 0x8033817FL

//
// MessageId: ERROR_WSMAN_CLIENT_RUNCOMMAND_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManRunShellCommand function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_RUNCOMMAND_NULL_PARAM 0x80338180L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_RUNCOMMAND_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManRunShellCommand API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_RUNCOMMAND_FLAG 0x80338181L

//
// MessageId: ERROR_WSMAN_CLIENT_RUNCOMMAND_NOTCOMPLETED
//
// MessageText:
//
// The WinRM client cannot process the request. You must wait for the WSManRunShellCommand API call to complete before calling WSManCloseShellOperationEx API.
//
#define ERROR_WSMAN_CLIENT_RUNCOMMAND_NOTCOMPLETED 0x80338182L

//
// MessageId: ERROR_WSMAN_NO_COMMAND_RESPONSE
//
// MessageText:
//
// The WinRM client cannot process the request. The response to a Command request did not contain a valid CommandResponse element.
// The CommandResponse element was not found or did not contain valid content.
//
#define ERROR_WSMAN_NO_COMMAND_RESPONSE  0x80338183L

//
// MessageId: ERROR_WSMAN_INVALID_OPTIONSET
//
// MessageText:
//
// The WinRM client cannot process the request. The OptionSet element is invalid.
// Change the request to include a valid OptionSet element and try again.
//
#define ERROR_WSMAN_INVALID_OPTIONSET    0x80338184L

//
// MessageId: ERROR_WSMAN_NO_COMMANDID
//
// MessageText:
//
// The WinRM client cannot process the request. The response to a Command request did not contain a valid CommandResponse element.
// The CommandId element was not found or did not contain valid content.
//
#define ERROR_WSMAN_NO_COMMANDID         0x80338185L

//
// MessageId: ERROR_WSMAN_CLIENT_SIGNAL_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManSignalShell function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_SIGNAL_NULL_PARAM 0x80338186L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_SIGNAL_SHELL_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManSignalShell API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_SIGNAL_SHELL_FLAG 0x80338187L

//
// MessageId: ERROR_WSMAN_CLIENT_SEND_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManSendShellInput function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_SEND_NULL_PARAM 0x80338188L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManSendShellInput API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_FLAG 0x80338189L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_PARAMETER
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid parameter was specified for the WSManSendShellInput API call. 
// streamData parameter should be specified in binary format using WSMAN_DATA_TYPE_BINARY type. 
// Change the invalid parameter and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_PARAMETER 0x8033818AL

//
// MessageId: ERROR_WSMAN_SHELL_INVALID_INPUT_STREAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. The stream name passed to the WSManSendShellInput function is not valid.
// The input stream name should be specified as part of the input streams during shell creation using WSManCreateShell function. 
// Change the request including a valid input stream name and try again.
//
#define ERROR_WSMAN_SHELL_INVALID_INPUT_STREAM 0x8033818BL

//
// MessageId: ERROR_WSMAN_CLIENT_RECEIVE_NULL_PARAM
//
// MessageText:
//
// The WinRM Shell client cannot process the request. One of the parameters required for the WSManReceiveShellOutput function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_RECEIVE_NULL_PARAM 0x8033818CL

//
// MessageId: ERROR_WSMAN_SHELL_INVALID_DESIRED_STREAMS
//
// MessageText:
//
// The WinRM Shell client cannot process the request. The stream or list of streams passed to the WSManReceiveShellOutput function is not valid.
// The desired stream names should be specified as part of the output streams during shell creation using WSManCreateShell function. 
// Change the request including valid desired streams and try again.
//
#define ERROR_WSMAN_SHELL_INVALID_DESIRED_STREAMS 0x8033818DL

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_RECEIVE_SHELL_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManReceiveShellOutput API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_RECEIVE_SHELL_FLAG 0x8033818EL

//
// MessageId: ERROR_WSMAN_NO_RECEIVE_RESPONSE
//
// MessageText:
//
// The WinRM client cannot process the request. The response to a Receive request did not contain a valid ReceiveResponse element.
// The ReceiveResponse element was not found or did not contain valid content.
//
#define ERROR_WSMAN_NO_RECEIVE_RESPONSE  0x8033818FL

//
// MessageId: ERROR_WSMAN_PLUGIN_CONFIGURATION_CORRUPTED
//
// MessageText:
//
// The WSMan plugin configuration is corrupted.
//
#define ERROR_WSMAN_PLUGIN_CONFIGURATION_CORRUPTED 0x80338190L

//
// MessageId: ERROR_WSMAN_INVALID_FILEPATH
//
// MessageText:
//
// The file path specified is either not absolute, not in the system32 directory, or not valid.
//
#define ERROR_WSMAN_INVALID_FILEPATH     0x80338191L

//
// MessageId: ERROR_WSMAN_FILE_NOT_PRESENT
//
// MessageText:
//
// The file specified does not exist.
//
#define ERROR_WSMAN_FILE_NOT_PRESENT     0x80338192L

//
// MessageId: ERROR_WSMAN_IISCONFIGURATION_READ_FAILED
//
// MessageText:
//
// The WSMan extension failed to read IIS configuration.
//
#define ERROR_WSMAN_IISCONFIGURATION_READ_FAILED 0x80338193L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_LOCALE
//
// MessageText:
//
// The WinRM client cannot process the request. The locale option is invalid.
// Change the locale and try again.
//
#define ERROR_WSMAN_CLIENT_INVALID_LOCALE 0x80338194L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_UI_LANGUAGE
//
// MessageText:
//
// The WinRM client cannot process the request. The UI language option is invalid.
// Change the UI language and try again.
//
#define ERROR_WSMAN_CLIENT_INVALID_UI_LANGUAGE 0x80338195L

//
// MessageId: ERROR_WSMAN_CLIENT_GETERRORMESSAGE_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManGetErrorMessage function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETERRORMESSAGE_NULL_PARAM 0x80338196L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_LANGUAGE_CODE
//
// MessageText:
//
// The WinRM client cannot process the request. The language code parameter is invalid. The language code parameter should be either NULL or a valid RFC 3066 language code.
// Change the language code and try the request again.
//
#define ERROR_WSMAN_CLIENT_INVALID_LANGUAGE_CODE 0x80338197L

//
// MessageId: ERROR_WSMAN_CLIENT_INVALID_GETERRORMESSAGE_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. An invalid flag was specified for the WSManGetErrorMessage API call.
// Remove or change the invalid flag and try the call again.
//
#define ERROR_WSMAN_CLIENT_INVALID_GETERRORMESSAGE_FLAG 0x80338198L

//
// MessageId: ERROR_WSMAN_REDIRECT_REQUESTED
//
// MessageText:
//
// The WinRM service cannot process the request because the request needs to be sent to a different machine.
// Use the redirect information to send the request to a new machine.
//
#define ERROR_WSMAN_REDIRECT_REQUESTED   0x80338199L

//
// MessageId: ERROR_WSMAN_PROXY_AUTHENTICATION_INVALID_FLAG
//
// MessageText:
//
// The WinRM client cannot process the request. The flag that specifies the proxy authentication mechanism to use is incorrect. 
// Remove or change the invalid flag and try the request again.
//
#define ERROR_WSMAN_PROXY_AUTHENTICATION_INVALID_FLAG 0x8033819AL

//
// MessageId: ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_PROXY_AUTHENTICATION
//
// MessageText:
//
// The WinRM client cannot process the request. The credentials for proxy authentication are not specified correctly. Both user name and password credentials must be valid.
// Specify the correct credentials and try the request again.
//
#define ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_PROXY_AUTHENTICATION 0x8033819BL

//
// MessageId: ERROR_WSMAN_PROXY_ACCESS_TYPE
//
// MessageText:
//
// The WinRM client cannot process the request. The proxy access type is incorrect. Use one of the proxy access type flags; the flags cannot be combined.
// Change the invalid proxy access type and try the request again.
//
#define ERROR_WSMAN_PROXY_ACCESS_TYPE    0x8033819CL

//
// MessageId: ERROR_WSMAN_INVALID_OPTION_NO_PROXY_SERVER
//
// MessageText:
//
// The WinRM client cannot process the request. The direct connection to the server option cannot be used with non empty proxy authentication data. 
// Change the invalid proxy access type or use empty proxy authentication data and try the request again.
//
#define ERROR_WSMAN_INVALID_OPTION_NO_PROXY_SERVER 0x8033819DL

//
// MessageId: ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_NULL_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManGetSessionOptionAsDword function is null or zero.
// Change the request to include the missing parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_NULL_PARAM 0x8033819EL

//
// MessageId: ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_INVALID_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManGetSessionOptionAsDword function is invalid.
// Change the invalid parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_INVALID_PARAM 0x8033819FL

//
// MessageId: ERROR_WSMAN_CLIENT_GETSESSIONOPTION_STRING_INVALID_PARAM
//
// MessageText:
//
// The WinRM client cannot process the request. One of the parameters required for the WSManGetSessionOptionAsString function is invalid.
// Change the invalid parameter and try again.
//
#define ERROR_WSMAN_CLIENT_GETSESSIONOPTION_STRING_INVALID_PARAM 0x803381A0L

//
// MessageId: ERROR_WSMAN_CREDSSP_USERNAME_PASSWORD_NEEDED
//
// MessageText:
//
// The WinRM client cannot process the request. Requests must include user name and password when CredSSP authentication mechanism is used.
// Add the user name and password or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CREDSSP_USERNAME_PASSWORD_NEEDED 0x803381A1L

//
// MessageId: ERROR_WSMAN_CLIENT_CREDSSP_AUTHENTICATION_DISABLED
//
// MessageText:
//
// The WinRM client cannot process the request.
// CredSSP authentication is currently disabled in the client configuration.
// Change the client configuration and try the request again.
// CredSSP authentication must also be enabled in the server configuration.
// Also, Group Policy must be edited to allow credential delegation to the target computer.
// Use gpedit.msc and look at the following policy: Computer Configuration -> Administrative Templates -> System -> Credentials Delegation -> Allow Delegating Fresh Credentials. 
// Verify that it is enabled and configured with an SPN appropriate for the target computer.
// For example, for a target computer name "myserver.domain.com", the SPN can be one of the following: WSMAN/myserver.domain.com or WSMAN/*.domain.com
//
#define ERROR_WSMAN_CLIENT_CREDSSP_AUTHENTICATION_DISABLED 0x803381A2L

//
// MessageId: ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS
//
// MessageText:
//
// The WinRM client cannot process the request. A computer policy does not allow the delegation of the user credentials to the target computer.
// Use gpedit.msc and look at the following policy: Computer Configuration -> Administrative Templates -> System -> Credentials Delegation -> Allow Delegating Fresh Credentials. 
// Verify that it is enabled and configured with an SPN appropriate for the target computer.
// For example, for a target computer name "myserver.domain.com", the SPN can be one of the following: WSMAN/myserver.domain.com or WSMAN/*.domain.com.
//
#define ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS 0x803381A3L

//
// MessageId: ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS_NTLMONLY
//
// MessageText:
//
// The WinRM client cannot process the request. A computer policy does not allow the delegation of the user credentials to the target computer because the computer is not trusted.
// The identity of the target computer can be verified if you configure the WSMAN service to use a valid certificate using the following command: winrm set winrm/config/service @{CertificateThumbprint="<thumbprint>"} 
// Or you can check the Event Viewer for an event that specifies that the following SPN could not be created: WSMAN/<computerFQDN>. If you find this event, you can manually create the SPN using setspn.exe . 
// If the SPN exists, but CredSSP cannot use Kerberos to validate the identity of the target computer and you still want to allow the delegation of the user credentials to the target computer, use gpedit.msc and look at the following policy: Computer Configuration -> Administrative Templates -> System -> Credentials Delegation -> Allow Fresh Credentials with NTLM-only Server Authentication. 
// Verify that it is enabled and configured with an SPN appropriate for the target computer.
// For example, for a target computer name "myserver.domain.com", the SPN can be one of the following: WSMAN/myserver.domain.com or WSMAN/*.domain.com.
// Try the request again after these changes. 
//
#define ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS_NTLMONLY 0x803381A4L

//
// MessageId: ERROR_WSMAN_QUOTA_MAX_SHELLS
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The maximum number of concurrent shells for this user has been exceeded.
// Close existing shells or raise the quota for this user.
//
#define ERROR_WSMAN_QUOTA_MAX_SHELLS     0x803381A5L

//
// MessageId: ERROR_WSMAN_QUOTA_MAX_OPERATIONS
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The maximum number of concurrent operations for this user has been exceeded.
// Close existing operations for this user, or raise the quota for this user.
//
#define ERROR_WSMAN_QUOTA_MAX_OPERATIONS 0x803381A6L

//
// MessageId: ERROR_WSMAN_QUOTA_USER
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The load quota for this user has been exceeded.
// Send future requests at a slower rate or raise the quota for this user.
//
#define ERROR_WSMAN_QUOTA_USER           0x803381A7L

//
// MessageId: ERROR_WSMAN_QUOTA_SYSTEM
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The load quota for the system has been exceeded.
// Send future requests at a slower rate or raise the system quota.
//
#define ERROR_WSMAN_QUOTA_SYSTEM         0x803381A8L

//
// MessageId: ERROR_WSMAN_DIFFERENT_AUTHZ_TOKEN
//
// MessageText:
//
// The WS-Management service cannot complete the authorization under the given token.
// A previous authorization attempt for the same user resulted in a different token.
// The user record will be revoked and the next request will reauthorize.
//
#define ERROR_WSMAN_DIFFERENT_AUTHZ_TOKEN 0x803381A9L

//
// MessageId: ERROR_WSMAN_REDIRECT_LOCATION_NOT_AVAILABLE
//
// MessageText:
//
// An application tried to retrieve the HTTP Redirect location from the session when no redirect error (ERROR_WSMAN_REDIRECT_REQUESTED) was returned.
// The application needs to be updated so as to only retrieve the location after this error is returned.
//
#define ERROR_WSMAN_REDIRECT_LOCATION_NOT_AVAILABLE 0x803381AAL

//
// MessageId: ERROR_WSMAN_QUOTA_MAX_SHELLUSERS
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The maximum number of users executing shell operations has been exceeded.
// Retry after some time or raise the quota for concurrent shell users.
//
#define ERROR_WSMAN_QUOTA_MAX_SHELLUSERS 0x803381ABL

//
// MessageId: ERROR_WSMAN_REMOTESHELLS_NOT_ALLOWED
//
// MessageText:
//
// The WS-Management service cannot process the request.
// The service is configured to not accept any remote shell requests.
//
#define ERROR_WSMAN_REMOTESHELLS_NOT_ALLOWED 0x803381ACL

//
// MessageId: ERROR_WSMAN_PULL_PARAMS_NOT_SAME_AS_ENUM
//
// MessageText:
//
// The WS-Management service cannot complete the Pull operation for the enumeration because the wsman:MaxEnvelopeSize, wsen:MaxCharacters or wsen:MaxElements parameters differ from those specified to the enumeration.
// The application needs to specify the same parameters for Pull as were specified for the enumeration.
//
#define ERROR_WSMAN_PULL_PARAMS_NOT_SAME_AS_ENUM 0x803381ADL

//
// MessageId: ERROR_WSMAN_DEPRECATED_CONFIG_SETTING
//
// MessageText:
//
// The WinRM service cannot process the request because it is trying to update a deprecated setting.
// Remove this setting from the command and try again.
//
#define ERROR_WSMAN_DEPRECATED_CONFIG_SETTING 0x803381AEL

//
// MessageId: ERROR_WSMAN_URI_SECURITY_URI
//
// MessageText:
//
// The WS-Management service cannot process the configuration settings.
// A Security element contains a URI that does not match its parent Resource element.
//
#define ERROR_WSMAN_URI_SECURITY_URI     0x803381AFL

//
// MessageId: ERROR_WSMAN_CANNOT_USE_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS_FOR_HTTP
//
// MessageText:
//
// The WinRM client cannot process the request. Allow implicit credentials for Negotiate authentication option is only valid for HTTPS transport.
// Remove the allow implicit credentials for Negotiate authentication option and try the request again.
//
#define ERROR_WSMAN_CANNOT_USE_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS_FOR_HTTP 0x803381B0L

//
// MessageId: ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_HTTP
//
// MessageText:
//
// The WinRM client cannot process the request. Setting proxy information is not valid when the HTTP transport is specified.
// Remove the proxy information or change the transport and try the request again.
//
#define ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_HTTP 0x803381B1L

//
// MessageId: ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_KERBEROS
//
// MessageText:
//
// The WinRM client cannot process the request. Setting proxy information is not valid when the authentication mechanism with the remote machine is Kerberos.
// Remove the proxy information or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_KERBEROS 0x803381B2L

//
// MessageId: ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_CREDSSP
//
// MessageText:
//
// The WinRM client cannot process the request. Setting proxy information is not valid when the authentication mechanism with the remote machine is CredSSP.
// Remove the proxy information or change the authentication mechanism and try the request again.
//
#define ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_CREDSSP 0x803381B3L

//
// MessageId: ERROR_WSMAN_CLIENT_MULTIPLE_PROXY_AUTH_FLAGS
//
// MessageText:
//
// The WinRM client cannot process the request. The request must specify only one authentication mechanism for proxy.
// Change the request to specify only one authentication mechanism and try again.
//
#define ERROR_WSMAN_CLIENT_MULTIPLE_PROXY_AUTH_FLAGS 0x803381B4L

//
// MessageId: ERROR_WSMAN_INVALID_REDIRECT_ERROR
//
// MessageText:
//
// The WinRM client received a redirect error from the server when it is not appropriate.  
// The only time a redirect error can be reported correctly is during the authorization of a user.
// This would result in a properly formatted redirect response from the server that includes the redirect endpoint.
//
#define ERROR_WSMAN_INVALID_REDIRECT_ERROR 0x803381B5L

//
// MessageId: ERROR_REDIRECT_LOCATION_TOO_LONG
//
// MessageText:
//
// The WinRM service received a redirect error from an authorization plug-in where the redirect location was too long.
//
#define ERROR_REDIRECT_LOCATION_TOO_LONG 0x803381B6L

//
// MessageId: ERROR_REDIRECT_LOCATION_INVALID
//
// MessageText:
//
// The WinRM service received a HTTP redirect message redirecting the client but the location URL is invalid.
//
#define ERROR_REDIRECT_LOCATION_INVALID  0x803381B7L

//
// MessageId: ERROR_SERVICE_CBT_HARDENING_INVALID
//
// MessageText:
//
// The WinRM service cannot process the request. The Channel Binding Token Hardening Level (CbtHardeningLevel) value is invalid.
// The valid values are "None", "Relaxed" and "Strict". Change the CbtHardeningLevel value and try again.
//
#define ERROR_SERVICE_CBT_HARDENING_INVALID 0x803381B8L

//
// MessageId: ERROR_WSMAN_NAME_NOT_RESOLVED
//
// MessageText:
//
// The WinRM client cannot process the request because the server name cannot be resolved.
//
#define ERROR_WSMAN_NAME_NOT_RESOLVED    0x803381B9L

//
// MessageId: ERROR_WSMAN_SSL_CONNECTION_ABORTED
//
// MessageText:
//
// The SSL connection cannot be established.
// Verify that the service on the remote host is properly configured to listen for HTTPS requests.
// Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM.
// If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig -transport:https".
//
#define ERROR_WSMAN_SSL_CONNECTION_ABORTED 0x803381BAL

//
// MessageId: ERROR_WSMAN_DEFAULTAUTH_IPADDRESS
//
// MessageText:
//
// The WinRM client cannot process the request.
// Default authentication may be used with an IP address under the following conditions: the transport is HTTPS or the destination is in the TrustedHosts list, and explicit credentials are provided.
// Use winrm.cmd to configure TrustedHosts. Note that computers in the TrustedHosts list might not be authenticated.
// For more information on how to set TrustedHosts run the following command: winrm help config.
//
#define ERROR_WSMAN_DEFAULTAUTH_IPADDRESS 0x803381BBL

//
// MessageId: ERROR_WSMAN_CUSTOMREMOTESHELL_DEPRECATED
//
// MessageText:
//
// The WinRM client cannot process the request.
// Custom Remote Shell has been deprecated and cannot be used.
//
#define ERROR_WSMAN_CUSTOMREMOTESHELL_DEPRECATED 0x803381BCL

//
// MessageId: ERROR_WSMAN_FEATURE_DEPRECATED
//
// MessageText:
//
// The WinRM client cannot process the request.
// The feature in use has been deprecated and cannot be used.
//
#define ERROR_WSMAN_FEATURE_DEPRECATED   0x803381BDL

//
// MessageId: ERROR_WSMAN_INVALID_USESSL_PARAM
//
// MessageText:
//
// The WinRM client used a parameter to specify the use of SSL while specifying http in the connection string.
//
#define ERROR_WSMAN_INVALID_USESSL_PARAM 0x803381BEL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsmandisp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsmandisp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wsmandisp_h__
#define __wsmandisp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWSMan_FWD_DEFINED__
#define __IWSMan_FWD_DEFINED__
typedef interface IWSMan IWSMan;
#endif 	/* __IWSMan_FWD_DEFINED__ */


#ifndef __IWSManEx_FWD_DEFINED__
#define __IWSManEx_FWD_DEFINED__
typedef interface IWSManEx IWSManEx;
#endif 	/* __IWSManEx_FWD_DEFINED__ */


#ifndef __IWSManEx2_FWD_DEFINED__
#define __IWSManEx2_FWD_DEFINED__
typedef interface IWSManEx2 IWSManEx2;
#endif 	/* __IWSManEx2_FWD_DEFINED__ */


#ifndef __IWSManEx3_FWD_DEFINED__
#define __IWSManEx3_FWD_DEFINED__
typedef interface IWSManEx3 IWSManEx3;
#endif 	/* __IWSManEx3_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptions_FWD_DEFINED__
#define __IWSManConnectionOptions_FWD_DEFINED__
typedef interface IWSManConnectionOptions IWSManConnectionOptions;
#endif 	/* __IWSManConnectionOptions_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx_FWD_DEFINED__
#define __IWSManConnectionOptionsEx_FWD_DEFINED__
typedef interface IWSManConnectionOptionsEx IWSManConnectionOptionsEx;
#endif 	/* __IWSManConnectionOptionsEx_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx2_FWD_DEFINED__
#define __IWSManConnectionOptionsEx2_FWD_DEFINED__
typedef interface IWSManConnectionOptionsEx2 IWSManConnectionOptionsEx2;
#endif 	/* __IWSManConnectionOptionsEx2_FWD_DEFINED__ */


#ifndef __IWSManSession_FWD_DEFINED__
#define __IWSManSession_FWD_DEFINED__
typedef interface IWSManSession IWSManSession;
#endif 	/* __IWSManSession_FWD_DEFINED__ */


#ifndef __IWSManEnumerator_FWD_DEFINED__
#define __IWSManEnumerator_FWD_DEFINED__
typedef interface IWSManEnumerator IWSManEnumerator;
#endif 	/* __IWSManEnumerator_FWD_DEFINED__ */


#ifndef __IWSManResourceLocator_FWD_DEFINED__
#define __IWSManResourceLocator_FWD_DEFINED__
typedef interface IWSManResourceLocator IWSManResourceLocator;
#endif 	/* __IWSManResourceLocator_FWD_DEFINED__ */


#ifndef __IWSManResourceLocatorInternal_FWD_DEFINED__
#define __IWSManResourceLocatorInternal_FWD_DEFINED__
typedef interface IWSManResourceLocatorInternal IWSManResourceLocatorInternal;
#endif 	/* __IWSManResourceLocatorInternal_FWD_DEFINED__ */


#ifndef __WSMan_FWD_DEFINED__
#define __WSMan_FWD_DEFINED__

#ifdef __cplusplus
typedef class WSMan WSMan;
#else
typedef struct WSMan WSMan;
#endif /* __cplusplus */

#endif 	/* __WSMan_FWD_DEFINED__ */


#ifndef __IWSManInternal_FWD_DEFINED__
#define __IWSManInternal_FWD_DEFINED__
typedef interface IWSManInternal IWSManInternal;
#endif 	/* __IWSManInternal_FWD_DEFINED__ */


#ifndef __WSManInternal_FWD_DEFINED__
#define __WSManInternal_FWD_DEFINED__

#ifdef __cplusplus
typedef class WSManInternal WSManInternal;
#else
typedef struct WSManInternal WSManInternal;
#endif /* __cplusplus */

#endif 	/* __WSManInternal_FWD_DEFINED__ */


#ifndef __IWSMan_FWD_DEFINED__
#define __IWSMan_FWD_DEFINED__
typedef interface IWSMan IWSMan;
#endif 	/* __IWSMan_FWD_DEFINED__ */


#ifndef __IWSManEx_FWD_DEFINED__
#define __IWSManEx_FWD_DEFINED__
typedef interface IWSManEx IWSManEx;
#endif 	/* __IWSManEx_FWD_DEFINED__ */


#ifndef __IWSManEx2_FWD_DEFINED__
#define __IWSManEx2_FWD_DEFINED__
typedef interface IWSManEx2 IWSManEx2;
#endif 	/* __IWSManEx2_FWD_DEFINED__ */


#ifndef __IWSManEx3_FWD_DEFINED__
#define __IWSManEx3_FWD_DEFINED__
typedef interface IWSManEx3 IWSManEx3;
#endif 	/* __IWSManEx3_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptions_FWD_DEFINED__
#define __IWSManConnectionOptions_FWD_DEFINED__
typedef interface IWSManConnectionOptions IWSManConnectionOptions;
#endif 	/* __IWSManConnectionOptions_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx_FWD_DEFINED__
#define __IWSManConnectionOptionsEx_FWD_DEFINED__
typedef interface IWSManConnectionOptionsEx IWSManConnectionOptionsEx;
#endif 	/* __IWSManConnectionOptionsEx_FWD_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx2_FWD_DEFINED__
#define __IWSManConnectionOptionsEx2_FWD_DEFINED__
typedef interface IWSManConnectionOptionsEx2 IWSManConnectionOptionsEx2;
#endif 	/* __IWSManConnectionOptionsEx2_FWD_DEFINED__ */


#ifndef __IWSManSession_FWD_DEFINED__
#define __IWSManSession_FWD_DEFINED__
typedef interface IWSManSession IWSManSession;
#endif 	/* __IWSManSession_FWD_DEFINED__ */


#ifndef __IWSManEnumerator_FWD_DEFINED__
#define __IWSManEnumerator_FWD_DEFINED__
typedef interface IWSManEnumerator IWSManEnumerator;
#endif 	/* __IWSManEnumerator_FWD_DEFINED__ */


#ifndef __IWSManResourceLocator_FWD_DEFINED__
#define __IWSManResourceLocator_FWD_DEFINED__
typedef interface IWSManResourceLocator IWSManResourceLocator;
#endif 	/* __IWSManResourceLocator_FWD_DEFINED__ */


#ifndef __IWSManResourceLocatorInternal_FWD_DEFINED__
#define __IWSManResourceLocatorInternal_FWD_DEFINED__
typedef interface IWSManResourceLocatorInternal IWSManResourceLocatorInternal;
#endif 	/* __IWSManResourceLocatorInternal_FWD_DEFINED__ */


#ifndef __IWSManInternal_FWD_DEFINED__
#define __IWSManInternal_FWD_DEFINED__
typedef interface IWSManInternal IWSManInternal;
#endif 	/* __IWSManInternal_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wsmandisp_0000_0000 */
/* [local] */ 

/***************************************************************/
/*                                                             */
/*    Copyright (C) Microsoft Corporation.  All rights reserved. */
/*                                                             */
/*    WSMAN IDispatch Compatible Access for Automation clients.  */
/*                                                             */
/***************************************************************/


extern RPC_IF_HANDLE __MIDL_itf_wsmandisp_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wsmandisp_0000_0000_v0_0_s_ifspec;


#ifndef __WSManAutomation_LIBRARY_DEFINED__
#define __WSManAutomation_LIBRARY_DEFINED__

/* library WSManAutomation */
/* [helpstring][version][lcid][uuid] */ 

typedef /* [v1_enum] */ 
enum _WSManSessionFlags
    {	WSManFlagUTF8	= 0x1,
	WSManFlagCredUsernamePassword	= 0x1000,
	WSManFlagSkipCACheck	= 0x2000,
	WSManFlagSkipCNCheck	= 0x4000,
	WSManFlagUseNoAuthentication	= 0x8000,
	WSManFlagUseDigest	= 0x10000,
	WSManFlagUseNegotiate	= 0x20000,
	WSManFlagUseBasic	= 0x40000,
	WSManFlagUseKerberos	= 0x80000,
	WSManFlagNoEncryption	= 0x100000,
	WSManFlagUseClientCertificate	= 0x200000,
	WSManFlagEnableSPNServerPort	= 0x400000,
	WSManFlagUTF16	= 0x800000,
	WSManFlagUseCredSsp	= 0x1000000,
	WSManFlagSkipRevocationCheck	= 0x2000000,
	WSManFlagAllowNegotiateImplicitCredentials	= 0x4000000,
	WSManFlagUseSsl	= 0x8000000
    } 	WSManSessionFlags;

typedef /* [v1_enum] */ 
enum _WSManEnumFlags
    {	WSManFlagNonXmlText	= 0x1,
	WSManFlagReturnObject	= 0,
	WSManFlagReturnEPR	= 0x2,
	WSManFlagReturnObjectAndEPR	= 0x4,
	WSManFlagHierarchyDeep	= 0,
	WSManFlagHierarchyShallow	= 0x20,
	WSManFlagHierarchyDeepBasePropsOnly	= 0x40,
	WSManFlagAssociatedInstance	= 0,
	WSManFlagAssociationInstance	= 0x80
    } 	WSManEnumFlags;

typedef /* [v1_enum] */ 
enum _WSManProxyAccessTypeFlags
    {	WSManProxyIEConfig	= 0x1,
	WSManProxyWinHttpConfig	= 0x2,
	WSManProxyAutoDetect	= 0x4,
	WSManProxyNoProxyServer	= 0x8
    } 	WSManProxyAccessTypeFlags;

typedef /* [v1_enum] */ 
enum _WSManProxyAuthenticationFlags
    {	WSManFlagProxyAuthenticationUseNegotiate	= 0x1,
	WSManFlagProxyAuthenticationUseBasic	= 0x2,
	WSManFlagProxyAuthenticationUseDigest	= 0x4
    } 	WSManProxyAuthenticationFlags;















EXTERN_C const IID LIBID_WSManAutomation;

#ifndef __IWSMan_INTERFACE_DEFINED__
#define __IWSMan_INTERFACE_DEFINED__

/* interface IWSMan */
/* [hidden][nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSMan;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("190D8637-5CD3-496d-AD24-69636BB5A3B5")
    IWSMan : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateSession( 
            /* [defaultvalue][in] */ BSTR connection,
            /* [defaultvalue][in] */ long flags,
            /* [defaultvalue][in] */ IDispatch *connectionOptions,
            /* [retval][out] */ IDispatch **session) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateConnectionOptions( 
            /* [retval][out] */ IDispatch **connectionOptions) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandLine( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Error( 
            /* [retval][out] */ BSTR *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSMan * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSMan * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSMan * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSMan * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSMan * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSMan * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSMan * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateSession )( 
            IWSMan * This,
            /* [defaultvalue][in] */ BSTR connection,
            /* [defaultvalue][in] */ long flags,
            /* [defaultvalue][in] */ IDispatch *connectionOptions,
            /* [retval][out] */ IDispatch **session);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateConnectionOptions )( 
            IWSMan * This,
            /* [retval][out] */ IDispatch **connectionOptions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            IWSMan * This,
            /* [retval][out] */ BSTR *value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSMan * This,
            /* [retval][out] */ BSTR *value);
        
        END_INTERFACE
    } IWSManVtbl;

    interface IWSMan
    {
        CONST_VTBL struct IWSManVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSMan_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSMan_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSMan_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSMan_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSMan_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSMan_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSMan_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSMan_CreateSession(This,connection,flags,connectionOptions,session)	\
    ( (This)->lpVtbl -> CreateSession(This,connection,flags,connectionOptions,session) ) 

#define IWSMan_CreateConnectionOptions(This,connectionOptions)	\
    ( (This)->lpVtbl -> CreateConnectionOptions(This,connectionOptions) ) 

#define IWSMan_get_CommandLine(This,value)	\
    ( (This)->lpVtbl -> get_CommandLine(This,value) ) 

#define IWSMan_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSMan_INTERFACE_DEFINED__ */


#ifndef __IWSManEx_INTERFACE_DEFINED__
#define __IWSManEx_INTERFACE_DEFINED__

/* interface IWSManEx */
/* [hidden][nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2D53BDAA-798E-49e6-A1AA-74D01256F411")
    IWSManEx : public IWSMan
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateResourceLocator( 
            /* [defaultvalue][in] */ BSTR strResourceLocator,
            /* [retval][out] */ IDispatch **newResourceLocator) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUTF8( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagCredUsernamePassword( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagSkipCACheck( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagSkipCNCheck( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseDigest( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseNegotiate( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseBasic( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseKerberos( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagNoEncryption( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagEnableSPNServerPort( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseNoAuthentication( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagNonXmlText( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagReturnEPR( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagReturnObjectAndEPR( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetErrorMessage( 
            /* [in] */ DWORD errorNumber,
            /* [retval][out] */ BSTR *errorMessage) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagHierarchyDeep( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagHierarchyShallow( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagHierarchyDeepBasePropsOnly( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagReturnObject( 
            /* [retval][out] */ long *flags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManEx * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManEx * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManEx * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManEx * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateSession )( 
            IWSManEx * This,
            /* [defaultvalue][in] */ BSTR connection,
            /* [defaultvalue][in] */ long flags,
            /* [defaultvalue][in] */ IDispatch *connectionOptions,
            /* [retval][out] */ IDispatch **session);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateConnectionOptions )( 
            IWSManEx * This,
            /* [retval][out] */ IDispatch **connectionOptions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            IWSManEx * This,
            /* [retval][out] */ BSTR *value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManEx * This,
            /* [retval][out] */ BSTR *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateResourceLocator )( 
            IWSManEx * This,
            /* [defaultvalue][in] */ BSTR strResourceLocator,
            /* [retval][out] */ IDispatch **newResourceLocator);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUTF8 )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagCredUsernamePassword )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCACheck )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCNCheck )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseDigest )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNegotiate )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseBasic )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseKerberos )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagNoEncryption )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagEnableSPNServerPort )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNoAuthentication )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagNonXmlText )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnEPR )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObjectAndEPR )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetErrorMessage )( 
            IWSManEx * This,
            /* [in] */ DWORD errorNumber,
            /* [retval][out] */ BSTR *errorMessage);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeep )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyShallow )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeepBasePropsOnly )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObject )( 
            IWSManEx * This,
            /* [retval][out] */ long *flags);
        
        END_INTERFACE
    } IWSManExVtbl;

    interface IWSManEx
    {
        CONST_VTBL struct IWSManExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManEx_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManEx_CreateSession(This,connection,flags,connectionOptions,session)	\
    ( (This)->lpVtbl -> CreateSession(This,connection,flags,connectionOptions,session) ) 

#define IWSManEx_CreateConnectionOptions(This,connectionOptions)	\
    ( (This)->lpVtbl -> CreateConnectionOptions(This,connectionOptions) ) 

#define IWSManEx_get_CommandLine(This,value)	\
    ( (This)->lpVtbl -> get_CommandLine(This,value) ) 

#define IWSManEx_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 


#define IWSManEx_CreateResourceLocator(This,strResourceLocator,newResourceLocator)	\
    ( (This)->lpVtbl -> CreateResourceLocator(This,strResourceLocator,newResourceLocator) ) 

#define IWSManEx_SessionFlagUTF8(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUTF8(This,flags) ) 

#define IWSManEx_SessionFlagCredUsernamePassword(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagCredUsernamePassword(This,flags) ) 

#define IWSManEx_SessionFlagSkipCACheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCACheck(This,flags) ) 

#define IWSManEx_SessionFlagSkipCNCheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCNCheck(This,flags) ) 

#define IWSManEx_SessionFlagUseDigest(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseDigest(This,flags) ) 

#define IWSManEx_SessionFlagUseNegotiate(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNegotiate(This,flags) ) 

#define IWSManEx_SessionFlagUseBasic(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseBasic(This,flags) ) 

#define IWSManEx_SessionFlagUseKerberos(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseKerberos(This,flags) ) 

#define IWSManEx_SessionFlagNoEncryption(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagNoEncryption(This,flags) ) 

#define IWSManEx_SessionFlagEnableSPNServerPort(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagEnableSPNServerPort(This,flags) ) 

#define IWSManEx_SessionFlagUseNoAuthentication(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNoAuthentication(This,flags) ) 

#define IWSManEx_EnumerationFlagNonXmlText(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagNonXmlText(This,flags) ) 

#define IWSManEx_EnumerationFlagReturnEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnEPR(This,flags) ) 

#define IWSManEx_EnumerationFlagReturnObjectAndEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObjectAndEPR(This,flags) ) 

#define IWSManEx_GetErrorMessage(This,errorNumber,errorMessage)	\
    ( (This)->lpVtbl -> GetErrorMessage(This,errorNumber,errorMessage) ) 

#define IWSManEx_EnumerationFlagHierarchyDeep(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeep(This,flags) ) 

#define IWSManEx_EnumerationFlagHierarchyShallow(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyShallow(This,flags) ) 

#define IWSManEx_EnumerationFlagHierarchyDeepBasePropsOnly(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeepBasePropsOnly(This,flags) ) 

#define IWSManEx_EnumerationFlagReturnObject(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObject(This,flags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManEx_INTERFACE_DEFINED__ */


#ifndef __IWSManEx2_INTERFACE_DEFINED__
#define __IWSManEx2_INTERFACE_DEFINED__

/* interface IWSManEx2 */
/* [hidden][nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManEx2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1D1B5AE0-42D9-4021-8261-3987619512E9")
    IWSManEx2 : public IWSManEx
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseClientCertificate( 
            /* [retval][out] */ long *flags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManEx2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManEx2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManEx2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManEx2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManEx2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManEx2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManEx2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManEx2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateSession )( 
            IWSManEx2 * This,
            /* [defaultvalue][in] */ BSTR connection,
            /* [defaultvalue][in] */ long flags,
            /* [defaultvalue][in] */ IDispatch *connectionOptions,
            /* [retval][out] */ IDispatch **session);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateConnectionOptions )( 
            IWSManEx2 * This,
            /* [retval][out] */ IDispatch **connectionOptions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            IWSManEx2 * This,
            /* [retval][out] */ BSTR *value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManEx2 * This,
            /* [retval][out] */ BSTR *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateResourceLocator )( 
            IWSManEx2 * This,
            /* [defaultvalue][in] */ BSTR strResourceLocator,
            /* [retval][out] */ IDispatch **newResourceLocator);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUTF8 )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagCredUsernamePassword )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCACheck )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCNCheck )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseDigest )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNegotiate )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseBasic )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseKerberos )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagNoEncryption )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagEnableSPNServerPort )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNoAuthentication )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagNonXmlText )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnEPR )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObjectAndEPR )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetErrorMessage )( 
            IWSManEx2 * This,
            /* [in] */ DWORD errorNumber,
            /* [retval][out] */ BSTR *errorMessage);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeep )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyShallow )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeepBasePropsOnly )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObject )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseClientCertificate )( 
            IWSManEx2 * This,
            /* [retval][out] */ long *flags);
        
        END_INTERFACE
    } IWSManEx2Vtbl;

    interface IWSManEx2
    {
        CONST_VTBL struct IWSManEx2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManEx2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManEx2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManEx2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManEx2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManEx2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManEx2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManEx2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManEx2_CreateSession(This,connection,flags,connectionOptions,session)	\
    ( (This)->lpVtbl -> CreateSession(This,connection,flags,connectionOptions,session) ) 

#define IWSManEx2_CreateConnectionOptions(This,connectionOptions)	\
    ( (This)->lpVtbl -> CreateConnectionOptions(This,connectionOptions) ) 

#define IWSManEx2_get_CommandLine(This,value)	\
    ( (This)->lpVtbl -> get_CommandLine(This,value) ) 

#define IWSManEx2_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 


#define IWSManEx2_CreateResourceLocator(This,strResourceLocator,newResourceLocator)	\
    ( (This)->lpVtbl -> CreateResourceLocator(This,strResourceLocator,newResourceLocator) ) 

#define IWSManEx2_SessionFlagUTF8(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUTF8(This,flags) ) 

#define IWSManEx2_SessionFlagCredUsernamePassword(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagCredUsernamePassword(This,flags) ) 

#define IWSManEx2_SessionFlagSkipCACheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCACheck(This,flags) ) 

#define IWSManEx2_SessionFlagSkipCNCheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCNCheck(This,flags) ) 

#define IWSManEx2_SessionFlagUseDigest(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseDigest(This,flags) ) 

#define IWSManEx2_SessionFlagUseNegotiate(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNegotiate(This,flags) ) 

#define IWSManEx2_SessionFlagUseBasic(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseBasic(This,flags) ) 

#define IWSManEx2_SessionFlagUseKerberos(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseKerberos(This,flags) ) 

#define IWSManEx2_SessionFlagNoEncryption(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagNoEncryption(This,flags) ) 

#define IWSManEx2_SessionFlagEnableSPNServerPort(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagEnableSPNServerPort(This,flags) ) 

#define IWSManEx2_SessionFlagUseNoAuthentication(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNoAuthentication(This,flags) ) 

#define IWSManEx2_EnumerationFlagNonXmlText(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagNonXmlText(This,flags) ) 

#define IWSManEx2_EnumerationFlagReturnEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnEPR(This,flags) ) 

#define IWSManEx2_EnumerationFlagReturnObjectAndEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObjectAndEPR(This,flags) ) 

#define IWSManEx2_GetErrorMessage(This,errorNumber,errorMessage)	\
    ( (This)->lpVtbl -> GetErrorMessage(This,errorNumber,errorMessage) ) 

#define IWSManEx2_EnumerationFlagHierarchyDeep(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeep(This,flags) ) 

#define IWSManEx2_EnumerationFlagHierarchyShallow(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyShallow(This,flags) ) 

#define IWSManEx2_EnumerationFlagHierarchyDeepBasePropsOnly(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeepBasePropsOnly(This,flags) ) 

#define IWSManEx2_EnumerationFlagReturnObject(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObject(This,flags) ) 


#define IWSManEx2_SessionFlagUseClientCertificate(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseClientCertificate(This,flags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManEx2_INTERFACE_DEFINED__ */


#ifndef __IWSManEx3_INTERFACE_DEFINED__
#define __IWSManEx3_INTERFACE_DEFINED__

/* interface IWSManEx3 */
/* [hidden][nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManEx3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6400E966-011D-4eac-8474-049E0848AFAD")
    IWSManEx3 : public IWSManEx2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUTF16( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseCredSsp( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagAssociationInstance( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumerationFlagAssociatedInstance( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagSkipRevocationCheck( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagAllowNegotiateImplicitCredentials( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SessionFlagUseSsl( 
            /* [retval][out] */ long *flags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManEx3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManEx3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManEx3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManEx3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManEx3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManEx3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManEx3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManEx3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateSession )( 
            IWSManEx3 * This,
            /* [defaultvalue][in] */ BSTR connection,
            /* [defaultvalue][in] */ long flags,
            /* [defaultvalue][in] */ IDispatch *connectionOptions,
            /* [retval][out] */ IDispatch **session);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateConnectionOptions )( 
            IWSManEx3 * This,
            /* [retval][out] */ IDispatch **connectionOptions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            IWSManEx3 * This,
            /* [retval][out] */ BSTR *value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManEx3 * This,
            /* [retval][out] */ BSTR *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateResourceLocator )( 
            IWSManEx3 * This,
            /* [defaultvalue][in] */ BSTR strResourceLocator,
            /* [retval][out] */ IDispatch **newResourceLocator);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUTF8 )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagCredUsernamePassword )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCACheck )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipCNCheck )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseDigest )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNegotiate )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseBasic )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseKerberos )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagNoEncryption )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagEnableSPNServerPort )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseNoAuthentication )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagNonXmlText )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnEPR )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObjectAndEPR )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetErrorMessage )( 
            IWSManEx3 * This,
            /* [in] */ DWORD errorNumber,
            /* [retval][out] */ BSTR *errorMessage);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeep )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyShallow )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagHierarchyDeepBasePropsOnly )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagReturnObject )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseClientCertificate )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUTF16 )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseCredSsp )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagAssociationInstance )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumerationFlagAssociatedInstance )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagSkipRevocationCheck )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagAllowNegotiateImplicitCredentials )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SessionFlagUseSsl )( 
            IWSManEx3 * This,
            /* [retval][out] */ long *flags);
        
        END_INTERFACE
    } IWSManEx3Vtbl;

    interface IWSManEx3
    {
        CONST_VTBL struct IWSManEx3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManEx3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManEx3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManEx3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManEx3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManEx3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManEx3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManEx3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManEx3_CreateSession(This,connection,flags,connectionOptions,session)	\
    ( (This)->lpVtbl -> CreateSession(This,connection,flags,connectionOptions,session) ) 

#define IWSManEx3_CreateConnectionOptions(This,connectionOptions)	\
    ( (This)->lpVtbl -> CreateConnectionOptions(This,connectionOptions) ) 

#define IWSManEx3_get_CommandLine(This,value)	\
    ( (This)->lpVtbl -> get_CommandLine(This,value) ) 

#define IWSManEx3_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 


#define IWSManEx3_CreateResourceLocator(This,strResourceLocator,newResourceLocator)	\
    ( (This)->lpVtbl -> CreateResourceLocator(This,strResourceLocator,newResourceLocator) ) 

#define IWSManEx3_SessionFlagUTF8(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUTF8(This,flags) ) 

#define IWSManEx3_SessionFlagCredUsernamePassword(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagCredUsernamePassword(This,flags) ) 

#define IWSManEx3_SessionFlagSkipCACheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCACheck(This,flags) ) 

#define IWSManEx3_SessionFlagSkipCNCheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipCNCheck(This,flags) ) 

#define IWSManEx3_SessionFlagUseDigest(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseDigest(This,flags) ) 

#define IWSManEx3_SessionFlagUseNegotiate(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNegotiate(This,flags) ) 

#define IWSManEx3_SessionFlagUseBasic(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseBasic(This,flags) ) 

#define IWSManEx3_SessionFlagUseKerberos(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseKerberos(This,flags) ) 

#define IWSManEx3_SessionFlagNoEncryption(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagNoEncryption(This,flags) ) 

#define IWSManEx3_SessionFlagEnableSPNServerPort(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagEnableSPNServerPort(This,flags) ) 

#define IWSManEx3_SessionFlagUseNoAuthentication(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseNoAuthentication(This,flags) ) 

#define IWSManEx3_EnumerationFlagNonXmlText(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagNonXmlText(This,flags) ) 

#define IWSManEx3_EnumerationFlagReturnEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnEPR(This,flags) ) 

#define IWSManEx3_EnumerationFlagReturnObjectAndEPR(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObjectAndEPR(This,flags) ) 

#define IWSManEx3_GetErrorMessage(This,errorNumber,errorMessage)	\
    ( (This)->lpVtbl -> GetErrorMessage(This,errorNumber,errorMessage) ) 

#define IWSManEx3_EnumerationFlagHierarchyDeep(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeep(This,flags) ) 

#define IWSManEx3_EnumerationFlagHierarchyShallow(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyShallow(This,flags) ) 

#define IWSManEx3_EnumerationFlagHierarchyDeepBasePropsOnly(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagHierarchyDeepBasePropsOnly(This,flags) ) 

#define IWSManEx3_EnumerationFlagReturnObject(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagReturnObject(This,flags) ) 


#define IWSManEx3_SessionFlagUseClientCertificate(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseClientCertificate(This,flags) ) 


#define IWSManEx3_SessionFlagUTF16(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUTF16(This,flags) ) 

#define IWSManEx3_SessionFlagUseCredSsp(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseCredSsp(This,flags) ) 

#define IWSManEx3_EnumerationFlagAssociationInstance(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagAssociationInstance(This,flags) ) 

#define IWSManEx3_EnumerationFlagAssociatedInstance(This,flags)	\
    ( (This)->lpVtbl -> EnumerationFlagAssociatedInstance(This,flags) ) 

#define IWSManEx3_SessionFlagSkipRevocationCheck(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagSkipRevocationCheck(This,flags) ) 

#define IWSManEx3_SessionFlagAllowNegotiateImplicitCredentials(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagAllowNegotiateImplicitCredentials(This,flags) ) 

#define IWSManEx3_SessionFlagUseSsl(This,flags)	\
    ( (This)->lpVtbl -> SessionFlagUseSsl(This,flags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManEx3_INTERFACE_DEFINED__ */


#ifndef __IWSManConnectionOptions_INTERFACE_DEFINED__
#define __IWSManConnectionOptions_INTERFACE_DEFINED__

/* interface IWSManConnectionOptions */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManConnectionOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F704E861-9E52-464f-B786-DA5EB2320FDD")
    IWSManConnectionOptions : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UserName( 
            /* [in] */ BSTR name) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Password( 
            /* [in] */ BSTR password) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManConnectionOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManConnectionOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManConnectionOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManConnectionOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManConnectionOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManConnectionOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManConnectionOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManConnectionOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IWSManConnectionOptions * This,
            /* [retval][out] */ BSTR *name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserName )( 
            IWSManConnectionOptions * This,
            /* [in] */ BSTR name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            IWSManConnectionOptions * This,
            /* [in] */ BSTR password);
        
        END_INTERFACE
    } IWSManConnectionOptionsVtbl;

    interface IWSManConnectionOptions
    {
        CONST_VTBL struct IWSManConnectionOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManConnectionOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManConnectionOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManConnectionOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManConnectionOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManConnectionOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManConnectionOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManConnectionOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManConnectionOptions_get_UserName(This,name)	\
    ( (This)->lpVtbl -> get_UserName(This,name) ) 

#define IWSManConnectionOptions_put_UserName(This,name)	\
    ( (This)->lpVtbl -> put_UserName(This,name) ) 

#define IWSManConnectionOptions_put_Password(This,password)	\
    ( (This)->lpVtbl -> put_Password(This,password) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManConnectionOptions_INTERFACE_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx_INTERFACE_DEFINED__
#define __IWSManConnectionOptionsEx_INTERFACE_DEFINED__

/* interface IWSManConnectionOptionsEx */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManConnectionOptionsEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EF43EDF7-2A48-4d93-9526-8BD6AB6D4A6B")
    IWSManConnectionOptionsEx : public IWSManConnectionOptions
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CertificateThumbprint( 
            /* [retval][out] */ BSTR *thumbprint) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CertificateThumbprint( 
            /* [in] */ BSTR thumbprint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManConnectionOptionsExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManConnectionOptionsEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManConnectionOptionsEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManConnectionOptionsEx * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IWSManConnectionOptionsEx * This,
            /* [retval][out] */ BSTR *name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserName )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ BSTR name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ BSTR password);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CertificateThumbprint )( 
            IWSManConnectionOptionsEx * This,
            /* [retval][out] */ BSTR *thumbprint);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CertificateThumbprint )( 
            IWSManConnectionOptionsEx * This,
            /* [in] */ BSTR thumbprint);
        
        END_INTERFACE
    } IWSManConnectionOptionsExVtbl;

    interface IWSManConnectionOptionsEx
    {
        CONST_VTBL struct IWSManConnectionOptionsExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManConnectionOptionsEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManConnectionOptionsEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManConnectionOptionsEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManConnectionOptionsEx_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManConnectionOptionsEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManConnectionOptionsEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManConnectionOptionsEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManConnectionOptionsEx_get_UserName(This,name)	\
    ( (This)->lpVtbl -> get_UserName(This,name) ) 

#define IWSManConnectionOptionsEx_put_UserName(This,name)	\
    ( (This)->lpVtbl -> put_UserName(This,name) ) 

#define IWSManConnectionOptionsEx_put_Password(This,password)	\
    ( (This)->lpVtbl -> put_Password(This,password) ) 


#define IWSManConnectionOptionsEx_get_CertificateThumbprint(This,thumbprint)	\
    ( (This)->lpVtbl -> get_CertificateThumbprint(This,thumbprint) ) 

#define IWSManConnectionOptionsEx_put_CertificateThumbprint(This,thumbprint)	\
    ( (This)->lpVtbl -> put_CertificateThumbprint(This,thumbprint) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManConnectionOptionsEx_INTERFACE_DEFINED__ */


#ifndef __IWSManConnectionOptionsEx2_INTERFACE_DEFINED__
#define __IWSManConnectionOptionsEx2_INTERFACE_DEFINED__

/* interface IWSManConnectionOptionsEx2 */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManConnectionOptionsEx2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F500C9EC-24EE-48ab-B38D-FC9A164C658E")
    IWSManConnectionOptionsEx2 : public IWSManConnectionOptionsEx
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetProxy( 
            /* [defaultvalue][in] */ long accessType = 0,
            /* [defaultvalue][in] */ long authenticationMechanism = 0,
            /* [defaultvalue][in] */ BSTR userName = 0,
            /* [defaultvalue][in] */ BSTR password = 0) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyIEConfig( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyWinHttpConfig( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyAutoDetect( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyNoProxyServer( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyAuthenticationUseNegotiate( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyAuthenticationUseBasic( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProxyAuthenticationUseDigest( 
            /* [retval][out] */ long *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManConnectionOptionsEx2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManConnectionOptionsEx2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManConnectionOptionsEx2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManConnectionOptionsEx2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ BSTR *name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserName )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ BSTR name);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ BSTR password);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CertificateThumbprint )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ BSTR *thumbprint);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CertificateThumbprint )( 
            IWSManConnectionOptionsEx2 * This,
            /* [in] */ BSTR thumbprint);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetProxy )( 
            IWSManConnectionOptionsEx2 * This,
            /* [defaultvalue][in] */ long accessType,
            /* [defaultvalue][in] */ long authenticationMechanism,
            /* [defaultvalue][in] */ BSTR userName,
            /* [defaultvalue][in] */ BSTR password);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyIEConfig )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyWinHttpConfig )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyAutoDetect )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyNoProxyServer )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyAuthenticationUseNegotiate )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyAuthenticationUseBasic )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProxyAuthenticationUseDigest )( 
            IWSManConnectionOptionsEx2 * This,
            /* [retval][out] */ long *value);
        
        END_INTERFACE
    } IWSManConnectionOptionsEx2Vtbl;

    interface IWSManConnectionOptionsEx2
    {
        CONST_VTBL struct IWSManConnectionOptionsEx2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManConnectionOptionsEx2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManConnectionOptionsEx2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManConnectionOptionsEx2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManConnectionOptionsEx2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManConnectionOptionsEx2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManConnectionOptionsEx2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManConnectionOptionsEx2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManConnectionOptionsEx2_get_UserName(This,name)	\
    ( (This)->lpVtbl -> get_UserName(This,name) ) 

#define IWSManConnectionOptionsEx2_put_UserName(This,name)	\
    ( (This)->lpVtbl -> put_UserName(This,name) ) 

#define IWSManConnectionOptionsEx2_put_Password(This,password)	\
    ( (This)->lpVtbl -> put_Password(This,password) ) 


#define IWSManConnectionOptionsEx2_get_CertificateThumbprint(This,thumbprint)	\
    ( (This)->lpVtbl -> get_CertificateThumbprint(This,thumbprint) ) 

#define IWSManConnectionOptionsEx2_put_CertificateThumbprint(This,thumbprint)	\
    ( (This)->lpVtbl -> put_CertificateThumbprint(This,thumbprint) ) 


#define IWSManConnectionOptionsEx2_SetProxy(This,accessType,authenticationMechanism,userName,password)	\
    ( (This)->lpVtbl -> SetProxy(This,accessType,authenticationMechanism,userName,password) ) 

#define IWSManConnectionOptionsEx2_ProxyIEConfig(This,value)	\
    ( (This)->lpVtbl -> ProxyIEConfig(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyWinHttpConfig(This,value)	\
    ( (This)->lpVtbl -> ProxyWinHttpConfig(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyAutoDetect(This,value)	\
    ( (This)->lpVtbl -> ProxyAutoDetect(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyNoProxyServer(This,value)	\
    ( (This)->lpVtbl -> ProxyNoProxyServer(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyAuthenticationUseNegotiate(This,value)	\
    ( (This)->lpVtbl -> ProxyAuthenticationUseNegotiate(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyAuthenticationUseBasic(This,value)	\
    ( (This)->lpVtbl -> ProxyAuthenticationUseBasic(This,value) ) 

#define IWSManConnectionOptionsEx2_ProxyAuthenticationUseDigest(This,value)	\
    ( (This)->lpVtbl -> ProxyAuthenticationUseDigest(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManConnectionOptionsEx2_INTERFACE_DEFINED__ */


#ifndef __IWSManSession_INTERFACE_DEFINED__
#define __IWSManSession_INTERFACE_DEFINED__

/* interface IWSManSession */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC84FC58-1286-40c4-9DA0-C8EF6EC241E0")
    IWSManSession : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resource) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Put( 
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR resource,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resultResource) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR resource,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *newUri) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags = 0) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ BSTR actionUri,
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR parameters,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Enumerate( 
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ BSTR filter,
            /* [defaultvalue][in] */ BSTR dialect,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ IDispatch **resultSet) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Identify( 
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Error( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BatchItems( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BatchItems( 
            /* [in] */ long value) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Timeout( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Timeout( 
            /* [in] */ long value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManSession * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManSession * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManSession * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManSession * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManSession * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IWSManSession * This,
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IWSManSession * This,
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR resource,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resultResource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            IWSManSession * This,
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR resource,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *newUri);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IWSManSession * This,
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManSession * This,
            /* [in] */ BSTR actionUri,
            /* [in] */ VARIANT resourceUri,
            /* [in] */ BSTR parameters,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *result);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Enumerate )( 
            IWSManSession * This,
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ BSTR filter,
            /* [defaultvalue][in] */ BSTR dialect,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ IDispatch **resultSet);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Identify )( 
            IWSManSession * This,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *result);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManSession * This,
            /* [retval][out] */ BSTR *value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BatchItems )( 
            IWSManSession * This,
            /* [retval][out] */ long *value);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BatchItems )( 
            IWSManSession * This,
            /* [in] */ long value);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Timeout )( 
            IWSManSession * This,
            /* [retval][out] */ long *value);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Timeout )( 
            IWSManSession * This,
            /* [in] */ long value);
        
        END_INTERFACE
    } IWSManSessionVtbl;

    interface IWSManSession
    {
        CONST_VTBL struct IWSManSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManSession_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManSession_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManSession_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManSession_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManSession_Get(This,resourceUri,flags,resource)	\
    ( (This)->lpVtbl -> Get(This,resourceUri,flags,resource) ) 

#define IWSManSession_Put(This,resourceUri,resource,flags,resultResource)	\
    ( (This)->lpVtbl -> Put(This,resourceUri,resource,flags,resultResource) ) 

#define IWSManSession_Create(This,resourceUri,resource,flags,newUri)	\
    ( (This)->lpVtbl -> Create(This,resourceUri,resource,flags,newUri) ) 

#define IWSManSession_Delete(This,resourceUri,flags)	\
    ( (This)->lpVtbl -> Delete(This,resourceUri,flags) ) 

#define IWSManSession_Invoke(This,actionUri,resourceUri,parameters,flags,result)	\
    ( (This)->lpVtbl -> Invoke(This,actionUri,resourceUri,parameters,flags,result) ) 

#define IWSManSession_Enumerate(This,resourceUri,filter,dialect,flags,resultSet)	\
    ( (This)->lpVtbl -> Enumerate(This,resourceUri,filter,dialect,flags,resultSet) ) 

#define IWSManSession_Identify(This,flags,result)	\
    ( (This)->lpVtbl -> Identify(This,flags,result) ) 

#define IWSManSession_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 

#define IWSManSession_get_BatchItems(This,value)	\
    ( (This)->lpVtbl -> get_BatchItems(This,value) ) 

#define IWSManSession_put_BatchItems(This,value)	\
    ( (This)->lpVtbl -> put_BatchItems(This,value) ) 

#define IWSManSession_get_Timeout(This,value)	\
    ( (This)->lpVtbl -> get_Timeout(This,value) ) 

#define IWSManSession_put_Timeout(This,value)	\
    ( (This)->lpVtbl -> put_Timeout(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManSession_INTERFACE_DEFINED__ */


#ifndef __IWSManEnumerator_INTERFACE_DEFINED__
#define __IWSManEnumerator_INTERFACE_DEFINED__

/* interface IWSManEnumerator */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F3457CA9-ABB9-4fa5-B850-90E8CA300E7F")
    IWSManEnumerator : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ReadItem( 
            /* [retval][out] */ BSTR *resource) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AtEndOfStream( 
            /* [retval][out] */ VARIANT_BOOL *eos) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Error( 
            /* [retval][out] */ BSTR *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManEnumerator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManEnumerator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManEnumerator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManEnumerator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManEnumerator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReadItem )( 
            IWSManEnumerator * This,
            /* [retval][out] */ BSTR *resource);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfStream )( 
            IWSManEnumerator * This,
            /* [retval][out] */ VARIANT_BOOL *eos);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManEnumerator * This,
            /* [retval][out] */ BSTR *value);
        
        END_INTERFACE
    } IWSManEnumeratorVtbl;

    interface IWSManEnumerator
    {
        CONST_VTBL struct IWSManEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManEnumerator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManEnumerator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManEnumerator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManEnumerator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManEnumerator_ReadItem(This,resource)	\
    ( (This)->lpVtbl -> ReadItem(This,resource) ) 

#define IWSManEnumerator_get_AtEndOfStream(This,eos)	\
    ( (This)->lpVtbl -> get_AtEndOfStream(This,eos) ) 

#define IWSManEnumerator_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManEnumerator_INTERFACE_DEFINED__ */


#ifndef __IWSManResourceLocator_INTERFACE_DEFINED__
#define __IWSManResourceLocator_INTERFACE_DEFINED__

/* interface IWSManResourceLocator */
/* [nonextensible][local][oleautomation][uuid][object][dual] */ 


EXTERN_C const IID IID_IWSManResourceLocator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A7A1BA28-DE41-466a-AD0A-C4059EAD7428")
    IWSManResourceLocator : public IDispatch
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResourceURI( 
            /* [in] */ BSTR uri) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResourceURI( 
            /* [retval][out] */ BSTR *uri) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddSelector( 
            /* [in] */ BSTR resourceSelName,
            /* [in] */ VARIANT selValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClearSelectors( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FragmentPath( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FragmentPath( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FragmentDialect( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FragmentDialect( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddOption( 
            /* [in] */ BSTR OptionName,
            /* [in] */ VARIANT OptionValue,
            /* [defaultvalue][in] */ BOOL mustComply = 0) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MustUnderstandOptions( 
            /* [in] */ BOOL mustUnderstand) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MustUnderstandOptions( 
            /* [retval][out] */ BOOL *mustUnderstand) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClearOptions( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Error( 
            /* [retval][out] */ BSTR *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManResourceLocatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManResourceLocator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManResourceLocator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManResourceLocator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManResourceLocator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManResourceLocator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManResourceLocator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManResourceLocator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResourceURI )( 
            IWSManResourceLocator * This,
            /* [in] */ BSTR uri);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResourceURI )( 
            IWSManResourceLocator * This,
            /* [retval][out] */ BSTR *uri);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSelector )( 
            IWSManResourceLocator * This,
            /* [in] */ BSTR resourceSelName,
            /* [in] */ VARIANT selValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClearSelectors )( 
            IWSManResourceLocator * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FragmentPath )( 
            IWSManResourceLocator * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FragmentPath )( 
            IWSManResourceLocator * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FragmentDialect )( 
            IWSManResourceLocator * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FragmentDialect )( 
            IWSManResourceLocator * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddOption )( 
            IWSManResourceLocator * This,
            /* [in] */ BSTR OptionName,
            /* [in] */ VARIANT OptionValue,
            /* [defaultvalue][in] */ BOOL mustComply);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MustUnderstandOptions )( 
            IWSManResourceLocator * This,
            /* [in] */ BOOL mustUnderstand);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MustUnderstandOptions )( 
            IWSManResourceLocator * This,
            /* [retval][out] */ BOOL *mustUnderstand);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClearOptions )( 
            IWSManResourceLocator * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Error )( 
            IWSManResourceLocator * This,
            /* [retval][out] */ BSTR *value);
        
        END_INTERFACE
    } IWSManResourceLocatorVtbl;

    interface IWSManResourceLocator
    {
        CONST_VTBL struct IWSManResourceLocatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManResourceLocator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManResourceLocator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManResourceLocator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManResourceLocator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManResourceLocator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManResourceLocator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManResourceLocator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManResourceLocator_put_ResourceURI(This,uri)	\
    ( (This)->lpVtbl -> put_ResourceURI(This,uri) ) 

#define IWSManResourceLocator_get_ResourceURI(This,uri)	\
    ( (This)->lpVtbl -> get_ResourceURI(This,uri) ) 

#define IWSManResourceLocator_AddSelector(This,resourceSelName,selValue)	\
    ( (This)->lpVtbl -> AddSelector(This,resourceSelName,selValue) ) 

#define IWSManResourceLocator_ClearSelectors(This)	\
    ( (This)->lpVtbl -> ClearSelectors(This) ) 

#define IWSManResourceLocator_get_FragmentPath(This,text)	\
    ( (This)->lpVtbl -> get_FragmentPath(This,text) ) 

#define IWSManResourceLocator_put_FragmentPath(This,text)	\
    ( (This)->lpVtbl -> put_FragmentPath(This,text) ) 

#define IWSManResourceLocator_get_FragmentDialect(This,text)	\
    ( (This)->lpVtbl -> get_FragmentDialect(This,text) ) 

#define IWSManResourceLocator_put_FragmentDialect(This,text)	\
    ( (This)->lpVtbl -> put_FragmentDialect(This,text) ) 

#define IWSManResourceLocator_AddOption(This,OptionName,OptionValue,mustComply)	\
    ( (This)->lpVtbl -> AddOption(This,OptionName,OptionValue,mustComply) ) 

#define IWSManResourceLocator_put_MustUnderstandOptions(This,mustUnderstand)	\
    ( (This)->lpVtbl -> put_MustUnderstandOptions(This,mustUnderstand) ) 

#define IWSManResourceLocator_get_MustUnderstandOptions(This,mustUnderstand)	\
    ( (This)->lpVtbl -> get_MustUnderstandOptions(This,mustUnderstand) ) 

#define IWSManResourceLocator_ClearOptions(This)	\
    ( (This)->lpVtbl -> ClearOptions(This) ) 

#define IWSManResourceLocator_get_Error(This,value)	\
    ( (This)->lpVtbl -> get_Error(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManResourceLocator_INTERFACE_DEFINED__ */


#ifndef __IWSManResourceLocatorInternal_INTERFACE_DEFINED__
#define __IWSManResourceLocatorInternal_INTERFACE_DEFINED__

/* interface IWSManResourceLocatorInternal */
/* [hidden][nonextensible][local][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IWSManResourceLocatorInternal;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EFFAEAD7-7EC8-4716-B9BE-F2E7E9FB4ADB")
    IWSManResourceLocatorInternal : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IWSManResourceLocatorInternalVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManResourceLocatorInternal * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManResourceLocatorInternal * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManResourceLocatorInternal * This);
        
        END_INTERFACE
    } IWSManResourceLocatorInternalVtbl;

    interface IWSManResourceLocatorInternal
    {
        CONST_VTBL struct IWSManResourceLocatorInternalVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManResourceLocatorInternal_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManResourceLocatorInternal_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManResourceLocatorInternal_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManResourceLocatorInternal_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WSMan;

#ifdef __cplusplus

class DECLSPEC_UUID("BCED617B-EC03-420b-8508-977DC7A686BD")
WSMan;
#endif

#ifndef __IWSManInternal_INTERFACE_DEFINED__
#define __IWSManInternal_INTERFACE_DEFINED__

/* interface IWSManInternal */
/* [hidden][nonextensible][local][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IWSManInternal;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04AE2B1D-9954-4D99-94A9-A961E72C3A13")
    IWSManInternal : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConfigSDDL( 
            /* [in] */ IDispatch *session,
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resource) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWSManInternalVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWSManInternal * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWSManInternal * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWSManInternal * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWSManInternal * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWSManInternal * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWSManInternal * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWSManInternal * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConfigSDDL )( 
            IWSManInternal * This,
            /* [in] */ IDispatch *session,
            /* [in] */ VARIANT resourceUri,
            /* [defaultvalue][in] */ long flags,
            /* [retval][out] */ BSTR *resource);
        
        END_INTERFACE
    } IWSManInternalVtbl;

    interface IWSManInternal
    {
        CONST_VTBL struct IWSManInternalVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWSManInternal_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWSManInternal_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWSManInternal_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWSManInternal_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWSManInternal_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWSManInternal_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWSManInternal_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWSManInternal_ConfigSDDL(This,session,resourceUri,flags,resource)	\
    ( (This)->lpVtbl -> ConfigSDDL(This,session,resourceUri,flags,resource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWSManInternal_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WSManInternal;

#ifdef __cplusplus

class DECLSPEC_UUID("7DE087A5-5DCB-4df7-BB12-0924AD8FBD9A")
WSManInternal;
#endif
#endif /* __WSManAutomation_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsmandisp_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wsmandisp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_WSManAutomation,0xF010BE25,0x296D,0x4036,0x98,0x0F,0x5A,0x06,0x69,0xA1,0x75,0x77);


MIDL_DEFINE_GUID(IID, IID_IWSMan,0x190D8637,0x5CD3,0x496d,0xAD,0x24,0x69,0x63,0x6B,0xB5,0xA3,0xB5);


MIDL_DEFINE_GUID(IID, IID_IWSManEx,0x2D53BDAA,0x798E,0x49e6,0xA1,0xAA,0x74,0xD0,0x12,0x56,0xF4,0x11);


MIDL_DEFINE_GUID(IID, IID_IWSManEx2,0x1D1B5AE0,0x42D9,0x4021,0x82,0x61,0x39,0x87,0x61,0x95,0x12,0xE9);


MIDL_DEFINE_GUID(IID, IID_IWSManEx3,0x6400E966,0x011D,0x4eac,0x84,0x74,0x04,0x9E,0x08,0x48,0xAF,0xAD);


MIDL_DEFINE_GUID(IID, IID_IWSManConnectionOptions,0xF704E861,0x9E52,0x464f,0xB7,0x86,0xDA,0x5E,0xB2,0x32,0x0F,0xDD);


MIDL_DEFINE_GUID(IID, IID_IWSManConnectionOptionsEx,0xEF43EDF7,0x2A48,0x4d93,0x95,0x26,0x8B,0xD6,0xAB,0x6D,0x4A,0x6B);


MIDL_DEFINE_GUID(IID, IID_IWSManConnectionOptionsEx2,0xF500C9EC,0x24EE,0x48ab,0xB3,0x8D,0xFC,0x9A,0x16,0x4C,0x65,0x8E);


MIDL_DEFINE_GUID(IID, IID_IWSManSession,0xFC84FC58,0x1286,0x40c4,0x9D,0xA0,0xC8,0xEF,0x6E,0xC2,0x41,0xE0);


MIDL_DEFINE_GUID(IID, IID_IWSManEnumerator,0xF3457CA9,0xABB9,0x4fa5,0xB8,0x50,0x90,0xE8,0xCA,0x30,0x0E,0x7F);


MIDL_DEFINE_GUID(IID, IID_IWSManResourceLocator,0xA7A1BA28,0xDE41,0x466a,0xAD,0x0A,0xC4,0x05,0x9E,0xAD,0x74,0x28);


MIDL_DEFINE_GUID(IID, IID_IWSManResourceLocatorInternal,0xEFFAEAD7,0x7EC8,0x4716,0xB9,0xBE,0xF2,0xE7,0xE9,0xFB,0x4A,0xDB);


MIDL_DEFINE_GUID(CLSID, CLSID_WSMan,0xBCED617B,0xEC03,0x420b,0x85,0x08,0x97,0x7D,0xC7,0xA6,0x86,0xBD);


MIDL_DEFINE_GUID(IID, IID_IWSManInternal,0x04AE2B1D,0x9954,0x4D99,0x94,0xA9,0xA9,0x61,0xE7,0x2C,0x3A,0x13);


MIDL_DEFINE_GUID(CLSID, CLSID_WSManInternal,0x7DE087A5,0x5DCB,0x4df7,0xBB,0x12,0x09,0x24,0xAD,0x8F,0xBD,0x9A);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WSNwLink.h ===
/*
 *   wsnwlink.h
 *
 *
 *  Microsoft Windows
 *  Copyright (C) Microsoft Corporation, 1992-1999.
 *   Microsoft-specific extensions to the Windows NT IPX/SPX Windows
 *   Sockets interface.  These extensions are provided for use as
 *   necessary for compatibility with existing applications.  They are
 *   otherwise not recommended for use, as they are only guaranteed to
 *   work *   over the Microsoft IPX/SPX stack.  An application which
 *   uses these *   extensions may not work over other IPX/SPX
 *   implementations.  Include this header file after winsock.h and
 *   wsipx.h.
 *
 *   To open an IPX socket where a particular packet type is sent in
 *   the IPX header, specify NSPROTO_IPX + n as the protocol parameter
 *   of the socket() API.  For example, to open an IPX socket that
 *   sets the packet type to 34, use the following socket() call:
 *
 *       s = socket(AF_IPX, SOCK_DGRAM, NSPROTO_IPX + 34);
 *
 *   Below are socket option that may be set or retrieved by specifying
 *   the appropriate manifest in the "optname" parameter of getsockopt()
 *   or setsockopt().  Use NSPROTO_IPX as the "level" argument for the
 *   call.
 *
 */

#ifndef _WSNWLINK_
#define _WSNWLINK_

#if _MSC_VER > 1000
#pragma once
#endif


/*
 *   Set/get the IPX packet type.  The value specified in the
 *   optval argument will be set as the packet type on every IPX
 *   packet sent from this socket.  The optval parameter of
 *   getsockopt()/setsockopt() points to an int.
 *
 */

#define IPX_PTYPE               0x4000


/*
 *   Set/get the receive filter packet type.  Only IPX packets with
 *   a packet type equal to the value specified in the optval
 *   argument will be returned; packets with a packet type that
 *   does not match are discarded.  optval points to an int.
 *
 */

#define IPX_FILTERPTYPE         0x4001


/*
 *   Stop filtering on packet type set with IPX_FILTERPTYPE.
 *
 */

#define IPX_STOPFILTERPTYPE     0x4003


/*
 *   Set/get the value of the datastream field in the SPX header on
 *   every packet sent.  optval points to an int.
 *
 */

#define IPX_DSTYPE              0x4002


/*
 *   Enable extended addressing.  On sends, adds the element
 *   "unsigned char sa_ptype" to the SOCKADDR_IPX structure,
 *   making the total length 15 bytes.  On receives, add both
 *   the sa_ptype and "unsigned char sa_flags" to the SOCKADDR_IPX
 *   structure, making the total length 16 bytes.  The current
 *   bits defined in sa_flags are:
 *
 *   0x01 - the received frame was sent as a broadcast
 *   0x02 - the received frame was sent from this machine
 *
 *   optval points to a BOOL.
 *
 */

#define IPX_EXTENDED_ADDRESS    0x4004


/*
 *   Send protocol header up on all receive packets.  optval points
 *   to a BOOL.
 *
 */

#define IPX_RECVHDR             0x4005


/*
 *   Get the maximum data size that can be sent.  Not valid with
 *   setsockopt().  optval points to an int where the value is
 *   returned.
 *
 */

#define IPX_MAXSIZE             0x4006


/*
 *   Query information about a specific adapter that IPX is bound
 *   to.  In a system with n adapters they are numbered 0 through n-1.
 *   Callers can issue the IPX_MAX_ADAPTER_NUM getsockopt() to find
 *   out the number of adapters present, or call IPX_ADDRESS with
 *   increasing values of adapternum until it fails.  Not valid
 *   with setsockopt().  optval points to an instance of the
 *   IPX_ADDRESS_DATA structure with the adapternum filled in.
 *
 */

#define IPX_ADDRESS             0x4007

typedef struct _IPX_ADDRESS_DATA {
    INT   adapternum;  /* input: 0-based adapter number */
    UCHAR netnum[4];   /* output: IPX network number */
    UCHAR nodenum[6];  /* output: IPX node address */
    BOOLEAN wan;       /* output: TRUE = adapter is on a wan link */
    BOOLEAN status;    /* output: TRUE = wan link is up (or adapter is not wan) */
    INT   maxpkt;      /* output: max packet size, not including IPX header */
    ULONG linkspeed;   /* output: link speed in 100 bytes/sec (i.e. 96 == 9600 bps) */
} IPX_ADDRESS_DATA, *PIPX_ADDRESS_DATA;


/*
 *   Query information about a specific IPX network number.  If the
 *   network is in IPX's cache it will return the information directly,
 *   otherwise it will issue RIP requests to find it.  Not valid with
 *   setsockopt().  optval points to an instance of the IPX_NETNUM_DATA
 *   structure with the netnum filled in.
 *
 */

#define IPX_GETNETINFO          0x4008

typedef struct _IPX_NETNUM_DATA {
    UCHAR  netnum[4];  /* input: IPX network number */
    USHORT hopcount;   /* output: hop count to this network, in machine order */
    USHORT netdelay;   /* output: tick count to this network, in machine order */
    INT    cardnum;    /* output: 0-based adapter number used to route to this net;
                       /*         can be used as adapternum input to IPX_ADDRESS */
    UCHAR  router[6];  /* output: MAC address of the next hop router, zeroed if
                       /*         the network is directly attached */
} IPX_NETNUM_DATA, *PIPX_NETNUM_DATA;


/*
 *   Like IPX_GETNETINFO except it *does not* issue RIP requests. If the
 *   network is in IPX's cache it will return the information, otherwise
 *   it will fail (see also IPX_RERIPNETNUMBER which *always* forces a
 *   re-RIP). Not valid with setsockopt().  optval points to an instance of
 *   the IPX_NETNUM_DATA structure with the netnum filled in.
 *
 */

#define IPX_GETNETINFO_NORIP    0x4009


/*
 *   Get information on a connected SPX socket.  optval points
 *   to an instance of the IPX_SPXCONNSTATUS_DATA structure.
 *
 *   All numbers are in Novell (high-low) order.
 *
 */

#define IPX_SPXGETCONNECTIONSTATUS 0x400B

typedef struct _IPX_SPXCONNSTATUS_DATA {
    UCHAR  ConnectionState;
    UCHAR  WatchDogActive;
    USHORT LocalConnectionId;
    USHORT RemoteConnectionId;
    USHORT LocalSequenceNumber;
    USHORT LocalAckNumber;
    USHORT LocalAllocNumber;
    USHORT RemoteAckNumber;
    USHORT RemoteAllocNumber;
    USHORT LocalSocket;
    UCHAR  ImmediateAddress[6];
    UCHAR  RemoteNetwork[4];
    UCHAR  RemoteNode[6];
    USHORT RemoteSocket;
    USHORT RetransmissionCount;
    USHORT EstimatedRoundTripDelay; /* In milliseconds */
    USHORT RetransmittedPackets;
    USHORT SuppressedPacket;
} IPX_SPXCONNSTATUS_DATA, *PIPX_SPXCONNSTATUS_DATA;


/*
 *   Get notification when the status of an adapter that IPX is
 *   bound to changes.  Typically this will happen when a wan line
 *   goes up or down.  Not valid with setsockopt().  optval points
 *   to a buffer which contains an IPX_ADDRESS_DATA structure
 *   followed immediately by a HANDLE to an unsignaled event.
 *
 *   When the getsockopt() query is submitted, it will complete
 *   successfully.  However, the IPX_ADDRESS_DATA pointed to by
 *   optval will not be updated at that point.  Instead the
 *   request is queued internally inside the transport.
 *
 *   When the status of an adapter changes, IPX will locate a
 *   queued getsockopt() query and fill in all the fields in the
 *   IPX_ADDRESS_DATA structure.  It will then signal the event
 *   pointed to by the HANDLE in the optval buffer.  This handle
 *   should be obtained before calling getsockopt() by calling
 *   CreateEvent().  If multiple getsockopts() are submitted at
 *   once, different events must be used.
 *
 *   The event is used because the call needs to be asynchronous
 *   but currently getsockopt() does not support this.
 *
 *   WARNING: In the current implementation, the transport will
 *   only signal one queued query for each status change.  Therefore
 *   only one service which uses this query should be running at
 *   once.
 *
 */

#define IPX_ADDRESS_NOTIFY      0x400C


/*
 *   Get the maximum number of adapters present.  If this call returns
 *   n then the adapters are numbered 0 through n-1.  Not valid
 *   with setsockopt().  optval points to an int where the value
 *   is returned.
 *
 */

#define IPX_MAX_ADAPTER_NUM     0x400D


/*
 *   Like IPX_GETNETINFO except it forces IPX to re-RIP even if the
 *   network is in its cache (but not if it is directly attached to).
 *   Not valid with setsockopt().  optval points to an instance of
 *   the IPX_NETNUM_DATA structure with the netnum filled in.
 *
 */

#define IPX_RERIPNETNUMBER      0x400E


/*
 *   A hint that broadcast packets may be received.  The default is
 *   TRUE.  Applications that do not need to receive broadcast packets
 *   should set this sockopt to FALSE which may cause better system
 *   performance (note that it does not necessarily cause broadcasts
 *   to be filtered for the application).  Not valid with getsockopt().
 *   optval points to a BOOL.
 *
 */

#define IPX_RECEIVE_BROADCAST   0x400F


/*
 *   On SPX connections, don't delay before sending ack.  Applications
 *   that do not tend to have back-and-forth traffic over SPX should
 *   set this; it will increase the number of acks sent but will remove
 *   delays in sending acks.  optval points to a BOOL.
 *
 */

#define IPX_IMMEDIATESPXACK     0x4010

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wsman.h ===
//*****************************************************************************
//  Copyright (C) 2007 Microsoft Corporation
//  All rights reserved.
//
//  Definition file for WSMAN
//*****************************************************************************

#ifndef _WSMAN_H_
#define _WSMAN_H_

#include <specstrings.h>

#if defined(WSMAN_API_VERSION_1_0)
#else
#error "Define WSMAN_API_VERSION_1_0 before including wsman.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

//
// -----------------------------------------------------------------------------
//  WSMan - Public Client API v1.0
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
//  BEGIN COMMON: Shared between client and plug-in
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
//  Structure for a data object.  These structures are used as output and input
//  to operations.  Eg, output from a WSManReceiveShellOutput and input to a 
//      WSManSendShellInput.
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// data as text
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_DATA_TEXT
{
    DWORD bufferLength;
    __in_ecount(bufferLength) PCWSTR buffer;
}WSMAN_DATA_TEXT;

//
// -----------------------------------------------------------------------------
// binary data used by API like for example WSManSendShellInput and 
//  WSManReceiveShellOutput for Shell API, the data can be stream text 
//  (ANSI/UNICODE), binary content or objects or partial or full XML
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_DATA_BINARY
{
    DWORD dataLength;
    __in_ecount(dataLength) BYTE *data; 
}WSMAN_DATA_BINARY;

//
// -----------------------------------------------------------------------------
// type of the data used by the WSMAN_DATA structure
// -----------------------------------------------------------------------------
//

enum WSManDataType
{
    WSMAN_DATA_NONE                = 0,
    WSMAN_DATA_TYPE_TEXT           = 1,
    WSMAN_DATA_TYPE_BINARY         = 2,
    WSMAN_DATA_TYPE_DWORD          = 4
};
typedef enum WSManDataType WSManDataType;

//
// -----------------------------------------------------------------------------
// Structure used to pass data as XML text, binary data or DWORD
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_DATA
{
    WSManDataType type; 
    union
    {
        WSMAN_DATA_TEXT text;
        WSMAN_DATA_BINARY binaryData;
        DWORD number;
    };
} WSMAN_DATA;

//
// -----------------------------------------------------------------------------
//  Error structure containing fault code (a Windows error code that maps to 
//  a SOAP fault) and extended error information.
//  The extended error information is the soap fault description from the protocol layer
//  including the machine where the fault was reported as well as plug-in
//  specific error text.
//
//  This error structure is used by callbacks to return detailed error information.
//
//  The error structure can contain also a transport error.
// -----------------------------------------------------------------------------
//

typedef struct _WSMAN_ERROR 
{
    DWORD code; 
    // extended error information
    __in_opt PCWSTR errorDetail; // extended error description from the fault; 
                                 // it can be NULL, for example in out of memory conditions
    __in_opt PCWSTR language;    // language for error description (RFC 3066 language code); it can be NULL
    __in_opt PCWSTR machineName; // machine id; it can be NULL
    __in_opt PCWSTR pluginName;  // Plug-in name for errors generated by plug-ins. Otherwise NULL.
} WSMAN_ERROR;

//
// -----------------------------------------------------------------------------
// Username and password on the remote machine
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_USERNAME_PASSWORD_CREDS
{
    __in PCWSTR username;
    __in PCWSTR password;
} WSMAN_USERNAME_PASSWORD_CREDS;

//
// -----------------------------------------------------------------------------
// flags used by the authenticationMechanism member of WSMAN_AUTHENTICATION_CREDENTIALS structure
// -----------------------------------------------------------------------------
//
enum WSManAuthenticationFlags
{
    WSMAN_FLAG_DEFAULT_AUTHENTICATION    = 0x0,     //Use the default authentication
    WSMAN_FLAG_NO_AUTHENTICATION         = 0x1,     //Use no authentication for a remote operation
    WSMAN_FLAG_AUTH_DIGEST               = 0x2,     //Use digest authentication for a remote operation
    WSMAN_FLAG_AUTH_NEGOTIATE            = 0x4,     //Use negotiate authentication for a remote operation (may use kerberos or ntlm)
    WSMAN_FLAG_AUTH_BASIC                = 0x8,     //Use basic authentication for a remote operation
    WSMAN_FLAG_AUTH_KERBEROS             = 0x10,    //Use kerberos authentication for a remote operation 
#if (WINVER >= 0x600)
    WSMAN_FLAG_AUTH_CREDSSP              = 0x80,    //Use CredSSP authentication for a remote operation
#endif
    WSMAN_FLAG_AUTH_CLIENT_CERTIFICATE   = 0x20     //Use client certificate authentication for a remote operation 
};

//
// -----------------------------------------------------------------------------
// Structure for passing the credentials and the authentication mechanism
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_AUTHENTICATION_CREDENTIALS
{
    DWORD authenticationMechanism; // can be 0 (the user did not specify an
                                   // authentication mechanism, WSMan client
                                   // will choose between Kerberos and Negotiate only);
                                   // if it is not 0, it must be one of the 
                                   // values from WSManAuthenticationFlags
                                   // enumeration
    union 
    {
        WSMAN_USERNAME_PASSWORD_CREDS userAccount;
        PCWSTR certificateThumbprint; 
    };
}WSMAN_AUTHENTICATION_CREDENTIALS;

//
// -----------------------------------------------------------------------
// Options
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_OPTION 
{
    PCWSTR name;
    PCWSTR value;
    BOOL mustComply;
} WSMAN_OPTION;

typedef struct _WSMAN_OPTION_SET 
{
    DWORD optionsCount;
    __in_ecount_opt(optionsCount) WSMAN_OPTION *options;
    BOOL optionsMustUnderstand;
} WSMAN_OPTION_SET;

//
// -----------------------------------------------------------------------------
//  Structures containing information for addressing the endpoint.
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_KEY 
{
    PCWSTR key;
    PCWSTR value;
} WSMAN_KEY;

typedef struct _WSMAN_SELECTOR_SET 
{
    DWORD numberKeys; // Number of keys (selectors)
    __in_ecount_opt(numberKeys) WSMAN_KEY *keys;  // Array of key names and values
} WSMAN_SELECTOR_SET;

//
// -----------------------------------------------------------------------------
// Structure reserved for future use (Fragment Level WS-Transfer) 
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_FRAGMENT
{
    __in PCWSTR path;               // fragment path - WS-Transfer
    __in_opt PCWSTR dialect;        // dialect for Fragment path 

} WSMAN_FRAGMENT;

//
// -----------------------------------------------------------------------------
// Structure reserved for future use (Filter Enumeration/Eventing)
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_FILTER
{
    __in PCWSTR filter;              // filter enumeration/subscription - allows ad-hoc queries using quey languages like SQL
    __in_opt PCWSTR dialect;         // dialect for filter predicate

} WSMAN_FILTER;

typedef struct _WSMAN_OPERATION_INFO
{
    __in_opt WSMAN_FRAGMENT fragment;              // optional element to support Fragment transfer or
    __in_opt WSMAN_FILTER filter;                  // optional Filter WS-Enumerate/WS-Eventing
    __in_opt WSMAN_SELECTOR_SET selectorSet;
    __in_opt WSMAN_OPTION_SET optionSet;  
} WSMAN_OPERATION_INFO;

//
// -----------------------------------------------------------------------------
//  Client Initialization/Deinitialization functions
// -----------------------------------------------------------------------------
//

typedef struct WSMAN_API *WSMAN_API_HANDLE;

//
// -----------------------------------------------------------------------------
// This API is used to initialize the WinRM client;
// It can be used by different clients on the same process, ie svchost.exe.
// Returns a nonzero error code upon failure
// -----------------------------------------------------------------------------
// 
DWORD WINAPI WSManInitialize(
    DWORD flags,
    __out WSMAN_API_HANDLE *apiHandle
    );

//
// -----------------------------------------------------------------------------
// This API deinitializes the Winrm client stack; all operations will 
//  finish before this API will return; this is a sync call;
//  it is highly recommended that all operations are explictly cancelled 
//  and all sessions are closed before calling this API
// Returns non zero error code upon failure
// -----------------------------------------------------------------------------
// 
DWORD WINAPI WSManDeinitialize(
    __inout_opt WSMAN_API_HANDLE apiHandle,
    DWORD flags
    );

//
// -----------------------------------------------------------------------------
// This API returns a NULL terminated unicode string containing the message 
//  of an error number and an optional language identifier. The optional 
//  parameter languageCode specifies the UI language as RFC 3066 language code 
//  that should be used to localize the message (if not specified, the thread's 
//  UI language will be used). If the function cannot find a message for that 
//  language, it returns ERROR_RESOURCE_LANG_NOT_FOUND. The function copies 
//  the formatted message text to an output buffer. 
//
// Returns non zero error code upon failure. If the output buffer is not 
//  big enough or NULL, the function returns ERROR_INSUFFICIENT_BUFFER and 
//  the messageLengthUsed parameter contains the requested size of the buffer.
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManGetErrorMessage(
    __in WSMAN_API_HANDLE apiHandle,
    DWORD flags,            // reserved for future use; must be 0
    __in_opt PCWSTR languageCode,    // the RFC 3066 language code; it can be NULL
    DWORD errorCode,        // error code for the requested error message
    DWORD messageLength,    // message length, including NULL terminator
    __out_ecount_part_opt(messageLength, *messageLengthUsed) PWSTR message,
    __out DWORD* messageLengthUsed  // effective message length, including NULL terminator
    );


//
// -----------------------------------------------------------------------------
// Unsigned long integer value that contains the proxy access type
// By default, wsman uses WSMAN_OPTION_PROXY_WINHTTP_PROXY_CONFIG -
//  the proxy settings configured for WinHTTP. The WinHTTP proxy settings 
//  can be set with Proxycfg.exe or by using netsh command.
// When WSMAN_OPTION_PROXY_IE_PROXY_CONFIG is specified, the current user's
//  Internet Explorer proxy settings for the current active network connection. 
//  This option requires the user profile to be loaded, so the option can 
//  be directly used when called within a process that is running under 
//  an interactive user account identity; if the client application is running 
//  under a user context different then the interactive user, the client 
//  application has to explicitly load the user profile prior to using this option.
// IMPORTANT: proxy configuration is supported for HTTPS only; for HTTP, the direct 
//      connection to the server is used
// -----------------------------------------------------------------------------
//
enum WSManProxyAccessType
{
    WSMAN_OPTION_PROXY_IE_PROXY_CONFIG          = 1,    // use the Internet Explorer proxy configuration for the current user
    WSMAN_OPTION_PROXY_WINHTTP_PROXY_CONFIG     = 2,    // default: proxy settings configured for WinHTTP, using the ProxyCfg.exe utility       
    WSMAN_OPTION_PROXY_AUTO_DETECT              = 4,    // Force autodetection of proxy
    WSMAN_OPTION_PROXY_NO_PROXY_SERVER          = 8,    // do not use a proxy server - resolves all host names locally   
};

//
// -----------------------------------------------------------------------------
// Structure used to set the proxy information per session
// -----------------------------------------------------------------------------
// 

typedef struct _WSMAN_PROXY_INFO
{  
    DWORD accessType;
    __in_opt WSMAN_AUTHENTICATION_CREDENTIALS authenticationCredentials; // credentials and authentication scheme used for proxy
} WSMAN_PROXY_INFO;

//
// -----------------------------------------------------------------------------
//  Client Session
// -----------------------------------------------------------------------------
//
typedef struct WSMAN_SESSION *WSMAN_SESSION_HANDLE;

//
// -----------------------------------------------------------------------------
// Creates a session which can be used to perform subsequent operations
// Returns a non zero error code upon failure
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManCreateSession(
    __in WSMAN_API_HANDLE apiHandle,
    __in_opt PCWSTR connection,                         // if NULL, then connection will default to localhost
    DWORD flags,
    __in_opt WSMAN_AUTHENTICATION_CREDENTIALS *serverAuthenticationCredentials,
    __in_opt WSMAN_PROXY_INFO *proxyInfo,
    __out WSMAN_SESSION_HANDLE *session
    );

//
// -----------------------------------------------------------------------------
// Frees memory of session and closes all related operations before returning; this is sync call
// it is recommended that all pending operations are either completed or cancelled before calling this API
// Returns a non zero error code upon failure
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManCloseSession(
    __inout_opt WSMAN_SESSION_HANDLE session,
    DWORD flags
    );

//
// default operation timeout for network operations - 1 min = 60000ms
//
#define WSMAN_DEFAULT_TIMEOUT_MS 60000

//
// -----------------------------------------------------------------------------
// Extended options set for the session
// -----------------------------------------------------------------------------
//
enum WSManSessionOption 
{
    //
    //Timeouts
    //

    WSMAN_OPTION_DEFAULT_OPERATION_TIMEOUTMS = 1,// DWORD - default timeout in ms that applies to all operations on the client side

    WSMAN_OPTION_TIMEOUTMS_CREATE_SHELL      = 12,// DWORD - timeout in ms for WSManCreateShell operations
    WSMAN_OPTION_TIMEOUTMS_RUN_SHELL_COMMAND =13,// DWORD - timeout in ms for WSManRunShellCommand operations
    WSMAN_OPTION_TIMEOUTMS_RECEIVE_SHELL_OUTPUT =14,// DWORD - timeout in ms for WSManReceiveShellOutput operations
    WSMAN_OPTION_TIMEOUTMS_SEND_SHELL_INPUT  = 15,// DWORD - timeout in ms for WSManSendShellInput operations
    WSMAN_OPTION_TIMEOUTMS_SIGNAL_SHELL      = 16,// DWORD - timeout in ms for WSManSignalShell and WSManCloseCommand operations
    WSMAN_OPTION_TIMEOUTMS_CLOSE_SHELL       = 17,// DWORD - timeout in ms for WSManCloseShell operations

    //
    // connection options
    //

    WSMAN_OPTION_SKIP_CA_CHECK              = 18,// DWORD  - 1 to not validate the CA on the server certificate; 0 - default
    WSMAN_OPTION_SKIP_CN_CHECK              = 19,// DWORD  - 1 to not validate the CN on the server certificate; 0 - default
    WSMAN_OPTION_UNENCRYPTED_MESSAGES       = 20,// DWORD  - 1 to not encrypt the messages; 0 - default
    WSMAN_OPTION_UTF16                      = 21,// DWORD  - 1 Send all network packets for remote operatons in UTF16; 0 - default is UTF8
    WSMAN_OPTION_ENABLE_SPN_SERVER_PORT     = 22,// DWORD  - 1 When using negotiate, include port number in the connection SPN; 0 - default
                                                 // Used when not talking to the main OS on a machine but, for instance, a BMC 
    WSMAN_OPTION_MACHINE_ID                 = 23,// DWORD  - 1 Identify this machine to the server by including the MachineID header; 0 - default
    
    //
    // other options
    //
    WSMAN_OPTION_LOCALE                     = 25,// string - RFC 3066 language code
    WSMAN_OPTION_UI_LANGUAGE                = 26,// string - RFC 3066 language code
    WSMAN_OPTION_MAX_ENVELOPE_SIZE_KB       = 28,// DWORD - max SOAP envelope size (kb) - default 150kb from winrm config 
                                                // (see 'winrm help config' for more details); the client SOAP packet size cannot surpass 
                                                //  this value; this value will be also sent to the server in the SOAP request as a 
                                                //  MaxEnvelopeSize header; the server will use min(MaxEnvelopeSizeKb from server configuration, 
                                                //  MaxEnvelopeSize value from SOAP).
    WSMAN_OPTION_SHELL_MAX_DATA_SIZE_PER_MESSAGE_KB = 29,// DWORD (read only) - max data size (kb) provided by the client, guaranteed by 
                                                     //  the winrm client implementation to fit into one SOAP packet; this is an 
                                                     // approximate value calculated based on the WSMAN_OPTION_MAX_ENVELOPE_SIZE_KB (default 150kb), 
                                                     // the maximum possible size of the SOAP headers and the overhead of the base64 
                                                     // encoding which is specific to WSManSendShellInput API; this option can be used 
                                                     // with WSManGetSessionOptionAsDword API; it cannot be used with WSManSetSessionOption API.
    WSMAN_OPTION_REDIRECT_LOCATION          = 30,// string - read-only, cannot set
    WSMAN_OPTION_SKIP_REVOCATION_CHECK  = 31,// DWORD  - 1 to not validate the revocation status on the server certificate; 0 - default
    WSMAN_OPTION_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS  = 32,// DWORD  - 1 to allow default credentials for Negotiate (this is for SSL only); 0 - default
    WSMAN_OPTION_USE_SSL                    = 33    // DWORD - When using just a machine name in the connection string use an SSL connection. 0 means HTTP, 1 means HTTPS.  Default is 0.
};
typedef enum WSManSessionOption WSManSessionOption;

//
// -----------------------------------------------------------------------------
// WSManSetSessionOption API - set session options
//  Returns a non zero error code upon failure
// -----------------------------------------------------------------------------
// 
DWORD WINAPI WSManSetSessionOption(
    __in WSMAN_SESSION_HANDLE session,
    WSManSessionOption option,
    __in WSMAN_DATA *data
    );

//
// -----------------------------------------------------------------------------
// WSManGetSessionOptionAsDword API - get a session option
//  Returns a non zero error code upon failure
// -----------------------------------------------------------------------------
// 
DWORD WINAPI WSManGetSessionOptionAsDword(
    __in WSMAN_SESSION_HANDLE session,
    WSManSessionOption option,
    __inout DWORD *value
    );

//
// -----------------------------------------------------------------------------
// WSManGetSessionOptionAsString API - get a session option
//  Returns a non zero error code upon failure
// -----------------------------------------------------------------------------
// 
__success(return == NO_ERROR)
DWORD WINAPI WSManGetSessionOptionAsString(
    __in WSMAN_SESSION_HANDLE session,
    WSManSessionOption option,
    DWORD stringLength,    
    __out_ecount_part_opt(stringLength, *stringLengthUsed) PWSTR string,
    __out DWORD* stringLengthUsed  
    );

//
// -----------------------------------------------------------------------------
// Handle returned by WS-Transfer and WS-Enumerate operations
// -----------------------------------------------------------------------------
//
typedef struct WSMAN_OPERATION *WSMAN_OPERATION_HANDLE;

//
// -----------------------------------------------------------------------------
// flags used by WSMAN_SHELL_COMPLETION_FUNCTION callback function
// -----------------------------------------------------------------------------
//
enum WSManCallbackFlags 
{
    //
    // Flag that marks the end of any single step of multistep operation
    // 
    WSMAN_FLAG_CALLBACK_END_OF_OPERATION     = 0x1,

    //
    // WSMAN_SHELL_COMPLETION_FUNCTION API specific flags
    //  end of a particular stream; it is used for optimization purposes if the shell 
    //  knows that no more output will occur for this stream; in some conditions this 
    //  cannot be determined. 
    //
    WSMAN_FLAG_CALLBACK_END_OF_STREAM        = 0x8,
};

//
// -----------------------------------------------------------------------------
// Closes an asynchronous operation; if the callback associated with the operation 
//  is pending and have not completed when WSManCloseOperation is called, then 
//  the function marks the operation for deletion and returns; If the callback was not called,
//  the operation is cancelled and the operation callback is called with 
//  WSMAN_ERROR_OPERATION_ABORTED error; the operation handle is freed in all cases 
//  after the callback returns.
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManCloseOperation(
    __inout_opt WSMAN_OPERATION_HANDLE operationHandle,
    DWORD flags
    );

//
//------------------------------------------------------------------------
// Shell Client API 
//  The API set includes the ability to create a shell, execute one or 
//  more commands, possibly pipe input stream to the command, collect the 
//  output stream from the command, terminate the command and finally 
//  close the shell. The client must retrieve the output initiating 
//  a WSManReceiveShellOutput once; the underlying implementation will 
//  handle pulling the data from the command, until the command is done. 
//  For each received stream, the completion function will be called with
//  the status of the command.
//
//  WSManCloseCommand or WSManCloseShell can be called any time to close the 
//    commmand or a shell operation. The callback will be called with 
//    WSMAN_FLAG_CALLBACK_END_OF_OPERATION flag to mark the end of the operation.
//    See WSManCloseCommand/WSManCloseShell API description for more info.
// -----------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------
// Shell handle returned by WSManCreateShell API
// -----------------------------------------------------------------------
//
typedef struct WSMAN_SHELL *WSMAN_SHELL_HANDLE;

//
// -----------------------------------------------------------------------
// Command handle returned by WSManRunShellCommand API
// -----------------------------------------------------------------------
//
typedef struct WSMAN_COMMAND *WSMAN_COMMAND_HANDLE;

//
// -----------------------------------------------------------------------
// predefined stream ids 
// -----------------------------------------------------------------------
//
#define WSMAN_STREAM_ID_STDIN L"stdin"
#define WSMAN_STREAM_ID_STDOUT L"stdout"
#define WSMAN_STREAM_ID_STDERR L"stderr"

//
// -----------------------------------------------------------------------
// stream selector - array of stream ids; ie L"stdin" or L"stdout" or L"stderr"
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_STREAM_ID_SET
{
    DWORD streamIDsCount;
    __in_ecount_opt(streamIDsCount) PCWSTR *streamIDs;

} WSMAN_STREAM_ID_SET;

//
// -----------------------------------------------------------------------
// Environment variable 
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_ENVIRONMENT_VARIABLE
{
    PCWSTR name;
    PCWSTR value;

} WSMAN_ENVIRONMENT_VARIABLE;

//
// -----------------------------------------------------------------------
// environment variable set - array of environment variables
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_ENVIRONMENT_VARIABLE_SET
{
    DWORD varsCount;
    __in_ecount_opt(varsCount) WSMAN_ENVIRONMENT_VARIABLE *vars;

} WSMAN_ENVIRONMENT_VARIABLE_SET;

//
// -----------------------------------------------------------------------
// Shell initialization parameters 
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_SHELL_STARTUP_INFO
{
    WSMAN_STREAM_ID_SET *inputStreamSet;
    WSMAN_STREAM_ID_SET *outputStreamSet;
    DWORD idleTimeoutMs;
    PCWSTR workingDirectory;
    WSMAN_ENVIRONMENT_VARIABLE_SET *variableSet;

} WSMAN_SHELL_STARTUP_INFO;

//
// -----------------------------------------------------------------------
// Pre-defined URIs
// -----------------------------------------------------------------------
// 
#define WSMAN_SHELL_NS L"http://schemas.microsoft.com/wbem/wsman/1/windows/shell"
#define WSMAN_SHELL_NS_LEN (sizeof(WSMAN_SHELL_NS)/sizeof(WCHAR)-1)

// 
// -----------------------------------------------------------------------
// URI to create a Windows command shell; used with WSManCreateShell API
// -----------------------------------------------------------------------
// 
#define WSMAN_CMDSHELL_URI WSMAN_SHELL_NS L"/cmd"


//
// -----------------------------------------------------------------------
// Windows shell options
// -----------------------------------------------------------------------
// 
enum WSManShellFlag
{
    //Turn off compression for Send/Receive operations.  By default compression is
    //turned on, but if communicating with a down-level box it may be necessary to
    //do this.  Other reasons for turning it off is due to the extra memory consumption
    //and CPU utilization that is used as a result of compression.
    WSMAN_FLAG_NO_COMPRESSION = 1
};
typedef enum WSManShellFlag WSManShellFlag;

//
// -----------------------------------------------------------------------
// Windows command shell specific options
// -----------------------------------------------------------------------
// 

//
// -----------------------------------------------------------------------
// Code page option name to be used with WSManCreateShell 
//  API to remotely set the code page
// -----------------------------------------------------------------------
//
#define WSMAN_CMDSHELL_OPTION_CODEPAGE L"WINRS_CODEPAGE"

//
// -----------------------------------------------------------------------
// Option name used with WSManCreateShell API to not load the 
//  user profile on the remote server 
// -----------------------------------------------------------------------
//
#define WSMAN_SHELL_OPTION_NOPROFILE L"WINRS_NOPROFILE"

//
// -----------------------------------------------------------------------
// Option name used with WSManRunShellCommand API to 
//  indicate that the client side mode of standard input is Console;  
//  default  implies Pipe. 
// -----------------------------------------------------------------------
//
#define WSMAN_CMDSHELL_OPTION_CONSOLEMODE_STDIN L"WINRS_CONSOLEMODE_STDIN"

//
// -----------------------------------------------------------------------
// to be used with WSManRunShellCommand API to not use cmd.exe /c prefix when launching the command
// -----------------------------------------------------------------------
//
#define WSMAN_CMDSHELL_OPTION_SKIP_CMD_SHELL L"WINRS_SKIP_CMD_SHELL"

//
// -----------------------------------------------------------------------
// pre-defined command states
// -----------------------------------------------------------------------
//
#define WSMAN_COMMAND_STATE_DONE WSMAN_SHELL_NS L"/CommandState/Done"
#define WSMAN_COMMAND_STATE_PENDING WSMAN_SHELL_NS L"/CommandState/Pending"
#define WSMAN_COMMAND_STATE_RUNNING WSMAN_SHELL_NS L"/CommandState/Running"

//
// -----------------------------------------------------------------------
// Data structure returned after a Receive operation; each WSMAN_RECEIVE_DATA_RESULT
//  has a stream element with data that can be text (ANSI/UNICODE), binary content,
//  objects, or partial or full XML. In addition, the command state is reported 
//  to the client and exitCode if the command is done.
//
// This structure is allocated and owned by the winrm stack and it is valid
//  in the completion function only
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_RECEIVE_DATA_RESULT
{
    PCWSTR streamId;          // string - any output stream name from the list passed to
                              // the server when creating the shell
    WSMAN_DATA streamData;    // always data as binary; can be stream text (ANSI/UNICODE), binary content or objects or partial or full XML

    // command state string values (shell specific) - the state of the command for which status is being reported
    PCWSTR commandState;      // if WSMAN_COMMAND_STATE_DONE then the command should be closed at this moment
    DWORD exitCode;

} WSMAN_RECEIVE_DATA_RESULT;

//
// -----------------------------------------------------------------------
// Completion function used by all Shell functions 
// Returns error->code != 0 upon error; use error->errorDetail structure 
//  for extended error informations; the callback is called for each 
//  shell operation; after a WSManReceiveShellOutput operation is initiated, 
//  the callback is called for each output stream element or if error; 
//  the underlying implementation handles the polling of stream data
//  from the command or shell. If WSMAN_COMMAND_STATE_DONE state is received, no more 
//  streams will be received from the command, so the command can be closed 
//  using WSManCloseCommand(command).
// 
// If error->code != 0, the result is guaranteed to be NULL
//
// The error and result objects are allocated and owned by the winrm 
//  client stack; they are valid during the callback only; the user 
//  has to synchronously copy the data in the callback
// 
// This callback function will use the current access token, whether it is 
//  a process or impersonation token. 
// -----------------------------------------------------------------------
//
typedef void (CALLBACK *WSMAN_SHELL_COMPLETION_FUNCTION)(
    __in_opt PVOID operationContext,                     //user defined context
    DWORD flags,                                         // one or more flags from WSManCallbackFlags
    __in WSMAN_ERROR *error,                             // error allocated and owned by the winrm stack; valid in the callback only;
    __in WSMAN_SHELL_HANDLE shell,                       // shell handle associated with the user context; must be closed using WSManCloseShell 
    __in_opt WSMAN_COMMAND_HANDLE command,               // command handle associated with the user context; must be closed using WSManCloseCommand  
    __in_opt WSMAN_OPERATION_HANDLE operationHandle,     // valid only for Send/Receive/Signal operations; must be closed using WSManCloseOperation  
    __in_opt WSMAN_RECEIVE_DATA_RESULT *data             // output data from command/shell; allocated internally and owned by the winrm stack
                                                         // valid only within this function
    );                                   

//
// -----------------------------------------------------------------------------
// Asynchronous structure to be passed to all Shell operations; 
//  it contains an optional user context and the callback function
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_SHELL_ASYNC
{
    __in_opt PVOID operationContext;                         
    __in WSMAN_SHELL_COMPLETION_FUNCTION completionFunction;
} WSMAN_SHELL_ASYNC;

//
// -----------------------------------------------------------------------------
// WSManCreateShell API - wxf:Create
// -----------------------------------------------------------------------------
//
void WINAPI WSManCreateShell(

    __inout WSMAN_SESSION_HANDLE session,
    DWORD flags,  
    __in __nullterminated PCWSTR resourceUri,           // shell resource URI
    __in_opt WSMAN_SHELL_STARTUP_INFO *startupInfo,
    __in_opt WSMAN_OPTION_SET *options,
    __in_opt WSMAN_DATA *createXml,                     // open content for create shell
    __in WSMAN_SHELL_ASYNC *async,
    __out WSMAN_SHELL_HANDLE *shell // should be closed using WSManCloseShell
);

//
// -----------------------------------------------------------------------------
//  WSManRunShellCommand API - rsp:Command
// -----------------------------------------------------------------------------
// 

//
// -----------------------------------------------------------------------
// array of command arguments
// -----------------------------------------------------------------------
//
typedef struct _WSMAN_COMMAND_ARG_SET
{
    DWORD argsCount;
    __in_ecount_opt(argsCount) PCWSTR *args;

} WSMAN_COMMAND_ARG_SET;

void WINAPI WSManRunShellCommand(

    __inout WSMAN_SHELL_HANDLE shell,
    DWORD flags,  
    __in PCWSTR commandLine,
    __in_opt WSMAN_COMMAND_ARG_SET *args,
    __in_opt WSMAN_OPTION_SET *options,
    __in WSMAN_SHELL_ASYNC *async,
    __out WSMAN_COMMAND_HANDLE *command // should be closed using WSManCloseCommand
);

//
// -----------------------------------------------------------------------------
//  WSManSignalShell API - rsp:Signal
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------
// control codes for the command
// -----------------------------------------------------------------------
// 
#define WSMAN_SIGNAL_SHELL_CODE_TERMINATE WSMAN_SHELL_NS L"/signal/terminate"
#define WSMAN_SIGNAL_SHELL_CODE_CTRL_C WSMAN_SHELL_NS L"/signal/ctrl_c"
#define WSMAN_SIGNAL_SHELL_CODE_CTRL_BREAK WSMAN_SHELL_NS L"/signal/ctrl_break"

void WINAPI WSManSignalShell(

    __in WSMAN_SHELL_HANDLE shell,
    __in_opt WSMAN_COMMAND_HANDLE command,         // if NULL, the Signal will be sent to the shell
    DWORD flags,
    __in __nullterminated PCWSTR code,             // signal code
    __in WSMAN_SHELL_ASYNC *async,
    __out WSMAN_OPERATION_HANDLE *signalOperation  // should be closed using WSManCloseOperation
);

//
// -----------------------------------------------------------------------------
//  WSManReceiveShellOutput API - rsp:Receive
// -----------------------------------------------------------------------------
//

void WINAPI WSManReceiveShellOutput(

    __inout WSMAN_SHELL_HANDLE shell,
    __in_opt WSMAN_COMMAND_HANDLE command,
    DWORD flags,
    __in_opt WSMAN_STREAM_ID_SET *desiredStreamSet,  // request output from a particular stream or list of streams
    __in WSMAN_SHELL_ASYNC *async,
    __out WSMAN_OPERATION_HANDLE *receiveOperation // should be closed using WSManCloseOperation
);

//
// -----------------------------------------------------------------------------
//  WSManSendShellInput API - rsp:Send
// -----------------------------------------------------------------------------
//
void WINAPI WSManSendShellInput(

    __in WSMAN_SHELL_HANDLE shell,
    __in_opt WSMAN_COMMAND_HANDLE command,
    DWORD flags,
    __in PCWSTR streamId,               // input stream name 
    __in WSMAN_DATA *streamData,        // data as binary - that can contain text (ANSI/UNICODE), 
                                        // binary content or objects or partial or full XML
    BOOL endOfStream,
    __in WSMAN_SHELL_ASYNC *async,
    __out WSMAN_OPERATION_HANDLE *sendOperation // should be closed using WSManCloseOperation
);

//
// -----------------------------------------------------------------------------
// WSManCloseCommand API 
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// Closes a command (signals the termination of a command); the WSManCloseCommand callback 
//  is called with WSMAN_FLAG_CALLBACK_END_OF_OPERATION flag as result of this operation
// -----------------------------------------------------------------------------
//
void WINAPI WSManCloseCommand(
    __inout_opt WSMAN_COMMAND_HANDLE commandHandle,
    DWORD flags,
    __in WSMAN_SHELL_ASYNC *async
    );

//
// -----------------------------------------------------------------------------
// WSManCloseShell API 
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// Closes a shell; the WSManCloseShell callback is called with 
//  WSMAN_FLAG_CALLBACK_END_OF_OPERATION flag as result of this operation
// -----------------------------------------------------------------------------
//
void WINAPI WSManCloseShell(
    __inout_opt WSMAN_SHELL_HANDLE shellHandle,
    DWORD flags,
    __in WSMAN_SHELL_ASYNC *async
    );


//
// -----------------------------------------------------------------------------
// Plug-in APIs.  These APIs are used by plug-ins for reporting results
// -----------------------------------------------------------------------------
//

//
// ------------------------------------------------------------------------
// Sender information
// ------------------------------------------------------------------------
//

typedef struct _WSMAN_CERTIFICATE_DETAILS
{
    PCWSTR subject;         // Certificate subject in distinguished form
                            // Ex: "CN=xyz.com, OU=xyz management, O=Microsoft, L=Redmond, S=Washington, C=US"
    PCWSTR issuerName;      // Certificate issuer in distinguished form
                            // Ex: "CN=Microsoft Secure Server Authority, DC=redmond, DC=corp, DC=microsoft, DC=com" 
    PCWSTR issuerThumbprint;// Thumbprint of Certificate issuer
    PCWSTR subjectName;     // Certificate Subject Alternative Name (SAN) if available or subject Common Name (CN)
                            // Ex: "xyz.com" 
} WSMAN_CERTIFICATE_DETAILS;

typedef struct _WSMAN_SENDER_DETAILS
{
    PCWSTR senderName;                  // Username of the sender 
    PCWSTR authenticationMechanism;      // 
    WSMAN_CERTIFICATE_DETAILS *certificateDetails; // valid only if the authentication is client certificates
    HANDLE clientToken;
    PCWSTR httpURL;
} WSMAN_SENDER_DETAILS;

//
// -----------------------------------------------------------------------------
// A pointer to a WSMAN_PLUGIN_REQUEST structure is passed to all operation
// entry points within the plug-in.  All result notification APIs use this
// pointer to match the result with the request.  All information in the 
// structure will stay valid until the plug-in calls WSManPluginOperationComplete
// on the operation.  A plug-in has two ways of handling cancellation of an 
// operation.  The plug-in can check the shutdownNotification boolean value
// if it iterates through a set of results, or if the plug-in is more 
// asynchronous in nature then the shutdownNotificationHandle can be used
// when queuing up asynchronous notification threads.
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_PLUGIN_REQUEST
{
    WSMAN_SENDER_DETAILS *senderDetails;
    PCWSTR locale;
    PCWSTR resourceUri;
    WSMAN_OPERATION_INFO *operationInfo;
    volatile BOOL shutdownNotification;
    HANDLE shutdownNotificationHandle;
    PCWSTR dataLocale;
} WSMAN_PLUGIN_REQUEST;
//
// -----------------------------------------------------------------------------
// This API is called by a plug-in that supports Shell commands.  When 
// Create Shell and Create Command plug-in entry points are called the plug-in
// need to return a context to that shell or command before data can be channelled
// into the plug-in, or before data can be returned to the called.  WS-Man calls
// the WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT entry point during shell shutdown when
// it is safe to delete the plug-in shell context, and WS-Man calls the
// WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT entry point when it is safe to delete
// the plug-in command context.  Any context reported through
// WSManPluginReportContext may not be deleted until the corresponding release
// function has been called. Failure to follow the contract will result in
// errors being generated.
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManPluginReportContext(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in PVOID context
    );

typedef VOID (WINAPI *WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT)(
    __in PVOID shellContext
    );

typedef VOID (WINAPI *WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT)(
    __in PVOID shellContext,
    __in PVOID commandContext
    );

//
// -----------------------------------------------------------------------------
// This API is used by most a shell plug-in to report data for the Receive 
// operation.  This is the only operation that returns results that has a 
// different API due to the extra shell data that is needed.  This API
// is called for every result in the stream.  Once all data is received
// the WSManPluginOperationComplete API must be called.
// stream and streamResult are one pair of information that if one parameter
// is specified the other is needed otherwise ERROR_INVALID_PARAMETER is
// returned.  commandState and exitCode are also a pair, and exitCode is
// ignored in all cases but when commandState is WSMAN_COMMAND_STATE_DONE
// is specified.  Both pairs of parameters are independent to each other
// so the API can be used to register the stream data, command state or 
// both.
// flags:
//      WSMAN_FLAG_RECEIVE_RESULT_NO_MORE_DATA 
//          No more data on this stream.  Only valid when a stream is specified.
//      WSMAN_FLAG_RECEIVE_FLUSH
//          Send the data as soon as possible.  Normally data is held onto in 
//          order to maximise the size of the response packet.  This should
//          only be used if a request/response style of data is needed between
//          the send and receive data streams.
// -----------------------------------------------------------------------------
//
#define WSMAN_FLAG_RECEIVE_RESULT_NO_MORE_DATA 1
#define WSMAN_FLAG_RECEIVE_FLUSH               2

DWORD WINAPI WSManPluginReceiveResult(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in_opt PCWSTR stream,
    __in_opt WSMAN_DATA *streamResult,
    __in_opt PCWSTR commandState,
    __in DWORD exitCode
    );

//
// -----------------------------------------------------------------------------
// This API is used by all plug-ins to report the completion of an operation.
// For operations like Get, Put, Create and Invoke this API is likely to be 
// called after the result has been called.  For Delete operations where no 
// result is needed other than status, this API is all that is needed.
// For more complex operations like Enumerations, Subscriptions and shell 
// Receive operations this API is is used to report the completion of the 
// data stream.  The Create Shell and Create Command operations must also
// call this when the shell and command operations a completed fully.
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManPluginOperationComplete(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in DWORD errorCode,
    __in_opt PCWSTR extendedErrorInformation
    );

//
// -----------------------------------------------------------------------------
//This API is used to get operational information for items such as timeouts 
//and data restrictions associated with the operation.  It is not recommended 
//that a plug-in handles these kinds of parameters for anything other than 
//informational use. 
//
//Locale parameters return WSMAN_DATA_TEXT, which is owned internally, 
//so you don't need to delete the text buffers.
// -----------------------------------------------------------------------------
//

#define WSMAN_PLUGIN_PARAMS_MAX_ENVELOPE_SIZE 1
#define WSMAN_PLUGIN_PARAMS_TIMEOUT 2
#define WSMAN_PLUGIN_PARAMS_REMAINING_RESULT_SIZE 3
#define WSMAN_PLUGIN_PARAMS_LARGEST_RESULT_SIZE 4
#define WSMAN_PLUGIN_PARAMS_GET_REQUESTED_LOCALE 5 /* Returns WSMAN_DATA_TEXT */
#define WSMAN_PLUGIN_PARAMS_GET_REQUESTED_DATA_LOCALE 6 /* Returns WSMAN_DATA_TEXT */

DWORD WINAPI WSManPluginGetOperationParameters ( 
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __out WSMAN_DATA *data
    );

//
// -----------------------------------------------------------------------------
// This API is used release memory that is held for the purpose of populating
// the WSMAN_PLUGIN_REQUEST that is passed into operation plug-in entry points.
// This API can be called any time between a plug-in entry point is called and
// the entry point calling WSManPluginOperationComplete.  This API does not need
// to be called.  Not calling it will result in all memory being freed up when 
// WSManPluginOperationComplete is called.  Calling this method can result in
// significant amounts of memory to be freed up.  After calling this API
// the plug-in must not access any member variables from within the 
// WSMAN_PLUGIN_REQUEST structure.
// A good use of this API is in the following situation:
// A plug-in implements the Shell infrastructure.  The WSMAN_PLUGIN_SHELL 
// entry point is called and that method calls WSManPluginReportContext.
// No other information from the shell WSMAN_PLUGIN_REQUEST is needed from this 
// point on and because WSManPluginOperationComplete is not called for 
// potentially a long time in the future, calling WSManPluginFreeRequestDetails
// can potentially free a lot of resources.  The command and receive entry 
// points are also good categories as they are called once, but the plugin may
// not call the operation complete method for some time.  
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManPluginFreeRequestDetails(__in WSMAN_PLUGIN_REQUEST *requestDetails);

//
// -----------------------------------------------------------------------------
// Plug-in DLL Entry points.  A plug-in needs to have their catalog registered
// with the WSMan service and it contains the names of the plug-in DLL entry 
// points.  The entry points themselves need to conform to these prototype
// definitions
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// Each plug-in needs to support the Startup callback.  A plug-in may be 
// initialized more than once within the same process, but only once per 
// applicationIdentification.
// -----------------------------------------------------------------------------
//
typedef DWORD (WINAPI *WSMAN_PLUGIN_STARTUP)(
    __in DWORD flags,
    __in PCWSTR applicationIdentification,
    __in_opt PCWSTR extraInfo,
    __out PVOID *pluginContext
    );

//
// -----------------------------------------------------------------------------
// Each plug-in needs to support the Shutdown callback.  Each successful call 
// to Startup will result in a call to Shutdown before the DLL is unloaded.
// It is important to make sure the plug-in tracks the number of times the 
// Startup entry point is called so the plug-in is not shutdown prematurely.
// -----------------------------------------------------------------------------
//
#define WSMAN_PLUGIN_SHUTDOWN_SYSTEM  1
#define WSMAN_PLUGIN_SHUTDOWN_SERVICE 2
#define WSMAN_PLUGIN_SHUTDOWN_IISHOST 3

typedef DWORD (WINAPI *WSMAN_PLUGIN_SHUTDOWN)(
    __in_opt PVOID pluginContext,
    __in DWORD flags,
    __in DWORD reason
    );

//
// -----------------------------------------------------------------------------
// A plug-in that supports the Shell operations needs to implement this callback
// to allow commands to be created and to allow data to be streamed into either
// a shell or command.  The plug-in must call WSManPluginReportContext to 
// report the shell context.  Once the shell is completed or when it is closed
// via the operationClosed boolean value or operationClosedHandle in the 
// requestDetails the plug-in needs to call WSManPluginOperationComplete.
// The shell is active until this time.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI *WSMAN_PLUGIN_SHELL)(
    __in PVOID pluginContext,   //Relates to context returned from WSMAN_PLUGIN_STARTUP
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in_opt WSMAN_SHELL_STARTUP_INFO *startupInfo,
    __in_opt WSMAN_DATA *inboundShellInformation
    );

//
// -----------------------------------------------------------------------------
// A plug-in that supports the Shell operations and needs to create commands
// that are associated with the shell needs to implement this callback.
// The plug-in must call WSManPluginReportContext to 
// report the command context.  Once the command is completed or when it is closed
// via the operationClosed boolean value or operationClosedHandle in the 
// requestDetails the plug-in needs to call WSManPluginOperationComplete.
// The command is active until this time.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI *WSMAN_PLUGIN_COMMAND)(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in PVOID shellContext,
    __in PCWSTR commandLine,
    __in_opt WSMAN_COMMAND_ARG_SET *arguments
    );

//
// -----------------------------------------------------------------------------
// A plug-in receives an inbound data stream to either the shell or command
// via this callback.  Each piece of data causes the callback to be called once.
// For each piece of data the plug-in calls WSManPluginOperationComplete to 
// acknowledge receipt and to allow the next piece of data to be delivered.
// -----------------------------------------------------------------------------
//
#define WSMAN_FLAG_SEND_NO_MORE_DATA 1

typedef VOID (WINAPI *WSMAN_PLUGIN_SEND)(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in PVOID shellContext,
    __in_opt PVOID commandContext,
    __in PCWSTR stream,
    __in WSMAN_DATA *inboundData
    );

//
// -----------------------------------------------------------------------------
// A plug-in sends an outbound data stream from either the shell or command
// via this callback.  This API is called when an inbound request from a client
// is received.  This callback may be called against the shell and/or command
// based on the client request.  Each piece of data that needs to be sent back
// to the client is done so through the WSManPluginReceiveResult API.  Once 
// all data has been send, when the stream is terminated via some internal means,
// or if the receive call is cancelled through the operationClosed boolean 
// value or operationClosedHandle, the plug-in needs to call 
// WSManPluginOperationComplete.  The operation is marked as active until this 
// time.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI *WSMAN_PLUGIN_RECEIVE)(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in PVOID shellContext,
    __in_opt PVOID commandContext,
    __in_opt WSMAN_STREAM_ID_SET *streamSet
    ); 

//
// -----------------------------------------------------------------------------
// A plug-in receives an inbound signal to either the shell or command
// via this callback.  Each signal causes the callback to be called once.
// For each call the plug-in calls WSManPluginOperationComplete to 
// acknowledge receipt and to allow the next signal to be received.
// A signal can cause the shell or command to be terminated, so the result
// of this callback may be many completion calls for the Signal, Receive, Command
// and Shell operations.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI *WSMAN_PLUGIN_SIGNAL)(
    __in WSMAN_PLUGIN_REQUEST *requestDetails,
    __in DWORD flags,
    __in PVOID shellContext,
    __in_opt PVOID commandContext,
    __in PCWSTR code
    );


//
// -----------------------------------------------------------------------------
// Authorization Plug-in Structures
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// WSMAN_AUTHZ_QUOTA
// Any of the maxAllowed entries can be set to MAX_DWORD to mark quota as 
// unlimited.  If maxAllowedOperationsPerTimeslot is MAX_DWORD the timeslotSize
// is ignored.
// -----------------------------------------------------------------------------
//
typedef struct _WSMAN_AUTHZ_QUOTA
{
    DWORD maxAllowedConcurrentShells;
    DWORD maxAllowedConcurrentOperations;
    DWORD timeslotSize;
    DWORD maxAllowedOperationsPerTimeslot; 
} WSMAN_AUTHZ_QUOTA;

//
// -----------------------------------------------------------------------------
// Authorization Plug-in entry points
// -----------------------------------------------------------------------------
//

//
// -----------------------------------------------------------------------------
// WSMAN_PLUGIN_AUTHORIZE_USER
// Plug-in needs to have a DLL export of WSManPluginAuthzUser to handle this
// request.  When a user issues a request and has not made a request in
// some configurable time this entry point is called to determin if the 
// user is allowed to carry out any request at all.  The plug-in must call
// WSManPluginAuthzUserComplete to report either the user is not authorized
// with ERROR_ACCESS_DENIED or for successful authorization NO_ERROR.
// ERROR_WSMAN_REDIRECT_REQUIRED should be reported if a HTTP redirect is
// required for this user, in which case the new HTTP URI should be recorded
// in the extendedErrorInformation.  All other errors are report a failure
// to the client but no specific information is reported.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI * WSMAN_PLUGIN_AUTHORIZE_USER)(
    __in PVOID pluginContext,
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags
    );

//
// -----------------------------------------------------------------------------
// WSMAN_PLUGIN_AUTHORIZE_USER
// Plug-in needs to have a DLL export of WSManPluginAuthzOperation to handle this
// request.  The plug-in must call WSManPluginAuthzUserComplete to report either 
// the user is not authorized with ERROR_ACCESS_DENIED or for successful 
// authorization NO_ERROR.  All other errors are reported as a failure
// to the client as a SOAP fault with information given in the 
// extendedErrorInformation parameter.
// -----------------------------------------------------------------------------
//
typedef VOID (WINAPI * WSMAN_PLUGIN_AUTHORIZE_OPERATION)(
    __in PVOID pluginContext,
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags,
    __in DWORD operation,
    __in PCWSTR action,
    __in PCWSTR resourceUri
    );

typedef VOID (WINAPI * WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA)(
    __in PVOID pluginContext,
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags
    );

typedef VOID (WINAPI * WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT)(
    __in PVOID userAuthorizationContext
    );

//
// -----------------------------------------------------------------------------
// Authorization Plug-in Callback methods
// -----------------------------------------------------------------------------
//
DWORD WINAPI WSManPluginAuthzUserComplete ( 
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags,
    __in_opt PVOID userAuthorizationContext,
    __in_opt HANDLE impersonationToken,
    __in BOOL userIsAdministrator,
    __in DWORD errorCode,
    __in_opt PCWSTR extendedErrorInformation
    );

DWORD WINAPI WSManPluginAuthzOperationComplete ( 
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags,
    __in_opt PVOID userAuthorizationContext,
    __in DWORD errorCode,
    __in_opt PCWSTR extendedErrorInformation
    );

DWORD WINAPI WSManPluginAuthzQueryQuotaComplete ( 
    __in WSMAN_SENDER_DETAILS *senderDetails,
    __in DWORD flags,
    __in_opt WSMAN_AUTHZ_QUOTA *quota,
    __in DWORD errorCode,
    __in_opt PCWSTR extendedErrorInformation
    );



#ifdef __cplusplus
} // end of extern C 
#endif   // __cplusplus

#endif // _WSMAN_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WSPiApi.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:
    wspiapi.h

Abstract:
    The file contains protocol independent API functions.

Revision History:
    Wed Jul 12 10:50:31 2000, Created

--*/

#ifndef _WSPIAPI_H_
#define _WSPIAPI_H_

#pragma once

#if (NTDDI_VERSION >= NTDDI_WIN2K)

#include <stdio.h>              // sprintf()
#include <stdlib.h>             // calloc(), strtoul()
#include <malloc.h>             // calloc()
#include <string.h>             // strlen(), strcmp(), strstr()

#if defined(__GOT_SECURE_LIB__) && __GOT_SECURE_LIB__ >= 200402L

#define _WSPIAPI_STRCPY_S strcpy_s
#define _WSPIAPI_STRCAT_S strcat_s
#define _WSPIAPI_STRNCPY_S strncpy_s
#define _WSPIAPI_SPRINTF_S_1 sprintf_s

#else

#define _WSPIAPI_STRCPY_S(_Dst, _Size, _Src) strcpy((_Dst), (_Src))
#define _WSPIAPI_STRCAT_S(_Dst, _Size, _Src) strcat((_Dst), (_Src))
#define _WSPIAPI_STRNCPY_S(_Dst, _Size, _Src, _Count) strncpy((_Dst), (_Src), (_Count)); (_Dst)[(_Size) - 1] = 0
#define _WSPIAPI_SPRINTF_S_1(_Dst, _Size, _Format, _Arg1) sprintf((_Dst), (_Format), (_Arg1))

#endif // defined(__GOT_SECURE_LIB__) && __GOT_SECURE_LIB__ >= 200402L

#if !defined(_WSPIAPI_COUNTOF)
#if !defined(__cplusplus)
#define _WSPIAPI_COUNTOF(_Array) (sizeof(_Array) / sizeof(_Array[0]))
#else
template <typename __CountofType, size_t _N>
char (&__wspiapi_countof_helper(__CountofType (&_Array)[_N]))[_N];
#define _WSPIAPI_COUNTOF(_Array) sizeof(__wspiapi_countof_helper(_Array))
#endif
#endif

#define WspiapiMalloc(tSize)    calloc(1, (tSize))
#define WspiapiFree(p)          free(p)
#define WspiapiSwap(a, b, c)    { (c) = (a); (a) = (b); (b) = (c); }
#define getaddrinfo             WspiapiGetAddrInfo
#define getnameinfo             WspiapiGetNameInfo
#define freeaddrinfo            WspiapiFreeAddrInfo

//
// These function pointers are also within the #if (NTDDI_VERSION >= WIN2K)
// because they are used by the other functions defined in this file available
// only on win2k and above.
//
typedef int (WINAPI *WSPIAPI_PGETADDRINFO) (
    __in  const char                      *nodename,
    __in  const char                      *servname,
    __in  const struct addrinfo           *hints,
    __out struct addrinfo                 **res);

typedef int (WINAPI *WSPIAPI_PGETNAMEINFO) (
    __in_bcount(salen)  const struct sockaddr    *sa,
    __in  socklen_t                              salen,
    __out_bcount(hostlen) char                   *host,
    __in  size_t                                 hostlen,
    __out_bcount(servlen) char                   *serv,
    __in  size_t                                 servlen,
    __in  int                                    flags);

typedef void (WINAPI *WSPIAPI_PFREEADDRINFO) (
    __in  struct addrinfo                 *ai);



#ifdef __cplusplus
extern "C" {
#endif
    
////////////////////////////////////////////////////////////
// v4 only versions of getaddrinfo and friends.
// NOTE: gai_strerror is inlined in ws2tcpip.h
////////////////////////////////////////////////////////////

_inline    
char *
WINAPI
WspiapiStrdup (
        __in  const char *                    pszString)
/*++

Routine Description
    allocates enough storage via calloc() for a copy of the string,
    copies the string into the new memory, and returns a pointer to it.

Arguments
    pszString       string to copy into new memory

Return Value
    a pointer to the newly allocated storage with the string in it.
    NULL if enough memory could not be allocated, or string was NULL.

--*/    
{
    char    *pszMemory;
    size_t  cchMemory;

    if (!pszString)
        return(NULL);

    cchMemory = strlen(pszString) + 1;
    pszMemory = (char *) WspiapiMalloc(cchMemory);
    if (!pszMemory)
        return(NULL);

    _WSPIAPI_STRCPY_S(pszMemory, cchMemory, pszString);
    return pszMemory;
}

    
    
__inline
BOOL
WINAPI
WspiapiParseV4Address (
    __in  const char *                    pszAddress,
    __out PDWORD                          pdwAddress)
/*++

Routine Description
    get the IPv4 address (in network byte order) from its string
    representation.  the syntax should be a.b.c.d.
    
Arguments
    pszArgument         string representation of the IPv4 address
    ptAddress           pointer to the resulting IPv4 address

Return Value
    Returns FALSE if there is an error, TRUE for success.
    
--*/
{
    DWORD       dwAddress   = 0;
    const char  *pcNext     = NULL;
    int         iCount      = 0;

    // ensure there are 3 '.' (periods)
    for (pcNext = pszAddress; *pcNext != '\0'; pcNext++)
        if (*pcNext == '.')
            iCount++;
    if (iCount != 3)
        return FALSE;

    // return an error if dwAddress is INADDR_NONE (255.255.255.255)
    // since this is never a valid argument to getaddrinfo.
    dwAddress = inet_addr(pszAddress);
    if (dwAddress == INADDR_NONE)
        return FALSE;

    *pdwAddress = dwAddress;
    return TRUE;
}



__inline
struct addrinfo *
WINAPI
WspiapiNewAddrInfo (
    __in  int                             iSocketType,
    __in  int                             iProtocol,
    __in  WORD                            wPort,
    __in  DWORD                           dwAddress)
/*++

Routine Description
    allocate an addrinfo structure and populate fields.
    IPv4 specific internal function, not exported.
    
Arguments
    iSocketType         SOCK_*.  can be wildcarded (zero).
    iProtocol           IPPROTO_*.  can be wildcarded (zero).
    wPort               port number of service (in network order).
    dwAddress           IPv4 address (in network order).
    
Return Value
    returns an addrinfo struct, or NULL if out of memory.

--*/    
{
    struct addrinfo     *ptNew;
    struct sockaddr_in  *ptAddress;

    // allocate a new addrinfo structure.
    ptNew       =
        (struct addrinfo *) WspiapiMalloc(sizeof(struct addrinfo));
    if (!ptNew)
        return NULL;

    ptAddress   =
        (struct sockaddr_in *) WspiapiMalloc(sizeof(struct sockaddr_in));
    if (!ptAddress)
    {
        WspiapiFree(ptNew);
        return NULL;
    }
    ptAddress->sin_family       = AF_INET;
    ptAddress->sin_port         = wPort;
    ptAddress->sin_addr.s_addr  = dwAddress;
    
    // fill in the fields...
    ptNew->ai_family            = PF_INET;
    ptNew->ai_socktype          = iSocketType;
    ptNew->ai_protocol          = iProtocol;
    ptNew->ai_addrlen           = sizeof(struct sockaddr_in);
    ptNew->ai_addr              = (struct sockaddr *) ptAddress;

    return ptNew;
}



__inline
int
WINAPI
WspiapiQueryDNS(
    __in  const char                      *pszNodeName,
    __in  int                             iSocketType,
    __in  int                             iProtocol,  
    __in  WORD                            wPort,      
    __out char                            pszAlias[NI_MAXHOST],
    __deref_out struct addrinfo           **pptResult)
/*++

Routine Description
    helper routine for WspiapiLookupNode.
    performs name resolution by querying the DNS for A records.
    *pptResult would need to be freed if an error is returned.
    
Arguments
    pszNodeName         name of node to resolve.
    iSocketType         SOCK_*.  can be wildcarded (zero).
    iProtocol           IPPROTO_*.  can be wildcarded (zero).
    wPort               port number of service (in network order).
    pszAlias            where to return the alias.  must be of size NI_MAXHOST.
    pptResult           where to return the result.
    
Return Value
    Returns 0 on success, an EAI_* style error value otherwise.

--*/    
{
    struct addrinfo **pptNext   = pptResult;
    struct hostent  *ptHost     = NULL;
    char            **ppAddresses;

    *pptNext    = NULL;
    pszAlias[0] = '\0';

    ptHost = gethostbyname(pszNodeName);
    if (ptHost)
    {
        if ((ptHost->h_addrtype == AF_INET)     &&
            (ptHost->h_length   == sizeof(struct in_addr)))
        {
            for (ppAddresses    = ptHost->h_addr_list;
                 *ppAddresses   != NULL;
                 ppAddresses++)
            {
                // create an addrinfo structure...
                *pptNext = WspiapiNewAddrInfo(
                    iSocketType,
                    iProtocol,
                    wPort,
                    ((struct in_addr *) *ppAddresses)->s_addr);
                if (!*pptNext)
                    return EAI_MEMORY;

                pptNext = &((*pptNext)->ai_next);
            }
        }

        // pick up the canonical name.
        _WSPIAPI_STRNCPY_S(pszAlias, NI_MAXHOST, ptHost->h_name, NI_MAXHOST - 1);
        
        return 0;
    }
    
    switch (WSAGetLastError())
    {
        case WSAHOST_NOT_FOUND: return EAI_NONAME;
        case WSATRY_AGAIN:      return EAI_AGAIN;
        case WSANO_RECOVERY:    return EAI_FAIL;
        case WSANO_DATA:        return EAI_NODATA;
        default:                return EAI_NONAME;
    }
}



__inline
int
WINAPI
WspiapiLookupNode(
    __in  const char                      *pszNodeName,
    __in  int                             iSocketType,
    __in  int                             iProtocol,  
    __in  WORD                            wPort,      
    __in  BOOL                            bAI_CANONNAME,
    __deref_out struct addrinfo           **pptResult)
/*++

Routine Description
    resolve a nodename and return a list of addrinfo structures.
    IPv4 specific internal function, not exported.
    *pptResult would need to be freed if an error is returned.
    
    NOTE: if bAI_CANONNAME is true, the canonical name should be
          returned in the first addrinfo structure.
    
Arguments
    pszNodeName         name of node to resolve.
    iSocketType         SOCK_*.  can be wildcarded (zero).
    iProtocol           IPPROTO_*.  can be wildcarded (zero).
    wPort               port number of service (in network order).
    bAI_CANONNAME       whether the AI_CANONNAME flag is set.
    pptResult           where to return result.
    
Return Value
    Returns 0 on success, an EAI_* style error value otherwise.

--*/
{
    int     iError              = 0;
    int     iAliasCount         = 0;

    char    szFQDN1[NI_MAXHOST] = "";
    char    szFQDN2[NI_MAXHOST] = "";
    char    *pszName            = szFQDN1;
    char    *pszAlias           = szFQDN2;
    char    *pszScratch         = NULL;
    _WSPIAPI_STRNCPY_S(pszName, NI_MAXHOST, pszNodeName, NI_MAXHOST - 1);
    
    for (;;)
    {
        iError = WspiapiQueryDNS(pszNodeName,
                                 iSocketType,
                                 iProtocol,
                                 wPort,
                                 pszAlias,
                                 pptResult);
        if (iError)
            break;

        // if we found addresses, then we are done.
        if (*pptResult)
            break;

        // stop infinite loops due to DNS misconfiguration.  there appears
        // to be no particular recommended limit in RFCs 1034 and 1035.
        if ((!strlen(pszAlias))             ||
            (!strcmp(pszName, pszAlias))    ||
            (++iAliasCount == 16))
        {
            iError = EAI_FAIL;
            break;
        }

        // there was a new CNAME, look again.
        WspiapiSwap(pszName, pszAlias, pszScratch);
    }

    if (!iError && bAI_CANONNAME)
    {
        (*pptResult)->ai_canonname = WspiapiStrdup(pszAlias);
        if (!(*pptResult)->ai_canonname)
            iError = EAI_MEMORY;
    }

    return iError;
}



__inline
int
WINAPI
WspiapiClone (
    __in  WORD                            wPort,      
    __in  struct addrinfo                 *ptResult)
/*++

Routine Description
    clone every addrinfo structure in ptResult for the UDP service.
    ptResult would need to be freed if an error is returned.
    
Arguments
    wPort               port number of UDP service.
    ptResult            list of addrinfo structures, each
                        of whose node needs to be cloned.

Return Value
    Returns 0 on success, an EAI_MEMORY on allocation failure.

--*/
{
    struct addrinfo *ptNext = NULL;
    struct addrinfo *ptNew  = NULL;

    for (ptNext = ptResult; ptNext != NULL; )
    {
        // create an addrinfo structure...
        ptNew = WspiapiNewAddrInfo(
            SOCK_DGRAM,
            ptNext->ai_protocol,
            wPort,
            ((struct sockaddr_in *) ptNext->ai_addr)->sin_addr.s_addr);
        if (!ptNew)
            break;

        // link the cloned addrinfo
        ptNew->ai_next  = ptNext->ai_next;
        ptNext->ai_next = ptNew;
        ptNext          = ptNew->ai_next;
    }

    if (ptNext != NULL)
        return EAI_MEMORY;
    
    return 0;
}



__inline
void
WINAPI
WspiapiLegacyFreeAddrInfo (
    __in  struct addrinfo                 *ptHead)
/*++

Routine Description
    Free an addrinfo structure (or chain of structures).
    As specified in RFC 2553, Section 6.4.
    
Arguments
    ptHead              structure (chain) to free
    
--*/    
{
    struct addrinfo *ptNext;    // next strcture to free

    for (ptNext = ptHead; ptNext != NULL; ptNext = ptHead)
    {
        if (ptNext->ai_canonname)
            WspiapiFree(ptNext->ai_canonname);
        
        if (ptNext->ai_addr)
            WspiapiFree(ptNext->ai_addr);

        ptHead = ptNext->ai_next;
        WspiapiFree(ptNext);
    }
}



__inline
int
WINAPI
WspiapiLegacyGetAddrInfo(
    __in const char                       *pszNodeName,
    __in const char                       *pszServiceName,
    __in const struct addrinfo            *ptHints,
    __deref_out struct addrinfo           **pptResult)
/*++

Routine Description
    Protocol-independent name-to-address translation.
    As specified in RFC 2553, Section 6.4.
    This is the hacked version that only supports IPv4.
    
Arguments
    pszNodeName         node name to lookup.
    pszServiceName      service name to lookup.
    ptHints             hints about how to process request.
    pptResult           where to return result.
    
Return Value
    returns zero if successful, an EAI_* error code if not.

--*/    
{
    int                 iError      = 0;
    int                 iFlags      = 0;
    int                 iFamily     = PF_UNSPEC;
    int                 iSocketType = 0;
    int                 iProtocol   = 0;
    WORD                wPort       = 0;
    DWORD               dwAddress   = 0;

    struct servent      *ptService  = NULL;
    char                *pc         = NULL;
    BOOL                bClone      = FALSE;
    WORD                wTcpPort    = 0;
    WORD                wUdpPort    = 0;
    
    
    // initialize pptResult with default return value.
    *pptResult  = NULL;


    ////////////////////////////////////////
    // validate arguments...
    //
    
    // both the node name and the service name can't be NULL.
    if ((!pszNodeName) && (!pszServiceName))
        return EAI_NONAME;

    // validate hints.
    if (ptHints)
    {
        // all members other than ai_flags, ai_family, ai_socktype
        // and ai_protocol must be zero or a null pointer.
        if ((ptHints->ai_addrlen    != 0)       ||
            (ptHints->ai_canonname  != NULL)    ||
            (ptHints->ai_addr       != NULL)    ||
            (ptHints->ai_next       != NULL))
        {
            return EAI_FAIL;
        }
        
        // the spec has the "bad flags" error code, so presumably we
        // should check something here.  insisting that there aren't
        // any unspecified flags set would break forward compatibility,
        // however.  so we just check for non-sensical combinations.
        //
        // we cannot come up with a canonical name given a null node name.
        iFlags      = ptHints->ai_flags;
        if ((iFlags & AI_CANONNAME) && !pszNodeName)
            return EAI_BADFLAGS;

        // we only support a limited number of protocol families.
        iFamily     = ptHints->ai_family;
        if ((iFamily != PF_UNSPEC) && (iFamily != PF_INET))
            return EAI_FAMILY;

        // we only support only these socket types.
        iSocketType = ptHints->ai_socktype;
        if ((iSocketType != 0)                  &&
            (iSocketType != SOCK_STREAM)        &&
            (iSocketType != SOCK_DGRAM)         &&
            (iSocketType != SOCK_RAW))
            return EAI_SOCKTYPE;

        // REVIEW: What if ai_socktype and ai_protocol are at odds?
        iProtocol   = ptHints->ai_protocol;
    }


    ////////////////////////////////////////
    // do service lookup...

    if (pszServiceName)
    {
        wPort = (WORD) strtoul(pszServiceName, &pc, 10);
        if (*pc == '\0')        // numeric port string
        {
            wPort = wTcpPort = wUdpPort = htons(wPort);
            if (iSocketType == 0)
            {
                bClone      = TRUE;
                iSocketType = SOCK_STREAM;
            }
        }
        else                    // non numeric port string
        {
            if ((iSocketType == 0) || (iSocketType == SOCK_DGRAM))
            {
                ptService = getservbyname(pszServiceName, "udp");
                if (ptService)
                    wPort = wUdpPort = ptService->s_port;
            }

            if ((iSocketType == 0) || (iSocketType == SOCK_STREAM))
            {
                ptService = getservbyname(pszServiceName, "tcp");
                if (ptService)
                    wPort = wTcpPort = ptService->s_port;
            }
            
            // assumes 0 is an invalid service port...
            if (wPort == 0)     // no service exists
                return (iSocketType ? EAI_SERVICE : EAI_NONAME);

            if (iSocketType == 0)
            {
                // if both tcp and udp, process tcp now & clone udp later.
                iSocketType = (wTcpPort) ? SOCK_STREAM : SOCK_DGRAM;
                bClone      = (wTcpPort && wUdpPort); 
            }
        }
    }
    


    ////////////////////////////////////////
    // do node name lookup...

    // if we weren't given a node name,
    // return the wildcard or loopback address (depending on AI_PASSIVE).
    //
    // if we have a numeric host address string,
    // return the binary address.
    //
    if ((!pszNodeName) || (WspiapiParseV4Address(pszNodeName, &dwAddress)))
    {
        if (!pszNodeName)
        {
            dwAddress = htonl((iFlags & AI_PASSIVE)
                              ? INADDR_ANY
                              : INADDR_LOOPBACK);
        }
        
        // create an addrinfo structure...
        *pptResult =
            WspiapiNewAddrInfo(iSocketType, iProtocol, wPort, dwAddress);
        if (!(*pptResult))
            iError = EAI_MEMORY;
        
        if (!iError && pszNodeName)
        {
            // implementation specific behavior: set AI_NUMERICHOST
            // to indicate that we got a numeric host address string.
            (*pptResult)->ai_flags |= AI_NUMERICHOST;
            
            // return the numeric address string as the canonical name
            if (iFlags & AI_CANONNAME)
            {
                (*pptResult)->ai_canonname =
                    WspiapiStrdup(inet_ntoa(*((struct in_addr *) &dwAddress)));
                if (!(*pptResult)->ai_canonname)        
                    iError = EAI_MEMORY;
            }
        }
    }


    // if we do not have a numeric host address string and
    // AI_NUMERICHOST flag is set, return an error!
    else if (iFlags & AI_NUMERICHOST)
    {
        iError = EAI_NONAME;
    }
    

    // since we have a non-numeric node name,
    // we have to do a regular node name lookup.
    else
    {
        iError = WspiapiLookupNode(pszNodeName,
                                   iSocketType,
                                   iProtocol,
                                   wPort,
                                   (iFlags & AI_CANONNAME),
                                   pptResult);
    }

    if (!iError && bClone)
    {
        iError = WspiapiClone(wUdpPort, *pptResult);
    }

    if (iError)
    {
        WspiapiLegacyFreeAddrInfo(*pptResult);
        *pptResult  = NULL;        
    }

    return (iError);
}



__inline
int
WINAPI
WspiapiLegacyGetNameInfo(
    __in_bcount(tSocketLength) const struct sockaddr        *ptSocketAddress,
    __in                                    socklen_t       tSocketLength,
    __out_bcount(tNodeLength)               char            *pszNodeName,
    __in                                    size_t          tNodeLength,
    __out_bcount(tServiceLength)            char            *pszServiceName,
    __in                                    size_t          tServiceLength,
    __in                                    int             iFlags)
/*++

Routine Description
    protocol-independent address-to-name translation.
    as specified in RFC 2553, Section 6.5.
    this is the hacked version that only supports IPv4.
    
Arguments
    ptSocketAddress     socket address to translate.
    tSocketLength       length of above socket address.
    pszNodeName         where to return the node name.
    tNodeLength         size of above buffer.
    pszServiceName      where to return the service name.
    tServiceLength      size of above buffer.
    iFlags              flags of type NI_*.
    
Return Value
    returns zero if successful, an EAI_* error code if not.

--*/    
{
    struct servent  *ptService;
    WORD            wPort;    
    char            szBuffer[]  = "65535";
    char            *pszService = szBuffer;

    struct hostent  *ptHost;
    struct in_addr  tAddress;
    char            *pszNode    = NULL;
    char            *pc         = NULL;
    

    // sanity check ptSocketAddress and tSocketLength.
    if ((!ptSocketAddress) || (tSocketLength < sizeof(struct sockaddr)))
        return EAI_FAIL;
    
    if (ptSocketAddress->sa_family != AF_INET)
        return EAI_FAMILY;

    if (tSocketLength < sizeof(struct sockaddr_in))
        return EAI_FAIL;
    
    if (!(pszNodeName && tNodeLength) &&
        !(pszServiceName && tServiceLength))
    {
        return EAI_NONAME;    
    }

    // the draft has the "bad flags" error code, so presumably we
    // should check something here.  insisting that there aren't
    // any unspecified flags set would break forward compatibility,
    // however.  so we just check for non-sensical combinations.
    if ((iFlags & NI_NUMERICHOST) && (iFlags & NI_NAMEREQD))
    {                                                                       
        return EAI_BADFLAGS;
    }
        
    // translate the port to a service name (if requested).
    if (pszServiceName && tServiceLength)
    {
        wPort = ((struct sockaddr_in *) ptSocketAddress)->sin_port;
        
        if (iFlags & NI_NUMERICSERV)
        {
            // return numeric form of the address.
            _WSPIAPI_SPRINTF_S_1(szBuffer, _WSPIAPI_COUNTOF(szBuffer), "%u", ntohs(wPort));
        }
        else
        {
            // return service name corresponding to port.
            ptService = getservbyport(wPort,
                                      (iFlags & NI_DGRAM) ? "udp" : NULL);
            if (ptService && ptService->s_name)
            {
                // lookup successful.
                pszService = ptService->s_name;
            }
            else
            {
                // DRAFT: return numeric form of the port!
                _WSPIAPI_SPRINTF_S_1(szBuffer, _WSPIAPI_COUNTOF(szBuffer), "%u", ntohs(wPort));
            }
        }
        
        
        if (tServiceLength > strlen(pszService))
            _WSPIAPI_STRCPY_S(pszServiceName, tServiceLength, pszService);
        else
            return EAI_FAIL;
    }

    
    // translate the address to a node name (if requested).
    if (pszNodeName && tNodeLength)
    {    
        // this is the IPv4-only version, so we have an IPv4 address.
        tAddress = ((struct sockaddr_in *) ptSocketAddress)->sin_addr;

        if (iFlags & NI_NUMERICHOST)
        {
            // return numeric form of the address.
            pszNode  = inet_ntoa(tAddress);
        }
        else
        {
            // return node name corresponding to address.
            ptHost = gethostbyaddr((char *) &tAddress,
                                   sizeof(struct in_addr),
                                   AF_INET);
            if (ptHost && ptHost->h_name)
            {
                // DNS lookup successful.
                // stop copying at a "." if NI_NOFQDN is specified.
                pszNode = ptHost->h_name;
                if ((iFlags & NI_NOFQDN) &&
                    ((pc = strchr(pszNode, '.')) != NULL))
                    *pc = '\0';
            }
            else
            {
                // DNS lookup failed.  return numeric form of the address.
                if (iFlags & NI_NAMEREQD)
                {
                    switch (WSAGetLastError())
                    {
                        case WSAHOST_NOT_FOUND: return EAI_NONAME;
                        case WSATRY_AGAIN:      return EAI_AGAIN;
                        case WSANO_RECOVERY:    return EAI_FAIL;
                        default:                return EAI_NONAME;
                    }
                }
                else
                    pszNode  = inet_ntoa(tAddress);
            }
        }

        if (tNodeLength > strlen(pszNode))
            _WSPIAPI_STRCPY_S(pszNodeName, tNodeLength, pszNode);
        else
            return EAI_FAIL;
    }

    return 0;
}



typedef struct 
{
    char const          *pszName;
    FARPROC             pfAddress;
} WSPIAPI_FUNCTION;

#define WSPIAPI_FUNCTION_ARRAY                                  \
{                                                               \
    "getaddrinfo",      (FARPROC) WspiapiLegacyGetAddrInfo,     \
    "getnameinfo",      (FARPROC) WspiapiLegacyGetNameInfo,     \
    "freeaddrinfo",     (FARPROC) WspiapiLegacyFreeAddrInfo,    \
}



__inline
FARPROC
WINAPI
WspiapiLoad(
    __in  WORD                            wFunction)
/*++

Routine Description
    try to locate the address family independent name resolution routines
    (i.e. getaddrinfo, getnameinfo, freeaddrinfo, gai_strerror).
    
Locks
    this function call is not synchronized.  hence the library containing
    the routines might be loaded multiple times.  another option is to
    synchronize through a spin lock using a static local variable and the
    InterlockedExchange operation.  

    
Arguments
    wFunction           ordinal # of the function to get the pointer to
                        0   getaddrinfo
                        1   getnameinfo
                        2   freeaddrinfo
    
Return Value
    address of the library/legacy routine

--*/
{
    HMODULE                 hLibrary        = NULL;

    // these static variables store state across calls, across threads.
    static BOOL             bInitialized    = FALSE;
    static WSPIAPI_FUNCTION rgtGlobal[]     = WSPIAPI_FUNCTION_ARRAY;
    static const int        iNumGlobal      = (sizeof(rgtGlobal) /
                                               sizeof(WSPIAPI_FUNCTION));
    
    // we overwrite rgtGlobal only if all routines exist in library.
    WSPIAPI_FUNCTION        rgtLocal[]      = WSPIAPI_FUNCTION_ARRAY;
    FARPROC                 fScratch        = NULL;
    int                     i               = 0;
    
    
    if (bInitialized)           // WspiapiLoad has already been called once
        return (rgtGlobal[wFunction].pfAddress);

    for (;;)                    // breakout loop
    {
        CHAR SystemDir[MAX_PATH + 1];
        CHAR Path[MAX_PATH + 8];

        if (GetSystemDirectoryA(SystemDir, MAX_PATH) == 0) 
        {
            break;
        }

        // in Whistler and beyond...
        // the routines are present in the WinSock 2 library (ws2_32.dll).
        // printf("Looking in ws2_32 for getaddrinfo...\n");
        _WSPIAPI_STRCPY_S(Path, _WSPIAPI_COUNTOF(Path), SystemDir);
        _WSPIAPI_STRCAT_S(Path, _WSPIAPI_COUNTOF(Path), "\\ws2_32");
        hLibrary = LoadLibraryA(Path);
        if (hLibrary != NULL)
        {
            fScratch = GetProcAddress(hLibrary, "getaddrinfo");
            if (fScratch == NULL)
            {
                FreeLibrary(hLibrary);
                hLibrary = NULL;
            }
        }
        if (hLibrary != NULL)
            break;
        

        // in the IPv6 Technology Preview...        
        // the routines are present in the IPv6 WinSock library (wship6.dll).
        // printf("Looking in wship6 for getaddrinfo...\n");
        _WSPIAPI_STRCPY_S(Path, _WSPIAPI_COUNTOF(Path), SystemDir);
        _WSPIAPI_STRCAT_S(Path, _WSPIAPI_COUNTOF(Path), "\\wship6");
        hLibrary = LoadLibraryA(Path);
        if (hLibrary != NULL)
        {
            fScratch = GetProcAddress(hLibrary, "getaddrinfo");
            if (fScratch == NULL)
            {
                FreeLibrary(hLibrary);
                hLibrary = NULL;
            }
        }

        break;
    }


    if (hLibrary != NULL)
    {
        // use routines from this library...
        // since getaddrinfo is here, we expect all routines to be here,
        // but will fall back to IPv4-only if any of them is missing.
        for (i = 0; i < iNumGlobal; i++)
        {
            rgtLocal[i].pfAddress
                = GetProcAddress(hLibrary, rgtLocal[i].pszName);
            if (rgtLocal[i].pfAddress == NULL)
            {
                FreeLibrary(hLibrary);
                hLibrary = NULL;
                break;
            }
        }

        if (hLibrary != NULL)
        {
            // printf("found!\n");
            for (i = 0; i < iNumGlobal; i++)
                rgtGlobal[i].pfAddress = rgtLocal[i].pfAddress;
        }
    }
    
    bInitialized = TRUE;
    return (rgtGlobal[wFunction].pfAddress);
}



__inline
int
WINAPI
WspiapiGetAddrInfo(
    __in_opt const char                       *nodename,
    __in_opt const char                       *servname,
    __in_opt const struct addrinfo            *hints,
    __deref_out struct addrinfo                 **res)
{
    int                             iError;
    static WSPIAPI_PGETADDRINFO     pfGetAddrInfo   = NULL;
    
    if (!pfGetAddrInfo)
        pfGetAddrInfo   = (WSPIAPI_PGETADDRINFO) WspiapiLoad(0);

    iError = (*pfGetAddrInfo)(nodename, servname, hints, res);
    WSASetLastError(iError);
    return iError;
}



__inline
int
WINAPI
WspiapiGetNameInfo (
    __in_bcount(salen) const struct sockaddr           *sa,
    __in  socklen_t                                    salen,
    __out_bcount(hostlen) char                         *host,
    __in  size_t                                       hostlen,
    __out_bcount(servlen) char                         *serv,
    __in  size_t                                       servlen,
    __in  int                                          flags)
{
    int                             iError;
    static WSPIAPI_PGETNAMEINFO     pfGetNameInfo   = NULL;
    
    if (!pfGetNameInfo)
        pfGetNameInfo   = (WSPIAPI_PGETNAMEINFO) WspiapiLoad(1);

    iError = (*pfGetNameInfo)(sa, salen, host, hostlen, serv, servlen, flags);
    WSASetLastError(iError);
    return iError;
}



__inline
void
WINAPI
WspiapiFreeAddrInfo (
    __in  struct addrinfo                 *ai)
{
    static WSPIAPI_PFREEADDRINFO    pfFreeAddrInfo   = NULL;

    if (!pfFreeAddrInfo)
        pfFreeAddrInfo  = (WSPIAPI_PFREEADDRINFO) WspiapiLoad(2);
    (*pfFreeAddrInfo)(ai);
}

#ifdef  __cplusplus
}
#endif

#endif // if (NTDDI_VERSION >= WIN2K)
#endif // _WSPIAPI_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wtsdefs.h ===
/*********************************************************************
*
* WTSDEFS.H
*
*   Windows Terminal Server Interface Header File
*
*   Copyright (c) 1997-2001 Microsoft Corporation
*
**********************************************************************/

#ifndef _INC_WTSDEFS
#define _INC_WTSDEFS

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*****************************************************************
 *  DEFINES
 ****************************************************************/
 
#define WTS_DOMAIN_LENGTH            255
#define WTS_USERNAME_LENGTH          255
#define WTS_PASSWORD_LENGTH          255
#define WTS_DIRECTORY_LENGTH         256
#define WTS_INITIALPROGRAM_LENGTH    256
#define WTS_PROTOCOL_NAME_LENGTH     8
#define WTS_DRIVER_NAME_LENGTH       8
#define WTS_DEVICE_NAME_LENGTH       19
#define WTS_IMEFILENAME_LENGTH       32
#define WTS_CLIENTNAME_LENGTH        20
#define WTS_CLIENTADDRESS_LENGTH     30
#define WTS_CLIENT_PRODUCT_ID_LENGTH 32
#define WTS_MAX_PROTOCOL_CACHE       4
#define WTS_MAX_CACHE_RESERVED       20
#define WTS_MAX_RESERVED             100
#define WTS_MAX_COUNTERS             100
#define WTS_MAX_DISPLAY_IOCTL_DATA   256

//
// Fields used in the PerformanceFlags property in WTS_CONNECTION_CONFIG
// Setting a flag disables that feature
//
#define WTS_PERF_DISABLE_NOTHING                              0x00000000
#define WTS_PERF_DISABLE_WALLPAPER                            0x00000001
#define WTS_PERF_DISABLE_FULLWINDOWDRAG                       0x00000002
#define WTS_PERF_DISABLE_MENUANIMATIONS                       0x00000004
#define WTS_PERF_DISABLE_THEMING                              0x00000008
#define WTS_PERF_ENABLE_ENHANCED_GRAPHICS                     0x00000010
#define WTS_PERF_DISABLE_CURSOR_SHADOW                        0x00000020
#define WTS_PERF_DISABLE_CURSORSETTINGS                       0x00000040
#define WTS_PERF_ENABLE_FONT_SMOOTHING                        0x00000080
#define WTS_PERF_ENABLE_DESKTOP_COMPOSITION                   0x00000100


/*****************************************************************
 *  STRUCTURES
 ****************************************************************/

typedef BYTE *PBYTE;

// IP address
//
typedef struct _WTS_SOCKADDR {
#ifdef __midl
    USHORT sin_family;
    union switch (unsigned short sin_family) u 
    {
        case 2:         // AF_INET
        struct{
            USHORT sin_port;
            ULONG  in_addr;
            UCHAR  sin_zero[8];
        } ipv4;
        case 23:        // AF_INET6
        struct {
            USHORT sin6_port;
            ULONG  sin6_flowinfo;
            USHORT sin6_addr[8];
            ULONG  sin6_scope_id;
        } ipv6;
    };
#else
    USHORT sin_family;
    union {
        struct{
            USHORT sin_port;
            ULONG  in_addr;
            UCHAR  sin_zero[8];
        } ipv4;
        struct {
            USHORT sin6_port;
            ULONG  sin6_flowinfo;
            USHORT sin6_addr[8];
            ULONG  sin6_scope_id;
        } ipv6;               
    } u;
#endif
} WTS_SOCKADDR, *PWTS_SOCKADDR;

typedef struct _WTS_SMALL_RECT {  
    SHORT Left;  
    SHORT Top;  
    SHORT Right;  
    SHORT Bottom;
} WTS_SMALL_RECT, *PWTS_SMALL_RECT;

// =================================================================
//  Service State Change
// =================================================================
typedef enum {
    WTS_SERVICE_NONE,                   // No service (start/stop) state change
    WTS_SERVICE_START,                  // RCM Service starting
    WTS_SERVICE_STOP                    // RCM Service stopping
} WTS_RCM_SERVICE_STATE;

typedef enum {
    WTS_DRAIN_STATE_NONE,               // No drain state change
    WTS_DRAIN_IN_DRAIN,                 // RCM In drain.
    WTS_DRAIN_NOT_IN_DRAIN              // RCM Out of drain.
} WTS_RCM_DRAIN_STATE;

typedef struct _WTS_SERVICE_STATE {
    WTS_RCM_SERVICE_STATE   RcmServiceState;
    WTS_RCM_DRAIN_STATE     RcmDrainState;
}WTS_SERVICE_STATE, *PWTS_SERVICE_STATE;

typedef struct _WTS_SESSION_ID {
    GUID    SessionUniqueGuid;
    ULONG   SessionId;
}WTS_SESSION_ID, *PWTS_SESSION_ID;

typedef struct _WTS_USER_CREDENTIAL {
    WCHAR   UserName[ WTS_USERNAME_LENGTH + 1 ];
    WCHAR   Password[ WTS_PASSWORD_LENGTH + 1 ];
    WCHAR   Domain[ WTS_DOMAIN_LENGTH + 1 ];
} WTS_USER_CREDENTIAL, *PWTS_USER_CREDENTIAL;


/* -------------------------------------------------------------------
 * Structures used to query connectoin specific data from the protocol
 * ------------------------------------------------------------------*/
typedef struct _WTS_SYSTEMTIME {
    USHORT wYear;
    USHORT wMonth;
    USHORT wDayOfWeek;
    USHORT wDay;
    USHORT wHour;
    USHORT wMinute;
    USHORT wSecond;
    USHORT wMilliseconds;
} WTS_SYSTEMTIME, *PWTS_SYSTEMTIME;

typedef struct _WTS_TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    WTS_SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    WTS_SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} WTS_TIME_ZONE_INFORMATION, *PWTS_TIME_ZONE_INFORMATION;

typedef struct _WTS_CLIENT_DATA {
  
    /* --------------------------------------------------------
     * Properties that will be used by RCM for the session. 
     * These MIGHT be exposed through WTSAPI
     * -------------------------------------------------------*/
     
    // Disable Ctrl-Atl-Del
    BOOLEAN fDisableCtrlAltDel;    
    
    // Detect Double Click
    BOOLEAN fDoubleClickDetect;    
    
    // Enable Windows key
    // Will be sent to win32k
    BOOLEAN fEnableWindowsKey;
         
    // Hide the title bar
    // Will be sent to win32k
    BOOLEAN fHideTitleBar; 
   
    // This will overwrite the fInheritAutoLogon flag 
    // from listener registry
    BOOL fInheritAutoLogon;
    
    // Prompt for password even if autologon set
    // Will be used if fInheritAutoLogon is set
    // and policy not set on the machine
    BOOLEAN fPromptForPassword;
        
    // Client used saved credentials
    BOOLEAN fUsingSavedCreds;
    
    // User credentials
    // Will be used if fInheritAutoLogon is set
    WCHAR Domain[WTS_DOMAIN_LENGTH + 1];   // WTS_DOMAIN_LENGTH + 1
    WCHAR UserName[ WTS_USERNAME_LENGTH + 1 ];
    WCHAR Password[ WTS_PASSWORD_LENGTH + 1 ];

    // Smartcard PIN is used to log in 
    // Will be used if fInheritAutoLogon is set
    BOOLEAN fPasswordIsScPin;
    
    // This will overwrite the fInheritInitialProgram flag 
    // from listener registry
    BOOL fInheritInitialProgram;
    
    // Working directory
    // Will be used if fInheritInitialProgram is set
    WCHAR WorkDirectory[ WTS_DIRECTORY_LENGTH + 1 ];
    
    // Intial Program to start in TS session
    // Will be used if fInheritInitialProgram is set
    WCHAR InitialProgram[ WTS_INITIALPROGRAM_LENGTH + 1 ];
    
    // Maximize the shell
    // Will be used if fInheritInitialProgram is set
    BOOLEAN fMaximizeShell;        
    
    // Security level of encryption
    BYTE EncryptionLevel;
        
    // List of features to disable for perf
    // Will be used to disable specific features
    ULONG PerformanceFlags;

    // Name of the protocol
    // Will be sent to win32k
    WCHAR ProtocolName[ WTS_PROTOCOL_NAME_LENGTH + 1 ];

    // Protocol type
    USHORT ProtocolType;
    
    // This will overwrite the fInheritColorDepth flag 
    // from listener registry
    BOOL fInheritColorDepth;
    
    // Display properties
    // Will be sent to win32k
    USHORT HRes;
    USHORT VRes;
    USHORT ColorDepth;
    WCHAR  DisplayDriverName[ WTS_DRIVER_NAME_LENGTH + 1 ];
    WCHAR  DisplayDeviceName[ WTS_DEVICE_NAME_LENGTH + 1 ];
        
    // Enable Mouse input
    // Will be sent to win32k
    BOOLEAN fMouse;

    // Keyboard information
    // Will be sent to win32k
    ULONG KeyboardLayout;
    ULONG KeyboardType;
    ULONG KeyboardSubType;
    ULONG KeyboardFunctionKey;
    WCHAR imeFileName[ WTS_IMEFILENAME_LENGTH + 1 ];

    // Client's active input locale HKL
    ULONG ActiveInputLocale; 
    
    // Client selected no audio
    BOOLEAN fNoAudioPlayback;
    
    // Client selected leave audio at remote computer
    BOOLEAN fRemoteConsoleAudio;  

    // Name of the audio driver
    // Will be sent to win32k
    WCHAR AudioDriverName[ WTS_DRIVER_NAME_LENGTH + 1 ];

    // Client time zone information
    // Will be sent to win32k
    WTS_TIME_ZONE_INFORMATION ClientTimeZone;
   
    /* ----------------------------------------------------
     * Properties that are not used by RCM but exposed 
     * through WTS API
     * ---------------------------------------------------*/ 
     
    // Client machine name
    WCHAR ClientName[ WTS_CLIENTNAME_LENGTH + 1 ];
    
    // Client computer's unique serial number
    ULONG SerialNumber; 
        
    // Client IP address
    ULONG ClientAddressFamily;
    WCHAR ClientAddress[ WTS_CLIENTADDRESS_LENGTH + 1 ];
    WTS_SOCKADDR ClientSockAddress;
    
    // Client Directory
    WCHAR ClientDirectory[ WTS_DIRECTORY_LENGTH + 1 ];
    
    // Client build number
    ULONG ClientBuildNumber;
    
    // Client software product id
    USHORT ClientProductId;     
    
    // number of output buffers on host
    USHORT OutBufCountHost;
      
    // number of output buffers on client
    USHORT OutBufCountClient;
    
    // length of output buffers in bytes
    USHORT OutBufLength;
    
    // Client Session ID
    ULONG ClientSessionId;
    
    // Client Product ID
    WCHAR ClientDigProductId[ WTS_CLIENT_PRODUCT_ID_LENGTH + 1 ];
    
    // ******* REDIRECTIONS ********//
    // These will be prepopulated with data from policies
    // Changing them will led to policies being overwritten 
    
    // Disable Printer Mapping
    BOOLEAN fDisableCpm;
    
    // Disable Drive Mapping
    BOOLEAN fDisableCdm;
    
    // Disable COM port Mapping
    BOOLEAN fDisableCcm;
    
    // Disable LPT printer redirection
    BOOLEAN fDisableLPT;
    
    // Disable Clipboard redirection
    BOOLEAN fDisableClip;

    // Disable PNP redirection
    BOOLEAN fDisablePNP;
} WTS_CLIENT_DATA, *PWTS_CLIENT_DATA;

typedef struct _WTS_USER_DATA {
  
    /* --------------------------------------------------------
     * Should be filled in with user specific properties.
     * Queried after user has logged in and User GP merged.
     * This will be pre-populated with client data. Hence if user 
     * property doesn't exist for any field, do not change it.
     * -------------------------------------------------------*/
     
    // Corresponding to WorkDirectory in WTS_CLIENT_DATA
    WCHAR WorkDirectory[ WTS_DIRECTORY_LENGTH + 1 ];
    
    // Corresponding to InitialProgram in WTS_CLIENT_DATA
    WCHAR InitialProgram[ WTS_INITIALPROGRAM_LENGTH + 1 ];
    
    // Corresponding to ClientTimeZone in WTS_CLIENT_DATA
    WTS_TIME_ZONE_INFORMATION UserTimeZone;

}WTS_USER_DATA, *PWTS_USER_DATA;

/* -------------------------------------------------------------------
 * Structures used to pass down policy data to the protocol
 * ------------------------------------------------------------------*/
typedef struct _WTS_POLICY_DATA {
    // Disable encryption
    BOOLEAN fDisableEncryption;

    // Disable auto-reconnect
    BOOLEAN fDisableAutoReconnect;

    // Color Depth
    ULONG ColorDepth;

    // Minimum allowed Encryption Level
    BYTE MinEncryptionLevel;
    
    // ******* REDIRECTIONS ********//
    // Disable Printer Mapping
    BOOLEAN fDisableCpm;
    
    // Disable Drive Mapping
    BOOLEAN fDisableCdm;
    
    // Disable COM port Mapping
    BOOLEAN fDisableCcm;
    
    // Disable LPT printer redirection
    BOOLEAN fDisableLPT;
    
    // Disable Clipboard redirection
    BOOLEAN fDisableClip;

    // Disable PNP redirection
    BOOLEAN fDisablePNPRedir;
} WTS_POLICY_DATA, *PWTS_POLICY_DATA;

/* -------------------------------------------------------------------
 * Structures used to query performance data from the protocol using
 * GetProtocolStatus call 
 * -------------------------------------------------------------------*/

// Protocol Cache stats
//
typedef struct _WTS_PROTOCOL_CACHE {
    ULONG CacheReads;
    ULONG CacheHits;
} WTS_PROTOCOL_CACHE, *PWTS_PROTOCOL_CACHE;

// Union of Protocol cache, TShare Cache and Reserved stats
//
#ifdef __midl
typedef [switch_type(DWORD)] union _WTS_CACHE_STATS_UN {
    [case(1)]
        WTS_PROTOCOL_CACHE ProtocolCache[ WTS_MAX_PROTOCOL_CACHE ];  
    [case(2)]
        ULONG TShareCacheStats;
    [case(3)]
        ULONG Reserved[ WTS_MAX_CACHE_RESERVED ];    // Protocol specific Reserved data
} WTS_CACHE_STATS_UN, *PWTS_CACHE_STATS_UN;

// Cache Statistics
//
typedef struct _WTS_CACHE_STATS {
    DWORD Specific;
    [switch_is(Specific)] WTS_CACHE_STATS_UN Data;
    USHORT ProtocolType;        // Protocol Type
    USHORT Length;              // Length of Data
} WTS_CACHE_STATS, *PWTS_CACHE_STATS;
#else
typedef union _WTS_CACHE_STATS_UN {
    WTS_PROTOCOL_CACHE ProtocolCache[ WTS_MAX_PROTOCOL_CACHE ];  
    ULONG TShareCacheStats;
    ULONG Reserved[ WTS_MAX_CACHE_RESERVED ];    // Protocol specific Reserved data
} WTS_CACHE_STATS_UN, *PWTS_CACHE_STATS_UN;

// Cache Statistics
//
typedef struct _WTS_CACHE_STATS {
    DWORD Specific;
    WTS_CACHE_STATS_UN Data;
    USHORT ProtocolType;        // Protocol Type
    USHORT Length;              // Length of Data
} WTS_CACHE_STATS, *PWTS_CACHE_STATS;
#endif

// Protocol Counters Data
//
typedef struct _WTS_PROTOCOL_COUNTERS {
    ULONG WdBytes;              // wd common
    ULONG WdFrames;             // wd common
    ULONG WaitForOutBuf;        // wd common
    ULONG Frames;               // td common
    ULONG Bytes;                // td common
    ULONG CompressedBytes;      // pdcomp
    ULONG CompressFlushes;      // pdcomp
    ULONG Errors;               // pdreli
    ULONG Timeouts;             // pdreli
    ULONG AsyncFramingError;    // pdasync
    ULONG AsyncOverrunError;    // pdasync
    ULONG AsyncOverflowError;   // pdasync
    ULONG AsyncParityError;     // pdasync
    ULONG TdErrors;             // td common
    USHORT ProtocolType;        // Protocol Type
    USHORT Length;              // Length of Reserved
    USHORT Specific;            // Specifies type of Reserved
    ULONG Reserved[ WTS_MAX_RESERVED ];        
} WTS_PROTOCOL_COUNTERS, * PWTS_PROTOCOL_COUNTERS;

// Protocol Status
//
typedef struct _WTS_PROTOCOL_STATUS {
    WTS_PROTOCOL_COUNTERS Output;
    WTS_PROTOCOL_COUNTERS Input;
    WTS_CACHE_STATS Cache;
    ULONG AsyncSignal;                  // MS_CTS_ON, MS_DSR_ON, etc...
    ULONG AsyncSignalMask;              // EV_CTS, EV_DSR, etc...
    LARGE_INTEGER  Counters[ WTS_MAX_COUNTERS ];      
} WTS_PROTOCOL_STATUS, * PWTS_PROTOCOL_STATUS;

// Display IOCTL data
typedef struct _WTS_DISPLAY_IOCTL {
    BYTE  pDisplayIOCtlData[ WTS_MAX_DISPLAY_IOCTL_DATA ];
    ULONG cbDisplayIOCtlData;
} WTS_DISPLAY_IOCTL, * PWTS_DISPLAY_IOCTL;

/* -------------------------------------------------------------------
 * LogonUI Error Redirector Response
 * -------------------------------------------------------------------*/
typedef enum _WTS_LOGON_ERROR_REDIRECTOR_RESPONSE
{
    // Used only as a safe initialization value.
    WTS_LOGON_ERR_INVALID = 0,

    // The call was not handled by the redirector.   
    // The call should be handled normally by LogonUI.
    WTS_LOGON_ERR_NOT_HANDLED,

    // The call was handled by the redirector.
    // LogonUI should paint itself normally.
    WTS_LOGON_ERR_HANDLED_SHOW,

    // The call was handled by the redirector and should not be passed to
    // the next redirector.  LogonUI should not paint the normal error screen.
    // LogonUI will then attempt to gather credentials again.
    WTS_LOGON_ERR_HANDLED_DONT_SHOW,

    // The call was handled by the redirector and should not be passed to
    // the next redirector.  LogonUI should not show itself and should
    // NOT attempt to gather credentials again.
    WTS_LOGON_ERR_HANDLED_DONT_SHOW_START_OVER,

} WTS_LOGON_ERROR_REDIRECTOR_RESPONSE;


/* -------------------------------------------------------------------
 * QueryProperty GUIDs
 * These are the mandatory properties that the protocol must implement.
 * For any other QueryProperty that the protocol doesn't understand,
 * it should return E_NOTIMPL
 * -------------------------------------------------------------------*/

#define WTS_VALUE_TYPE_ULONG        1
#define WTS_VALUE_TYPE_STRING       2
#define WTS_VALUE_TYPE_BINARY       3
#define WTS_VALUE_TYPE_GUID         4

// Basic structure used to query properties.
// This can be used as both input and output parameter
typedef struct __WTS_PROPERTY_VALUE
{
#ifdef __midl
    union switch ( unsigned short Type ) u {
        case WTS_VALUE_TYPE_ULONG:
            ULONG   ulVal;
        case WTS_VALUE_TYPE_STRING:
            struct {
                [range(0, 0x8000)]  ULONG size;
                [string, size_is(size)] WCHAR* pstrVal;
            } strVal;
        case WTS_VALUE_TYPE_BINARY:
            struct {
                [range(0, 0x8000)]  ULONG size;
                [size_is(size)]     char* pbVal;
            } bVal;                
        case WTS_VALUE_TYPE_GUID:
            GUID   guidVal;
        };

#else
    unsigned short Type;
    union {
        ULONG ulVal;
        struct {
            ULONG size;
            WCHAR* pstrVal;
        } strVal;
        struct {
            ULONG size;
            char* pbVal;
        } bVal; 
        GUID guidVal;               
    } u;
#endif
} WTS_PROPERTY_VALUE, *PWTS_PROPERTY_VALUE;

#ifndef __midl

//
// **************** WTS_QUERY_ALLOWED_INITIAL_APP *********************
//
// This is used to query if protocol wants to allow an initial app to run.
// If protocol wants initial app to run, it must implement this property 
// query and return success.
// 
// Input to this query - It passes 3 WTS_PROPERTY_VALUE structures
//          pPropertyEntriesIn[0].Type = WTS_VALUE_TYPE_STRING;
//          pPropertyEntriesIn[0].u.strVal.pstrVal = NAME of the inital app, ex. notepad.exe
//          pPropertyEntriesIn[0].u.strVal.size = Length of the name string
//      
//          pPropertyEntriesIn[1].Type = WTS_VALUE_TYPE_STRING;
//          pPropertyEntriesIn[1].u.strVal.pstrVal = PARAMETERS for the inital app
//          pPropertyEntriesIn[1].u.strVal.size = Length of the parameter string
//      
//          pPropertyEntriesIn[2].Type = WTS_VALUE_TYPE_ULONG;
//          pPropertyEntriesIn[2].u.ulVal = Reserved
//      
// Output to this query - It passes 3 WTS_PROPERTY_VALUE structures. Protocol needs to set it to:
//          pPropertyEntriesOut[0].Type = WTS_VALUE_TYPE_STRING;
//          pPropertyEntriesOut[0].u.strVal.pstrVal = Full command line to execute. Protocol should 
//                                                    append current working dir to the app name and put here
//          pPropertyEntriesOut[0].u.strVal.size = Length of command line
//
//          pPropertyEntriesOut[1].Type = WTS_VALUE_TYPE_STRING;
//          pPropertyEntriesOut[1].u.strVal.pstrVal = PARAMETERS for the inital app
//          pPropertyEntriesOut[1].u.strVal.size = Length of the parameter string
//
//      If protocol want to maintain the initial app and parameters passed in input parameter, 
//      it should just copy them to the corresponding fields (two above) in output paramters
//      
//          pPropertyEntriesOut[2].Type = WTS_VALUE_TYPE_ULONG;
//          pPropertyEntriesOut[2].u.ulVal = 0 indicates don't allow initial app to run, allow otherwise
//
EXTERN_C const __declspec(selectany) GUID WTS_QUERY_ALLOWED_INITIAL_APP = /*C77D1B30-5BE1-4c6b-A0E1-BD6D2E5C9FCC*/
{ 0xc77d1b30, 0x5be1, 0x4c6b, { 0xa0, 0xe1, 0xbd, 0x6d, 0x2e, 0x5c, 0x9f, 0xcc} };

// **************** WTS_QUERY_LOGON_SCREEN_SIZE *********************
//
// This is used by LogonUI to query the size of the logon screen.
// 
// Input to this query - NONE
//      
// Output to this query - It passes 1 WTS_PROPERTY_VALUE structure. Protocol needs to set it to:
//          pPropertyEntriesOut[0].Type = WTS_VALUE_TYPE_ULONG;
//          pPropertyEntriesOut[0].u.strVal.pstrVal = Size of the LogonUI screen.
//
// If protocol doesn't want to keep the default size of the LogonUI screen, it must fail this call with error E_NOTIMPL.
//
EXTERN_C const __declspec(selectany) GUID WTS_QUERY_LOGON_SCREEN_SIZE = /* 8b8e0fe7-0804-4a0e-b279-8660b1df0049 */
{ 0x8b8e0fe7, 0x0804, 0x4a0e, {0xb2, 0x79, 0x86, 0x60, 0xb1, 0xdf, 0x00, 0x49} };

// **************** WTS_QUERY_AUDIOENUM_DLL **************************
//
// This is used by to query Remote audio enumerator DLL name.
// 
// Input to this query - NONE
//      
// Output to this query - 
//          pPropertyEntriesOut[0].Type = WTS_VALUE_TYPE_STRING;
//          pPropertyEntriesOut[0].u.strVal.pstrVal =  Remote audio enumerator DLL name
//          pPropertyEntriesOut[0].u.strVal.size = Length of DLL name
//
//
EXTERN_C const __declspec(selectany) GUID WTS_QUERY_AUDIOENUM_DLL = /* 9bf4fa97-c883-4c2a-80ab-5a39c9af00db */
{ 0x9bf4fa97, 0xc883, 0x4c2a, {0x80, 0xab, 0x5a, 0x39, 0xc9, 0xaf, 0x00, 0xdb} };

// ************************************************************************

// **************** WTS_QUERY_MF_FORMAT_SUPPORT **************************
//
// This is used by Remote Desktop Media Foundation Plugin to query the sink 
// objects to be used for specified media formats.
// 
// Input to this query is a WTS_PROPERTY_VALUE structures containing
//          pPropertyEntriesOut[0].Type = WTS_VALUE_TYPE_BINARY;
//          pPropertyEntriesOut[0].u.bVal.pbVal = TSMF_SUPPORT_DATA_IN structure
//          pPropertyEntriesOut[0].u.bVal.size = Size of TSMF_SUPPORT_DATA_IN structure. 
//               This will vary based on the size of the variable data in the structure.
//      
// Output to this query is a WTS_PROPERTY_VALUE structures containing
//          pPropertyEntriesOut[0].Type = WTS_VALUE_TYPE_BINARY;
//          pPropertyEntriesOut[0].u.bVal.pbVal = TSMF_SUPPORT_DATA_OUT structure
//          pPropertyEntriesOut[0].u.bVal.size = Size of TSMF_SUPPORT_DATA_OUT structure.
//                This will vary based on the size of the variable data in the structure.
//
//  STRUCTURE DEFINITIONS
//
//          typedef struct tagTSMF_SUPPORT_DATA_IN {
//              GUID        guidMfSession;
//              //number of nodes in input data.
//              UINT32      numEntries;   
//              //
//              // variable length data. The data is of type TSMF_SUPPORT_NODEDATA_IN
//              // for each node corresponding to numEntries
//              //
//          } TSMF_SUPPORT_DATA_IN, *PTSMF_SUPPORT_DATA_IN;
//           
//          typedef struct tagTSMF_SUPPORT_NODEDATA_IN {
//              UINT32      byteCount;
//              INT64       nodeId;
//              // Number of media type entries for this node
//              UINT32      numMediaTypes;    
//              //
//              // variable length media format data. It should be read as a set of TS_AM_MEDIA_TYPE structs.
//              // The format itself is of type FORMAT_WaveFormatEx for audio and FORMAT_MFVideoFormat
//              // for video
//              //
//          } TSMF_SUPPORT_NODEDATA_IN, *PTSMF_SUPPORT_NODEDATA_IN;
//           
//           
//          // 
//          // Structures used to format data output from RCM. This is the format expected from protocol extension
//          //
//          typedef struct tagTSMF_SUPPORT_DATA_OUT {
//              GUID        guidMfSession; // must match the MF session guid in input data
//              UINT32      numEntries; // must match the number of entries in input data
//           
//              //
//              // variable length data. The data is of type TSMF_SUPPORT_NODEDATA_OUT
//              // for each entry corresponding to numEntries
//              //
//          } TSMF_SUPPORT_DATA_OUT, *PTSMF_SUPPORT_DATA_OUT;
//           
//          typedef struct tagTSMF_SUPPORT_NODEDATA_OUT {
//              INT64       nodeId;
//              //
//              // Status of 0 means not supported, 1 means supported.  
//              // Other values reserved for future use
//              // If supported, the sink given by clsidNewSink will be used
//              //
//              HRESULT     hrSupportStatus; 
//              CLSID       clsidNewSink;
//              // 0 based index of the media type for which support is being expressed.
//              UINT32      supportedMediaTypeIndex;
//          } TSMF_SUPPORT_NODEDATA_OUT, *PTSMF_SUPPORT_NODEDATA_OUT;
//           
//
//          // The following struct is used to express the media type. The fields in this struct have the same meaning as AM_MEDIA_TYPE
//          // This struct is used to ensure consistency between 32-bit and 64-bit callers
//          //
//          typedef struct tagTS_AM_MEDIA_TYPE {
//              GUID        majortype;
//              GUID        subtype;
//              UINT32    bFixedSizeSamples;
//              UINT32    bTemporalCompression;
//              UINT32    lSampleSize;
//              GUID        formattype;
//              UINT32    cbFormat;
//              // Variable size data appened at the end
//          } TS_AM_MEDIA_TYPE, *PTS_AM_MEDIA_TYPE;
//          
//
EXTERN_C const __declspec(selectany) GUID WTS_QUERY_MF_FORMAT_SUPPORT = /*41869ad0-6332-4dc8-95d5-db749e2f1d94*/
{ 0x41869ad0, 0x6332, 0x4dc8, {0x95, 0xd5, 0xdb, 0x74, 0x9e, 0x2f, 0x1d, 0x94} };

// ************************************************************************

#endif


/* -------------------------------------------------------------------
 * Licensing structures
 * 
 * For more informtion on the licensing structures and sequence
 * please refer to [MS-RDPBCGR] - 
 * http://msdn.microsoft.com/en-us/library/cc241880(PROT.10).aspx
 *
 * -------------------------------------------------------------------*/

///////////////////////////////////////////////////////////////////////////////
//
// Key exchange algorithms
//

#define WTS_KEY_EXCHANGE_ALG_RSA    1
#define WTS_KEY_EXCHANGE_ALG_DH     2

#define WTS_LICENSE_PROTOCOL_VERSION            0x00010000
#define WTS_LICENSE_PREAMBLE_VERSION            0x03
#define WTS_LICENSE_CURRENT_PROTOCOL_VERSION    WTS_LICENSE_PROTOCOL_VERSION | WTS_LICENSE_PREAMBLE_VERSION

//-----------------------------------------------------------------------------
//
// Types of certificate used by the server to authenticate itself to the clients
//
// CERT_TYPE_PROPRIETORY
//      Proprietory format certificate
//
// CERT_TYPE_X509
//      X509 format certificate
//
//-----------------------------------------------------------------------------
typedef enum
{
    WTS_CERT_TYPE_INVALID       = 0,
    WTS_CERT_TYPE_PROPRIETORY   = 1,
    WTS_CERT_TYPE_X509          = 2
} WTS_CERT_TYPE;


//-----------------------------------------------------------------------------
//
// WTS_LICENSE_CAPABILITIES
//
// Data structure used in RequestLicensingCapabilities.
//
// KeyExchangeAlg       - The key exchange algorithm: RSA or Diffie Helman (see defines above)
// ProtocolVer          - The supported licensing protocol. 
//                        Always set it to WTS_LICENSE_CURRENT_PROTOCOL_VERSION.
// fAuthenticateServer  - Whether the client is going to authenticate the server
// CertType             - Indicate the type of certificate that has already been transmitted
//                        to the client.
// cbClientName         - Size of the client name in bytes
// rgbClientName        - Name of the client
//
//-----------------------------------------------------------------------------

#define WTS_LICENSE_CLIENT_NAME_BYTE_LENGTH (WTS_CLIENTNAME_LENGTH + 1) * sizeof( WCHAR )

typedef struct _WTS_LICENSE_CAPABILITIES
{
    DWORD           KeyExchangeAlg;
    DWORD           ProtocolVer;    
    BOOL            fAuthenticateServer;
    WTS_CERT_TYPE   CertType;
    DWORD           cbClientName;
    BYTE            rgbClientName[WTS_LICENSE_CLIENT_NAME_BYTE_LENGTH];

} WTS_LICENSE_CAPABILITIES, *PWTS_LICENSE_CAPABILITIES;


#ifdef __cplusplus
}
#endif

#endif  /* !_INC_WTSDEFS */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WtsApi32.h ===
/*********************************************************************
*
* WTSAPI32.H
*
*   Windows Terminal Server public APIs
*
*   Copyright (c) 1997-2001 Microsoft Corporation
*
**********************************************************************/

#ifndef _INC_WTSAPI
#define _INC_WTSAPI

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*===================================================================
==   Defines
=====================================================================*/

/*
 *  Specifies the current server
 */
#define WTS_CURRENT_SERVER         ((HANDLE)NULL)
#define WTS_CURRENT_SERVER_HANDLE  ((HANDLE)NULL)
#define WTS_CURRENT_SERVER_NAME    (NULL)

/*
 *  Specifies the current session (SessionId)
 */
#define WTS_CURRENT_SESSION ((DWORD)-1)

/*
 *  Specifies any-session (SessionId)
 */
#define WTS_ANY_SESSION ((DWORD)-2)

/*
 *  Possible pResponse values from WTSSendMessage()
 */
#ifndef IDTIMEOUT
#define IDTIMEOUT 32000
#endif
#ifndef IDASYNC
#define IDASYNC   32001
#endif

#ifndef __HYDRIX_H__
#define USERNAME_LENGTH          20
#define CLIENTNAME_LENGTH        20
#define CLIENTADDRESS_LENGTH     30
#endif
/*
 *  Shutdown flags
 */
#define WTS_WSD_LOGOFF      0x00000001  // log off all users except
                                        // current user; deletes
                                        // WinStations (a reboot is
                                        // required to recreate the
                                        // WinStations)
#define WTS_WSD_SHUTDOWN    0x00000002  // shutdown system
#define WTS_WSD_REBOOT      0x00000004  // shutdown and reboot
#define WTS_WSD_POWEROFF    0x00000008  // shutdown and power off (on
                                        // machines that support power
                                        // off through software)
#define WTS_WSD_FASTREBOOT  0x00000010  // reboot without logging users
                                        // off or shutting down
#define MAX_ELAPSED_TIME_LENGTH         15
#define MAX_DATE_TIME_LENGTH            56
#define WINSTATIONNAME_LENGTH    32
#define DOMAIN_LENGTH            17

#define WTS_DRIVE_LENGTH                3
#define WTS_LISTENER_NAME_LENGTH        32
#define WTS_COMMENT_LENGTH              60

/*
 *  Flags for WTSCreateListener
 */
#define WTS_LISTENER_CREATE 0x00000001
#define WTS_LISTENER_UPDATE 0x00000010

/*********************************
 *   Listener access values
 *********************************/
#define WTS_SECURITY_QUERY_INFORMATION        0x00000001
#define WTS_SECURITY_SET_INFORMATION          0x00000002
#define WTS_SECURITY_RESET                    0x00000004
#define WTS_SECURITY_VIRTUAL_CHANNELS         0x00000008
#define WTS_SECURITY_REMOTE_CONTROL           0x00000010
#define WTS_SECURITY_LOGON                    0x00000020
#define WTS_SECURITY_LOGOFF                   0x00000040
#define WTS_SECURITY_MESSAGE                  0x00000080
#define WTS_SECURITY_CONNECT                  0x00000100
#define WTS_SECURITY_DISCONNECT               0x00000200

#define WTS_SECURITY_GUEST_ACCESS             (WTS_SECURITY_LOGON)

#define WTS_SECURITY_CURRENT_GUEST_ACCESS     (WTS_SECURITY_VIRTUAL_CHANNELS | WTS_SECURITY_LOGOFF)

#define WTS_SECURITY_USER_ACCESS              (WTS_SECURITY_CURRENT_GUEST_ACCESS | WTS_SECURITY_QUERY_INFORMATION | WTS_SECURITY_CONNECT )

#define WTS_SECURITY_CURRENT_USER_ACCESS      (WTS_SECURITY_SET_INFORMATION | WTS_SECURITY_RESET \
                                               WTS_SECURITY_VIRTUAL_CHANNELS | WTS_SECURITY_LOGOFF \
                                               WTS_SECURITY_DISCONNECT)

#define WTS_SECURITY_ALL_ACCESS               (STANDARD_RIGHTS_REQUIRED | WTS_SECURITY_QUERY_INFORMATION |       \
                                               WTS_SECURITY_SET_INFORMATION | WTS_SECURITY_RESET |               \
                                               WTS_SECURITY_VIRTUAL_CHANNELS |    WTS_SECURITY_REMOTE_CONTROL |  \
                                               WTS_SECURITY_LOGON |                                              \
                                               WTS_SECURITY_MESSAGE |                                            \
                                               WTS_SECURITY_CONNECT | WTS_SECURITY_DISCONNECT)

/*===================================================================
==   WTS_CONNECTSTATE_CLASS - Session connect state
=====================================================================*/

typedef enum _WTS_CONNECTSTATE_CLASS {
    WTSActive,              // User logged on to WinStation
    WTSConnected,           // WinStation connected to client
    WTSConnectQuery,        // In the process of connecting to client
    WTSShadow,              // Shadowing another WinStation
    WTSDisconnected,        // WinStation logged on without client
    WTSIdle,                // Waiting for client to connect
    WTSListen,              // WinStation is listening for connection
    WTSReset,               // WinStation is being reset
    WTSDown,                // WinStation is down due to error
    WTSInit,                // WinStation in initialization
} WTS_CONNECTSTATE_CLASS;

/*=====================================================================
==   WTS_SERVER_INFO - returned by WTSEnumerateServers (version 1)
=====================================================================*/

/*
 *  WTSEnumerateServers() returns two variables: pServerInfo and Count.
 *  The latter is the number of WTS_SERVER_INFO structures contained in
 *  the former.  In order to read each server, iterate i from 0 to
 *  Count-1 and reference the server name as
 *  pServerInfo[i].pServerName; for example:
 *
 *  for ( i=0; i < Count; i++ ) {
 *      _tprintf( TEXT("%s "), pServerInfo[i].pServerName );
 *  }
 *
 *  The memory returned looks like the following.  P is a pServerInfo
 *  pointer, and D is the string data for that pServerInfo:
 *
 *  P1 P2 P3 P4 ... Pn D1 D2 D3 D4 ... Dn
 *
 *  This makes it easier to iterate the servers, using code similar to
 *  the above.
 */

typedef struct _WTS_SERVER_INFOW {
    LPWSTR pServerName;    // server name
} WTS_SERVER_INFOW, * PWTS_SERVER_INFOW;

typedef struct _WTS_SERVER_INFOA {
    LPSTR pServerName;     // server name
} WTS_SERVER_INFOA, * PWTS_SERVER_INFOA;

#ifdef UNICODE
#define WTS_SERVER_INFO  WTS_SERVER_INFOW
#define PWTS_SERVER_INFO PWTS_SERVER_INFOW
#else
#define WTS_SERVER_INFO  WTS_SERVER_INFOA
#define PWTS_SERVER_INFO PWTS_SERVER_INFOA
#endif


/*=====================================================================
==   WTS_SESSION_INFO - returned by WTSEnumerateSessions (version 1)
=====================================================================*/

/*
 *  WTSEnumerateSessions() returns data in a similar format to the above
 *  WTSEnumerateServers().  It returns two variables: pSessionInfo and
 *  Count.  The latter is the number of WTS_SESSION_INFO structures
 *  contained in the former.  Iteration is similar, except that there
 *  are three parts to each entry, so it would look like this:
 *
 *  for ( i=0; i < Count; i++ ) {
 *      _tprintf( TEXT("%-5u  %-20s  %u\n"),
                  pSessionInfo[i].SessionId,
 *                pSessionInfo[i].pWinStationName,
 *                pSessionInfo[i].State );
 *  }
 *
 *  The memory returned is also segmented as the above, with all the
 *  structures allocated at the start and the string data at the end.
 *  We'll use S for the SessionId, P for the pWinStationName pointer
 *  and D for the string data, and C for the connect State:
 *
 *  S1 P1 C1 S2 P2 C2 S3 P3 C3 S4 P4 C4 ... Sn Pn Cn D1 D2 D3 D4 ... Dn
 *
 *  As above, this makes it easier to iterate the sessions.
 */

typedef struct _WTS_SESSION_INFOW {
    DWORD SessionId;             // session id
    LPWSTR pWinStationName;      // name of WinStation this session is
                                 // connected to
    WTS_CONNECTSTATE_CLASS State; // connection state (see enum)
} WTS_SESSION_INFOW, * PWTS_SESSION_INFOW;

typedef struct _WTS_SESSION_INFOA {
    DWORD SessionId;             // session id
    LPSTR pWinStationName;       // name of WinStation this session is
                                 // connected to
    WTS_CONNECTSTATE_CLASS State; // connection state (see enum)
} WTS_SESSION_INFOA, * PWTS_SESSION_INFOA;

typedef struct _WTS_SESSION_INFO_1W {
    DWORD ExecEnvId;
    WTS_CONNECTSTATE_CLASS State;
    DWORD SessionId;
    LPWSTR pSessionName;
    LPWSTR pHostName;
    LPWSTR pUserName;
    LPWSTR pDomainName;
    LPWSTR pFarmName;
} WTS_SESSION_INFO_1W, * PWTS_SESSION_INFO_1W;

typedef struct _WTS_SESSION_INFO_1A {
    DWORD ExecEnvId;
    WTS_CONNECTSTATE_CLASS State;
    DWORD SessionId;
    LPSTR pSessionName;
    LPSTR pHostName;
    LPSTR pUserName;
    LPSTR pDomainName;
    LPSTR pFarmName;
} WTS_SESSION_INFO_1A, * PWTS_SESSION_INFO_1A;

#ifdef UNICODE
#define WTS_SESSION_INFO  WTS_SESSION_INFOW
#define PWTS_SESSION_INFO PWTS_SESSION_INFOW
#define WTS_SESSION_INFO_1  WTS_SESSION_INFO_1W
#define PWTS_SESSION_INFO_1 PWTS_SESSION_INFO_1W
#else
#define WTS_SESSION_INFO  WTS_SESSION_INFOA
#define PWTS_SESSION_INFO PWTS_SESSION_INFOA
#define WTS_SESSION_INFO_1  WTS_SESSION_INFO_1A
#define PWTS_SESSION_INFO_1 PWTS_SESSION_INFO_1A
#endif


/*=====================================================================
==   WTS_PROCESS_INFO - returned by WTSEnumerateProcesses (version 1)
=====================================================================*/

/*
 *  WTSEnumerateProcesses() also returns data similar to
 *  WTSEnumerateServers().  It returns two variables: pProcessInfo and
 *  Count.  The latter is the number of WTS_PROCESS_INFO structures
 *  contained in the former.  Iteration is similar, except that there
 *  are four parts to each entry, so it would look like this:
 *
 *  for ( i=0; i < Count; i++ ) {
 *      GetUserNameFromSid( pProcessInfo[i].pUserSid, UserName,
 *                          sizeof(UserName) );
 *      _tprintf( TEXT("%-5u  %-20s  %-5u  %s\n"),
 *              pProcessInfo[i].SessionId,
 *              UserName,
 *              pProcessInfo[i].ProcessId,
 *              pProcessInfo[i].pProcessName );
 *  }
 *
 *  The memory returned is also segmented as the above, with all the
 *  structures allocated at the start and the string data at the end.
 *  We'll use S for the SessionId, R for the ProcessId, P for the
 *  pProcessName pointer and D for the string data, and U for pUserSid:
 *
 *  S1 R1 P1 U1 S2 R2 P2 U2 S3 R3 P3 U3 ... Sn Rn Pn Un D1 D2 D3 ... Dn
 *
 *  As above, this makes it easier to iterate the processes.
 */

typedef struct _WTS_PROCESS_INFOW {
    DWORD SessionId;     // session id
    DWORD ProcessId;     // process id
    LPWSTR pProcessName; // name of process
    PSID pUserSid;       // user's SID
} WTS_PROCESS_INFOW, * PWTS_PROCESS_INFOW;

typedef struct _WTS_PROCESS_INFOA {
    DWORD SessionId;     // session id
    DWORD ProcessId;     // process id
    LPSTR pProcessName;  // name of process
    PSID pUserSid;       // user's SID
} WTS_PROCESS_INFOA, * PWTS_PROCESS_INFOA;

#ifdef UNICODE
#define WTS_PROCESS_INFO  WTS_PROCESS_INFOW
#define PWTS_PROCESS_INFO PWTS_PROCESS_INFOW
#else
#define WTS_PROCESS_INFO  WTS_PROCESS_INFOA
#define PWTS_PROCESS_INFO PWTS_PROCESS_INFOA
#endif

/*=====================================================================
==   WTS_INFO_CLASS - WTSQuerySessionInformation
==    (See additional typedefs for more info on structures)
=====================================================================*/

#define WTS_PROTOCOL_TYPE_CONSOLE         0    // Console
#define WTS_PROTOCOL_TYPE_ICA             1    // ICA Protocol
#define WTS_PROTOCOL_TYPE_RDP             2    // RDP Protocol

typedef enum _WTS_INFO_CLASS {
    WTSInitialProgram,
    WTSApplicationName,
    WTSWorkingDirectory,
    WTSOEMId,
    WTSSessionId,
    WTSUserName,
    WTSWinStationName,
    WTSDomainName,
    WTSConnectState,
    WTSClientBuildNumber,
    WTSClientName,
    WTSClientDirectory,
    WTSClientProductId,
    WTSClientHardwareId,
    WTSClientAddress,
    WTSClientDisplay,
    WTSClientProtocolType,
    WTSIdleTime,
    WTSLogonTime,
    WTSIncomingBytes,
    WTSOutgoingBytes,
    WTSIncomingFrames,
    WTSOutgoingFrames,
    WTSClientInfo,
    WTSSessionInfo,
    WTSSessionInfoEx,
    WTSConfigInfo,
    WTSValidationInfo,   // Info Class value used to fetch Validation Information through the WTSQuerySessionInformation
    WTSSessionAddressV4,
    WTSIsRemoteSession
} WTS_INFO_CLASS;

/*=====================================================================
==   WTS Config Information
=====================================================================*/

typedef struct  _WTSCONFIGINFOW {
    ULONG version; 
    ULONG fConnectClientDrivesAtLogon;
    ULONG fConnectPrinterAtLogon;
    ULONG fDisablePrinterRedirection;
    ULONG fDisableDefaultMainClientPrinter;
    ULONG ShadowSettings;
    WCHAR LogonUserName[USERNAME_LENGTH + 1 ];
    WCHAR LogonDomain[DOMAIN_LENGTH + 1 ];
    WCHAR WorkDirectory[MAX_PATH + 1 ];
    WCHAR InitialProgram[MAX_PATH + 1 ];
    WCHAR ApplicationName[MAX_PATH + 1 ];
} WTSCONFIGINFOW, *PWTSCONFIGINFOW;

typedef struct  _WTSCONFIGINFOA {
    ULONG version; 
    ULONG fConnectClientDrivesAtLogon;
    ULONG fConnectPrinterAtLogon;
    ULONG fDisablePrinterRedirection;
    ULONG fDisableDefaultMainClientPrinter;
    ULONG ShadowSettings;
    CHAR LogonUserName[USERNAME_LENGTH + 1 ];
    CHAR LogonDomain[DOMAIN_LENGTH + 1 ];
    CHAR WorkDirectory[MAX_PATH + 1 ];
    CHAR InitialProgram[MAX_PATH + 1 ];
    CHAR ApplicationName[MAX_PATH + 1 ];
} WTSCONFIGINFOA, *PWTSCONFIGINFOA;

/*=====================================================================
==   WTS Session Information
=====================================================================*/
typedef struct _WTSINFOW {
    WTS_CONNECTSTATE_CLASS State; // connection state (see enum)
    DWORD SessionId;             // session id
    DWORD IncomingBytes;
    DWORD OutgoingBytes;
    DWORD IncomingFrames;
    DWORD OutgoingFrames;
    DWORD IncomingCompressedBytes;
    DWORD OutgoingCompressedBytes;
    WCHAR WinStationName[WINSTATIONNAME_LENGTH];
    WCHAR Domain[DOMAIN_LENGTH];
    WCHAR UserName[USERNAME_LENGTH+1];// name of WinStation this session is
                                 // connected to
    LARGE_INTEGER ConnectTime;
    LARGE_INTEGER DisconnectTime;
    LARGE_INTEGER LastInputTime;
    LARGE_INTEGER LogonTime;
    LARGE_INTEGER CurrentTime;

} WTSINFOW, * PWTSINFOW;

typedef struct _WTSINFOA {
    WTS_CONNECTSTATE_CLASS State; // connection state (see enum)
    DWORD SessionId;             // session id
    DWORD IncomingBytes;
    DWORD OutgoingBytes;
    DWORD IncomingFrames;
    DWORD OutgoingFrames;
    DWORD IncomingCompressedBytes;
    DWORD OutgoingCompressedBy;
    CHAR WinStationName[WINSTATIONNAME_LENGTH];
    CHAR Domain[DOMAIN_LENGTH];
    CHAR UserName[USERNAME_LENGTH+1];// name of WinStation this session is
                                 // connected to
    LARGE_INTEGER ConnectTime;
    LARGE_INTEGER DisconnectTime;
    LARGE_INTEGER LastInputTime;
    LARGE_INTEGER LogonTime;
    LARGE_INTEGER CurrentTime;

} WTSINFOA, * PWTSINFOA;


/*=====================================================================
==   WTS Extended Session State Flags
=====================================================================*/
#define WTS_SESSIONSTATE_UNKNOWN    0xFFFFFFFF
#define WTS_SESSIONSTATE_LOCK       0x00000000
#define WTS_SESSIONSTATE_UNLOCK     0x00000001

/*=====================================================================
==   WTS Extended Session Information
=====================================================================*/
typedef struct _WTSINFOEX_LEVEL1_W {
    ULONG SessionId;
    WTS_CONNECTSTATE_CLASS SessionState;
    LONG SessionFlags;
    WCHAR WinStationName[WINSTATIONNAME_LENGTH + 1] ;
    WCHAR UserName[USERNAME_LENGTH + 1];
    WCHAR DomainName[DOMAIN_LENGTH + 1];
    LARGE_INTEGER LogonTime;
    LARGE_INTEGER ConnectTime;
    LARGE_INTEGER DisconnectTime;
    LARGE_INTEGER LastInputTime;
    LARGE_INTEGER CurrentTime;
    DWORD IncomingBytes;
    DWORD OutgoingBytes;
    DWORD IncomingFrames;
    DWORD OutgoingFrames;
    DWORD IncomingCompressedBytes;
    DWORD OutgoingCompressedBytes;
} WTSINFOEX_LEVEL1_W, *PWTSINFOEX_LEVEL1_W;

typedef struct _WTSINFOEX_LEVEL1_A {
    ULONG SessionId;
    WTS_CONNECTSTATE_CLASS SessionState;
    LONG SessionFlags;
    CHAR WinStationName[WINSTATIONNAME_LENGTH + 1];
    CHAR UserName[USERNAME_LENGTH + 1];
    CHAR DomainName[DOMAIN_LENGTH + 1];
    LARGE_INTEGER LogonTime;
    LARGE_INTEGER ConnectTime;
    LARGE_INTEGER DisconnectTime;
    LARGE_INTEGER LastInputTime;
    LARGE_INTEGER CurrentTime;
    DWORD IncomingBytes;
    DWORD OutgoingBytes;
    DWORD IncomingFrames;
    DWORD OutgoingFrames;
    DWORD IncomingCompressedBytes;
    DWORD OutgoingCompressedBytes;
} WTSINFOEX_LEVEL1_A, *PWTSINFOEX_LEVEL1_A;

typedef union _WTSINFOEX_LEVEL_W {
    WTSINFOEX_LEVEL1_W WTSInfoExLevel1;
} WTSINFOEX_LEVEL_W, *PWTSINFOEX_LEVEL_W;

typedef union _WTSINFOEX_LEVEL_A {
    WTSINFOEX_LEVEL1_A WTSInfoExLevel1;
} WTSINFOEX_LEVEL_A, *PWTSINFOEX_LEVEL_A;

typedef struct _WTSINFOEXW {
    DWORD Level;
    WTSINFOEX_LEVEL_W Data;
} WTSINFOEXW, *PWTSINFOEXW;

typedef struct _WTSINFOEXA {
    DWORD Level;
    WTSINFOEX_LEVEL_A Data;
} WTSINFOEXA, *PWTSINFOEXA;


/*=====================================================================
==   WTS Client Information
=====================================================================*/
typedef struct _WTSCLIENTW {
    WCHAR ClientName[ CLIENTNAME_LENGTH + 1 ];
    WCHAR Domain[ DOMAIN_LENGTH + 1 ];
    WCHAR UserName[ USERNAME_LENGTH + 1 ];
    WCHAR WorkDirectory[ MAX_PATH + 1];
    WCHAR InitialProgram[ MAX_PATH + 1];
    BYTE EncryptionLevel;       // security level of encryption pd
    ULONG ClientAddressFamily;
    USHORT ClientAddress[ CLIENTADDRESS_LENGTH + 1 ];
    USHORT HRes;
    USHORT VRes;
    USHORT ColorDepth;
    WCHAR ClientDirectory[ MAX_PATH + 1 ];
    ULONG ClientBuildNumber;
    ULONG ClientHardwareId;    // client software serial number
    USHORT ClientProductId;     // client software product id
    USHORT OutBufCountHost;     // number of outbufs on host
    USHORT OutBufCountClient;   // number of outbufs on client
    USHORT OutBufLength;        // length of outbufs in bytes
    WCHAR  DeviceId[ MAX_PATH + 1];
} WTSCLIENTW, * PWTSCLIENTW;


/*=====================================================================
==   WTS Client Information
=====================================================================*/
typedef struct _WTSCLIENTA {
    CHAR ClientName[ CLIENTNAME_LENGTH + 1 ];
    CHAR Domain[ DOMAIN_LENGTH + 1 ];
    CHAR UserName[ USERNAME_LENGTH + 1 ];
    CHAR WorkDirectory[ MAX_PATH + 1];
    CHAR InitialProgram[ MAX_PATH + 1 ];
    BYTE EncryptionLevel;       // security level of encryption pd
    ULONG ClientAddressFamily;
    USHORT ClientAddress[ CLIENTADDRESS_LENGTH + 1 ];
    USHORT HRes;
    USHORT VRes;
    USHORT ColorDepth;
    CHAR ClientDirectory[ MAX_PATH + 1 ];
    ULONG ClientBuildNumber;
    ULONG ClientHardwareId;    // client software serial number
    USHORT ClientProductId;     // client software product id
    USHORT OutBufCountHost;     // number of outbufs on host
    USHORT OutBufCountClient;   // number of outbufs on client
    USHORT OutBufLength;        // length of outbufs in bytes
    CHAR  DeviceId[ MAX_PATH + 1];
} WTSCLIENTA, * PWTSCLIENTA;

/*=====================================================================
==   WTS License Validation Information - Product Information
=====================================================================*/

#define PRODUCTINFO_COMPANYNAME_LENGTH 256
#define PRODUCTINFO_PRODUCTID_LENGTH 4

typedef struct _WTS_PRODUCT_INFOA
{
    CHAR CompanyName[PRODUCTINFO_COMPANYNAME_LENGTH];
    CHAR ProductID[PRODUCTINFO_PRODUCTID_LENGTH];
} PRODUCT_INFOA;

typedef struct _WTS_PRODUCT_INFOW
{
    WCHAR CompanyName[PRODUCTINFO_COMPANYNAME_LENGTH];
    WCHAR ProductID[PRODUCTINFO_PRODUCTID_LENGTH];
} PRODUCT_INFOW;

/*=====================================================================
     WTS License Validation Information
     This structure will be returned from WTSQuerySessionInformation when the user
     queries for license validation information.
=====================================================================*/

#define VALIDATIONINFORMATION_LICENSE_LENGTH 16384 //16 Kb
#define VALIDATIONINFORMATION_HARDWAREID_LENGTH 20

typedef struct _WTS_VALIDATION_INFORMATIONA {
    PRODUCT_INFOA ProductInfo;
    BYTE License[VALIDATIONINFORMATION_LICENSE_LENGTH];
    DWORD LicenseLength;
    BYTE HardwareID[VALIDATIONINFORMATION_HARDWAREID_LENGTH];
    DWORD HardwareIDLength;

} WTS_VALIDATION_INFORMATIONA, * PWTS_VALIDATION_INFORMATIONA;

typedef struct _WTS_VALIDATION_INFORMATIONW {
    PRODUCT_INFOW ProductInfo;
    BYTE License[VALIDATIONINFORMATION_LICENSE_LENGTH];
    DWORD LicenseLength;
    BYTE HardwareID[VALIDATIONINFORMATION_HARDWAREID_LENGTH];
    DWORD HardwareIDLength;

} WTS_VALIDATION_INFORMATIONW, * PWTS_VALIDATION_INFORMATIONW;

#ifdef UNICODE
#define WTSCONFIGINFO WTSCONFIGINFOW
#define PWTSCONFIGINFO PWTSCONFIGINFOW
#define PRODUCT_INFO PRODUCT_INFOW
#define WTS_VALIDATION_INFORMATION WTS_VALIDATION_INFORMATIONW
#define PWTS_VALIDATION_INFORMATION PWTS_VALIDATION_INFORMATIONW
#define WTSINFO  WTSINFOW
#define PWTSINFO PWTSINFOW
#define WTSINFOEX  WTSINFOEXW
#define PWTSINFOEX PWTSINFOEXW
#define WTSINFOEX_LEVEL WTSINFOEX_LEVEL_W
#define PWTSINFOEX_LEVEL PWTSINFOEX_LEVEL_W
#define WTSINFOEX_LEVEL1 WTSINFOEX_LEVEL1_W
#define PWTSINFOEX_LEVEL1 PWTSINFOEX_LEVEL1_W
#define WTSCLIENT WTSCLIENTW
#define PWTSCLIENT PWTSCLIENTW
#else
#define WTSCONFIGINFO WTSCONFIGINFOA
#define PWTSCONFIGINFO PWTSCONFIGINFOA
#define PRODUCT_INFO PRODUCT_INFOA
#define WTS_VALIDATION_INFORMATION WTS_VALIDATION_INFORMATIONA
#define PWTS_VALIDATION_INFORMATION PWTS_VALIDATION_INFORMATIONA
#define WTSINFO  WTSINFOA
#define PWTSINFO PWTSINFOA
#define WTSINFOEX  WTSINFOEXA
#define PWTSINFOEX PWTSINFOEXA
#define WTSINFOEX_LEVEL WTSINFOEX_LEVEL_A
#define PWTSINFOEX_LEVEL PWTSINFOEX_LEVEL_A
#define WTSINFOEX_LEVEL1 WTSINFOEX_LEVEL1_A
#define PWTSINFOEX_LEVEL1 PWTSINFOEX_LEVEL1_A
#define WTSCLIENT WTSCLIENTA
#define PWTSCLIENT PWTSCLIENTA

#endif


/*=====================================================================
==   WTSQuerySessionInformation - (WTSClientAddress)
=====================================================================*/

typedef struct _WTS_CLIENT_ADDRESS {
    DWORD AddressFamily;  // AF_INET, AF_INET6, AF_IPX, AF_NETBIOS, AF_UNSPEC
    BYTE  Address[20];    // client network address
} WTS_CLIENT_ADDRESS, * PWTS_CLIENT_ADDRESS;


/*=====================================================================
==   WTSQuerySessionInformation - (WTSClientDisplay)
=====================================================================*/

typedef struct _WTS_CLIENT_DISPLAY {
    DWORD HorizontalResolution; // horizontal dimensions, in pixels
    DWORD VerticalResolution;   // vertical dimensions, in pixels
    DWORD ColorDepth;           // 1=16, 2=256, 4=64K, 8=16M
} WTS_CLIENT_DISPLAY, * PWTS_CLIENT_DISPLAY;


/*=====================================================================
==   WTS_CONFIG_CLASS - WTSQueryUserConfig/WTSSetUserConfig
=====================================================================*/


typedef enum _WTS_CONFIG_CLASS {
    //Initial program settings
    WTSUserConfigInitialProgram,            // string returned/expected
    WTSUserConfigWorkingDirectory,          // string returned/expected
    WTSUserConfigfInheritInitialProgram,    // DWORD returned/expected
    //
    WTSUserConfigfAllowLogonTerminalServer,     //DWORD returned/expected
    //Timeout settings
    WTSUserConfigTimeoutSettingsConnections,    //DWORD returned/expected
    WTSUserConfigTimeoutSettingsDisconnections, //DWORD returned/expected
    WTSUserConfigTimeoutSettingsIdle,           //DWORD returned/expected
    //Client device settings
    WTSUserConfigfDeviceClientDrives,       //DWORD returned/expected
    WTSUserConfigfDeviceClientPrinters,         //DWORD returned/expected
    WTSUserConfigfDeviceClientDefaultPrinter,   //DWORD returned/expected
    //Connection settings
    WTSUserConfigBrokenTimeoutSettings,         //DWORD returned/expected
    WTSUserConfigReconnectSettings,             //DWORD returned/expected
    //Modem settings
    WTSUserConfigModemCallbackSettings,         //DWORD returned/expected
    WTSUserConfigModemCallbackPhoneNumber,      // string returned/expected
    //Shadow settings
    WTSUserConfigShadowingSettings,             //DWORD returned/expected
    //User Profile settings
    WTSUserConfigTerminalServerProfilePath,     // string returned/expected
    //Terminal Server home directory
    WTSUserConfigTerminalServerHomeDir,       // string returned/expected
    WTSUserConfigTerminalServerHomeDirDrive,    // string returned/expected
    WTSUserConfigfTerminalServerRemoteHomeDir,  // DWORD 0:LOCAL 1:REMOTE

    WTSUserConfigUser,                          // returns WTSUSERCONFIG struct
} WTS_CONFIG_CLASS;

typedef enum _WTS_CONFIG_SOURCE {
    WTSUserConfigSourceSAM
} WTS_CONFIG_SOURCE;

typedef struct _WTSUSERCONFIGA {
    DWORD Source;
    DWORD InheritInitialProgram;
    DWORD AllowLogonTerminalServer;
    DWORD TimeoutSettingsConnections;
    DWORD TimeoutSettingsDisconnections;
    DWORD TimeoutSettingsIdle;
    DWORD DeviceClientDrives;
    DWORD DeviceClientPrinters;
    DWORD ClientDefaultPrinter;
    DWORD BrokenTimeoutSettings;
    DWORD ReconnectSettings;
    DWORD ShadowingSettings;
    DWORD TerminalServerRemoteHomeDir;
    CHAR InitialProgram[ MAX_PATH + 1 ];
    CHAR WorkDirectory[ MAX_PATH + 1 ];
    CHAR TerminalServerProfilePath[ MAX_PATH + 1 ];
    CHAR TerminalServerHomeDir[ MAX_PATH + 1 ];
    CHAR TerminalServerHomeDirDrive[ WTS_DRIVE_LENGTH + 1 ];
} WTSUSERCONFIGA, * PWTSUSERCONFIGA;

typedef struct _WTSUSERCONFIGW {
    DWORD Source;
    DWORD InheritInitialProgram;
    DWORD AllowLogonTerminalServer;
    DWORD TimeoutSettingsConnections;
    DWORD TimeoutSettingsDisconnections;
    DWORD TimeoutSettingsIdle;
    DWORD DeviceClientDrives;
    DWORD DeviceClientPrinters;
    DWORD ClientDefaultPrinter;
    DWORD BrokenTimeoutSettings;
    DWORD ReconnectSettings;
    DWORD ShadowingSettings;
    DWORD TerminalServerRemoteHomeDir;
    WCHAR InitialProgram[ MAX_PATH + 1 ];
    WCHAR WorkDirectory[ MAX_PATH + 1 ];
    WCHAR TerminalServerProfilePath[ MAX_PATH + 1 ];
    WCHAR TerminalServerHomeDir[ MAX_PATH + 1 ];
    WCHAR TerminalServerHomeDirDrive[ WTS_DRIVE_LENGTH + 1 ];
} WTSUSERCONFIGW, * PWTSUSERCONFIGW;

#ifdef UNICODE
#define WTSUSERCONFIG WTSUSERCONFIGW
#define PWTSUSERCONFIG PWTSUSERCONFIGW
#else
#define WTSUSERCONFIG WTSUSERCONFIGA
#define PWTSUSERCONFIG PWTSUSERCONFIGA
#endif /* UNICODE */


/*=====================================================================
==   WTS_EVENT - Event flags for WTSWaitSystemEvent
=====================================================================*/

#define WTS_EVENT_NONE         0x00000000 // return no event
#define WTS_EVENT_CREATE       0x00000001 // new WinStation created
#define WTS_EVENT_DELETE       0x00000002 // existing WinStation deleted
#define WTS_EVENT_RENAME       0x00000004 // existing WinStation renamed
#define WTS_EVENT_CONNECT      0x00000008 // WinStation connect to client
#define WTS_EVENT_DISCONNECT   0x00000010 // WinStation logged on without
                                          //     client
#define WTS_EVENT_LOGON        0x00000020 // user logged on to existing
                                          //     WinStation
#define WTS_EVENT_LOGOFF       0x00000040 // user logged off from
                                          //     existing WinStation
#define WTS_EVENT_STATECHANGE  0x00000080 // WinStation state change
#define WTS_EVENT_LICENSE      0x00000100 // license state change
#define WTS_EVENT_ALL          0x7fffffff // wait for all event types
#define WTS_EVENT_FLUSH        0x80000000 // unblock all waiters

/*=====================================================================
==   Flags for HotkeyModifiers in WTSStartRemoteControlSession
=====================================================================*/

#define REMOTECONTROL_KBDSHIFT_HOTKEY              0x1    // Shift key
#define REMOTECONTROL_KBDCTRL_HOTKEY               0x2    // Ctrl key
#define REMOTECONTROL_KBDALT_HOTKEY                0x4    // Alt key

/*=====================================================================
==   WTS_VIRTUAL_CLASS - WTSVirtualChannelQuery
=====================================================================*/
typedef enum _WTS_VIRTUAL_CLASS {
    WTSVirtualClientData,  // Virtual channel client module data
                           //     (C2H data)
    WTSVirtualFileHandle
} WTS_VIRTUAL_CLASS;

/*=====================================================================
==   WTSQuerySessionInformation - (WTSSessionAddress)
=====================================================================*/

typedef struct _WTS_SESSION_ADDRESS {
    DWORD AddressFamily;  // AF_INET only.
    BYTE  Address[20];    // client network address
} WTS_SESSION_ADDRESS, * PWTS_SESSION_ADDRESS;


/*=====================================================================
==   Windows Terminal Server public APIs
=====================================================================*/

BOOL WINAPI
WTSStopRemoteControlSession(
    IN ULONG   LogonId
    );

BOOL WINAPI
WTSStartRemoteControlSessionW(
    __in LPWSTR  pTargetServerName,
    IN ULONG   TargetLogonId,
    IN BYTE    HotkeyVk,
    IN USHORT  HotkeyModifiers
    );

BOOL WINAPI
WTSStartRemoteControlSessionA(
    __in LPSTR  pTargetServerName,
    IN ULONG   TargetLogonId,
    IN BYTE    HotkeyVk,
    IN USHORT  HotkeyModifiers
    );

#ifdef UNICODE
#define WTSStartRemoteControlSession WTSStartRemoteControlSessionW
#else
#define WTSStartRemoteControlSession WTSStartRemoteControlSessionA
#endif /* UNICODE */

BOOL
WINAPI
WTSConnectSessionA(
    IN ULONG LogonId,
    IN ULONG TargetLogonId,
    __in PSTR pPassword,
    IN BOOL bWait
    );

BOOL
WINAPI
WTSConnectSessionW(
    IN ULONG LogonId,
    IN ULONG TargetLogonId,
    __in PWSTR pPassword,
    IN BOOL bWait
    );

#ifdef UNICODE
#define WTSConnectSession WTSConnectSessionW
#else
#define WTSConnectSession WTSConnectSessionA
#endif

BOOL
WINAPI
WTSEnumerateServersW(
    __in LPWSTR pDomainName,
    IN DWORD Reserved,
    IN DWORD Version,
    __deref_out_ecount(*pCount) PWTS_SERVER_INFOW * ppServerInfo,
    __out DWORD * pCount
    );

BOOL
WINAPI
WTSEnumerateServersA(
    __in LPSTR pDomainName,
    IN DWORD Reserved,
    IN DWORD Version,
    __deref_out_ecount(*pCount)  PWTS_SERVER_INFOA * ppServerInfo,
    __out DWORD * pCount
    );

#ifdef UNICODE
#define WTSEnumerateServers WTSEnumerateServersW
#else
#define WTSEnumerateServers WTSEnumerateServersA
#endif

/*------------------------------------------------*/

HANDLE
WINAPI
WTSOpenServerW(
    __in LPWSTR pServerName
    );

HANDLE
WINAPI
WTSOpenServerA(
    __in LPSTR pServerName
    );

HANDLE
WINAPI
WTSOpenServerExW(
    __in LPWSTR pServerName
    );

HANDLE
WINAPI
WTSOpenServerExA(
    __in LPSTR pServerName
    );

#ifdef UNICODE
#define WTSOpenServer WTSOpenServerW
#define WTSOpenServerEx WTSOpenServerExW
#else
#define WTSOpenServer WTSOpenServerA
#define WTSOpenServerEx WTSOpenServerExA
#endif

/*------------------------------------------------*/

VOID
WINAPI
WTSCloseServer(
    IN HANDLE hServer
    );

/*------------------------------------------------*/

BOOL
WINAPI
WTSEnumerateSessionsW(
    IN HANDLE hServer,
    IN DWORD Reserved,
    IN DWORD Version,
    __deref_out_ecount(*pCount) PWTS_SESSION_INFOW * ppSessionInfo,
    __out DWORD * pCount
    );

BOOL
WINAPI
WTSEnumerateSessionsA(
    IN HANDLE hServer,
    IN DWORD Reserved,
    IN DWORD Version,
    __deref_out_ecount(*pCount)  PWTS_SESSION_INFOA * ppSessionInfo,
    __out DWORD * pCount
    );

BOOL
WINAPI
WTSEnumerateSessionsExW(
    __in HANDLE hServer,
    __inout DWORD *pLevel,
    __in DWORD Filter,
    __deref_out_ecount(*pCount) PWTS_SESSION_INFO_1W * ppSessionInfo,
    __out DWORD * pCount );

BOOL
WINAPI
WTSEnumerateSessionsExA(
    __in HANDLE hServer,
    __inout DWORD *pLevel,
    __in DWORD Filter,
    __deref_out_ecount(*pCount) PWTS_SESSION_INFO_1A * ppSessionInfo,
    __out DWORD * pCount );

#ifdef UNICODE
#define WTSEnumerateSessions WTSEnumerateSessionsW
#define WTSEnumerateSessionsEx WTSEnumerateSessionsExW
#else
#define WTSEnumerateSessions WTSEnumerateSessionsA
#define WTSEnumerateSessionsEx WTSEnumerateSessionsExA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSEnumerateProcessesW(
    IN HANDLE hServer,
    IN DWORD Reserved,
    IN DWORD Version,
    OUT PWTS_PROCESS_INFOW * ppProcessInfo,
    OUT DWORD * pCount
    );

BOOL
WINAPI
WTSEnumerateProcessesA(
    IN HANDLE hServer,
    IN DWORD Reserved,
    IN DWORD Version,
    OUT PWTS_PROCESS_INFOA * ppProcessInfo,
    OUT DWORD * pCount
    );

#ifdef UNICODE
#define WTSEnumerateProcesses WTSEnumerateProcessesW
#else
#define WTSEnumerateProcesses WTSEnumerateProcessesA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSTerminateProcess(
    IN HANDLE hServer,
    IN DWORD ProcessId,
    IN DWORD ExitCode
    );


/*------------------------------------------------*/

BOOL
WINAPI
WTSQuerySessionInformationW(
    IN HANDLE hServer,
    IN DWORD SessionId,
    IN WTS_INFO_CLASS WTSInfoClass,
    __deref_out_bcount(*pBytesReturned) LPWSTR * ppBuffer,
    __out DWORD * pBytesReturned
    );

BOOL
WINAPI
WTSQuerySessionInformationA(
    IN HANDLE hServer,
    IN DWORD SessionId,
    IN WTS_INFO_CLASS WTSInfoClass,
    __deref_out_bcount(*pBytesReturned) LPSTR * ppBuffer,
    __out DWORD * pBytesReturned
    );

#ifdef UNICODE
#define WTSQuerySessionInformation WTSQuerySessionInformationW
#else
#define WTSQuerySessionInformation WTSQuerySessionInformationA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSQueryUserConfigW(
    __in LPWSTR pServerName,
    __in LPWSTR pUserName,
    IN WTS_CONFIG_CLASS WTSConfigClass,
    __deref_out_bcount(*pBytesReturned) LPWSTR * ppBuffer,
    __out DWORD * pBytesReturned
    );

BOOL
WINAPI
WTSQueryUserConfigA(
    __in LPSTR pServerName,
    __in LPSTR pUserName,
    IN WTS_CONFIG_CLASS WTSConfigClass,
    __deref_out_bcount(*pBytesReturned) LPSTR * ppBuffer,
    __out DWORD * pBytesReturned
    );

#ifdef UNICODE
#define WTSQueryUserConfig WTSQueryUserConfigW
#else
#define WTSQueryUserConfig WTSQueryUserConfigA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSSetUserConfigW(
    __in LPWSTR pServerName,
    __in LPWSTR pUserName,
    IN WTS_CONFIG_CLASS WTSConfigClass,
    __in_bcount(DataLength) LPWSTR pBuffer,
    IN DWORD DataLength
    );

BOOL
WINAPI
WTSSetUserConfigA(
    __in LPSTR pServerName,
    __in LPSTR pUserName,
    IN WTS_CONFIG_CLASS WTSConfigClass,
    __in_bcount(DataLength) LPSTR pBuffer,
    IN DWORD DataLength
    );

#ifdef UNICODE
#define WTSSetUserConfig WTSSetUserConfigW
#else
#define WTSSetUserConfig WTSSetUserConfigA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSSendMessageW(
    IN HANDLE hServer,
    IN DWORD SessionId,
    __in_bcount(TitleLength) LPWSTR pTitle,
    IN DWORD TitleLength,
    __in_bcount(MessageLength) LPWSTR pMessage,
    IN DWORD MessageLength,
    IN DWORD Style,
    IN DWORD Timeout,
    __out DWORD * pResponse,
    IN BOOL bWait
    );

BOOL
WINAPI
WTSSendMessageA(
    IN HANDLE hServer,
    IN DWORD SessionId,
    __in_bcount(TitleLength) LPSTR pTitle,
    IN DWORD TitleLength,
    __in_bcount(MessageLength) LPSTR pMessage,
    IN DWORD MessageLength,
    IN DWORD Style,
    IN DWORD Timeout,
    __out DWORD * pResponse,
    IN BOOL bWait
    );

#ifdef UNICODE
#define WTSSendMessage WTSSendMessageW
#else
#define WTSSendMessage WTSSendMessageA
#endif

/*------------------------------------------------*/

BOOL
WINAPI
WTSDisconnectSession(
    IN HANDLE hServer,
    IN DWORD SessionId,
    IN BOOL bWait
    );

/*------------------------------------------------*/

BOOL
WINAPI
WTSLogoffSession(
    IN HANDLE hServer,
    IN DWORD SessionId,
    IN BOOL bWait
    );

/*------------------------------------------------*/

BOOL
WINAPI
WTSShutdownSystem(
    IN HANDLE hServer,
    IN DWORD ShutdownFlag
    );

/*------------------------------------------------*/

BOOL
WINAPI
WTSWaitSystemEvent(
    IN HANDLE hServer,
    IN DWORD EventMask,
    OUT DWORD * pEventFlags
    );

/*------------------------------------------------*/

HANDLE
WINAPI
WTSVirtualChannelOpen(
    IN HANDLE hServer,
    IN DWORD SessionId,
    __in LPSTR pVirtualName   /* ascii name */
    );

#define WTS_CHANNEL_OPTION_DYNAMIC          0x00000001       // dynamic channel
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_LOW  0x00000000   // priorities
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_MED  0x00000002
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_HIGH 0x00000004
#define WTS_CHANNEL_OPTION_DYNAMIC_PRI_REAL 0x00000006
#define WTS_CHANNEL_OPTION_DYNAMIC_NO_COMPRESS 0x00000008

HANDLE
WINAPI
WTSVirtualChannelOpenEx(
                     IN DWORD SessionId,
                     __in LPSTR pVirtualName,   /* ascii name */
                     IN DWORD flags
                     );

BOOL
WINAPI
WTSVirtualChannelClose(
    IN HANDLE hChannelHandle
    );

BOOL
WINAPI
WTSVirtualChannelRead(
    IN HANDLE hChannelHandle,
    IN ULONG TimeOut,
    __out_bcount_part(BufferSize, *pBytesRead) PCHAR Buffer,
    IN ULONG BufferSize,
    __out PULONG pBytesRead
    );

BOOL
WINAPI
WTSVirtualChannelWrite(
    IN HANDLE hChannelHandle,
    __in_bcount(Length) PCHAR Buffer,
    IN ULONG Length,
    __out PULONG pBytesWritten
    );

BOOL
WINAPI
WTSVirtualChannelPurgeInput(
    IN HANDLE hChannelHandle
    );

BOOL
WINAPI
WTSVirtualChannelPurgeOutput(
    IN HANDLE hChannelHandle
    );


BOOL
WINAPI
WTSVirtualChannelQuery(
    IN HANDLE hChannelHandle,
    IN WTS_VIRTUAL_CLASS,
    OUT PVOID *ppBuffer,
    OUT DWORD *pBytesReturned
    );

/*------------------------------------------------*/


VOID
WINAPI
WTSFreeMemory(
    IN PVOID pMemory
    );

/* Flags for Console Notification */

#define NOTIFY_FOR_ALL_SESSIONS     1
#define NOTIFY_FOR_THIS_SESSION     0


BOOL
WINAPI
WTSRegisterSessionNotification(
    HWND hWnd,
    DWORD dwFlags
    );

BOOL
WINAPI
WTSUnRegisterSessionNotification(
    HWND hWnd
    );


BOOL
WINAPI
WTSRegisterSessionNotificationEx(
    IN HANDLE hServer,
    IN HWND hWnd,
    IN DWORD dwFlags
    );

BOOL
WINAPI
WTSUnRegisterSessionNotificationEx(
    IN HANDLE hServer,
    IN HWND hWnd
    );

BOOL
WINAPI
WTSQueryUserToken(
    ULONG SessionId,
    PHANDLE phToken
    );

#define WTS_PROCESS_INFO_LEVEL_0 0
#define WTS_PROCESS_INFO_LEVEL_1 1

/*
==   WTS_PROCESS_INFO_EX - returned by WTSEnumerateProcessesEX
*/

typedef struct _WTS_PROCESS_INFO_EXW {
    DWORD SessionId;
    DWORD ProcessId;
    LPWSTR pProcessName;
    PSID pUserSid;
    DWORD NumberOfThreads;
    DWORD HandleCount;
    DWORD PagefileUsage;
    DWORD PeakPagefileUsage;
    DWORD WorkingSetSize;
    DWORD PeakWorkingSetSize;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER KernelTime;
} WTS_PROCESS_INFO_EXW, * PWTS_PROCESS_INFO_EXW;

typedef struct _WTS_PROCESS_INFO_EXA {
    DWORD SessionId;
    DWORD ProcessId;
    LPSTR pProcessName;
    PSID pUserSid;
    DWORD NumberOfThreads;
    DWORD HandleCount;
    DWORD PagefileUsage;
    DWORD PeakPagefileUsage;
    DWORD WorkingSetSize;
    DWORD PeakWorkingSetSize;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER KernelTime;
} WTS_PROCESS_INFO_EXA, * PWTS_PROCESS_INFO_EXA;

#ifdef UNICODE
#define WTS_PROCESS_INFO_EX  WTS_PROCESS_INFO_EXW
#define PWTS_PROCESS_INFO_EX PWTS_PROCESS_INFO_EXW
#else
#define WTS_PROCESS_INFO_EX  WTS_PROCESS_INFO_EXA
#define PWTS_PROCESS_INFO_EX PWTS_PROCESS_INFO_EXA
#endif

/*------------------------------------------------*/

typedef enum _WTS_TYPE_CLASS {
    WTSTypeProcessInfoLevel0,
    WTSTypeProcessInfoLevel1,
    WTSTypeSessionInfoLevel1,
} WTS_TYPE_CLASS;

BOOL WINAPI
WTSFreeMemoryExW(
    __in WTS_TYPE_CLASS WTSTypeClass,
    __in PVOID   pMemory,
    __in ULONG   NumberOfEntries
);

BOOL WINAPI
WTSFreeMemoryExA(
    __in WTS_TYPE_CLASS WTSTypeClass,
    __in PVOID   pMemory,
    __in ULONG   NumberOfEntries
);

#ifdef UNICODE
#define WTSFreeMemoryEx WTSFreeMemoryExW
#else
#define WTSFreeMemoryEx WTSFreeMemoryExA
#endif

/*------------------------------------------------*/

BOOL WINAPI
WTSEnumerateProcessesExW
(
    __in HANDLE    hServer,
    __inout DWORD *pLevel,
    __in DWORD SessionId,
    __out LPWSTR *ppProcessInfo,
    __out DWORD * pCount
);

BOOL WINAPI
WTSEnumerateProcessesExA
(
    __in HANDLE    hServer,
    __inout DWORD *pLevel,
    __in DWORD SessionId,
    __out LPSTR *ppProcessInfo,
    __out DWORD * pCount
);

#ifdef UNICODE
#define WTSEnumerateProcessesEx WTSEnumerateProcessesExW
#else
#define WTSEnumerateProcessesEx WTSEnumerateProcessesExA
#endif


/*------------------------------------------------*/
// Listener management APIs

typedef WCHAR WTSLISTENERNAMEW[WTS_LISTENER_NAME_LENGTH + 1 ];
typedef WTSLISTENERNAMEW *PWTSLISTENERNAMEW;
typedef CHAR WTSLISTENERNAMEA[WTS_LISTENER_NAME_LENGTH + 1 ];
typedef WTSLISTENERNAMEA *PWTSLISTENERNAMEA;

#ifdef UNICODE
#define WTSLISTENERNAME WTSLISTENERNAMEW
#define PWTSLISTENERNAME PWTSLISTENERNAMEW
#else
#define WTSLISTENERNAME WTSLISTENERNAMEA
#define PWTSLISTENERNAME PWTSLISTENERNAMEW
#endif

BOOL WINAPI
WTSEnumerateListenersW (
  __in                  HANDLE hServer,
  __in                  PVOID pReserved,
  __in          DWORD   Reserved,
  __out_ecount_opt(*pCount) PWTSLISTENERNAMEW pListeners,
  __inout       DWORD*  pCount
);

BOOL WINAPI
WTSEnumerateListenersA (
  __in                  HANDLE hServer,
  __in                  PVOID pReserved,
  __in                  DWORD Reserved,
  __out_ecount_opt(*pCount) PWTSLISTENERNAMEA pListeners,
  __inout       DWORD*  pCount
);

#ifdef UNICODE
#define WTSEnumerateListeners WTSEnumerateListenersW
#else
#define WTSEnumerateListeners WTSEnumerateListenersA
#endif

/*------------------------------------------------*/
// Listener Config, used by WTSQueryListenerConfig and WTSCreateListener

typedef struct _WTSLISTENERCONFIGW{
    ULONG version;
    ULONG fEnableListener;
    ULONG MaxConnectionCount;
    ULONG fPromptForPassword;
    ULONG fInheritColorDepth;
    ULONG ColorDepth;
    ULONG fInheritBrokenTimeoutSettings;
    ULONG BrokenTimeoutSettings;

    ULONG fDisablePrinterRedirection;
    ULONG fDisableDriveRedirection;
    ULONG fDisableComPortRedirection;
    ULONG fDisableLPTPortRedirection;
    ULONG fDisableClipboardRedirection;
    ULONG fDisableAudioRedirection;
    ULONG fDisablePNPRedirection;
    ULONG fDisableDefaultMainClientPrinter;

    ULONG LanAdapter;
    ULONG PortNumber;

    ULONG fInheritShadowSettings;
    ULONG ShadowSettings;

    ULONG TimeoutSettingsConnection;
    ULONG TimeoutSettingsDisconnection;
    ULONG TimeoutSettingsIdle;
   
    ULONG SecurityLayer;
    ULONG MinEncryptionLevel;   
    ULONG UserAuthentication;

    WCHAR Comment[ WTS_COMMENT_LENGTH + 1 ];
    WCHAR LogonUserName[USERNAME_LENGTH + 1 ];
    WCHAR LogonDomain[DOMAIN_LENGTH + 1 ];

    WCHAR WorkDirectory[ MAX_PATH + 1 ];
    WCHAR InitialProgram[ MAX_PATH + 1 ];
} WTSLISTENERCONFIGW, *PWTSLISTENERCONFIGW;

typedef struct _WTSLISTENERCONFIGA{
    ULONG version;
    ULONG fEnableListener;
    ULONG MaxConnectionCount;
    ULONG fPromptForPassword;
    ULONG fInheritColorDepth;
    ULONG ColorDepth;
    ULONG fInheritBrokenTimeoutSettings;
    ULONG BrokenTimeoutSettings;

    ULONG fDisablePrinterRedirection;
    ULONG fDisableDriveRedirection;
    ULONG fDisableComPortRedirection;
    ULONG fDisableLPTPortRedirection;
    ULONG fDisableClipboardRedirection;
    ULONG fDisableAudioRedirection;
    ULONG fDisablePNPRedirection;
    ULONG fDisableDefaultMainClientPrinter;

    ULONG LanAdapter;
    ULONG PortNumber;

    ULONG fInheritShadowSettings;
    ULONG ShadowSettings;

    ULONG TimeoutSettingsConnection;
    ULONG TimeoutSettingsDisconnection;
    ULONG TimeoutSettingsIdle;

    ULONG SecurityLayer;
    ULONG MinEncryptionLevel;  
    ULONG UserAuthentication;
    
    CHAR Comment[ WTS_COMMENT_LENGTH + 1 ];
    CHAR LogonUserName[USERNAME_LENGTH + 1 ];
    CHAR LogonDomain[DOMAIN_LENGTH + 1 ];

    CHAR WorkDirectory[ MAX_PATH + 1 ];
    CHAR InitialProgram[ MAX_PATH + 1 ];
} WTSLISTENERCONFIGA, *PWTSLISTENERCONFIGA;

BOOL WINAPI WTSQueryListenerConfigW (
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPWSTR pListenerName,
  __out         PWTSLISTENERCONFIGW pBuffer
);

BOOL WINAPI WTSQueryListenerConfigA (
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPSTR pListenerName,
  __out         PWTSLISTENERCONFIGA pBuffer
);

BOOL WINAPI WTSCreateListenerW (
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPWSTR pListenerName,
  __in          PWTSLISTENERCONFIGW pBuffer,
  __in          DWORD flag
);

BOOL WINAPI WTSCreateListenerA (
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPSTR pListenerName,
  __in          PWTSLISTENERCONFIGA pBuffer,
  __in          DWORD flag
);

BOOL WINAPI WTSSetListenerSecurityW(
  __in          HANDLE hServer, 
  __in          PVOID pReserved,  
  __in          DWORD Reserved, 
  __in          LPWSTR pListenerName, 
  __in          SECURITY_INFORMATION SecurityInformation,
  __in          PSECURITY_DESCRIPTOR pSecurityDescriptor);

BOOL WINAPI WTSSetListenerSecurityA(
  __in          HANDLE hServer, 
  __in          PVOID pReserved,  
  __in          DWORD Reserved, 
  __in          LPSTR pListenerName, 
  __in          SECURITY_INFORMATION SecurityInformation,
  __in          PSECURITY_DESCRIPTOR pSecurityDescriptor);

BOOL WINAPI WTSGetListenerSecurityW(
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPWSTR pListenerName, 
  __in          SECURITY_INFORMATION SecurityInformation,
  __out_opt     PSECURITY_DESCRIPTOR pSecurityDescriptor,
  __in          DWORD nLength,
  __out         LPDWORD lpnLengthNeeded);


BOOL WINAPI WTSGetListenerSecurityA(
  __in          HANDLE hServer,
  __in          PVOID pReserved,
  __in          DWORD Reserved,
  __in          LPSTR pListenerName,
  __in          SECURITY_INFORMATION SecurityInformation,
  __out_opt     PSECURITY_DESCRIPTOR pSecurityDescriptor,
  __in          DWORD nLength,
  __out         LPDWORD lpnLengthNeeded);

#ifdef UNICODE
#define WTSLISTENERCONFIG WTSLISTENERCONFIGW
#define PWTSLISTENERCONFIG PWTSLISTENERCONFIGW
#define WTSQueryListenerConfig WTSQueryListenerConfigW
#define WTSCreateListener WTSCreateListenerW
#define WTSSetListenerSecurity WTSSetListenerSecurityW
#define WTSGetListenerSecurity WTSGetListenerSecurityW
#else
#define WTSLISTENERCONFIG WTSLISTENERCONFIGA
#define PWTSLISTENERCONFIG PWTSLISTENERCONFIGA
#define WTSQueryListenerConfig WTSQueryListenerConfigA
#define WTSCreateListener WTSCreateListenerA
#define WTSSetListenerSecurity WTSSetListenerSecurityA
#define WTSGetListenerSecurity WTSGetListenerSecurityA
#endif

#ifdef __cplusplus
}
#endif

#endif  /* !_INC_WTSAPI */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\XCMCExt.h ===
/*
 *  XCMCEXT.H
 *  
 *  Purpose:
 *  Specifies constants and data structures for CMC Common extensions
 *  
 */

#ifndef _XCMCEXT_H
#define _XCMCEXT_H

#ifdef __cplusplus
extern "C" {
#endif

/* COMMON EXTENSIONS DECLARATIONS */

#define CMC_XS_COM                  ((CMC_uint32) 0)

/* FUNCTION EXTENSIONS */

/* Query for extension support in implementation */
#define CMC_X_COM_SUPPORT_EXT       ((CMC_uint32) 16)

typedef struct {
    CMC_uint32  item_code;
    CMC_flags   flags;
} CMC_X_COM_support;

#define CMC_X_COM_SUPPORTED             ((CMC_flags) 1)
#define CMC_X_COM_NOT_SUPPORTED         ((CMC_flags) 2)
#define CMC_X_COM_DATA_EXT_SUPPORTED    ((CMC_flags) 4)
#define CMC_X_COM_FUNC_EXT_SUPPORTED    ((CMC_flags) 8)
#define CMC_X_COM_SUP_EXCLUDE           ((CMC_flags) 16)

/* Get back a structure with configuration data */

#define CMC_X_COM_CONFIG_DATA       ((CMC_uint32) 17)

typedef struct {
    CMC_uint16              ver_spec;
    CMC_uint16              ver_implem;
    CMC_object_identifier FAR *character_set;
    CMC_enum                line_term;
    CMC_string              default_service;
    CMC_string              default_user;
    CMC_enum                req_password;
    CMC_enum                req_service;
    CMC_enum                req_user;
    CMC_boolean             ui_avail;
    CMC_boolean             sup_nomkmsgread;
    CMC_boolean             sup_counted_str;
} CMC_X_COM_configuration;


/* Check to see if/when a recipient can be sent */
#define CMC_X_COM_CAN_SEND_RECIP    ((CMC_uint32) 18)

#define CMC_X_COM_READY             ((CMC_enum) 0)
#define CMC_X_COM_NOT_READY         ((CMC_enum) 1)
#define CMC_X_COM_DEFER             ((CMC_enum) 2)

/* Save a message to the inbox */

#define CMC_X_COM_SAVE_MESSAGE      ((CMC_uint32) 19)

/* Get back a message structure for the message just sent */

#define CMC_X_COM_SENT_MESSAGE      ((CMC_uint32) 20)

/* DATA EXTENSIONS */

/* attach a receive date to message and message summary structures */
#define CMC_X_COM_TIME_RECEIVED     ((CMC_uint32) 128)

/* attach a unique id to resolved recipient structures */
#define CMC_X_COM_RECIP_ID          ((CMC_uint32) 129)

/* set character position in the message text to display an icon
   associated with a particular attachment */

#define CMC_X_COM_ATTACH_CHARPOS    ((CMC_uint32) 130)

#define CMC_X_COM_PRIORITY          ((CMC_uint32) 131)

#define CMC_X_COM_NORMAL            ((CMC_enum) 0)
#define CMC_X_COM_URGENT            ((CMC_enum) 1)
#define CMC_X_COM_LOW               ((CMC_enum) 2)

#ifdef __cplusplus
}       /* extern "C" */
#endif

#endif  /* _XCMCEXT_H */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\XCMCMSX2.h ===
/*
 *  XCMCMSX2.H
 *  
 *  Purpose:
 *  Specifies constants and data structures for Microsoft CMC extensions
 *  set update (forms extensions)
 *  
 */

#ifndef _XCMCMSX2_H
#define _XCMCMSX2_H

#ifndef XCMCMSXT_H
#   include <xcmcmsxt.h>
#endif

#ifndef MAPIDEFS_H
#   include <mapidefs.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Get an extended MAPI session from a CMC session */
#ifdef MAPIX_H

STDMETHODIMP_(SCODE)
ScMAPIXFromCMC(CMC_session_id cmc_session,
                ULONG ulFlags,
                LPCIID lpInterface,
                LPMAPISESSION FAR * lppMAPISession);

#endif /* MAPIX_H */

/* Extra flag for CMC_X_MS_ATTACH_DATA */
#define CMC_X_MS_ATTACH_MESSAGE         ((CMC_flags) 4)

/* Attachment descriptor for CMC_X_ATTACH_DATA */
typedef struct {
    CMC_message_reference FAR *message;
    CMC_uint32              id;
    CMC_buffer              object;
} CMC_X_MS_ATTACH;  

#ifdef __cplusplus
}      /* extern "C" */
#endif

#endif /* _XCMCMSX2_H */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\XCMCMSXT.h ===
/*
 *  XCMCMSXT.H
 *  
 *  Purpose:
 *  Specifies constants and data structures for Microsoft CMC extension set
 *  
 */

#ifndef XCMCMSXT_H
#define XCMCMSXT_H

#ifdef __cplusplus
extern "C" {
#endif

/***********************************************************************
 Warning: Value for MS_EXT_SET_ID has not been finalized yet.
 ***********************************************************************/
#define MS_EXT_SET_ID                   (512)

#define CMC_XS_MS                       ((CMC_uint32) MS_EXT_SET_ID)

/*** FUNCTION EXTENSIONS ***/

/* Describes extra flags used for logging on/off a session */
#define CMC_X_MS_SESSION_FLAGS          ((CMC_uint32) MS_EXT_SET_ID + 16)
#define CMC_X_MS_NEW_SESSION            ((CMC_flags) 1)
#define CMC_X_MS_FORCE_DOWNLOAD         ((CMC_flags) 4)

/* Flags used by various functions */
#define CMC_X_MS_FUNCTION_FLAGS         ((CMC_uint32) MS_EXT_SET_ID + 17)
#define CMC_X_MS_READ_ENV_ONLY          ((CMC_flags) 1)
#define CMC_X_MS_READ_BODY_AS_FILE      ((CMC_flags) 2)
#define CMC_X_MS_LIST_GUARANTEE_FIFO    ((CMC_flags) 4)
#define CMC_X_MS_AB_NO_MODIFY           ((CMC_flags) 8)

/* Extra options when displaying the Address Book UI */
#define CMC_X_MS_ADDRESS_UI             ((CMC_uint32) MS_EXT_SET_ID + 18)

/*** DATA EXTENSIONS ***/

/* Extra flags for attachments */
#define CMC_X_MS_ATTACH_DATA            ((CMC_uint32) MS_EXT_SET_ID + 128)
#define CMC_X_MS_ATTACH_OLE             ((CMC_flags) 1)
#define CMC_X_MS_ATTACH_OLE_STATIC      ((CMC_flags) 2)

/* Extra data for messages */
#define CMC_X_MS_MESSAGE_DATA           ((CMC_uint32) MS_EXT_SET_ID + 129)
#define CMC_X_MS_MSG_RECEIPT_REQ        ((CMC_flags) 1)

#ifdef __cplusplus
}      /* extern "C" */
#endif

#endif /* XCMCMSXT_H */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\xa.h ===
//  Copyright (C) 1995-1999 Microsoft Corporation.  All rights reserved.
/* -----------------------------------------------------------------
 * Microsoft Distributed Transaction Coordinator
 * Microsoft Corporation, 1995.
 *
 * File : xa.h 
 * 
 * Contents : This file is derived from xa.h as it appears in 
 * "Distributed Transaction Processing: The XA Specification", 
 * November 93, X/Open Company Limited.
 *
 */

/*
 * Start of xa.h header
 *
 * Define a symbol to prevent multiple inclusion of this header file
 */

#ifndef XA_H
#define XA_H
/*
 * Transaction branch identification: XID and NULLXID:
 */
#define XIDDATASIZE		128			/* size in bytes */
#define MAXGTRIDSIZE    64  		/* maximum size in bytes of gtrid */
#define MAXBQUALSIZE    64  		/* maximum size in bytes of bqual */

#ifndef _XID_T_DEFINED
#define _XID_T_DEFINED
struct xid_t
{
	long formatID;					/* format identifier */
	long gtrid_length;				/* value not to exceed 64 */
	long bqual_length;				/* value not to exceed 64 */
	char data[XIDDATASIZE];
};
#endif

typedef struct xid_t XID;
/*
 * A value of -1 in formatID means that the XID is null.
 */
/*
 * Declarations of routines by which RMs call TMs:
 */

int __cdecl ax_reg(int, XID *, long);
int __cdecl ax_unreg(int, long);


/*
 * XA Switch Data Structure
 */
#define RMNAMESZ	32									/* length of resource manager name, */
														/* including the null terminator */
#define MAXINFOSIZE 256									/* maximum size in bytes of xa_info strings, */
														/* including the null terminator */

#ifndef _XA_SWITCH_T_DEFINED
#define _XA_SWITCH_T_DEFINED
struct xa_switch_t
{
  char name[RMNAMESZ];									/* name of resource manager */
  long flags;											/* resource manager specific options */
  long version;											/* must be 0 */
  int (__cdecl *xa_open_entry)(char *, int, long);		/* xa_open function pointer */
  int (__cdecl *xa_close_entry)(char *, int, long);		/* xa_close function pointer*/
  int (__cdecl *xa_start_entry)(XID *, int, long);		/* xa_start function pointer */
  int (__cdecl *xa_end_entry)(XID *, int, long);		/* xa_end function pointer */
  int (__cdecl *xa_rollback_entry)(XID *, int, long);	/* xa_rollback function pointer */
  int (__cdecl *xa_prepare_entry)(XID *, int, long);	/* xa_prepare function pointer */
  int (__cdecl *xa_commit_entry)(XID *, int, long);		/* xa_commit function pointer */
  int (__cdecl *xa_recover_entry)(XID *, long, int, long);
														/* xa_recover function pointer*/
  int (__cdecl *xa_forget_entry)(XID *, int, long);		/* xa_forget function pointer */
  int (__cdecl *xa_complete_entry)(int *, int *, int, long);
														/* xa_complete function pointer */
};

typedef struct xa_switch_t xa_switch_t;
#endif

/*
 * Flag definitions for the RM switch
 */
#define TMNOFLAGS		0x00000000L						/* no resource manager features selected */
#define TMREGISTER		0x00000001L						/* resource manager dynamically registers */
#define TMNOMIGRATE		0x00000002L						/* resource manager does not support association migration */
#define TMUSEASYNC		0x00000004L						/* resource manager supports asynchronous operations */
/*
 * Flag definitions for xa_ and ax_ routines
 */
/* use TMNOFLAGS, defined above, when not specifying other flags */
#define TMASYNC			0x80000000L						/* perform routine asynchronously */
#define TMONEPHASE		0x40000000L						/* caller is using one-phase commit optimisation */
#define TMFAIL			0x20000000L						/* dissociates caller and marks transaction branch rollback-only */
#define TMNOWAIT		0x10000000L						/* return if blocking condition exists */
#define TMRESUME		0x08000000L						/* caller is resuming association with suspended transaction branch */
#define TMSUCCESS		0x04000000L						/* dissociate caller from transaction branch */
#define TMSUSPEND		0x02000000L						/* caller is suspending, not ending, association */
#define TMSTARTRSCAN	0x01000000L						/* start a recovery scan */
#define TMENDRSCAN		0x00800000L						/* end a recovery scan */
#define TMMULTIPLE		0x00400000L						/* wait for any asynchronous operation */
#define TMJOIN			0x00200000L						/* caller is joining existing transaction branch */
#define TMMIGRATE		0x00100000L						/* caller intends to perform migration */
/*
 * ax_() return codes (transaction manager reports to resource manager)
 */
#define TM_JOIN			2								/* caller is joining existing transaction branch */
#define TM_RESUME		1								/* caller is resuming association with suspended transaction branch */
#define TM_OK			0								/* normal execution */
#define TMER_TMERR		(-1)							/* an error occurred in the transaction manager */
#define TMER_INVAL		(-2)							/* invalid arguments were given */
#define TMER_PROTO		(-3)							/* routine invoked in an improper context */
/*
 * xa_() return codes (resource manager reports to transaction manager)
 */
#define XA_RBBASE		100								/* The inclusive lower bound of the rollback codes */
#define XA_RBROLLBACK	XA_RBBASE						/* The rollback was caused by an unspecified reason */
#define XA_RBCOMMFAIL	XA_RBBASE+1						/* The rollback was caused by a communication failure */
#define XA_RBDEADLOCK	XA_RBBASE+2						/* A deadlock was detected */
#define XA_RBINTEGRITY	XA_RBBASE+3						/* A condition that violates the integrity of the resources was detected */
#define XA_RBOTHER		XA_RBBASE+4						/* The resource manager rolled back the transaction branch for a reason not on this list */
#define XA_RBPROTO		XA_RBBASE+5						/* A protocol error occurred in the resource manager */
#define XA_RBTIMEOUT	XA_RBBASE+6						/* A transaction branch took too long */
#define XA_RBTRANSIENT	XA_RBBASE+7						/* May retry the transaction branch */
#define XA_RBEND		XA_RBTRANSIENT					/* The inclusive upper bound of the rollback codes */

#define XA_NOMIGRATE	9								/* resumption must occur where suspension occurred */
#define XA_HEURHAZ		8								/* the transaction branch may have been heuristically completed */
#define XA_HEURCOM		7								/* the transaction branch has been heuristically committed */
#define XA_HEURRB		6								/* the transaction branch has been heuristically rolled back */
#define XA_HEURMIX		5								/* the transaction branch has been heuristically committed and rolled back */
#define XA_RETRY		4								/* routine returned with no effect and may be re-issued */
#define XA_RDONLY		3								/* the transaction branch was read-only and has been committed */
#define XA_OK			0								/* normal execution */
#define XAER_ASYNC		(-2)							/* asynchronous operation already outstanding */
#define XAER_RMERR		(-3)							/* a resource manager error occurred in the transaction branch */
#define XAER_NOTA		(-4)							/* the XID is not valid */
#define XAER_INVAL		(-5)							/* invalid arguments were given */
#define XAER_PROTO		(-6)							/* routine invoked in an improper context */
#define XAER_RMFAIL		(-7)							/* resource manager unavailable */
#define XAER_DUPID		(-8)							/* the XID already exists */
#define XAER_OUTSIDE	(-9)							/* resource manager doing work outside */
														/* global transaction */
/*
 * XA entry point type definitions:
 */

typedef int (__cdecl *XA_OPEN_EPT)(char *, int, long);	/* xa_open entry point */
typedef int (__cdecl *XA_CLOSE_EPT)(char *, int, long);	/* xa_close entry point*/
typedef int (__cdecl *XA_START_EPT)(XID *, int, long);	/* xa_start entry point */
typedef int (__cdecl *XA_END_EPT)(XID *, int, long);	/* xa_end entry point */
typedef int (__cdecl *XA_ROLLBACK_EPT)(XID *, int, long);
														/* xa_rollback entry point */
typedef int (__cdecl *XA_PREPARE_EPT)(XID *, int, long);/* xa_prepare entry point */
typedef int (__cdecl *XA_COMMIT_EPT)(XID *, int, long);	/* xa_commit entry point */
typedef int (__cdecl *XA_RECOVER_EPT)(XID *, long, int, long);
														/* xa_recover entry point*/
typedef int (__cdecl *XA_FORGET_EPT)(XID *, int, long);	/* xa_forget entry point */
typedef int (__cdecl *XA_COMPLETE_EPT)(int *, int *, int, long);
														/* xa_complete entry point */

#endif /* ifndef XA_H */
/*
 * End of xa.h header
 */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\Xinput.h ===
/***************************************************************************
*                                                                          *
*   XInput.h -- This module defines XBOX controller APIs                   *
*               and constansts for the Windows platform.                   *
*                                                                          *
*   Copyright (c) Microsoft Corp. All rights reserved.                     *
*                                                                          *
***************************************************************************/
#ifndef _XINPUT_H_
#define _XINPUT_H_

#include <windef.h>

// Current name of the DLL shipped in the same SDK as this header.
// The name reflects the current version
#define XINPUT_DLL_A  "xinput9_1_0.dll"
#define XINPUT_DLL_W L"xinput9_1_0.dll"
#ifdef UNICODE
    #define XINPUT_DLL XINPUT_DLL_W
#else
    #define XINPUT_DLL XINPUT_DLL_A
#endif 

//
// Device types available in XINPUT_CAPABILITIES
//
#define XINPUT_DEVTYPE_GAMEPAD          0x01

//
// Device subtypes available in XINPUT_CAPABILITIES
//
#define XINPUT_DEVSUBTYPE_GAMEPAD       0x01

//
// Flags for XINPUT_CAPABILITIES
//
#define XINPUT_CAPS_VOICE_SUPPORTED     0x0004

//
// Constants for gamepad buttons
//
#define XINPUT_GAMEPAD_DPAD_UP          0x0001
#define XINPUT_GAMEPAD_DPAD_DOWN        0x0002
#define XINPUT_GAMEPAD_DPAD_LEFT        0x0004
#define XINPUT_GAMEPAD_DPAD_RIGHT       0x0008
#define XINPUT_GAMEPAD_START            0x0010
#define XINPUT_GAMEPAD_BACK             0x0020
#define XINPUT_GAMEPAD_LEFT_THUMB       0x0040
#define XINPUT_GAMEPAD_RIGHT_THUMB      0x0080
#define XINPUT_GAMEPAD_LEFT_SHOULDER    0x0100
#define XINPUT_GAMEPAD_RIGHT_SHOULDER   0x0200
#define XINPUT_GAMEPAD_A                0x1000
#define XINPUT_GAMEPAD_B                0x2000
#define XINPUT_GAMEPAD_X                0x4000
#define XINPUT_GAMEPAD_Y                0x8000

//
// Gamepad thresholds
//
#define XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE  7849
#define XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE 8689
#define XINPUT_GAMEPAD_TRIGGER_THRESHOLD    30

//
// Flags to pass to XInputGetCapabilities
//
#define XINPUT_FLAG_GAMEPAD             0x00000001


//
// Structures used by XInput APIs
//
typedef struct _XINPUT_GAMEPAD
{
    WORD                                wButtons;
    BYTE                                bLeftTrigger;
    BYTE                                bRightTrigger;
    SHORT                               sThumbLX;
    SHORT                               sThumbLY;
    SHORT                               sThumbRX;
    SHORT                               sThumbRY;
} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;

typedef struct _XINPUT_STATE
{
    DWORD                               dwPacketNumber;
    XINPUT_GAMEPAD                      Gamepad;
} XINPUT_STATE, *PXINPUT_STATE;

typedef struct _XINPUT_VIBRATION
{
    WORD                                wLeftMotorSpeed;
    WORD                                wRightMotorSpeed;
} XINPUT_VIBRATION, *PXINPUT_VIBRATION;

typedef struct _XINPUT_CAPABILITIES
{
    BYTE                                Type;
    BYTE                                SubType;
    WORD                                Flags;
    XINPUT_GAMEPAD                      Gamepad;
    XINPUT_VIBRATION                    Vibration;
} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;


//
// XInput APIs
//
#ifdef __cplusplus
extern "C" {
#endif

DWORD WINAPI XInputGetState
(
    DWORD         dwUserIndex,  // [in] Index of the gamer associated with the device
    XINPUT_STATE* pState        // [out] Receives the current state
);

DWORD WINAPI XInputSetState
(
    DWORD             dwUserIndex,  // [in] Index of the gamer associated with the device
    XINPUT_VIBRATION* pVibration    // [in, out] The vibration information to send to the controller
);

DWORD WINAPI XInputGetCapabilities
(
    DWORD                dwUserIndex,   // [in] Index of the gamer associated with the device
    DWORD                dwFlags,       // [in] Input flags that identify the device type
    XINPUT_CAPABILITIES* pCapabilities  // [out] Receives the capabilities
);

DWORD WINAPI XInputGetDSoundAudioDeviceGuids
(
    DWORD dwUserIndex,          // [in] Index of the gamer associated with the device
    GUID* pDSoundRenderGuid,    // [out] DSound device ID for render
    GUID* pDSoundCaptureGuid    // [out] DSound device ID for capture
);

#ifdef __cplusplus
}
#endif

#endif  //_XINPUT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\XCMC.h ===
/*BEGIN CMC INTERFACE */

#ifndef _XCMC_H
#define _XCMC_H

#ifdef __cplusplus
extern "C" {
#endif

/*BASIC DATA TYPES*/
#ifndef DIFFERENT_PLATFORM
typedef char                CMC_sint8;
typedef short               CMC_sint16;
typedef long int            CMC_sint32;
typedef unsigned short int  CMC_uint16;
typedef unsigned long int   CMC_uint32;
typedef void far *          CMC_buffer;
typedef char far *          CMC_string;
#endif

typedef CMC_uint16          CMC_boolean;
typedef CMC_sint32          CMC_enum;
typedef CMC_uint32          CMC_return_code;
typedef CMC_uint32          CMC_flags;
typedef CMC_string          CMC_object_identifier;

#define CMC_FALSE   ((CMC_boolean)0)
#define CMC_TRUE    ((CMC_boolean)1)

/*DATA STRUCTURES*/

/*COUNTED STRING*/
typedef struct {
    CMC_uint32          length;
    char                string[1];
} CMC_counted_string;

/*SESSION ID*/
typedef CMC_uint32      CMC_session_id;

/*TIME*/
/* unusedX fields needed to align struct on 4-byte boundary */
typedef struct {
    CMC_sint8           second;
    CMC_sint8           minute;
    CMC_sint8           hour;
    CMC_sint8           day;
    CMC_sint8           month;
    CMC_sint8           year;
    CMC_sint8           isdst;
    CMC_sint8           unused1;
    CMC_sint16          tmzone;
    CMC_sint16          unused2;
} CMC_time;

#define CMC_NO_TIMEZONE                     ((CMC_sint16) 0x8000)

typedef CMC_uint32          CMC_ui_id;

/*EXTENSION*/
typedef struct {
    CMC_uint32              item_code;
    CMC_uint32              item_data;
    CMC_buffer              item_reference;
    CMC_flags               extension_flags;
} CMC_extension;

/* EXTENSION FLAGS */
#define CMC_EXT_REQUIRED                    ((CMC_flags) 0x00010000)
#define CMC_EXT_OUTPUT                      ((CMC_flags) 0x00020000)
#define CMC_EXT_LAST_ELEMENT                ((CMC_flags) 0x80000000)
#define CMC_EXT_RSV_FLAG_MASK               ((CMC_flags) 0xFFFF0000)
#define CMC_EXT_ITEM_FLAG_MASK              ((CMC_flags) 0x0000FFFF)

/*ATTACHMENT*/
typedef struct {
    CMC_string              attach_title;
    CMC_object_identifier   attach_type;
    CMC_string              attach_filename;
    CMC_flags               attach_flags;
    CMC_extension FAR       *attach_extensions;
} CMC_attachment;

/* ATTACHMENT FLAGS */
#define CMC_ATT_APP_OWNS_FILE               ((CMC_flags) 1)
#define CMC_ATT_LAST_ELEMENT                ((CMC_flags) 0x80000000)

#define CMC_ATT_OID_BINARY                  "? ? ? ? ? ?"
#define CMC_ATT_OID_TEXT                    "? ? ? ? ? ?"

/*MESSAGE REFERENCE*/
typedef CMC_counted_string  CMC_message_reference;

/*RECIPIENT*/
typedef struct {
    CMC_string              name;
    CMC_enum                name_type;
    CMC_string              address;
    CMC_enum                role;
    CMC_flags               recip_flags;
    CMC_extension FAR       *recip_extensions;
} CMC_recipient;

/* NAME TYPES */
#define CMC_TYPE_UNKNOWN                    ((CMC_enum) 0)
#define CMC_TYPE_INDIVIDUAL                 ((CMC_enum) 1)
#define CMC_TYPE_GROUP                      ((CMC_enum) 2)

/* ROLES */
#define CMC_ROLE_TO                         ((CMC_enum) 0)
#define CMC_ROLE_CC                         ((CMC_enum) 1)
#define CMC_ROLE_BCC                        ((CMC_enum) 2)
#define CMC_ROLE_ORIGINATOR                 ((CMC_enum) 3)
#define CMC_ROLE_AUTHORIZING_USER           ((CMC_enum) 4)

/* RECIPIENT FLAGS */
#define CMC_RECIP_IGNORE                    ((CMC_flags) 1)
#define CMC_RECIP_LIST_TRUNCATED            ((CMC_flags) 2)
#define CMC_RECIP_LAST_ELEMENT              ((CMC_flags) 0x80000000)

/*MESSAGE*/
typedef struct {
    CMC_message_reference FAR   *message_reference;
    CMC_string              message_type;
    CMC_string              subject;
    CMC_time                time_sent;
    CMC_string              text_note;
    CMC_recipient FAR       *recipients;
    CMC_attachment FAR      *attachments;
    CMC_flags               message_flags;
    CMC_extension FAR       *message_extensions;
} CMC_message;

/* MESSAGE FLAGS */
#define CMC_MSG_READ                        ((CMC_flags) 1)
#define CMC_MSG_TEXT_NOTE_AS_FILE           ((CMC_flags) 2)
#define CMC_MSG_UNSENT                      ((CMC_flags) 4)
#define CMC_MSG_LAST_ELEMENT                ((CMC_flags) 0x80000000)

/*MESSAGE SUMMARY*/
typedef struct {
    CMC_message_reference FAR   *message_reference;
    CMC_string              message_type;
    CMC_string              subject;
    CMC_time                time_sent;
    CMC_uint32              byte_length;
    CMC_recipient FAR       *originator;
    CMC_flags               summary_flags;
    CMC_extension FAR       *message_summary_extensions;
} CMC_message_summary;

/* MESSAGE SUMMARY FLAGS */
#define CMC_SUM_READ                        ((CMC_flags) 1)
#define CMC_SUM_UNSENT                      ((CMC_flags) 2)
#define CMC_SUM_LAST_ELEMENT                ((CMC_flags) 0x80000000)

/*CMC FUNCTIONS */

/*CROSS FUNCTION FLAGS */
#define CMC_ERROR_UI_ALLOWED                ((CMC_flags) 0x01000000)
#define CMC_LOGON_UI_ALLOWED                ((CMC_flags) 0x02000000)
#define CMC_COUNTED_STRING_TYPE             ((CMC_flags) 0x04000000)

/*SEND*/
CMC_return_code FAR PASCAL
cmc_send(
    CMC_session_id          session,
    CMC_message FAR         *message,
    CMC_flags               send_flags,
    CMC_ui_id               ui_id,
    CMC_extension FAR       *send_extensions
);

#define CMC_SEND_UI_REQUESTED               ((CMC_flags) 1)

/*SEND DOCUMENT*/
CMC_return_code FAR PASCAL
cmc_send_documents(
    CMC_string              recipient_addresses,
    CMC_string              subject,
    CMC_string              text_note,
    CMC_flags               send_doc_flags,
    CMC_string              file_paths,
    CMC_string              file_names,
    CMC_string              delimiter,
    CMC_ui_id               ui_id
);

#define CMC_FIRST_ATTACH_AS_TEXT_NOTE       ((CMC_flags) 2)

/*ACT ON*/
CMC_return_code FAR PASCAL
cmc_act_on(
    CMC_session_id          session,
    CMC_message_reference FAR   *message_reference,
    CMC_enum                operation,
    CMC_flags               act_on_flags,
    CMC_ui_id               ui_id,
    CMC_extension FAR       *act_on_extensions
);

#define CMC_ACT_ON_EXTENDED                 ((CMC_enum) 0)
#define CMC_ACT_ON_DELETE                   ((CMC_enum) 1)

/*LIST*/
CMC_return_code FAR PASCAL
cmc_list(
    CMC_session_id          session,
    CMC_string              message_type,
    CMC_flags               list_flags,
    CMC_message_reference FAR   *seed,
    CMC_uint32 FAR          *count,
    CMC_ui_id               ui_id,
    CMC_message_summary FAR * FAR *result,
    CMC_extension FAR       *list_extensions
);

#define CMC_LIST_UNREAD_ONLY                ((CMC_flags) 1)
#define CMC_LIST_MSG_REFS_ONLY              ((CMC_flags) 2)
#define CMC_LIST_COUNT_ONLY                 ((CMC_flags) 4)

#define CMC_LENGTH_UNKNOWN          0xFFFFFFFF

/*READ*/
CMC_return_code FAR PASCAL
cmc_read(
    CMC_session_id          session,
    CMC_message_reference FAR   *message_reference,
    CMC_flags               read_flags,
    CMC_message FAR * FAR   *message,
    CMC_ui_id               ui_id,
    CMC_extension FAR       *read_extensions
);

#define CMC_DO_NOT_MARK_AS_READ             ((CMC_flags) 1)
#define CMC_MSG_AND_ATT_HDRS_ONLY           ((CMC_flags) 2)
#define CMC_READ_FIRST_UNREAD_MESSAGE       ((CMC_flags) 4)

/*LOOK UP*/
CMC_return_code FAR PASCAL
cmc_look_up(
    CMC_session_id          session,
    CMC_recipient FAR       *recipient_in,
    CMC_flags               look_up_flags,
    CMC_ui_id               ui_id,
    CMC_uint32 FAR          *count,
    CMC_recipient FAR * FAR *recipient_out,
    CMC_extension FAR       *look_up_extensions
);

#define CMC_LOOKUP_RESOLVE_PREFIX_SEARCH    ((CMC_flags) 1)
#define CMC_LOOKUP_RESOLVE_IDENTITY         ((CMC_flags) 2)
#define CMC_LOOKUP_RESOLVE_UI               ((CMC_flags) 4)
#define CMC_LOOKUP_DETAILS_UI               ((CMC_flags) 8)
#define CMC_LOOKUP_ADDRESSING_UI            ((CMC_flags) 16)

/*FREE*/
CMC_return_code FAR PASCAL
cmc_free(
    CMC_buffer              memory
);

/* LOGOFF */
CMC_return_code FAR PASCAL
cmc_logoff(
    CMC_session_id          session,
    CMC_ui_id               ui_id,
    CMC_flags               logoff_flags,
    CMC_extension FAR       *logoff_extensions
);

#define CMC_LOGOFF_UI_ALLOWED               ((CMC_flags) 1)

/* LOGON */
CMC_return_code FAR PASCAL
cmc_logon(
    CMC_string              service,
    CMC_string              user,
    CMC_string              password,
    CMC_object_identifier   character_set,
    CMC_ui_id               ui_id,
    CMC_uint16              caller_cmc_version,
    CMC_flags               logon_flags,
    CMC_session_id FAR      *session,
    CMC_extension FAR       *logon_extensions
);

#define CMC_VERSION         ((CMC_uint16) 100)

/* QUERY CONFIGURATION */
CMC_return_code FAR PASCAL
cmc_query_configuration(
    CMC_session_id          session,
    CMC_enum                item,
    CMC_buffer              reference,
    CMC_extension FAR       *config_extensions
);

/*QUERY CONFIGURATION ENUMS */
#define CMC_CONFIG_CHARACTER_SET            ((CMC_enum) 1)
#define CMC_CONFIG_LINE_TERM                ((CMC_enum) 2)
#define CMC_CONFIG_DEFAULT_SERVICE          ((CMC_enum) 3)
#define CMC_CONFIG_DEFAULT_USER             ((CMC_enum) 4)
#define CMC_CONFIG_REQ_PASSWORD             ((CMC_enum) 5)
#define CMC_CONFIG_REQ_SERVICE              ((CMC_enum) 6)
#define CMC_CONFIG_REQ_USER                 ((CMC_enum) 7)
#define CMC_CONFIG_UI_AVAIL                 ((CMC_enum) 8)
#define CMC_CONFIG_SUP_NOMKMSGREAD          ((CMC_enum) 9)
#define CMC_CONFIG_SUP_COUNTED_STR          ((CMC_enum) 10)
#define CMC_CONFIG_VER_IMPLEM               ((CMC_enum) 11)
#define CMC_CONFIG_VER_SPEC                 ((CMC_enum) 12)

/* CONFIG LINE TERM ENUM */
#define CMC_LINE_TERM_CRLF                  ((CMC_enum) 0)
#define CMC_LINE_TERM_CR                    ((CMC_enum) 1)
#define CMC_LINE_TERM_LF                    ((CMC_enum) 2)

/* CONFIG REQUIRED LOGON PARAMETER ENUM */
#define CMC_REQUIRED_NO                     ((CMC_enum) 0)
#define CMC_REQUIRED_YES                    ((CMC_enum) 1)
#define CMC_REQUIRED_OPT                    ((CMC_enum) 2)

/* DEFINED OBJECT ID'S FOR CHARACTER SETS */
#define CMC_CHAR_CP437                      "1 2 840 113556 3 2 437"
#define CMC_CHAR_CP850                      "1 2 840 113556 3 2 850"
#define CMC_CHAR_CP1252                     "1 2 840 113556 3 2 1252"
#define CMC_CHAR_ISTRING                    "1 2 840 113556 3 2 0"
#define CMC_CHAR_UNICODE                    "1 2 840 113556 3 2 1"

/* RETURN CODE FLAGS */
#define CMC_ERROR_DISPLAYED                 ((CMC_return_code) 0x00008000)
#define CMC_ERROR_RSV_MASK                  ((CMC_return_code) 0x0000FFFF)
#define CMC_ERROR_IMPL_MASK                 ((CMC_return_code) 0xFFFF0000)

/* RETURN CODES */
#define CMC_SUCCESS                         ((CMC_return_code) 0)

#define CMC_E_AMBIGUOUS_RECIPIENT           ((CMC_return_code) 1)
#define CMC_E_ATTACHMENT_NOT_FOUND          ((CMC_return_code) 2)
#define CMC_E_ATTACHMENT_OPEN_FAILURE       ((CMC_return_code) 3)
#define CMC_E_ATTACHMENT_READ_FAILURE       ((CMC_return_code) 4)
#define CMC_E_ATTACHMENT_WRITE_FAILURE      ((CMC_return_code) 5)
#define CMC_E_COUNTED_STRING_UNSUPPORTED    ((CMC_return_code) 6)
#define CMC_E_DISK_FULL                     ((CMC_return_code) 7)
#define CMC_E_FAILURE                       ((CMC_return_code) 8)
#define CMC_E_INSUFFICIENT_MEMORY           ((CMC_return_code) 9)
#define CMC_E_INVALID_CONFIGURATION         ((CMC_return_code) 10)
#define CMC_E_INVALID_ENUM                  ((CMC_return_code) 11)
#define CMC_E_INVALID_FLAG                  ((CMC_return_code) 12)
#define CMC_E_INVALID_MEMORY                ((CMC_return_code) 13)
#define CMC_E_INVALID_MESSAGE_PARAMETER     ((CMC_return_code) 14)
#define CMC_E_INVALID_MESSAGE_REFERENCE     ((CMC_return_code) 15)
#define CMC_E_INVALID_PARAMETER             ((CMC_return_code) 16)
#define CMC_E_INVALID_SESSION_ID            ((CMC_return_code) 17)
#define CMC_E_INVALID_UI_ID                 ((CMC_return_code) 18)
#define CMC_E_LOGON_FAILURE                 ((CMC_return_code) 19)
#define CMC_E_MESSAGE_IN_USE                ((CMC_return_code) 20)
#define CMC_E_NOT_SUPPORTED                 ((CMC_return_code) 21)
#define CMC_E_PASSWORD_REQUIRED             ((CMC_return_code) 22)
#define CMC_E_RECIPIENT_NOT_FOUND           ((CMC_return_code) 23)
#define CMC_E_SERVICE_UNAVAILABLE           ((CMC_return_code) 24)
#define CMC_E_TEXT_TOO_LARGE                ((CMC_return_code) 25)
#define CMC_E_TOO_MANY_FILES                ((CMC_return_code) 26)
#define CMC_E_TOO_MANY_RECIPIENTS           ((CMC_return_code) 27)
#define CMC_E_UNABLE_TO_NOT_MARK_AS_READ    ((CMC_return_code) 28)
#define CMC_E_UNRECOGNIZED_MESSAGE_TYPE     ((CMC_return_code) 29)
#define CMC_E_UNSUPPORTED_ACTION            ((CMC_return_code) 30)
#define CMC_E_UNSUPPORTED_CHARACTER_SET     ((CMC_return_code) 31)
#define CMC_E_UNSUPPORTED_DATA_EXT          ((CMC_return_code) 32)
#define CMC_E_UNSUPPORTED_FLAG              ((CMC_return_code) 33)
#define CMC_E_UNSUPPORTED_FUNCTION_EXT      ((CMC_return_code) 34)
#define CMC_E_UNSUPPORTED_VERSION           ((CMC_return_code) 35)
#define CMC_E_USER_CANCEL                   ((CMC_return_code) 36)
#define CMC_E_USER_NOT_LOGGED_ON            ((CMC_return_code) 37)

#ifdef __cplusplus
}       /* extern "C" */
#endif

#endif  /* _XCMC_H */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wtsprotocol.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wtsprotocol.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wtsprotocol_h__
#define __wtsprotocol_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWTSProtocolManager_FWD_DEFINED__
#define __IWTSProtocolManager_FWD_DEFINED__
typedef interface IWTSProtocolManager IWTSProtocolManager;
#endif 	/* __IWTSProtocolManager_FWD_DEFINED__ */


#ifndef __IWTSProtocolListener_FWD_DEFINED__
#define __IWTSProtocolListener_FWD_DEFINED__
typedef interface IWTSProtocolListener IWTSProtocolListener;
#endif 	/* __IWTSProtocolListener_FWD_DEFINED__ */


#ifndef __IWTSProtocolListenerCallback_FWD_DEFINED__
#define __IWTSProtocolListenerCallback_FWD_DEFINED__
typedef interface IWTSProtocolListenerCallback IWTSProtocolListenerCallback;
#endif 	/* __IWTSProtocolListenerCallback_FWD_DEFINED__ */


#ifndef __IWTSProtocolConnection_FWD_DEFINED__
#define __IWTSProtocolConnection_FWD_DEFINED__
typedef interface IWTSProtocolConnection IWTSProtocolConnection;
#endif 	/* __IWTSProtocolConnection_FWD_DEFINED__ */


#ifndef __IWTSProtocolConnectionCallback_FWD_DEFINED__
#define __IWTSProtocolConnectionCallback_FWD_DEFINED__
typedef interface IWTSProtocolConnectionCallback IWTSProtocolConnectionCallback;
#endif 	/* __IWTSProtocolConnectionCallback_FWD_DEFINED__ */


#ifndef __IWTSProtocolShadowConnection_FWD_DEFINED__
#define __IWTSProtocolShadowConnection_FWD_DEFINED__
typedef interface IWTSProtocolShadowConnection IWTSProtocolShadowConnection;
#endif 	/* __IWTSProtocolShadowConnection_FWD_DEFINED__ */


#ifndef __IWTSProtocolShadowCallback_FWD_DEFINED__
#define __IWTSProtocolShadowCallback_FWD_DEFINED__
typedef interface IWTSProtocolShadowCallback IWTSProtocolShadowCallback;
#endif 	/* __IWTSProtocolShadowCallback_FWD_DEFINED__ */


#ifndef __IWTSProtocolLicenseConnection_FWD_DEFINED__
#define __IWTSProtocolLicenseConnection_FWD_DEFINED__
typedef interface IWTSProtocolLicenseConnection IWTSProtocolLicenseConnection;
#endif 	/* __IWTSProtocolLicenseConnection_FWD_DEFINED__ */


#ifndef __IWTSProtocolLogonErrorRedirector_FWD_DEFINED__
#define __IWTSProtocolLogonErrorRedirector_FWD_DEFINED__
typedef interface IWTSProtocolLogonErrorRedirector IWTSProtocolLogonErrorRedirector;
#endif 	/* __IWTSProtocolLogonErrorRedirector_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wtsdefs.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wtsprotocol_0000_0000 */
/* [local] */ 











extern RPC_IF_HANDLE __MIDL_itf_wtsprotocol_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtsprotocol_0000_0000_v0_0_s_ifspec;

#ifndef __IWTSProtocolManager_INTERFACE_DEFINED__
#define __IWTSProtocolManager_INTERFACE_DEFINED__

/* interface IWTSProtocolManager */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F9EAF6CC-ED79-4f01-821D-1F881B9F66CC")
    IWTSProtocolManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateListener( 
            /* [string][in] */ __RPC__in_string WCHAR *wszListenerName,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolListener **pProtocolListener) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifyServiceStateChange( 
            /* [in] */ __RPC__in WTS_SERVICE_STATE *pTSServiceStateChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifySessionOfServiceStart( 
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifySessionOfServiceStop( 
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifySessionStateChange( 
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId,
            /* [in] */ ULONG EventId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateListener )( 
            __RPC__in IWTSProtocolManager * This,
            /* [string][in] */ __RPC__in_string WCHAR *wszListenerName,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolListener **pProtocolListener);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyServiceStateChange )( 
            __RPC__in IWTSProtocolManager * This,
            /* [in] */ __RPC__in WTS_SERVICE_STATE *pTSServiceStateChange);
        
        HRESULT ( STDMETHODCALLTYPE *NotifySessionOfServiceStart )( 
            __RPC__in IWTSProtocolManager * This,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *NotifySessionOfServiceStop )( 
            __RPC__in IWTSProtocolManager * This,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *NotifySessionStateChange )( 
            __RPC__in IWTSProtocolManager * This,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId,
            /* [in] */ ULONG EventId);
        
        END_INTERFACE
    } IWTSProtocolManagerVtbl;

    interface IWTSProtocolManager
    {
        CONST_VTBL struct IWTSProtocolManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolManager_CreateListener(This,wszListenerName,pProtocolListener)	\
    ( (This)->lpVtbl -> CreateListener(This,wszListenerName,pProtocolListener) ) 

#define IWTSProtocolManager_NotifyServiceStateChange(This,pTSServiceStateChange)	\
    ( (This)->lpVtbl -> NotifyServiceStateChange(This,pTSServiceStateChange) ) 

#define IWTSProtocolManager_NotifySessionOfServiceStart(This,SessionId)	\
    ( (This)->lpVtbl -> NotifySessionOfServiceStart(This,SessionId) ) 

#define IWTSProtocolManager_NotifySessionOfServiceStop(This,SessionId)	\
    ( (This)->lpVtbl -> NotifySessionOfServiceStop(This,SessionId) ) 

#define IWTSProtocolManager_NotifySessionStateChange(This,SessionId,EventId)	\
    ( (This)->lpVtbl -> NotifySessionStateChange(This,SessionId,EventId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolManager_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolListener_INTERFACE_DEFINED__
#define __IWTSProtocolListener_INTERFACE_DEFINED__

/* interface IWTSProtocolListener */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23083765-45f0-4394-8f69-32b2bc0ef4ca")
    IWTSProtocolListener : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartListen( 
            /* [in] */ __RPC__in_opt IWTSProtocolListenerCallback *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopListen( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolListener * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartListen )( 
            __RPC__in IWTSProtocolListener * This,
            /* [in] */ __RPC__in_opt IWTSProtocolListenerCallback *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *StopListen )( 
            __RPC__in IWTSProtocolListener * This);
        
        END_INTERFACE
    } IWTSProtocolListenerVtbl;

    interface IWTSProtocolListener
    {
        CONST_VTBL struct IWTSProtocolListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolListener_StartListen(This,pCallback)	\
    ( (This)->lpVtbl -> StartListen(This,pCallback) ) 

#define IWTSProtocolListener_StopListen(This)	\
    ( (This)->lpVtbl -> StopListen(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolListener_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolListenerCallback_INTERFACE_DEFINED__
#define __IWTSProtocolListenerCallback_INTERFACE_DEFINED__

/* interface IWTSProtocolListenerCallback */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolListenerCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23083765-1a2d-4de2-97de-4a35f260f0b3")
    IWTSProtocolListenerCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnConnected( 
            /* [in] */ __RPC__in_opt IWTSProtocolConnection *pConnection,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolConnectionCallback **pCallback) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolListenerCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolListenerCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolListenerCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolListenerCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnConnected )( 
            __RPC__in IWTSProtocolListenerCallback * This,
            /* [in] */ __RPC__in_opt IWTSProtocolConnection *pConnection,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolConnectionCallback **pCallback);
        
        END_INTERFACE
    } IWTSProtocolListenerCallbackVtbl;

    interface IWTSProtocolListenerCallback
    {
        CONST_VTBL struct IWTSProtocolListenerCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolListenerCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolListenerCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolListenerCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolListenerCallback_OnConnected(This,pConnection,pCallback)	\
    ( (This)->lpVtbl -> OnConnected(This,pConnection,pCallback) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolListenerCallback_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolConnection_INTERFACE_DEFINED__
#define __IWTSProtocolConnection_INTERFACE_DEFINED__

/* interface IWTSProtocolConnection */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolConnection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23083765-9095-4648-98bf-ef81c914032d")
    IWTSProtocolConnection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLogonErrorRedirector( 
            /* [out] */ __RPC__deref_out_opt IWTSProtocolLogonErrorRedirector **ppLogonErrorRedir) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendPolicyData( 
            /* [in] */ __RPC__in WTS_POLICY_DATA *pPolicyData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AcceptConnection( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClientData( 
            /* [out] */ __RPC__out WTS_CLIENT_DATA *pClientData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserCredentials( 
            /* [out] */ __RPC__out WTS_USER_CREDENTIAL *pUserCreds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLicenseConnection( 
            /* [out] */ __RPC__deref_out_opt IWTSProtocolLicenseConnection **ppLicenseConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AuthenticateClientToSession( 
            /* [out] */ __RPC__out WTS_SESSION_ID *SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifySessionId( 
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProtocolHandles( 
            /* [out] */ __RPC__out HANDLE_PTR *pKeyboardHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pMouseHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pBeepHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pVideoHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConnectNotify( 
            /* [in] */ ULONG SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsUserAllowedToLogon( 
            /* [in] */ ULONG SessionId,
            /* [in] */ HANDLE_PTR UserToken,
            /* [string][in] */ __RPC__in_string WCHAR *pDomainName,
            /* [string][in] */ __RPC__in_string WCHAR *pUserName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SessionArbitrationEnumeration( 
            /* [in] */ HANDLE_PTR hUserToken,
            /* [in] */ BOOL bSingleSessionPerUserEnabled,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSessionIdentifierCount) ULONG *pSessionIdArray,
            /* [out][in] */ __RPC__inout ULONG *pdwSessionIdentifierCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LogonNotify( 
            /* [in] */ HANDLE_PTR hClientToken,
            /* [string][in] */ __RPC__in_string WCHAR *wszUserName,
            /* [string][in] */ __RPC__in_string WCHAR *wszDomainName,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ __RPC__in WTS_POLICY_DATA *pPolicyData,
            /* [out][in] */ __RPC__inout WTS_USER_DATA *pClientData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisconnectNotify( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProtocolStatus( 
            /* [out] */ __RPC__out WTS_PROTOCOL_STATUS *pProtocolStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastInputTime( 
            /* [out] */ __RPC__out ULONG64 *pLastInputTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetErrorInfo( 
            /* [in] */ ULONG ulError) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendBeep( 
            /* [in] */ ULONG Frequency,
            /* [in] */ ULONG Duration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateVirtualChannel( 
            /* [string][in] */ __RPC__in_string CHAR *szEndpointName,
            /* [in] */ BOOL bStatic,
            /* [in] */ ULONG RequestedPriority,
            /* [out] */ __RPC__out ULONG_PTR *phChannel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryProperty( 
            /* [in] */ GUID QueryType,
            /* [in] */ ULONG ulNumEntriesIn,
            /* [in] */ ULONG ulNumEntriesOut,
            /* [size_is][optional][in] */ __RPC__in_ecount_full(ulNumEntriesIn) PWTS_PROPERTY_VALUE pPropertyEntriesIn,
            /* [size_is][optional][out] */ __RPC__out_ecount_full(ulNumEntriesOut) PWTS_PROPERTY_VALUE pPropertyEntriesOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetShadowConnection( 
            /* [out] */ __RPC__deref_out_opt IWTSProtocolShadowConnection **ppShadowConnection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolConnectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolConnection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogonErrorRedirector )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolLogonErrorRedirector **ppLogonErrorRedir);
        
        HRESULT ( STDMETHODCALLTYPE *SendPolicyData )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ __RPC__in WTS_POLICY_DATA *pPolicyData);
        
        HRESULT ( STDMETHODCALLTYPE *AcceptConnection )( 
            __RPC__in IWTSProtocolConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientData )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out WTS_CLIENT_DATA *pClientData);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserCredentials )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out WTS_USER_CREDENTIAL *pUserCreds);
        
        HRESULT ( STDMETHODCALLTYPE *GetLicenseConnection )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolLicenseConnection **ppLicenseConnection);
        
        HRESULT ( STDMETHODCALLTYPE *AuthenticateClientToSession )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out WTS_SESSION_ID *SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *NotifySessionId )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolHandles )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out HANDLE_PTR *pKeyboardHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pMouseHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pBeepHandle,
            /* [out] */ __RPC__out HANDLE_PTR *pVideoHandle);
        
        HRESULT ( STDMETHODCALLTYPE *ConnectNotify )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ ULONG SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *IsUserAllowedToLogon )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ ULONG SessionId,
            /* [in] */ HANDLE_PTR UserToken,
            /* [string][in] */ __RPC__in_string WCHAR *pDomainName,
            /* [string][in] */ __RPC__in_string WCHAR *pUserName);
        
        HRESULT ( STDMETHODCALLTYPE *SessionArbitrationEnumeration )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ HANDLE_PTR hUserToken,
            /* [in] */ BOOL bSingleSessionPerUserEnabled,
            /* [size_is][out] */ __RPC__out_ecount_full(*pdwSessionIdentifierCount) ULONG *pSessionIdArray,
            /* [out][in] */ __RPC__inout ULONG *pdwSessionIdentifierCount);
        
        HRESULT ( STDMETHODCALLTYPE *LogonNotify )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ HANDLE_PTR hClientToken,
            /* [string][in] */ __RPC__in_string WCHAR *wszUserName,
            /* [string][in] */ __RPC__in_string WCHAR *wszDomainName,
            /* [in] */ __RPC__in WTS_SESSION_ID *SessionId);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ __RPC__in WTS_POLICY_DATA *pPolicyData,
            /* [out][in] */ __RPC__inout WTS_USER_DATA *pClientData);
        
        HRESULT ( STDMETHODCALLTYPE *DisconnectNotify )( 
            __RPC__in IWTSProtocolConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IWTSProtocolConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolStatus )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out WTS_PROTOCOL_STATUS *pProtocolStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastInputTime )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__out ULONG64 *pLastInputTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorInfo )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ ULONG ulError);
        
        HRESULT ( STDMETHODCALLTYPE *SendBeep )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ ULONG Frequency,
            /* [in] */ ULONG Duration);
        
        HRESULT ( STDMETHODCALLTYPE *CreateVirtualChannel )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [string][in] */ __RPC__in_string CHAR *szEndpointName,
            /* [in] */ BOOL bStatic,
            /* [in] */ ULONG RequestedPriority,
            /* [out] */ __RPC__out ULONG_PTR *phChannel);
        
        HRESULT ( STDMETHODCALLTYPE *QueryProperty )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [in] */ GUID QueryType,
            /* [in] */ ULONG ulNumEntriesIn,
            /* [in] */ ULONG ulNumEntriesOut,
            /* [size_is][optional][in] */ __RPC__in_ecount_full(ulNumEntriesIn) PWTS_PROPERTY_VALUE pPropertyEntriesIn,
            /* [size_is][optional][out] */ __RPC__out_ecount_full(ulNumEntriesOut) PWTS_PROPERTY_VALUE pPropertyEntriesOut);
        
        HRESULT ( STDMETHODCALLTYPE *GetShadowConnection )( 
            __RPC__in IWTSProtocolConnection * This,
            /* [out] */ __RPC__deref_out_opt IWTSProtocolShadowConnection **ppShadowConnection);
        
        END_INTERFACE
    } IWTSProtocolConnectionVtbl;

    interface IWTSProtocolConnection
    {
        CONST_VTBL struct IWTSProtocolConnectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolConnection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolConnection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolConnection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolConnection_GetLogonErrorRedirector(This,ppLogonErrorRedir)	\
    ( (This)->lpVtbl -> GetLogonErrorRedirector(This,ppLogonErrorRedir) ) 

#define IWTSProtocolConnection_SendPolicyData(This,pPolicyData)	\
    ( (This)->lpVtbl -> SendPolicyData(This,pPolicyData) ) 

#define IWTSProtocolConnection_AcceptConnection(This)	\
    ( (This)->lpVtbl -> AcceptConnection(This) ) 

#define IWTSProtocolConnection_GetClientData(This,pClientData)	\
    ( (This)->lpVtbl -> GetClientData(This,pClientData) ) 

#define IWTSProtocolConnection_GetUserCredentials(This,pUserCreds)	\
    ( (This)->lpVtbl -> GetUserCredentials(This,pUserCreds) ) 

#define IWTSProtocolConnection_GetLicenseConnection(This,ppLicenseConnection)	\
    ( (This)->lpVtbl -> GetLicenseConnection(This,ppLicenseConnection) ) 

#define IWTSProtocolConnection_AuthenticateClientToSession(This,SessionId)	\
    ( (This)->lpVtbl -> AuthenticateClientToSession(This,SessionId) ) 

#define IWTSProtocolConnection_NotifySessionId(This,SessionId)	\
    ( (This)->lpVtbl -> NotifySessionId(This,SessionId) ) 

#define IWTSProtocolConnection_GetProtocolHandles(This,pKeyboardHandle,pMouseHandle,pBeepHandle,pVideoHandle)	\
    ( (This)->lpVtbl -> GetProtocolHandles(This,pKeyboardHandle,pMouseHandle,pBeepHandle,pVideoHandle) ) 

#define IWTSProtocolConnection_ConnectNotify(This,SessionId)	\
    ( (This)->lpVtbl -> ConnectNotify(This,SessionId) ) 

#define IWTSProtocolConnection_IsUserAllowedToLogon(This,SessionId,UserToken,pDomainName,pUserName)	\
    ( (This)->lpVtbl -> IsUserAllowedToLogon(This,SessionId,UserToken,pDomainName,pUserName) ) 

#define IWTSProtocolConnection_SessionArbitrationEnumeration(This,hUserToken,bSingleSessionPerUserEnabled,pSessionIdArray,pdwSessionIdentifierCount)	\
    ( (This)->lpVtbl -> SessionArbitrationEnumeration(This,hUserToken,bSingleSessionPerUserEnabled,pSessionIdArray,pdwSessionIdentifierCount) ) 

#define IWTSProtocolConnection_LogonNotify(This,hClientToken,wszUserName,wszDomainName,SessionId)	\
    ( (This)->lpVtbl -> LogonNotify(This,hClientToken,wszUserName,wszDomainName,SessionId) ) 

#define IWTSProtocolConnection_GetUserData(This,pPolicyData,pClientData)	\
    ( (This)->lpVtbl -> GetUserData(This,pPolicyData,pClientData) ) 

#define IWTSProtocolConnection_DisconnectNotify(This)	\
    ( (This)->lpVtbl -> DisconnectNotify(This) ) 

#define IWTSProtocolConnection_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWTSProtocolConnection_GetProtocolStatus(This,pProtocolStatus)	\
    ( (This)->lpVtbl -> GetProtocolStatus(This,pProtocolStatus) ) 

#define IWTSProtocolConnection_GetLastInputTime(This,pLastInputTime)	\
    ( (This)->lpVtbl -> GetLastInputTime(This,pLastInputTime) ) 

#define IWTSProtocolConnection_SetErrorInfo(This,ulError)	\
    ( (This)->lpVtbl -> SetErrorInfo(This,ulError) ) 

#define IWTSProtocolConnection_SendBeep(This,Frequency,Duration)	\
    ( (This)->lpVtbl -> SendBeep(This,Frequency,Duration) ) 

#define IWTSProtocolConnection_CreateVirtualChannel(This,szEndpointName,bStatic,RequestedPriority,phChannel)	\
    ( (This)->lpVtbl -> CreateVirtualChannel(This,szEndpointName,bStatic,RequestedPriority,phChannel) ) 

#define IWTSProtocolConnection_QueryProperty(This,QueryType,ulNumEntriesIn,ulNumEntriesOut,pPropertyEntriesIn,pPropertyEntriesOut)	\
    ( (This)->lpVtbl -> QueryProperty(This,QueryType,ulNumEntriesIn,ulNumEntriesOut,pPropertyEntriesIn,pPropertyEntriesOut) ) 

#define IWTSProtocolConnection_GetShadowConnection(This,ppShadowConnection)	\
    ( (This)->lpVtbl -> GetShadowConnection(This,ppShadowConnection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolConnection_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolConnectionCallback_INTERFACE_DEFINED__
#define __IWTSProtocolConnectionCallback_INTERFACE_DEFINED__

/* interface IWTSProtocolConnectionCallback */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolConnectionCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23083765-75eb-41fe-b4fb-e086242afa0f")
    IWTSProtocolConnectionCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnReady( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BrokenConnection( 
            /* [in] */ ULONG Reason,
            /* [in] */ ULONG Source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopScreenUpdates( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RedrawWindow( 
            /* [optional][in] */ __RPC__in WTS_SMALL_RECT *rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisplayIOCtl( 
            /* [in] */ __RPC__in WTS_DISPLAY_IOCTL *DisplayIOCtl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolConnectionCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolConnectionCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolConnectionCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolConnectionCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnReady )( 
            __RPC__in IWTSProtocolConnectionCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *BrokenConnection )( 
            __RPC__in IWTSProtocolConnectionCallback * This,
            /* [in] */ ULONG Reason,
            /* [in] */ ULONG Source);
        
        HRESULT ( STDMETHODCALLTYPE *StopScreenUpdates )( 
            __RPC__in IWTSProtocolConnectionCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *RedrawWindow )( 
            __RPC__in IWTSProtocolConnectionCallback * This,
            /* [optional][in] */ __RPC__in WTS_SMALL_RECT *rect);
        
        HRESULT ( STDMETHODCALLTYPE *DisplayIOCtl )( 
            __RPC__in IWTSProtocolConnectionCallback * This,
            /* [in] */ __RPC__in WTS_DISPLAY_IOCTL *DisplayIOCtl);
        
        END_INTERFACE
    } IWTSProtocolConnectionCallbackVtbl;

    interface IWTSProtocolConnectionCallback
    {
        CONST_VTBL struct IWTSProtocolConnectionCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolConnectionCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolConnectionCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolConnectionCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolConnectionCallback_OnReady(This)	\
    ( (This)->lpVtbl -> OnReady(This) ) 

#define IWTSProtocolConnectionCallback_BrokenConnection(This,Reason,Source)	\
    ( (This)->lpVtbl -> BrokenConnection(This,Reason,Source) ) 

#define IWTSProtocolConnectionCallback_StopScreenUpdates(This)	\
    ( (This)->lpVtbl -> StopScreenUpdates(This) ) 

#define IWTSProtocolConnectionCallback_RedrawWindow(This,rect)	\
    ( (This)->lpVtbl -> RedrawWindow(This,rect) ) 

#define IWTSProtocolConnectionCallback_DisplayIOCtl(This,DisplayIOCtl)	\
    ( (This)->lpVtbl -> DisplayIOCtl(This,DisplayIOCtl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolConnectionCallback_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolShadowConnection_INTERFACE_DEFINED__
#define __IWTSProtocolShadowConnection_INTERFACE_DEFINED__

/* interface IWTSProtocolShadowConnection */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolShadowConnection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ee3b0c14-37fb-456b-bab3-6d6cd51e13bf")
    IWTSProtocolShadowConnection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Start( 
            /* [string][in] */ __RPC__in_string WCHAR *pTargetServerName,
            /* [in] */ DWORD TargetSessionId,
            /* [in] */ BYTE HotKeyVk,
            /* [in] */ USHORT HotkeyModifiers,
            /* [in] */ __RPC__in_opt IWTSProtocolShadowCallback *pShadowCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DoTarget( 
            /* [size_is][in] */ __RPC__in_ecount_full(Param1Size) PBYTE pParam1,
            /* [in] */ DWORD Param1Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param2Size) PBYTE pParam2,
            /* [in] */ DWORD Param2Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param3Size) PBYTE pParam3,
            /* [in] */ DWORD Param3Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param4Size) PBYTE pParam4,
            /* [in] */ DWORD Param4Size,
            /* [string][in] */ __RPC__in_string WCHAR *pClientName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolShadowConnectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolShadowConnection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolShadowConnection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolShadowConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            __RPC__in IWTSProtocolShadowConnection * This,
            /* [string][in] */ __RPC__in_string WCHAR *pTargetServerName,
            /* [in] */ DWORD TargetSessionId,
            /* [in] */ BYTE HotKeyVk,
            /* [in] */ USHORT HotkeyModifiers,
            /* [in] */ __RPC__in_opt IWTSProtocolShadowCallback *pShadowCallback);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            __RPC__in IWTSProtocolShadowConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *DoTarget )( 
            __RPC__in IWTSProtocolShadowConnection * This,
            /* [size_is][in] */ __RPC__in_ecount_full(Param1Size) PBYTE pParam1,
            /* [in] */ DWORD Param1Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param2Size) PBYTE pParam2,
            /* [in] */ DWORD Param2Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param3Size) PBYTE pParam3,
            /* [in] */ DWORD Param3Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param4Size) PBYTE pParam4,
            /* [in] */ DWORD Param4Size,
            /* [string][in] */ __RPC__in_string WCHAR *pClientName);
        
        END_INTERFACE
    } IWTSProtocolShadowConnectionVtbl;

    interface IWTSProtocolShadowConnection
    {
        CONST_VTBL struct IWTSProtocolShadowConnectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolShadowConnection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolShadowConnection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolShadowConnection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolShadowConnection_Start(This,pTargetServerName,TargetSessionId,HotKeyVk,HotkeyModifiers,pShadowCallback)	\
    ( (This)->lpVtbl -> Start(This,pTargetServerName,TargetSessionId,HotKeyVk,HotkeyModifiers,pShadowCallback) ) 

#define IWTSProtocolShadowConnection_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWTSProtocolShadowConnection_DoTarget(This,pParam1,Param1Size,pParam2,Param2Size,pParam3,Param3Size,pParam4,Param4Size,pClientName)	\
    ( (This)->lpVtbl -> DoTarget(This,pParam1,Param1Size,pParam2,Param2Size,pParam3,Param3Size,pParam4,Param4Size,pClientName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolShadowConnection_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolShadowCallback_INTERFACE_DEFINED__
#define __IWTSProtocolShadowCallback_INTERFACE_DEFINED__

/* interface IWTSProtocolShadowCallback */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolShadowCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("503a2504-aae5-4ab1-93e0-6d1c4bc6f71a")
    IWTSProtocolShadowCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StopShadow( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InvokeTargetShadow( 
            /* [string][full][in] */ __RPC__in_opt_string WCHAR *pTargetServerName,
            /* [in] */ ULONG TargetSessionId,
            /* [size_is][in] */ __RPC__in_ecount_full(Param1Size) PBYTE pParam1,
            /* [in] */ DWORD Param1Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param2Size) PBYTE pParam2,
            /* [in] */ DWORD Param2Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param3Size) PBYTE pParam3,
            /* [in] */ DWORD Param3Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param4Size) PBYTE pParam4,
            /* [in] */ DWORD Param4Size,
            /* [string][in] */ __RPC__in_string WCHAR *pClientName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolShadowCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolShadowCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolShadowCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolShadowCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *StopShadow )( 
            __RPC__in IWTSProtocolShadowCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvokeTargetShadow )( 
            __RPC__in IWTSProtocolShadowCallback * This,
            /* [string][full][in] */ __RPC__in_opt_string WCHAR *pTargetServerName,
            /* [in] */ ULONG TargetSessionId,
            /* [size_is][in] */ __RPC__in_ecount_full(Param1Size) PBYTE pParam1,
            /* [in] */ DWORD Param1Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param2Size) PBYTE pParam2,
            /* [in] */ DWORD Param2Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param3Size) PBYTE pParam3,
            /* [in] */ DWORD Param3Size,
            /* [size_is][in] */ __RPC__in_ecount_full(Param4Size) PBYTE pParam4,
            /* [in] */ DWORD Param4Size,
            /* [string][in] */ __RPC__in_string WCHAR *pClientName);
        
        END_INTERFACE
    } IWTSProtocolShadowCallbackVtbl;

    interface IWTSProtocolShadowCallback
    {
        CONST_VTBL struct IWTSProtocolShadowCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolShadowCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolShadowCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolShadowCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolShadowCallback_StopShadow(This)	\
    ( (This)->lpVtbl -> StopShadow(This) ) 

#define IWTSProtocolShadowCallback_InvokeTargetShadow(This,pTargetServerName,TargetSessionId,pParam1,Param1Size,pParam2,Param2Size,pParam3,Param3Size,pParam4,Param4Size,pClientName)	\
    ( (This)->lpVtbl -> InvokeTargetShadow(This,pTargetServerName,TargetSessionId,pParam1,Param1Size,pParam2,Param2Size,pParam3,Param3Size,pParam4,Param4Size,pClientName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolShadowCallback_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolLicenseConnection_INTERFACE_DEFINED__
#define __IWTSProtocolLicenseConnection_INTERFACE_DEFINED__

/* interface IWTSProtocolLicenseConnection */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolLicenseConnection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23083765-178c-4079-8e4a-fea6496a4d70")
    IWTSProtocolLicenseConnection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RequestLicensingCapabilities( 
            /* [out] */ __RPC__out PWTS_LICENSE_CAPABILITIES ppLicenseCapabilities,
            /* [out][in] */ __RPC__inout ULONG *pcbLicenseCapabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendClientLicense( 
            /* [size_is][in] */ __RPC__in_ecount_full(cbClientLicense) PBYTE pClientLicense,
            /* [in] */ ULONG cbClientLicense) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestClientLicense( 
            /* [size_is][in] */ __RPC__in_ecount_full(Reserve2) PBYTE Reserve1,
            /* [in] */ ULONG Reserve2,
            /* [size_is][out] */ __RPC__out_ecount_full(*pcbClientLicense) PBYTE ppClientLicense,
            /* [out][in] */ __RPC__inout ULONG *pcbClientLicense) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProtocolComplete( 
            /* [in] */ ULONG ulComplete) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolLicenseConnectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolLicenseConnection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolLicenseConnection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolLicenseConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *RequestLicensingCapabilities )( 
            __RPC__in IWTSProtocolLicenseConnection * This,
            /* [out] */ __RPC__out PWTS_LICENSE_CAPABILITIES ppLicenseCapabilities,
            /* [out][in] */ __RPC__inout ULONG *pcbLicenseCapabilities);
        
        HRESULT ( STDMETHODCALLTYPE *SendClientLicense )( 
            __RPC__in IWTSProtocolLicenseConnection * This,
            /* [size_is][in] */ __RPC__in_ecount_full(cbClientLicense) PBYTE pClientLicense,
            /* [in] */ ULONG cbClientLicense);
        
        HRESULT ( STDMETHODCALLTYPE *RequestClientLicense )( 
            __RPC__in IWTSProtocolLicenseConnection * This,
            /* [size_is][in] */ __RPC__in_ecount_full(Reserve2) PBYTE Reserve1,
            /* [in] */ ULONG Reserve2,
            /* [size_is][out] */ __RPC__out_ecount_full(*pcbClientLicense) PBYTE ppClientLicense,
            /* [out][in] */ __RPC__inout ULONG *pcbClientLicense);
        
        HRESULT ( STDMETHODCALLTYPE *ProtocolComplete )( 
            __RPC__in IWTSProtocolLicenseConnection * This,
            /* [in] */ ULONG ulComplete);
        
        END_INTERFACE
    } IWTSProtocolLicenseConnectionVtbl;

    interface IWTSProtocolLicenseConnection
    {
        CONST_VTBL struct IWTSProtocolLicenseConnectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolLicenseConnection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolLicenseConnection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolLicenseConnection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolLicenseConnection_RequestLicensingCapabilities(This,ppLicenseCapabilities,pcbLicenseCapabilities)	\
    ( (This)->lpVtbl -> RequestLicensingCapabilities(This,ppLicenseCapabilities,pcbLicenseCapabilities) ) 

#define IWTSProtocolLicenseConnection_SendClientLicense(This,pClientLicense,cbClientLicense)	\
    ( (This)->lpVtbl -> SendClientLicense(This,pClientLicense,cbClientLicense) ) 

#define IWTSProtocolLicenseConnection_RequestClientLicense(This,Reserve1,Reserve2,ppClientLicense,pcbClientLicense)	\
    ( (This)->lpVtbl -> RequestClientLicense(This,Reserve1,Reserve2,ppClientLicense,pcbClientLicense) ) 

#define IWTSProtocolLicenseConnection_ProtocolComplete(This,ulComplete)	\
    ( (This)->lpVtbl -> ProtocolComplete(This,ulComplete) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolLicenseConnection_INTERFACE_DEFINED__ */


#ifndef __IWTSProtocolLogonErrorRedirector_INTERFACE_DEFINED__
#define __IWTSProtocolLogonErrorRedirector_INTERFACE_DEFINED__

/* interface IWTSProtocolLogonErrorRedirector */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWTSProtocolLogonErrorRedirector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FD9B61A7-2916-4627-8DEE-4328711AD6CB")
    IWTSProtocolLogonErrorRedirector : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnBeginPainting( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RedirectStatus( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RedirectMessage( 
            /* [string][in] */ __RPC__in_string LPCWSTR pszCaption,
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [in] */ UINT uType,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RedirectLogonError( 
            /* [in] */ LONG ntsStatus,
            /* [in] */ LONG ntsSubstatus,
            /* [string][in] */ __RPC__in_string LPCWSTR pszCaption,
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [in] */ UINT uType,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWTSProtocolLogonErrorRedirectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnBeginPainting )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This);
        
        HRESULT ( STDMETHODCALLTYPE *RedirectStatus )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse);
        
        HRESULT ( STDMETHODCALLTYPE *RedirectMessage )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This,
            /* [string][in] */ __RPC__in_string LPCWSTR pszCaption,
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [in] */ UINT uType,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse);
        
        HRESULT ( STDMETHODCALLTYPE *RedirectLogonError )( 
            __RPC__in IWTSProtocolLogonErrorRedirector * This,
            /* [in] */ LONG ntsStatus,
            /* [in] */ LONG ntsSubstatus,
            /* [string][in] */ __RPC__in_string LPCWSTR pszCaption,
            /* [string][in] */ __RPC__in_string LPCWSTR pszMessage,
            /* [in] */ UINT uType,
            /* [out] */ __RPC__out WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse);
        
        END_INTERFACE
    } IWTSProtocolLogonErrorRedirectorVtbl;

    interface IWTSProtocolLogonErrorRedirector
    {
        CONST_VTBL struct IWTSProtocolLogonErrorRedirectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWTSProtocolLogonErrorRedirector_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWTSProtocolLogonErrorRedirector_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWTSProtocolLogonErrorRedirector_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWTSProtocolLogonErrorRedirector_OnBeginPainting(This)	\
    ( (This)->lpVtbl -> OnBeginPainting(This) ) 

#define IWTSProtocolLogonErrorRedirector_RedirectStatus(This,pszMessage,pResponse)	\
    ( (This)->lpVtbl -> RedirectStatus(This,pszMessage,pResponse) ) 

#define IWTSProtocolLogonErrorRedirector_RedirectMessage(This,pszCaption,pszMessage,uType,pResponse)	\
    ( (This)->lpVtbl -> RedirectMessage(This,pszCaption,pszMessage,uType,pResponse) ) 

#define IWTSProtocolLogonErrorRedirector_RedirectLogonError(This,ntsStatus,ntsSubstatus,pszCaption,pszMessage,uType,pResponse)	\
    ( (This)->lpVtbl -> RedirectLogonError(This,ntsStatus,ntsSubstatus,pszCaption,pszMessage,uType,pResponse) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWTSProtocolLogonErrorRedirector_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\XmlDsodid.h ===
//*********************************************************************
//*                  Microsoft Windows                               **
//*            Copyright(c) Microsoft Corp., 1996-1997               **
//*********************************************************************

//;begin_internal
/***********************************************************************************************

  This is a distributed SDK component - do not put any #includes or other directives that rely
  upon files not dropped. If in doubt - build iedev

  If you add comments please include either ;BUGBUG at the beginning of a single line OR
  enclose in a ;begin_internal, ;end_internal block - such as this one!

 ***********************************************************************************************/
//;end_internal

//;begin_internal
#ifndef __XMLDSODID_H__
#define __XMLDSODID_H__
//;end_internal

#define  DISPID_XMLDSO                       0x00010000
#define  DISPID_XMLDSO_DOCUMENT              DISPID_XMLDSO  +  1
#define  DISPID_XMLDSO_JAVADSOCOMPATIBLE     DISPID_XMLDSO_DOCUMENT  +  1

//;begin_internal
#endif // __XMLDSODID_H__
//;end_internal
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\WTypes.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wtypes.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __wtypes_h__
#define __wtypes_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
#include "basetsd.h"
#include "guiddef.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wtypes_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if ( _MSC_VER >= 1020 )
#pragma once
#endif


extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;

#ifndef __IWinTypes_INTERFACE_DEFINED__
#define __IWinTypes_INTERFACE_DEFINED__

/* interface IWinTypes */
/* [unique][version][uuid] */ 

typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHPALETTE;

typedef struct tagRemBRUSH
    {
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHBRUSH;

#if !defined(_WIN32) && !defined(_MPPC_)
// The following code is for Win16 only
#ifndef WINAPI          // If not included with 3.1 headers...
#define FAR             _far
#define PASCAL          _pascal
#define CDECL           _cdecl
#define VOID            void
#define WINAPI      FAR PASCAL
#define CALLBACK    FAR PASCAL
#ifndef FALSE
#define FALSE 0
#define TRUE 1
#endif // !FALSE
#ifndef _BYTE_DEFINED
#define _BYTE_DEFINED
typedef byte BYTE;

#endif // !_BYTE_DEFINED
#ifndef _WORD_DEFINED
#define _WORD_DEFINED
typedef unsigned short WORD;

#endif // !_WORD_DEFINED
typedef unsigned int UINT;

typedef int INT;

typedef long BOOL;

#ifndef _LONG_DEFINED
#define _LONG_DEFINED
typedef long LONG;

#endif // !_LONG_DEFINED
#ifndef _WPARAM_DEFINED
#define _WPARAM_DEFINED
typedef UINT_PTR WPARAM;

#endif // _WPARAM_DEFINED
#ifndef _DWORD_DEFINED
#define _DWORD_DEFINED
typedef unsigned long DWORD;

#endif // !_DWORD_DEFINED
#ifndef _LPARAM_DEFINED
#define _LPARAM_DEFINED
typedef LONG_PTR LPARAM;

#endif // !_LPARAM_DEFINED
#ifndef _LRESULT_DEFINED
#define _LRESULT_DEFINED
typedef LONG_PTR LRESULT;

#endif // !_LRESULT_DEFINED
typedef void *HANDLE;

typedef void *HMODULE;

typedef void *HINSTANCE;

typedef void *HTASK;

typedef void *HKEY;

typedef void *HDESK;

typedef void *HMF;

typedef void *HEMF;

typedef void *HPEN;

typedef void *HRSRC;

typedef void *HSTR;

typedef void *HWINSTA;

typedef void *HKL;

typedef void *HGDIOBJ;

typedef HANDLE HDWP;

#ifndef _HFILE_DEFINED
#define _HFILE_DEFINED
typedef INT HFILE;

#endif // !_HFILE_DEFINED
#ifndef _LPWORD_DEFINED
#define _LPWORD_DEFINED
typedef WORD *LPWORD;

#endif // !_LPWORD_DEFINED
#ifndef _LPDWORD_DEFINED
#define _LPDWORD_DEFINED
typedef DWORD *LPDWORD;

#endif // !_LPDWORD_DEFINED
typedef char CHAR;

typedef /* [string] */  __RPC_string CHAR *LPSTR;

typedef /* [string] */  __RPC_string const CHAR *LPCSTR;

#ifndef _WCHAR_DEFINED
#define _WCHAR_DEFINED
typedef wchar_t WCHAR;

typedef WCHAR TCHAR;

#endif // !_WCHAR_DEFINED
typedef /* [string] */  __RPC_string WCHAR *LPWSTR;

typedef /* [string] */  __RPC_string TCHAR *LPTSTR;

typedef /* [string] */  __RPC_string const WCHAR *LPCWSTR;

typedef /* [string] */  __RPC_string const TCHAR *LPCTSTR;

#ifndef _COLORREF_DEFINED
#define _COLORREF_DEFINED
typedef DWORD COLORREF;

#endif // !_COLORREF_DEFINED
#ifndef _LPCOLORREF_DEFINED
#define _LPCOLORREF_DEFINED
typedef DWORD *LPCOLORREF;

#endif // !_LPCOLORREF_DEFINED
typedef HANDLE *LPHANDLE;

typedef struct _RECTL
    {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
    } 	RECTL;

typedef struct _RECTL *PRECTL;

typedef struct _RECTL *LPRECTL;

typedef struct tagPOINT
    {
    LONG x;
    LONG y;
    } 	POINT;

typedef struct tagPOINT *PPOINT;

typedef struct tagPOINT *LPPOINT;

typedef struct _POINTL
    {
    LONG x;
    LONG y;
    } 	POINTL;

typedef struct _POINTL *PPOINTL;

#ifndef WIN16
typedef struct tagSIZE
    {
    LONG cx;
    LONG cy;
    } 	SIZE;

typedef struct tagSIZE *PSIZE;

typedef struct tagSIZE *LPSIZE;

#else // WIN16
typedef struct tagSIZE
{
    INT cx;
    INT cy;
} SIZE, *PSIZE, *LPSIZE;
#endif // WIN16
typedef struct tagSIZEL
    {
    LONG cx;
    LONG cy;
    } 	SIZEL;

typedef struct tagSIZEL *PSIZEL;

typedef struct tagSIZEL *LPSIZEL;

#endif  //WINAPI
#endif  //!WIN32 && !MPPC
#ifndef _PALETTEENTRY_DEFINED
#define _PALETTEENTRY_DEFINED
typedef struct tagPALETTEENTRY
    {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
    } 	PALETTEENTRY;

typedef struct tagPALETTEENTRY *PPALETTEENTRY;

typedef struct tagPALETTEENTRY *LPPALETTEENTRY;

#endif // !_PALETTEENTRY_DEFINED
#ifndef _LOGPALETTE_DEFINED
#define _LOGPALETTE_DEFINED
typedef struct tagLOGPALETTE
    {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[ 1 ];
    } 	LOGPALETTE;

typedef struct tagLOGPALETTE *PLOGPALETTE;

typedef struct tagLOGPALETTE *LPLOGPALETTE;

#endif // !_LOGPALETTE_DEFINED
#if defined(_WIN32) && !defined(OLE2ANSI)
typedef WCHAR OLECHAR;

typedef /* [string] */  __RPC_string OLECHAR *LPOLESTR;

typedef /* [string] */  __RPC_string const OLECHAR *LPCOLESTR;

#define OLESTR(str) L##str

#else

typedef char      OLECHAR;
typedef LPSTR     LPOLESTR;
typedef LPCSTR    LPCOLESTR;
#define OLESTR(str) str
#endif
#ifndef _WINDEF_
typedef const RECTL *LPCRECTL;

typedef void *PVOID;

typedef void *LPVOID;

typedef float FLOAT;

typedef struct tagRECT
    {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
    } 	RECT;

typedef struct tagRECT *PRECT;

typedef struct tagRECT *LPRECT;

typedef const RECT *LPCRECT;

#endif  //_WINDEF_
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;

#ifndef _DWORDLONG_
typedef unsigned __int64 DWORDLONG;

typedef DWORDLONG *PDWORDLONG;

#endif // !_DWORDLONG_
#ifndef _ULONGLONG_
typedef __int64 LONGLONG;

typedef unsigned __int64 ULONGLONG;

typedef LONGLONG *PLONGLONG;

typedef ULONGLONG *PULONGLONG;

#endif // _ULONGLONG_
#if 0
typedef struct _LARGE_INTEGER
    {
    LONGLONG QuadPart;
    } 	LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;

typedef struct _ULARGE_INTEGER
    {
    ULONGLONG QuadPart;
    } 	ULARGE_INTEGER;

#endif // 0
#ifndef _WINBASE_
#ifndef _FILETIME_
#define _FILETIME_
typedef struct _FILETIME
    {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
    } 	FILETIME;

typedef struct _FILETIME *PFILETIME;

typedef struct _FILETIME *LPFILETIME;

#endif // !_FILETIME
#ifndef _SYSTEMTIME_
#define _SYSTEMTIME_
typedef struct _SYSTEMTIME
    {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
    } 	SYSTEMTIME;

typedef struct _SYSTEMTIME *PSYSTEMTIME;

typedef struct _SYSTEMTIME *LPSYSTEMTIME;

#endif // !_SYSTEMTIME
#ifndef _SECURITY_ATTRIBUTES_
#define _SECURITY_ATTRIBUTES_
typedef struct _SECURITY_ATTRIBUTES
    {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
    } 	SECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

#endif // !_SECURITY_ATTRIBUTES_
#ifndef SECURITY_DESCRIPTOR_REVISION
typedef USHORT SECURITY_DESCRIPTOR_CONTROL;

typedef USHORT *PSECURITY_DESCRIPTOR_CONTROL;

typedef PVOID PSID;

typedef struct _ACL
    {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
    } 	ACL;

typedef ACL *PACL;

typedef struct _SECURITY_DESCRIPTOR
    {
    UCHAR Revision;
    UCHAR Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
    } 	SECURITY_DESCRIPTOR;

typedef struct _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;

#endif // !SECURITY_DESCRIPTOR_REVISION
#endif //_WINBASE_
typedef struct _COAUTHIDENTITY
    {
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
    } 	COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } 	COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;

#ifndef _HRESULT_DEFINED
#define _HRESULT_DEFINED
#ifdef __midl
typedef LONG HRESULT;

#else // __midl
typedef __success(return >= 0) long HRESULT;
#endif // __midl
#endif // !_HRESULT_DEFINED

#ifndef __OBJECTID_DEFINED
#define __OBJECTID_DEFINED
#define _OBJECTID_DEFINED
typedef struct _OBJECTID
    {
    GUID Lineage;
    unsigned long Uniquifier;
    } 	OBJECTID;

#endif // !_OBJECTID_DEFINED
#if 0
typedef GUID *REFGUID;

typedef IID *REFIID;

typedef CLSID *REFCLSID;

typedef FMTID *REFFMTID;

#endif // 0
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    } 	MEMCTX;

#ifndef _ROTFLAGS_DEFINED
#define _ROTFLAGS_DEFINED
#define ROTFLAGS_REGISTRATIONKEEPSALIVE 0x1
#define ROTFLAGS_ALLOWANYCLIENT 0x2
#endif // !_ROTFLAGS_DEFINED
#ifndef _ROTREGFLAGS_DEFINED
#define _ROTREGFLAGS_DEFINED
#define ROTREGFLAGS_ALLOWANYCLIENT 0x1
#endif // !_ROTREGFLAGS_DEFINED
#ifndef _APPIDREGFLAGS_DEFINED
#define _APPIDREGFLAGS_DEFINED
#define APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP 0x1
#define APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND 0x2
#define APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY 0x4
#endif // !_APPIDREGFLAGS_DEFINED
#ifndef _ROT_COMPARE_MAX_DEFINED
#define _ROT_COMPARE_MAX_DEFINED
#define ROT_COMPARE_MAX 2048
#endif // !_ROT_COMPARE_MAX_DEFINED
#ifndef _DCOMSCM_REMOTECALL_FLAGS_DEFINED
#define _DCOMSCM_REMOTECALL_FLAGS_DEFINED
#define DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES 0x1
#define DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL 0x2
#define DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES 0x4
#define DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL 0x8
#define DCOMSCM_PING_USE_MID_AUTHNSERVICE 0x10
#define DCOMSCM_PING_DISALLOW_UNSECURE_CALL 0x20
#endif // !_DCOMSCM_REMOTECALL_FLAGS_DEFINED
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_RESERVED1	= 0x40,
	CLSCTX_RESERVED2	= 0x80,
	CLSCTX_RESERVED3	= 0x100,
	CLSCTX_RESERVED4	= 0x200,
	CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
	CLSCTX_RESERVED5	= 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
	CLSCTX_NO_FAILURE_LOG	= 0x4000,
	CLSCTX_DISABLE_AAA	= 0x8000,
	CLSCTX_ENABLE_AAA	= 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000,
	CLSCTX_ACTIVATE_32_BIT_SERVER	= 0x40000,
	CLSCTX_ACTIVATE_64_BIT_SERVER	= 0x80000,
	CLSCTX_ENABLE_CLOAKING	= 0x100000,
	CLSCTX_PS_DLL	= ( int  )0x80000000
    } 	CLSCTX;

#define CLSCTX_VALID_MASK \
   (CLSCTX_INPROC_SERVER | \
    CLSCTX_INPROC_HANDLER | \
    CLSCTX_LOCAL_SERVER | \
    CLSCTX_INPROC_SERVER16 | \
    CLSCTX_REMOTE_SERVER | \
    CLSCTX_NO_CODE_DOWNLOAD | \
    CLSCTX_NO_CUSTOM_MARSHAL | \
    CLSCTX_ENABLE_CODE_DOWNLOAD | \
    CLSCTX_NO_FAILURE_LOG | \
    CLSCTX_DISABLE_AAA | \
    CLSCTX_ENABLE_AAA | \
    CLSCTX_FROM_DEFAULT_CONTEXT | \
    CLSCTX_ACTIVATE_32_BIT_SERVER | \
    CLSCTX_ACTIVATE_64_BIT_SERVER | \
    CLSCTX_ENABLE_CLOAKING | \
    CLSCTX_PS_DLL)
typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4,
	MSHLFLAGS_RESERVED1	= 8,
	MSHLFLAGS_RESERVED2	= 16,
	MSHLFLAGS_RESERVED3	= 32,
	MSHLFLAGS_RESERVED4	= 64
    } 	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3,
	MSHCTX_CROSSCTX	= 4
    } 	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    } 	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
	STGC_CONSOLIDATE	= 8
    } 	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    } 	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    } 	STATFLAG;

typedef /* [context_handle] */ void *HCONTEXT;

#ifndef _LCID_DEFINED
#define _LCID_DEFINED
typedef DWORD LCID;

#endif // !_LCID_DEFINED
#ifndef _LANGID_DEFINED
#define _LANGID_DEFINED
typedef USHORT LANGID;

#endif // !_LANGID_DEFINED
typedef struct _BYTE_BLOB
    {
    unsigned long clSize;
    byte abData[ 1 ];
    } 	BYTE_BLOB;

typedef /* [unique] */  __RPC_unique_pointer BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    unsigned long clSize;
    unsigned short asData[ 1 ];
    } 	WORD_BLOB;

typedef /* [unique] */  __RPC_unique_pointer WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    unsigned long clSize;
    unsigned long alData[ 1 ];
    } 	DWORD_BLOB;

typedef /* [unique] */  __RPC_unique_pointer DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
    byte abData[ 1 ];
    } 	FLAGGED_BYTE_BLOB;

typedef /* [unique] */  __RPC_unique_pointer FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
    unsigned short asData[ 1 ];
    } 	FLAGGED_WORD_BLOB;

typedef /* [unique] */  __RPC_unique_pointer FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    unsigned long clSize;
    byte *pData;
    } 	BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    unsigned long clSize;
    unsigned short *pData;
    } 	WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    unsigned long clSize;
    unsigned long *pData;
    } 	DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    unsigned long clSize;
    hyper *pData;
    } 	HYPER_SIZEDARR;

#define	WDT_INPROC_CALL	( 0x48746457 )

#define	WDT_REMOTE_CALL	( 0x52746457 )

#define	WDT_INPROC64_CALL	( 0x50746457 )

typedef struct _userCLIPFORMAT
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0001
        {
        DWORD dwValue;
        wchar_t *pwszName;
        } 	u;
    } 	userCLIPFORMAT;

typedef /* [unique] */  __RPC_unique_pointer userCLIPFORMAT *wireCLIPFORMAT;

typedef /* [wire_marshal] */ WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0002
        {
        long hInproc;
        DWORD_BLOB *hRemote;
        } 	u;
    } 	GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0003
        {
        long hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHGLOBAL;

typedef /* [unique] */  __RPC_unique_pointer userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0004
        {
        long hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE *hMF;
    } 	remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0005
        {
        long hInproc;
        remoteMETAFILEPICT *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0006
        {
        long hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[ 1 ];
    } 	userBITMAP;

typedef struct _userHBITMAP
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0007
        {
        long hInproc;
        userBITMAP *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHBITMAP;

typedef struct _userHPALETTE
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0008
        {
        long hInproc;
        LOGPALETTE *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHPALETTE;

typedef struct _RemotableHandle
    {
    long fContext;
    /* [switch_type] */ union __MIDL_IWinTypes_0009
        {
        long hInproc;
        long hRemote;
        } 	u;
    } 	RemotableHandle;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHWND;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHMENU;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHACCEL;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHBRUSH;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHFONT;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHDC;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHICON;

typedef /* [unique] */  __RPC_unique_pointer RemotableHandle *wireHRGN;

#if 0
typedef /* [wire_marshal] */ void *HWND;

typedef /* [wire_marshal] */ void *HMENU;

typedef /* [wire_marshal] */ void *HACCEL;

typedef /* [wire_marshal] */ void *HBRUSH;

typedef /* [wire_marshal] */ void *HFONT;

typedef /* [wire_marshal] */ void *HDC;

typedef /* [wire_marshal] */ void *HICON;

typedef /* [wire_marshal] */ void *HRGN;

#ifndef _HCURSOR_DEFINED
#define _HCURSOR_DEFINED
typedef HICON HCURSOR;

#endif // !_HCURSOR_DEFINED
#endif //0
#ifndef _TEXTMETRIC_DEFINED
#define _TEXTMETRIC_DEFINED
typedef struct tagTEXTMETRICW
    {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    } 	TEXTMETRICW;

typedef struct tagTEXTMETRICW *PTEXTMETRICW;

typedef struct tagTEXTMETRICW *LPTEXTMETRICW;

#endif // !_TEXTMETRIC_DEFINED
#ifndef _WIN32           // The following code is for Win16 only
#ifndef WINAPI          // If not included with 3.1 headers...
typedef struct tagMSG
    {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
    } 	MSG;

typedef struct tagMSG *PMSG;

typedef struct tagMSG *NPMSG;

typedef struct tagMSG *LPMSG;

#endif // _WIN32
#endif // WINAPI
typedef /* [unique] */  __RPC_unique_pointer userHBITMAP *wireHBITMAP;

typedef /* [unique] */  __RPC_unique_pointer userHPALETTE *wireHPALETTE;

typedef /* [unique] */  __RPC_unique_pointer userHENHMETAFILE *wireHENHMETAFILE;

typedef /* [unique] */  __RPC_unique_pointer userHMETAFILE *wireHMETAFILE;

typedef /* [unique] */  __RPC_unique_pointer userHMETAFILEPICT *wireHMETAFILEPICT;

#if 0
typedef /* [wire_marshal] */ void *HGLOBAL;

typedef HGLOBAL HLOCAL;

typedef /* [wire_marshal] */ void *HBITMAP;

typedef /* [wire_marshal] */ void *HPALETTE;

typedef /* [wire_marshal] */ void *HENHMETAFILE;

typedef /* [wire_marshal] */ void *HMETAFILE;

#endif //0
typedef /* [wire_marshal] */ void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#endif /* __IWinTypes_INTERFACE_DEFINED__ */

/* interface __MIDL_itf_wtypes_0000_0001 */
/* [local] */ 

#if ( _MSC_VER >= 800 )
#if _MSC_VER >= 1200
#pragma warning(push)
#endif
#pragma warning(disable:4201)
#endif
typedef double DATE;

#ifndef _tagCY_DEFINED
#define _tagCY_DEFINED
#define _CY_DEFINED
#if 0
/* the following isn't the real definition of CY, but it is */
/* what RPC knows how to remote */
typedef struct tagCY
    {
    LONGLONG int64;
    } 	CY;

#else /* 0 */
/* real definition that makes the C++ compiler happy */
typedef union tagCY {
    struct {
#ifdef _MAC
        long      Hi;
        long Lo;
#else
        unsigned long Lo;
        long      Hi;
#endif
    } DUMMYSTRUCTNAME;
    LONGLONG int64;
} CY;
#endif /* 0 */
#endif /* _tagCY_DEFINED */
typedef CY *LPCY;

#if 0 /* _tagDEC_DEFINED */
/* The following isn't the real definition of Decimal type, */
/* but it is what RPC knows how to remote */
typedef struct tagDEC
    {
    USHORT wReserved;
    BYTE scale;
    BYTE sign;
    ULONG Hi32;
    ULONGLONG Lo64;
    } 	DECIMAL;

#else /* _tagDEC_DEFINED */
/* real definition that makes the C++ compiler happy */
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } DUMMYSTRUCTNAME;
        USHORT signscale;
    } DUMMYUNIONNAME;
    ULONG Hi32;
    union {
        struct {
#ifdef _MAC
            ULONG Mid32;
            ULONG Lo32;
#else
            ULONG Lo32;
            ULONG Mid32;
#endif
        } DUMMYSTRUCTNAME2;
        ULONGLONG Lo64;
    } DUMMYUNIONNAME2;
} DECIMAL;
#define DECIMAL_NEG ((BYTE)0x80)
#define DECIMAL_SETZERO(dec) \
        {(dec).Lo64 = 0; (dec).Hi32 = 0; (dec).signscale = 0;}
#endif /* _tagDEC_DEFINED */
typedef DECIMAL *LPDECIMAL;

#if ( _MSC_VER >= 800 )
#if _MSC_VER >= 1200
#pragma warning(pop)
#else
#pragma warning(default:4201)
#endif
#endif
typedef /* [unique] */  __RPC_unique_pointer FLAGGED_WORD_BLOB *wireBSTR;

typedef /* [wire_marshal] */ OLECHAR *BSTR;

typedef BSTR *LPBSTR;

/* 0 == FALSE, -1 == TRUE */
typedef short VARIANT_BOOL;

#if !__STDC__ && (_MSC_VER <= 1000)
/* For backward compatibility */
typedef VARIANT_BOOL _VARIANT_BOOL;

#else
/* ANSI C/C++ reserve bool as keyword */
#define _VARIANT_BOOL    /##/
#endif
typedef boolean BOOLEAN;

/* The BSTRBLOB structure is used by some implementations */
/* of the IPropertyStorage interface when marshaling BSTRs */
/* on systems which don't support BSTR marshaling. */
#ifndef _tagBSTRBLOB_DEFINED
#define _tagBSTRBLOB_DEFINED
typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
    BYTE *pData;
    } 	BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;

#endif
#define VARIANT_TRUE ((VARIANT_BOOL)-1)
#define VARIANT_FALSE ((VARIANT_BOOL)0)
#ifndef _tagBLOB_DEFINED
#define _tagBLOB_DEFINED
#define _BLOB_DEFINED
#define _LPBLOB_DEFINED
typedef struct tagBLOB
    {
    ULONG cbSize;
    BYTE *pBlobData;
    } 	BLOB;

typedef struct tagBLOB *LPBLOB;

#endif
typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
    BYTE *pClipData;
    } 	CLIPDATA;

// Macro to calculate the size of the above pClipData
#define CBPCLIPDATA(clipdata)    ( (clipdata).cbSize - sizeof((clipdata).ulClipFmt) )
typedef unsigned short VARTYPE;

/*
 * VARENUM usage key,
 *
 * * [V] - may appear in a VARIANT
 * * [T] - may appear in a TYPEDESC
 * * [P] - may appear in an OLE property set
 * * [S] - may appear in a Safe Array
 *
 *
 *  VT_EMPTY            [V]   [P]     nothing
 *  VT_NULL             [V]   [P]     SQL style Null
 *  VT_I2               [V][T][P][S]  2 byte signed int
 *  VT_I4               [V][T][P][S]  4 byte signed int
 *  VT_R4               [V][T][P][S]  4 byte real
 *  VT_R8               [V][T][P][S]  8 byte real
 *  VT_CY               [V][T][P][S]  currency
 *  VT_DATE             [V][T][P][S]  date
 *  VT_BSTR             [V][T][P][S]  OLE Automation string
 *  VT_DISPATCH         [V][T]   [S]  IDispatch *
 *  VT_ERROR            [V][T][P][S]  SCODE
 *  VT_BOOL             [V][T][P][S]  True=-1, False=0
 *  VT_VARIANT          [V][T][P][S]  VARIANT *
 *  VT_UNKNOWN          [V][T]   [S]  IUnknown *
 *  VT_DECIMAL          [V][T]   [S]  16 byte fixed point
 *  VT_RECORD           [V]   [P][S]  user defined type
 *  VT_I1               [V][T][P][s]  signed char
 *  VT_UI1              [V][T][P][S]  unsigned char
 *  VT_UI2              [V][T][P][S]  unsigned short
 *  VT_UI4              [V][T][P][S]  unsigned long
 *  VT_I8                  [T][P]     signed 64-bit int
 *  VT_UI8                 [T][P]     unsigned 64-bit int
 *  VT_INT              [V][T][P][S]  signed machine int
 *  VT_UINT             [V][T]   [S]  unsigned machine int
 *  VT_INT_PTR             [T]        signed machine register size width
 *  VT_UINT_PTR            [T]        unsigned machine register size width
 *  VT_VOID                [T]        C style void
 *  VT_HRESULT             [T]        Standard return type
 *  VT_PTR                 [T]        pointer type
 *  VT_SAFEARRAY           [T]        (use VT_ARRAY in VARIANT)
 *  VT_CARRAY              [T]        C style array
 *  VT_USERDEFINED         [T]        user defined type
 *  VT_LPSTR               [T][P]     null terminated string
 *  VT_LPWSTR              [T][P]     wide null terminated string
 *  VT_FILETIME               [P]     FILETIME
 *  VT_BLOB                   [P]     Length prefixed bytes
 *  VT_STREAM                 [P]     Name of the stream follows
 *  VT_STORAGE                [P]     Name of the storage follows
 *  VT_STREAMED_OBJECT        [P]     Stream contains an object
 *  VT_STORED_OBJECT          [P]     Storage contains an object
 *  VT_VERSIONED_STREAM       [P]     Stream with a GUID version
 *  VT_BLOB_OBJECT            [P]     Blob contains an object 
 *  VT_CF                     [P]     Clipboard format
 *  VT_CLSID                  [P]     A Class ID
 *  VT_VECTOR                 [P]     simple counted array
 *  VT_ARRAY            [V]           SAFEARRAY*
 *  VT_BYREF            [V]           void* for local use
 *  VT_BSTR_BLOB                      Reserved for system use
 */

enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_RECORD	= 36,
	VT_INT_PTR	= 37,
	VT_UINT_PTR	= 38,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_VERSIONED_STREAM	= 73,
	VT_BSTR_BLOB	= 0xfff,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    } ;
typedef ULONG PROPID;

#ifndef PROPERTYKEY_DEFINED
#define PROPERTYKEY_DEFINED
typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } 	PROPERTYKEY;

#endif
#ifndef SID_IDENTIFIER_AUTHORITY_DEFINED
#define SID_IDENTIFIER_AUTHORITY_DEFINED
typedef struct _SID_IDENTIFIER_AUTHORITY
    {
    UCHAR Value[ 6 ];
    } 	SID_IDENTIFIER_AUTHORITY;

typedef struct _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;

#endif
#ifndef SID_DEFINED
#define SID_DEFINED
typedef struct _SID
    {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[ 1 ];
    } 	SID;

typedef struct _SID *PISID;

typedef struct _SID_AND_ATTRIBUTES
    {
    SID *Sid;
    DWORD Attributes;
    } 	SID_AND_ATTRIBUTES;

typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;

#endif
typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } 	CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } 	QUERYCONTEXT;

typedef /* [v1_enum] */ 
enum tagTYSPEC
    {	TYSPEC_CLSID	= 0,
	TYSPEC_FILEEXT	= ( TYSPEC_CLSID + 1 ) ,
	TYSPEC_MIMETYPE	= ( TYSPEC_FILEEXT + 1 ) ,
	TYSPEC_FILENAME	= ( TYSPEC_MIMETYPE + 1 ) ,
	TYSPEC_PROGID	= ( TYSPEC_FILENAME + 1 ) ,
	TYSPEC_PACKAGENAME	= ( TYSPEC_PROGID + 1 ) ,
	TYSPEC_OBJECTID	= ( TYSPEC_PACKAGENAME + 1 ) 
    } 	TYSPEC;

typedef /* [public] */ struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
    /* [switch_type] */ union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct 
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } 	ByName;
        struct 
            {
            GUID ObjectId;
            GUID PolicyId;
            } 	ByObjectId;
        } 	tagged_union;
    } 	uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win7\sdk\include\wuapi.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for wuapi.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wuapi_h__
#define __wuapi_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IUpdateLockdown_FWD_DEFINED__
#define __IUpdateLockdown_FWD_DEFINED__
typedef interface IUpdateLockdown IUpdateLockdown;
#endif 	/* __IUpdateLockdown_FWD_DEFINED__ */


#ifndef __IStringCollection_FWD_DEFINED__
#define __IStringCollection_FWD_DEFINED__
typedef interface IStringCollection IStringCollection;
#endif 	/* __IStringCollection_FWD_DEFINED__ */


#ifndef __IWebProxy_FWD_DEFINED__
#define __IWebProxy_FWD_DEFINED__
typedef interface IWebProxy IWebProxy;
#endif 	/* __IWebProxy_FWD_DEFINED__ */


#ifndef __ISystemInformation_FWD_DEFINED__
#define __ISystemInformation_FWD_DEFINED__
typedef interface ISystemInformation ISystemInformation;
#endif 	/* __ISystemInformation_FWD_DEFINED__ */


#ifndef __IWindowsUpdateAgentInfo_FWD_DEFINED__
#define __IWindowsUpdateAgentInfo_FWD_DEFINED__
typedef interface IWindowsUpdateAgentInfo IWindowsUpdateAgentInfo;
#endif 	/* __IWindowsUpdateAgentInfo_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesResults_FWD_DEFINED__
#define __IAutomaticUpdatesResults_FWD_DEFINED__
typedef interface IAutomaticUpdatesResults IAutomaticUpdatesResults;
#endif 	/* __IAutomaticUpdatesResults_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings_FWD_DEFINED__
#define __IAutomaticUpdatesSettings_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings IAutomaticUpdatesSettings;
#endif 	/* __IAutomaticUpdatesSettings_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings2_FWD_DEFINED__
#define __IAutomaticUpdatesSettings2_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings2 IAutomaticUpdatesSettings2;
#endif 	/* __IAutomaticUpdatesSettings2_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings3_FWD_DEFINED__
#define __IAutomaticUpdatesSettings3_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings3 IAutomaticUpdatesSettings3;
#endif 	/* __IAutomaticUpdatesSettings3_FWD_DEFINED__ */


#ifndef __IAutomaticUpdates_FWD_DEFINED__
#define __IAutomaticUpdates_FWD_DEFINED__
typedef interface IAutomaticUpdates IAutomaticUpdates;
#endif 	/* __IAutomaticUpdates_FWD_DEFINED__ */


#ifndef __IAutomaticUpdates2_FWD_DEFINED__
#define __IAutomaticUpdates2_FWD_DEFINED__
typedef interface IAutomaticUpdates2 IAutomaticUpdates2;
#endif 	/* __IAutomaticUpdates2_FWD_DEFINED__ */


#ifndef __IUpdateIdentity_FWD_DEFINED__
#define __IUpdateIdentity_FWD_DEFINED__
typedef interface IUpdateIdentity IUpdateIdentity;
#endif 	/* __IUpdateIdentity_FWD_DEFINED__ */


#ifndef __IImageInformation_FWD_DEFINED__
#define __IImageInformation_FWD_DEFINED__
typedef interface IImageInformation IImageInformation;
#endif 	/* __IImageInformation_FWD_DEFINED__ */


#ifndef __ICategory_FWD_DEFINED__
#define __ICategory_FWD_DEFINED__
typedef interface ICategory ICategory;
#endif 	/* __ICategory_FWD_DEFINED__ */


#ifndef __ICategoryCollection_FWD_DEFINED__
#define __ICategoryCollection_FWD_DEFINED__
typedef interface ICategoryCollection ICategoryCollection;
#endif 	/* __ICategoryCollection_FWD_DEFINED__ */


#ifndef __IInstallationBehavior_FWD_DEFINED__
#define __IInstallationBehavior_FWD_DEFINED__
typedef interface IInstallationBehavior IInstallationBehavior;
#endif 	/* __IInstallationBehavior_FWD_DEFINED__ */


#ifndef __IUpdateDownloadContent_FWD_DEFINED__
#define __IUpdateDownloadContent_FWD_DEFINED__
typedef interface IUpdateDownloadContent IUpdateDownloadContent;
#endif 	/* __IUpdateDownloadContent_FWD_DEFINED__ */


#ifndef __IUpdateDownloadContent2_FWD_DEFINED__
#define __IUpdateDownloadContent2_FWD_DEFINED__
typedef interface IUpdateDownloadContent2 IUpdateDownloadContent2;
#endif 	/* __IUpdateDownloadContent2_FWD_DEFINED__ */


#ifndef __IUpdateDownloadContentCollection_FWD_DEFINED__
#define __IUpdateDownloadContentCollection_FWD_DEFINED__
typedef interface IUpdateDownloadContentCollection IUpdateDownloadContentCollection;
#endif 	/* __IUpdateDownloadContentCollection_FWD_DEFINED__ */


#ifndef __IUpdate_FWD_DEFINED__
#define __IUpdate_FWD_DEFINED__
typedef interface IUpdate IUpdate;
#endif 	/* __IUpdate_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate_FWD_DEFINED__
#define __IWindowsDriverUpdate_FWD_DEFINED__
typedef interface IWindowsDriverUpdate IWindowsDriverUpdate;
#endif 	/* __IWindowsDriverUpdate_FWD_DEFINED__ */


#ifndef __IUpdate2_FWD_DEFINED__
#define __IUpdate2_FWD_DEFINED__
typedef interface IUpdate2 IUpdate2;
#endif 	/* __IUpdate2_FWD_DEFINED__ */


#ifndef __IUpdate3_FWD_DEFINED__
#define __IUpdate3_FWD_DEFINED__
typedef interface IUpdate3 IUpdate3;
#endif 	/* __IUpdate3_FWD_DEFINED__ */


#ifndef __IUpdate4_FWD_DEFINED__
#define __IUpdate4_FWD_DEFINED__
typedef interface IUpdate4 IUpdate4;
#endif 	/* __IUpdate4_FWD_DEFINED__ */


#ifndef __IUpdate5_FWD_DEFINED__
#define __IUpdate5_FWD_DEFINED__
typedef interface IUpdate5 IUpdate5;
#endif 	/* __IUpdate5_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate2_FWD_DEFINED__
#define __IWindowsDriverUpdate2_FWD_DEFINED__
typedef interface IWindowsDriverUpdate2 IWindowsDriverUpdate2;
#endif 	/* __IWindowsDriverUpdate2_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate3_FWD_DEFINED__
#define __IWindowsDriverUpdate3_FWD_DEFINED__
typedef interface IWindowsDriverUpdate3 IWindowsDriverUpdate3;
#endif 	/* __IWindowsDriverUpdate3_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntry_FWD_DEFINED__
#define __IWindowsDriverUpdateEntry_FWD_DEFINED__
typedef interface IWindowsDriverUpdateEntry IWindowsDriverUpdateEntry;
#endif 	/* __IWindowsDriverUpdateEntry_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__
#define __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__
typedef interface IWindowsDriverUpdateEntryCollection IWindowsDriverUpdateEntryCollection;
#endif 	/* __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate4_FWD_DEFINED__
#define __IWindowsDriverUpdate4_FWD_DEFINED__
typedef interface IWindowsDriverUpdate4 IWindowsDriverUpdate4;
#endif 	/* __IWindowsDriverUpdate4_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate5_FWD_DEFINED__
#define __IWindowsDriverUpdate5_FWD_DEFINED__
typedef interface IWindowsDriverUpdate5 IWindowsDriverUpdate5;
#endif 	/* __IWindowsDriverUpdate5_FWD_DEFINED__ */


#ifndef __IUpdateCollection_FWD_DEFINED__
#define __IUpdateCollection_FWD_DEFINED__
typedef interface IUpdateCollection IUpdateCollection;
#endif 	/* __IUpdateCollection_FWD_DEFINED__ */


#ifndef __IUpdateException_FWD_DEFINED__
#define __IUpdateException_FWD_DEFINED__
typedef interface IUpdateException IUpdateException;
#endif 	/* __IUpdateException_FWD_DEFINED__ */


#ifndef __IInvalidProductLicenseException_FWD_DEFINED__
#define __IInvalidProductLicenseException_FWD_DEFINED__
typedef interface IInvalidProductLicenseException IInvalidProductLicenseException;
#endif 	/* __IInvalidProductLicenseException_FWD_DEFINED__ */


#ifndef __IUpdateExceptionCollection_FWD_DEFINED__
#define __IUpdateExceptionCollection_FWD_DEFINED__
typedef interface IUpdateExceptionCollection IUpdateExceptionCollection;
#endif 	/* __IUpdateExceptionCollection_FWD_DEFINED__ */


#ifndef __ISearchResult_FWD_DEFINED__
#define __ISearchResult_FWD_DEFINED__
typedef interface ISearchResult ISearchResult;
#endif 	/* __ISearchResult_FWD_DEFINED__ */


#ifndef __ISearchJob_FWD_DEFINED__
#define __ISearchJob_FWD_DEFINED__
typedef interface ISearchJob ISearchJob;
#endif 	/* __ISearchJob_FWD_DEFINED__ */


#ifndef __ISearchCompletedCallbackArgs_FWD_DEFINED__
#define __ISearchCompletedCallbackArgs_FWD_DEFINED__
typedef interface ISearchCompletedCallbackArgs ISearchCompletedCallbackArgs;
#endif 	/* __ISearchCompletedCallbackArgs_FWD_DEFINED__ */


#ifndef __ISearchCompletedCallback_FWD_DEFINED__
#define __ISearchCompletedCallback_FWD_DEFINED__
typedef interface ISearchCompletedCallback ISearchCompletedCallback;
#endif 	/* __ISearchCompletedCallback_FWD_DEFINED__ */


#ifndef __IUpdateHistoryEntry_FWD_DEFINED__
#define __IUpdateHistoryEntry_FWD_DEFINED__
typedef interface IUpdateHistoryEntry IUpdateHistoryEntry;
#endif 	/* __IUpdateHistoryEntry_FWD_DEFINED__ */


#ifndef __IUpdateHistoryEntry2_FWD_DEFINED__
#define __IUpdateHistoryEntry2_FWD_DEFINED__
typedef interface IUpdateHistoryEntry2 IUpdateHistoryEntry2;
#endif 	/* __IUpdateHistoryEntry2_FWD_DEFINED__ */


#ifndef __IUpdateHistoryEntryCollection_FWD_DEFINED__
#define __IUpdateHistoryEntryCollection_FWD_DEFINED__
typedef interface IUpdateHistoryEntryCollection IUpdateHistoryEntryCollection;
#endif 	/* __IUpdateHistoryEntryCollection_FWD_DEFINED__ */


#ifndef __IUpdateSearcher_FWD_DEFINED__
#define __IUpdateSearcher_FWD_DEFINED__
typedef interface IUpdateSearcher IUpdateSearcher;
#endif 	/* __IUpdateSearcher_FWD_DEFINED__ */


#ifndef __IUpdateSearcher2_FWD_DEFINED__
#define __IUpdateSearcher2_FWD_DEFINED__
typedef interface IUpdateSearcher2 IUpdateSearcher2;
#endif 	/* __IUpdateSearcher2_FWD_DEFINED__ */


#ifndef __IUpdateSearcher3_FWD_DEFINED__
#define __IUpdateSearcher3_FWD_DEFINED__
typedef interface IUpdateSearcher3 IUpdateSearcher3;
#endif 	/* __IUpdateSearcher3_FWD_DEFINED__ */


#ifndef __IUpdateDownloadResult_FWD_DEFINED__
#define __IUpdateDownloadResult_FWD_DEFINED__
typedef interface IUpdateDownloadResult IUpdateDownloadResult;
#endif 	/* __IUpdateDownloadResult_FWD_DEFINED__ */


#ifndef __IDownloadResult_FWD_DEFINED__
#define __IDownloadResult_FWD_DEFINED__
typedef interface IDownloadResult IDownloadResult;
#endif 	/* __IDownloadResult_FWD_DEFINED__ */


#ifndef __IDownloadProgress_FWD_DEFINED__
#define __IDownloadProgress_FWD_DEFINED__
typedef interface IDownloadProgress IDownloadProgress;
#endif 	/* __IDownloadProgress_FWD_DEFINED__ */


#ifndef __IDownloadJob_FWD_DEFINED__
#define __IDownloadJob_FWD_DEFINED__
typedef interface IDownloadJob IDownloadJob;
#endif 	/* __IDownloadJob_FWD_DEFINED__ */


#ifndef __IDownloadCompletedCallbackArgs_FWD_DEFINED__
#define __IDownloadCompletedCallbackArgs_FWD_DEFINED__
typedef interface IDownloadCompletedCallbackArgs IDownloadCompletedCallbackArgs;
#endif 	/* __IDownloadCompletedCallbackArgs_FWD_DEFINED__ */


#ifndef __IDownloadCompletedCallback_FWD_DEFINED__
#define __IDownloadCompletedCallback_FWD_DEFINED__
typedef interface IDownloadCompletedCallback IDownloadCompletedCallback;
#endif 	/* __IDownloadCompletedCallback_FWD_DEFINED__ */


#ifndef __IDownloadProgressChangedCallbackArgs_FWD_DEFINED__
#define __IDownloadProgressChangedCallbackArgs_FWD_DEFINED__
typedef interface IDownloadProgressChangedCallbackArgs IDownloadProgressChangedCallbackArgs;
#endif 	/* __IDownloadProgressChangedCallbackArgs_FWD_DEFINED__ */


#ifndef __IDownloadProgressChangedCallback_FWD_DEFINED__
#define __IDownloadProgressChangedCallback_FWD_DEFINED__
typedef interface IDownloadProgressChangedCallback IDownloadProgressChangedCallback;
#endif 	/* __IDownloadProgressChangedCallback_FWD_DEFINED__ */


#ifndef __IUpdateDownloader_FWD_DEFINED__
#define __IUpdateDownloader_FWD_DEFINED__
typedef interface IUpdateDownloader IUpdateDownloader;
#endif 	/* __IUpdateDownloader_FWD_DEFINED__ */


#ifndef __IUpdateInstallationResult_FWD_DEFINED__
#define __IUpdateInstallationResult_FWD_DEFINED__
typedef interface IUpdateInstallationResult IUpdateInstallationResult;
#endif 	/* __IUpdateInstallationResult_FWD_DEFINED__ */


#ifndef __IInstallationResult_FWD_DEFINED__
#define __IInstallationResult_FWD_DEFINED__
typedef interface IInstallationResult IInstallationResult;
#endif 	/* __IInstallationResult_FWD_DEFINED__ */


#ifndef __IInstallationProgress_FWD_DEFINED__
#define __IInstallationProgress_FWD_DEFINED__
typedef interface IInstallationProgress IInstallationProgress;
#endif 	/* __IInstallationProgress_FWD_DEFINED__ */


#ifndef __IInstallationJob_FWD_DEFINED__
#define __IInstallationJob_FWD_DEFINED__
typedef interface IInstallationJob IInstallationJob;
#endif 	/* __IInstallationJob_FWD_DEFINED__ */


#ifndef __IInstallationCompletedCallbackArgs_FWD_DEFINED__
#define __IInstallationCompletedCallbackArgs_FWD_DEFINED__
typedef interface IInstallationCompletedCallbackArgs IInstallationCompletedCallbackArgs;
#endif 	/* __IInstallationCompletedCallbackArgs_FWD_DEFINED__ */


#ifndef __IInstallationCompletedCallback_FWD_DEFINED__
#define __IInstallationCompletedCallback_FWD_DEFINED__
typedef interface IInstallationCompletedCallback IInstallationCompletedCallback;
#endif 	/* __IInstallationCompletedCallback_FWD_DEFINED__ */


#ifndef __IInstallationProgressChangedCallbackArgs_FWD_DEFINED__
#define __IInstallationProgressChangedCallbackArgs_FWD_DEFINED__
typedef interface IInstallationProgressChangedCallbackArgs IInstallationProgressChangedCallbackArgs;
#endif 	/* __IInstallationProgressChangedCallbackArgs_FWD_DEFINED__ */


#ifndef __IInstallationProgressChangedCallback_FWD_DEFINED__
#define __IInstallationProgressChangedCallback_FWD_DEFINED__
typedef interface IInstallationProgressChangedCallback IInstallationProgressChangedCallback;
#endif 	/* __IInstallationProgressChangedCallback_FWD_DEFINED__ */


#ifndef __IUpdateInstaller_FWD_DEFINED__
#define __IUpdateInstaller_FWD_DEFINED__
typedef interface IUpdateInstaller IUpdateInstaller;
#endif 	/* __IUpdateInstaller_FWD_DEFINED__ */


#ifndef __IUpdateInstaller2_FWD_DEFINED__
#define __IUpdateInstaller2_FWD_DEFINED__
typedef interface IUpdateInstaller2 IUpdateInstaller2;
#endif 	/* __IUpdateInstaller2_FWD_DEFINED__ */


#ifndef __IUpdateSession_FWD_DEFINED__
#define __IUpdateSession_FWD_DEFINED__
typedef interface IUpdateSession IUpdateSession;
#endif 	/* __IUpdateSession_FWD_DEFINED__ */


#ifndef __IUpdateSession2_FWD_DEFINED__
#define __IUpdateSession2_FWD_DEFINED__
typedef interface IUpdateSession2 IUpdateSession2;
#endif 	/* __IUpdateSession2_FWD_DEFINED__ */


#ifndef __IUpdateSession3_FWD_DEFINED__
#define __IUpdateSession3_FWD_DEFINED__
typedef interface IUpdateSession3 IUpdateSession3;
#endif 	/* __IUpdateSession3_FWD_DEFINED__ */


#ifndef __IUpdateService_FWD_DEFINED__
#define __IUpdateService_FWD_DEFINED__
typedef interface IUpdateService IUpdateService;
#endif 	/* __IUpdateService_FWD_DEFINED__ */


#ifndef __IUpdateService2_FWD_DEFINED__
#define __IUpdateService2_FWD_DEFINED__
typedef interface IUpdateService2 IUpdateService2;
#endif 	/* __IUpdateService2_FWD_DEFINED__ */


#ifndef __IUpdateServiceCollection_FWD_DEFINED__
#define __IUpdateServiceCollection_FWD_DEFINED__
typedef interface IUpdateServiceCollection IUpdateServiceCollection;
#endif 	/* __IUpdateServiceCollection_FWD_DEFINED__ */


#ifndef __IUpdateServiceRegistration_FWD_DEFINED__
#define __IUpdateServiceRegistration_FWD_DEFINED__
typedef interface IUpdateServiceRegistration IUpdateServiceRegistration;
#endif 	/* __IUpdateServiceRegistration_FWD_DEFINED__ */


#ifndef __IUpdateServiceManager_FWD_DEFINED__
#define __IUpdateServiceManager_FWD_DEFINED__
typedef interface IUpdateServiceManager IUpdateServiceManager;
#endif 	/* __IUpdateServiceManager_FWD_DEFINED__ */


#ifndef __IUpdateServiceManager2_FWD_DEFINED__
#define __IUpdateServiceManager2_FWD_DEFINED__
typedef interface IUpdateServiceManager2 IUpdateServiceManager2;
#endif 	/* __IUpdateServiceManager2_FWD_DEFINED__ */


#ifndef __IInstallationAgent_FWD_DEFINED__
#define __IInstallationAgent_FWD_DEFINED__
typedef interface IInstallationAgent IInstallationAgent;
#endif 	/* __IInstallationAgent_FWD_DEFINED__ */


#ifndef __IUpdateLockdown_FWD_DEFINED__
#define __IUpdateLockdown_FWD_DEFINED__
typedef interface IUpdateLockdown IUpdateLockdown;
#endif 	/* __IUpdateLockdown_FWD_DEFINED__ */


#ifndef __IUpdateException_FWD_DEFINED__
#define __IUpdateException_FWD_DEFINED__
typedef interface IUpdateException IUpdateException;
#endif 	/* __IUpdateException_FWD_DEFINED__ */


#ifndef __IInvalidProductLicenseException_FWD_DEFINED__
#define __IInvalidProductLicenseException_FWD_DEFINED__
typedef interface IInvalidProductLicenseException IInvalidProductLicenseException;
#endif 	/* __IInvalidProductLicenseException_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings_FWD_DEFINED__
#define __IAutomaticUpdatesSettings_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings IAutomaticUpdatesSettings;
#endif 	/* __IAutomaticUpdatesSettings_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings2_FWD_DEFINED__
#define __IAutomaticUpdatesSettings2_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings2 IAutomaticUpdatesSettings2;
#endif 	/* __IAutomaticUpdatesSettings2_FWD_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings3_FWD_DEFINED__
#define __IAutomaticUpdatesSettings3_FWD_DEFINED__
typedef interface IAutomaticUpdatesSettings3 IAutomaticUpdatesSettings3;
#endif 	/* __IAutomaticUpdatesSettings3_FWD_DEFINED__ */


#ifndef __IUpdate_FWD_DEFINED__
#define __IUpdate_FWD_DEFINED__
typedef interface IUpdate IUpdate;
#endif 	/* __IUpdate_FWD_DEFINED__ */


#ifndef __IUpdate2_FWD_DEFINED__
#define __IUpdate2_FWD_DEFINED__
typedef interface IUpdate2 IUpdate2;
#endif 	/* __IUpdate2_FWD_DEFINED__ */


#ifndef __IUpdate3_FWD_DEFINED__
#define __IUpdate3_FWD_DEFINED__
typedef interface IUpdate3 IUpdate3;
#endif 	/* __IUpdate3_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntry_FWD_DEFINED__
#define __IWindowsDriverUpdateEntry_FWD_DEFINED__
typedef interface IWindowsDriverUpdateEntry IWindowsDriverUpdateEntry;
#endif 	/* __IWindowsDriverUpdateEntry_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__
#define __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__
typedef interface IWindowsDriverUpdateEntryCollection IWindowsDriverUpdateEntryCollection;
#endif 	/* __IWindowsDriverUpdateEntryCollection_FWD_DEFINED__ */


#ifndef __IUpdate4_FWD_DEFINED__
#define __IUpdate4_FWD_DEFINED__
typedef interface IUpdate4 IUpdate4;
#endif 	/* __IUpdate4_FWD_DEFINED__ */


#ifndef __IUpdate5_FWD_DEFINED__
#define __IUpdate5_FWD_DEFINED__
typedef interface IUpdate5 IUpdate5;
#endif 	/* __IUpdate5_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate_FWD_DEFINED__
#define __IWindowsDriverUpdate_FWD_DEFINED__
typedef interface IWindowsDriverUpdate IWindowsDriverUpdate;
#endif 	/* __IWindowsDriverUpdate_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate2_FWD_DEFINED__
#define __IWindowsDriverUpdate2_FWD_DEFINED__
typedef interface IWindowsDriverUpdate2 IWindowsDriverUpdate2;
#endif 	/* __IWindowsDriverUpdate2_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate3_FWD_DEFINED__
#define __IWindowsDriverUpdate3_FWD_DEFINED__
typedef interface IWindowsDriverUpdate3 IWindowsDriverUpdate3;
#endif 	/* __IWindowsDriverUpdate3_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate4_FWD_DEFINED__
#define __IWindowsDriverUpdate4_FWD_DEFINED__
typedef interface IWindowsDriverUpdate4 IWindowsDriverUpdate4;
#endif 	/* __IWindowsDriverUpdate4_FWD_DEFINED__ */


#ifndef __IWindowsDriverUpdate5_FWD_DEFINED__
#define __IWindowsDriverUpdate5_FWD_DEFINED__
typedef interface IWindowsDriverUpdate5 IWindowsDriverUpdate5;
#endif 	/* __IWindowsDriverUpdate5_FWD_DEFINED__ */


#ifndef __ISearchCompletedCallback_FWD_DEFINED__
#define __ISearchCompletedCallback_FWD_DEFINED__
typedef interface ISearchCompletedCallback ISearchCompletedCallback;
#endif 	/* __ISearchCompletedCallback_FWD_DEFINED__ */


#ifndef __IDownloadCompletedCallback_FWD_DEFINED__
#define __IDownloadCompletedCallback_FWD_DEFINED__
typedef interface IDownloadCompletedCallback IDownloadCompletedCallback;
#endif 	/* __IDownloadCompletedCallback_FWD_DEFINED__ */


#ifndef __IDownloadProgressChangedCallback_FWD_DEFINED__
#define __IDownloadProgressChangedCallback_FWD_DEFINED__
typedef interface IDownloadProgressChangedCallback IDownloadProgressChangedCallback;
#endif 	/* __IDownloadProgressChangedCallback_FWD_DEFINED__ */


#ifndef __IInstallationCompletedCallback_FWD_DEFINED__
#define __IInstallationCompletedCallback_FWD_DEFINED__
typedef interface IInstallationCompletedCallback IInstallationCompletedCallback;
#endif 	/* __IInstallationCompletedCallback_FWD_DEFINED__ */


#ifndef __IInstallationProgressChangedCallback_FWD_DEFINED__
#define __IInstallationProgressChangedCallback_FWD_DEFINED__
typedef interface IInstallationProgressChangedCallback IInstallationProgressChangedCallback;
#endif 	/* __IInstallationProgressChangedCallback_FWD_DEFINED__ */


#ifndef __IUpdateHistoryEntry_FWD_DEFINED__
#define __IUpdateHistoryEntry_FWD_DEFINED__
typedef interface IUpdateHistoryEntry IUpdateHistoryEntry;
#endif 	/* __IUpdateHistoryEntry_FWD_DEFINED__ */


#ifndef __IUpdateHistoryEntry2_FWD_DEFINED__
#define __IUpdateHistoryEntry2_FWD_DEFINED__
typedef interface IUpdateHistoryEntry2 IUpdateHistoryEntry2;
#endif 	/* __IUpdateHistoryEntry2_FWD_DEFINED__ */


#ifndef __IUpdateDownloadContent_FWD_DEFINED__
#define __IUpdateDownloadContent_FWD_DEFINED__
typedef interface IUpdateDownloadContent IUpdateDownloadContent;
#endif 	/* __IUpdateDownloadContent_FWD_DEFINED__ */


#ifndef __IUpdateDownloadContent2_FWD_DEFINED__
#define __IUpdateDownloadContent2_FWD_DEFINED__
typedef interface IUpdateDownloadContent2 IUpdateDownloadContent2;
#endif 	/* __IUpdateDownloadContent2_FWD_DEFINED__ */


#ifndef __StringCollection_FWD_DEFINED__
#define __StringCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class StringCollection StringCollection;
#else
typedef struct StringCollection StringCollection;
#endif /* __cplusplus */

#endif 	/* __StringCollection_FWD_DEFINED__ */


#ifndef __UpdateSearcher_FWD_DEFINED__
#define __UpdateSearcher_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateSearcher UpdateSearcher;
#else
typedef struct UpdateSearcher UpdateSearcher;
#endif /* __cplusplus */

#endif 	/* __UpdateSearcher_FWD_DEFINED__ */


#ifndef __WebProxy_FWD_DEFINED__
#define __WebProxy_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebProxy WebProxy;
#else
typedef struct WebProxy WebProxy;
#endif /* __cplusplus */

#endif 	/* __WebProxy_FWD_DEFINED__ */


#ifndef __SystemInformation_FWD_DEFINED__
#define __SystemInformation_FWD_DEFINED__

#ifdef __cplusplus
typedef class SystemInformation SystemInformation;
#else
typedef struct SystemInformation SystemInformation;
#endif /* __cplusplus */

#endif 	/* __SystemInformation_FWD_DEFINED__ */


#ifndef __WindowsUpdateAgentInfo_FWD_DEFINED__
#define __WindowsUpdateAgentInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class WindowsUpdateAgentInfo WindowsUpdateAgentInfo;
#else
typedef struct WindowsUpdateAgentInfo WindowsUpdateAgentInfo;
#endif /* __cplusplus */

#endif 	/* __WindowsUpdateAgentInfo_FWD_DEFINED__ */


#ifndef __AutomaticUpdates_FWD_DEFINED__
#define __AutomaticUpdates_FWD_DEFINED__

#ifdef __cplusplus
typedef class AutomaticUpdates AutomaticUpdates;
#else
typedef struct AutomaticUpdates AutomaticUpdates;
#endif /* __cplusplus */

#endif 	/* __AutomaticUpdates_FWD_DEFINED__ */


#ifndef __UpdateCollection_FWD_DEFINED__
#define __UpdateCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateCollection UpdateCollection;
#else
typedef struct UpdateCollection UpdateCollection;
#endif /* __cplusplus */

#endif 	/* __UpdateCollection_FWD_DEFINED__ */


#ifndef __UpdateDownloader_FWD_DEFINED__
#define __UpdateDownloader_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateDownloader UpdateDownloader;
#else
typedef struct UpdateDownloader UpdateDownloader;
#endif /* __cplusplus */

#endif 	/* __UpdateDownloader_FWD_DEFINED__ */


#ifndef __UpdateInstaller_FWD_DEFINED__
#define __UpdateInstaller_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateInstaller UpdateInstaller;
#else
typedef struct UpdateInstaller UpdateInstaller;
#endif /* __cplusplus */

#endif 	/* __UpdateInstaller_FWD_DEFINED__ */


#ifndef __UpdateSession_FWD_DEFINED__
#define __UpdateSession_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateSession UpdateSession;
#else
typedef struct UpdateSession UpdateSession;
#endif /* __cplusplus */

#endif 	/* __UpdateSession_FWD_DEFINED__ */


#ifndef __UpdateServiceManager_FWD_DEFINED__
#define __UpdateServiceManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateServiceManager UpdateServiceManager;
#else
typedef struct UpdateServiceManager UpdateServiceManager;
#endif /* __cplusplus */

#endif 	/* __UpdateServiceManager_FWD_DEFINED__ */


#ifndef __InstallationAgent_FWD_DEFINED__
#define __InstallationAgent_FWD_DEFINED__

#ifdef __cplusplus
typedef class InstallationAgent InstallationAgent;
#else
typedef struct InstallationAgent InstallationAgent;
#endif /* __cplusplus */

#endif 	/* __InstallationAgent_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wuapi_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// wuapi.h
//=--------------------------------------------------------------------------=
// (C) Copyright 2003-2004 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib, "wuguid.lib")

//--------------------------------------------------------------------------
// Windows Update Services Client Interfaces.
// --------------------------------------------------------------------------------
// GUIDS
// --------------------------------------------------------------------------------
// {B596CC9F-56E5-419E-A622-E01BB457431E}
DEFINE_GUID(LIBID_WUApiLib,0xB596CC9F,0x56E5,0x419E,0xA6,0x22,0xE0,0x1B,0xB4,0x57,0x43,0x1E);

// {A976C28D-75A1-42AA-94AE-8AF8B872089A}
DEFINE_GUID(IID_IUpdateLockdown,0xa976c28d,0x75a1,0x42aa,0x94,0xae,0x8a,0xf8,0xb8,0x72,0x08,0x9a);

// {EFF90582-2DDC-480F-A06D-60F3FBC362C3}
DEFINE_GUID(IID_IStringCollection,0xeff90582,0x2ddc,0x480f,0xa0,0x6d,0x60,0xf3,0xfb,0xc3,0x62,0xc3);

// {174C81FE-AECD-4DAE-B8A0-2C6318DD86A8}
DEFINE_GUID(IID_IWebProxy,0x174c81fe,0xaecd,0x4dae,0xb8,0xa0,0x2c,0x63,0x18,0xdd,0x86,0xa8);

// {ADE87BF7-7B56-4275-8FAB-B9B0E591844B}
DEFINE_GUID(IID_ISystemInformation,0xade87bf7,0x7b56,0x4275,0x8f,0xab,0xb9,0xb0,0xe5,0x91,0x84,0x4b);

// {85713FA1-7796-4FA2-BE3B-E2D6124DD373}
DEFINE_GUID(IID_IWindowsUpdateAgentInfo,0x85713FA1,0x7796,0x4FA2,0xBE,0x3B,0xE2,0xD6,0x12,0x4D,0xD3,0x73);

// {E7A4D634-7942-4DD9-A111-82228BA33901}
DEFINE_GUID(IID_IAutomaticUpdatesResults,0xe7a4d634,0x7942,0x4DD9,0xA1,0x11,0x82,0x22,0x8b,0xa3,0x39,0x1);

// {2EE48F22-AF3C-405F-8970-F71BE12EE9A2}
DEFINE_GUID(IID_IAutomaticUpdatesSettings,0x2ee48f22,0xaf3c,0x405f,0x89,0x70,0xf7,0x1b,0xe1,0x2e,0xe9,0xa2);

// {6ABC136A-C3CA-4384-8171-CB2B1E59B8DC}
DEFINE_GUID(IID_IAutomaticUpdatesSettings2,0x6abc136a,0xc3ca,0x4384,0x81,0x71,0xcb,0x2b,0x1e,0x59,0xb8,0xdc);

// {B587F5C3-F57E-485F-BBF5-0D181C5CD0DC}
DEFINE_GUID(IID_IAutomaticUpdatesSettings3,0xb587f5c3,0xf57e,0x485f,0xbb,0xf5,0x0d,0x18,0x1c,0x5c,0xd0,0xdc);

// {673425BF-C082-4C7C-BDFD-569464B8E0CE}
DEFINE_GUID(IID_IAutomaticUpdates,0x673425bf,0xc082,0x4c7c,0xbd,0xfd,0x56,0x94,0x64,0xb8,0xe0,0xce);

// {4A2F5C31-CFD9-410E-B7FB-29A653973A0F}
DEFINE_GUID(IID_IAutomaticUpdates2,0x4A2f5C31,0xCFD9,0x410E,0xB7,0xFB,0x29,0xA6,0x53,0x97,0x3A,0xF);

// {46297823-9940-4C09-AED9-CD3EA6D05968}
DEFINE_GUID(IID_IUpdateIdentity,0x46297823,0x9940,0x4c09,0xae,0xd9,0xcd,0x3e,0xa6,0xd0,0x59,0x68);

// {7C907864-346C-4AEB-8F3F-57DA289F969F}
DEFINE_GUID(IID_IImageInformation,0x7c907864,0x346c,0x4aeb,0x8f,0x3f,0x57,0xda,0x28,0x9f,0x96,0x9f);

// {81DDC1B8-9D35-47A6-B471-5B80F519223B}
DEFINE_GUID(IID_ICategory,0x81ddc1b8,0x9d35,0x47a6,0xb4,0x71,0x5b,0x80,0xf5,0x19,0x22,0x3b);

// {3A56BFB8-576C-43F7-9335-FE4838FD7E37}
DEFINE_GUID(IID_ICategoryCollection,0x3a56bfb8,0x576c,0x43f7,0x93,0x35,0xfe,0x48,0x38,0xfd,0x7e,0x37);

// {D9A59339-E245-4DBD-9686-4D5763E39624}
DEFINE_GUID(IID_IInstallationBehavior,0xd9a59339,0xe245,0x4dbd,0x96,0x86,0x4d,0x57,0x63,0xe3,0x96,0x24);

// {54A2CB2D-9A0C-48B6-8A50-9ABB69EE2D02}
DEFINE_GUID(IID_IUpdateDownloadContent,0x54a2cb2d,0x9a0c,0x48b6,0x8a,0x50,0x9a,0xbb,0x69,0xee,0x2d,0x02);

// {C97AD11B-F257-420B-9D9F-377F733F6F68}
DEFINE_GUID(IID_IUpdateDownloadContent2,0xc97ad11b,0xf257,0x420b,0x9d,0x9f,0x37,0x7f,0x73,0x3f,0x6f,0x68);

// {BC5513C8-B3B8-4BF7-A4D4-361C0D8C88BA}
DEFINE_GUID(IID_IUpdateDownloadContentCollection,0xbc5513c8,0xb3b8,0x4bf7,0xa4,0xd4,0x36,0x1c,0x0d,0x8c,0x88,0xba);

// {6A92B07A-D821-4682-B423-5C805022CC4D}
DEFINE_GUID(IID_IUpdate,0x6a92b07a,0xd821,0x4682,0xb4,0x23,0x5c,0x80,0x50,0x22,0xcc,0x4d);

// {144fe9b0-d23d-4a8b-8634-fb4457533b7a}
DEFINE_GUID(IID_IUpdate2,0x144fe9b0,0xd23d,0x4a8b,0x86,0x34,0xfb,0x44,0x57,0x53,0x3b,0x7a);

// {112EDA6B-95B3-476F-9D90-AEE82C6B8181}
DEFINE_GUID(IID_IUpdate3,0x112EDA6B,0x95B3,0x476F,0x9D,0x90,0xAE,0xE8,0x2C,0x6B,0x81,0x81);

// {27E94B0D-5139-49A2-9A61-93522DC54652}
DEFINE_GUID(IID_IUpdate4,0x27e94b0d,0x5139,0x49a2,0x9a, 0x61, 0x93, 0x52, 0x2d, 0xc5, 0x46, 0x52);

// {C1C2F21A-D2F4-4902-B5C6-8A081C19A890}
DEFINE_GUID(IID_IUpdate5,0xc1c2f21a,0xd2f4,0x4902,0xb5, 0xc6, 0x8a, 0x08, 0x1c, 0x19, 0xa8, 0x90);

// {B383CD1A-5CE9-4504-9F63-764B1236F191}
DEFINE_GUID(IID_IWindowsDriverUpdate,0xb383cd1a,0x5ce9,0x4504,0x9f,0x63,0x76,0x4b,0x12,0x36,0xf1,0x91);

// {615c4269-7a48-43bd-96b7-bf6ca27d6c3e}
DEFINE_GUID(IID_IWindowsDriverUpdate2,0x615c4269,0x7a48,0x43bd,0x96,0xb7,0xbf,0x6c,0xa2,0x7d,0x6c,0x3e);

// {49EBD502-4A96-41BD-9E3E-4C5057F4250C}
DEFINE_GUID(IID_IWindowsDriverUpdate3,0x49EBD502,0x4A96,0x41BD,0x9E,0x3E,0x4C,0x50,0x57,0xF4,0x25,0x0C);

// {004C6A2B-0C19-4c69-9F5C-A269B2560DB9}
DEFINE_GUID(IID_IWindowsDriverUpdate4,0x004C6A2B,0x0C19,0x4c69,0x9F,0x5C,0xA2,0x69,0xB2,0x56,0x0D,0xB9);

// {70CF5C82-8642-42bb-9DBC-0CFD263C6C4F}
DEFINE_GUID(IID_IWindowsDriverUpdate5,0x70CF5C82,0x8642,0x42bb,0x9d,0xbc,0x0c,0xfd,0x26,0x3c,0x6c,0x4f);

// {0D521700-A372-4bef-828B-3D00C10ADEBD}
DEFINE_GUID(IID_IWindowsDriverUpdateEntryCollection,0x0D521700,0xA372,0x4bef,0x82,0x8B,0x3D,0x00,0xC1,0x0A,0xDE,0xBD);

// {ED8BFE40-A60B-42ea-9652-817DFCFA23EC}
DEFINE_GUID(IID_IWindowsDriverUpdateEntry,0xED8BFE40,0xA60B,0x42ea,0x96,0x52,0x81,0x7D,0xFC,0xFA,0x23,0xEC);

// {07F7438C-7709-4CA5-B518-91279288134E}
DEFINE_GUID(IID_IUpdateCollection,0x07f7438c,0x7709,0x4ca5,0xb5,0x18,0x91,0x27,0x92,0x88,0x13,0x4e);

// {A376DD5E-09D4-427F-AF7C-FED5B6E1C1D6}
DEFINE_GUID(IID_IUpdateException,0xa376dd5e,0x09d4,0x427f,0xaf,0x7c,0xfe,0xd5,0xb6,0xe1,0xc1,0xd6);

// {A37D00F5-7BB0-4953-B414-F9E98326F2E8}
DEFINE_GUID(IID_IInvalidProductLicenseException,0xa37d00f5,0x7bb0,0x4953,0xb4,0x14,0xf9,0xe9,0x83,0x26,0xf2,0xe8);

// {A37D00F5-7BB0-4953-B414-F9E98326F2E8}
DEFINE_GUID(IID_IUpdateExceptionCollection,0x503626a3,0x8e14,0x4729,0x93,0x55,0x0f,0xe6,0x64,0xbd,0x23,0x21);

// {D40CFF62-E08C-4498-941A-01E25F0FD33C}
DEFINE_GUID(IID_ISearchResult,0xd40cff62,0xe08c,0x4498,0x94,0x1a,0x01,0xe2,0x5f,0x0f,0xd3,0x3c);

// {7366EA16-7A1A-4EA2-B042-973D3E9CD99B}
DEFINE_GUID(IID_ISearchJob,0x7366ea16,0x7a1a,0x4ea2,0xb0,0x42,0x97,0x3d,0x3e,0x9c,0xd9,0x9b);

// {A700A634-2850-4C47-938A-9E4B6E5AF9A6}
DEFINE_GUID(IID_ISearchCompletedCallbackArgs,0xa700a634,0x2850,0x4c47,0x93,0x8a,0x9e,0x4b,0x6e,0x5a,0xf9,0xa6);

// {88AEE058-D4B0-4725-A2F1-814A67AE964C}
DEFINE_GUID(IID_ISearchCompletedCallback,0x88aee058,0xd4b0,0x4725,0xa2,0xf1,0x81,0x4a,0x67,0xae,0x96,0x4c);

// {BE56A644-AF0E-4E0E-A311-C1D8E695CBFF}
DEFINE_GUID(IID_IUpdateHistoryEntry,0xbe56a644,0xaf0e,0x4e0e,0xa3,0x11,0xc1,0xd8,0xe6,0x95,0xcb,0xff);

// {C2BFB780-4539-4132-AB8C-0A8772013AB6}
DEFINE_GUID(IID_IUpdateHistoryEntry2,0xc2bfb780,0x4539,0x4132,0xab,0x8c,0x0a,0x87,0x72,0x01,0x3a,0xb6);

// {A7F04F3C-A290-435B-AADF-A116C3357A5C}
DEFINE_GUID(IID_IUpdateHistoryEntryCollection,0xa7f04f3c,0xa290,0x435b,0xaa,0xdf,0xa1,0x16,0xc3,0x35,0x7a,0x5c);

// {8F45ABF1-F9AE-4B95-A933-F0F66E5056EA}
DEFINE_GUID(IID_IUpdateSearcher,0x8f45abf1,0xf9ae,0x4b95,0xa9,0x33,0xf0,0xf6,0x6e,0x50,0x56,0xea);

// {4CBDCB2D-1589-4BEB-BD1C-3E582FF0ADD0}
DEFINE_GUID(IID_IUpdateSearcher2,0x4cbdcb2d,0x1589,0x4beb,0xbd,0x1c,0x3e,0x58,0x2f,0xf0,0xad,0xd0);

// {04C6895D-EAF2-4034-97F3-311DE9BE413A}
DEFINE_GUID(IID_IUpdateSearcher3,0x4c6895d,0xeaf2,0x4034,0x97,0xf3,0x31,0x1d,0xe9,0xbe,0x41,0x3a);

// {BF99AF76-B575-42AD-8AA4-33CBB5477AF1}
DEFINE_GUID(IID_IUpdateDownloadResult,0xbf99af76,0xb575,0x42ad,0x8a,0xa4,0x33,0xcb,0xb5,0x47,0x7a,0xf1);

// {DAA4FDD0-4727-4DBE-A1E7-745DCA317144}
DEFINE_GUID(IID_IDownloadResult,0xdaa4fdd0,0x4727,0x4dbe,0xa1,0xe7,0x74,0x5d,0xca,0x31,0x71,0x44);

// {D31A5BAC-F719-4178-9DBB-5E2CB47FD18A}
DEFINE_GUID(IID_IDownloadProgress,0xd31a5bac,0xf719,0x4178,0x9d,0xbb,0x5e,0x2c,0xb4,0x7f,0xd1,0x8a);

// {C574DE85-7358-43F6-AAE8-8697E62D8BA7}
DEFINE_GUID(IID_IDownloadJob,0xc574de85,0x7358,0x43f6,0xaa,0xe8,0x86,0x97,0xe6,0x2d,0x8b,0xa7);

// {FA565B23-498C-47A0-979D-E7D5B1813360}
DEFINE_GUID(IID_IDownloadCompletedCallbackArgs,0xfa565b23,0x498c,0x47a0,0x97,0x9d,0xe7,0xd5,0xb1,0x81,0x33,0x60);

// {77254866-9F5B-4C8E-B9E2-C77A8530D64B}
DEFINE_GUID(IID_IDownloadCompletedCallback,0x77254866,0x9f5b,0x4c8e,0xb9,0xe2,0xc7,0x7a,0x85,0x30,0xd6,0x4b);

// {324FF2C6-4981-4B04-9412-57481745AB24}
DEFINE_GUID(IID_IDownloadProgressChangedCallbackArgs,0x324ff2c6,0x4981,0x4b04,0x94,0x12,0x57,0x48,0x17,0x45,0xab,0x24);

// {8C3F1CDD-6173-4591-AEBD-A56A53CA77C1}
DEFINE_GUID(IID_IDownloadProgressChangedCallback,0x8c3f1cdd,0x6173,0x4591,0xae,0xbd,0xa5,0x6a,0x53,0xca,0x77,0xc1);

// {68F1C6F9-7ECC-4666-A464-247FE12496C3}
DEFINE_GUID(IID_IUpdateDownloader,0x68f1c6f9,0x7ecc,0x4666,0xa4,0x64,0x24,0x7f,0xe1,0x24,0x96,0xc3);

// {D940F0F8-3CBB-4FD0-993F-471E7F2328AD}
DEFINE_GUID(IID_IUpdateInstallationResult,0xd940f0f8,0x3cbb,0x4fd0,0x99,0x3f,0x47,0x1e,0x7f,0x23,0x28,0xad);

// {A43C56D6-7451-48D4-AF96-B6CD2D0D9B7A}
DEFINE_GUID(IID_IInstallationResult,0xa43c56d6,0x7451,0x48d4,0xaf,0x96,0xb6,0xcd,0x2d,0x0d,0x9b,0x7a);

// {345C8244-43A3-4E32-A368-65F073B76F36}
DEFINE_GUID(IID_IInstallationProgress,0x345c8244,0x43a3,0x4e32,0xa3,0x68,0x65,0xf0,0x73,0xb7,0x6f,0x36);

// {5C209F0B-BAD5-432A-9556-4699BED2638A}
DEFINE_GUID(IID_IInstallationJob,0x5c209f0b,0xbad5,0x432a,0x95,0x56,0x46,0x99,0xbe,0xd2,0x63,0x8a);

// {250E2106-8EFB-4705-9653-EF13C581B6A1}
DEFINE_GUID(IID_IInstallationCompletedCallbackArgs,0x250e2106,0x8efb,0x4705,0x96,0x53,0xef,0x13,0xc5,0x81,0xb6,0xa1);

// {45F4F6F3-D602-4F98-9A8A-3EFA152AD2D3}
DEFINE_GUID(IID_IInstallationCompletedCallback,0x45f4f6f3,0xd602,0x4f98,0x9a,0x8a,0x3e,0xfa,0x15,0x2a,0xd2,0xd3);

// {E4F14E1E-689D-4218-A0B9-BC189C484A01}
DEFINE_GUID(IID_IInstallationProgressChangedCallbackArgs,0xe4f14e1e,0x689d,0x4218,0xa0,0xb9,0xbc,0x18,0x9c,0x48,0x4a,0x01);

// {E01402D5-F8DA-43BA-A012-38894BD048F1}
DEFINE_GUID(IID_IInstallationProgressChangedCallback,0xe01402d5,0xf8da,0x43ba,0xa0,0x12,0x38,0x89,0x4b,0xd0,0x48,0xf1);

// {7B929C68-CCDC-4226-96B1-8724600B54C2}
DEFINE_GUID(IID_IUpdateInstaller,0x7b929c68,0xccdc,0x4226,0x96,0xb1,0x87,0x24,0x60,0x0b,0x54,0xc2);

// {3442d4fe-224d-4cee-98cf-30e0c4d229e6}
DEFINE_GUID(IID_IUpdateInstaller2,0x3442d4fe,0x224d,0x4cee,0x98,0xcf,0x30,0xe0,0xc4,0xd2,0x29,0xe6);

// {816858A4-260D-4260-933A-2585F1ABC76B}
DEFINE_GUID(IID_IUpdateSession,0x816858a4,0x260d,0x4260,0x93,0x3a,0x25,0x85,0xf1,0xab,0xc7,0x6b);

// {91CAF7B0-EB23-49ED-9937-C52D817F46F7}
DEFINE_GUID(IID_IUpdateSession2,0x91caf7b0,0xeb23,0x49ed,0x99,0x37,0xc5,0x2d,0x81,0x7f,0x46,0xf7);

// {918EFD1E-B5D8-4c90-8540-AEB9BDC56F9D}
DEFINE_GUID(IID_IUpdateSession3,0x918efd1e,0xb5d8,0x4c90,0x85,0x40,0xae,0xb9,0xbd,0xc5,0x6f,0x9d);

// {76B3B17E-AED6-4DA5-85F0-83587F81ABE3}
DEFINE_GUID(IID_IUpdateService,0x76b3b17e,0xaed6,0x4da5,0x85,0xf0,0x83,0x58,0x7f,0x81,0xab,0xe3);

// {1518B460-6518-4172-940F-C75883B24CEB}
DEFINE_GUID(IID_IUpdateService2,0x1518b460,0x6518,0x4172,0x94,0x0f,0xc7,0x58,0x83,0xb2,0x4c,0xeb);

// {9B0353AA-0E52-44FF-B8B0-1F7FA0437F88}
DEFINE_GUID(IID_IUpdateServiceCollection,0x9b0353aa,0x0e52,0x44ff,0xb8,0xb0,0x1f,0x7f,0xa0,0x43,0x7f,0x88);

// {DDE02280-12B3-4E0B-937B-6747F6ACB286}
DEFINE_GUID(IID_IUpdateServiceRegistration,0xdde02280,0x12b3,0x4e0b,0x93,0x7b,0x67,0x47,0xf6,0xac,0xb2,0x86);

// {23857E3C-02BA-44A3-9423-B1C900805F37}
DEFINE_GUID(IID_IUpdateServiceManager,0x23857E3C,0x02BA,0x44A3,0x94,0x23,0xB1,0xC9,0x00,0x80,0x5F,0x37);

// {0BB8531D-7E8D-424F-986C-A0B8F60A3E7B}
DEFINE_GUID(IID_IUpdateServiceManager2,0x0BB8531D,0x7E8D,0x424F,0x98,0x6C,0xA0,0xB8,0xF6,0x0A,0x3E,0x7B);

// {925CBC18-A2EA-4648-BF1C-EC8BADCFE20A}
DEFINE_GUID(IID_IInstallationAgent,0x925CBC18,0xA2EA,0x4648,0xBF,0x1C,0xEC,0x8B,0xAD,0xCF,0xE2,0x0A);

// {72C97D74-7C3B-40AE-B77D-ABDB22EBA6FB}
DEFINE_GUID(CLSID_StringCollection,0x72C97D74,0x7C3B,0x40AE,0xB7,0x7D,0xAB,0xDB,0x22,0xEB,0xA6,0xFB);

// {B699E5E8-67FF-4177-88B0-3684A3388BFB}
DEFINE_GUID(CLSID_UpdateSearcher,0xB699E5E8,0x67FF,0x4177,0x88,0xB0,0x36,0x84,0xA3,0x38,0x8B,0xFB);

// {650503cf-9108-4ddc-a2ce-6c2341e1c582}
DEFINE_GUID(CLSID_WebProxy,0x650503cf,0x9108,0x4ddc,0xa2,0xce,0x6c,0x23,0x41,0xe1,0xc5,0x82);

// {C01B9BA0-BEA7-41BA-B604-D0A36F469133}
DEFINE_GUID(CLSID_SystemInformation,0xC01B9BA0,0xBEA7,0x41BA,0xB6,0x04,0xD0,0xA3,0x6F,0x46,0x91,0x33);

// {C2E88C2F-6F5B-4AAA-894B-55C847AD3A2D}
DEFINE_GUID(CLSID_WindowsUpdateAgentInfo,0xC2E88C2F,0x6F5B,0x4AAA,0x89,0x4B,0x55,0xC8,0x47,0xAD,0x3A,0x2D);

// {BFE18E9C-6D87-4450-B37C-E02F0B373803}
DEFINE_GUID(CLSID_AutomaticUpdates,0xBFE18E9C,0x6D87,0x4450,0xB3,0x7C,0xE0,0x2F,0x0B,0x37,0x38,0x03);

// {13639463-00DB-4646-803D-528026140D88}
DEFINE_GUID(CLSID_UpdateCollection,0x13639463,0x00DB,0x4646,0x80,0x3D,0x52,0x80,0x26,0x14,0x0D,0x88);

// {5BAF654A-5A07-4264-A255-9FF54C7151E7}
DEFINE_GUID(CLSID_UpdateDownloader,0x5BAF654A,0x5A07,0x4264,0xA2,0x55,0x9F,0xF5,0x4C,0x71,0x51,0xE7);

// {D2E0FE7F-D23E-48E1-93C0-6FA8CC346474}
DEFINE_GUID(CLSID_UpdateInstaller,0xD2E0FE7F,0xD23E,0x48E1,0x93,0xC0,0x6F,0xA8,0xCC,0x34,0x64,0x74);

// {4CB43D7F-7EEE-4906-8698-60DA1C38F2FE}
DEFINE_GUID(CLSID_UpdateSession,0x4CB43D7F,0x7EEE,0x4906,0x86,0x98,0x60,0xDA,0x1C,0x38,0xF2,0xFE);

// {F8D253D9-89A4-4DAA-87B6-1168369F0B21}
DEFINE_GUID(CLSID_UpdateServiceManager,0xF8D253D9,0x89A4,0x4DAA,0x87,0xB6,0x11,0x68,0x36,0x9F,0x0B,0x21);

// {317E92FC-1679-46FD-A0B5-F08914DD8623}
DEFINE_GUID(CLSID_InstallationAgent,0x317E92FC,0x1679,0x46FD,0xA0,0xB5,0xF0,0x89,0x14,0xDD,0x86,0x23);

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutomaticUpdatesNotificationLevel
    {	aunlNotConfigured	= 0,
	aunlDisabled	= 1,
	aunlNotifyBeforeDownload	= 2,
	aunlNotifyBeforeInstallation	= 3,
	aunlScheduledInstallation	= 4
    } 	AutomaticUpdatesNotificationLevel;

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutomaticUpdatesScheduledInstallationDay
    {	ausidEveryDay	= 0,
	ausidEverySunday	= 1,
	ausidEveryMonday	= 2,
	ausidEveryTuesday	= 3,
	ausidEveryWednesday	= 4,
	ausidEveryThursday	= 5,
	ausidEveryFriday	= 6,
	ausidEverySaturday	= 7
    } 	AutomaticUpdatesScheduledInstallationDay;

typedef /* [v1_enum][helpstring][public] */ 
enum tagDownloadPhase
    {	dphInitializing	= 1,
	dphDownloading	= 2,
	dphVerifying	= 3
    } 	DownloadPhase;

typedef /* [v1_enum][helpstring][public] */ 
enum tagDownloadPriority
    {	dpLow	= 1,
	dpNormal	= 2,
	dpHigh	= 3
    } 	DownloadPriority;

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutoSelectionMode
    {	asLetWindowsUpdateDecide	= 0,
	asAutoSelectIfDownloaded	= 1,
	asNeverAutoSelect	= 2,
	asAlwaysAutoSelect	= 3
    } 	AutoSelectionMode;

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutoDownloadMode
    {	adLetWindowsUpdateDecide	= 0,
	adNeverAutoDownload	= 1,
	adAlwaysAutoDownload	= 2
    } 	AutoDownloadMode;

typedef /* [v1_enum][helpstring][public] */ 
enum tagInstallationImpact
    {	iiNormal	= 0,
	iiMinor	= 1,
	iiRequiresExclusiveHandling	= 2
    } 	InstallationImpact;

typedef /* [v1_enum][helpstring][public] */ 
enum tagInstallationRebootBehavior
    {	irbNeverReboots	= 0,
	irbAlwaysRequiresReboot	= 1,
	irbCanRequestReboot	= 2
    } 	InstallationRebootBehavior;

typedef /* [v1_enum][helpstring][public] */ 
enum tagOperationResultCode
    {	orcNotStarted	= 0,
	orcInProgress	= 1,
	orcSucceeded	= 2,
	orcSucceededWithErrors	= 3,
	orcFailed	= 4,
	orcAborted	= 5
    } 	OperationResultCode;

typedef /* [v1_enum][helpstring][public] */ 
enum tagServerSelection
    {	ssDefault	= 0,
	ssManagedServer	= 1,
	ssWindowsUpdate	= 2,
	ssOthers	= 3
    } 	ServerSelection;

typedef /* [v1_enum][helpstring][public] */ 
enum tagUpdateType
    {	utSoftware	= 1,
	utDriver	= 2
    } 	UpdateType;

typedef /* [v1_enum][helpstring][public] */ 
enum tagUpdateOperation
    {	uoInstallation	= 1,
	uoUninstallation	= 2
    } 	UpdateOperation;

typedef /* [v1_enum][helpstring][public] */ 
enum tagDeploymentAction
    {	daNone	= 0,
	daInstallation	= 1,
	daUninstallation	= 2,
	daDetection	= 3
    } 	DeploymentAction;

typedef /* [v1_enum][helpstring][public] */ 
enum tagUpdateExceptionContext
    {	uecGeneral	= 1,
	uecWindowsDriver	= 2,
	uecWindowsInstaller	= 3
    } 	UpdateExceptionContext;

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutomaticUpdatesUserType
    {	auutCurrentUser	= 1,
	auutLocalAdministrator	= 2
    } 	AutomaticUpdatesUserType;

typedef /* [v1_enum][helpstring][public] */ 
enum tagAutomaticUpdatesPermissionType
    {	auptSetNotificationLevel	= 1,
	auptDisableAutomaticUpdates	= 2,
	auptSetIncludeRecommendedUpdates	= 3,
	auptSetFeaturedUpdatesEnabled	= 4,
	auptSetNonAdministratorsElevated	= 5
    } 	AutomaticUpdatesPermissionType;

typedef /* [v1_enum][helpstring][public] */ 
enum tagUpdateServiceRegistrationState
    {	usrsNotRegistered	= 1,
	usrsRegistrationPending	= 2,
	usrsRegistered	= 3
    } 	UpdateServiceRegistrationState;

typedef /* [v1_enum][helpstring][public] */ 
enum tagSearchScope
    {	searchScopeDefault	= 0,
	searchScopeMachineOnly	= 1,
	searchScopeCurrentUserOnly	= 2,
	searchScopeMachineAndCurrentUser	= 3,
	searchScopeMachineAndAllUsers	= 4,
	searchScopeAllUsers	= 5
    } 	SearchScope;

#define	UPDATE_LOCKDOWN_WEBSITE_ACCESS	( 0x1 )







extern RPC_IF_HANDLE __MIDL_itf_wuapi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wuapi_0000_0000_v0_0_s_ifspec;

#ifndef __IUpdateLockdown_INTERFACE_DEFINED__
#define __IUpdateLockdown_INTERFACE_DEFINED__

/* interface IUpdateLockdown */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateLockdown;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a976c28d-75a1-42aa-94ae-8af8b872089a")
    IUpdateLockdown : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LockDown( 
            /* [in] */ LONG flags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateLockdownVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateLockdown * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateLockdown * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateLockdown * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LockDown )( 
            __RPC__in IUpdateLockdown * This,
            /* [in] */ LONG flags);
        
        END_INTERFACE
    } IUpdateLockdownVtbl;

    interface IUpdateLockdown
    {
        CONST_VTBL struct IUpdateLockdownVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateLockdown_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateLockdown_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateLockdown_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateLockdown_LockDown(This,flags)	\
    ( (This)->lpVtbl -> LockDown(This,flags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateLockdown_INTERFACE_DEFINED__ */


#ifndef __IStringCollection_INTERFACE_DEFINED__
#define __IStringCollection_INTERFACE_DEFINED__

/* interface IStringCollection */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IStringCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eff90582-2ddc-480f-a06d-60f3fbc362c3")
    IStringCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [in] */ LONG index,
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in BSTR value,
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ LONG index,
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ LONG index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStringCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IStringCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IStringCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IStringCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IStringCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IStringCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IStringCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IStringCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IStringCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            __RPC__in IStringCollection * This,
            /* [in] */ LONG index,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IStringCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IStringCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IStringCollection * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            __RPC__in IStringCollection * This,
            /* [in] */ __RPC__in BSTR value,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in IStringCollection * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            __RPC__in IStringCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            __RPC__in IStringCollection * This,
            /* [in] */ LONG index,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in IStringCollection * This,
            /* [in] */ LONG index);
        
        END_INTERFACE
    } IStringCollectionVtbl;

    interface IStringCollection
    {
        CONST_VTBL struct IStringCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStringCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IStringCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IStringCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IStringCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IStringCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IStringCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IStringCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IStringCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IStringCollection_put_Item(This,index,value)	\
    ( (This)->lpVtbl -> put_Item(This,index,value) ) 

#define IStringCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IStringCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#define IStringCollection_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IStringCollection_Add(This,value,retval)	\
    ( (This)->lpVtbl -> Add(This,value,retval) ) 

#define IStringCollection_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define IStringCollection_Copy(This,retval)	\
    ( (This)->lpVtbl -> Copy(This,retval) ) 

#define IStringCollection_Insert(This,index,value)	\
    ( (This)->lpVtbl -> Insert(This,index,value) ) 

#define IStringCollection_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IStringCollection_INTERFACE_DEFINED__ */


#ifndef __IWebProxy_INTERFACE_DEFINED__
#define __IWebProxy_INTERFACE_DEFINED__

/* interface IWebProxy */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWebProxy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("174c81fe-aecd-4dae-b8a0-2c6318dd86a8")
    IWebProxy : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BypassList( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BypassList( 
            /* [in] */ __RPC__in_opt IStringCollection *value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BypassProxyOnLocal( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BypassProxyOnLocal( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserName( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetPassword( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PromptForCredentials( 
            /* [unique][in] */ __RPC__in_opt IUnknown *parentWindow,
            /* [in] */ __RPC__in BSTR title) = 0;
        
        virtual /* [helpstring][restricted][id] */ HRESULT STDMETHODCALLTYPE PromptForCredentialsFromHwnd( 
            /* [unique][in] */ __RPC__in_opt HWND parentWindow,
            /* [in] */ __RPC__in BSTR title) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoDetect( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoDetect( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebProxyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWebProxy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWebProxy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWebProxy * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWebProxy * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWebProxy * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BypassList )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BypassList )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in_opt IStringCollection *value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BypassProxyOnLocal )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BypassProxyOnLocal )( 
            __RPC__in IWebProxy * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserName )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetPassword )( 
            __RPC__in IWebProxy * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PromptForCredentials )( 
            __RPC__in IWebProxy * This,
            /* [unique][in] */ __RPC__in_opt IUnknown *parentWindow,
            /* [in] */ __RPC__in BSTR title);
        
        /* [helpstring][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *PromptForCredentialsFromHwnd )( 
            __RPC__in IWebProxy * This,
            /* [unique][in] */ __RPC__in_opt HWND parentWindow,
            /* [in] */ __RPC__in BSTR title);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDetect )( 
            __RPC__in IWebProxy * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDetect )( 
            __RPC__in IWebProxy * This,
            /* [in] */ VARIANT_BOOL value);
        
        END_INTERFACE
    } IWebProxyVtbl;

    interface IWebProxy
    {
        CONST_VTBL struct IWebProxyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebProxy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebProxy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebProxy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebProxy_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWebProxy_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWebProxy_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWebProxy_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWebProxy_get_Address(This,retval)	\
    ( (This)->lpVtbl -> get_Address(This,retval) ) 

#define IWebProxy_put_Address(This,value)	\
    ( (This)->lpVtbl -> put_Address(This,value) ) 

#define IWebProxy_get_BypassList(This,retval)	\
    ( (This)->lpVtbl -> get_BypassList(This,retval) ) 

#define IWebProxy_put_BypassList(This,value)	\
    ( (This)->lpVtbl -> put_BypassList(This,value) ) 

#define IWebProxy_get_BypassProxyOnLocal(This,retval)	\
    ( (This)->lpVtbl -> get_BypassProxyOnLocal(This,retval) ) 

#define IWebProxy_put_BypassProxyOnLocal(This,value)	\
    ( (This)->lpVtbl -> put_BypassProxyOnLocal(This,value) ) 

#define IWebProxy_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IWebProxy_get_UserName(This,retval)	\
    ( (This)->lpVtbl -> get_UserName(This,retval) ) 

#define IWebProxy_put_UserName(This,value)	\
    ( (This)->lpVtbl -> put_UserName(This,value) ) 

#define IWebProxy_SetPassword(This,value)	\
    ( (This)->lpVtbl -> SetPassword(This,value) ) 

#define IWebProxy_PromptForCredentials(This,parentWindow,title)	\
    ( (This)->lpVtbl -> PromptForCredentials(This,parentWindow,title) ) 

#define IWebProxy_PromptForCredentialsFromHwnd(This,parentWindow,title)	\
    ( (This)->lpVtbl -> PromptForCredentialsFromHwnd(This,parentWindow,title) ) 

#define IWebProxy_get_AutoDetect(This,retval)	\
    ( (This)->lpVtbl -> get_AutoDetect(This,retval) ) 

#define IWebProxy_put_AutoDetect(This,value)	\
    ( (This)->lpVtbl -> put_AutoDetect(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebProxy_INTERFACE_DEFINED__ */


#ifndef __ISystemInformation_INTERFACE_DEFINED__
#define __ISystemInformation_INTERFACE_DEFINED__

/* interface ISystemInformation */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ISystemInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ade87bf7-7b56-4275-8fab-b9b0e591844b")
    ISystemInformation : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OemHardwareSupportLink( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequired( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISystemInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISystemInformation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISystemInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISystemInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISystemInformation * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISystemInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISystemInformation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISystemInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OemHardwareSupportLink )( 
            __RPC__in ISystemInformation * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in ISystemInformation * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } ISystemInformationVtbl;

    interface ISystemInformation
    {
        CONST_VTBL struct ISystemInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISystemInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISystemInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISystemInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISystemInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISystemInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISystemInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISystemInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISystemInformation_get_OemHardwareSupportLink(This,retval)	\
    ( (This)->lpVtbl -> get_OemHardwareSupportLink(This,retval) ) 

#define ISystemInformation_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISystemInformation_INTERFACE_DEFINED__ */


#ifndef __IWindowsUpdateAgentInfo_INTERFACE_DEFINED__
#define __IWindowsUpdateAgentInfo_INTERFACE_DEFINED__

/* interface IWindowsUpdateAgentInfo */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsUpdateAgentInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85713fa1-7796-4fa2-be3b-e2d6124dd373")
    IWindowsUpdateAgentInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ VARIANT varInfoIdentifier,
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsUpdateAgentInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsUpdateAgentInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsUpdateAgentInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsUpdateAgentInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsUpdateAgentInfo * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsUpdateAgentInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsUpdateAgentInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsUpdateAgentInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            __RPC__in IWindowsUpdateAgentInfo * This,
            /* [in] */ VARIANT varInfoIdentifier,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        END_INTERFACE
    } IWindowsUpdateAgentInfoVtbl;

    interface IWindowsUpdateAgentInfo
    {
        CONST_VTBL struct IWindowsUpdateAgentInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsUpdateAgentInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsUpdateAgentInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsUpdateAgentInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsUpdateAgentInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsUpdateAgentInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsUpdateAgentInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsUpdateAgentInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsUpdateAgentInfo_GetInfo(This,varInfoIdentifier,retval)	\
    ( (This)->lpVtbl -> GetInfo(This,varInfoIdentifier,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsUpdateAgentInfo_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdatesResults_INTERFACE_DEFINED__
#define __IAutomaticUpdatesResults_INTERFACE_DEFINED__

/* interface IAutomaticUpdatesResults */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdatesResults;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E7A4D634-7942-4DD9-A111-82228BA33901")
    IAutomaticUpdatesResults : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastSearchSuccessDate( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastInstallationSuccessDate( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdatesResultsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdatesResults * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdatesResults * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdatesResults * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastSearchSuccessDate )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastInstallationSuccessDate )( 
            __RPC__in IAutomaticUpdatesResults * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        END_INTERFACE
    } IAutomaticUpdatesResultsVtbl;

    interface IAutomaticUpdatesResults
    {
        CONST_VTBL struct IAutomaticUpdatesResultsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdatesResults_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdatesResults_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdatesResults_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdatesResults_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdatesResults_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdatesResults_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdatesResults_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdatesResults_get_LastSearchSuccessDate(This,retval)	\
    ( (This)->lpVtbl -> get_LastSearchSuccessDate(This,retval) ) 

#define IAutomaticUpdatesResults_get_LastInstallationSuccessDate(This,retval)	\
    ( (This)->lpVtbl -> get_LastInstallationSuccessDate(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdatesResults_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings_INTERFACE_DEFINED__
#define __IAutomaticUpdatesSettings_INTERFACE_DEFINED__

/* interface IAutomaticUpdatesSettings */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdatesSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2ee48f22-af3c-405f-8970-f71be12ee9a2")
    IAutomaticUpdatesSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NotificationLevel( 
            /* [retval][out] */ __RPC__out AutomaticUpdatesNotificationLevel *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_NotificationLevel( 
            /* [in] */ AutomaticUpdatesNotificationLevel value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Required( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScheduledInstallationDay( 
            /* [retval][out] */ __RPC__out AutomaticUpdatesScheduledInstallationDay *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScheduledInstallationDay( 
            /* [in] */ AutomaticUpdatesScheduledInstallationDay value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScheduledInstallationTime( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScheduledInstallationTime( 
            /* [in] */ LONG value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdatesSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdatesSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdatesSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdatesSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesNotificationLevel *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ AutomaticUpdatesNotificationLevel value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Required )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesScheduledInstallationDay *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ AutomaticUpdatesScheduledInstallationDay value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings * This,
            /* [in] */ LONG value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IAutomaticUpdatesSettings * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            __RPC__in IAutomaticUpdatesSettings * This);
        
        END_INTERFACE
    } IAutomaticUpdatesSettingsVtbl;

    interface IAutomaticUpdatesSettings
    {
        CONST_VTBL struct IAutomaticUpdatesSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdatesSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdatesSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdatesSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdatesSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdatesSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdatesSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdatesSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdatesSettings_get_NotificationLevel(This,retval)	\
    ( (This)->lpVtbl -> get_NotificationLevel(This,retval) ) 

#define IAutomaticUpdatesSettings_put_NotificationLevel(This,value)	\
    ( (This)->lpVtbl -> put_NotificationLevel(This,value) ) 

#define IAutomaticUpdatesSettings_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IAutomaticUpdatesSettings_get_Required(This,retval)	\
    ( (This)->lpVtbl -> get_Required(This,retval) ) 

#define IAutomaticUpdatesSettings_get_ScheduledInstallationDay(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationDay(This,retval) ) 

#define IAutomaticUpdatesSettings_put_ScheduledInstallationDay(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationDay(This,value) ) 

#define IAutomaticUpdatesSettings_get_ScheduledInstallationTime(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationTime(This,retval) ) 

#define IAutomaticUpdatesSettings_put_ScheduledInstallationTime(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationTime(This,value) ) 

#define IAutomaticUpdatesSettings_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IAutomaticUpdatesSettings_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdatesSettings_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings2_INTERFACE_DEFINED__
#define __IAutomaticUpdatesSettings2_INTERFACE_DEFINED__

/* interface IAutomaticUpdatesSettings2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdatesSettings2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6abc136a-c3ca-4384-8171-cb2b1e59b8dc")
    IAutomaticUpdatesSettings2 : public IAutomaticUpdatesSettings
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeRecommendedUpdates( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeRecommendedUpdates( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CheckPermission( 
            /* [in] */ AutomaticUpdatesUserType userType,
            /* [in] */ AutomaticUpdatesPermissionType permissionType,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *userHasPermission) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdatesSettings2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdatesSettings2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdatesSettings2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdatesSettings2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesNotificationLevel *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ AutomaticUpdatesNotificationLevel value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Required )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesScheduledInstallationDay *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ AutomaticUpdatesScheduledInstallationDay value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ LONG value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IAutomaticUpdatesSettings2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            __RPC__in IAutomaticUpdatesSettings2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecommendedUpdates )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecommendedUpdates )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckPermission )( 
            __RPC__in IAutomaticUpdatesSettings2 * This,
            /* [in] */ AutomaticUpdatesUserType userType,
            /* [in] */ AutomaticUpdatesPermissionType permissionType,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *userHasPermission);
        
        END_INTERFACE
    } IAutomaticUpdatesSettings2Vtbl;

    interface IAutomaticUpdatesSettings2
    {
        CONST_VTBL struct IAutomaticUpdatesSettings2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdatesSettings2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdatesSettings2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdatesSettings2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdatesSettings2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdatesSettings2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdatesSettings2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdatesSettings2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdatesSettings2_get_NotificationLevel(This,retval)	\
    ( (This)->lpVtbl -> get_NotificationLevel(This,retval) ) 

#define IAutomaticUpdatesSettings2_put_NotificationLevel(This,value)	\
    ( (This)->lpVtbl -> put_NotificationLevel(This,value) ) 

#define IAutomaticUpdatesSettings2_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IAutomaticUpdatesSettings2_get_Required(This,retval)	\
    ( (This)->lpVtbl -> get_Required(This,retval) ) 

#define IAutomaticUpdatesSettings2_get_ScheduledInstallationDay(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationDay(This,retval) ) 

#define IAutomaticUpdatesSettings2_put_ScheduledInstallationDay(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationDay(This,value) ) 

#define IAutomaticUpdatesSettings2_get_ScheduledInstallationTime(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationTime(This,retval) ) 

#define IAutomaticUpdatesSettings2_put_ScheduledInstallationTime(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationTime(This,value) ) 

#define IAutomaticUpdatesSettings2_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IAutomaticUpdatesSettings2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 


#define IAutomaticUpdatesSettings2_get_IncludeRecommendedUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_IncludeRecommendedUpdates(This,retval) ) 

#define IAutomaticUpdatesSettings2_put_IncludeRecommendedUpdates(This,value)	\
    ( (This)->lpVtbl -> put_IncludeRecommendedUpdates(This,value) ) 

#define IAutomaticUpdatesSettings2_CheckPermission(This,userType,permissionType,userHasPermission)	\
    ( (This)->lpVtbl -> CheckPermission(This,userType,permissionType,userHasPermission) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdatesSettings2_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdatesSettings3_INTERFACE_DEFINED__
#define __IAutomaticUpdatesSettings3_INTERFACE_DEFINED__

/* interface IAutomaticUpdatesSettings3 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdatesSettings3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b587f5c3-f57e-485f-bbf5-0d181c5cd0dc")
    IAutomaticUpdatesSettings3 : public IAutomaticUpdatesSettings2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NonAdministratorsElevated( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_NonAdministratorsElevated( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FeaturedUpdatesEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FeaturedUpdatesEnabled( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdatesSettings3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdatesSettings3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdatesSettings3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdatesSettings3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesNotificationLevel *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NotificationLevel )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ AutomaticUpdatesNotificationLevel value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Required )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out AutomaticUpdatesScheduledInstallationDay *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationDay )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ AutomaticUpdatesScheduledInstallationDay value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScheduledInstallationTime )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ LONG value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IAutomaticUpdatesSettings3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            __RPC__in IAutomaticUpdatesSettings3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecommendedUpdates )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecommendedUpdates )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckPermission )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ AutomaticUpdatesUserType userType,
            /* [in] */ AutomaticUpdatesPermissionType permissionType,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *userHasPermission);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NonAdministratorsElevated )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NonAdministratorsElevated )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FeaturedUpdatesEnabled )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FeaturedUpdatesEnabled )( 
            __RPC__in IAutomaticUpdatesSettings3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        END_INTERFACE
    } IAutomaticUpdatesSettings3Vtbl;

    interface IAutomaticUpdatesSettings3
    {
        CONST_VTBL struct IAutomaticUpdatesSettings3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdatesSettings3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdatesSettings3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdatesSettings3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdatesSettings3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdatesSettings3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdatesSettings3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdatesSettings3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdatesSettings3_get_NotificationLevel(This,retval)	\
    ( (This)->lpVtbl -> get_NotificationLevel(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_NotificationLevel(This,value)	\
    ( (This)->lpVtbl -> put_NotificationLevel(This,value) ) 

#define IAutomaticUpdatesSettings3_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IAutomaticUpdatesSettings3_get_Required(This,retval)	\
    ( (This)->lpVtbl -> get_Required(This,retval) ) 

#define IAutomaticUpdatesSettings3_get_ScheduledInstallationDay(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationDay(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_ScheduledInstallationDay(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationDay(This,value) ) 

#define IAutomaticUpdatesSettings3_get_ScheduledInstallationTime(This,retval)	\
    ( (This)->lpVtbl -> get_ScheduledInstallationTime(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_ScheduledInstallationTime(This,value)	\
    ( (This)->lpVtbl -> put_ScheduledInstallationTime(This,value) ) 

#define IAutomaticUpdatesSettings3_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IAutomaticUpdatesSettings3_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 


#define IAutomaticUpdatesSettings3_get_IncludeRecommendedUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_IncludeRecommendedUpdates(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_IncludeRecommendedUpdates(This,value)	\
    ( (This)->lpVtbl -> put_IncludeRecommendedUpdates(This,value) ) 

#define IAutomaticUpdatesSettings3_CheckPermission(This,userType,permissionType,userHasPermission)	\
    ( (This)->lpVtbl -> CheckPermission(This,userType,permissionType,userHasPermission) ) 


#define IAutomaticUpdatesSettings3_get_NonAdministratorsElevated(This,retval)	\
    ( (This)->lpVtbl -> get_NonAdministratorsElevated(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_NonAdministratorsElevated(This,value)	\
    ( (This)->lpVtbl -> put_NonAdministratorsElevated(This,value) ) 

#define IAutomaticUpdatesSettings3_get_FeaturedUpdatesEnabled(This,retval)	\
    ( (This)->lpVtbl -> get_FeaturedUpdatesEnabled(This,retval) ) 

#define IAutomaticUpdatesSettings3_put_FeaturedUpdatesEnabled(This,value)	\
    ( (This)->lpVtbl -> put_FeaturedUpdatesEnabled(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdatesSettings3_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdates_INTERFACE_DEFINED__
#define __IAutomaticUpdates_INTERFACE_DEFINED__

/* interface IAutomaticUpdates */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("673425bf-c082-4c7c-bdfd-569464b8e0ce")
    IAutomaticUpdates : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DetectNow( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ShowSettingsDialog( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Settings( 
            /* [retval][out] */ __RPC__deref_out_opt IAutomaticUpdatesSettings **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServiceEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EnableService( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdates * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdates * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdates * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DetectNow )( 
            __RPC__in IAutomaticUpdates * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IAutomaticUpdates * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in IAutomaticUpdates * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ShowSettingsDialog )( 
            __RPC__in IAutomaticUpdates * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            __RPC__in IAutomaticUpdates * This,
            /* [retval][out] */ __RPC__deref_out_opt IAutomaticUpdatesSettings **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceEnabled )( 
            __RPC__in IAutomaticUpdates * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EnableService )( 
            __RPC__in IAutomaticUpdates * This);
        
        END_INTERFACE
    } IAutomaticUpdatesVtbl;

    interface IAutomaticUpdates
    {
        CONST_VTBL struct IAutomaticUpdatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdates_DetectNow(This)	\
    ( (This)->lpVtbl -> DetectNow(This) ) 

#define IAutomaticUpdates_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IAutomaticUpdates_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IAutomaticUpdates_ShowSettingsDialog(This)	\
    ( (This)->lpVtbl -> ShowSettingsDialog(This) ) 

#define IAutomaticUpdates_get_Settings(This,retval)	\
    ( (This)->lpVtbl -> get_Settings(This,retval) ) 

#define IAutomaticUpdates_get_ServiceEnabled(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceEnabled(This,retval) ) 

#define IAutomaticUpdates_EnableService(This)	\
    ( (This)->lpVtbl -> EnableService(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdates_INTERFACE_DEFINED__ */


#ifndef __IAutomaticUpdates2_INTERFACE_DEFINED__
#define __IAutomaticUpdates2_INTERFACE_DEFINED__

/* interface IAutomaticUpdates2 */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IAutomaticUpdates2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A2F5C31-CFD9-410E-B7FB-29A653973A0F")
    IAutomaticUpdates2 : public IAutomaticUpdates
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Results( 
            /* [retval][out] */ __RPC__deref_out_opt IAutomaticUpdatesResults **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutomaticUpdates2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAutomaticUpdates2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DetectNow )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ShowSettingsDialog )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IAutomaticUpdatesSettings **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceEnabled )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EnableService )( 
            __RPC__in IAutomaticUpdates2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Results )( 
            __RPC__in IAutomaticUpdates2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IAutomaticUpdatesResults **retval);
        
        END_INTERFACE
    } IAutomaticUpdates2Vtbl;

    interface IAutomaticUpdates2
    {
        CONST_VTBL struct IAutomaticUpdates2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutomaticUpdates2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAutomaticUpdates2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAutomaticUpdates2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAutomaticUpdates2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAutomaticUpdates2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAutomaticUpdates2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAutomaticUpdates2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAutomaticUpdates2_DetectNow(This)	\
    ( (This)->lpVtbl -> DetectNow(This) ) 

#define IAutomaticUpdates2_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IAutomaticUpdates2_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IAutomaticUpdates2_ShowSettingsDialog(This)	\
    ( (This)->lpVtbl -> ShowSettingsDialog(This) ) 

#define IAutomaticUpdates2_get_Settings(This,retval)	\
    ( (This)->lpVtbl -> get_Settings(This,retval) ) 

#define IAutomaticUpdates2_get_ServiceEnabled(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceEnabled(This,retval) ) 

#define IAutomaticUpdates2_EnableService(This)	\
    ( (This)->lpVtbl -> EnableService(This) ) 


#define IAutomaticUpdates2_get_Results(This,retval)	\
    ( (This)->lpVtbl -> get_Results(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAutomaticUpdates2_INTERFACE_DEFINED__ */


#ifndef __IUpdateIdentity_INTERFACE_DEFINED__
#define __IUpdateIdentity_INTERFACE_DEFINED__

/* interface IUpdateIdentity */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateIdentity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46297823-9940-4c09-aed9-cd3ea6d05968")
    IUpdateIdentity : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionNumber( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateIdentityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateIdentity * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateIdentity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateIdentity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateIdentity * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateIdentity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateIdentity * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateIdentity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionNumber )( 
            __RPC__in IUpdateIdentity * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateID )( 
            __RPC__in IUpdateIdentity * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        END_INTERFACE
    } IUpdateIdentityVtbl;

    interface IUpdateIdentity
    {
        CONST_VTBL struct IUpdateIdentityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateIdentity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateIdentity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateIdentity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateIdentity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateIdentity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateIdentity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateIdentity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateIdentity_get_RevisionNumber(This,retval)	\
    ( (This)->lpVtbl -> get_RevisionNumber(This,retval) ) 

#define IUpdateIdentity_get_UpdateID(This,retval)	\
    ( (This)->lpVtbl -> get_UpdateID(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateIdentity_INTERFACE_DEFINED__ */


#ifndef __IImageInformation_INTERFACE_DEFINED__
#define __IImageInformation_INTERFACE_DEFINED__

/* interface IImageInformation */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IImageInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7c907864-346c-4aeb-8f3f-57da289f969f")
    IImageInformation : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltText( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IImageInformation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IImageInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IImageInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IImageInformation * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IImageInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IImageInformation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImageInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltText )( 
            __RPC__in IImageInformation * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            __RPC__in IImageInformation * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __RPC__in IImageInformation * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            __RPC__in IImageInformation * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IImageInformationVtbl;

    interface IImageInformation
    {
        CONST_VTBL struct IImageInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImageInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImageInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImageInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImageInformation_get_AltText(This,retval)	\
    ( (This)->lpVtbl -> get_AltText(This,retval) ) 

#define IImageInformation_get_Height(This,retval)	\
    ( (This)->lpVtbl -> get_Height(This,retval) ) 

#define IImageInformation_get_Source(This,retval)	\
    ( (This)->lpVtbl -> get_Source(This,retval) ) 

#define IImageInformation_get_Width(This,retval)	\
    ( (This)->lpVtbl -> get_Width(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageInformation_INTERFACE_DEFINED__ */


#ifndef __ICategory_INTERFACE_DEFINED__
#define __ICategory_INTERFACE_DEFINED__

/* interface ICategory */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ICategory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("81ddc1b8-9d35-47a6-b471-5b80f519223b")
    ICategory : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CategoryID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Order( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ __RPC__deref_out_opt ICategory **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICategoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ICategory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ICategory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ICategory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ICategory * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ICategory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ICategory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICategory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CategoryID )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Order )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategory **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in ICategory * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        END_INTERFACE
    } ICategoryVtbl;

    interface ICategory
    {
        CONST_VTBL struct ICategoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICategory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICategory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICategory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICategory_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICategory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICategory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICategory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICategory_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define ICategory_get_CategoryID(This,retval)	\
    ( (This)->lpVtbl -> get_CategoryID(This,retval) ) 

#define ICategory_get_Children(This,retval)	\
    ( (This)->lpVtbl -> get_Children(This,retval) ) 

#define ICategory_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define ICategory_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define ICategory_get_Order(This,retval)	\
    ( (This)->lpVtbl -> get_Order(This,retval) ) 

#define ICategory_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define ICategory_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define ICategory_get_Updates(This,retval)	\
    ( (This)->lpVtbl -> get_Updates(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICategory_INTERFACE_DEFINED__ */


#ifndef __ICategoryCollection_INTERFACE_DEFINED__
#define __ICategoryCollection_INTERFACE_DEFINED__

/* interface ICategoryCollection */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ICategoryCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3a56bfb8-576c-43f7-9335-fe4838fd7e37")
    ICategoryCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt ICategory **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICategoryCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ICategoryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ICategoryCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ICategoryCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ICategoryCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ICategoryCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ICategoryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICategoryCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ICategoryCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt ICategory **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ICategoryCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ICategoryCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } ICategoryCollectionVtbl;

    interface ICategoryCollection
    {
        CONST_VTBL struct ICategoryCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICategoryCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICategoryCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICategoryCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICategoryCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICategoryCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICategoryCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICategoryCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICategoryCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define ICategoryCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ICategoryCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICategoryCollection_INTERFACE_DEFINED__ */


#ifndef __IInstallationBehavior_INTERFACE_DEFINED__
#define __IInstallationBehavior_INTERFACE_DEFINED__

/* interface IInstallationBehavior */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d9a59339-e245-4dbd-9686-4d5763e39624")
    IInstallationBehavior : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanRequestUserInput( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Impact( 
            /* [retval][out] */ __RPC__out InstallationImpact *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootBehavior( 
            /* [retval][out] */ __RPC__out InstallationRebootBehavior *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RequiresNetworkConnectivity( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationBehavior * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationBehavior * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationBehavior * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequestUserInput )( 
            __RPC__in IInstallationBehavior * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Impact )( 
            __RPC__in IInstallationBehavior * This,
            /* [retval][out] */ __RPC__out InstallationImpact *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootBehavior )( 
            __RPC__in IInstallationBehavior * This,
            /* [retval][out] */ __RPC__out InstallationRebootBehavior *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RequiresNetworkConnectivity )( 
            __RPC__in IInstallationBehavior * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IInstallationBehaviorVtbl;

    interface IInstallationBehavior
    {
        CONST_VTBL struct IInstallationBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationBehavior_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationBehavior_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationBehavior_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationBehavior_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInstallationBehavior_get_CanRequestUserInput(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequestUserInput(This,retval) ) 

#define IInstallationBehavior_get_Impact(This,retval)	\
    ( (This)->lpVtbl -> get_Impact(This,retval) ) 

#define IInstallationBehavior_get_RebootBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_RebootBehavior(This,retval) ) 

#define IInstallationBehavior_get_RequiresNetworkConnectivity(This,retval)	\
    ( (This)->lpVtbl -> get_RequiresNetworkConnectivity(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationBehavior_INTERFACE_DEFINED__ */


#ifndef __IUpdateDownloadContent_INTERFACE_DEFINED__
#define __IUpdateDownloadContent_INTERFACE_DEFINED__

/* interface IUpdateDownloadContent */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateDownloadContent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54a2cb2d-9a0c-48b6-8a50-9abb69ee2d02")
    IUpdateDownloadContent : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DownloadUrl( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateDownloadContentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateDownloadContent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateDownloadContent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateDownloadContent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateDownloadContent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateDownloadContent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateDownloadContent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateDownloadContent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadUrl )( 
            __RPC__in IUpdateDownloadContent * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        END_INTERFACE
    } IUpdateDownloadContentVtbl;

    interface IUpdateDownloadContent
    {
        CONST_VTBL struct IUpdateDownloadContentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateDownloadContent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateDownloadContent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateDownloadContent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateDownloadContent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateDownloadContent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateDownloadContent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateDownloadContent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateDownloadContent_get_DownloadUrl(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadUrl(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateDownloadContent_INTERFACE_DEFINED__ */


#ifndef __IUpdateDownloadContent2_INTERFACE_DEFINED__
#define __IUpdateDownloadContent2_INTERFACE_DEFINED__

/* interface IUpdateDownloadContent2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateDownloadContent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c97ad11b-f257-420b-9d9f-377f733f6f68")
    IUpdateDownloadContent2 : public IUpdateDownloadContent
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDeltaCompressedContent( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateDownloadContent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateDownloadContent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateDownloadContent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateDownloadContent2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadUrl )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDeltaCompressedContent )( 
            __RPC__in IUpdateDownloadContent2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IUpdateDownloadContent2Vtbl;

    interface IUpdateDownloadContent2
    {
        CONST_VTBL struct IUpdateDownloadContent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateDownloadContent2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateDownloadContent2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateDownloadContent2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateDownloadContent2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateDownloadContent2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateDownloadContent2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateDownloadContent2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateDownloadContent2_get_DownloadUrl(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadUrl(This,retval) ) 


#define IUpdateDownloadContent2_get_IsDeltaCompressedContent(This,retval)	\
    ( (This)->lpVtbl -> get_IsDeltaCompressedContent(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateDownloadContent2_INTERFACE_DEFINED__ */


#ifndef __IUpdateDownloadContentCollection_INTERFACE_DEFINED__
#define __IUpdateDownloadContentCollection_INTERFACE_DEFINED__

/* interface IUpdateDownloadContentCollection */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateDownloadContentCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc5513c8-b3b8-4bf7-a4d4-361c0d8c88ba")
    IUpdateDownloadContentCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContent **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateDownloadContentCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateDownloadContentCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateDownloadContentCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateDownloadContentCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContent **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IUpdateDownloadContentCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IUpdateDownloadContentCollectionVtbl;

    interface IUpdateDownloadContentCollection
    {
        CONST_VTBL struct IUpdateDownloadContentCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateDownloadContentCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateDownloadContentCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateDownloadContentCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateDownloadContentCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateDownloadContentCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateDownloadContentCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateDownloadContentCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateDownloadContentCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IUpdateDownloadContentCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IUpdateDownloadContentCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateDownloadContentCollection_INTERFACE_DEFINED__ */


#ifndef __IUpdate_INTERFACE_DEFINED__
#define __IUpdate_INTERFACE_DEFINED__

/* interface IUpdate */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6a92b07a-d821-4682-b423-5c805022cc4d")
    IUpdate : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSelectOnWebSites( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BundledUpdates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanRequireSource( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Deadline( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeltaCompressedContentAvailable( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeltaCompressedContentPreferred( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EulaAccepted( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EulaText( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HandlerID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Identity( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InstallationBehavior( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBeta( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDownloaded( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsHidden( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsHidden( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsInstalled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsMandatory( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsUninstallable( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastDeploymentChangeTime( 
            /* [retval][out] */ __RPC__out DATE *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaxDownloadSize( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinDownloadSize( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MoreInfoUrls( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MsrcSeverity( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecommendedCpuSpeed( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecommendedHardDiskSpace( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecommendedMemory( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReleaseNotes( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecurityBulletinIDs( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SupersededUpdateIDs( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SupportUrl( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out UpdateType *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UninstallationNotes( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UninstallationBehavior( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UninstallationSteps( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_KBArticleIDs( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AcceptEula( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeploymentAction( 
            /* [retval][out] */ __RPC__out DeploymentAction *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyFromCache( 
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DownloadPriority( 
            /* [retval][out] */ __RPC__out DownloadPriority *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DownloadContents( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdate * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IUpdate * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IUpdate * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IUpdate * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        END_INTERFACE
    } IUpdateVtbl;

    interface IUpdate
    {
        CONST_VTBL struct IUpdateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdate_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdate_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IUpdate_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IUpdate_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IUpdate_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IUpdate_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IUpdate_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IUpdate_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IUpdate_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdate_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IUpdate_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IUpdate_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IUpdate_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IUpdate_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IUpdate_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IUpdate_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IUpdate_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IUpdate_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IUpdate_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IUpdate_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IUpdate_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IUpdate_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IUpdate_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IUpdate_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IUpdate_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IUpdate_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IUpdate_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IUpdate_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IUpdate_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IUpdate_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IUpdate_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IUpdate_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IUpdate_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IUpdate_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IUpdate_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IUpdate_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IUpdate_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdate_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IUpdate_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdate_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IUpdate_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IUpdate_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IUpdate_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IUpdate_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IUpdate_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdate_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdate_INTERFACE_DEFINED__
#define __IWindowsDriverUpdate_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdate */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b383cd1a-5ce9-4504-9f63-764b1236f191")
    IWindowsDriverUpdate : public IUpdate
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverClass( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverHardwareID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverManufacturer( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverModel( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverProvider( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverVerDate( 
            /* [retval][out] */ __RPC__out DATE *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeviceProblemNumber( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeviceStatus( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IWindowsDriverUpdate * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdate * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdateVtbl;

    interface IWindowsDriverUpdate
    {
        CONST_VTBL struct IWindowsDriverUpdateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdate_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IWindowsDriverUpdate_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IWindowsDriverUpdate_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IWindowsDriverUpdate_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IWindowsDriverUpdate_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IWindowsDriverUpdate_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IWindowsDriverUpdate_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IWindowsDriverUpdate_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IWindowsDriverUpdate_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IWindowsDriverUpdate_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IWindowsDriverUpdate_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IWindowsDriverUpdate_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IWindowsDriverUpdate_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IWindowsDriverUpdate_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IWindowsDriverUpdate_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IWindowsDriverUpdate_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IWindowsDriverUpdate_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IWindowsDriverUpdate_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IWindowsDriverUpdate_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IWindowsDriverUpdate_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IWindowsDriverUpdate_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IWindowsDriverUpdate_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IWindowsDriverUpdate_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IWindowsDriverUpdate_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IWindowsDriverUpdate_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IWindowsDriverUpdate_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IWindowsDriverUpdate_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IWindowsDriverUpdate_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IWindowsDriverUpdate_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IWindowsDriverUpdate_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IWindowsDriverUpdate_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IWindowsDriverUpdate_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IWindowsDriverUpdate_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IWindowsDriverUpdate_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IWindowsDriverUpdate_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IWindowsDriverUpdate_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IWindowsDriverUpdate_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IWindowsDriverUpdate_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IWindowsDriverUpdate_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IWindowsDriverUpdate_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IWindowsDriverUpdate_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IWindowsDriverUpdate_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdate_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdate_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdate_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdate_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdate_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdate_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdate_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdate_INTERFACE_DEFINED__ */


#ifndef __IUpdate2_INTERFACE_DEFINED__
#define __IUpdate2_INTERFACE_DEFINED__

/* interface IUpdate2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("144fe9b0-d23d-4a8b-8634-fb4457533b7a")
    IUpdate2 : public IUpdate
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequired( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPresent( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CveIDs( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyToCache( 
            /* [in] */ __RPC__in_opt IStringCollection *pFiles) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdate2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdate2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdate2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdate2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdate2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IUpdate2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IUpdate2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IUpdate2 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IUpdate2 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        END_INTERFACE
    } IUpdate2Vtbl;

    interface IUpdate2
    {
        CONST_VTBL struct IUpdate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdate2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdate2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdate2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdate2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdate2_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdate2_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IUpdate2_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IUpdate2_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IUpdate2_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IUpdate2_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IUpdate2_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IUpdate2_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IUpdate2_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdate2_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IUpdate2_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IUpdate2_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IUpdate2_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IUpdate2_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IUpdate2_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IUpdate2_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IUpdate2_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IUpdate2_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IUpdate2_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IUpdate2_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IUpdate2_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IUpdate2_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IUpdate2_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IUpdate2_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IUpdate2_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IUpdate2_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IUpdate2_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IUpdate2_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IUpdate2_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IUpdate2_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IUpdate2_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IUpdate2_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IUpdate2_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IUpdate2_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IUpdate2_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IUpdate2_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IUpdate2_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdate2_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IUpdate2_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdate2_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IUpdate2_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IUpdate2_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IUpdate2_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IUpdate2_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IUpdate2_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IUpdate2_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IUpdate2_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IUpdate2_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IUpdate2_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdate2_INTERFACE_DEFINED__ */


#ifndef __IUpdate3_INTERFACE_DEFINED__
#define __IUpdate3_INTERFACE_DEFINED__

/* interface IUpdate3 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdate3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("112EDA6B-95B3-476F-9D90-AEE82C6B8181")
    IUpdate3 : public IUpdate2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdate3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdate3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdate3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdate3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdate3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdate3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdate3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IUpdate3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IUpdate3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IUpdate3 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IUpdate3 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IUpdate3Vtbl;

    interface IUpdate3
    {
        CONST_VTBL struct IUpdate3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdate3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdate3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdate3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdate3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdate3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdate3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdate3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdate3_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdate3_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IUpdate3_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IUpdate3_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IUpdate3_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IUpdate3_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IUpdate3_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IUpdate3_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IUpdate3_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdate3_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IUpdate3_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IUpdate3_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IUpdate3_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IUpdate3_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IUpdate3_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IUpdate3_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IUpdate3_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IUpdate3_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IUpdate3_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IUpdate3_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IUpdate3_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IUpdate3_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IUpdate3_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IUpdate3_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IUpdate3_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IUpdate3_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IUpdate3_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IUpdate3_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IUpdate3_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IUpdate3_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IUpdate3_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IUpdate3_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IUpdate3_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IUpdate3_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IUpdate3_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IUpdate3_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IUpdate3_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdate3_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IUpdate3_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdate3_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IUpdate3_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IUpdate3_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IUpdate3_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IUpdate3_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IUpdate3_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IUpdate3_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IUpdate3_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IUpdate3_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IUpdate3_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IUpdate3_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdate3_INTERFACE_DEFINED__ */


#ifndef __IUpdate4_INTERFACE_DEFINED__
#define __IUpdate4_INTERFACE_DEFINED__

/* interface IUpdate4 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdate4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27e94b0d-5139-49a2-9a61-93522dc54652")
    IUpdate4 : public IUpdate3
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PerUser( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdate4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdate4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdate4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdate4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdate4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdate4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdate4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdate4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IUpdate4 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IUpdate4 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IUpdate4 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IUpdate4 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PerUser )( 
            __RPC__in IUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IUpdate4Vtbl;

    interface IUpdate4
    {
        CONST_VTBL struct IUpdate4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdate4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdate4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdate4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdate4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdate4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdate4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdate4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdate4_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdate4_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IUpdate4_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IUpdate4_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IUpdate4_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IUpdate4_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IUpdate4_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IUpdate4_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IUpdate4_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdate4_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IUpdate4_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IUpdate4_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IUpdate4_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IUpdate4_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IUpdate4_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IUpdate4_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IUpdate4_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IUpdate4_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IUpdate4_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IUpdate4_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IUpdate4_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IUpdate4_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IUpdate4_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IUpdate4_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IUpdate4_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IUpdate4_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IUpdate4_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IUpdate4_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IUpdate4_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IUpdate4_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IUpdate4_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IUpdate4_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IUpdate4_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IUpdate4_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IUpdate4_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IUpdate4_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IUpdate4_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdate4_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IUpdate4_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdate4_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IUpdate4_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IUpdate4_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IUpdate4_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IUpdate4_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IUpdate4_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IUpdate4_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IUpdate4_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IUpdate4_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IUpdate4_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IUpdate4_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 


#define IUpdate4_get_PerUser(This,retval)	\
    ( (This)->lpVtbl -> get_PerUser(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdate4_INTERFACE_DEFINED__ */


#ifndef __IUpdate5_INTERFACE_DEFINED__
#define __IUpdate5_INTERFACE_DEFINED__

/* interface IUpdate5 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdate5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C1C2F21A-D2F4-4902-B5C6-8A081C19A890")
    IUpdate5 : public IUpdate4
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSelection( 
            /* [retval][out] */ __RPC__out AutoSelectionMode *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoDownload( 
            /* [retval][out] */ __RPC__out AutoDownloadMode *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdate5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdate5 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdate5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdate5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdate5 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdate5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdate5 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdate5 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IUpdate5 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IUpdate5 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IUpdate5 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IUpdate5 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PerUser )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelection )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out AutoSelectionMode *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDownload )( 
            __RPC__in IUpdate5 * This,
            /* [retval][out] */ __RPC__out AutoDownloadMode *retval);
        
        END_INTERFACE
    } IUpdate5Vtbl;

    interface IUpdate5
    {
        CONST_VTBL struct IUpdate5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdate5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdate5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdate5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdate5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdate5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdate5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdate5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdate5_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdate5_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IUpdate5_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IUpdate5_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IUpdate5_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IUpdate5_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IUpdate5_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IUpdate5_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IUpdate5_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdate5_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IUpdate5_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IUpdate5_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IUpdate5_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IUpdate5_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IUpdate5_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IUpdate5_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IUpdate5_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IUpdate5_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IUpdate5_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IUpdate5_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IUpdate5_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IUpdate5_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IUpdate5_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IUpdate5_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IUpdate5_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IUpdate5_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IUpdate5_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IUpdate5_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IUpdate5_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IUpdate5_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IUpdate5_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IUpdate5_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IUpdate5_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IUpdate5_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IUpdate5_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IUpdate5_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IUpdate5_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdate5_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IUpdate5_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdate5_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IUpdate5_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IUpdate5_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IUpdate5_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IUpdate5_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IUpdate5_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IUpdate5_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IUpdate5_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IUpdate5_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IUpdate5_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IUpdate5_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 


#define IUpdate5_get_PerUser(This,retval)	\
    ( (This)->lpVtbl -> get_PerUser(This,retval) ) 


#define IUpdate5_get_AutoSelection(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelection(This,retval) ) 

#define IUpdate5_get_AutoDownload(This,retval)	\
    ( (This)->lpVtbl -> get_AutoDownload(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdate5_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdate2_INTERFACE_DEFINED__
#define __IWindowsDriverUpdate2_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdate2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("615c4269-7a48-43bd-96b7-bf6ca27d6c3e")
    IWindowsDriverUpdate2 : public IWindowsDriverUpdate
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequired( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPresent( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CveIDs( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyToCache( 
            /* [in] */ __RPC__in_opt IStringCollection *pFiles) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdate2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IWindowsDriverUpdate2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IWindowsDriverUpdate2 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        END_INTERFACE
    } IWindowsDriverUpdate2Vtbl;

    interface IWindowsDriverUpdate2
    {
        CONST_VTBL struct IWindowsDriverUpdate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdate2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdate2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdate2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdate2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdate2_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IWindowsDriverUpdate2_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IWindowsDriverUpdate2_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IWindowsDriverUpdate2_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IWindowsDriverUpdate2_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IWindowsDriverUpdate2_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IWindowsDriverUpdate2_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IWindowsDriverUpdate2_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IWindowsDriverUpdate2_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IWindowsDriverUpdate2_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IWindowsDriverUpdate2_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IWindowsDriverUpdate2_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IWindowsDriverUpdate2_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IWindowsDriverUpdate2_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IWindowsDriverUpdate2_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IWindowsDriverUpdate2_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IWindowsDriverUpdate2_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IWindowsDriverUpdate2_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IWindowsDriverUpdate2_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IWindowsDriverUpdate2_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate2_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate2_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IWindowsDriverUpdate2_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IWindowsDriverUpdate2_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IWindowsDriverUpdate2_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IWindowsDriverUpdate2_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IWindowsDriverUpdate2_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IWindowsDriverUpdate2_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IWindowsDriverUpdate2_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IWindowsDriverUpdate2_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IWindowsDriverUpdate2_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IWindowsDriverUpdate2_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IWindowsDriverUpdate2_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate2_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IWindowsDriverUpdate2_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IWindowsDriverUpdate2_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IWindowsDriverUpdate2_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IWindowsDriverUpdate2_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IWindowsDriverUpdate2_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IWindowsDriverUpdate2_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IWindowsDriverUpdate2_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdate2_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdate2_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdate2_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdate2_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdate2_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdate2_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdate2_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 


#define IWindowsDriverUpdate2_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IWindowsDriverUpdate2_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IWindowsDriverUpdate2_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IWindowsDriverUpdate2_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdate2_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdate3_INTERFACE_DEFINED__
#define __IWindowsDriverUpdate3_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdate3 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdate3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("49EBD502-4A96-41BD-9E3E-4C5057F4250C")
    IWindowsDriverUpdate3 : public IWindowsDriverUpdate2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdate3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdate3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdate3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IWindowsDriverUpdate3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IWindowsDriverUpdate3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdate3Vtbl;

    interface IWindowsDriverUpdate3
    {
        CONST_VTBL struct IWindowsDriverUpdate3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdate3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdate3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdate3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdate3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdate3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdate3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdate3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdate3_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IWindowsDriverUpdate3_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IWindowsDriverUpdate3_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IWindowsDriverUpdate3_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IWindowsDriverUpdate3_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IWindowsDriverUpdate3_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IWindowsDriverUpdate3_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IWindowsDriverUpdate3_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IWindowsDriverUpdate3_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IWindowsDriverUpdate3_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IWindowsDriverUpdate3_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IWindowsDriverUpdate3_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IWindowsDriverUpdate3_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IWindowsDriverUpdate3_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IWindowsDriverUpdate3_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IWindowsDriverUpdate3_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IWindowsDriverUpdate3_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IWindowsDriverUpdate3_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IWindowsDriverUpdate3_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IWindowsDriverUpdate3_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate3_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate3_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IWindowsDriverUpdate3_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IWindowsDriverUpdate3_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IWindowsDriverUpdate3_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IWindowsDriverUpdate3_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IWindowsDriverUpdate3_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IWindowsDriverUpdate3_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IWindowsDriverUpdate3_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IWindowsDriverUpdate3_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IWindowsDriverUpdate3_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IWindowsDriverUpdate3_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IWindowsDriverUpdate3_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate3_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IWindowsDriverUpdate3_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IWindowsDriverUpdate3_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IWindowsDriverUpdate3_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IWindowsDriverUpdate3_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IWindowsDriverUpdate3_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IWindowsDriverUpdate3_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IWindowsDriverUpdate3_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdate3_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdate3_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdate3_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdate3_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdate3_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdate3_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdate3_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 


#define IWindowsDriverUpdate3_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IWindowsDriverUpdate3_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IWindowsDriverUpdate3_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IWindowsDriverUpdate3_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IWindowsDriverUpdate3_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdate3_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntry_INTERFACE_DEFINED__
#define __IWindowsDriverUpdateEntry_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdateEntry */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdateEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ED8BFE40-A60B-42ea-9652-817DFCFA23EC")
    IWindowsDriverUpdateEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverClass( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverHardwareID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverManufacturer( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverModel( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverProvider( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DriverVerDate( 
            /* [retval][out] */ __RPC__out DATE *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeviceProblemNumber( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeviceStatus( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdateEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdateEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdateEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdateEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdateEntry * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdateEntryVtbl;

    interface IWindowsDriverUpdateEntry
    {
        CONST_VTBL struct IWindowsDriverUpdateEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdateEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdateEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdateEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdateEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdateEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdateEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdateEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdateEntry_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdateEntry_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdateEntry_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdateEntryCollection_INTERFACE_DEFINED__
#define __IWindowsDriverUpdateEntryCollection_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdateEntryCollection */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdateEntryCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0D521700-A372-4bef-828B-3D00C10ADEBD")
    IWindowsDriverUpdateEntryCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IWindowsDriverUpdateEntry **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdateEntryCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdateEntryCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IWindowsDriverUpdateEntry **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IWindowsDriverUpdateEntryCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdateEntryCollectionVtbl;

    interface IWindowsDriverUpdateEntryCollection
    {
        CONST_VTBL struct IWindowsDriverUpdateEntryCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdateEntryCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdateEntryCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdateEntryCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdateEntryCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdateEntryCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdateEntryCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdateEntryCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdateEntryCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IWindowsDriverUpdateEntryCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IWindowsDriverUpdateEntryCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdateEntryCollection_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdate4_INTERFACE_DEFINED__
#define __IWindowsDriverUpdate4_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdate4 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdate4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("004C6A2B-0C19-4c69-9F5C-A269B2560DB9")
    IWindowsDriverUpdate4 : public IWindowsDriverUpdate3
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowsDriverUpdateEntries( 
            /* [retval][out] */ __RPC__deref_out_opt IWindowsDriverUpdateEntryCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PerUser( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdate4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdate4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdate4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdate4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IWindowsDriverUpdate4 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowsDriverUpdateEntries )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWindowsDriverUpdateEntryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PerUser )( 
            __RPC__in IWindowsDriverUpdate4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdate4Vtbl;

    interface IWindowsDriverUpdate4
    {
        CONST_VTBL struct IWindowsDriverUpdate4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdate4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdate4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdate4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdate4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdate4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdate4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdate4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdate4_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IWindowsDriverUpdate4_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IWindowsDriverUpdate4_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IWindowsDriverUpdate4_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IWindowsDriverUpdate4_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IWindowsDriverUpdate4_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IWindowsDriverUpdate4_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IWindowsDriverUpdate4_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IWindowsDriverUpdate4_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IWindowsDriverUpdate4_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IWindowsDriverUpdate4_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IWindowsDriverUpdate4_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IWindowsDriverUpdate4_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IWindowsDriverUpdate4_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IWindowsDriverUpdate4_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IWindowsDriverUpdate4_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IWindowsDriverUpdate4_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IWindowsDriverUpdate4_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IWindowsDriverUpdate4_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IWindowsDriverUpdate4_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate4_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate4_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IWindowsDriverUpdate4_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IWindowsDriverUpdate4_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IWindowsDriverUpdate4_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IWindowsDriverUpdate4_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IWindowsDriverUpdate4_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IWindowsDriverUpdate4_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IWindowsDriverUpdate4_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IWindowsDriverUpdate4_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IWindowsDriverUpdate4_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IWindowsDriverUpdate4_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IWindowsDriverUpdate4_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate4_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IWindowsDriverUpdate4_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IWindowsDriverUpdate4_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IWindowsDriverUpdate4_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IWindowsDriverUpdate4_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IWindowsDriverUpdate4_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IWindowsDriverUpdate4_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IWindowsDriverUpdate4_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdate4_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdate4_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdate4_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdate4_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdate4_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdate4_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdate4_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 


#define IWindowsDriverUpdate4_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IWindowsDriverUpdate4_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IWindowsDriverUpdate4_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IWindowsDriverUpdate4_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IWindowsDriverUpdate4_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 


#define IWindowsDriverUpdate4_get_WindowsDriverUpdateEntries(This,retval)	\
    ( (This)->lpVtbl -> get_WindowsDriverUpdateEntries(This,retval) ) 

#define IWindowsDriverUpdate4_get_PerUser(This,retval)	\
    ( (This)->lpVtbl -> get_PerUser(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdate4_INTERFACE_DEFINED__ */


#ifndef __IWindowsDriverUpdate5_INTERFACE_DEFINED__
#define __IWindowsDriverUpdate5_INTERFACE_DEFINED__

/* interface IWindowsDriverUpdate5 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IWindowsDriverUpdate5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70CF5C82-8642-42bb-9DBC-0CFD263C6C4F")
    IWindowsDriverUpdate5 : public IWindowsDriverUpdate4
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSelection( 
            /* [retval][out] */ __RPC__out AutoSelectionMode *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoDownload( 
            /* [retval][out] */ __RPC__out AutoDownloadMode *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWindowsDriverUpdate5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IWindowsDriverUpdate5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IWindowsDriverUpdate5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWindowsDriverUpdate5 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelectOnWebSites )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BundledUpdates )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanRequireSource )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Deadline )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentAvailable )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeltaCompressedContentPreferred )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaAccepted )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EulaText )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerID )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IImageInformation **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeta )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDownloaded )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHidden )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsHidden )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstalled )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMandatory )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsUninstallable )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDeploymentChangeTime )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDownloadSize )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinDownloadSize )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MoreInfoUrls )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsrcSeverity )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedCpuSpeed )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedHardDiskSpace )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecommendedMemory )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseNotes )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityBulletinIDs )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupersededUpdateIDs )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out UpdateType *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationBehavior )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationBehavior **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KBArticleIDs )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptEula )( 
            __RPC__in IWindowsDriverUpdate5 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentAction )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DeploymentAction *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFromCache )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [ref][in] */ __RPC__in BSTR path,
            /* [in] */ VARIANT_BOOL toExtractCabFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadPriority )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadContents )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadContentCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverClass )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverHardwareID )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverManufacturer )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverModel )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverProvider )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DriverVerDate )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceProblemNumber )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceStatus )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPresent )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CveIDs )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyToCache )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [in] */ __RPC__in_opt IStringCollection *pFiles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseOnly )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowsDriverUpdateEntries )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWindowsDriverUpdateEntryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PerUser )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSelection )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out AutoSelectionMode *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDownload )( 
            __RPC__in IWindowsDriverUpdate5 * This,
            /* [retval][out] */ __RPC__out AutoDownloadMode *retval);
        
        END_INTERFACE
    } IWindowsDriverUpdate5Vtbl;

    interface IWindowsDriverUpdate5
    {
        CONST_VTBL struct IWindowsDriverUpdate5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWindowsDriverUpdate5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWindowsDriverUpdate5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWindowsDriverUpdate5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWindowsDriverUpdate5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWindowsDriverUpdate5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWindowsDriverUpdate5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWindowsDriverUpdate5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWindowsDriverUpdate5_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IWindowsDriverUpdate5_get_AutoSelectOnWebSites(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelectOnWebSites(This,retval) ) 

#define IWindowsDriverUpdate5_get_BundledUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_BundledUpdates(This,retval) ) 

#define IWindowsDriverUpdate5_get_CanRequireSource(This,retval)	\
    ( (This)->lpVtbl -> get_CanRequireSource(This,retval) ) 

#define IWindowsDriverUpdate5_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#define IWindowsDriverUpdate5_get_Deadline(This,retval)	\
    ( (This)->lpVtbl -> get_Deadline(This,retval) ) 

#define IWindowsDriverUpdate5_get_DeltaCompressedContentAvailable(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentAvailable(This,retval) ) 

#define IWindowsDriverUpdate5_get_DeltaCompressedContentPreferred(This,retval)	\
    ( (This)->lpVtbl -> get_DeltaCompressedContentPreferred(This,retval) ) 

#define IWindowsDriverUpdate5_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IWindowsDriverUpdate5_get_EulaAccepted(This,retval)	\
    ( (This)->lpVtbl -> get_EulaAccepted(This,retval) ) 

#define IWindowsDriverUpdate5_get_EulaText(This,retval)	\
    ( (This)->lpVtbl -> get_EulaText(This,retval) ) 

#define IWindowsDriverUpdate5_get_HandlerID(This,retval)	\
    ( (This)->lpVtbl -> get_HandlerID(This,retval) ) 

#define IWindowsDriverUpdate5_get_Identity(This,retval)	\
    ( (This)->lpVtbl -> get_Identity(This,retval) ) 

#define IWindowsDriverUpdate5_get_Image(This,retval)	\
    ( (This)->lpVtbl -> get_Image(This,retval) ) 

#define IWindowsDriverUpdate5_get_InstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_InstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsBeta(This,retval)	\
    ( (This)->lpVtbl -> get_IsBeta(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_IsDownloaded(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsHidden(This,retval)	\
    ( (This)->lpVtbl -> get_IsHidden(This,retval) ) 

#define IWindowsDriverUpdate5_put_IsHidden(This,value)	\
    ( (This)->lpVtbl -> put_IsHidden(This,value) ) 

#define IWindowsDriverUpdate5_get_IsInstalled(This,retval)	\
    ( (This)->lpVtbl -> get_IsInstalled(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsMandatory(This,retval)	\
    ( (This)->lpVtbl -> get_IsMandatory(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsUninstallable(This,retval)	\
    ( (This)->lpVtbl -> get_IsUninstallable(This,retval) ) 

#define IWindowsDriverUpdate5_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IWindowsDriverUpdate5_get_LastDeploymentChangeTime(This,retval)	\
    ( (This)->lpVtbl -> get_LastDeploymentChangeTime(This,retval) ) 

#define IWindowsDriverUpdate5_get_MaxDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MaxDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate5_get_MinDownloadSize(This,retval)	\
    ( (This)->lpVtbl -> get_MinDownloadSize(This,retval) ) 

#define IWindowsDriverUpdate5_get_MoreInfoUrls(This,retval)	\
    ( (This)->lpVtbl -> get_MoreInfoUrls(This,retval) ) 

#define IWindowsDriverUpdate5_get_MsrcSeverity(This,retval)	\
    ( (This)->lpVtbl -> get_MsrcSeverity(This,retval) ) 

#define IWindowsDriverUpdate5_get_RecommendedCpuSpeed(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedCpuSpeed(This,retval) ) 

#define IWindowsDriverUpdate5_get_RecommendedHardDiskSpace(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedHardDiskSpace(This,retval) ) 

#define IWindowsDriverUpdate5_get_RecommendedMemory(This,retval)	\
    ( (This)->lpVtbl -> get_RecommendedMemory(This,retval) ) 

#define IWindowsDriverUpdate5_get_ReleaseNotes(This,retval)	\
    ( (This)->lpVtbl -> get_ReleaseNotes(This,retval) ) 

#define IWindowsDriverUpdate5_get_SecurityBulletinIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityBulletinIDs(This,retval) ) 

#define IWindowsDriverUpdate5_get_SupersededUpdateIDs(This,retval)	\
    ( (This)->lpVtbl -> get_SupersededUpdateIDs(This,retval) ) 

#define IWindowsDriverUpdate5_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#define IWindowsDriverUpdate5_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IWindowsDriverUpdate5_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IWindowsDriverUpdate5_get_UninstallationBehavior(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationBehavior(This,retval) ) 

#define IWindowsDriverUpdate5_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IWindowsDriverUpdate5_get_KBArticleIDs(This,retval)	\
    ( (This)->lpVtbl -> get_KBArticleIDs(This,retval) ) 

#define IWindowsDriverUpdate5_AcceptEula(This)	\
    ( (This)->lpVtbl -> AcceptEula(This) ) 

#define IWindowsDriverUpdate5_get_DeploymentAction(This,retval)	\
    ( (This)->lpVtbl -> get_DeploymentAction(This,retval) ) 

#define IWindowsDriverUpdate5_CopyFromCache(This,path,toExtractCabFiles)	\
    ( (This)->lpVtbl -> CopyFromCache(This,path,toExtractCabFiles) ) 

#define IWindowsDriverUpdate5_get_DownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadPriority(This,retval) ) 

#define IWindowsDriverUpdate5_get_DownloadContents(This,retval)	\
    ( (This)->lpVtbl -> get_DownloadContents(This,retval) ) 


#define IWindowsDriverUpdate5_get_DriverClass(This,retval)	\
    ( (This)->lpVtbl -> get_DriverClass(This,retval) ) 

#define IWindowsDriverUpdate5_get_DriverHardwareID(This,retval)	\
    ( (This)->lpVtbl -> get_DriverHardwareID(This,retval) ) 

#define IWindowsDriverUpdate5_get_DriverManufacturer(This,retval)	\
    ( (This)->lpVtbl -> get_DriverManufacturer(This,retval) ) 

#define IWindowsDriverUpdate5_get_DriverModel(This,retval)	\
    ( (This)->lpVtbl -> get_DriverModel(This,retval) ) 

#define IWindowsDriverUpdate5_get_DriverProvider(This,retval)	\
    ( (This)->lpVtbl -> get_DriverProvider(This,retval) ) 

#define IWindowsDriverUpdate5_get_DriverVerDate(This,retval)	\
    ( (This)->lpVtbl -> get_DriverVerDate(This,retval) ) 

#define IWindowsDriverUpdate5_get_DeviceProblemNumber(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceProblemNumber(This,retval) ) 

#define IWindowsDriverUpdate5_get_DeviceStatus(This,retval)	\
    ( (This)->lpVtbl -> get_DeviceStatus(This,retval) ) 


#define IWindowsDriverUpdate5_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IWindowsDriverUpdate5_get_IsPresent(This,retval)	\
    ( (This)->lpVtbl -> get_IsPresent(This,retval) ) 

#define IWindowsDriverUpdate5_get_CveIDs(This,retval)	\
    ( (This)->lpVtbl -> get_CveIDs(This,retval) ) 

#define IWindowsDriverUpdate5_CopyToCache(This,pFiles)	\
    ( (This)->lpVtbl -> CopyToCache(This,pFiles) ) 


#define IWindowsDriverUpdate5_get_BrowseOnly(This,retval)	\
    ( (This)->lpVtbl -> get_BrowseOnly(This,retval) ) 


#define IWindowsDriverUpdate5_get_WindowsDriverUpdateEntries(This,retval)	\
    ( (This)->lpVtbl -> get_WindowsDriverUpdateEntries(This,retval) ) 

#define IWindowsDriverUpdate5_get_PerUser(This,retval)	\
    ( (This)->lpVtbl -> get_PerUser(This,retval) ) 


#define IWindowsDriverUpdate5_get_AutoSelection(This,retval)	\
    ( (This)->lpVtbl -> get_AutoSelection(This,retval) ) 

#define IWindowsDriverUpdate5_get_AutoDownload(This,retval)	\
    ( (This)->lpVtbl -> get_AutoDownload(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWindowsDriverUpdate5_INTERFACE_DEFINED__ */


#ifndef __IUpdateCollection_INTERFACE_DEFINED__
#define __IUpdateCollection_INTERFACE_DEFINED__

/* interface IUpdateCollection */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07f7438c-7709-4ca5-b518-91279288134e")
    IUpdateCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdate **retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [in] */ LONG index,
            /* [in] */ __RPC__in_opt IUpdate *value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in_opt IUpdate *value,
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ LONG index,
            /* [in] */ __RPC__in_opt IUpdate *value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ LONG index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdate **retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ LONG index,
            /* [in] */ __RPC__in_opt IUpdate *value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IUpdateCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IUpdateCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in IUpdateCollection * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ __RPC__in_opt IUpdate *value,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in IUpdateCollection * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            __RPC__in IUpdateCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ LONG index,
            /* [in] */ __RPC__in_opt IUpdate *value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in IUpdateCollection * This,
            /* [in] */ LONG index);
        
        END_INTERFACE
    } IUpdateCollectionVtbl;

    interface IUpdateCollection
    {
        CONST_VTBL struct IUpdateCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IUpdateCollection_put_Item(This,index,value)	\
    ( (This)->lpVtbl -> put_Item(This,index,value) ) 

#define IUpdateCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IUpdateCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#define IUpdateCollection_get_ReadOnly(This,retval)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,retval) ) 

#define IUpdateCollection_Add(This,value,retval)	\
    ( (This)->lpVtbl -> Add(This,value,retval) ) 

#define IUpdateCollection_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define IUpdateCollection_Copy(This,retval)	\
    ( (This)->lpVtbl -> Copy(This,retval) ) 

#define IUpdateCollection_Insert(This,index,value)	\
    ( (This)->lpVtbl -> Insert(This,index,value) ) 

#define IUpdateCollection_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateCollection_INTERFACE_DEFINED__ */


#ifndef __IUpdateException_INTERFACE_DEFINED__
#define __IUpdateException_INTERFACE_DEFINED__

/* interface IUpdateException */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a376dd5e-09d4-427f-af7c-fed5b6e1c1d6")
    IUpdateException : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Message( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ __RPC__out UpdateExceptionContext *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateException * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateException * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateException * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Message )( 
            __RPC__in IUpdateException * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IUpdateException * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            __RPC__in IUpdateException * This,
            /* [retval][out] */ __RPC__out UpdateExceptionContext *retval);
        
        END_INTERFACE
    } IUpdateExceptionVtbl;

    interface IUpdateException
    {
        CONST_VTBL struct IUpdateExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateException_get_Message(This,retval)	\
    ( (This)->lpVtbl -> get_Message(This,retval) ) 

#define IUpdateException_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IUpdateException_get_Context(This,retval)	\
    ( (This)->lpVtbl -> get_Context(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateException_INTERFACE_DEFINED__ */


#ifndef __IInvalidProductLicenseException_INTERFACE_DEFINED__
#define __IInvalidProductLicenseException_INTERFACE_DEFINED__

/* interface IInvalidProductLicenseException */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInvalidProductLicenseException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a37d00f5-7bb0-4953-b414-f9e98326f2e8")
    IInvalidProductLicenseException : public IUpdateException
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Product( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInvalidProductLicenseExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInvalidProductLicenseException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInvalidProductLicenseException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInvalidProductLicenseException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Message )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [retval][out] */ __RPC__out UpdateExceptionContext *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Product )( 
            __RPC__in IInvalidProductLicenseException * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        END_INTERFACE
    } IInvalidProductLicenseExceptionVtbl;

    interface IInvalidProductLicenseException
    {
        CONST_VTBL struct IInvalidProductLicenseExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInvalidProductLicenseException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInvalidProductLicenseException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInvalidProductLicenseException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInvalidProductLicenseException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInvalidProductLicenseException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInvalidProductLicenseException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInvalidProductLicenseException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInvalidProductLicenseException_get_Message(This,retval)	\
    ( (This)->lpVtbl -> get_Message(This,retval) ) 

#define IInvalidProductLicenseException_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IInvalidProductLicenseException_get_Context(This,retval)	\
    ( (This)->lpVtbl -> get_Context(This,retval) ) 


#define IInvalidProductLicenseException_get_Product(This,retval)	\
    ( (This)->lpVtbl -> get_Product(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInvalidProductLicenseException_INTERFACE_DEFINED__ */


#ifndef __IUpdateExceptionCollection_INTERFACE_DEFINED__
#define __IUpdateExceptionCollection_INTERFACE_DEFINED__

/* interface IUpdateExceptionCollection */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateExceptionCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("503626a3-8e14-4729-9355-0fe664bd2321")
    IUpdateExceptionCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateException **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateExceptionCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateExceptionCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateExceptionCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateExceptionCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateException **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IUpdateExceptionCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IUpdateExceptionCollectionVtbl;

    interface IUpdateExceptionCollection
    {
        CONST_VTBL struct IUpdateExceptionCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateExceptionCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateExceptionCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateExceptionCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateExceptionCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateExceptionCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateExceptionCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateExceptionCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateExceptionCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IUpdateExceptionCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IUpdateExceptionCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateExceptionCollection_INTERFACE_DEFINED__ */


#ifndef __ISearchResult_INTERFACE_DEFINED__
#define __ISearchResult_INTERFACE_DEFINED__

/* interface ISearchResult */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ISearchResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d40cff62-e08c-4498-941a-01e25f0fd33c")
    ISearchResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RootCategories( 
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Warnings( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateExceptionCollection **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISearchResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISearchResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISearchResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISearchResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISearchResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISearchResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISearchResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in ISearchResult * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RootCategories )( 
            __RPC__in ISearchResult * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in ISearchResult * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Warnings )( 
            __RPC__in ISearchResult * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateExceptionCollection **retval);
        
        END_INTERFACE
    } ISearchResultVtbl;

    interface ISearchResult
    {
        CONST_VTBL struct ISearchResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISearchResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISearchResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISearchResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISearchResult_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#define ISearchResult_get_RootCategories(This,retval)	\
    ( (This)->lpVtbl -> get_RootCategories(This,retval) ) 

#define ISearchResult_get_Updates(This,retval)	\
    ( (This)->lpVtbl -> get_Updates(This,retval) ) 

#define ISearchResult_get_Warnings(This,retval)	\
    ( (This)->lpVtbl -> get_Warnings(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchResult_INTERFACE_DEFINED__ */


#ifndef __ISearchJob_INTERFACE_DEFINED__
#define __ISearchJob_INTERFACE_DEFINED__

/* interface ISearchJob */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ISearchJob;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7366ea16-7a1a-4ea2-b042-973d3e9cd99b")
    ISearchJob : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsyncState( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCompleted( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CleanUp( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RequestAbort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchJobVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISearchJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISearchJob * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISearchJob * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISearchJob * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISearchJob * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISearchJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISearchJob * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsyncState )( 
            __RPC__in ISearchJob * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCompleted )( 
            __RPC__in ISearchJob * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CleanUp )( 
            __RPC__in ISearchJob * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RequestAbort )( 
            __RPC__in ISearchJob * This);
        
        END_INTERFACE
    } ISearchJobVtbl;

    interface ISearchJob
    {
        CONST_VTBL struct ISearchJobVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchJob_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchJob_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchJob_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchJob_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISearchJob_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISearchJob_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISearchJob_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISearchJob_get_AsyncState(This,retval)	\
    ( (This)->lpVtbl -> get_AsyncState(This,retval) ) 

#define ISearchJob_get_IsCompleted(This,retval)	\
    ( (This)->lpVtbl -> get_IsCompleted(This,retval) ) 

#define ISearchJob_CleanUp(This)	\
    ( (This)->lpVtbl -> CleanUp(This) ) 

#define ISearchJob_RequestAbort(This)	\
    ( (This)->lpVtbl -> RequestAbort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchJob_INTERFACE_DEFINED__ */


#ifndef __ISearchCompletedCallbackArgs_INTERFACE_DEFINED__
#define __ISearchCompletedCallbackArgs_INTERFACE_DEFINED__

/* interface ISearchCompletedCallbackArgs */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ISearchCompletedCallbackArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a700a634-2850-4c47-938a-9e4b6e5af9a6")
    ISearchCompletedCallbackArgs : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISearchCompletedCallbackArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISearchCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISearchCompletedCallbackArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISearchCompletedCallbackArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISearchCompletedCallbackArgs * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISearchCompletedCallbackArgs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISearchCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISearchCompletedCallbackArgs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ISearchCompletedCallbackArgsVtbl;

    interface ISearchCompletedCallbackArgs
    {
        CONST_VTBL struct ISearchCompletedCallbackArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchCompletedCallbackArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchCompletedCallbackArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchCompletedCallbackArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchCompletedCallbackArgs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISearchCompletedCallbackArgs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISearchCompletedCallbackArgs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISearchCompletedCallbackArgs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchCompletedCallbackArgs_INTERFACE_DEFINED__ */


#ifndef __ISearchCompletedCallback_INTERFACE_DEFINED__
#define __ISearchCompletedCallback_INTERFACE_DEFINED__

/* interface ISearchCompletedCallback */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_ISearchCompletedCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("88aee058-d4b0-4725-a2f1-814a67ae964c")
    ISearchCompletedCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [in] */ __RPC__in_opt ISearchCompletedCallbackArgs *callbackArgs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISearchCompletedCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISearchCompletedCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISearchCompletedCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISearchCompletedCallback * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in ISearchCompletedCallback * This,
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [in] */ __RPC__in_opt ISearchCompletedCallbackArgs *callbackArgs);
        
        END_INTERFACE
    } ISearchCompletedCallbackVtbl;

    interface ISearchCompletedCallback
    {
        CONST_VTBL struct ISearchCompletedCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISearchCompletedCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISearchCompletedCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISearchCompletedCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISearchCompletedCallback_Invoke(This,searchJob,callbackArgs)	\
    ( (This)->lpVtbl -> Invoke(This,searchJob,callbackArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISearchCompletedCallback_INTERFACE_DEFINED__ */


#ifndef __IUpdateHistoryEntry_INTERFACE_DEFINED__
#define __IUpdateHistoryEntry_INTERFACE_DEFINED__

/* interface IUpdateHistoryEntry */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateHistoryEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("be56a644-af0e-4e0e-a311-c1d8e695cbff")
    IUpdateHistoryEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Operation( 
            /* [retval][out] */ __RPC__out UpdateOperation *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Date( 
            /* [retval][out] */ __RPC__out DATE *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateIdentity( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnmappedResultCode( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClientApplicationID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServerSelection( 
            /* [retval][out] */ __RPC__out ServerSelection *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServiceID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UninstallationSteps( 
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UninstallationNotes( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SupportUrl( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateHistoryEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateHistoryEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateHistoryEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateHistoryEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Operation )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out UpdateOperation *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Date )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateIdentity )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnmappedResultCode )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerSelection )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__out ServerSelection *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceID )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdateHistoryEntry * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        END_INTERFACE
    } IUpdateHistoryEntryVtbl;

    interface IUpdateHistoryEntry
    {
        CONST_VTBL struct IUpdateHistoryEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateHistoryEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateHistoryEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateHistoryEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateHistoryEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateHistoryEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateHistoryEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateHistoryEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateHistoryEntry_get_Operation(This,retval)	\
    ( (This)->lpVtbl -> get_Operation(This,retval) ) 

#define IUpdateHistoryEntry_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#define IUpdateHistoryEntry_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IUpdateHistoryEntry_get_Date(This,retval)	\
    ( (This)->lpVtbl -> get_Date(This,retval) ) 

#define IUpdateHistoryEntry_get_UpdateIdentity(This,retval)	\
    ( (This)->lpVtbl -> get_UpdateIdentity(This,retval) ) 

#define IUpdateHistoryEntry_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdateHistoryEntry_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdateHistoryEntry_get_UnmappedResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_UnmappedResultCode(This,retval) ) 

#define IUpdateHistoryEntry_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateHistoryEntry_get_ServerSelection(This,retval)	\
    ( (This)->lpVtbl -> get_ServerSelection(This,retval) ) 

#define IUpdateHistoryEntry_get_ServiceID(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceID(This,retval) ) 

#define IUpdateHistoryEntry_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdateHistoryEntry_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdateHistoryEntry_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateHistoryEntry_INTERFACE_DEFINED__ */


#ifndef __IUpdateHistoryEntry2_INTERFACE_DEFINED__
#define __IUpdateHistoryEntry2_INTERFACE_DEFINED__

/* interface IUpdateHistoryEntry2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateHistoryEntry2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2bfb780-4539-4132-ab8c-0a8772013ab6")
    IUpdateHistoryEntry2 : public IUpdateHistoryEntry
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateHistoryEntry2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateHistoryEntry2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateHistoryEntry2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateHistoryEntry2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Operation )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out UpdateOperation *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Date )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out DATE *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateIdentity )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateIdentity **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnmappedResultCode )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerSelection )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__out ServerSelection *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceID )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationSteps )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IStringCollection **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UninstallationNotes )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportUrl )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            __RPC__in IUpdateHistoryEntry2 * This,
            /* [retval][out] */ __RPC__deref_out_opt ICategoryCollection **retval);
        
        END_INTERFACE
    } IUpdateHistoryEntry2Vtbl;

    interface IUpdateHistoryEntry2
    {
        CONST_VTBL struct IUpdateHistoryEntry2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateHistoryEntry2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateHistoryEntry2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateHistoryEntry2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateHistoryEntry2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateHistoryEntry2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateHistoryEntry2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateHistoryEntry2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateHistoryEntry2_get_Operation(This,retval)	\
    ( (This)->lpVtbl -> get_Operation(This,retval) ) 

#define IUpdateHistoryEntry2_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#define IUpdateHistoryEntry2_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IUpdateHistoryEntry2_get_Date(This,retval)	\
    ( (This)->lpVtbl -> get_Date(This,retval) ) 

#define IUpdateHistoryEntry2_get_UpdateIdentity(This,retval)	\
    ( (This)->lpVtbl -> get_UpdateIdentity(This,retval) ) 

#define IUpdateHistoryEntry2_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IUpdateHistoryEntry2_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IUpdateHistoryEntry2_get_UnmappedResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_UnmappedResultCode(This,retval) ) 

#define IUpdateHistoryEntry2_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateHistoryEntry2_get_ServerSelection(This,retval)	\
    ( (This)->lpVtbl -> get_ServerSelection(This,retval) ) 

#define IUpdateHistoryEntry2_get_ServiceID(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceID(This,retval) ) 

#define IUpdateHistoryEntry2_get_UninstallationSteps(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationSteps(This,retval) ) 

#define IUpdateHistoryEntry2_get_UninstallationNotes(This,retval)	\
    ( (This)->lpVtbl -> get_UninstallationNotes(This,retval) ) 

#define IUpdateHistoryEntry2_get_SupportUrl(This,retval)	\
    ( (This)->lpVtbl -> get_SupportUrl(This,retval) ) 


#define IUpdateHistoryEntry2_get_Categories(This,retval)	\
    ( (This)->lpVtbl -> get_Categories(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateHistoryEntry2_INTERFACE_DEFINED__ */


#ifndef __IUpdateHistoryEntryCollection_INTERFACE_DEFINED__
#define __IUpdateHistoryEntryCollection_INTERFACE_DEFINED__

/* interface IUpdateHistoryEntryCollection */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateHistoryEntryCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a7f04f3c-a290-435b-aadf-a116c3357a5c")
    IUpdateHistoryEntryCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntry **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateHistoryEntryCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateHistoryEntryCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateHistoryEntryCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateHistoryEntryCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [in] */ LONG index,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntry **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IUpdateHistoryEntryCollection * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IUpdateHistoryEntryCollectionVtbl;

    interface IUpdateHistoryEntryCollection
    {
        CONST_VTBL struct IUpdateHistoryEntryCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateHistoryEntryCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateHistoryEntryCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateHistoryEntryCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateHistoryEntryCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateHistoryEntryCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateHistoryEntryCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateHistoryEntryCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateHistoryEntryCollection_get_Item(This,index,retval)	\
    ( (This)->lpVtbl -> get_Item(This,index,retval) ) 

#define IUpdateHistoryEntryCollection_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IUpdateHistoryEntryCollection_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateHistoryEntryCollection_INTERFACE_DEFINED__ */


#ifndef __IUpdateSearcher_INTERFACE_DEFINED__
#define __IUpdateSearcher_INTERFACE_DEFINED__

/* interface IUpdateSearcher */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateSearcher;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f45abf1-f9ae-4b95-a933-f0f66e5056ea")
    IUpdateSearcher : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanAutomaticallyUpgradeService( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CanAutomaticallyUpgradeService( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClientApplicationID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClientApplicationID( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludePotentiallySupersededUpdates( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludePotentiallySupersededUpdates( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServerSelection( 
            /* [retval][out] */ __RPC__out ServerSelection *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ServerSelection( 
            /* [in] */ ServerSelection value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BeginSearch( 
            /* [in] */ __RPC__in BSTR criteria,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt ISearchJob **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EndSearch( 
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EscapeString( 
            /* [in] */ __RPC__in BSTR unescaped,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE QueryHistory( 
            /* [in] */ LONG startIndex,
            /* [in] */ LONG count,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntryCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Search( 
            /* [in] */ __RPC__in BSTR criteria,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Online( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Online( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTotalHistoryCount( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServiceID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ServiceID( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateSearcherVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateSearcher * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateSearcher * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateSearcher * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateSearcher * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClientApplicationID )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerSelection )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__out ServerSelection *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServerSelection )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ ServerSelection value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginSearch )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt ISearchJob **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EndSearch )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EscapeString )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in BSTR unescaped,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *QueryHistory )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ LONG startIndex,
            /* [in] */ LONG count,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntryCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Online )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Online )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTotalHistoryCount )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceID )( 
            __RPC__in IUpdateSearcher * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceID )( 
            __RPC__in IUpdateSearcher * This,
            /* [in] */ __RPC__in BSTR value);
        
        END_INTERFACE
    } IUpdateSearcherVtbl;

    interface IUpdateSearcher
    {
        CONST_VTBL struct IUpdateSearcherVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateSearcher_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateSearcher_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateSearcher_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateSearcher_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateSearcher_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateSearcher_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateSearcher_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateSearcher_get_CanAutomaticallyUpgradeService(This,retval)	\
    ( (This)->lpVtbl -> get_CanAutomaticallyUpgradeService(This,retval) ) 

#define IUpdateSearcher_put_CanAutomaticallyUpgradeService(This,value)	\
    ( (This)->lpVtbl -> put_CanAutomaticallyUpgradeService(This,value) ) 

#define IUpdateSearcher_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateSearcher_put_ClientApplicationID(This,value)	\
    ( (This)->lpVtbl -> put_ClientApplicationID(This,value) ) 

#define IUpdateSearcher_get_IncludePotentiallySupersededUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_IncludePotentiallySupersededUpdates(This,retval) ) 

#define IUpdateSearcher_put_IncludePotentiallySupersededUpdates(This,value)	\
    ( (This)->lpVtbl -> put_IncludePotentiallySupersededUpdates(This,value) ) 

#define IUpdateSearcher_get_ServerSelection(This,retval)	\
    ( (This)->lpVtbl -> get_ServerSelection(This,retval) ) 

#define IUpdateSearcher_put_ServerSelection(This,value)	\
    ( (This)->lpVtbl -> put_ServerSelection(This,value) ) 

#define IUpdateSearcher_BeginSearch(This,criteria,onCompleted,state,retval)	\
    ( (This)->lpVtbl -> BeginSearch(This,criteria,onCompleted,state,retval) ) 

#define IUpdateSearcher_EndSearch(This,searchJob,retval)	\
    ( (This)->lpVtbl -> EndSearch(This,searchJob,retval) ) 

#define IUpdateSearcher_EscapeString(This,unescaped,retval)	\
    ( (This)->lpVtbl -> EscapeString(This,unescaped,retval) ) 

#define IUpdateSearcher_QueryHistory(This,startIndex,count,retval)	\
    ( (This)->lpVtbl -> QueryHistory(This,startIndex,count,retval) ) 

#define IUpdateSearcher_Search(This,criteria,retval)	\
    ( (This)->lpVtbl -> Search(This,criteria,retval) ) 

#define IUpdateSearcher_get_Online(This,retval)	\
    ( (This)->lpVtbl -> get_Online(This,retval) ) 

#define IUpdateSearcher_put_Online(This,value)	\
    ( (This)->lpVtbl -> put_Online(This,value) ) 

#define IUpdateSearcher_GetTotalHistoryCount(This,retval)	\
    ( (This)->lpVtbl -> GetTotalHistoryCount(This,retval) ) 

#define IUpdateSearcher_get_ServiceID(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceID(This,retval) ) 

#define IUpdateSearcher_put_ServiceID(This,value)	\
    ( (This)->lpVtbl -> put_ServiceID(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateSearcher_INTERFACE_DEFINED__ */


#ifndef __IUpdateSearcher2_INTERFACE_DEFINED__
#define __IUpdateSearcher2_INTERFACE_DEFINED__

/* interface IUpdateSearcher2 */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateSearcher2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4cbdcb2d-1589-4beb-bd1c-3e582ff0add0")
    IUpdateSearcher2 : public IUpdateSearcher
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IgnoreDownloadPriority( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IgnoreDownloadPriority( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateSearcher2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateSearcher2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateSearcher2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateSearcher2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClientApplicationID )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerSelection )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out ServerSelection *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServerSelection )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ ServerSelection value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginSearch )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt ISearchJob **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EndSearch )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EscapeString )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in BSTR unescaped,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *QueryHistory )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ LONG startIndex,
            /* [in] */ LONG count,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntryCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Online )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Online )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTotalHistoryCount )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceID )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceID )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreDownloadPriority )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreDownloadPriority )( 
            __RPC__in IUpdateSearcher2 * This,
            /* [in] */ VARIANT_BOOL value);
        
        END_INTERFACE
    } IUpdateSearcher2Vtbl;

    interface IUpdateSearcher2
    {
        CONST_VTBL struct IUpdateSearcher2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateSearcher2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateSearcher2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateSearcher2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateSearcher2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateSearcher2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateSearcher2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateSearcher2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateSearcher2_get_CanAutomaticallyUpgradeService(This,retval)	\
    ( (This)->lpVtbl -> get_CanAutomaticallyUpgradeService(This,retval) ) 

#define IUpdateSearcher2_put_CanAutomaticallyUpgradeService(This,value)	\
    ( (This)->lpVtbl -> put_CanAutomaticallyUpgradeService(This,value) ) 

#define IUpdateSearcher2_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateSearcher2_put_ClientApplicationID(This,value)	\
    ( (This)->lpVtbl -> put_ClientApplicationID(This,value) ) 

#define IUpdateSearcher2_get_IncludePotentiallySupersededUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_IncludePotentiallySupersededUpdates(This,retval) ) 

#define IUpdateSearcher2_put_IncludePotentiallySupersededUpdates(This,value)	\
    ( (This)->lpVtbl -> put_IncludePotentiallySupersededUpdates(This,value) ) 

#define IUpdateSearcher2_get_ServerSelection(This,retval)	\
    ( (This)->lpVtbl -> get_ServerSelection(This,retval) ) 

#define IUpdateSearcher2_put_ServerSelection(This,value)	\
    ( (This)->lpVtbl -> put_ServerSelection(This,value) ) 

#define IUpdateSearcher2_BeginSearch(This,criteria,onCompleted,state,retval)	\
    ( (This)->lpVtbl -> BeginSearch(This,criteria,onCompleted,state,retval) ) 

#define IUpdateSearcher2_EndSearch(This,searchJob,retval)	\
    ( (This)->lpVtbl -> EndSearch(This,searchJob,retval) ) 

#define IUpdateSearcher2_EscapeString(This,unescaped,retval)	\
    ( (This)->lpVtbl -> EscapeString(This,unescaped,retval) ) 

#define IUpdateSearcher2_QueryHistory(This,startIndex,count,retval)	\
    ( (This)->lpVtbl -> QueryHistory(This,startIndex,count,retval) ) 

#define IUpdateSearcher2_Search(This,criteria,retval)	\
    ( (This)->lpVtbl -> Search(This,criteria,retval) ) 

#define IUpdateSearcher2_get_Online(This,retval)	\
    ( (This)->lpVtbl -> get_Online(This,retval) ) 

#define IUpdateSearcher2_put_Online(This,value)	\
    ( (This)->lpVtbl -> put_Online(This,value) ) 

#define IUpdateSearcher2_GetTotalHistoryCount(This,retval)	\
    ( (This)->lpVtbl -> GetTotalHistoryCount(This,retval) ) 

#define IUpdateSearcher2_get_ServiceID(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceID(This,retval) ) 

#define IUpdateSearcher2_put_ServiceID(This,value)	\
    ( (This)->lpVtbl -> put_ServiceID(This,value) ) 


#define IUpdateSearcher2_get_IgnoreDownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_IgnoreDownloadPriority(This,retval) ) 

#define IUpdateSearcher2_put_IgnoreDownloadPriority(This,value)	\
    ( (This)->lpVtbl -> put_IgnoreDownloadPriority(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateSearcher2_INTERFACE_DEFINED__ */


#ifndef __IUpdateSearcher3_INTERFACE_DEFINED__
#define __IUpdateSearcher3_INTERFACE_DEFINED__

/* interface IUpdateSearcher3 */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateSearcher3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04C6895D-EAF2-4034-97F3-311DE9BE413A")
    IUpdateSearcher3 : public IUpdateSearcher2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchScope( 
            /* [retval][out] */ __RPC__out SearchScope *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchScope( 
            /* [in] */ SearchScope value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateSearcher3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateSearcher3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateSearcher3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateSearcher3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanAutomaticallyUpgradeService )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClientApplicationID )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludePotentiallySupersededUpdates )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerSelection )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out ServerSelection *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServerSelection )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ ServerSelection value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginSearch )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt ISearchJob **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EndSearch )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in_opt ISearchJob *searchJob,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EscapeString )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in BSTR unescaped,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *QueryHistory )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ LONG startIndex,
            /* [in] */ LONG count,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateHistoryEntryCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in BSTR criteria,
            /* [retval][out] */ __RPC__deref_out_opt ISearchResult **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Online )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Online )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTotalHistoryCount )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceID )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceID )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreDownloadPriority )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreDownloadPriority )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchScope )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [retval][out] */ __RPC__out SearchScope *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchScope )( 
            __RPC__in IUpdateSearcher3 * This,
            /* [in] */ SearchScope value);
        
        END_INTERFACE
    } IUpdateSearcher3Vtbl;

    interface IUpdateSearcher3
    {
        CONST_VTBL struct IUpdateSearcher3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateSearcher3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateSearcher3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateSearcher3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateSearcher3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateSearcher3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateSearcher3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateSearcher3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateSearcher3_get_CanAutomaticallyUpgradeService(This,retval)	\
    ( (This)->lpVtbl -> get_CanAutomaticallyUpgradeService(This,retval) ) 

#define IUpdateSearcher3_put_CanAutomaticallyUpgradeService(This,value)	\
    ( (This)->lpVtbl -> put_CanAutomaticallyUpgradeService(This,value) ) 

#define IUpdateSearcher3_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateSearcher3_put_ClientApplicationID(This,value)	\
    ( (This)->lpVtbl -> put_ClientApplicationID(This,value) ) 

#define IUpdateSearcher3_get_IncludePotentiallySupersededUpdates(This,retval)	\
    ( (This)->lpVtbl -> get_IncludePotentiallySupersededUpdates(This,retval) ) 

#define IUpdateSearcher3_put_IncludePotentiallySupersededUpdates(This,value)	\
    ( (This)->lpVtbl -> put_IncludePotentiallySupersededUpdates(This,value) ) 

#define IUpdateSearcher3_get_ServerSelection(This,retval)	\
    ( (This)->lpVtbl -> get_ServerSelection(This,retval) ) 

#define IUpdateSearcher3_put_ServerSelection(This,value)	\
    ( (This)->lpVtbl -> put_ServerSelection(This,value) ) 

#define IUpdateSearcher3_BeginSearch(This,criteria,onCompleted,state,retval)	\
    ( (This)->lpVtbl -> BeginSearch(This,criteria,onCompleted,state,retval) ) 

#define IUpdateSearcher3_EndSearch(This,searchJob,retval)	\
    ( (This)->lpVtbl -> EndSearch(This,searchJob,retval) ) 

#define IUpdateSearcher3_EscapeString(This,unescaped,retval)	\
    ( (This)->lpVtbl -> EscapeString(This,unescaped,retval) ) 

#define IUpdateSearcher3_QueryHistory(This,startIndex,count,retval)	\
    ( (This)->lpVtbl -> QueryHistory(This,startIndex,count,retval) ) 

#define IUpdateSearcher3_Search(This,criteria,retval)	\
    ( (This)->lpVtbl -> Search(This,criteria,retval) ) 

#define IUpdateSearcher3_get_Online(This,retval)	\
    ( (This)->lpVtbl -> get_Online(This,retval) ) 

#define IUpdateSearcher3_put_Online(This,value)	\
    ( (This)->lpVtbl -> put_Online(This,value) ) 

#define IUpdateSearcher3_GetTotalHistoryCount(This,retval)	\
    ( (This)->lpVtbl -> GetTotalHistoryCount(This,retval) ) 

#define IUpdateSearcher3_get_ServiceID(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceID(This,retval) ) 

#define IUpdateSearcher3_put_ServiceID(This,value)	\
    ( (This)->lpVtbl -> put_ServiceID(This,value) ) 


#define IUpdateSearcher3_get_IgnoreDownloadPriority(This,retval)	\
    ( (This)->lpVtbl -> get_IgnoreDownloadPriority(This,retval) ) 

#define IUpdateSearcher3_put_IgnoreDownloadPriority(This,value)	\
    ( (This)->lpVtbl -> put_IgnoreDownloadPriority(This,value) ) 


#define IUpdateSearcher3_get_SearchScope(This,retval)	\
    ( (This)->lpVtbl -> get_SearchScope(This,retval) ) 

#define IUpdateSearcher3_put_SearchScope(This,value)	\
    ( (This)->lpVtbl -> put_SearchScope(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateSearcher3_INTERFACE_DEFINED__ */


#ifndef __IUpdateDownloadResult_INTERFACE_DEFINED__
#define __IUpdateDownloadResult_INTERFACE_DEFINED__

/* interface IUpdateDownloadResult */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateDownloadResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bf99af76-b575-42ad-8aa4-33cbb5477af1")
    IUpdateDownloadResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateDownloadResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateDownloadResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateDownloadResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateDownloadResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IUpdateDownloadResult * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        END_INTERFACE
    } IUpdateDownloadResultVtbl;

    interface IUpdateDownloadResult
    {
        CONST_VTBL struct IUpdateDownloadResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateDownloadResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateDownloadResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateDownloadResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateDownloadResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateDownloadResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateDownloadResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateDownloadResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateDownloadResult_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IUpdateDownloadResult_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateDownloadResult_INTERFACE_DEFINED__ */


#ifndef __IDownloadResult_INTERFACE_DEFINED__
#define __IDownloadResult_INTERFACE_DEFINED__

/* interface IDownloadResult */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("daa4fdd0-4727-4dbe-a1e7-745dca317144")
    IDownloadResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetUpdateResult( 
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadResult **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IDownloadResult * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IDownloadResult * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateResult )( 
            __RPC__in IDownloadResult * This,
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadResult **retval);
        
        END_INTERFACE
    } IDownloadResultVtbl;

    interface IDownloadResult
    {
        CONST_VTBL struct IDownloadResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDownloadResult_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IDownloadResult_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#define IDownloadResult_GetUpdateResult(This,updateIndex,retval)	\
    ( (This)->lpVtbl -> GetUpdateResult(This,updateIndex,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadResult_INTERFACE_DEFINED__ */


#ifndef __IDownloadProgress_INTERFACE_DEFINED__
#define __IDownloadProgress_INTERFACE_DEFINED__

/* interface IDownloadProgress */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadProgress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d31a5bac-f719-4178-9dbb-5e2cb47fd18a")
    IDownloadProgress : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdateBytesDownloaded( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdateBytesToDownload( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdateIndex( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PercentComplete( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalBytesDownloaded( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalBytesToDownload( 
            /* [retval][out] */ __RPC__out DECIMAL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetUpdateResult( 
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadResult **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdateDownloadPhase( 
            /* [retval][out] */ __RPC__out DownloadPhase *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdatePercentComplete( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadProgressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadProgress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadProgress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadProgress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadProgress * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadProgress * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadProgress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadProgress * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdateBytesDownloaded )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdateBytesToDownload )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdateIndex )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PercentComplete )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalBytesDownloaded )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalBytesToDownload )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out DECIMAL *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateResult )( 
            __RPC__in IDownloadProgress * This,
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateDownloadResult **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdateDownloadPhase )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out DownloadPhase *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdatePercentComplete )( 
            __RPC__in IDownloadProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        END_INTERFACE
    } IDownloadProgressVtbl;

    interface IDownloadProgress
    {
        CONST_VTBL struct IDownloadProgressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadProgress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadProgress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadProgress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadProgress_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadProgress_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadProgress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadProgress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDownloadProgress_get_CurrentUpdateBytesDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdateBytesDownloaded(This,retval) ) 

#define IDownloadProgress_get_CurrentUpdateBytesToDownload(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdateBytesToDownload(This,retval) ) 

#define IDownloadProgress_get_CurrentUpdateIndex(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdateIndex(This,retval) ) 

#define IDownloadProgress_get_PercentComplete(This,retval)	\
    ( (This)->lpVtbl -> get_PercentComplete(This,retval) ) 

#define IDownloadProgress_get_TotalBytesDownloaded(This,retval)	\
    ( (This)->lpVtbl -> get_TotalBytesDownloaded(This,retval) ) 

#define IDownloadProgress_get_TotalBytesToDownload(This,retval)	\
    ( (This)->lpVtbl -> get_TotalBytesToDownload(This,retval) ) 

#define IDownloadProgress_GetUpdateResult(This,updateIndex,retval)	\
    ( (This)->lpVtbl -> GetUpdateResult(This,updateIndex,retval) ) 

#define IDownloadProgress_get_CurrentUpdateDownloadPhase(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdateDownloadPhase(This,retval) ) 

#define IDownloadProgress_get_CurrentUpdatePercentComplete(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdatePercentComplete(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadProgress_INTERFACE_DEFINED__ */


#ifndef __IDownloadJob_INTERFACE_DEFINED__
#define __IDownloadJob_INTERFACE_DEFINED__

/* interface IDownloadJob */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadJob;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c574de85-7358-43f6-aae8-8697e62d8ba7")
    IDownloadJob : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsyncState( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCompleted( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CleanUp( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProgress( 
            /* [retval][out] */ __RPC__deref_out_opt IDownloadProgress **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RequestAbort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadJobVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadJob * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadJob * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadJob * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadJob * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadJob * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsyncState )( 
            __RPC__in IDownloadJob * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCompleted )( 
            __RPC__in IDownloadJob * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in IDownloadJob * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CleanUp )( 
            __RPC__in IDownloadJob * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetProgress )( 
            __RPC__in IDownloadJob * This,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadProgress **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RequestAbort )( 
            __RPC__in IDownloadJob * This);
        
        END_INTERFACE
    } IDownloadJobVtbl;

    interface IDownloadJob
    {
        CONST_VTBL struct IDownloadJobVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadJob_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadJob_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadJob_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadJob_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadJob_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadJob_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadJob_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDownloadJob_get_AsyncState(This,retval)	\
    ( (This)->lpVtbl -> get_AsyncState(This,retval) ) 

#define IDownloadJob_get_IsCompleted(This,retval)	\
    ( (This)->lpVtbl -> get_IsCompleted(This,retval) ) 

#define IDownloadJob_get_Updates(This,retval)	\
    ( (This)->lpVtbl -> get_Updates(This,retval) ) 

#define IDownloadJob_CleanUp(This)	\
    ( (This)->lpVtbl -> CleanUp(This) ) 

#define IDownloadJob_GetProgress(This,retval)	\
    ( (This)->lpVtbl -> GetProgress(This,retval) ) 

#define IDownloadJob_RequestAbort(This)	\
    ( (This)->lpVtbl -> RequestAbort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadJob_INTERFACE_DEFINED__ */


#ifndef __IDownloadCompletedCallbackArgs_INTERFACE_DEFINED__
#define __IDownloadCompletedCallbackArgs_INTERFACE_DEFINED__

/* interface IDownloadCompletedCallbackArgs */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadCompletedCallbackArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fa565b23-498c-47a0-979d-e7d5b1813360")
    IDownloadCompletedCallbackArgs : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDownloadCompletedCallbackArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadCompletedCallbackArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadCompletedCallbackArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadCompletedCallbackArgs * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadCompletedCallbackArgs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadCompletedCallbackArgs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IDownloadCompletedCallbackArgsVtbl;

    interface IDownloadCompletedCallbackArgs
    {
        CONST_VTBL struct IDownloadCompletedCallbackArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadCompletedCallbackArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadCompletedCallbackArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadCompletedCallbackArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadCompletedCallbackArgs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadCompletedCallbackArgs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadCompletedCallbackArgs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadCompletedCallbackArgs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadCompletedCallbackArgs_INTERFACE_DEFINED__ */


#ifndef __IDownloadCompletedCallback_INTERFACE_DEFINED__
#define __IDownloadCompletedCallback_INTERFACE_DEFINED__

/* interface IDownloadCompletedCallback */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadCompletedCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("77254866-9f5b-4c8e-b9e2-c77a8530d64b")
    IDownloadCompletedCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt IDownloadJob *downloadJob,
            /* [in] */ __RPC__in_opt IDownloadCompletedCallbackArgs *callbackArgs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadCompletedCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadCompletedCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadCompletedCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadCompletedCallback * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in IDownloadCompletedCallback * This,
            /* [in] */ __RPC__in_opt IDownloadJob *downloadJob,
            /* [in] */ __RPC__in_opt IDownloadCompletedCallbackArgs *callbackArgs);
        
        END_INTERFACE
    } IDownloadCompletedCallbackVtbl;

    interface IDownloadCompletedCallback
    {
        CONST_VTBL struct IDownloadCompletedCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadCompletedCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadCompletedCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadCompletedCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadCompletedCallback_Invoke(This,downloadJob,callbackArgs)	\
    ( (This)->lpVtbl -> Invoke(This,downloadJob,callbackArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadCompletedCallback_INTERFACE_DEFINED__ */


#ifndef __IDownloadProgressChangedCallbackArgs_INTERFACE_DEFINED__
#define __IDownloadProgressChangedCallbackArgs_INTERFACE_DEFINED__

/* interface IDownloadProgressChangedCallbackArgs */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadProgressChangedCallbackArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("324ff2c6-4981-4b04-9412-57481745ab24")
    IDownloadProgressChangedCallbackArgs : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Progress( 
            /* [retval][out] */ __RPC__deref_out_opt IDownloadProgress **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadProgressChangedCallbackArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadProgressChangedCallbackArgs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Progress )( 
            __RPC__in IDownloadProgressChangedCallbackArgs * This,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadProgress **retval);
        
        END_INTERFACE
    } IDownloadProgressChangedCallbackArgsVtbl;

    interface IDownloadProgressChangedCallbackArgs
    {
        CONST_VTBL struct IDownloadProgressChangedCallbackArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadProgressChangedCallbackArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadProgressChangedCallbackArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadProgressChangedCallbackArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadProgressChangedCallbackArgs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadProgressChangedCallbackArgs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadProgressChangedCallbackArgs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadProgressChangedCallbackArgs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDownloadProgressChangedCallbackArgs_get_Progress(This,retval)	\
    ( (This)->lpVtbl -> get_Progress(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadProgressChangedCallbackArgs_INTERFACE_DEFINED__ */


#ifndef __IDownloadProgressChangedCallback_INTERFACE_DEFINED__
#define __IDownloadProgressChangedCallback_INTERFACE_DEFINED__

/* interface IDownloadProgressChangedCallback */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IDownloadProgressChangedCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8c3f1cdd-6173-4591-aebd-a56a53ca77c1")
    IDownloadProgressChangedCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt IDownloadJob *downloadJob,
            /* [in] */ __RPC__in_opt IDownloadProgressChangedCallbackArgs *callbackArgs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadProgressChangedCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadProgressChangedCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadProgressChangedCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadProgressChangedCallback * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in IDownloadProgressChangedCallback * This,
            /* [in] */ __RPC__in_opt IDownloadJob *downloadJob,
            /* [in] */ __RPC__in_opt IDownloadProgressChangedCallbackArgs *callbackArgs);
        
        END_INTERFACE
    } IDownloadProgressChangedCallbackVtbl;

    interface IDownloadProgressChangedCallback
    {
        CONST_VTBL struct IDownloadProgressChangedCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadProgressChangedCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadProgressChangedCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadProgressChangedCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadProgressChangedCallback_Invoke(This,downloadJob,callbackArgs)	\
    ( (This)->lpVtbl -> Invoke(This,downloadJob,callbackArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadProgressChangedCallback_INTERFACE_DEFINED__ */


#ifndef __IUpdateDownloader_INTERFACE_DEFINED__
#define __IUpdateDownloader_INTERFACE_DEFINED__

/* interface IUpdateDownloader */
/* [hidden][unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateDownloader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68f1c6f9-7ecc-4666-a464-247fe12496c3")
    IUpdateDownloader : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClientApplicationID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClientApplicationID( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsForced( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsForced( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ __RPC__out DownloadPriority *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ DownloadPriority value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Updates( 
            /* [in] */ __RPC__in_opt IUpdateCollection *value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BeginDownload( 
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadJob **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Download( 
            /* [retval][out] */ __RPC__deref_out_opt IDownloadResult **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EndDownload( 
            /* [in] */ __RPC__in_opt IDownloadJob *value,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadResult **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateDownloaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateDownloader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateDownloader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateDownloader * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateDownloader * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateDownloader * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClientApplicationID )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsForced )( 
            __RPC__in IUpdateDownloader * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsForced )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            __RPC__in IUpdateDownloader * This,
            /* [retval][out] */ __RPC__out DownloadPriority *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ DownloadPriority value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in IUpdateDownloader * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Updates )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in_opt IUpdateCollection *value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginDownload )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadJob **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Download )( 
            __RPC__in IUpdateDownloader * This,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadResult **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EndDownload )( 
            __RPC__in IUpdateDownloader * This,
            /* [in] */ __RPC__in_opt IDownloadJob *value,
            /* [retval][out] */ __RPC__deref_out_opt IDownloadResult **retval);
        
        END_INTERFACE
    } IUpdateDownloaderVtbl;

    interface IUpdateDownloader
    {
        CONST_VTBL struct IUpdateDownloaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateDownloader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateDownloader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateDownloader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateDownloader_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateDownloader_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateDownloader_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateDownloader_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateDownloader_get_ClientApplicationID(This,retval)	\
    ( (This)->lpVtbl -> get_ClientApplicationID(This,retval) ) 

#define IUpdateDownloader_put_ClientApplicationID(This,value)	\
    ( (This)->lpVtbl -> put_ClientApplicationID(This,value) ) 

#define IUpdateDownloader_get_IsForced(This,retval)	\
    ( (This)->lpVtbl -> get_IsForced(This,retval) ) 

#define IUpdateDownloader_put_IsForced(This,value)	\
    ( (This)->lpVtbl -> put_IsForced(This,value) ) 

#define IUpdateDownloader_get_Priority(This,retval)	\
    ( (This)->lpVtbl -> get_Priority(This,retval) ) 

#define IUpdateDownloader_put_Priority(This,value)	\
    ( (This)->lpVtbl -> put_Priority(This,value) ) 

#define IUpdateDownloader_get_Updates(This,retval)	\
    ( (This)->lpVtbl -> get_Updates(This,retval) ) 

#define IUpdateDownloader_put_Updates(This,value)	\
    ( (This)->lpVtbl -> put_Updates(This,value) ) 

#define IUpdateDownloader_BeginDownload(This,onProgressChanged,onCompleted,state,retval)	\
    ( (This)->lpVtbl -> BeginDownload(This,onProgressChanged,onCompleted,state,retval) ) 

#define IUpdateDownloader_Download(This,retval)	\
    ( (This)->lpVtbl -> Download(This,retval) ) 

#define IUpdateDownloader_EndDownload(This,value,retval)	\
    ( (This)->lpVtbl -> EndDownload(This,value,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateDownloader_INTERFACE_DEFINED__ */


#ifndef __IUpdateInstallationResult_INTERFACE_DEFINED__
#define __IUpdateInstallationResult_INTERFACE_DEFINED__

/* interface IUpdateInstallationResult */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateInstallationResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d940f0f8-3cbb-4fd0-993f-471e7f2328ad")
    IUpdateInstallationResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequired( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateInstallationResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateInstallationResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateInstallationResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateInstallationResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IUpdateInstallationResult * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        END_INTERFACE
    } IUpdateInstallationResultVtbl;

    interface IUpdateInstallationResult
    {
        CONST_VTBL struct IUpdateInstallationResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateInstallationResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateInstallationResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateInstallationResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateInstallationResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateInstallationResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateInstallationResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateInstallationResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateInstallationResult_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IUpdateInstallationResult_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IUpdateInstallationResult_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateInstallationResult_INTERFACE_DEFINED__ */


#ifndef __IInstallationResult_INTERFACE_DEFINED__
#define __IInstallationResult_INTERFACE_DEFINED__

/* interface IInstallationResult */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a43c56d6-7451-48d4-af96-b6cd2d0d9b7a")
    IInstallationResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HResult( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequired( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultCode( 
            /* [retval][out] */ __RPC__out OperationResultCode *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetUpdateResult( 
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateInstallationResult **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationResult * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationResult * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HResult )( 
            __RPC__in IInstallationResult * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RebootRequired )( 
            __RPC__in IInstallationResult * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultCode )( 
            __RPC__in IInstallationResult * This,
            /* [retval][out] */ __RPC__out OperationResultCode *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateResult )( 
            __RPC__in IInstallationResult * This,
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateInstallationResult **retval);
        
        END_INTERFACE
    } IInstallationResultVtbl;

    interface IInstallationResult
    {
        CONST_VTBL struct IInstallationResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInstallationResult_get_HResult(This,retval)	\
    ( (This)->lpVtbl -> get_HResult(This,retval) ) 

#define IInstallationResult_get_RebootRequired(This,retval)	\
    ( (This)->lpVtbl -> get_RebootRequired(This,retval) ) 

#define IInstallationResult_get_ResultCode(This,retval)	\
    ( (This)->lpVtbl -> get_ResultCode(This,retval) ) 

#define IInstallationResult_GetUpdateResult(This,updateIndex,retval)	\
    ( (This)->lpVtbl -> GetUpdateResult(This,updateIndex,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationResult_INTERFACE_DEFINED__ */


#ifndef __IInstallationProgress_INTERFACE_DEFINED__
#define __IInstallationProgress_INTERFACE_DEFINED__

/* interface IInstallationProgress */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationProgress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("345c8244-43a3-4e32-a368-65f073b76f36")
    IInstallationProgress : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdateIndex( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentUpdatePercentComplete( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PercentComplete( 
            /* [retval][out] */ __RPC__out LONG *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetUpdateResult( 
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateInstallationResult **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationProgressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationProgress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationProgress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationProgress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationProgress * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationProgress * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationProgress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationProgress * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdateIndex )( 
            __RPC__in IInstallationProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUpdatePercentComplete )( 
            __RPC__in IInstallationProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PercentComplete )( 
            __RPC__in IInstallationProgress * This,
            /* [retval][out] */ __RPC__out LONG *retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateResult )( 
            __RPC__in IInstallationProgress * This,
            /* [in] */ LONG updateIndex,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateInstallationResult **retval);
        
        END_INTERFACE
    } IInstallationProgressVtbl;

    interface IInstallationProgress
    {
        CONST_VTBL struct IInstallationProgressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationProgress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationProgress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationProgress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationProgress_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationProgress_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationProgress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationProgress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInstallationProgress_get_CurrentUpdateIndex(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdateIndex(This,retval) ) 

#define IInstallationProgress_get_CurrentUpdatePercentComplete(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUpdatePercentComplete(This,retval) ) 

#define IInstallationProgress_get_PercentComplete(This,retval)	\
    ( (This)->lpVtbl -> get_PercentComplete(This,retval) ) 

#define IInstallationProgress_GetUpdateResult(This,updateIndex,retval)	\
    ( (This)->lpVtbl -> GetUpdateResult(This,updateIndex,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationProgress_INTERFACE_DEFINED__ */


#ifndef __IInstallationJob_INTERFACE_DEFINED__
#define __IInstallationJob_INTERFACE_DEFINED__

/* interface IInstallationJob */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationJob;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5c209f0b-bad5-432a-9556-4699bed2638a")
    IInstallationJob : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsyncState( 
            /* [retval][out] */ __RPC__out VARIANT *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCompleted( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CleanUp( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProgress( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationProgress **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RequestAbort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationJobVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationJob * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationJob * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationJob * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationJob * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationJob * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationJob * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsyncState )( 
            __RPC__in IInstallationJob * This,
            /* [retval][out] */ __RPC__out VARIANT *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCompleted )( 
            __RPC__in IInstallationJob * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in IInstallationJob * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CleanUp )( 
            __RPC__in IInstallationJob * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetProgress )( 
            __RPC__in IInstallationJob * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationProgress **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RequestAbort )( 
            __RPC__in IInstallationJob * This);
        
        END_INTERFACE
    } IInstallationJobVtbl;

    interface IInstallationJob
    {
        CONST_VTBL struct IInstallationJobVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationJob_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationJob_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationJob_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationJob_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationJob_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationJob_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationJob_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInstallationJob_get_AsyncState(This,retval)	\
    ( (This)->lpVtbl -> get_AsyncState(This,retval) ) 

#define IInstallationJob_get_IsCompleted(This,retval)	\
    ( (This)->lpVtbl -> get_IsCompleted(This,retval) ) 

#define IInstallationJob_get_Updates(This,retval)	\
    ( (This)->lpVtbl -> get_Updates(This,retval) ) 

#define IInstallationJob_CleanUp(This)	\
    ( (This)->lpVtbl -> CleanUp(This) ) 

#define IInstallationJob_GetProgress(This,retval)	\
    ( (This)->lpVtbl -> GetProgress(This,retval) ) 

#define IInstallationJob_RequestAbort(This)	\
    ( (This)->lpVtbl -> RequestAbort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationJob_INTERFACE_DEFINED__ */


#ifndef __IInstallationCompletedCallbackArgs_INTERFACE_DEFINED__
#define __IInstallationCompletedCallbackArgs_INTERFACE_DEFINED__

/* interface IInstallationCompletedCallbackArgs */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationCompletedCallbackArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("250e2106-8efb-4705-9653-ef13c581b6a1")
    IInstallationCompletedCallbackArgs : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IInstallationCompletedCallbackArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationCompletedCallbackArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationCompletedCallbackArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationCompletedCallbackArgs * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationCompletedCallbackArgs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationCompletedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationCompletedCallbackArgs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IInstallationCompletedCallbackArgsVtbl;

    interface IInstallationCompletedCallbackArgs
    {
        CONST_VTBL struct IInstallationCompletedCallbackArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationCompletedCallbackArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationCompletedCallbackArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationCompletedCallbackArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationCompletedCallbackArgs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationCompletedCallbackArgs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationCompletedCallbackArgs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationCompletedCallbackArgs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationCompletedCallbackArgs_INTERFACE_DEFINED__ */


#ifndef __IInstallationCompletedCallback_INTERFACE_DEFINED__
#define __IInstallationCompletedCallback_INTERFACE_DEFINED__

/* interface IInstallationCompletedCallback */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationCompletedCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45f4f6f3-d602-4f98-9a8a-3efa152ad2d3")
    IInstallationCompletedCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt IInstallationJob *installationJob,
            /* [in] */ __RPC__in_opt IInstallationCompletedCallbackArgs *callbackArgs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationCompletedCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationCompletedCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationCompletedCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationCompletedCallback * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in IInstallationCompletedCallback * This,
            /* [in] */ __RPC__in_opt IInstallationJob *installationJob,
            /* [in] */ __RPC__in_opt IInstallationCompletedCallbackArgs *callbackArgs);
        
        END_INTERFACE
    } IInstallationCompletedCallbackVtbl;

    interface IInstallationCompletedCallback
    {
        CONST_VTBL struct IInstallationCompletedCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationCompletedCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationCompletedCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationCompletedCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationCompletedCallback_Invoke(This,installationJob,callbackArgs)	\
    ( (This)->lpVtbl -> Invoke(This,installationJob,callbackArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationCompletedCallback_INTERFACE_DEFINED__ */


#ifndef __IInstallationProgressChangedCallbackArgs_INTERFACE_DEFINED__
#define __IInstallationProgressChangedCallbackArgs_INTERFACE_DEFINED__

/* interface IInstallationProgressChangedCallbackArgs */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationProgressChangedCallbackArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e4f14e1e-689d-4218-a0b9-bc189c484a01")
    IInstallationProgressChangedCallbackArgs : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Progress( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationProgress **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationProgressChangedCallbackArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IInstallationProgressChangedCallbackArgs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Progress )( 
            __RPC__in IInstallationProgressChangedCallbackArgs * This,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationProgress **retval);
        
        END_INTERFACE
    } IInstallationProgressChangedCallbackArgsVtbl;

    interface IInstallationProgressChangedCallbackArgs
    {
        CONST_VTBL struct IInstallationProgressChangedCallbackArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationProgressChangedCallbackArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationProgressChangedCallbackArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationProgressChangedCallbackArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationProgressChangedCallbackArgs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IInstallationProgressChangedCallbackArgs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IInstallationProgressChangedCallbackArgs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IInstallationProgressChangedCallbackArgs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IInstallationProgressChangedCallbackArgs_get_Progress(This,retval)	\
    ( (This)->lpVtbl -> get_Progress(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationProgressChangedCallbackArgs_INTERFACE_DEFINED__ */


#ifndef __IInstallationProgressChangedCallback_INTERFACE_DEFINED__
#define __IInstallationProgressChangedCallback_INTERFACE_DEFINED__

/* interface IInstallationProgressChangedCallback */
/* [unique][uuid][nonextensible][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IInstallationProgressChangedCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e01402d5-f8da-43ba-a012-38894bd048f1")
    IInstallationProgressChangedCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt IInstallationJob *installationJob,
            /* [in] */ __RPC__in_opt IInstallationProgressChangedCallbackArgs *callbackArgs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInstallationProgressChangedCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IInstallationProgressChangedCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IInstallationProgressChangedCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IInstallationProgressChangedCallback * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in IInstallationProgressChangedCallback * This,
            /* [in] */ __RPC__in_opt IInstallationJob *installationJob,
            /* [in] */ __RPC__in_opt IInstallationProgressChangedCallbackArgs *callbackArgs);
        
        END_INTERFACE
    } IInstallationProgressChangedCallbackVtbl;

    interface IInstallationProgressChangedCallback
    {
        CONST_VTBL struct IInstallationProgressChangedCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInstallationProgressChangedCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInstallationProgressChangedCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInstallationProgressChangedCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInstallationProgressChangedCallback_Invoke(This,installationJob,callbackArgs)	\
    ( (This)->lpVtbl -> Invoke(This,installationJob,callbackArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInstallationProgressChangedCallback_INTERFACE_DEFINED__ */


#ifndef __IUpdateInstaller_INTERFACE_DEFINED__
#define __IUpdateInstaller_INTERFACE_DEFINED__

/* interface IUpdateInstaller */
/* [unique][uuid][nonextensible][dual][oleautomation][object][helpstring] */ 


EXTERN_C const IID IID_IUpdateInstaller;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b929c68-ccdc-4226-96b1-8724600b54c2")
    IUpdateInstaller : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClientApplicationID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClientApplicationID( 
            /* [in] */ __RPC__in BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsForced( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsForced( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentHwnd( 
            /* [retval][out] */ __RPC__deref_out_opt HWND *retval) = 0;
        
        virtual /* [helpstring][restricted][propput][id] */ HRESULT STDMETHODCALLTYPE put_ParentHwnd( 
            /* [unique][in] */ __RPC__in_opt HWND value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ParentWindow( 
            /* [unique][in] */ __RPC__in_opt IUnknown *value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentWindow( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Updates( 
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Updates( 
            /* [in] */ __RPC__in_opt IUpdateCollection *value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BeginInstall( 
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationJob **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BeginUninstall( 
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationJob **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EndInstall( 
            /* [in] */ __RPC__in_opt IInstallationJob *value,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationResult **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EndUninstall( 
            /* [in] */ __RPC__in_opt IInstallationJob *value,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationResult **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Install( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationResult **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RunWizard( 
            /* [defaultvalue][unique][in] */ __RPC__in_opt BSTR dialogTitle,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationResult **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBusy( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Uninstall( 
            /* [retval][out] */ __RPC__deref_out_opt IInstallationResult **retval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowSourcePrompts( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowSourcePrompts( 
            /* [in] */ VARIANT_BOOL value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RebootRequiredBeforeInstallation( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUpdateInstallerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IUpdateInstaller * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IUpdateInstaller * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IUpdateInstaller * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateInstaller * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClientApplicationID )( 
            __RPC__in IUpdateInstaller * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClientApplicationID )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsForced )( 
            __RPC__in IUpdateInstaller * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsForced )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ VARIANT_BOOL value);
        
        /* [helpstring][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentHwnd )( 
            __RPC__in IUpdateInstaller * This,
            /* [retval][out] */ __RPC__deref_out_opt HWND *retval);
        
        /* [helpstring][restricted][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ParentHwnd )( 
            __RPC__in IUpdateInstaller * This,
            /* [unique][in] */ __RPC__in_opt HWND value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ParentWindow )( 
            __RPC__in IUpdateInstaller * This,
            /* [unique][in] */ __RPC__in_opt IUnknown *value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentWindow )( 
            __RPC__in IUpdateInstaller * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Updates )( 
            __RPC__in IUpdateInstaller * This,
            /* [retval][out] */ __RPC__deref_out_opt IUpdateCollection **retval);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Updates )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in_opt IUpdateCollection *value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginInstall )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted,
            /* [in] */ VARIANT state,
            /* [retval][out] */ __RPC__deref_out_opt IInstallationJob **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BeginUninstall )( 
            __RPC__in IUpdateInstaller * This,
            /* [in] */ __RPC__in_opt IUnknown *onProgressChanged,
            /* [in] */ __RPC__in_opt IUnknown *onCompleted