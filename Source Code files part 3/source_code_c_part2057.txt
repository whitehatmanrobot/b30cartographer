 file that stores information about missing text on a url page
        static string Log_MissingTextOld; // Temporily keeps old log values when the current log file is cleaned
        static int LogFileMaxSize; // Maximum size a log file can become before it's recreated
        static int period;
        static int fiddlerPeriod;
        static void Main(string[] args)
        {      
            try
            {
                urlBasedTestExe = ConfigurationSettings.AppSettings["urlBasedTestExe"].ToString();
                urlBasedTestExeFiddler = ConfigurationSettings.AppSettings["urlBasedTestExeFiddler"].ToString();
                urlBasedTestExeName = ConfigurationSettings.AppSettings["urlBasedTestExeName"].ToString();
                urlBasedTestExeFiddlerName = ConfigurationSettings.AppSettings["urlBasedTestExeFiddlerName"].ToString();
                responseTextFile = ConfigurationSettings.AppSettings["responseTextFile"].ToString();
                machineNodes = ConfigurationSettings.AppSettings["machineNodes"].ToString();
                LogFile = ConfigurationSettings.AppSettings["LogFile"].ToString();
                LogFileOld = ConfigurationSettings.AppSettings["LogFileOld"].ToString();
                Log_MissingText = ConfigurationSettings.AppSettings["Log_MissingText"].ToString();
                Log_MissingTextOld = ConfigurationSettings.AppSettings["Log_MissingTextOld"].ToString();
                LogFileMaxSize = Convert.ToInt32(ConfigurationSettings.AppSettings["LogFileMaxSize"].ToString());
                period = Convert.ToInt32(GetPeriod(System.Environment.MachineName));
                fiddlerPeriod = Convert.ToInt32(GetPeriodFiddler(System.Environment.MachineName));

                Thread urlBasedTestThread = new Thread(new ThreadStart(UrlBasedTestScheduler));
                urlBasedTestThread.Start();
                Thread.Sleep(100000);
                Thread urlBasedTestFiddlerThread = new Thread(new ThreadStart(UrlBasedTestFiddlerScheduler));
                urlBasedTestFiddlerThread.Start();
                
            }
            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, LogFile);
            }
        }

        /// <summary>
        ///  Schedule urlBasedTestExe 
        /// </summary>
        static void UrlBasedTestScheduler()
        {
            while (true)
            {
                if (!IsProcessOpen(urlBasedTestExeName) && !IsProcessOpen(urlBasedTestExeFiddlerName))
                {
                    Process.Start(urlBasedTestExe);
                    System.Threading.Thread.Sleep(period);
                    Logging.MaintainLogFile(LogFile, LogFileOld, LogFileMaxSize);
                    Logging.MaintainLogFile(Log_MissingText, Log_MissingTextOld, LogFileMaxSize);
                }
                else
                {
                    System.Threading.Thread.Sleep(30000);
                }
            }
        }

        /// <summary>
        ///  Schedule urlBasedTestExeFiddler 
        /// </summary>
        static void UrlBasedTestFiddlerScheduler()
        {
            while (true)
            {
                if (!IsProcessOpen(urlBasedTestExeFiddlerName) && !IsProcessOpen(urlBasedTestExeName))
                {
                    Process.Start(urlBasedTestExeFiddler);
                    System.Threading.Thread.Sleep(fiddlerPeriod);
                    Logging.MaintainLogFile(LogFile, LogFileOld, LogFileMaxSize);
                    Logging.MaintainLogFile(Log_MissingText, Log_MissingTextOld, LogFileMaxSize);
                }
                else
                {
                    System.Threading.Thread.Sleep(30000);
                }
            }
        }
        /// <summary>
        /// Check if the proocess is running
        /// </summary>
        /// <param name="name">name of process</param>
        /// <returns></returns>
        public static bool IsProcessOpen(string name)
        {
            foreach (Process clsProcess in Process.GetProcesses())
            {
                if (clsProcess.ProcessName.ToLower().Contains(name.ToLower()) && !clsProcess.ProcessName.ToLower().Contains("vshost"))
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// Gets the time for which this scheduler should sleep after starting the process
        /// </summary>
        /// <param name="machineName">Name of machine</param>
        /// <returns></returns>
        static string GetPeriod(string machineName)
        {
            string period = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(responseTextFile);
            XmlNodeList GroupNodeList = xDoc.SelectNodes(machineNodes);
            foreach (XmlNode machineNode in GroupNodeList)
            {
                if (machineNode.Attributes["name"].Value.ToLower() == machineName.ToLower())
                {
                    period = machineNode.Attributes["period"].Value;
                }
            }
            return period;
        }
        static string GetPeriodFiddler(string machineName)
        {
            string period = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(responseTextFile);
            XmlNodeList GroupNodeList = xDoc.SelectNodes(machineNodes);
            foreach (XmlNode machineNode in GroupNodeList)
            {
                if (machineNode.Attributes["name"].Value.ToLower() == machineName.ToLower())
                {
                    period = machineNode.Attributes["fiddlerPeriod"].Value;
                }
            }
            return period;
        }
    }

    class Logging
    {
        /// <summary>
        /// Writes out exceptions to the log file
        /// </summary>
        /// <param name="logMessage">Message including date</param>
        /// <param name="LogFile">Path of the log file</param>
        public static void WriteToLog(String logMessage, string LogFile)
        {
            try
            {
                using (StreamWriter stWriter = File.AppendText(LogFile))
                {
                    stWriter.Write("\r\nLog Entry : ");
                    stWriter.WriteLine("Date: {0} {1}", DateTime.Now.ToLongTimeString(),
                        DateTime.Now.ToLongDateString());
                    stWriter.WriteLine(logMessage);
                    stWriter.WriteLine("-------------------------------");
                    // Update the underlying file.
                    stWriter.Flush();
                    stWriter.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Maintains the log file by coping the current log file into another file and then recreating it.
        /// </summary>
        /// <param name="fileName">Current Log File</param>
        /// <param name="fileNameOld">Log file that will store the old log file</param>
        /// <param name="LogFileMaxSize">Maximum size a log file can be before it's recreated</param>
        public static void MaintainLogFile(string fileName, string fileNameOld, int LogFileMaxSize)
        {
            try
            {
                FileStream fileStream = new FileStream(fileName, FileMode.Open); 
                long length = fileStream.Length;
                fileStream.Close();

                if (length > LogFileMaxSize)
                {
                    if (File.Exists(fileNameOld))
                        File.Delete(fileNameOld);
                    File.Copy(fileName, fileNameOld);
                    File.Delete(fileName);
                }
                if (File.Exists(fileName) == false)
                {
                    fileStream = File.Create(fileName);
                    fileStream.Close();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + "\r\n" + ex.StackTrace);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsExe\UrlBasedTestsExe\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("UrlBasedTestsExe")]
[assembly: AssemblyDescription("")]
//[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("MSIT")]
//[assembly: AssemblyProduct("UrlBasedTestsExe")]
//[assembly: AssemblyCopyright("Copyright © MSIT 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("311ea711-2c3b-4d50-b02b-caae8428a827")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Admin.aspx.cs ===
﻿using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Xml;

// todo: be able to configure information about the service running on the client

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class is used for administration tasks, in particular setting config values
    /// </summary>
    public partial class Admin : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                PopulateListBoxes();
                SetTimeouts();
            }
            MaintainScrollPositionOnPostBack = true;
        }

        /// <summary>
        /// This method is used to populate the email listboxes
        /// </summary>
        void PopulateListBoxes()
        {
            lbEmailFrom.Items.Clear();
            lbEmailTo.Items.Clear();
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode emailNode = xDoc.SelectSingleNode(Paths.GetEmailNode());

            foreach (XmlNode childNode in emailNode)
            {
                if (childNode.Name == "emailFrom")
                    lbEmailFrom.Items.Add(new ListItem(childNode.InnerText));
                else if (childNode.Name == "emailTo")
                    lbEmailTo.Items.Add(new ListItem(childNode.InnerText));
            }
        }

        /// <summary>
        /// This method is used to set the timeout values based on config values
        /// </summary>
        void SetTimeouts()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(Paths.GetRequestTimeout());

            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "Timeout")
                    lblTimeoutValue.Text = childNode.InnerText;
                else if (childNode.Name == "Multiplier")
                    lblMultiplierValue.Text = childNode.InnerText;
                else if (childNode.Name == "NumberOfRepeats")
                    lblNumberOfRepeatsValue.Text = childNode.InnerText;
                else if (childNode.Name == "FiddlerTimeout")
                    lblFiddlerTimeoutValue.Text = childNode.InnerText;
            }
            int timeout, multiplier;
            if(Int32.TryParse(lblTimeoutValue.Text, out timeout) && Int32.TryParse(lblMultiplierValue.Text, out multiplier))
            {
                int totalTimeout = timeout * multiplier;
                lblTotalTimeoutValue.Text = totalTimeout.ToString();
            }
        }

        /// <summary>
        /// This event is called when the email from is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnReplaceEmailFrom_Click(object sender, EventArgs e)
        {
            string newEmail = tbReplaceEmailFrom.Text;
            if(newEmail.Length == 0)
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode emailNode = xDoc.SelectSingleNode(Paths.GetEmailNode());

            foreach (XmlNode childNode in emailNode)
            {
                if (childNode.Name == "emailFrom")
                    emailNode.RemoveChild(childNode);
            }
            XmlElement newEmailFromNode = xDoc.CreateElement("emailFrom");
            newEmailFromNode.InnerText = newEmail;
            emailNode.AppendChild(newEmailFromNode);
            
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            PopulateListBoxes();
        }

        /// <summary>
        ///  This event is called when the email to is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddEmailTo_Click(object sender, EventArgs e)
        {
            string newEmail = tbAddEmailTo.Text;
            if (newEmail.Length == 0)
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode emailNode = xDoc.SelectSingleNode(Paths.GetEmailNode());
            XmlElement newEmailToNode = xDoc.CreateElement("emailTo");
            newEmailToNode.InnerText = newEmail;
            emailNode.AppendChild(newEmailToNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            PopulateListBoxes();
        }

        /// <summary>
        /// This event is called when an email from is deleted
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteSelectedEmails_Click(object sender, EventArgs e)
        {
            ArrayList selectedItems = new ArrayList();
            foreach (ListItem item in lbEmailTo.Items)
            {
                if (item.Selected)
                    selectedItems.Add(item.Text);
            }
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode emailNode = xDoc.SelectSingleNode(Paths.GetEmailNode());

            foreach (XmlNode childNode in emailNode)
            {
                if (childNode.Name == "emailTo" && selectedItems.Contains(childNode.InnerText))
                    emailNode.RemoveChild(childNode);
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            PopulateListBoxes();
            
        }

        /// <summary>
        /// This event is called when a timeout is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnUpdateTimeout_Click(object sender, EventArgs e)
        {
            string timeout = tbUpdateTimeout.Text;
            int intvalue;
            if (timeout.Length == 0 || !Int32.TryParse(timeout.ToString(), out intvalue))
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(Paths.GetRequestTimeout());

            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "Timeout")
                    childNode.InnerText = timeout;
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            SetTimeouts();
        }

        /// <summary>
        /// This event is called when the 2nd request timeout is changed. It is a multiple of the first timeout
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnUpdateMultiplier_Click(object sender, EventArgs e)
        {
            string multiplier = tbMultiplier.Text;
            int intvalue;
            if (multiplier.Length == 0 || !Int32.TryParse(multiplier.ToString(), out intvalue))
                return; 
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(Paths.GetRequestTimeout());

            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "Multiplier")
                    childNode.InnerText = multiplier;
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            SetTimeouts();
        }

        /// <summary>
        /// This event is called when the timeout for fiddler is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnUpdateFiddlerTimeout_Click(object sender, EventArgs e)
        {
            string timeout = tbFiddlerUpdateTimeout.Text;
            int intvalue;
            if (timeout.Length == 0 || !Int32.TryParse(timeout.ToString(), out intvalue))
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(Paths.GetRequestTimeout());

            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "FiddlerTimeout")
                    childNode.InnerText = timeout;
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            SetTimeouts();
        }

        protected void btnUpdateNumberOfRepeats_Click(object sender, EventArgs e)
        {
            string numberOfRepeats = tbNumberOfRepeats.Text;
            int intvalue;
            if (numberOfRepeats.Length == 0 || !Int32.TryParse(numberOfRepeats.ToString(), out intvalue))
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(Paths.GetRequestTimeout());

            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "NumberOfRepeats")
                    childNode.InnerText = numberOfRepeats;
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            SetTimeouts();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Admin.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Admin {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// lblEmailAlerts control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmailAlerts;
        
        /// <summary>
        /// lblEmailFrom control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmailFrom;
        
        /// <summary>
        /// lbEmailFrom control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ListBox lbEmailFrom;
        
        /// <summary>
        /// lblReplaceEmailFrom control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblReplaceEmailFrom;
        
        /// <summary>
        /// tbReplaceEmailFrom control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbReplaceEmailFrom;
        
        /// <summary>
        /// btnReplaceEmailFrom control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnReplaceEmailFrom;
        
        /// <summary>
        /// lblEmailTo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmailTo;
        
        /// <summary>
        /// lbEmailTo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ListBox lbEmailTo;
        
        /// <summary>
        /// btnDeleteSelectedEmails control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteSelectedEmails;
        
        /// <summary>
        /// lblAddEmailTo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddEmailTo;
        
        /// <summary>
        /// tbAddEmailTo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddEmailTo;
        
        /// <summary>
        /// btnAddEmailTo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddEmailTo;
        
        /// <summary>
        /// lblRequestTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblRequestTimeout;
        
        /// <summary>
        /// lblTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTimeout;
        
        /// <summary>
        /// lblTimeoutValue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTimeoutValue;
        
        /// <summary>
        /// lblUpdateTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUpdateTimeout;
        
        /// <summary>
        /// tbUpdateTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUpdateTimeout;
        
        /// <summary>
        /// btnUpdateTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnUpdateTimeout;
        
        /// <summary>
        /// lblMultiplier control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblMultiplier;
        
        /// <summary>
        /// lblMultiplierValue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblMultiplierValue;
        
        /// <summary>
        /// lblTotalTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTotalTimeout;
        
        /// <summary>
        /// lblTotalTimeoutValue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTotalTimeoutValue;
        
        /// <summary>
        /// lblUpdateMultiplier control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUpdateMultiplier;
        
        /// <summary>
        /// tbMultiplier control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbMultiplier;
        
        /// <summary>
        /// btnUpdateMultiplier control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnUpdateMultiplier;
        
        /// <summary>
        /// lblNumberOfRepeats control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNumberOfRepeats;
        
        /// <summary>
        /// lblNumberOfRepeatsValue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNumberOfRepeatsValue;
        
        /// <summary>
        /// lblUpdateNumberOfRepeats control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUpdateNumberOfRepeats;
        
        /// <summary>
        /// tbNumberOfRepeats control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbNumberOfRepeats;
        
        /// <summary>
        /// btnUpdateNumberOfRepeats control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnUpdateNumberOfRepeats;
        
        /// <summary>
        /// lblUpdateFiddlerTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUpdateFiddlerTimeout;
        
        /// <summary>
        /// lblFiddlerTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFiddlerTimeout;
        
        /// <summary>
        /// lblFiddlerTimeoutValue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFiddlerTimeoutValue;
        
        /// <summary>
        /// lblFiddlerUpdateTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFiddlerUpdateTimeout;
        
        /// <summary>
        /// tbFiddlerUpdateTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbFiddlerUpdateTimeout;
        
        /// <summary>
        /// btnUpdateFiddlerTimeout control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnUpdateFiddlerTimeout;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsExe\UrlBasedTestsExe\Program.cs ===
﻿using System;
using System.Net;
using System.IO;
using System.Net.Mail;
using System.Collections;
using System.Xml;
using System.Data;
using System.Configuration;
using System.Data.SqlClient;
using System.Diagnostics;
using Test.Common.Library.FiddlerHandler;

namespace Test.Common.Utilities.UrlBasedTestsExe
{
    /// <summary>
    /// This class will start the url based test and record the results in a log.
    /// </summary>
    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            string logFile = ConfigurationManager.AppSettings["LogFile"].ToString(); // Log file that keeps track of exception and errors
            int numErrors = 0;
            bool fiddlerTest = false; // Change this to true to make it a Fiddler test instead
            ArrayList ErrorsBody = new ArrayList();
            try
            {
                string groupsFromArgList = string.Empty;
                string titleFromArgsList = string.Empty;
                if (args.Length > 0)
                {
                    titleFromArgsList = args[0].ToString();
                }
                if (args.Length > 1)
                {
                    groupsFromArgList = args[1].ToString();
                }
                UrlBasedTests urlTest = new UrlBasedTests(fiddlerTest);
                numErrors = urlTest.Start(ErrorsBody, titleFromArgsList, groupsFromArgList);
            }
            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
            }
            finally
            {
                Logging.WriteErrorsToLog("Number of Errors : " + numErrors, logFile, ErrorsBody);
            }
        }
    }

    class UrlBasedTests
    {
        int requestTimeout;
        int timeoutMultiplier;
        int numberOfRepeats;
        string responseTextFile;
        string urlNodes;
        string errorNodes;
        string passedNodes;
        string excludeStringNodes;
        string excludeStringUrlNodes;
        string includeStringNodes;
        string knownIssueNodes;
        string path;
        string errorsXmlFile;
        string passedXmlFile;
        string urlFile;
        string emailFrom;
        string delimiter;
        string requestTimeoutNodePath;
        string emailNodePath;
        string groupNodes;
        string logFile;
        string emailBodyFilePath;
        ArrayList emailListTo;

        // fiddler variables
        string adsUrlSearchNode;
        string trackingUrlSearchNode;
        string statusUrlsFiddler;
        string statusFiddler;
        bool fiddlerTest;
        int fiddlerRequestTimeout;

        public UrlBasedTests(bool fiddlerTest)
        {
            // Possible todo: create a config class. Access them statically
            responseTextFile = ConfigurationManager.AppSettings["ResponseTextFile"].ToString();
            urlNodes = ConfigurationSettings.AppSettings["urlNodes"].ToString();
            errorNodes = ConfigurationSettings.AppSettings["errorNodes"].ToString();
            passedNodes = ConfigurationSettings.AppSettings["passedNodes"].ToString();
            groupNodes = ConfigurationSettings.AppSettings["groupNodes"].ToString();
            excludeStringNodes = ConfigurationSettings.AppSettings["excludeStringNodes"].ToString();
            excludeStringUrlNodes = ConfigurationSettings.AppSettings["excludeStringUrlNodes"].ToString();
            includeStringNodes = ConfigurationSettings.AppSettings["includeStringNodes"].ToString();
            knownIssueNodes = ConfigurationSettings.AppSettings["knownIssueNodes"].ToString();
            path = ConfigurationSettings.AppSettings["path"].ToString();
            errorsXmlFile = ConfigurationSettings.AppSettings["errorsXmlFile"].ToString();
            passedXmlFile = ConfigurationSettings.AppSettings["passedXmlFile"].ToString();
            urlFile = ConfigurationSettings.AppSettings["urlFile"].ToString();
            delimiter = ConfigurationSettings.AppSettings["delimiter"].ToString();
            requestTimeoutNodePath = ConfigurationSettings.AppSettings["requestTimeoutNode"].ToString();
            emailNodePath = ConfigurationSettings.AppSettings["emailNode"].ToString();
            logFile = ConfigurationManager.AppSettings["LogFile"].ToString(); // Log file that keeps track of exception and errors
            emailBodyFilePath = ConfigurationManager.AppSettings["emailBodyFilePath"].ToString();
            // fiddler variables
            adsUrlSearchNode = ConfigurationSettings.AppSettings["adsUrlSearchNode"].ToString();
            trackingUrlSearchNode = ConfigurationSettings.AppSettings["trackingUrlSearchNode"].ToString();
            statusUrlsFiddler = ConfigurationSettings.AppSettings["statusUrlsFiddler"].ToString();
            statusFiddler = ConfigurationSettings.AppSettings["statusFiddler"].ToString();
            this.fiddlerTest = fiddlerTest;

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(path + responseTextFile);
            XmlNode requestTimeoutNode = xDoc.SelectSingleNode(requestTimeoutNodePath);
            foreach (XmlNode childNode in requestTimeoutNode)
            {
                if (childNode.Name == "Timeout")
                    requestTimeout = Convert.ToInt32(childNode.InnerText);
                else if (childNode.Name == "Multiplier")
                    timeoutMultiplier = Convert.ToInt32(childNode.InnerText);
                else if (childNode.Name == "NumberOfRepeats")
                    numberOfRepeats = Convert.ToInt32(childNode.InnerText);
                else if (childNode.Name == "FiddlerTimeout")
                    fiddlerRequestTimeout = Convert.ToInt32(childNode.InnerText);
            }

            emailListTo = new ArrayList();
            xDoc.Load(path + responseTextFile);
            XmlNode emailNode = xDoc.SelectSingleNode(emailNodePath);
            foreach (XmlNode childNode in emailNode)
            {
                if (childNode.Name == "emailFrom")
                    emailFrom = childNode.InnerText;
                else if (childNode.Name == "emailTo")
                    emailListTo.Add(childNode.InnerText);
            }
        }

        /// <summary>
        /// This method will get the status of the url passed in.
        /// It will create the html from a request.
        /// Check for excluded and expected strings and check the http status
        /// Will return false if it finds any errors
        /// </summary>
        /// <param name="url">The url requested</param>
        /// <param name="expectedResponse">The expected http response for this url</param>
        /// <param name="iStatusCode">The http response this url actually returns</param>
        /// <param name="ExcludedStrings">Strings found on the web page that will represent errors (eg, Page Not Found)</param>
        /// <param name="UrlExcludedStrings">Strings found on this particular url that represent an error</param>
        /// <param name="unwantedString">All the excluded strings that appear for the url. Passed in as a ref</param>
        /// <param name="IncludedStrings">Strings that are expected to appear for this url. Their absense will represent an error</param>
        /// <param name="expectedString">All the included strings that don't appear for the url. Passed in as a ref</param>
        /// <param name="KnownIssues">Known issues will be ignored if they occur</param>
        /// <param name="message">Passed in as a ref. Gets any messages needed by the calling function, such as timeouts</param>
        /// <param name="repeat">Passed in as true the method is being called again due to a previous timeout</param>
        /// <returns>Returns false if an error occurs, otherwise true</returns>
        bool GetErrorStatusOfUrl(string url, int expectedResponse, ref int iStatusCode, ArrayList excludedStrings, ArrayList urlExcludedStrings, ref string unwantedString, ArrayList includedStrings, ref string expectedString, ArrayList knownIssues, ref string message, bool repeat)
        {
            iStatusCode = -1;
            bool status = true;
            bool bOnlyLookAtUrlExcludedStrings = false;

            string knownIssueStatusCode = string.Empty;
            ArrayList alKnownIssueExcludedResponseText = new ArrayList();
            ArrayList aiKnownIssueExpectedResponseText = new ArrayList();

            try
            {
                Uri uRLRequest = new Uri(url);
                HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(uRLRequest);
                myRequest.AllowAutoRedirect = true;
                myRequest.Timeout = requestTimeout;
                if(repeat)
                    myRequest.Timeout *= timeoutMultiplier;

                HttpWebResponse myHttpWebResponse = (HttpWebResponse)myRequest.GetResponse();

                while (myHttpWebResponse.StatusCode == HttpStatusCode.Redirect)
                {
                    // Redirect
                    if (myHttpWebResponse.GetResponseHeader("Location").StartsWith("/").Equals(true))
                    {
                        uRLRequest = new Uri(uRLRequest.Scheme + "://" + uRLRequest.Host + myHttpWebResponse.GetResponseHeader("Location"));
                        myRequest = (HttpWebRequest)WebRequest.Create(uRLRequest);
                        myRequest.AllowAutoRedirect = true;
                    }
                    else
                    {
                        uRLRequest = new Uri(myHttpWebResponse.GetResponseHeader("Location"));
                        myRequest = (HttpWebRequest)WebRequest.Create(uRLRequest);
                        myRequest.AllowAutoRedirect = true;

                    }
                    myHttpWebResponse = (HttpWebResponse)myRequest.GetResponse();
                }

                iStatusCode = (int)myHttpWebResponse.StatusCode;
                Stream streamResponse = myHttpWebResponse.GetResponseStream();

                TextReader reader = (TextReader)new StreamReader(streamResponse);

                try
                {
                    string htmlText = reader.ReadToEnd();
                    
                    foreach (KnownIssuesObject knownIssue in knownIssues)
                    {
                        if (knownIssue.Url == url)
                        {
                            foreach (string knownIssueExcludedString in knownIssue.AiExcludedResponseText)
                                alKnownIssueExcludedResponseText.Add(knownIssueExcludedString);
                            foreach (string knownIssueExpectedString in knownIssue.AlExpectedResponseText)
                                aiKnownIssueExpectedResponseText.Add(knownIssueExpectedString);
                            knownIssueStatusCode = knownIssue.StatusCode;
                            break;
                        }
                    }

                    foreach (ExcludedStringsObject excludedUrlStrings in urlExcludedStrings)
                    {
                        if (url == excludedUrlStrings.Url)
                        {
                            bOnlyLookAtUrlExcludedStrings = true;
                            foreach (string excludedString in excludedUrlStrings.ExcludedStrings)
                            {
                                if (htmlText.ToLower().Contains(excludedString.ToLower()) && !ThisExcludedStringIsAKnownIssue(alKnownIssueExcludedResponseText, excludedString) && !ThisUrlHasThisExpectedString(url, includedStrings, excludedString))
                                {
                                    unwantedString += "<br/>" + excludedString;
                                    status = false;
                                }
                            }
                        }
                    }

                    if (!bOnlyLookAtUrlExcludedStrings)
                    {
                        foreach (string excludedResponseText in excludedStrings)
                        {
                            if (htmlText.ToLower().Contains(excludedResponseText.ToLower()) && !ThisExcludedStringIsAKnownIssue(alKnownIssueExcludedResponseText, excludedResponseText) && !ThisUrlHasThisExpectedString(url, includedStrings, excludedResponseText))
                            {
                                unwantedString += "<br/>" + excludedResponseText;
                                status = false;
                            }
                        }
                    }
                    if (unwantedString.Length > 0)
                        unwantedString = unwantedString.Substring("<br/>".Length);

                    foreach (ExpectedStringsObject eS in includedStrings)
                    {
                        if (eS.Url == url)
                        {
                            if (!htmlText.ToLower().Contains(eS.ExpectedString.ToLower()) && !ThisExpectedStringIsAKnownIssue(aiKnownIssueExpectedResponseText, eS.ExpectedString))
                            {
                                expectedString += "<br/>" + eS.ExpectedString;
                                status = false;
                            }
                        }
                    }
                    if (expectedString.Length > 0)
                    {
                        expectedString = expectedString.Substring("<br/>".Length);
                        Logging.WriteMissingStringsToLog(url, expectedString, htmlText);
                    }

                    HttpStatusCode statusCode = myHttpWebResponse.StatusCode;

                    if ((int)statusCode != expectedResponse && statusCode.ToString() != knownIssueStatusCode)
                        status = false;

                    iStatusCode = (int)statusCode;
                }
                catch (Exception ex)
                {
                    message = ex.Message;
                }
                finally
                {
                    reader.Close();
                    streamResponse.Close();
                    myHttpWebResponse.Close();
                }
            }
            catch (System.Net.WebException ex)
            {
                status = false;
                if (ex.Response != null)
                {
                    iStatusCode = (int)((System.Net.HttpWebResponse)ex.Response).StatusCode;
                }
                message = ex.Message;
            }
            catch (Exception ex)
            {
                status = false;
                message = ex.Message;
            }

            return status;
        }

        /// <summary>
        ///  Checks if this excluded text is a known issue
        /// </summary>
        /// <param name="alKnownIssueExcludedResponseText">ArrayList of excluded text that are known issues</param>
        /// <param name="excludedString">The excluded string that is being checked</param>
        /// <returns>Returns true if the excluded string is a known issue</returns>
        bool ThisExcludedStringIsAKnownIssue(ArrayList alKnownIssueExcludedResponseText, string excludedString)
        {
            foreach (string excludedResponseText in alKnownIssueExcludedResponseText)
            {
                if (excludedResponseText.ToLower() == excludedString.ToLower())
                    return true;
            }
            return false;
        }

        /// <summary>
        ///  Checks if this expected text is a known issue
        /// </summary>
        /// <param name="aiKnownIssueExpectedResponseText">ArrayList of expected text that are known issues</param>
        /// <param name="expectedString">The expected string that is being checked</param>
        /// <returns>Returns true if the expected string is a known issue</returns>
        bool ThisExpectedStringIsAKnownIssue(ArrayList aiKnownIssueExpectedResponseText, string expectedString)
        {
            foreach (string expectedResponseText in aiKnownIssueExpectedResponseText)
            {
                if (expectedResponseText.ToLower() == expectedString.ToLower())
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Checks if a url should have a string on it's html
        /// </summary>
        /// <param name="url">The url that is being checked</param>
        /// <param name="IncludedStrings">All the strings that are expected</param>
        /// <param name="expectedString">The string that is expected for this url</param>
        /// <returns></returns>
        bool ThisUrlHasThisExpectedString(string url, ArrayList IncludedStrings, string expectedString)
        {
            foreach (ExpectedStringsObject eS in IncludedStrings)
            {
                if (eS.Url == url)
                {
                    if (expectedString.ToLower().Equals(eS.ExpectedString.ToLower()))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// Creates the body for the url to be sent out
        /// </summary>
        /// <param name="EmailBody">An array list to be put into a table</param>
        /// <returns>Returns the body of the email to be sent</returns>
        string CreateBody(ArrayList EmailBody, string subject)
        {
            string body = string.Empty;
            string webSiteName = ConfigurationManager.AppSettings["webSiteName"].ToString();
            char[] delimiters = { '^' };
            
            body += "<div style=\"font-family:Calibri; font-size:14px\">";
            body += "<p>" + subject + "</p>";
            body += "<p> There were " + EmailBody.Count + " failures at the website</p>";
            // todo: don't hardcode website name
            body += @"<p> Please visit the website " + webSiteName + " for more information</p>";
            body += "<p>The following webpages have failed</p></br></br>";
            body += "<table border=\"1\" style=\"font-family:Calibri; font-size:14px\"><tr style=\"color:Navy\">";
            body += "<th>Url</th><th>Status Code</th><th>Unwanted Strings</th><th>Expected Strings</th><th>Group</th><th>Fiddler Error</th></tr>";
            foreach (string tableCells in EmailBody)
            {
                string[] FailureArray = tableCells.Split(delimiters);
                body += "<tr>";
                
                foreach (string Error in FailureArray)
                {
                    body += "<td align=\"center\">" + Error + "</td>";
                }
                body += "</tr>";
            }

            body += "</table>";
            body += "</div>";
            return body;
        }

        /// <summary>
        /// Sends the mail of the errors
        /// </summary>
        /// <param name="EmailBody">ArrayList of errors to put in a table</param>
        /// <param name="title">Environment of where the test took place (Prod, Int, PPE)</param>
        void SendSmartEmail(ArrayList EmailBody, string title)
        {
            try
            {
                string subject = "MSN/MSGR Games " + title + " Web Page Failure " + DateTime.Now;
                if(fiddlerTest)
                    subject = "MSN/MSGR Games " + title + " Web Page <b>Fiddler</b> Failure " + DateTime.Now;
                string body = CreateBody(EmailBody, subject);
                if (fiddlerTest)
                    subject = "MSN/MSGR Games " + title + " Web Page Fiddler Failure " + DateTime.Now;
                string emailTo = string.Empty;
                foreach (string email in emailListTo)
                {
                    if (emailTo.Length > 0)
                        emailTo += ",";
                    emailTo += email;
                }

                if (File.Exists(emailBodyFilePath))
                    File.Delete(emailBodyFilePath);

                if (File.Exists(emailBodyFilePath) == false)
                {
                    FileStream fs = File.Create(emailBodyFilePath);
                    fs.Close();
                }

                using (StreamWriter stWriter = File.AppendText(emailBodyFilePath))
                {
                    stWriter.Write(body);
                    stWriter.Flush();
                    stWriter.Close();
                }
                
                string arguments = " smtp server:smtphost.redmond.corp.microsoft.com auth:SSPI to:" + emailTo + " from:" + emailFrom + " body:" + emailBodyFilePath + " content-type:text/html \"subject:" + subject + "\"";

                Process sendEmail = new Process();
                sendEmail.StartInfo.FileName = "smartmail.exe";
                sendEmail.StartInfo.Arguments = arguments;
                sendEmail.Start();
            }
            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
                SendSimplerEmail(title);
            }
        }


        /// <summary>
        /// Sends the mail of the errors
        /// </summary>
        /// <param name="EmailBody">ArrayList of errors to put in a table</param>
        /// <param name="title">Environment of where the test took place (Prod, Int, PPE)</param>
        void SendEmail(ArrayList EmailBody, string title)
        {
            string subject = "MSN/MSGR Games " + title + " Web Page Failure " + DateTime.Now;
            if (fiddlerTest)
                subject = "MSN/MSGR Games " + title + " Web Page <b>Fiddler</b> Failure " + DateTime.Now;
            string body = CreateBody(EmailBody,subject);
            if (fiddlerTest)
                subject = "MSN/MSGR Games " + title + " Web Page Fiddler Failure " + DateTime.Now;
            string smtpServer = "smtphost.redmond.corp.microsoft.com";
            
            try
            {
                SmtpClient smtpClient = new SmtpClient(smtpServer);
                MailMessage mailMessage = new MailMessage(emailFrom, emailFrom);
                mailMessage.To.Clear();
                foreach (string et in emailListTo)
                {
                    mailMessage.To.Add(et);
                }
                mailMessage.Subject = subject;
                mailMessage.IsBodyHtml = true;
                mailMessage.Body = body;
                mailMessage.Priority = MailPriority.Normal;
                smtpClient.UseDefaultCredentials = true;
                smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtpClient.Send(mailMessage);
            }

            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
                SendSmartEmail(EmailBody, title);
            }
        }

        /// <summary>
        /// Simpler email to be sent out in case the previous one failed
        /// </summary>
        /// <param name="title">Environment of where the test took place (Prod, Int, PPE)</param>
        void SendSimplerEmail(string title)
        {
            string webSiteName = ConfigurationManager.AppSettings["webSiteName"].ToString();
            string smtpServer = "smtphost.redmond.corp.microsoft.com";
            string body = "<p>There were errors at " + title + "</p>";
            body += @"<p> Please visit the website " + webSiteName + " for more information</p>";
            body += @"<p> Also check the log at \\" + System.Environment.MachineName + @"\UrlBrowserTests\log.txt</p>";
            try
            {
                SmtpClient smtpClient = new SmtpClient(smtpServer);
                MailMessage mailMessage = new MailMessage(emailFrom, emailFrom);
                mailMessage.To.Clear();
                foreach (string et in emailListTo)
                {
                    mailMessage.To.Add(et);
                }
                mailMessage.Subject = "MSN/MSGR Games " + title + " Web Page Failure " + DateTime.Now;
                mailMessage.IsBodyHtml = true;
                mailMessage.Body = body;
                mailMessage.Priority = MailPriority.Normal;
                smtpClient.UseDefaultCredentials = true;
                smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtpClient.Send(mailMessage);
            }

            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
            }
        }

        
        /// <summary>
        ///  Gets the excluded strings, expected strings and known issues used for the url test
        /// </summary>
        /// <param name="ExcludedStrings">Strings not expected to see on the web page</param>
        /// <param name="UrlExcludedStrings">Strings not expected to see on the web page for that url</param>
        /// <param name="IncludedStrings">Strings expected to see on the web page</param>
        /// <param name="KnownIssues">Issues that are known and will not be reported</param>
        void GetInformationForUrlTest(ArrayList ExcludedStrings, ArrayList UrlExcludedStrings, ArrayList IncludedStrings, ArrayList KnownIssues)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(path + responseTextFile);
            XmlNodeList NodeExcludeStrings = xDoc.SelectNodes(excludeStringNodes);
            string excludedString = string.Empty;
            foreach (XmlNode node in NodeExcludeStrings)
            {
                excludedString = node.InnerText.ToString();
                ExcludedStrings.Add(excludedString);
            }

            XmlNodeList NodeUrlExcludeStrings = xDoc.SelectNodes(excludeStringUrlNodes);
            string url = string.Empty;
            foreach (XmlNode node in NodeUrlExcludeStrings)
            {
                url = node.Attributes["value"].Value;
                ArrayList alExcludedStrings = new ArrayList();
                foreach (XmlNode TextNode in node.ChildNodes)
                {
                    excludedString = TextNode.InnerText.ToString();
                    alExcludedStrings.Add(excludedString);
                }
                UrlExcludedStrings.Add(new ExcludedStringsObject(url, alExcludedStrings));
            }

            XmlNodeList NodeIncludedStrings = xDoc.SelectNodes(includeStringNodes);
            url = string.Empty;
            string includedText = string.Empty;
            foreach (XmlNode node in NodeIncludedStrings)
            {
                url = node.Attributes["value"].Value;
                foreach (XmlNode TextNode in node.ChildNodes)
                {
                    includedText = TextNode.InnerText.ToString();
                    IncludedStrings.Add(new ExpectedStringsObject(url, includedText));
                }
            }

            string StatusCode = string.Empty;
            string ExcludedResponseText = string.Empty;
            string ExpectedResponseText = string.Empty;
            
            XmlNodeList KnownIssuesNodes = xDoc.SelectNodes(knownIssueNodes);
            ArrayList alExcludedResponseText = new ArrayList();
            ArrayList alExpectedResponseText = new ArrayList();
            foreach (XmlNode node in KnownIssuesNodes)
            {
                url = node.Attributes["value"].Value;
                StatusCode = node.Attributes["StatusCode"].Value;
                alExcludedResponseText.Clear();
                alExpectedResponseText.Clear();
                foreach (XmlNode childNode in node.ChildNodes)
                {
                    if (childNode.Name == "ExcludedResponseText")
                        foreach (XmlNode textNode in childNode.ChildNodes)
                        {
                            alExcludedResponseText.Add(textNode.InnerText);
                        }
                    else if (childNode.Name == "ExpectedResponseText")
                        foreach (XmlNode textNode in childNode.ChildNodes)
                        {
                            alExpectedResponseText.Add(textNode.InnerText);
                        }
                }
                KnownIssues.Add(new KnownIssuesObject(url, StatusCode, alExcludedResponseText, alExpectedResponseText));
            }
        }

        /// <summary>
        /// Get data for searching for fiddler errors
        /// </summary>
        /// <param name="Ads">Urls for ads</param>
        /// <param name="Tracking">Urls for tracking</param>
        /// <param name="FiddlerStatus">Fiddler status http errors</param>
        void GetInformationForUrlFiddlerTest(ArrayList Ads, ArrayList Tracking, ArrayList FiddlerStatus)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(path + responseTextFile);
            
            XmlNodeList AdNodes = xDoc.SelectNodes(adsUrlSearchNode);
            string adUrl = string.Empty;
            string adGroups = string.Empty;
            foreach (XmlNode node in AdNodes)
            {
                adUrl = node.InnerText;
                adGroups = node.Attributes["group"].Value;
                Ads.Add(new FiddlerUrlObject(adUrl, adGroups));
            }
            XmlNodeList trackingNodes = xDoc.SelectNodes(trackingUrlSearchNode);
            string trackingUrl = string.Empty;
            string trackingGroups = string.Empty;
            foreach (XmlNode node in trackingNodes)
            {
                trackingUrl = node.InnerText;
                trackingGroups = node.Attributes["group"].Value;
                Tracking.Add(new FiddlerUrlObject(trackingUrl, trackingGroups));
            }
            XmlNodeList statusFiddlerNodes = xDoc.SelectNodes(statusFiddler);
            string sStatusFiddler = string.Empty;
            foreach (XmlNode node in statusFiddlerNodes)
            {
                sStatusFiddler = node.InnerText;
                FiddlerStatus.Add(sStatusFiddler);
            }
        }

        /// <summary>
        ///  Returns true if the url has known issues that should not be reported
        /// </summary>
        /// <param name="KnownIssues">List of all the known issues</param>
        /// <param name="url">The url that's being checked</param>
        /// <returns>Returns true if the url has known issues</returns>
        bool UrlIsAKnownIssue(ArrayList KnownIssues, string url)
        {
            foreach (KnownIssuesObject knownIssue in KnownIssues)
            {
                if (knownIssue.Url == url)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// This method will search for fiddler errors for the url passed in.
        /// It uses FiddlerHandler.dll
        /// </summary>
        /// <param name="url">The url that fiddler is checking</param>
        /// <param name="group">The group that this url belongs to</param>
        /// <param name="FiddlerStatus">The list of http errors to check for (eg, 404, 500, 504</param>
        /// <param name="Ads">The ads urls. Configured at the website</param>
        /// <param name="Tracking">The tracking urls. Configured at the website</param>
        /// <returns></returns>
        string SearchForFiddlerErrors(string url, string group, ArrayList FiddlerStatus, ArrayList Ads, ArrayList Tracking)
        {
            string trackingUrl = string.Empty;
            string adsUrl = string.Empty;
            string fiddlerErrors = string.Empty;
            FiddlerInstance fi = new FiddlerInstance();
            DataRow dataRowTrackingURL = null;
            DataRow dataRowAdsURL = null;
            string sAdsUrl = string.Empty;
            ArrayList alAds = null;
            try
            {
                fi.Start();
                fi.OpenURL(url);
                System.Threading.Thread.Sleep(fiddlerRequestTimeout);
                fi.Stop();
                fi.Dump();
                // get httpStatus code column for each url
                ArrayList urls = fi.GetAllUrls();
                foreach (string urlStatus in urls)
                {
                    int index = urlStatus.IndexOf("httpStatus");
                    if (index > -1)
                    {
                        string sStatus = urlStatus.Substring(index + "httpStatus".Length);
                        foreach (string badStatus in FiddlerStatus)
                        {
                            if (badStatus == sStatus)
                            {
                                if (fiddlerErrors.Length > 0)
                                    fiddlerErrors += "<br/>";
                                fiddlerErrors += urlStatus;
                            }
                        }
                    }
                }
                foreach (FiddlerUrlObject trackingObject in Tracking)
                {
                    string[] trackingGroups = trackingObject.Groups.Split(',');
                    foreach (string trackingGroup in trackingGroups)
                    {
                        if (trackingGroup == group)
                        {
                            trackingUrl = trackingObject.Url;
                            dataRowTrackingURL = fi.FindURL(trackingUrl);
                            if (dataRowTrackingURL == null)
                            {
                                if (fiddlerErrors.Length > 0)
                                    fiddlerErrors += "<br/>";
                                fiddlerErrors += "Missing tracking";
                            }
                        }
                    }
                }
                foreach (FiddlerUrlObject adsObject in Ads)
                {
                    if (adsObject.Groups.Contains(group))
                    {
                        adsUrl = adsObject.Url;
                        alAds = fi.FindAllURLs(adsUrl);
                        foreach (string urlAd in alAds)
                        {
                            dataRowAdsURL = fi.FindURL(urlAd);
                            if (dataRowAdsURL == null)
                            {
                                if (fiddlerErrors.Length > 0)
                                    fiddlerErrors += "<br/>";
                                fiddlerErrors += "Missing ad: " + urlAd;
                            }
                            else
                            {
                                try
                                {

                                    sAdsUrl = fi.GetQParams(dataRowAdsURL["url"].ToString()).GetValues("PG").GetValue(0).ToString();
                                }
                                catch
                                {
                                    if (fiddlerErrors.Length > 0)
                                        fiddlerErrors += "<br/>";
                                    fiddlerErrors += "Missing ad: " + urlAd;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Logging.WriteToLog(e.Message + "\r\n" + e.StackTrace, logFile);
            }
            finally
            {
                fi.Exit();
                CloseBrowser();
            }

            return fiddlerErrors;
        }

        /// <summary>
        /// Closes any instances of the IE browser
        /// </summary>
        void CloseBrowser()
        {
            try
            {
                //Close the already open IE instances
                System.Diagnostics.Process[] p = System.Diagnostics.Process.GetProcesses();
                for (int i = 0; i < p.Length; i++)
                {
                    if (p[i].ProcessName.ToLower().Contains("iexplore"))
                    {
                        p[i].CloseMainWindow();
                    }
                }
            }
            catch (Exception e)
            {
                Logging.WriteToLog("Error closing IE instance" + "\r\n" + e.Message + "\r\n" + e.StackTrace, logFile);
            }
        }
        
        /// <summary>
        /// Update the error xml file and passing xml file
        /// </summary>
        /// <param name="ErrorMessageObjects">The urls that failed with the reasons for failure</param>
        /// <param name="PassedMessageObjects">the urls that passed</param>
        /// <param name="alGroups">The groups of urls</param>
        void UpdateErrorAndPassingUrlsInXmlFiles(ArrayList ErrorMessageObjects, ArrayList PassedMessageObjects, ArrayList alGroups)
        {
            XmlDocument xDocErrors = new XmlDocument();
            xDocErrors.Load(path + errorsXmlFile);
            XmlNode ErrorNodes = xDocErrors.SelectSingleNode(errorNodes);
            ArrayList DeleteErrorNodes = new ArrayList();
            foreach (XmlNode errorNode in ErrorNodes.ChildNodes)
            {
                foreach (string group in alGroups)
                {
                    if (errorNode.Attributes["Group"].Value.ToLower() == group.ToLower())
                        DeleteErrorNodes.Add(errorNode);
                }
            }
            foreach(XmlNode errorNode in DeleteErrorNodes)
                ErrorNodes.RemoveChild(errorNode);
            foreach (ErrorMessageObject errorObject in ErrorMessageObjects)
            {
                XmlElement newErrorNode = xDocErrors.CreateElement("error");
                newErrorNode.SetAttribute("Url", errorObject.Url);
                newErrorNode.SetAttribute("StatusCode", errorObject.StatusCode);
                newErrorNode.SetAttribute("UnwantedStrings", errorObject.UnwantedString);
                newErrorNode.SetAttribute("ExpectedStrings", errorObject.ExpectedString);
                newErrorNode.SetAttribute("Group", errorObject.Group);
                newErrorNode.SetAttribute("FiddlerError", errorObject.SFiddlerError);
                ErrorNodes.AppendChild(newErrorNode);
            }

            xDocErrors.Save(path + errorsXmlFile);

            XmlDocument xDocPassed = new XmlDocument();
            xDocPassed.Load(path + passedXmlFile);
            XmlNode PassedNodes = xDocPassed.SelectSingleNode(errorNodes);
            ArrayList DeletePassedNodes = new ArrayList();
            foreach (XmlNode passedNode in PassedNodes.ChildNodes)
            {
                foreach (string group in alGroups)
                {
                    if (passedNode.Attributes["Group"].Value.ToLower() == group.ToLower())
                        DeletePassedNodes.Add(passedNode);
                }
            }
            foreach (XmlNode passedNode in DeletePassedNodes)
                PassedNodes.RemoveChild(passedNode);
            foreach (PassedMessageObject passedObject in PassedMessageObjects)
            {
                XmlElement newPassedNode = xDocPassed.CreateElement("passed");
                newPassedNode.SetAttribute("Url", passedObject.Url);
                newPassedNode.SetAttribute("StatusCode", passedObject.StatusCode);
                newPassedNode.SetAttribute("Group", passedObject.Group);
                PassedNodes.AppendChild(newPassedNode);
            }

            xDocPassed.Save(path + passedXmlFile);
        }

        string GetUrlGroupsFromArgumentList(string groupsFromArgList, ArrayList alGroups)
        {
            string urlGroups = string.Empty;
            string[] groups = groupsFromArgList.Split(',');
            int i = 0;
            foreach (string group in groups)
            {
                if (i > 0)
                    urlGroups += " or ";
                urlGroups += "@group='" + group + "'";
                i++;
                alGroups.Add(group);
            }
            return urlGroups;
        }
        /// <summary>
        ///  Gets the urls groups that are running on a particular machine
        /// </summary>
        /// <param name="machineName">The machine that the executable is currently running on</param>
        /// <param name="alGroups">All the url groups</param>
        /// <param name="title">The environments that this machine is requesting urls (Production, Int, PPE)</param>
        /// <returns></returns>
        string GetUrlGroupsForAMachine(string machineName, ArrayList alGroups, ref string title)
        {
            string groups = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(path + responseTextFile);
            XmlNodeList GroupNodeList = xDoc.SelectNodes(groupNodes);
            int i = 0;
            foreach(XmlNode machineNode in GroupNodeList)
            {
                if (machineNode.Attributes["name"].Value.ToLower() == machineName.ToLower())
                {
                    title = machineNode.Attributes["title"].Value;
                    foreach (XmlNode node in machineNode.ChildNodes)
                    {
                        if (i > 0)
                            groups += " or ";
                        groups += "@group='" + node.InnerText + "'";
                        i++;
                        alGroups.Add(node.InnerText);
                    }
                }
            }
            return groups;
        }

        /// <summary>
        /// Updates the last run of this exe on the selected machine in the xml file
        /// </summary>
        /// <param name="machineName"></param>
        void UpdateMachineLastRunDate(string machineName)
        {
            string groups = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            try
            {
                xDoc.Load(path + responseTextFile);
                XmlNodeList GroupNodeList = xDoc.SelectNodes(groupNodes);
                foreach (XmlElement machineNode in GroupNodeList)
                {
                    if (machineNode.Attributes["name"].Value.ToLower() == machineName.ToLower())
                    {
                        if (machineNode.Attributes["DateOfRun"] == null)
                            machineNode.SetAttribute("DateOfRun", DateTime.Now.ToString());
                        else
                            machineNode.Attributes["DateOfRun"].Value = DateTime.Now.ToString();

                    }
                }
                xDoc.Save(path + responseTextFile);
            }
            catch (Exception ex)
            {
                Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
            }
        }

        /// <summary>
        /// This starts the Url based tests
        /// </summary>
        /// <param name="EmailBody">This will eventually contain all the errors that will be sent out in an email</param>
        /// <returns>The number of errors that will occur</returns>
        public int Start(ArrayList EmailBody, string titleFromArgsList, string groupsFromArgList)
        {
            string machineName = System.Environment.MachineName;
            ArrayList alGroups = new ArrayList();
            string title = string.Empty;
            string groups = string.Empty;
            if (titleFromArgsList.Length > 0 && groupsFromArgList.Length > 0)
            {
                title = titleFromArgsList;
                groups = GetUrlGroupsFromArgumentList(groupsFromArgList, alGroups);
            }
            else
                groups = GetUrlGroupsForAMachine(machineName, alGroups, ref title);
            ArrayList excludedStrings = new ArrayList();
            ArrayList urlExcludedStrings = new ArrayList();
            ArrayList includedStrings = new ArrayList();
            ArrayList knownIssues = new ArrayList();
            ArrayList errorMessageObjects = new ArrayList();
            ArrayList passedMessageObjects = new ArrayList();

            // fiddler arrays
            ArrayList Tracking = new ArrayList();
            ArrayList Ads = new ArrayList();
            ArrayList FiddlerStatus = new ArrayList();

            GetInformationForUrlTest(excludedStrings, urlExcludedStrings, includedStrings, knownIssues);
            if(fiddlerTest)
                GetInformationForUrlFiddlerTest(Ads, Tracking, FiddlerStatus);
            int statusCode = -1;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(path + urlFile);
            string xPathForUrls = "//urls//urlGroup[" + groups + "]//url";
            if (fiddlerTest)
            {
                xPathForUrls = "//ResponseText/fiddlerUrl/urlGroup[" + groups + "]//url";
                xDoc.Load(path + responseTextFile);
            }
            XmlNodeList Urls = xDoc.SelectNodes(xPathForUrls);
            bool success = true;
            string url = string.Empty;
            string group = string.Empty;
            string unwantedString = string.Empty;
            string expectedString = string.Empty;
            bool status = false;
            string errorMessage = string.Empty;
            string passMessage = string.Empty;
            string sFiddlerError = string.Empty;
            string message = string.Empty;
            int numErrors = 0;
            foreach (XmlNode urlNode in Urls)
            {
                url = urlNode.InnerText;
                group = urlNode.ParentNode.Attributes["group"].Value;
                unwantedString = string.Empty;
                expectedString = string.Empty;
                message = string.Empty;
                status = GetErrorStatusOfUrl(url, 200, ref statusCode, excludedStrings, urlExcludedStrings, ref unwantedString, includedStrings, ref expectedString, knownIssues, ref message, false);
                if (!status && (message.ToLower().Contains("the operation has timed out") || message.ToLower().Contains("exception")) && numErrors < numberOfRepeats)
                {
                    message = string.Empty;
                    status = GetErrorStatusOfUrl(url, 200, ref statusCode, excludedStrings, urlExcludedStrings, ref unwantedString, includedStrings, ref expectedString, knownIssues, ref message, true);
                }

                sFiddlerError = string.Empty;

                if (fiddlerTest)
                {
                    sFiddlerError = SearchForFiddlerErrors(url, group, FiddlerStatus, Ads, Tracking);
                    if (sFiddlerError.Length > 0)
                        status = false;
                }
                if (status == false)
                {
                    success = false;
                    numErrors++;
                    if (statusCode == -1)
                    {
                        errorMessage = url + delimiter + "Timed out" + delimiter + unwantedString + delimiter + expectedString + delimiter + group + delimiter + sFiddlerError;
                        errorMessageObjects.Add(new ErrorMessageObject(url, "Timed out", unwantedString, expectedString, group, sFiddlerError));
                    }
                    else
                    {
                        errorMessage = url + delimiter + statusCode + delimiter + unwantedString + delimiter + expectedString + delimiter + group + delimiter + sFiddlerError;
                        errorMessageObjects.Add(new ErrorMessageObject(url, statusCode.ToString(), unwantedString, expectedString, group, sFiddlerError));
                    }
                    EmailBody.Add(errorMessage);
                }
                else if (!UrlIsAKnownIssue(knownIssues, url))
                {
                    passMessage = url + delimiter + statusCode + delimiter + group;
                    passedMessageObjects.Add(new PassedMessageObject(url,statusCode.ToString(),group));
                }
            }
            UpdateErrorAndPassingUrlsInXmlFiles(errorMessageObjects, passedMessageObjects, alGroups);
            UpdateMachineLastRunDate(machineName);
            
            if (success == false)
            {
                InsertErrorsIntoDatabase(errorMessageObjects);
                SendEmail(EmailBody, title);
            }
            return numErrors;
        }

        /// <summary>
        /// Gets the sql connection for the database
        /// </summary>
        /// <returns>SqlConnection</returns>
        SqlConnection GetConnection()
        {
            string connString = ConfigurationManager.AppSettings["connectionString"].ToString();
            return new SqlConnection(connString);
        }
        
        /// <summary>
        /// Inserts errors into database
        /// </summary>
        /// <param name="ErrorMessageObjects">All the errors that occurred for each url</param>
        void InsertErrorsIntoDatabase(ArrayList ErrorMessageObjects)
        {
            using (SqlConnection conn = GetConnection())
            {
                string cmdQuery = string.Empty;
                try
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand(cmdQuery, conn);
                    foreach (ErrorMessageObject errorObject in ErrorMessageObjects)
                    {
                        cmdQuery = "Insert into UrlFailures (Date, Url, StatusCode, UnwantedString, ExpectedString, UrlGroup, Day) VALUES ('" + DateTime.Now + "', '" + errorObject.Url + "', '" + errorObject.StatusCode + "', '" + errorObject.UnwantedString + "', '" + errorObject.ExpectedString + "', '" + errorObject.Group + "', '" + DateTime.Now.ToShortDateString() + "')";
                        cmd.CommandText = cmdQuery;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Logging.WriteToLog(ex.Message + "\r\n" + ex.StackTrace, logFile);
                }
                finally
                {
                    conn.Close();
                }
            }
        }
    }

    /// <summary>
    /// This class is for storing information about the errors that occur for each url.
    /// </summary>
    class ErrorMessageObject
    {
        string url;
        string statusCode;  
        string unwantedString;  
        string expectedString;  
        string group;
        string sFiddlerError;

        public ErrorMessageObject(string url, string statusCode, string unwantedString, string expectedString, string group, string sFiddlerError)
        {
            this.url = url;
            this.statusCode = statusCode;
            this.unwantedString = unwantedString;
            this.expectedString = expectedString;
            this.group = group;
            this.sFiddlerError = sFiddlerError;
        }

        public string Url
        {
            get { return url; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
        public string UnwantedString
        {
            get { return unwantedString; }
        }
        public string ExpectedString
        {
            get { return expectedString; }
        }
        public string Group
        {
            get { return group; }
        }
        public string SFiddlerError
        {
            get { return sFiddlerError; }
        }
    }

    /// <summary>
    /// This class is for storing information about urls that pass. 
    /// </summary>
    class PassedMessageObject
    {
        string url;
        string statusCode;
        string group;

        public PassedMessageObject(string url, string statusCode, string group)
        {
            this.url = url;
            this.statusCode = statusCode;
            this.group = group;
        }

        public string Url
        {
            get { return url; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
        public string Group
        {
            get { return group; }
        }
    }

    /// <summary>
    /// This class is used for storing information about strings that are expected to occur in the html for a url
    /// </summary>
    class ExpectedStringsObject
    {
        string expectedString;
        string url;

        public ExpectedStringsObject(string url, string expectedString)
        {
            this.expectedString = expectedString;
            this.url = url;
        }
        public string ExpectedString
        {
            get { return expectedString; }
        }
        public string Url
        {
            get { return url; }
        }
    }

    /// <summary>
    /// This class is used for storing information about strings that occur on url pages that signify errors
    /// </summary>
    class ExcludedStringsObject
    {
        ArrayList excludedStrings;
        string url;

        public ExcludedStringsObject(string url, ArrayList expectedStrings)
        {
            this.excludedStrings = new ArrayList(expectedStrings);
            this.url = url;
        }
        public ArrayList ExcludedStrings
        {
            get { return excludedStrings; }
        }
        public string Url
        {
            get { return url; }
        }
    }

    /// <summary>
    /// This class is used for storing information about urls that have errors which are known issues
    /// </summary>
    class KnownIssuesObject
    {
        string url;
        string statusCode;
        ArrayList alExcludedResponseText;
        ArrayList alExpectedResponseText;
        public KnownIssuesObject(string url, string StatusCode, ArrayList myAlExcludedResponseText, ArrayList myAlExpectedResponseText)
        {
            this.url = url;
            this.statusCode = StatusCode;
            alExcludedResponseText = new ArrayList(myAlExcludedResponseText);
            alExpectedResponseText = new ArrayList(myAlExpectedResponseText);
        }
        public string Url
        {
            get { return url; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
        public ArrayList AiExcludedResponseText
        {
            get { return alExcludedResponseText; }
        }
        public ArrayList AlExpectedResponseText
        {
            get { return alExpectedResponseText; }
        }
    }

    /// <summary>
    /// This class is used for logging information about exception and errors
    /// </summary>
    class Logging
    {
        /// <summary>
        /// Writes out errors for each url to the log file
        /// </summary>
        /// <param name="logMessage">Message including date</param>
        /// <param name="logFile">Path of the log file</param>
        /// <param name="ErrorsBody">The errors</param>
        public static void WriteErrorsToLog(String logMessage, string logFile, ArrayList ErrorsBody)
        {
            try
            {
                using (StreamWriter stWriter = File.AppendText(logFile))
                {
                    stWriter.Write("\r\nLog Entry : ");
                    stWriter.WriteLine("Date: {0} {1}", DateTime.Now.ToLongTimeString(),
                        DateTime.Now.ToLongDateString());
                    stWriter.WriteLine(logMessage);
                    foreach (string error in ErrorsBody)
                        stWriter.WriteLine(error);
                    stWriter.WriteLine("-------------------------------");
                    // Update the underlying file.
                    stWriter.Flush();
                    stWriter.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Writes out exceptions to the log file
        /// </summary>
        /// <param name="logMessage">Message including date</param>
        /// <param name="logFile">Path of the log file</param>
        public static void WriteToLog(String logMessage, string logFile)
        {
            try
            {
                using (StreamWriter stWriter = File.AppendText(logFile))
                {
                    stWriter.Write("\r\nLog Entry : ");
                    stWriter.WriteLine("Date: {0} {1}", DateTime.Now.ToLongTimeString(),
                        DateTime.Now.ToLongDateString());
                    stWriter.WriteLine(logMessage);
                    stWriter.WriteLine("-------------------------------");
                    // Update the underlying file.
                    stWriter.Flush();
                    stWriter.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Logs information about missing text on a url page
        /// </summary>
        /// <param name="url">The url in which the missing text appeared</param>
        /// <param name="missingString">The missing text that should have occurred on this url</param>
        /// <param name="actualText">The actual text returned by the url</param>
        public static void WriteMissingStringsToLog(String url, String missingString, String actualText)
        {
            string Log_MissingText = ConfigurationManager.AppSettings["Log_MissingText"].ToString(); // Log file that stores information about missing text on a url page
            try
            {
                using (StreamWriter stWriter = File.AppendText(Log_MissingText))
                {
                    stWriter.Write("\r\nLog Entry : ");
                    stWriter.WriteLine("Date: {0} {1}", DateTime.Now.ToLongTimeString(),
                        DateTime.Now.ToLongDateString());
                    stWriter.WriteLine("URL:");
                    stWriter.WriteLine(url);
                    stWriter.WriteLine("MISSING STRING:");
                    stWriter.WriteLine(missingString);
                    stWriter.WriteLine("ACTUAL TEXT:");
                    stWriter.WriteLine(actualText);
                    stWriter.WriteLine("-------------------------------");
                    // Update the underlying file.
                    stWriter.Flush();
                    stWriter.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }
    }


    /// <summary>
    /// Class used for searching for Fiddler errors
    /// </summary>
    class FiddlerUrlObject
    {
        string url;
        string groups;

        public FiddlerUrlObject(string url, string groups)
        {
            this.url = url;
            this.groups = groups;
        }

        public string Url
        {
            get { return url; }
        }
        public string Groups
        {
            get { return groups; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Ads.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Collections;
using System.Data;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class will be used for viewing or updating ad urls used for fiddler testing
    /// </summary>
    public partial class Ads : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyDataBind();
        }

        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList urlObjects = GetUrlObjects();
            dgAds.DataSource = urlObjects;
            dgAds.DataBind();
        }
        
        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgAds.CurrentPageIndex = e.NewPageIndex;
            MyDataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if(Session["ViewAllAdUrls"] == null)
            {
                Session["ViewAllAdUrls"] = "true";
            }
            if(Session["ViewAllAdUrls"].ToString() == "true")
            {
                Session["ViewAllAdUrls"] = "false";
                dgAds.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAllAdUrls"] = "true";
                dgAds.AllowPaging = true;
                btnViewAll.Text = "View All";
            }

            MyDataBind();
        }
        
        /// <summary>
        /// Gets all the urls as well as the group they belong to, which are used for checking fiddler ad errors.
        /// </summary>
        /// <returns></returns>
        ArrayList GetUrlObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList urlNodes = xDoc.SelectNodes(Paths.GetAllAdsUrlNodes());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in urlNodes)
            {
                urlObjects.Add(new urlAdsObject(urlNode.InnerText, urlNode.Attributes["group"].Value));
            }
            return urlObjects;
        }

        /// <summary>
        /// Inserts a new url
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddUrl_Click(object sender, EventArgs e)
        {
            InsertUrl();
            MyDataBind();
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgUrls_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgAds.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrl_Click);
                e.Item.Cells[2].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Deletes a particular url on the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgAds.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[dc.IndexOf(dc["Url"])].Text;
            string group = dgi.Cells[dc.IndexOf(dc["Group"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetAdNode());

            foreach (XmlNode urlNode in node.ChildNodes)
                if (url == urlNode.InnerText && group == urlNode.Attributes["group"].Value)
                    node.RemoveChild(urlNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }

        /// <summary>
        /// Inserts a url into the config file
        /// </summary>
        public void InsertUrl()
        {
            string url = tbAddUrl.Text;
            string group = tbGroup.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode node = xDoc.SelectSingleNode(Paths.GetAdNode());
            XmlElement newNode = xDoc.CreateElement("url");
            newNode.InnerText = url;
            XmlAttribute groupAttribute = xDoc.CreateAttribute("group");
            groupAttribute.Value = group;
            newNode.Attributes.Append(groupAttribute);
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
        }
    }

    /// <summary>
    /// Class for storing urls used for fiddler ads
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class urlAdsObject
    {
        string url;
        string group;

        public urlAdsObject(string url, string group)
        {
            this.url = url;
            this.group = group;
        }
        public string Url
        {
            get { return url; }
        }
        public string Group
        {
            get { return group; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Ads.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Ads {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgAds control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgAds;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblAddUrlTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrlTitle;
        
        /// <summary>
        /// lblAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrl;
        
        /// <summary>
        /// tbAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddUrl;
        
        /// <summary>
        /// rfvAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvAddUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// lblGroupInstructions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroupInstructions;
        
        /// <summary>
        /// btnAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddUrl;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\DataSet1.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private NewSelectCommandDataTable tableNewSelectCommand;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["NewSelectCommand"] != null)) {
                    base.Tables.Add(new NewSelectCommandDataTable(ds.Tables["NewSelectCommand"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NewSelectCommandDataTable NewSelectCommand {
            get {
                return this.tableNewSelectCommand;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["NewSelectCommand"] != null)) {
                    base.Tables.Add(new NewSelectCommandDataTable(ds.Tables["NewSelectCommand"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableNewSelectCommand = ((NewSelectCommandDataTable)(base.Tables["NewSelectCommand"]));
            if ((initTable == true)) {
                if ((this.tableNewSelectCommand != null)) {
                    this.tableNewSelectCommand.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNewSelectCommand = new NewSelectCommandDataTable();
            base.Tables.Add(this.tableNewSelectCommand);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNewSelectCommand() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void NewSelectCommandRowChangeEventHandler(object sender, NewSelectCommandRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NewSelectCommandDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnDay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandDataTable() {
                this.TableName = "NewSelectCommand";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewSelectCommandDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NewSelectCommandDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandRow this[int index] {
                get {
                    return ((NewSelectCommandRow)(this.Rows[index]));
                }
            }
            
            public event NewSelectCommandRowChangeEventHandler NewSelectCommandRowChanging;
            
            public event NewSelectCommandRowChangeEventHandler NewSelectCommandRowChanged;
            
            public event NewSelectCommandRowChangeEventHandler NewSelectCommandRowDeleting;
            
            public event NewSelectCommandRowChangeEventHandler NewSelectCommandRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNewSelectCommandRow(NewSelectCommandRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandRow AddNewSelectCommandRow(int Count, System.DateTime Day) {
                NewSelectCommandRow rowNewSelectCommandRow = ((NewSelectCommandRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Count,
                        Day};
                rowNewSelectCommandRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNewSelectCommandRow);
                return rowNewSelectCommandRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NewSelectCommandDataTable cln = ((NewSelectCommandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NewSelectCommandDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCount = base.Columns["Count"];
                this.columnDay = base.Columns["Day"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnCount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandRow NewNewSelectCommandRow() {
                return ((NewSelectCommandRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NewSelectCommandRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NewSelectCommandRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NewSelectCommandRowChanged != null)) {
                    this.NewSelectCommandRowChanged(this, new NewSelectCommandRowChangeEvent(((NewSelectCommandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NewSelectCommandRowChanging != null)) {
                    this.NewSelectCommandRowChanging(this, new NewSelectCommandRowChangeEvent(((NewSelectCommandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NewSelectCommandRowDeleted != null)) {
                    this.NewSelectCommandRowDeleted(this, new NewSelectCommandRowChangeEvent(((NewSelectCommandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NewSelectCommandRowDeleting != null)) {
                    this.NewSelectCommandRowDeleting(this, new NewSelectCommandRowChangeEvent(((NewSelectCommandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNewSelectCommandRow(NewSelectCommandRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NewSelectCommandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NewSelectCommandRow : global::System.Data.DataRow {
            
            private NewSelectCommandDataTable tableNewSelectCommand;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewSelectCommandRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNewSelectCommand = ((NewSelectCommandDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    try {
                        return ((int)(this[this.tableNewSelectCommand.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'NewSelectCommand\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewSelectCommand.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Day {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNewSelectCommand.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'NewSelectCommand\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewSelectCommand.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableNewSelectCommand.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableNewSelectCommand.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tableNewSelectCommand.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tableNewSelectCommand.DayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NewSelectCommandRowChangeEvent : global::System.EventArgs {
            
            private NewSelectCommandRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandRowChangeEvent(NewSelectCommandRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewSelectCommandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Test.Common.Utilities.UrlBasedTests.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NewSelectCommandTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewSelectCommandTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NewSelectCommand";
            tableMapping.ColumnMappings.Add("Count", "Count");
            tableMapping.ColumnMappings.Add("Day", "Day");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["UrlBasedTestsConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT COUNT(*) AS Count, Day FROM UrlFailures GROUP BY Day";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.NewSelectCommandDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.NewSelectCommandDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.NewSelectCommandDataTable dataTable = new DataSet1.NewSelectCommandDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Default.aspx.cs ===
﻿using System;
using System.Web.UI.WebControls;
using System.Collections;
using System.Data;
using System.Xml;


namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class will show the errors that occurred recently from a url based test
    /// </summary>
    public partial class _Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
                Session["FilterErrors"] = null;

            MyDataBind();
            MaintainScrollPositionOnPostBack = true;
        }
        
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList alErrorObjects = GetErrorObjects();
            dgErrors.DataSource = alErrorObjects;
            dgErrors.DataBind();

            string Date = Paths.GetDateOfFile(Paths.GetErrorsFile());
            lblDate.Text = "Last run date = " + Date;
        }

        /// <summary>
        /// Gets all the urls that recently had errors
        /// </summary>
        /// <returns>An arraylist of errors</returns>
        ArrayList GetErrorObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetErrorsFile());
            XmlNodeList Errors = xDoc.SelectNodes(Paths.GetErrorNodes()); //Files need to be on the server in order to run the website. See documentation for details.
            ArrayList errorObjects = new ArrayList();
            foreach (XmlNode errorNode in Errors)
            {
                errorObjects.Add(new ErrorObject(errorNode.Attributes["Url"].Value, errorNode.Attributes["Group"].Value, errorNode.Attributes["StatusCode"].Value, errorNode.Attributes["UnwantedStrings"].Value, errorNode.Attributes["ExpectedStrings"].Value, errorNode.Attributes["FiddlerError"].Value));
            }
            return errorObjects;
        }

        /// <summary>
        /// Gets all the urls that recently had errors and are filtered according to different criteria
        /// </summary>
        /// <returns>An arraylist of errors</returns>
        ArrayList GetErrorObjectsFilter(string UrlText, string Group1, string StatusCode1, string UnwantedStrings1, string ExpectedStrings1)
        {
            string filter = string.Empty;

            if(UrlText != "")
                filter += "@Url='" + UrlText + "'";
            if (Group1 != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@Group='" + Group1 + "'";
            }
            if (StatusCode1 != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@StatusCode='" + StatusCode1 + "'";
            }
            if (UnwantedStrings1 != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@UnwantedStrings='" + UnwantedStrings1 + "'";
            }
            if (ExpectedStrings1 != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@ExpectedStrings='" + ExpectedStrings1 + "'";
            }

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetErrorsFile());
            XmlNodeList Errors;
            if(filter != "")
                Errors = xDoc.SelectNodes(Paths.GetErrorNodes() + "[" + filter + "]");
            else
                Errors = xDoc.SelectNodes(Paths.GetErrorNodes());
            ArrayList errorObjects = new ArrayList();
            foreach (XmlNode errorNode in Errors)
            {
                errorObjects.Add(new ErrorObject(errorNode.Attributes["Url"].Value, errorNode.Attributes["Group"].Value, errorNode.Attributes["StatusCode"].Value, errorNode.Attributes["UnwantedStrings"].Value, errorNode.Attributes["ExpectedStrings"].Value, errorNode.Attributes["FiddlerError"].Value));
            }
            return errorObjects;
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgFailed_DataBound(object sender, DataGridItemEventArgs e)
        {

            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgErrors.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnKnownIssue = new Button();
                btnKnownIssue.ID = "btnKnownIssue";
                btnKnownIssue.Text = "Known Issue";
                btnKnownIssue.CausesValidation = false;
                btnKnownIssue.Click += new System.EventHandler(btnKnownIssueUrl_Click);
                e.Item.Cells[5].Controls.Add(btnKnownIssue);
            }
        }

        /// <summary>
        /// Button on the datagrid for marking an error as a known issue
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnKnownIssueUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgErrors.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[dc.IndexOf(dc["Url"])].Text;
            string StatusCode = dgi.Cells[dc.IndexOf(dc["StatusCode"])].Text;
            string UnwantedStrings = dgi.Cells[dc.IndexOf(dc["UnwantedStrings"])].Text;
            string ExpectedStrings = dgi.Cells[dc.IndexOf(dc["ExpectedStrings"])].Text;
            Paths.InsertKnownIssue(url, StatusCode, UnwantedStrings, ExpectedStrings);
        }

        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgErrors.CurrentPageIndex = e.NewPageIndex;

            if(Session["FilterErrors"] != null)
                MyDataBindFilter();
            else
                MyDataBind();
        }

        /// <summary>
        /// Binds data to a datagrid according to filters the user specified on the webpage
        /// </summary>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            Session["FilterErrors"] = "true";
            MyDataBindFilter();
        }

        /// <summary>
        /// Binds data to a datagrid according to filters the user specified on the webpage
        /// </summary>
        void MyDataBindFilter()
        {
            string url = tbUrl.Text;
            string group = tbGroup.Text;
            string statusCode = tbStatusCode.Text;
            string unwantedStrings = tbUnwantedStrings.Text;
            string expectedStrings = tbExpectedStrings.Text;

            ArrayList alErrorObjects = GetErrorObjectsFilter(url, group, statusCode, unwantedStrings, expectedStrings);
            dgErrors.DataSource = alErrorObjects;
            dgErrors.DataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if(Session["ViewAll"] == null)
            {
                Session["ViewAll"] = "true";
            }
            if(Session["ViewAll"].ToString() == "true")
            {
                Session["ViewAll"] = "false";
                dgErrors.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAll"] = "true";
                dgErrors.AllowPaging = true;
                btnViewAll.Text = "View All";
            }

            if (Session["FilterErrors"] != null)
                MyDataBindFilter();
            else
                MyDataBind();
        }
    }

    /// <summary>
    /// This class is used for storing an error for a particular url, and why the error occurred
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class ErrorObject
    {
        string url;
        string group;
        string statusCode;
        string unwantedStrings;
        string expectedStrings;
        string fiddlerError;

        public ErrorObject(string Url, string Group, string StatusCode, string UnwantedStrings, string expectedStrings, string fiddlerError)
        {
            this.url = Url;
            this.group = Group;
            this.statusCode = StatusCode;
            this.unwantedStrings = UnwantedStrings;
            this.expectedStrings = expectedStrings;
            this.fiddlerError = fiddlerError;
        }

        public string Url
        {
            get { return url; }
        }
        public string Group
        {
            get { return group; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
        public string UnwantedStrings
        {
            get { return unwantedStrings; }
        }
        public string ExpectedStrings
        {
            get { return expectedStrings; }
        }
        public string FiddlerError
        {
            get { return fiddlerError; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\ExpectedText.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections;
using System.Xml;
using System.Data;


namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class will be used for viewing or updating expected text (text that's expected to occur on a url's html)
    /// </summary>
    public partial class ExpectedText : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyExpectedResponseTextDataBind();
            MaintainScrollPositionOnPostBack = true;
        }

        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyExpectedResponseTextDataBind()
        {
            ArrayList ExpectedResponseTextObjects = GetExpectedResponseTextObjects();
            dgExpectedText.DataSource = ExpectedResponseTextObjects;
            dgExpectedText.DataBind();
        }

        /// <summary>
        /// Gets the expected text for each url from an xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetExpectedResponseTextObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            ArrayList ExpectedResponseTextObjects = new ArrayList();
            XmlNodeList NodeIncludedStrings = xDoc.SelectNodes(Paths.GetExpectedResponseTextUrlNodes());
            string url = string.Empty;
            string includedText = string.Empty;
            foreach (XmlNode node in NodeIncludedStrings)
            {
                url = node.Attributes["value"].Value;
                foreach (XmlNode TextNode in node.ChildNodes)
                {
                    includedText = TextNode.InnerText.ToString();
                    ExpectedResponseTextObjects.Add(new ExpectedStringsObject(url, includedText));
                }
            }
            return ExpectedResponseTextObjects;
        }

        /// <summary>
        /// Adding new expected text to the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            string url = tbUrl.Text;
            string expectedText = tbExpectedText.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetExpectedResponseTextUrlNodes());
            bool urlExists = false;

            foreach (XmlNode xNode in nodes)
            {
                if (xNode.Attributes["value"].Value == url)
                    urlExists = true;
            }
            if (!urlExists)
            {
                XmlNode expectedResponseNode = xDoc.SelectSingleNode(Paths.GetExpectedResponseTextNodes());
                XmlElement newUrlNode = xDoc.CreateElement("url");
                newUrlNode.SetAttribute("value", url);
                expectedResponseNode.AppendChild(newUrlNode);
            }
            XmlNode node = xDoc.SelectSingleNode("//ResponseText/ExpectedResponseText/url[@value='" + url + "']");
            XmlElement newNode = xDoc.CreateElement("Text");
            newNode.InnerText = expectedText;
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExpectedResponseTextDataBind();
        }

        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgExpectedText.CurrentPageIndex = e.NewPageIndex;
            MyExpectedResponseTextDataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if (Session["ViewAllExpectedText"] == null)
            {
                Session["ViewAllExpectedText"] = "true";
            }
            if (Session["ViewAllExpectedText"].ToString() == "true")
            {
                Session["ViewAllExpectedText"] = "false";
                dgExpectedText.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAllExpectedText"] = "true";
                dgExpectedText.AllowPaging = true;
                btnViewAll.Text = "View All";
            }
            MyExpectedResponseTextDataBind();  
        }

        /// <summary>
        ///  Delete all instances of this url from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click1(object sender, EventArgs e)
        {
            string Url = tbDeleteUrl.Text;
            string ExpectedText = tbDeleteExpectedText.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode NodeExpectedText = xDoc.SelectSingleNode(Paths.GetExpectedResponseTextNodes());

            foreach (XmlNode node in NodeExpectedText)
            {
                if (Url == node.Attributes["value"].Value)
                {
                    NodeExpectedText.RemoveChild(node);
                }
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExpectedResponseTextDataBind();
        }

        /// <summary>
        /// Delete all instances of this expected text from an xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteText_Click(object sender, EventArgs e)
        {
            string ExpectedText = tbDeleteExpectedText.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList NodeIncludedStrings = xDoc.SelectNodes(Paths.GetExpectedResponseTextUrlNodes());

            foreach (XmlNode node in NodeIncludedStrings)
            {
                foreach (XmlNode urlNode in node.ChildNodes)
                    if (ExpectedText == urlNode.InnerText)
                        node.RemoveChild(urlNode);
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExpectedResponseTextDataBind();
        }

        /// <summary>
        /// Delete instances where both the url and expected text occur together in the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteOnlyBoth_Click(object sender, EventArgs e)
        {
            string Url = tbDeleteUrl.Text;
            string ExpectedText = tbDeleteExpectedText.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList NodeIncludedStrings = xDoc.SelectNodes(Paths.GetExpectedResponseTextUrlNodes());

            foreach (XmlNode node in NodeIncludedStrings)
            {
                if (Url == node.Attributes["value"].Value)
                {
                    foreach (XmlNode urlNode in node.ChildNodes)
                        if (ExpectedText == urlNode.InnerText)
                            node.RemoveChild(urlNode);
                }
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExpectedResponseTextDataBind();
        }
    }

    /// <summary>
    /// This class is used for storing expected string objects
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class ExpectedStringsObject
    {
        public string expectedText;
        public string url;

        public ExpectedStringsObject(string url, string expectedText)
        {
            this.expectedText = expectedText;
            this.url = url;
        }
        public string Url
        {
            get { return url; }
        }
        public string ExpectedText
        {
            get { return expectedText; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\ExpectedText.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class ExpectedText {
        
        /// <summary>
        /// lblExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExpectedText;
        
        /// <summary>
        /// dgExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgExpectedText;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblNewExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNewExpectedText;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// rfvUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvUrl;
        
        /// <summary>
        /// lblAddExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddExpectedText;
        
        /// <summary>
        /// tbExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExpectedText;
        
        /// <summary>
        /// rfvExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvExpectedText;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
        
        /// <summary>
        /// lblDeleteExpectedTextTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteExpectedTextTitle;
        
        /// <summary>
        /// lblDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteUrl;
        
        /// <summary>
        /// tbDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbDeleteUrl;
        
        /// <summary>
        /// btnDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteUrl;
        
        /// <summary>
        /// lblDeleteExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteExpectedText;
        
        /// <summary>
        /// tbDeleteExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbDeleteExpectedText;
        
        /// <summary>
        /// btnDeleteText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteText;
        
        /// <summary>
        /// btnDeleteOnlyBoth control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteOnlyBoth;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Default.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class _Default {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// lblDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDate;
        
        /// <summary>
        /// dgErrors control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgErrors;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblFilter control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFilter;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// lblStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStatusCode;
        
        /// <summary>
        /// tbStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbStatusCode;
        
        /// <summary>
        /// lblUnwantedStrings control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUnwantedStrings;
        
        /// <summary>
        /// tbUnwantedStrings control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUnwantedStrings;
        
        /// <summary>
        /// lblExpectedStrings control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExpectedStrings;
        
        /// <summary>
        /// tbExpectedStrings control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExpectedStrings;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\FiddlerTests.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class FiddlerTests {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgFiddlerUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgFiddlerUrls;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblFilter control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFilter;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
        
        /// <summary>
        /// lblAddUrlTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrlTitle;
        
        /// <summary>
        /// lblAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrl;
        
        /// <summary>
        /// tbAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// btnAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddUrl;
        
        /// <summary>
        /// lblAddMultipleUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddMultipleUrls;
        
        /// <summary>
        /// tbNewUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbNewUrls;
        
        /// <summary>
        /// lblGp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGp;
        
        /// <summary>
        /// tbGp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGp;
        
        /// <summary>
        /// btnAddMultipleUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddMultipleUrls;
        
        /// <summary>
        /// lblHttpStatusCodeErrors control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblHttpStatusCodeErrors;
        
        /// <summary>
        /// dgHttpStatusCodeErrors control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgHttpStatusCodeErrors;
        
        /// <summary>
        /// lblAddErrorTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddErrorTitle;
        
        /// <summary>
        /// lblAddError control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddError;
        
        /// <summary>
        /// tbAddError control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddError;
        
        /// <summary>
        /// btnAddError control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddError;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\History.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Data;
using System.Configuration;
using System.Data.SqlClient;
using Microsoft.Reporting.WebForms;


namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class will show the history of all the errors that
    /// have occurred from url based testing
    /// </summary>
    public partial class History : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                cldStartDate.SelectedDate = DateTime.Today;
                cldEndDate.SelectedDate = DateTime.Today;
                InsertGroups();
                MyDataBind();
            }
            MaintainScrollPositionOnPostBack = true;
        }

        /// <summary>
        /// Updates the graph based on the dates selected
        /// </summary>
        void UpdateGraph()
        {
            DataTable dt = GetFailuresByDay();
            dt = GetFailuresByAllDays(dt);
            ReportDataSource rds = new ReportDataSource("DataSet1_NewSelectCommand", dt);
            ReportViewer1.LocalReport.DataSources.Clear();
            ReportViewer1.LocalReport.DataSources.Add(rds);
            ReportViewer1.LocalReport.Refresh();
            lblDates.Text = cldStartDate.SelectedDate.ToLongDateString();
            if (cldStartDate.SelectedDate.ToLongDateString() != cldEndDate.SelectedDate.ToLongDateString())
                lblDates.Text += " - " + cldEndDate.SelectedDate.ToLongDateString();
        }

        /// <summary>
        /// This method gets all the groups from the xml file
        /// and adds them to a drop down list
        /// </summary>
        void InsertGroups()
        {
            string group = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());

            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetUrlGroupNodes());
            ddlGroups.Items.Add("Show All");
            foreach (XmlNode node in nodes)
            {
                group = node.Attributes["group"].Value;
                ddlGroups.Items.Add(group);
            }
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            dgFailures.DataSource = GetFailures();
            dgFailures.DataBind();
            UpdateGraph();
        }

        /// <summary>
        /// Gets all the errors that have occurred between the selected dates
        /// </summary>
        /// <returns></returns>
        public DataTable GetFailures()
        {
            string startDate = cldStartDate.SelectedDate.ToShortDateString();
            string endDate = cldEndDate.SelectedDate.AddDays(1).ToShortDateString();
            string whereClause = " where [Date] BETWEEN '" + startDate + "' AND '" + endDate + "' ";
            string group = ddlGroups.SelectedValue;
            if (group != "Show All")
                whereClause += "and UrlGroup = '" + group + "' ";
            DataTable dt = new DataTable();
            dt = ExecuteDataSet("select Url, COUNT(*) as [Count], StatusCode, UnwantedString, ExpectedString from [UrlBasedTests].[dbo].[UrlFailures]" + whereClause + "group by Url, StatusCode, UnwantedString, ExpectedString order by [Count] desc").Tables[0];
            
            return dt;
        }

        /// <summary>
        /// Gets all the errors that have occurred between the selected dates
        /// </summary>
        /// <returns></returns>
        public DataTable GetFailuresByDay()
        {
            string startDate = cldStartDate.SelectedDate.ToShortDateString();
            string endDate = cldEndDate.SelectedDate.AddDays(1).ToShortDateString();
            string whereClause = " where [Date] BETWEEN '" + startDate + "' AND '" + endDate + "' ";
            string group = ddlGroups.SelectedValue;
            if (group != "Show All")
                whereClause += "and UrlGroup = '" + group + "' ";
            DataTable dt = new DataTable();
            dt = ExecuteDataSet("SELECT COUNT(*) AS Count, Day from [UrlBasedTests].[dbo].[UrlFailures]" + whereClause + "GROUP BY Day").Tables[0];

            Console.WriteLine(dt.Columns.Count);
            Console.WriteLine(dt.Rows.Count);

            return dt;
        }

        /// <summary>
        /// Gets all the errors that have occurred between the selected dates
        /// </summary>
        /// <returns></returns>
        public DataTable GetFailuresByAllDays(DataTable dtOriginalTable_)
        {
            DateTime startDate = cldStartDate.SelectedDate;
            DateTime endDate = cldEndDate.SelectedDate.AddDays(1);

            DataColumn myDataColumn;
            DataRow myDataRow;

            DataTable dtNewTable = new DataTable();

            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.Int32");
            myDataColumn.ColumnName = "Count";
            dtNewTable.Columns.Add(myDataColumn);

            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.String");
            myDataColumn.ColumnName = "Day";
            dtNewTable.Columns.Add(myDataColumn);

            int rowCount = dtOriginalTable_.Rows.Count;
            int columnCount = dtOriginalTable_.Columns.Count;

            Console.WriteLine(rowCount);
            Console.WriteLine(columnCount);

            DataRow[] allRows = dtOriginalTable_.Select();

            while (startDate < endDate)
            {
                myDataRow = dtNewTable.NewRow();
                myDataRow["Count"] = 0;
                myDataRow["Day"] = startDate.ToShortDateString();
                for (int i = 0; i < rowCount; i++)
                {
                    if (allRows[i]["Day"].ToString() == startDate.ToString())
                        myDataRow["Count"] = allRows[i]["Count"];
                }
                
                dtNewTable.Rows.Add(myDataRow);
                startDate = startDate.AddDays(1);
            }

            return dtNewTable;
        }

        /// <summary>
        /// Executes dataset given the sql command
        /// </summary>
        /// <param name="sqlCommand">sql statement to be executed</param>
        /// <returns></returns>
        public DataSet ExecuteDataSet(string sqlCommand)
        {
            using (SqlConnection conn = GetConnection())
            {
                SqlCommand cmd = new SqlCommand(sqlCommand, conn);
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                try
                {
                    da.Fill(ds);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message + ex.StackTrace);
                }

                return ds;
            }
        }
        
        /// <summary>
        /// Gets connection to the database
        /// </summary>
        /// <returns></returns>
        SqlConnection GetConnection()
        {
            string connString = ConfigurationManager.AppSettings["ConnectionString"];
            return new SqlConnection(connString);
        }

        /// <summary>
        /// Binds data to the datagrid according to the group selected in the drop down list
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void ddlGroups_SelectedIndexChanged(object sender, EventArgs e)
        {
            MyDataBind();
        }

        /// <summary>
        /// Binds data to the datagrid according to the start date selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void cldStartDate_SelectionChanged(object sender, EventArgs e)
        {
            MyDataBind();
        }

        /// <summary>
        /// Binds data to the datagrid according to the end date selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void cldEndDate_SelectionChanged(object sender, EventArgs e)
        {
            MyDataBind();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\FiddlerTests.aspx.cs ===
﻿using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Xml;

// todo: be able to filter by group

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This page is used for viewing and updating the urls and http status code errors
    /// that are used when url based test is used with fiddler.
    /// </summary>
    public partial class FiddlerTests : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyDataBind();
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList urlObjects = GetUrlObjects();
            dgFiddlerUrls.DataSource = urlObjects;
            dgFiddlerUrls.DataBind();
            ArrayList errorObjects = GetErrorObjects();
            dgHttpStatusCodeErrors.DataSource = errorObjects;
            dgHttpStatusCodeErrors.DataBind();
        }
        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgFiddlerUrls_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgFiddlerUrls.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrl_Click);
                e.Item.Cells[2].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgHttpStatusCodeErrors_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();

                ArrayList al = (ArrayList)dgHttpStatusCodeErrors.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteError_Click);
                e.Item.Cells[1].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Gets all the urls that are to be tested with fiddler
        /// </summary>
        /// <returns></returns>
        ArrayList GetUrlObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList Urls = xDoc.SelectNodes(Paths.GetFiddlerUrlNode());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in Urls)
            {
                urlObjects.Add(new urlFiddlerObject(urlNode.InnerText, urlNode.ParentNode.Attributes["group"].Value));
            }
            return urlObjects;
        }

        /// <summary>
        /// Gets all the urls that are to be tested with fiddler, filtered by url
        /// </summary>
        /// <returns></returns>
        ArrayList GetUrlObjects(string url)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList Urls = xDoc.SelectNodes(Paths.GetFiddlerUrlNode());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in Urls)
            {
                if (url == urlNode.InnerText)
                {
                    urlObjects.Add(new urlAdsObject(urlNode.InnerText, urlNode.ParentNode.Attributes["group"].Value));
                }
            }
            return urlObjects;
        }

        /// <summary>
        /// Inserts a new urls into the xml file that is to be used in fiddler testing
        /// </summary>
        /// <param name="url">The new url</param>
        /// <param name="group">The group this url belongs to</param>
        public void InsertUrl(string url, string group)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetFiddlerUrlGroupNodes());
            if (group == "")
                group = "none";
            bool groupExists = false;
            foreach (XmlNode xNode in nodes)
            {
                if (xNode.Attributes["group"].Value == group)
                    groupExists = true;
            }
            if (!groupExists)
            {
                XmlNode urlNode = xDoc.SelectSingleNode("//ResponseText/fiddlerUrl");
                XmlElement newGroupNode = xDoc.CreateElement("urlGroup");
                newGroupNode.SetAttribute("group", group);
                urlNode.AppendChild(newGroupNode);
            }
            XmlNode node = xDoc.SelectSingleNode("//ResponseText/fiddlerUrl/urlGroup[@group='" + group + "']");
            XmlElement newNode = xDoc.CreateElement("url");
            newNode.InnerText = url;
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
        }

        /// <summary>
        /// Deletes a url from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgFiddlerUrls.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[dc.IndexOf(dc["Url"])].Text;
            string group = dgi.Cells[dc.IndexOf(dc["Group"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetFiddlerUrlGroupNodes());
            foreach (XmlNode node in nodes)
            {
                if (group == node.Attributes["group"].Value)
                {
                    foreach (XmlNode urlNode in node.ChildNodes)
                    {
                        if (url == urlNode.InnerText.ToString())
                            node.RemoveChild(urlNode);
                    }
                }
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }

        /// <summary>
        /// Deletes an http status code error from the xml file
        /// so that it won't be checked for when the fiddler test runs
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteError_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgFiddlerUrls.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[dc.IndexOf(dc["Url"])].Text;
            string group = dgi.Cells[dc.IndexOf(dc["Group"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetFiddlerHttpStatusCodeErrorsNode());

            foreach (XmlNode urlNode in node.ChildNodes)
                if (url == urlNode.InnerText && group == urlNode.Attributes["group"].Value)
                    node.RemoveChild(urlNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }

        /// <summary>
        /// Gets all the http status code errors to be checked for in fidder
        /// testing from the xml file.
        /// </summary>
        /// <returns></returns>
        ArrayList GetErrorObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode urlNodesParent = xDoc.SelectSingleNode(Paths.GetFiddlerHttpStatusCodeErrorsNode());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in urlNodesParent.ChildNodes)
            {
                urlObjects.Add(new urlFiddlerErrorObject(urlNode.InnerText));
            }
            return urlObjects;
        }

        /// <summary>
        /// Filters the datagrid of urls by url
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            string url = tbUrl.Text;
            ArrayList urlObjects = GetUrlObjects(url);
            dgFiddlerUrls.DataSource = urlObjects;
            dgFiddlerUrls.DataBind();
        }

        /// <summary>
        /// Adds a new url to the xml file that's to be used in fiddler testing
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddUrl_Click(object sender, EventArgs e)
        {
            if (tbAddUrl.Text == "")
                return;
            string url = tbAddUrl.Text;
            string group = tbGroup.Text;
            InsertUrl(url, group);
            MyDataBind();
        }

        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgFiddlerUrls.CurrentPageIndex = e.NewPageIndex;
            MyDataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if (Session["ViewAllFiddlerUrls"] == null)
            {
                Session["ViewAllFiddlerUrls"] = "true";
            }
            if (Session["ViewAllFiddlerUrls"].ToString() == "true")
            {
                Session["ViewAllFiddlerUrls"] = "false";
                dgFiddlerUrls.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAllFiddlerUrls"] = "true";
                dgFiddlerUrls.AllowPaging = true;
                btnViewAll.Text = "View All";
            }

            MyDataBind();
        }

        /// <summary>
        /// Adds a new http status code error to the xml file that's to be used in fiddler testing
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddError_Click(object sender, EventArgs e)
        {
            if (this.tbAddError.Text == "")
                return;
            InsertError();
            MyDataBind();
        }

        /// <summary>
        /// Adds a new http status code error to the xml file that's to be used in fiddler testing
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void InsertError()
        {
            string error = this.tbAddError.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode node = xDoc.SelectSingleNode(Paths.GetFiddlerHttpStatusCodeErrorsNode());
            XmlElement newNode = xDoc.CreateElement("error");
            newNode.InnerText = error;
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
        }

        /// <summary>
        /// Adds a muliple urls to the xml file that are to be checked in fiddler testing
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddMultipleUrls_Click(object sender, EventArgs e)
        {
            string[] urls = tbNewUrls.Text.ToString().Split("\n".ToCharArray());
            string group = tbGp.Text;
            foreach (string url in urls)
            {
                string newUrl = url.Replace("\r", "");
                InsertUrl(newUrl, group);
            }
            MyDataBind();
        }
    }

    /// <summary>
    /// This class is used to store the urls to be used in Fiddler testing
    /// This is used to bind the datasource to the datagrid
    /// </summary>
    class urlFiddlerObject
    {
        string url;
        string group;

        public urlFiddlerObject(string url, string group)
        {
            this.url = url;
            this.group = group;
        }
        public string Url
        {
            get { return url; }
        }
        public string Group
        {
            get { return group; }
        }
    }

    /// <summary>
    /// This class is used to store http status code errors
    /// This is used to bind the datasource to the datagrid
    /// </summary>
    class urlFiddlerErrorObject
    {
        string error;

        public urlFiddlerErrorObject(string error)
        {
            this.error = error;
        }
        public string Error
        {
            get { return error; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\KnownIssues.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using System.Xml;

namespace Test.Common.Utilities.UrlBasedTests
{
    public partial class KnownIssues : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyDataBind();
            MaintainScrollPositionOnPostBack = true;
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList urlObjects = GetKnownIssuesObjects();
            dgKnownIssues.DataSource = urlObjects;
            dgKnownIssues.DataBind();
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgKnownIssues_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgKnownIssues.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrl_Click);
                e.Item.Cells[4].Controls.Add(btnDelete);
            }
        }
        
        /// <summary>
        /// Deletes a known issue from a row in the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgKnownIssues.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[dc.IndexOf(dc["Value"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetKnownIssuesNode());

            foreach (XmlNode urlNode in node.ChildNodes)
                if (url == urlNode.Attributes["value"].Value)
                    node.RemoveChild(urlNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }
        
        /// <summary>
        /// Gets all the known issues from the xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetKnownIssuesObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList Urls = xDoc.SelectNodes(Paths.GetKnownIssuesUrlNodes());
            ArrayList knownIssueObjects = new ArrayList();
            string ExcludedResponseText = string.Empty;
            string ExpectedResponseText = string.Empty;
            foreach (XmlNode knownIssueNode in Urls)
            {
                ExcludedResponseText = string.Empty;
                ExpectedResponseText = string.Empty;
                foreach (XmlNode childNode in knownIssueNode.ChildNodes)
                {
                    if (childNode.Name == "ExcludedResponseText")
                        foreach (XmlNode textNode in childNode.ChildNodes)
                        {
                            ExcludedResponseText += textNode.InnerText + "<br>";
                        }
                    else if (childNode.Name == "ExpectedResponseText")
                        foreach (XmlNode textNode in childNode.ChildNodes)
                        {
                            ExpectedResponseText += textNode.InnerText + "<br>";
                        }
                }
                knownIssueObjects.Add(new KnownIssueObject(knownIssueNode.Attributes["value"].Value, knownIssueNode.Attributes["StatusCode"].Value, ExcludedResponseText, ExpectedResponseText));
            }
            return knownIssueObjects;
        }

        /// <summary>
        /// Inserts a new known issue into the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            string url = tbUrl.Text;
            string statusCode = tbStatusCode.Text;
            string excludeText = tbExcludeText.Text;
            string expectedText = tbExpectedText.Text;

            Paths.InsertKnownIssue(url, statusCode, excludeText, expectedText);
            MyDataBind();
        }
    }

    /// <summary>
    /// class used to store known objects
    /// </summary>
    class KnownIssueObject
    {
        string value;
        string statusCode;
        string excludedResponseText;
        string expectedResponseText;

        public KnownIssueObject(string value, string statusCode, string excludedResponseText, string expectedResponseText)
        {
            this.value = value;
            this.statusCode = statusCode;
            this.excludedResponseText = excludedResponseText;
            this.expectedResponseText = expectedResponseText;
        }

        public string Value
        {
            get { return value; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
        public string ExcludedResponseText
        {
            get { return excludedResponseText; }
        }
        public string ExpectedResponseText
        {
            get { return expectedResponseText; }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\KnownIssues.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class KnownIssues {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgKnownIssues control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgKnownIssues;
        
        /// <summary>
        /// lblNewKnownIssue control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNewKnownIssue;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// rfvUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvUrl;
        
        /// <summary>
        /// lblStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStatusCode;
        
        /// <summary>
        /// tbStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbStatusCode;
        
        /// <summary>
        /// lblExcludeText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExcludeText;
        
        /// <summary>
        /// tbExcludeText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExcludeText;
        
        /// <summary>
        /// lblExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExpectedText;
        
        /// <summary>
        /// tbExpectedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExpectedText;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\History.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class History {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// lblGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroups;
        
        /// <summary>
        /// ddlGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlGroups;
        
        /// <summary>
        /// lblStartDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStartDate;
        
        /// <summary>
        /// cldStartDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Calendar cldStartDate;
        
        /// <summary>
        /// lblEndDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEndDate;
        
        /// <summary>
        /// cldEndDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Calendar cldEndDate;
        
        /// <summary>
        /// lblDates control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDates;
        
        /// <summary>
        /// ReportViewer1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Microsoft.Reporting.WebForms.ReportViewer ReportViewer1;
        
        /// <summary>
        /// ObjectDataSource2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ObjectDataSource ObjectDataSource2;
        
        /// <summary>
        /// SqlDataSource1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.SqlDataSource SqlDataSource1;
        
        /// <summary>
        /// dgFailures control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgFailures;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Machines.aspx.cs ===
﻿using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Xml;
using System.IO;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class allows viewing and editing of the machines used in url based testing
    /// </summary>
    public partial class Machines : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyDataBind();
            MaintainScrollPositionOnPostBack = true;
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList MachineObjects = GetMachineObjects();
            dgMachines.DataSource = MachineObjects;
            dgMachines.DataBind();
        }

        /// <summary>
        /// Gets all machines from the xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetMachineObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            ArrayList MachineObjects = new ArrayList();
            XmlNodeList NodeMachines = xDoc.SelectNodes(Paths.GetMachineNodes());
            string machine = string.Empty;
            string emailTitle = string.Empty;
            string period = string.Empty;
            string fiddlerPeriod = string.Empty;
            string groups = string.Empty;
            string dateOfRun = string.Empty;
            int i = 0;
            foreach (XmlNode node in NodeMachines)
            {
                machine = node.Attributes["name"].Value;
                period = node.Attributes["period"].Value;
                fiddlerPeriod = node.Attributes["fiddlerPeriod"].Value;
                emailTitle = node.Attributes["title"].Value;
                if (node.Attributes["DateOfRun"] != null)
                    dateOfRun = node.Attributes["DateOfRun"].Value;
                else
                    dateOfRun = "";
                i = 0;
                groups = string.Empty;
                foreach (XmlNode GroupNode in node.ChildNodes)
                {
                    if (i > 0)
                        groups += ",";
                    groups += GroupNode.InnerText.ToString();
                    i++;
                }
                MachineObjects.Add(new MachinesObject(machine, groups, period, fiddlerPeriod, emailTitle, dateOfRun));
            }
            return MachineObjects;
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgMachines_DataBound(object sender, DataGridItemEventArgs e)
        {

            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgMachines.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnViewLog = new Button();
                btnViewLog.ID = "btnViewLog";
                btnViewLog.Text = "View Log";
                btnViewLog.CausesValidation = false;
                btnViewLog.Click += new System.EventHandler(btnViewLog_Click);
                e.Item.Cells[6].Controls.Add(btnViewLog);

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDelete_Click);
                e.Item.Cells[7].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// deletes selected machine from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDelete_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgMachines.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string machine = dgi.Cells[dc.IndexOf(dc["Machines"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode groupNode = xDoc.SelectSingleNode(Paths.GetGroupNodes());

            foreach (XmlNode childNode in groupNode)
            {
                if (childNode.Attributes["name"].Value == machine)
                    groupNode.RemoveChild(childNode);
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            MyDataBind();
        }

        /// <summary>
        /// Allows viewing of the selected log file showing url based test
        /// runs for that machine.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewLog_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgMachines.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string machine = dgi.Cells[dc.IndexOf(dc["Machines"])].Text;
            DownloadFile(machine);
        }

        /// <summary>
        /// Method to download logfile from the selected machine
        /// </summary>
        /// <param name="machine"></param>
        void DownloadFile(string machine)
        {
            string filepath = @"\\" + machine + Paths.GetLogPath();
            FileInfo file = new FileInfo(filepath);

            if (file.Exists)
            {
                Response.ClearContent();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);
                Response.AddHeader("Content-Length", file.Length.ToString());
                Response.ContentType = "application/ms-word";
                Response.WriteFile(file.FullName);
                Response.Flush();
                Response.End();
            }
        }

        /// <summary>
        /// Adds a new machines for url based testing to the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            string machine = tbMachine.Text;
            string groups = tbGroups.Text;
            string period = tbPeriod.Text;
            string fiddlerPeriod = tbFiddlerPeriod.Text;
            string emailTitle = tbEmailTitle.Text;
            int intvalue;
            if (!Int32.TryParse(period.ToString(), out intvalue))
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetMachineNodes());
            bool machineExists = false;

            foreach (XmlNode xNode in nodes)
            {
                if (xNode.Attributes["name"].Value == machine)
                    machineExists = true;
            }
            if (!machineExists)
            {
                XmlNode groupNode = xDoc.SelectSingleNode(Paths.GetGroupNodes());
                XmlElement newMachineNode = xDoc.CreateElement("Machine");
                newMachineNode.SetAttribute("name", machine);
                newMachineNode.SetAttribute("title", emailTitle);
                newMachineNode.SetAttribute("period", period);
                newMachineNode.SetAttribute("fiddlerPeriod", fiddlerPeriod);
                newMachineNode.SetAttribute("DateOfRun", fiddlerPeriod);
                string[] groupsArray = groups.Split(',');
                foreach (string grp in groupsArray)
                {
                    XmlElement newGroupNode = xDoc.CreateElement("group");
                    newGroupNode.InnerText = grp;
                    newMachineNode.AppendChild(newGroupNode);
                }
                groupNode.AppendChild(newMachineNode);
            }
            
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }
    }


    /// <summary>
    /// This class is used for storing information about machines used in url based testing
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class MachinesObject
    {
        string machines;
        string groups;
        string period;
        string fiddlerPeriod;
        string emailTitle;
        string dateOfRun;

        public MachinesObject(string machines, string groups, string period, string fiddlerPeriod, string emailTitle, string dateOfRun)
        {
            this.machines = machines;
            this.groups = groups;
            this.period = period;
            this.fiddlerPeriod = fiddlerPeriod;
            this.emailTitle = emailTitle;
            this.dateOfRun = dateOfRun;
        }
        public string Machines
        {
            get { return machines; }
        }
        public string Groups
        {
            get { return groups; }
        }
        public string Period
        {
            get { return period; }
        }
        public string FiddlerPeriod
        {
            get { return fiddlerPeriod; }
        }
        public string EmailTitle
        {
            get { return emailTitle; }
        }
        public string DateOfRun
        {
            get { return dateOfRun; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Passing.aspx.cs ===
﻿using System;
using System.Web.UI.WebControls;
using System.IO;
using System.Collections;
using System.Xml;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class allows viewing of urls that passed in recent runs of url based testing
    /// </summary>
    public partial class Passing : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
                    Session["FilterPassing"] = null;
            MyDataBind();
            MaintainScrollPositionOnPostBack = true;
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList alPassedObjects = GetPassedObjects();
            dgPassed.DataSource = alPassedObjects;
            dgPassed.DataBind();

            string Date = Paths.GetDateOfFile(Paths.GetPassedFile());
            lblDate.Text = "Last run date = " + Date;
        }

        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgPassed.CurrentPageIndex = e.NewPageIndex;
            if (Session["FilterPassing"] != null)
                MyDataBindFilter();
            else
                MyDataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if (Session["ViewAllPassed"] == null)
            {
                Session["ViewAllPassed"] = "true";
            }
            if (Session["ViewAllPassed"].ToString() == "true")
            {
                Session["ViewAllPassed"] = "false";
                dgPassed.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAllPassed"] = "true";
                dgPassed.AllowPaging = true;
                btnViewAll.Text = "View All";
            }

            if (Session["FilterPassing"] != null)
                MyDataBindFilter();
            else
                MyDataBind();
        }

        /// <summary>
        /// Clicking this button allows viewing of the data of passed urls to be filtered
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            Session["FilterPassing"] = "true";
            MyDataBindFilter();
        }

        /// <summary>
        /// Binds data to a datagrid according to filters the user specified on the webpage
        /// </summary>
        void MyDataBindFilter()
        {
            string url = tbUrl.Text;
            string group = tbGroup.Text;
            string statusCode = tbStatusCode.Text;

            ArrayList alPassedObjects = GetPassedObjectsFilter(url, group, statusCode);
            dgPassed.DataSource = alPassedObjects;
            dgPassed.DataBind();
        }

        /// <summary>
        /// Gets all the urls that have passed recent url based tests.
        /// These are stored in an xml file.
        /// </summary>
        /// <returns></returns>
        ArrayList GetPassedObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetPassedFile());
            XmlNodeList Passed = xDoc.SelectNodes(Paths.GetPassingNodes());
            ArrayList passedObjects = new ArrayList();
            foreach (XmlNode passedNode in Passed)
            {
                passedObjects.Add(new PassedObject(passedNode.Attributes["Url"].Value, passedNode.Attributes["Group"].Value, passedNode.Attributes["StatusCode"].Value));
            }
            return passedObjects;
        }

        /// Gets all the urls that have passed recent url based tests, filtered by group and/or status code.
        /// These are stored in an xml file.
        ArrayList GetPassedObjectsFilter(string UrlText, string myGroup, string myStatusCode)
        {
            string filter = string.Empty;

            if (UrlText != "")
                filter += "@Url='" + UrlText + "'";
            if (myGroup != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@Group='" + myGroup + "'";
            }
            if (myStatusCode != "")
            {
                if (filter != "")
                    filter += " and ";
                filter += "@StatusCode='" + myStatusCode + "'";
            }
            

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetPassedFile());
            XmlNodeList Passed;
            if (filter != "")
                Passed = xDoc.SelectNodes(Paths.GetPassingNodes() + "[" + filter + "]");
            else
                Passed = xDoc.SelectNodes(Paths.GetPassingNodes());
            ArrayList passedObjects = new ArrayList();
            foreach (XmlNode passedNode in Passed)
            {
                passedObjects.Add(new PassedObject(passedNode.Attributes["Url"].Value, passedNode.Attributes["Group"].Value, passedNode.Attributes["StatusCode"].Value));
            }
            return passedObjects;
        }
    }

    /// <summary>
    /// This class is used to store information about urls that have passed url based testing
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class PassedObject
    {
        string url;
        string group;
        string statusCode;

        public PassedObject(string Url, string Group, string StatusCode)
        {
            this.url = Url;
            this.group = Group;
            this.statusCode = StatusCode;
        }

        public string Url
        {
            get { return url; }
        }
        public string Group
        {
            get { return group; }
        }
        public string StatusCode
        {
            get { return statusCode; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Site1.Master.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This master page is used to
    /// 1) Create a menu across all webpages
    /// 2) Allow documentation about the website and url based testing
    ///    to be downloaded from any webpage.
    /// </summary>
    public partial class Site1 : System.Web.UI.MasterPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void btnDocumentation_Click(object sender, EventArgs e)
        {
            DownloadFile();
        }
        void DownloadFile()
        {
            string filepath = Paths.GetFullSharedPath() + Paths.GetDocumentation();
            FileInfo file = new FileInfo(filepath);

            if (file.Exists)
            {
                // Clear the content of the response
                Response.ClearContent();

                // Add the file name and attachment, which will force the open/cancel/save dialog to show, to the header
                Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);

                // Add the file size into the response header
                Response.AddHeader("Content-Length", file.Length.ToString());

                // Set the ContentType
                Response.ContentType = "application/ms-word";

                // Write the file into the response
                Response.WriteFile(file.FullName);

                // Flush the response
                Response.Flush();

                // End the response
                Response.End();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Machines.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Machines {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgMachines control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgMachines;
        
        /// <summary>
        /// lblNewMachine control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNewMachine;
        
        /// <summary>
        /// lblMachine control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblMachine;
        
        /// <summary>
        /// tbMachine control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbMachine;
        
        /// <summary>
        /// rfvMachine control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvMachine;
        
        /// <summary>
        /// lblGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroups;
        
        /// <summary>
        /// tbGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroups;
        
        /// <summary>
        /// rfvGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvGroups;
        
        /// <summary>
        /// lblGroupInstructions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroupInstructions;
        
        /// <summary>
        /// lblPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblPeriod;
        
        /// <summary>
        /// tbPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbPeriod;
        
        /// <summary>
        /// rfvPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvPeriod;
        
        /// <summary>
        /// lblFiddlerPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFiddlerPeriod;
        
        /// <summary>
        /// tbFiddlerPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbFiddlerPeriod;
        
        /// <summary>
        /// rfvFiddlerPeriod control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvFiddlerPeriod;
        
        /// <summary>
        /// lblEmailTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmailTitle;
        
        /// <summary>
        /// tbEmailTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbEmailTitle;
        
        /// <summary>
        /// rfvEmailTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvEmailTitle;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Passing.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Passing {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// lblDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDate;
        
        /// <summary>
        /// dgPassed control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgPassed;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblFilter control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFilter;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// lblStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStatusCode;
        
        /// <summary>
        /// tbStatusCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbStatusCode;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Site1.Master.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Site1 {
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
        
        /// <summary>
        /// Menu1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Menu Menu1;
        
        /// <summary>
        /// ContentPlaceHolder1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder ContentPlaceHolder1;
        
        /// <summary>
        /// btnDocumentation control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDocumentation;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Paths.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Xml;
using System.Configuration;
using System.Text.RegularExpressions;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class contains methods that are used through the rest of the program
    /// </summary>
    public class Paths
    {
        /// <summary>
        /// These methods allow access to data in the app.config file
        /// </summary>
        /// <returns></returns>
        public static string GetFullSharedPath()
        {
            return ConfigurationManager.AppSettings["FullSharedPath"];
        }
        public static string GetDirectoryInfoPath()
        {
            return ConfigurationManager.AppSettings["DirectoryInfoPath"];
        }
        public static string GetFullPath()
        {
            return ConfigurationManager.AppSettings["FullPath"];
        }

        /// <summary>
        /// Gets the date of the file passed in
        /// </summary>
        /// <param name="fileName">name of the file</param>
        /// <returns></returns>
        public static string GetDateOfFile(string fileName)
        {
            string date = string.Empty;
            DirectoryInfo di = new DirectoryInfo(GetDirectoryInfoPath());
            FileInfo[] fi = di.GetFiles();
            foreach (FileInfo f in fi)
            {
                if (f.Name.ToUpper() == (fileName).ToUpper())
                {
                    date = f.LastWriteTime.ToString();
                    return date;
                }
            }

            return null;
        }

        /// <summary>
        /// This is a helper method to bind an arraylist to a datagrid
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public static DataTable ConvertObjectToDataTableSchema(Object o)
        {
            DataTable dt = new DataTable();
            PropertyInfo[] properties = o.GetType().GetProperties();

            foreach (PropertyInfo property in properties)
            {
                DataColumn dc = new DataColumn(property.Name);
                dc.DataType = property.PropertyType; dt.Columns.Add(dc);
            }
            return dt;
        }

        /// <summary>
        /// This is a helper method to bind an arraylist to a datagrid
        /// </summary>
        /// <param name="arrayList"></param>
        /// <param name="dt"></param>
        public static void FillData(ArrayList arrayList, DataTable dt)
        {
            foreach (Object o in arrayList)
            {
                DataRow dr = dt.NewRow();
                PropertyInfo[] properties = o.GetType().GetProperties();

                foreach (PropertyInfo property in properties)
                {
                    dr[property.Name] = property.GetValue(o, null);
                }
                dt.Rows.Add(dr);
            }
        }

        /// <summary>
        /// This method inserts a known issue into the xml file
        /// </summary>
        /// <param name="url"></param>
        /// <param name="statusCode"></param>
        /// <param name="excludeText"></param>
        /// <param name="expectedText"></param>
        public static void InsertKnownIssue(string url, string statusCode, string excludeText, string expectedText)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetKnownIssuesNode());
            XmlElement newNode = xDoc.CreateElement("url");
            newNode.SetAttribute("value", url);
            newNode.SetAttribute("StatusCode", statusCode);
            if (excludeText.Length > 0)
            {
                string[] excludedStrings = Regex.Split(excludeText, GetLineBreak());
                XmlElement newExcludedStringsNode = xDoc.CreateElement("ExcludedResponseText");
                foreach (string excludeString in excludedStrings)
                {
                    XmlElement newExcludedStringsTextNode = xDoc.CreateElement("Text");
                    newExcludedStringsTextNode.InnerText = excludeString;
                    newExcludedStringsNode.AppendChild(newExcludedStringsTextNode);
                }
                newNode.AppendChild(newExcludedStringsNode);
            }
            if (expectedText.Length > 0)
            {
                string[] expectedStrings = Regex.Split(expectedText, GetLineBreak());
                XmlElement newExpectedStringsNode = xDoc.CreateElement("ExpectedResponseText");
                foreach (string expectedString in expectedStrings)
                {
                    XmlElement newExpectedStringsTextNode = xDoc.CreateElement("Text");
                    newExpectedStringsTextNode.InnerText = expectedString;
                    newExpectedStringsNode.AppendChild(newExpectedStringsTextNode);
                }
                newNode.AppendChild(newExpectedStringsNode);
            }
            
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
        }

        /// <summary>
        /// These methods allow access to data in the app.config file
        /// </summary>
        /// <returns></returns>
        public static string GetKnownIssuesNode()
        {
            return ConfigurationManager.AppSettings["KnownIssuesNode"];
        }
        public static string GetResponseTextFile()
        {
            return ConfigurationManager.AppSettings["ResponseTextFile"];
        }
        public static string GetAllAdsUrlNodes()
        {
            return ConfigurationManager.AppSettings["AllAdsUrlNodes"];
        }
        public static string GetAdNode()
        {
            return ConfigurationManager.AppSettings["AdNode"];
        }
        public static string GetFiddlerUrlNode()
        {
            return ConfigurationManager.AppSettings["FiddlerUrlNode"];
        }
        public static string GetFiddlerUrlGroupNodes()
        {
            return ConfigurationManager.AppSettings["FiddlerUrlGroupNodes"];
        }
        public static string GetFiddlerHttpStatusCodeErrorsNode()
        {
            return ConfigurationManager.AppSettings["FiddlerHttpStatusCodeErrorsNode"];
        }
        public static string GetErrorsFile()
        {
            return ConfigurationManager.AppSettings["ErrorsFile"];
        }
        public static string GetPassedFile()
        {
            return ConfigurationManager.AppSettings["PassedFile"];
        }
        public static string GetExpectedResponseTextUrlNodes()
        {
            return ConfigurationManager.AppSettings["ExpectedResponseTextUrlNodes"];
        }
        public static string GetExpectedResponseTextNodes()
        {
            return ConfigurationManager.AppSettings["ExpectedResponseTextNodes"];
        }
        public static string GetKnownIssuesUrlNodes()
        {
            return ConfigurationManager.AppSettings["KnownIssuesUrlNodes"];
        }
        public static string GetExcludedResponseTextTextNodes()
        {
            return ConfigurationManager.AppSettings["ExcludedResponseTextTextNodes"];
        }
        public static string GetExcludedResponseTextUrlNodes()
        {
            return ConfigurationManager.AppSettings["ExcludedResponseTextUrlNodes"];
        }
        public static string GetExcludedResponseTextNodes()
        {
            return ConfigurationManager.AppSettings["ExcludedResponseTextNodes"];
        }
        public static string GetUrlsFile()
        {
            return ConfigurationManager.AppSettings["UrlsFile"];
        }
        public static string GetUrlGroupNodes()
        {
            return ConfigurationManager.AppSettings["UrlGroupNodes"];
        }
        public static string GetUrlNodes()
        {
            return ConfigurationManager.AppSettings["UrlNodes"];
        }
        public static string GetUrlRootNode()
        {
            return ConfigurationManager.AppSettings["UrlRootNode"];
        }
        public static string GetTrackingUrlChildNodes()
        {
            return ConfigurationManager.AppSettings["TrackingUrlChildNodes"];
        }
        public static string GetTrackingUrlParentNodes()
        {
            return ConfigurationManager.AppSettings["TrackingUrlParentNodes"];
        }
        public static string GetErrorNodes()
        {
            return ConfigurationManager.AppSettings["ErrorNodes"];
        }
        public static string GetPassingNodes()
        {
            return ConfigurationManager.AppSettings["PassedNodes"];
        }
        public static string GetGroupNodes()
        {
            return ConfigurationManager.AppSettings["GroupNodes"];
        }
        public static string GetMachineNodes()
        {
            return ConfigurationManager.AppSettings["MachineNodes"];
        }
        public static string GetLogPath()
        {
            return ConfigurationManager.AppSettings["LogPath"];
        }
        public static string GetLineBreak()
        {
            return ConfigurationManager.AppSettings["LineBreak"];
        }
        public static string GetDocumentation()
        {
            return ConfigurationManager.AppSettings["Documentation"];
        }
        public static string GetEmailNode()
        {
            return ConfigurationManager.AppSettings["EmailNode"];
        }
        public static string GetRequestTimeout()
        {
            return ConfigurationManager.AppSettings["RequestTimeout"];
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Strings.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Strings {
        
        /// <summary>
        /// lblExcludedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExcludedText;
        
        /// <summary>
        /// dgExcludedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgExcludedText;
        
        /// <summary>
        /// lblNewExcludedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblNewExcludedText;
        
        /// <summary>
        /// lblAddExcludedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddExcludedText;
        
        /// <summary>
        /// tbExcludedText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExcludedText;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
        
        /// <summary>
        /// lblExcludedTextForSpecificUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExcludedTextForSpecificUrls;
        
        /// <summary>
        /// dgExcludedTextForUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgExcludedTextForUrl;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// rfvUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvUrl;
        
        /// <summary>
        /// lblExcludedTextForUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblExcludedTextForUrl;
        
        /// <summary>
        /// tbExcludedTextForUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbExcludedTextForUrl;
        
        /// <summary>
        /// rfvExcludedTextForUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvExcludedTextForUrl;
        
        /// <summary>
        /// btnExcludedTextForUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnExcludedTextForUrl;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Strings.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Collections;
using System.Data;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class allows viewing and configuring of strings that should
    /// be excluded when searching through the html of a url request.
    /// If an excluded string appears within the html, then that url
    /// request is marked as an error.
    /// </summary>
    public partial class Strings : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyExcludedResponseTextDataBind();
            MyExcludedResponseTextForUrlDataBind();
            MaintainScrollPositionOnPostBack = true;
        }

        /// <summary>
        /// Binds the data to the datagrid of excluded strings
        /// </summary>
        void MyExcludedResponseTextDataBind()
        {
            ArrayList excludedResponseTextObjects = GetExcludedResponseTextObjects();
            dgExcludedText.DataSource = excludedResponseTextObjects;
            dgExcludedText.DataBind();
        }

        /// <summary>
        /// Binds the data to the datagrid of excluded strings for particular urls
        /// </summary>
        void MyExcludedResponseTextForUrlDataBind()
        {
            ArrayList excludedResponseTextUrlObjects = GetExcludedResponseTextUrlObjects();
            dgExcludedTextForUrl.DataSource = excludedResponseTextUrlObjects;
            dgExcludedTextForUrl.DataBind();
        }

        /// <summary>
        /// Gets all the excluded strings from the xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetExcludedResponseTextObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList excludedResponseTextNodes = xDoc.SelectNodes(Paths.GetExcludedResponseTextTextNodes());
            ArrayList excludedResponseTextObjects = new ArrayList();
            foreach (XmlNode excludedResponseTextNode in excludedResponseTextNodes)
            {
                excludedResponseTextObjects.Add(new ExcludedResponseTextObject(excludedResponseTextNode.InnerText));
            }
            return excludedResponseTextObjects;
        }

        /// <summary>
        /// Gets all the excluded strings for particular urls from the xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetExcludedResponseTextUrlObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList excludedResponseTextNodes = xDoc.SelectNodes(Paths.GetExcludedResponseTextUrlNodes());
            ArrayList excludedResponseTextUrlObjects = new ArrayList();
            foreach (XmlNode excludedResponseTextUrlNode in excludedResponseTextNodes)
            {
                foreach (XmlNode excludedResponseTextNode in excludedResponseTextUrlNode.ChildNodes)
                    excludedResponseTextUrlObjects.Add(new ExcludedStringsUrlObject(excludedResponseTextUrlNode.Attributes["value"].Value, excludedResponseTextNode.InnerText));
            }
            return excludedResponseTextUrlObjects;
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgExcludedText_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgExcludedText.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrl_Click);
                e.Item.Cells[1].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgExcludedTextForUrl_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgExcludedTextForUrl.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrlText_Click);
                e.Item.Cells[2].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Deletes a url from the excluded strings for a particular url from the database
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgExcludedText.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string ExcludedText = dgi.Cells[dc.IndexOf(dc["ExcludedText"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetExcludedResponseTextNodes());

            foreach (XmlNode urlNode in node.ChildNodes)
                if (ExcludedText == urlNode.InnerText)
                    node.RemoveChild(urlNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExcludedResponseTextDataBind();
        }

        /// <summary>
        /// Deletes an excluded string from the excluded strings for a particular url from the database
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrlText_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgExcludedTextForUrl.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string url = dgi.Cells[0].Text;
            string ExcludedText = dgi.Cells[1].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode excludedResponseNode = xDoc.SelectSingleNode(Paths.GetExcludedResponseTextNodes());
            ArrayList deleteNodesList = new ArrayList();
            int count = 0;
            foreach (XmlNode excludedResponseTextUrlNode in excludedResponseNode.ChildNodes)
            {
                if (excludedResponseTextUrlNode.Name == "url" && excludedResponseTextUrlNode.Attributes["value"].Value == url)
                {
                    foreach (XmlNode excludedResponseTextNode in excludedResponseTextUrlNode.ChildNodes)
                    {
                        count++;
                        if (excludedResponseTextNode.InnerText == ExcludedText)
                            deleteNodesList.Add(excludedResponseTextNode);
                    }
                    if (count == 1)
                        excludedResponseNode.RemoveChild(excludedResponseTextUrlNode);
                    else
                    {
                        foreach (XmlNode removeNode in deleteNodesList)
                            excludedResponseTextUrlNode.RemoveChild(removeNode);
                    }
                    break;
                } 
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyExcludedResponseTextForUrlDataBind();
        }

        /// <summary>
        /// Inserts a new excluded string into the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            InsertExcludedText();
            MyExcludedResponseTextDataBind();
        }

        /// <summary>
        /// Inserts a new excluded string into the xml file
        /// </summary>
        public void InsertExcludedText()
        {
            string excludedText = tbExcludedText.Text;
            if (excludedText.Length == 0)
                return;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetExcludedResponseTextNodes());
            XmlElement newNode = xDoc.CreateElement("Text");
            newNode.InnerText = excludedText;
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            MyExcludedResponseTextDataBind();
        }

        /// <summary>
        /// Inserts a new excluded string into the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnExcludedTextForUrl_Click(object sender, EventArgs e)
        {
            InsertExcludedTextForUrl();
        }

        /// <summary>
        /// Inserts a new excluded string for a particular url into the xml file
        /// </summary>
        public void InsertExcludedTextForUrl()
        {
            string url = tbUrl.Text;
            string excludedText = tbExcludedTextForUrl.Text;

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetExcludedResponseTextUrlNodes());
            bool urlExists = false;
            foreach (XmlNode urlNode in nodes)
            {
                if (urlNode.Attributes["value"].Value == url)
                {
                    urlExists = true;
                    XmlElement childTextNode = xDoc.CreateElement("Text");
                    childTextNode.InnerText = excludedText;
                    urlNode.AppendChild(childTextNode);
                }
            }

            if (!urlExists)
            {
                XmlNode node = xDoc.SelectSingleNode(Paths.GetExcludedResponseTextNodes());
                XmlElement newNode = xDoc.CreateElement("url");
                newNode.SetAttribute("value", url);
                XmlElement childTextNode = xDoc.CreateElement("Text");
                childTextNode.InnerText = excludedText;
                newNode.AppendChild(childTextNode);
                node.AppendChild(newNode);
            }
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());
            MyExcludedResponseTextForUrlDataBind();
        }
    }

    /// <summary>
    /// This class is used for storing information about excluded strings.
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class ExcludedResponseTextObject
    {
        string excludedText;

        public ExcludedResponseTextObject(string excludedText)
        {
            this.excludedText = excludedText;
        }
        public string ExcludedText
        {
            get { return excludedText; }
        }
    }

    /// <summary>
    /// This class is used for storing information about excluded strings for a particular url.
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class ExcludedStringsUrlObject
    {
        string excludedText;
        string url;

        public ExcludedStringsUrlObject(string url, string excludedText)
        {
            this.excludedText = excludedText;
            this.url = url;
        }
        public string ExcludedText
        {
            get { return excludedText; }
        }
        public string Url
        {
            get { return url; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Tracking.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Tracker {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgTracking control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgTracking;
        
        /// <summary>
        /// lblAddUrlTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrlTitle;
        
        /// <summary>
        /// lblAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrl;
        
        /// <summary>
        /// tbAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddUrl;
        
        /// <summary>
        /// rfvAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvAddUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// lblGroupInstructions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroupInstructions;
        
        /// <summary>
        /// btnAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddUrl;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Urls.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Common.Utilities.UrlBasedTests {
    
    
    public partial class Urls {
        
        /// <summary>
        /// lblTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblTitle;
        
        /// <summary>
        /// dgUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgUrls;
        
        /// <summary>
        /// btnViewAll control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnViewAll;
        
        /// <summary>
        /// lblGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroups;
        
        /// <summary>
        /// ddlGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlGroups;
        
        /// <summary>
        /// lblFilter control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblFilter;
        
        /// <summary>
        /// lblUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUrl;
        
        /// <summary>
        /// tbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUrl;
        
        /// <summary>
        /// btnSubmit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmit;
        
        /// <summary>
        /// lblDeleteUrlTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteUrlTitle;
        
        /// <summary>
        /// lblDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteUrl;
        
        /// <summary>
        /// tbDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbDeleteUrl;
        
        /// <summary>
        /// btnDeleteUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteUrl;
        
        /// <summary>
        /// lblDeleteGroupTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteGroupTitle;
        
        /// <summary>
        /// lblDeleteGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblDeleteGroup;
        
        /// <summary>
        /// tbDeleteGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbDeleteGroup;
        
        /// <summary>
        /// btnDeleteGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnDeleteGroup;
        
        /// <summary>
        /// lblAddUrlTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrlTitle;
        
        /// <summary>
        /// lblAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddUrl;
        
        /// <summary>
        /// tbAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbAddUrl;
        
        /// <summary>
        /// rfvAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator rfvAddUrl;
        
        /// <summary>
        /// lblGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGroup;
        
        /// <summary>
        /// tbGroup control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGroup;
        
        /// <summary>
        /// btnAddUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddUrl;
        
        /// <summary>
        /// lblAddMultipleUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblAddMultipleUrls;
        
        /// <summary>
        /// tbNewUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbNewUrls;
        
        /// <summary>
        /// lblGp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblGp;
        
        /// <summary>
        /// tbGp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbGp;
        
        /// <summary>
        /// btnAddMultipleUrls control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAddMultipleUrls;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Tracking.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Collections;
using System.Data;

namespace Test.Common.Utilities.UrlBasedTests
{
    public partial class Tracker : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            MyDataBind();
        }
        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList urlObjects = GetUrlObjects();
            dgTracking.DataSource = urlObjects;
            dgTracking.DataBind();
        }

        /// <summary>
        /// Gets all the urls and their test environment (prod, ppe, int) that are used when testing with Fiddler
        /// </summary>
        /// <returns></returns>
        ArrayList GetUrlObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNodeList urlNodes = xDoc.SelectNodes(Paths.GetTrackingUrlChildNodes());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in urlNodes)
            {
                urlObjects.Add(new urlAdsObject(urlNode.InnerText, urlNode.Attributes["group"].Value));
            }
            return urlObjects;
        }

        /// <summary>
        /// Adds buttons to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void dgUrls_DataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType != ListItemType.Header && e.Item.ItemType != ListItemType.Footer)
            {
                DataTable dt = new DataTable();
                ArrayList al = (ArrayList)dgTracking.DataSource;
                dt = Paths.ConvertObjectToDataTableSchema(al[0]);
                Paths.FillData(al, dt);
                DataView dv = new DataView(dt);
                DataColumnCollection dc = dv.Table.Columns;

                Button btnDelete = new Button();
                btnDelete.ID = "btnDelete";
                btnDelete.Text = "Delete";
                btnDelete.CausesValidation = false;
                btnDelete.Click += new System.EventHandler(btnDeleteUrl_Click);
                e.Item.Cells[2].Controls.Add(btnDelete);
            }
        }

        /// <summary>
        /// Deletes a tracking url from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            ArrayList al = (ArrayList)dgTracking.DataSource;
            dt = Paths.ConvertObjectToDataTableSchema(al[0]);
            DataView dv = new DataView(dt);
            DataColumnCollection dc = dv.Table.Columns;
            DataGridItem dgi = ((DataGridItem)(((Button)sender).Parent.Parent));
            string ExcludedText = dgi.Cells[dc.IndexOf(dc["Url"])].Text;
            string group = dgi.Cells[dc.IndexOf(dc["Group"])].Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());

            XmlNode node = xDoc.SelectSingleNode(Paths.GetTrackingUrlParentNodes());

            foreach (XmlNode urlNode in node.ChildNodes)
                if (ExcludedText == urlNode.InnerText && group == urlNode.Attributes["group"].Value)
                    node.RemoveChild(urlNode);

            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

            MyDataBind();
        }

        /// <summary>
        /// Inserts a tracking url into the xml file
        /// </summary>
        public void InsertUrl()
        {
            string url = tbAddUrl.Text;
            string group = tbGroup.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetResponseTextFile());
            XmlNode node = xDoc.SelectSingleNode(Paths.GetTrackingUrlParentNodes());
            XmlElement newNode = xDoc.CreateElement("url");
            newNode.InnerText = url;
            XmlAttribute groupAttribute = xDoc.CreateAttribute("group");
            groupAttribute.Value = group;
            newNode.Attributes.Append(groupAttribute);
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetResponseTextFile());

        }

        /// <summary>
        /// Inserts a tracking url into the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddUrl_Click(object sender, EventArgs e)
        {
            InsertUrl();
            MyDataBind();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Urls.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Data;
using System.Collections;

namespace Test.Common.Utilities.UrlBasedTests
{
    /// <summary>
    /// This class allows viewing and configuring of the urls that will be used in testing
    /// </summary>
    public partial class Urls : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                MyDataBind();
                InsertGroups();
            }
            MaintainScrollPositionOnPostBack = true;
        }

        /// <summary>
        /// This method gets all the groups from the xml file
        /// and adds them to a drop down list
        /// </summary>
        void InsertGroups()
        {
            string group = string.Empty;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());

            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetUrlGroupNodes());
            ddlGroups.Items.Add("Show All");
            foreach (XmlNode node in nodes)
            {
                group = node.Attributes["group"].Value;
                ddlGroups.Items.Add(group);
            }
        }

        /// <summary>
        /// Gets all the urls from the xml file
        /// </summary>
        /// <returns></returns>
        ArrayList GetUrlObjects()
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNodeList Urls = xDoc.SelectNodes(Paths.GetUrlNodes());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in Urls)
            {
                urlObjects.Add(new UrlObject(urlNode.InnerText, urlNode.ParentNode.Attributes["group"].Value));
            }
            return urlObjects;
        }

        /// <summary>
        /// Gets all the urls from the xml file, filtered by group
        /// </summary>
        /// <param name="Group">The group to filter by</param>
        /// <returns></returns>
        ArrayList GetUrlObjects(string Group)
        {
            if (Group == "Show All")
            {
                return GetUrlObjects();
            }

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNodeList Urls = xDoc.SelectNodes("//urls/urlGroup[@group='" + Group + "']/url");
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in Urls)
            {
                urlObjects.Add(new UrlObject(urlNode.InnerText, Group));
            }

            return urlObjects;
        }

        /// <summary>
        /// Gets all the urls from the xml file, filtered by url
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        ArrayList GetUrlObjectsFilter(string url)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNodeList Urls = xDoc.SelectNodes(Paths.GetUrlNodes());
            ArrayList urlObjects = new ArrayList();
            foreach (XmlNode urlNode in Urls)
            {
                if (url == urlNode.InnerText)
                    urlObjects.Add(new UrlObject(urlNode.InnerText, urlNode.ParentNode.Attributes["group"].Value));
            }
            return urlObjects;
        }

        /// <summary>
        /// Binds the data to the datagrid
        /// </summary>
        void MyDataBind()
        {
            ArrayList urlObjects = GetUrlObjects();
            dgUrls.DataSource = urlObjects;
            dgUrls.DataBind();
        }

        /// <summary>
        /// Binds the data to the datagrid for a selected group
        /// </summary>
        void MyDataBind(string Group)
        {
            ArrayList urlObjects = GetUrlObjects(Group);
            dgUrls.DataSource = urlObjects;
            dgUrls.DataBind();
        }

        /// <summary>
        /// This method is used to page through the datagrid
        /// </summary>
        /// <param name="source"></param>
        /// <param name="e"></param>
        protected void Paging_DataGrid(object source, System.Web.UI.WebControls.DataGridPageChangedEventArgs e)
        {
            dgUrls.CurrentPageIndex = e.NewPageIndex;
            if (Session["urlGroup"] != null)
                MyDataBind(Session["urlGroup"].ToString());
            else
                MyDataBind();
        }

        /// <summary>
        /// This method is used to change page viewing to view all, or visa versa.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnViewAll_Click(object sender, EventArgs e)
        {
            if (Session["ViewAllPassed"] == null)
            {
                Session["ViewAllPassed"] = "true";
            }
            if (Session["ViewAllPassed"].ToString() == "true")
            {
                Session["ViewAllPassed"] = "false";
                dgUrls.AllowPaging = false;
                btnViewAll.Text = "Allow Paging";
            }
            else
            {
                Session["ViewAllPassed"] = "true";
                dgUrls.AllowPaging = true;
                btnViewAll.Text = "View All";
            }
            MyDataBind();
        }

        /// <summary>
        /// Gets all the urls from the xml file, filtered by url
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            string url = tbUrl.Text;

            ArrayList alPassedObjects = GetUrlObjectsFilter(url);
            dgUrls.DataSource = alPassedObjects;
            dgUrls.DataBind();
        }
        
        /// <summary>
        /// Adds a new url to the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddUrl_Click(object sender, EventArgs e)
        {
            InsertUrl(tbAddUrl.Text, tbGroup.Text);
        }

        /// <summary>
        /// Adds a new url to the xml file
        /// </summary>
        /// <param name="url"></param>
        /// <param name="group"></param>
        void InsertUrl(string url, string group)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetUrlGroupNodes());
            if (group == "")
                group = "none";
            bool groupExists = false;
            foreach (XmlNode xNode in nodes)
            {
                if (xNode.Attributes["group"].Value == group)
                    groupExists = true;
            }
            if (!groupExists)
            {
                XmlNode urlNode = xDoc.SelectSingleNode("//urls");
                XmlElement newGroupNode = xDoc.CreateElement("urlGroup");
                newGroupNode.SetAttribute("group", group);
                urlNode.AppendChild(newGroupNode);
            }
            XmlNode node = xDoc.SelectSingleNode("//urls/urlGroup[@group='" + group + "']");
            XmlElement newNode = xDoc.CreateElement("url");
            newNode.InnerText = url;
            node.AppendChild(newNode);
            xDoc.Save(Paths.GetFullPath() + Paths.GetUrlsFile());
            MyDataBind();
        }

        /// <summary>
        /// Deletes a url from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteUrl_Click(object sender, EventArgs e)
        {
            string url = tbDeleteUrl.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNodeList nodes = xDoc.SelectNodes(Paths.GetUrlGroupNodes());
            foreach (XmlNode node in nodes)
            {
                foreach (XmlNode urlNode in node.ChildNodes)
                {
                    if (url == urlNode.InnerText.ToString())
                        node.RemoveChild(urlNode);
                }
            }
            xDoc.Save(Paths.GetFullPath() + Paths.GetUrlsFile());
            MyDataBind();
        }
        
        /// <summary>
        /// Binds urls to the datagrid based on the group selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void ddlGroups_SelectedIndexChanged(object sender, EventArgs e)
        {
            Session["urlGroup"] = ddlGroups.SelectedValue;
            MyDataBind(ddlGroups.SelectedValue);
        }

        /// <summary>
        /// Adds multiple urls to the datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddMultipleUrls_Click(object sender, EventArgs e)
        {
            string[] urls = tbNewUrls.Text.ToString().Split("\n".ToCharArray());
            string group = tbGp.Text;
            foreach (string url in urls)
            {
                string url1 = url.Replace("\r", "");
                InsertUrl(url1, group);
            }
        }

        /// <summary>
        /// Deletes a group and all its urls from the xml file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteGroup_Click(object sender, EventArgs e)
        {
            string group = tbDeleteGroup.Text;
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(Paths.GetFullPath() + Paths.GetUrlsFile());
            XmlNode rootNode = xDoc.SelectSingleNode(Paths.GetUrlRootNode());

            foreach (XmlNode groupNode in rootNode.ChildNodes)
            {
                if (group == groupNode.Attributes["group"].Value)
                    rootNode.RemoveChild(groupNode);
            }

            xDoc.Save(Paths.GetFullPath() + Paths.GetUrlsFile());
            MyDataBind();
        }
    }

    /// <summary>
    /// This class is used for storing information about urls used in url based testing
    /// It is used when the data is bound to the datagrid.
    /// </summary>
    class UrlObject
    {
        string url;
        string group;

        public UrlObject(string Url, string Group)
        {
            this.url = Url;
            this.group = Group;
        }

        public string Url
        {
            get { return url; }
        }
        public string Group
        {
            get { return group; }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\DaemonInstaller.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration.Install;
using System.Linq;


namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    [RunInstaller(true)]
    public partial class DaemonInstaller : Installer
    {
        public DaemonInstaller()
        {
            InitializeComponent();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\Daemon.cs ===
﻿using System;
using System.ServiceProcess;
using System.Text;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    static class Daemon
    {
        public static int Test = 0;
        static void Main()
        {
            ServiceBase[] ServicesToRun;
            ServicesToRun = new ServiceBase[]
            {
                new WTTAutoScheduleDaemon()
                {
                    AutoLog=true,
                    CanHandlePowerEvent=false,
                    CanHandleSessionChangeEvent=false,
                    CanPauseAndContinue=false,
                    CanShutdown=true,
                    CanStop=true,
                    ServiceName="WTTAutoScheduleDaemon"
                }
            };
            ServiceBase.Run(ServicesToRun);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\URLBasedTests\UrlBasedTestsWebsite\UrlBasedTestsWebsite\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("UrlBasedTests")]
[assembly: AssemblyDescription("")]
//[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("MSIT")]
//[assembly: AssemblyProduct("UrlBasedTests")]
//[assembly: AssemblyCopyright("Copyright © MSIT 2008")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\DaemonInstaller.Designer.cs ===
﻿namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    partial class DaemonInstaller
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.DaemonServiceProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller();
            this.DaemonServiceInstaller = new System.ServiceProcess.ServiceInstaller();
            // 
            // DaemonServiceProcessInstaller
            // 
            this.DaemonServiceProcessInstaller.Password = null;
            this.DaemonServiceProcessInstaller.Username = null;
            // 
            // DaemonServiceInstaller
            // 
            this.DaemonServiceInstaller.Description = "Schedules WTQs based on a specified schedule.";
            this.DaemonServiceInstaller.DisplayName = "WTT AutoSchedule Daemon";
            this.DaemonServiceInstaller.ServiceName = "WTTAutoScheduleDaemon";
            // 
            // DaemonInstaller
            // 
            this.Installers.AddRange(new System.Configuration.Install.Installer[] {
            this.DaemonServiceProcessInstaller,
            this.DaemonServiceInstaller});

        }

        #endregion

        private System.ServiceProcess.ServiceProcessInstaller DaemonServiceProcessInstaller;
        private System.ServiceProcess.ServiceInstaller DaemonServiceInstaller;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\DaemonLogger.cs ===
﻿using System;
using System.IO;
using System.Text;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    /// <summary>
    /// Represents the logger for the Daemon.
    /// </summary>
    public class DaemonLogger
    {
        private StreamWriter g_LogFile = null;
        private readonly string G_LOGFILENAME = String.Empty;

        /// <summary>
        /// The level of the log entry being written.
        /// </summary>
        public enum LogLevel
        {
            /// <summary>
            /// Informational message.
            /// </summary>
            Message = 1,
            /// <summary>
            /// Warning message.
            /// </summary>
            Warning = 2,
            /// <summary>
            /// Exception message.
            /// </summary>
            Exception = 3
        }

        /// <summary>
        /// Initializes a new instance of the Daemon Logger with the specified
        /// log file name.
        /// </summary>
        /// <param name="LogFileName">The name of the Log File.</param>
        public DaemonLogger(string LogFileName)
        {
            G_LOGFILENAME = LogFileName;
            try
            {
                g_LogFile = new StreamWriter(G_LOGFILENAME, true);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Gets the name of the Log File.
        /// </summary>
        public string LogFileName
        {
            get { return G_LOGFILENAME; }
        }

        /// <summary>
        /// Closes this log file.
        /// </summary>
        public void Close()
        {
            try
            {
                g_LogFile.Close();
                g_LogFile = null;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Writes a log entry to the log file with the specified
        /// Logentry level.
        /// </summary>
        /// <param name="Level">The level of the log entry being written.</param>
        /// <param name="LogEntry">The log entry to write to the log file.</param>
        public void WriteLine(LogLevel Level, string LogEntry)
        {
            string m_TimeStamp = DateTime.Now.ToString() + " ";

            try
            {
                if (!String.IsNullOrEmpty(LogEntry))
                {
                    switch (Level)
                    {
                        case LogLevel.Warning:
                            g_LogFile.WriteLine(m_TimeStamp + "WARN: " + LogEntry);
                            break;
                        case LogLevel.Message:
                            g_LogFile.WriteLine(m_TimeStamp + "INFO: " + LogEntry);
                            break;
                        case LogLevel.Exception:
                            g_LogFile.WriteLine(m_TimeStamp + "ERROR: " + LogEntry);
                            break;
                    }
                    g_LogFile.Flush();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Writes a log entry for the specified thread to the log file with the specified
        /// Logentry level.
        /// </summary>
        /// <param name="Level">The level of the log entry being written.</param>
        /// <param name="ThreadName">The name of the thread for which this entry is being logged.</param>
        /// <param name="LogEntry">The log entry to write to the log file.</param>
        public void WriteLine(LogLevel Level, string ThreadName, string LogEntry)
        {
            string m_TimeStamp = DateTime.Now.ToString() + " ";

            try
            {
                if (!String.IsNullOrEmpty(LogEntry))
                {
                    switch (Level)
                    {
                        case LogLevel.Warning:
                            g_LogFile.WriteLine(m_TimeStamp + ThreadName + "::WARN: " + LogEntry);
                            break;
                        case LogLevel.Message:
                            g_LogFile.WriteLine(m_TimeStamp + ThreadName + "::INFO: " + LogEntry);
                            break;
                        case LogLevel.Exception:
                            g_LogFile.WriteLine(m_TimeStamp + ThreadName + "::ERROR: " + LogEntry);
                            break;
                    }
                    g_LogFile.Flush();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Writes the specified Exception to the log file.
        /// </summary>
        /// <param name="Error">The exception to write to the log file.</param>
        public void WriteLine(Exception Error)
        {
            string m_TimeStamp = DateTime.Now.ToString() + " ";

            try
            {
                g_LogFile.WriteLine(m_TimeStamp + "ERROR: " + Error);
                g_LogFile.Flush();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Writes the specified Exception to the log file for the specified thread.
        /// </summary>
        /// <param name="ThreadName">The name of the thread for which this entry is being logged.</param>
        /// <param name="Error">The exception to write to the log file.</param>
        public void WriteLine(string ThreadName, Exception Error)
        {
            string m_TimeStamp = DateTime.Now.ToString() + " ";

            try
            {
                g_LogFile.WriteLine(m_TimeStamp + ThreadName + "::ERROR: " + Error);
                g_LogFile.Flush();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Dumps the specified ScheduleInfo object to the log file.
        /// </summary>
        /// <param name="ScheduleObject">The schedule object to be dumped.</param>
        public void WriteLine(ScheduleInfo ScheduleObject)
        {
            string m_TimeStamp = DateTime.Now.ToString() + " ";

            try
            {
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: ScheduleID: " + ScheduleObject.ScheduleId.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: WTQ File: " + ScheduleObject.WTQFile);
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: Schedule Interval: " + ScheduleObject.Interval.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: Last Run: " + ScheduleObject.LastRunTimeStamp.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: Next Run: " + ScheduleObject.NextRunTimeStamp.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG: Constraints:");
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG:     Start Day Of Month: " + ScheduleObject.ScheduleConstraints.StartDayOfMonth.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG:     Start Day Of Week : " + ScheduleObject.ScheduleConstraints.StartDayOfWeek.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG:     Start Month       : " + ScheduleObject.ScheduleConstraints.StartMonth.ToString());
                g_LogFile.WriteLine(m_TimeStamp + "DEBUG:     Start Week        : " + ScheduleObject.ScheduleConstraints.StartWeek.ToString());

                g_LogFile.Flush();
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\XSSProbe\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\ScheduleInfoCollection.cs ===
﻿using System;
using System.Collections;
using System.Text;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    /// <summary>
    /// Represents a collection of ScheduleInfo objects.
    /// </summary>
    public class ScheduleInfoCollection : CollectionBase
    {
        /// <summary>
        /// Create an empty collection of ScheduleInfo objects.
        /// </summary>
        public ScheduleInfoCollection() { }

        /// <summary>
        /// Create a collection of ScheduleInfo objects with the specified ScheduleInfo
        /// as the first item in the collection.
        /// </summary>
        /// <param name="Parameter">The ScheduleInfo object to add to the collection.</param>
        public ScheduleInfoCollection(ScheduleInfo Parameter)
        {
            this.List.Add(Parameter);
        }

        /// <summary>
        /// Adds the specified ScheduleInfo object to the collection.
        /// </summary>
        /// <param name="Parameter">The ScheduleInfo object to add to the collection.</param>
        /// <returns>An object of System.Int32 indicating the index where the attribute was added.</returns>
        public int Add(ScheduleInfo Parameter)
        {
            return this.List.Add(Parameter);
        }


        /// <summary>
        /// Gets the index of the specified ScheduleInfo object within the collection.
        /// </summary>
        /// <param name="Parameter">The ScheduleInfo object whose index needs to be found.</param>
        /// <returns>An object of System.Int32 specifying the zero-based index. -1 if not found.</returns>
        public int IndexOf(ScheduleInfo Parameter)
        {
            for (int m_ParameterIndex = 0; m_ParameterIndex < this.List.Count; m_ParameterIndex++)
            {
                if ((String.Compare(Parameter.WTQFile, this[m_ParameterIndex].WTQFile, true) == 0) &&
                    (Parameter.Interval == this[m_ParameterIndex].Interval) &&
                    (Parameter.LastRunTimeStamp == this[m_ParameterIndex].LastRunTimeStamp) &&
                    (Parameter.NextRunTimeStamp == this[m_ParameterIndex].NextRunTimeStamp))
                    return m_ParameterIndex;
            }
            return -1;
        }

        /// <summary>
        /// Gets or sets the value of a pre existing element in the ScheduleInfo Collection.
        /// </summary>
        /// <param name="index">The index of the element.</param>
        /// <returns></returns>
        public ScheduleInfo this[int index]
        {
            get { return (ScheduleInfo)this.List[index]; }

            set
            {
                try
                {
                    this.List[index] = value;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\ScheduleEngine.cs ===
﻿using System;
using System.Text;
using System.Xml;
using System.IO;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    /// <summary>
    /// Represents the Schedule Engine.
    /// </summary>
    public class ScheduleEngine
    {
        ScheduleInfoCollection g_ScheduleTable = null;
        /// <summary>
        /// Initialize a new instance of the Schedule creator class.
        /// </summary>
        public ScheduleEngine()
        {
            XmlDocument m_ScheduleDefinition = null;
            string m_ScheduleXMLDocument =
                Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6) + @"\Schedule.xml";

            try
            {
                m_ScheduleDefinition = new XmlDocument();
                g_ScheduleTable = new ScheduleInfoCollection();

                
                m_ScheduleDefinition.Load(m_ScheduleXMLDocument);

                #region Populate schedule time table with RecurringSchedule objects.
                foreach (XmlNode m_ScheduleType in m_ScheduleDefinition.SelectSingleNode("Schedule/RecurringSchedule").ChildNodes)
                {
                    if (m_ScheduleType.ChildNodes.Count > 0)
                    {
                        XmlNodeList m_WTQs = m_ScheduleType.ChildNodes;
                        foreach (XmlNode m_WTQ in m_WTQs)
                        {
                            int m_OutParam;
                            ScheduleInfo m_WTQScheduleInfo = new ScheduleInfo()
                            {
                                ScheduleId = Guid.NewGuid(),
                                WTQFile = m_WTQ.InnerText,
                                NextRunTimeStamp = Convert.ToDateTime(m_WTQ.Attributes["StartTime"].Value),
                                LastRunTimeStamp = DateTime.MinValue,
                                ScheduleConstraints = new Constraints(),
                                IsScheduleValid = true
                            };

                            //Force Date to Today
                            m_WTQScheduleInfo.NextRunTimeStamp = DateTime.Now.Date + m_WTQScheduleInfo.NextRunTimeStamp.TimeOfDay;

                            #region Update Interval and Constraints.
                            switch (m_ScheduleType.Name)
                            {
                                case "Daily":
                                    m_WTQScheduleInfo.Interval = ScheduleInterval.Daily;
                                    break;
                                case "Weekly":
                                    m_WTQScheduleInfo.Interval = ScheduleInterval.Weekly;
                                    if (m_WTQ.Attributes["StartDayOfWeek"] != null)
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfWeek
                                            = GetDayOfWeekName(m_WTQ.Attributes["StartDayOfWeek"].Value);
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfWeek = (DayOfWeek)(-1);
                                    break;
                                case "BiWeekly":
                                    m_WTQScheduleInfo.Interval = ScheduleInterval.BiWeekly;
                                    if (m_WTQ.Attributes["StartDayOfWeek"] != null)
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfWeek
                                            = GetDayOfWeekName(m_WTQ.Attributes["StartDayOfWeek"].Value);
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfWeek = (DayOfWeek)(-1);

                                    if (m_WTQ.Attributes["StartWeek"] != null)
                                    {
                                        if (int.TryParse(m_WTQ.Attributes["StartWeek"].Value, out m_OutParam))
                                            m_WTQScheduleInfo.ScheduleConstraints.StartWeek
                                                = int.Parse(m_WTQ.Attributes["StartWeek"].Value);
                                        else
                                            m_WTQScheduleInfo.ScheduleConstraints.StartWeek = -1;
                                    }
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartWeek = -1;
                                    break;
                                case "Monthly":
                                    m_WTQScheduleInfo.Interval = ScheduleInterval.Monthly;
                                    if (m_WTQ.Attributes["StartDayOfMonth"] != null)
                                    {
                                        if (int.TryParse(m_WTQ.Attributes["StartDayOfMonth"].Value, out m_OutParam))
                                            m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth
                                                = int.Parse(m_WTQ.Attributes["StartDayOfMonth"].Value);
                                        else
                                            m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth = -1;
                                    }
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth = -1;
                                    break;
                                case "BiMonthly":
                                    m_WTQScheduleInfo.Interval = ScheduleInterval.BiMonthly;
                                    if (m_WTQ.Attributes["StartDayOfMonth"] != null)
                                    {
                                        if (int.TryParse(m_WTQ.Attributes["StartDayOfMonth"].Value, out m_OutParam))
                                            m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth
                                                = int.Parse(m_WTQ.Attributes["StartDayOfMonth"].Value);
                                        else
                                            m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth = -1;
                                    }
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartDayOfMonth = -1;

                                    if (m_WTQ.Attributes["StartMonth"] != null)
                                        m_WTQScheduleInfo.ScheduleConstraints.StartMonth
                                            = GetMonth(m_WTQ.Attributes["StartMonth"].Value);
                                    else
                                        m_WTQScheduleInfo.ScheduleConstraints.StartMonth = -1;
                                    break;
                            }
                            #endregion

                            g_ScheduleTable.Add(m_WTQScheduleInfo);
                        }
                    }
                } 
                
                //Validate each schedule object and update run time based on constraints.
                ValidateAndUpdateSchedules();
                #endregion

                #region Populate schedule time table with SpecificSchedule objects.
                foreach (XmlNode m_SpecificSchedule in m_ScheduleDefinition.SelectSingleNode("Schedule/SpecificSchedule").ChildNodes)
                {
                    ScheduleInfo m_WTQScheduleInfo = new ScheduleInfo()
                    {
                        ScheduleId = Guid.NewGuid(),
                        WTQFile = m_SpecificSchedule.InnerText,
                        NextRunTimeStamp = Convert.ToDateTime(m_SpecificSchedule.Attributes["ScheduleTimeStamp"].Value),
                        LastRunTimeStamp = DateTime.MinValue,
                        ScheduleConstraints = new Constraints()
                        {
                            StartDayOfMonth = -1,
                            StartDayOfWeek = (DayOfWeek)(-1),
                            StartMonth = -1,
                            StartWeek = -1
                        },
                        IsScheduleValid = true,
                        Interval = ScheduleInterval.Specific
                    };
                    g_ScheduleTable.Add(m_WTQScheduleInfo);
                }
                #endregion
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Checks if the schedule objects in the master time table are valid
        /// and marks them appropriately. Additionally it adjusts the Next schedule time
        /// based on contraints.
        /// </summary>
        private void ValidateAndUpdateSchedules()
        {
            #region Check if the schedule is valid.
            foreach (ScheduleInfo m_ScheduleObject in g_ScheduleTable)
            {
                switch (m_ScheduleObject.Interval)
                {
                    case ScheduleInterval.Daily:
                        m_ScheduleObject.IsScheduleValid = true;
                        break;
                    case ScheduleInterval.Weekly:
                        //Check StartDayOfWeek
                        if ((int)m_ScheduleObject.ScheduleConstraints.StartDayOfWeek == -1)
                            m_ScheduleObject.IsScheduleValid = false;
                        break;
                    case ScheduleInterval.BiWeekly:
                        //Check StartDayOfWeek
                        if ((int)m_ScheduleObject.ScheduleConstraints.StartDayOfWeek == -1)
                            m_ScheduleObject.IsScheduleValid = false;
                        //Check StartWeek
                        if (m_ScheduleObject.ScheduleConstraints.StartWeek < 1 || m_ScheduleObject.ScheduleConstraints.StartWeek > 4)
                            m_ScheduleObject.IsScheduleValid = false;
                        break;
                    case ScheduleInterval.Monthly:
                        //Check StartDayOfMonth
                        if (m_ScheduleObject.ScheduleConstraints.StartDayOfMonth < 1 || m_ScheduleObject.ScheduleConstraints.StartDayOfMonth > 31)
                            m_ScheduleObject.IsScheduleValid = false;
                        break;
                    case ScheduleInterval.BiMonthly:
                        //Check StartDayOfMonth
                        if (m_ScheduleObject.ScheduleConstraints.StartDayOfMonth < 1 || m_ScheduleObject.ScheduleConstraints.StartDayOfMonth > 31)
                            m_ScheduleObject.IsScheduleValid = false;
                        //Check StartMonth
                        if (m_ScheduleObject.ScheduleConstraints.StartMonth < 1 || m_ScheduleObject.ScheduleConstraints.StartMonth > 12)
                            m_ScheduleObject.IsScheduleValid = false;
                        break;
                }
            } 
            #endregion

            #region Update next schedule time based on constraints.
            foreach (ScheduleInfo m_ScheduleObject in g_ScheduleTable)
            {
                if (m_ScheduleObject.IsScheduleValid)
                {
                    switch (m_ScheduleObject.Interval)
                    {
                        case ScheduleInterval.Daily:
                            if ((m_ScheduleObject.NextRunTimeStamp - DateTime.Now) < new TimeSpan(0, 1, 0))
                                m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddDays(1);

                            break;
                        case ScheduleInterval.Weekly:
                            //Day of the Week synchro
                            m_ScheduleObject.NextRunTimeStamp =
                                m_ScheduleObject.NextRunTimeStamp.AddDays(GetDaysToTargetDayOfWeek(m_ScheduleObject.ScheduleConstraints.StartDayOfWeek));

                            if ((m_ScheduleObject.NextRunTimeStamp - DateTime.Now) < new TimeSpan(0, 1, 0))
                                m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddDays((int)ScheduleInterval.Weekly);

                            break;
                        case ScheduleInterval.BiWeekly:
                            //Day of the week synchro
                            m_ScheduleObject.NextRunTimeStamp=
                                m_ScheduleObject.NextRunTimeStamp.AddDays(GetDaysToTargetDayOfWeek(m_ScheduleObject.ScheduleConstraints.StartDayOfWeek));

                            //Week number synchro
                            if (m_ScheduleObject.ScheduleConstraints.StartWeek != GetTargetDateWeekNumber(m_ScheduleObject.NextRunTimeStamp))
                            {
                                if (m_ScheduleObject.ScheduleConstraints.StartWeek > GetTargetDateWeekNumber(m_ScheduleObject.NextRunTimeStamp))
                                {
                                    //Target week in future
                                    m_ScheduleObject.NextRunTimeStamp =
                                        m_ScheduleObject.NextRunTimeStamp.AddDays(7 * (m_ScheduleObject.ScheduleConstraints.StartWeek -
                                                                                       GetTargetDateWeekNumber(m_ScheduleObject.NextRunTimeStamp)));
                                }
                                else
                                {
                                    //Target week in past
                                    m_ScheduleObject.NextRunTimeStamp =
                                        m_ScheduleObject.NextRunTimeStamp.AddDays(7 * (4 - (GetTargetDateWeekNumber(m_ScheduleObject.NextRunTimeStamp) -
                                                                                            m_ScheduleObject.ScheduleConstraints.StartWeek)));

                                    //Re-verify target week number
                                    while (GetTargetDateWeekNumber(m_ScheduleObject.NextRunTimeStamp) != m_ScheduleObject.ScheduleConstraints.StartWeek)
                                        m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddDays(7);
                                }
                            }

                            if ((m_ScheduleObject.NextRunTimeStamp - DateTime.Now) < new TimeSpan(0, 1, 0))
                                m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddDays((int)ScheduleInterval.BiWeekly);

                            break;
                        case ScheduleInterval.Monthly:
                            //Start day of month synchro
                            m_ScheduleObject.NextRunTimeStamp = UpdatedDaysToTargetDateOfMonth(m_ScheduleObject);

                            if ((m_ScheduleObject.NextRunTimeStamp - DateTime.Now) < new TimeSpan(0, 1, 0))
                                m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddMonths(1);

                            break;
                        case ScheduleInterval.BiMonthly:
                            //Start day of month synchro
                            m_ScheduleObject.NextRunTimeStamp = UpdatedDaysToTargetDateOfMonth(m_ScheduleObject);

                            //Start month synchro
                            if (m_ScheduleObject.ScheduleConstraints.StartMonth != m_ScheduleObject.NextRunTimeStamp.Month)
                            {
                                if (m_ScheduleObject.ScheduleConstraints.StartMonth > m_ScheduleObject.NextRunTimeStamp.Month)
                                {
                                    //Target month is in future
                                    m_ScheduleObject.NextRunTimeStamp =
                                        m_ScheduleObject.NextRunTimeStamp.AddMonths(m_ScheduleObject.ScheduleConstraints.StartMonth -
                                                                                    m_ScheduleObject.NextRunTimeStamp.Month);
                                }
                                else
                                {
                                    //Target month is in past
                                    m_ScheduleObject.NextRunTimeStamp =
                                        m_ScheduleObject.NextRunTimeStamp.AddMonths(m_ScheduleObject.ScheduleConstraints.StartMonth % 2);
                                }
                            }

                            if ((m_ScheduleObject.NextRunTimeStamp - DateTime.Now) < new TimeSpan(0, 1, 0))
                                m_ScheduleObject.NextRunTimeStamp = m_ScheduleObject.NextRunTimeStamp.AddMonths(1);

                            break;
                    }
                }
            } 
            #endregion
        }

        /// <summary>
        /// Gets the updated next run timestamp to correspond to the specified target date of the month.
        /// </summary>
        /// <param name="ScheduleObject">The schedule object.</param>
        private DateTime UpdatedDaysToTargetDateOfMonth(ScheduleInfo ScheduleObject)
        {
            if (DateTime.Now.Day != ScheduleObject.ScheduleConstraints.StartDayOfMonth)
            {
                if (ScheduleObject.ScheduleConstraints.StartDayOfMonth > ScheduleObject.NextRunTimeStamp.Day)
                {
                    //Target is in future
                    ScheduleObject.NextRunTimeStamp =
                        ScheduleObject.NextRunTimeStamp.AddDays(ScheduleObject.ScheduleConstraints.StartDayOfMonth
                                                                - ScheduleObject.NextRunTimeStamp.Day);
                }
                else
                {
                    //Target is in past
                    ScheduleObject.NextRunTimeStamp =
                        ScheduleObject.NextRunTimeStamp.AddDays(ScheduleObject.ScheduleConstraints.StartDayOfMonth
                                                                - ScheduleObject.NextRunTimeStamp.Day).AddMonths(1);
                }

                //Re-verify date
                while (ScheduleObject.NextRunTimeStamp.Day != ScheduleObject.ScheduleConstraints.StartDayOfMonth)
                    ScheduleObject.NextRunTimeStamp = ScheduleObject.NextRunTimeStamp.AddDays(1);
            }
            return ScheduleObject.NextRunTimeStamp;
        }

        /// <summary>
        /// Gets the number of days remaining from today to the specified day of the week.
        /// If target day is in past, then the next target day is picked as the reference.
        /// </summary>
        /// <param name="TargetDay">The specified day of the week.</param>
        /// <returns>An object of System.Int32 specifying the number of days.</returns>
        private int GetDaysToTargetDayOfWeek(DayOfWeek TargetDay)
        {
            DateTime m_Today = DateTime.Now;
            int m_NumberOfDays;

            if (TargetDay == m_Today.DayOfWeek)
            {
                //Today is the day :)
                m_NumberOfDays = 0;
            }
            else
            {
                //Today is not the day :(
                if (m_Today.DayOfWeek > TargetDay)
                {
                    //Target weekday is in past.
                    m_NumberOfDays = 7 - (m_Today.DayOfWeek - TargetDay);
                }
                else
                {
                    //Target weekday is in future
                    m_NumberOfDays = TargetDay - m_Today.DayOfWeek;
                }
            }

            return m_NumberOfDays;
        }

        /// <summary>
        /// Gets the week number for the specified target date.
        /// </summary>
        /// <param name="TargetDate">The target date</param>
        /// <returns>An object of System.Int32 indicating the week number.</returns>
        private int GetTargetDateWeekNumber(DateTime TargetDate)
        {
            int m_CurrentDate = TargetDate.Date.Day;

            if (m_CurrentDate <= 7)
                return 1;
            else
            {
                if (m_CurrentDate >= 8 && m_CurrentDate <= 14)
                    return 2;
                else
                {
                    if (m_CurrentDate >= 15 && m_CurrentDate <= 21)
                        return 3;
                    else
                        return 4;
                }
            }
        }

        /// <summary>
        /// Maps the raw week day name to the internal enum DayOfWeek.
        /// </summary>
        /// <param name="RawWeekDayName">The raw day of the week name.</param>
        /// <returns>An object of System.DayOfWeek.</returns>
        private DayOfWeek GetDayOfWeekName(string RawWeekDayName)
        {
            switch (RawWeekDayName.ToUpper())
            {
                case "MONDAY":
                    return DayOfWeek.Monday;
                case "TUESDAY":
                    return DayOfWeek.Tuesday;
                case "WEDNESDAY":
                    return DayOfWeek.Wednesday;
                case "THURSDAY":
                    return DayOfWeek.Thursday;
                case "FRIDAY":
                    return DayOfWeek.Friday;
                case "SATURDAY":
                    return DayOfWeek.Saturday;
                case "SUNDAY":
                    return DayOfWeek.Sunday;
                default:
                    return (DayOfWeek)(-1);
            }
        }

        /// <summary>
        /// Gets the month number from the raw month name.
        /// </summary>
        /// <param name="RawMonthName"></param>
        /// <returns></returns>
        private int GetMonth(string RawMonthName)
        {
            switch (RawMonthName.ToUpper())
            {
                case "JANUARY":
                    return 1;
                case "FEBURARY":
                    return 2;
                case "MARCH":
                    return 3;
                case "APRIL":
                    return 4;
                case "MAY":
                    return 5;
                case "JUNE":
                    return 6;
                case "JULY":
                    return 7;
                case "AUGUST":
                    return 8;
                case "SEPTEMBER":
                    return 9;
                case "OCTOBER":
                    return 10;
                case "NOVEMBER":
                    return 11;
                case "DECEMBER":
                    return 12;
                default:
                    return -1;
            }
        }

        /// <summary>
        /// Updates the last run timestamp and the next run timestamp of the
        /// specfied schedule.
        /// </summary>
        /// <param name="ScheduleId">The Id of the schedule whose timestamp is to be updated.</param>
        /// <param name="LastScheduleTime">The last schedule timestamp of this schedule.</param>
        public void UpdateScheduleRunTime(Guid ScheduleId, DateTime LastScheduleTime)
        {
            foreach (ScheduleInfo m_Schedule in g_ScheduleTable)
            {
                if (m_Schedule.ScheduleId == ScheduleId)
                {
                    m_Schedule.LastRunTimeStamp = LastScheduleTime;
                    if (m_Schedule.Interval != ScheduleInterval.Specific)   //Only update recurring schedule
                        m_Schedule.NextRunTimeStamp = m_Schedule.NextRunTimeStamp.AddDays((int)m_Schedule.Interval);
                }
            }
        }

        /// <summary>
        /// Gets the schedules that needs to be executed for this
        /// 1 hour period.
        /// </summary>
        /// <returns>An object of ScheduleInfoCollection containing the schedules for this hour.</returns>
        public ScheduleInfoCollection GetValidSchedulesForCurrentHour()
        {
            ScheduleInfoCollection m_SchedulesToExecute = new ScheduleInfoCollection();
            int m_CurrentHour = DateTime.Now.Hour;

            foreach (ScheduleInfo m_Schedule in g_ScheduleTable)
            {
                if (m_Schedule.IsScheduleValid)
                {
                    if (m_Schedule.NextRunTimeStamp.Date.CompareTo(DateTime.Now.Date) == 0)
                    {
                        if (m_Schedule.NextRunTimeStamp.Hour == m_CurrentHour)
                            m_SchedulesToExecute.Add(m_Schedule);
                    }
                }
            }

            return m_SchedulesToExecute;
        }

        /// <summary>
        /// Gets all the schedules defined in the global schedule table.
        /// </summary>
        /// <returns>An object of ScheduleInfoCollection containing all the defined schedules.</returns>
        public ScheduleInfoCollection GetAllSchedules()
        {
            return g_ScheduleTable;
        }

        /// <summary>
        /// Gets the valid schedules that need to be executed for the specified time period.
        /// </summary>
        /// <param name="StartTimeStamp">The start date-time for the period.</param>
        /// <param name="EndTimeStamp">The end date-time for the period.</param>
        /// <returns></returns>
        public ScheduleInfoCollection GetValidSchedules(DateTime StartTimeStamp, DateTime EndTimeStamp)
        {
            ScheduleInfoCollection m_SchedulesToExecute = new ScheduleInfoCollection();

            foreach (ScheduleInfo m_Schedule in g_ScheduleTable)
            {
                if (m_Schedule.IsScheduleValid)         //Add only valid schedules
                    if (m_Schedule.NextRunTimeStamp >= StartTimeStamp && m_Schedule.NextRunTimeStamp <= EndTimeStamp)
                        m_SchedulesToExecute.Add(m_Schedule);
            }

            return m_SchedulesToExecute;
        }

        /// <summary>
        /// Gets the time remaining until the specfied schedule will be executed. 
        /// </summary>
        /// <param name="Schedule">The schedule whose time to execution needs to be found.</param>
        /// <returns>An object of System.TimeSpan indicating the time remaining.</returns>
        public TimeSpan GetTimeToSchedule(ScheduleInfo Schedule)
        {
            return (Schedule.NextRunTimeStamp.TimeOfDay.Subtract(DateTime.Now.TimeOfDay));
        }

        /// <summary>
        /// Gets the last schedule time of the specified Schedule.
        /// </summary>
        /// <param name="ScheduleId">The Id of the schedule whose last schedule time needs to be found.</param>
        /// <returns>An object of System.DateTime. Returns DateTime.Minvalue if the schedule does not exist
        /// or if the schedule has not been executed so far.</returns>
        public DateTime GetLastScheduleTime(Guid ScheduleId)
        {
            foreach (ScheduleInfo m_Schedule in g_ScheduleTable)
            {
                if (m_Schedule.ScheduleId == ScheduleId)
                    return m_Schedule.LastRunTimeStamp;
            }
            return DateTime.MinValue;
        }

        /// <summary>
        /// Gets the next schedule time of the specified Schedule.
        /// </summary>
        /// <param name="ScheduleId">The Id of the schedule whose next schedule time needs to be found.</param>
        /// <returns>An object of System.DateTime. Returns DateTime.Maxvalue if the schedule does not exist.</returns>
        public DateTime GetNextScheduleTime(Guid ScheduleId)
        {
            foreach (ScheduleInfo m_Schedule in g_ScheduleTable)
            {
                if (m_Schedule.ScheduleId == ScheduleId)
                    return m_Schedule.NextRunTimeStamp;
            }
            return DateTime.MaxValue;
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\ScheduleInfo.cs ===
﻿using System;
using System.Text;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    /// <summary>
    /// Indicates the interval after which this job will be run.
    /// </summary>
    public enum ScheduleInterval
    {
        /// <summary>
        /// Run everyday.
        /// </summary>
        Daily = 1,
        /// <summary>
        /// Run every week.
        /// </summary>
        Weekly = 7,
        /// <summary>
        /// Run every two weeks.
        /// </summary>
        BiWeekly = 14,
        /// <summary>
        /// Run every month.
        /// </summary>
        Monthly = 30,
        /// <summary>
        /// Run every 2 months.
        /// </summary>
        BiMonthly = 60,
        /// <summary>
        /// Run on the specified timestamp.
        /// </summary>
        Specific = 0
    }

    /// <summary>
    /// Indicates the Schedule information about a WTQ file.
    /// </summary>
    public class ScheduleInfo
    {
        /// <summary>
        /// The unique Id of this schedule.
        /// </summary>
        public Guid ScheduleId
        {
            get;
            set;
        }

        /// <summary>
        /// The WTQ file to be scheduled.
        /// </summary>
        public string WTQFile
        {
            get;
            set;
        }

        /// <summary>
        /// The interval after which the WTQ will be scheduled again.
        /// </summary>
        public ScheduleInterval Interval
        {
            get;
            set;
        }

        /// <summary>
        /// The timestamp when the WTQ was last scheduled.
        /// </summary>
        public DateTime LastRunTimeStamp
        {
            get;
            set;
        }

        /// <summary>
        /// The timestamp when the WTQ will be schdeuled next.
        /// </summary>
        public DateTime NextRunTimeStamp
        {
            get;
            set;
        }

        /// <summary>
        /// The additional schedule constraints associated with this schedule.
        /// </summary>
        public Constraints ScheduleConstraints
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether this schedule is valid or not.
        /// </summary>
        public bool IsScheduleValid
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents the additional constraints.
    /// </summary>
    public class Constraints
    {
        /// <summary>
        /// Indicates the day of the week when this schedule should start executing.
        /// </summary>
        public DayOfWeek StartDayOfWeek
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates the week number (1-4) of the specified month when this
        /// schedule should start executing.
        /// </summary>
        public int StartWeek
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates the day of the month when this schedule should start executing..
        /// </summary>
        public int StartDayOfMonth
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates the month when this schedule should start executing.
        /// </summary>
        public int StartMonth
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon.Designer.cs ===
﻿namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    partial class WTTAutoScheduleDaemon
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            // 
            // WTTAutoScheduleDaemon
            // 
            this.CanShutdown = true;
            this.ServiceName = "WTTAutoScheduleDaemon";

        }

        
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WTTAutoScheduleDaemon")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft Corp")]
//[assembly: AssemblyProduct("WTTAutoScheduleDaemon")]
//[assembly: AssemblyCopyright("Copyright © Microsoft Corp 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("9b00ef07-9f93-4da2-af96-ffa458626e4f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon.cs ===
﻿using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceProcess;
using System.Text;
using System.Threading;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    partial class WTTAutoScheduleDaemon : ServiceBase
    {
        private DaemonLogger g_DaemonLogger = null;
        private ScheduleEngine g_Scheduler = null;
        private Mutex g_LogMutex = null;
        private Mutex g_ScheduleEngineMutex = null;
        private Thread[] g_SpawnedThreads = null;
        private TimeSpan g_ScheduleTimeOut = new TimeSpan(0, 0, 30);
        private TimeSpan G_SCHEDULEINTERVAL = new TimeSpan(1, 0, 0);
        private AutoResetEvent g_ResetEvent = new AutoResetEvent(false);
        private Thread g_WorkerThread = null;

        public WTTAutoScheduleDaemon()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            ScheduleInfoCollection m_AllSchedules = null;

            #region Init Logger
            try
            {
                string m_LogFileName = System.IO.Path.GetDirectoryName
                                            (System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6)
                                            + @"\WTTAutoScheduleDaemon.log";

                g_DaemonLogger = new DaemonLogger(m_LogFileName);
            }
            catch (Exception Error)
            {
                EventLog.WriteEntry("Unable to create log file for service.", EventLogEntryType.Error);
                EventLog.WriteEntry("Error returned was: " + Error.ToString());
                this.Stop();
            }
            #endregion

            #region Init required objects
            try
            {
                g_Scheduler = new ScheduleEngine();
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Schedule Engine loaded. Global TimeTable created.");
                g_LogMutex = new Mutex(true, "Logger");
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Logger mutex created.");
                g_ScheduleEngineMutex = new Mutex(true, "ScheduleEngine");
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "ScheduleEngine mutex created.");
            }
            catch (Exception Error)
            {
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, "Error occured in init phase.");
                g_DaemonLogger.WriteLine(Error);
                g_DaemonLogger.Close();
                g_LogMutex = null;
                g_ScheduleEngineMutex = null;
                this.Stop();
            }
            #endregion

            #region Check and dump all invalid schedules
            try
            {
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Checking for invalid schedules ...");
                m_AllSchedules = g_Scheduler.GetAllSchedules();
                foreach (ScheduleInfo m_Schedule in m_AllSchedules)
                {
                    if (!m_Schedule.IsScheduleValid)
                    {
                        g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Warning, "Invalid schedule found:");
                        g_DaemonLogger.WriteLine(m_Schedule);
                    }
                }
                m_AllSchedules = null;
            }
            catch (Exception Error)
            {
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, "Error occured in check for invalid schedule phase.");
                g_DaemonLogger.WriteLine(Error);
                g_DaemonLogger.Close();
                g_LogMutex = null;
                g_ScheduleEngineMutex = null;
                this.Stop();
            }
            #endregion

            #region Start Worker Thread and Release Mutex
            try
            {
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Starting Worker thread ...");
                g_WorkerThread = new Thread(new ThreadStart(WorkerThread));
                g_WorkerThread.Start();
            }
            catch (Exception Error)
            {
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, "Unable to invoke worker thread. Stopping service ...");
                g_DaemonLogger.WriteLine(Error);
                g_DaemonLogger.Close();
                this.Stop();
            }
            //Release Mutex
            g_LogMutex.ReleaseMutex();
            g_ScheduleEngineMutex.ReleaseMutex(); 
            #endregion
        }

        protected override void OnStop()
        {
            g_LogMutex.WaitOne();
            g_ScheduleEngineMutex.WaitOne();
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Warning, "Stop event received. Performing cleanup ...");

            #region Abort all spawned threads
            foreach (Thread m_ScheduleThread in g_SpawnedThreads)
            {
                if (m_ScheduleThread.IsAlive)
                {
                    try
                    {
                        g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Warning, m_ScheduleThread.Name, "Aborting thread ...");
                        m_ScheduleThread.Abort();
                    }
                    catch (Exception Error)
                    {
                        g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, "Error occured while aborting thread.");
                        g_DaemonLogger.WriteLine(Error);
                        continue;
                    }
                }
            }
            #endregion

            //Signal Worker thread
            g_ResetEvent.Set();

            #region Wait for worker thread to exit for 10 secs, else force abort
            if (g_WorkerThread.Join(new TimeSpan(0, 0, 10)))
            {
                //Thread terminated gracefully
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Worker thread exited.");
            }
            else
            {
                //Force abort Worker thread
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Worker thread did not exit. Aborting thread ...");
                g_WorkerThread.Abort();
            }
            #endregion

            #region Perform Cleanup
            g_DaemonLogger.Close();
            g_LogMutex.ReleaseMutex();
            g_LogMutex = null;
            g_ScheduleEngineMutex.ReleaseMutex();
            g_ScheduleEngineMutex = null;
            #endregion

        }

        protected override void OnShutdown()
        {
            this.OnStop();
            base.OnShutdown();
        }

        /// <summary>
        /// Invokes the worker thread.
        /// </summary>
        public void WorkerThread()
        {
            Timer m_HourlyTimer = null;

            g_LogMutex.WaitOne();
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Worker Thread initialized.");

            //Setup Timer
            m_HourlyTimer = new Timer(new TimerCallback(SetupSchedule), null, new TimeSpan(0, 0, 2), G_SCHEDULEINTERVAL);

            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Timer initialized with interval: " + G_SCHEDULEINTERVAL.ToString());
            g_LogMutex.ReleaseMutex();

            //Wait until exit event is signalled
            g_ResetEvent.WaitOne();

            //Destroy Timer
            m_HourlyTimer.Dispose();
        }

        /// <summary>
        /// Sets up the schedule for the current hour.
        /// </summary>
        /// <param name="StateInfo">State object.</param>
        public void SetupSchedule(object StateInfo)
        {
            ScheduleInfoCollection m_CurrentHourSchedules = null;
            ArrayList m_PreviousScheduleThreads = new ArrayList();
            int m_ThreadCount = 0;

            //Check previous Thread states
            if (g_SpawnedThreads != null)
            {
                for (m_ThreadCount = 0; m_ThreadCount < g_SpawnedThreads.Length; m_ThreadCount++)
                {
                    if (g_SpawnedThreads[m_ThreadCount].IsAlive)
                    {
                        g_LogMutex.WaitOne();
                        g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Warning, "Thread '" + g_SpawnedThreads[m_ThreadCount].Name + "' is still active.");
                        g_LogMutex.ReleaseMutex();
                        m_PreviousScheduleThreads.Add(g_SpawnedThreads[m_ThreadCount]);
                        g_SpawnedThreads[m_ThreadCount] = null;
                        m_ThreadCount++;
                    }
                }
                g_SpawnedThreads = null;
            }

            //Get schedules for the current hour
            g_ScheduleEngineMutex.WaitOne();
            g_LogMutex.WaitOne();
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Checking schedule timetable for " + DateTime.Now.ToString() + " to " + DateTime.Now.AddHours(1).ToString());
            m_CurrentHourSchedules = g_Scheduler.GetValidSchedules(DateTime.Now, DateTime.Now.AddHours(1));
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, "Number of schedules for this hour: " + m_CurrentHourSchedules.Count.ToString());
            g_LogMutex.ReleaseMutex();
            g_ScheduleEngineMutex.ReleaseMutex();
            g_SpawnedThreads = new Thread[m_CurrentHourSchedules.Count + m_PreviousScheduleThreads.Count];

            m_ThreadCount = 0;
            foreach (ScheduleInfo m_CurrentHourSchedule in m_CurrentHourSchedules)
            {
                g_SpawnedThreads[m_ThreadCount] = new Thread(new ParameterizedThreadStart(ExecuteSchedule));
                m_ThreadCount++;
            }

            //Add the previous running threads to the current list
            foreach (Thread m_PreviousThread in m_PreviousScheduleThreads)
            {
                if (m_PreviousThread.IsAlive)
                {
                    g_SpawnedThreads[m_ThreadCount] = m_PreviousThread;
                    m_ThreadCount++;
                }
            }

            //Start each thread
            m_ThreadCount = 0;
            foreach (ScheduleInfo m_CurrentHourSchedule in m_CurrentHourSchedules)
            {
                try
                {
                    g_SpawnedThreads[m_ThreadCount].Start(m_CurrentHourSchedule);
                    m_ThreadCount++;
                }
                catch (Exception Error)
                {
                    g_LogMutex.WaitOne();
                    g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, m_CurrentHourSchedule.ScheduleId.ToString(), "Error while starting thread for this schedule.");
                    g_DaemonLogger.WriteLine(Error);
                    g_LogMutex.ReleaseMutex();
                    continue;
                }
            }
        }

        /// <summary>
        /// Executes the specified Schedule.
        /// </summary>
        /// <param name="Schedule">The Schedule to execute.</param>
        public void ExecuteSchedule(object ScheduleInfo)
        {
            WTTSchedulerWrapper m_WTTScheduler = null;
            TimeSpan m_TimeToSleep;
            bool m_IsScheduled = false;
            ScheduleInfo Schedule = (ScheduleInfo)ScheduleInfo;

            //Name the thread
            Thread.CurrentThread.Name = Schedule.ScheduleId.ToString();

            //Check time to execute and sleep for that time (if required).
            g_ScheduleEngineMutex.WaitOne();
            g_LogMutex.WaitOne();
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Thread Started");
            m_TimeToSleep = g_Scheduler.GetTimeToSchedule(Schedule);
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Thread will sleep for " + m_TimeToSleep.ToString());
            g_LogMutex.ReleaseMutex();
            g_ScheduleEngineMutex.ReleaseMutex();

            if (m_TimeToSleep.TotalMilliseconds > 1)
                Thread.Sleep(m_TimeToSleep);

            //Try and execute schedule.
            try
            {
                g_LogMutex.WaitOne();
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Trying to schedule WTQ '" + Schedule.WTQFile + "'");
                g_LogMutex.ReleaseMutex();
                m_WTTScheduler = new WTTSchedulerWrapper(Schedule.WTQFile, g_DaemonLogger);
                m_IsScheduled = m_WTTScheduler.ScheduleWTQ(g_ScheduleTimeOut);
                if (m_IsScheduled)
                {
                    g_LogMutex.WaitOne();
                    g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Successfully scheduled WTQ.");
                    g_LogMutex.ReleaseMutex();

                    //Update Global TimeTable
                    g_ScheduleEngineMutex.WaitOne();
                    g_Scheduler.UpdateScheduleRunTime(Schedule.ScheduleId, DateTime.Now);
                    g_ScheduleEngineMutex.ReleaseMutex();
                }
                else
                {
                    g_LogMutex.WaitOne();
                    g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Unable to schedule WTQ.");
                    g_LogMutex.ReleaseMutex();

                    //Update Global TimeTable
                    g_ScheduleEngineMutex.WaitOne();
                    g_Scheduler.UpdateScheduleRunTime(Schedule.ScheduleId, Schedule.LastRunTimeStamp);
                    g_ScheduleEngineMutex.ReleaseMutex();
                }
            }
            catch (Exception Error)
            {
                g_LogMutex.WaitOne();
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, Thread.CurrentThread.Name, "An error occured while trying to schedule the following WTQ:");
                g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Exception, Thread.CurrentThread.Name, Schedule.WTQFile);
                g_DaemonLogger.WriteLine(Error);
                g_LogMutex.ReleaseMutex();

                //Update Global TimeTable
                g_ScheduleEngineMutex.WaitOne();
                g_Scheduler.UpdateScheduleRunTime(Schedule.ScheduleId, Schedule.LastRunTimeStamp);
                g_ScheduleEngineMutex.ReleaseMutex();
            }

            //Dump updated schedule info
            g_LogMutex.WaitOne();
            g_ScheduleEngineMutex.WaitOne();
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Updated Schedule Info:");
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "WTQ: " + Schedule.WTQFile);
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "LastSchedule: " + g_Scheduler.GetLastScheduleTime(Schedule.ScheduleId).ToString());
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "NextSchedule: " + g_Scheduler.GetNextScheduleTime(Schedule.ScheduleId).ToString());

            //Exit Thread
            g_DaemonLogger.WriteLine(DaemonLogger.LogLevel.Message, Thread.CurrentThread.Name, "Exiting Thread.");
            g_ScheduleEngineMutex.ReleaseMutex();
            g_LogMutex.ReleaseMutex();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\WTTAutoScheduleDaemon\WTTAutoScheduleDaemon\WTTSchedulerWrapper.cs ===
﻿using System;
using System.Text;
using System.Xml;
using System.IO;
using Microsoft.DistributedAutomation;
using Microsoft.DistributedAutomation.Diagnostics;
using Microsoft.DistributedAutomation.Jobs;
using System.Threading;

namespace Test.Common.Utilities.WTTAutoScheduleDaemon
{
    public class WTTSchedulerWrapper
    {
        private string g_WTQFileName = String.Empty;
        private ScheduleHelper g_WTTScheduleHelper = null;
        private DaemonLogger g_Logger = null;
        private bool g_ScheduleResult = false;

        /// <summary>
        /// Initializes a new instance of the WTTSchedulerWrapper class
        /// with the specified WTQ File name and the Logger.
        /// </summary>
        /// <param name="WTQFileName">The WTT Scheduler WTQ file.</param>
        /// <param name="Logger">The Daemon Logger instance to use to log.</param>
        public WTTSchedulerWrapper(string WTQFileName, DaemonLogger Logger)
        {
            g_Logger = Logger;
            g_WTQFileName = WTQFileName;

            try
            {
                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "Reading Schedule WTQ file ...");
                g_WTTScheduleHelper = new ScheduleHelper();
                using (XmlTextReader m_XMLReader = new XmlTextReader(new StreamReader(g_WTQFileName)))
                    g_WTTScheduleHelper.ReadXml(m_XMLReader);
                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "Schedule WTQ file read successfully.");
            }
            catch (Exception)
            {
                g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, "Error occured while reading Schedule WTQ file.");
                throw;
            }
        }

        /// <summary>
        /// Schedule the selected WTQ file.
        /// </summary>
        /// <param name="TimeOut">The time within which this WTQ has to be scheduled.</param>
        /// <returns>True if the WTQ was successfully scheduled, else false.</returns>
        public bool ScheduleWTQ(TimeSpan TimeOut)
        {
            Thread m_ScheduleThread = new Thread(new ThreadStart(ScheduleDelegate));
            m_ScheduleThread.Name=Thread.CurrentThread.Name;
            m_ScheduleThread.Start();

            if (m_ScheduleThread.Join(TimeOut))
            {
                //Schedule Timeout was not reached.
                m_ScheduleThread = null;
                return g_ScheduleResult;
            }
            else
            {
                //Timeout occured.
                try
                {
                    g_Logger.WriteLine(DaemonLogger.LogLevel.Warning, System.Threading.Thread.CurrentThread.Name, "Schedule timed out. Aborting ...");
                    m_ScheduleThread.Abort();
                    m_ScheduleThread = null;
                }
                catch (Exception Error)
                {
                    g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, "Error occured while trying to abort timed out thread.");
                    g_Logger.WriteLine(System.Threading.Thread.CurrentThread.Name, Error);
                    //throw;
                }
                return false;
            }
        }

        /// <summary>
        /// The delegate for the Schedule thread.
        /// </summary>
        private void ScheduleDelegate()
        {
            try
            {
                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "Scheduling the specified WTQ file ...");
                using (g_WTTScheduleHelper.SourceDataStore)
                {
                    using (g_WTTScheduleHelper.DestinationDataStore)
                    {
                        ScheduleOutput m_ScheduleOutput = g_WTTScheduleHelper.ScheduleJobs();
                        if (m_ScheduleOutput.ScheduleMessageCollection.Count <= 0)
                        {
                            g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "The WTQ file '" + g_WTQFileName + "' has been successfully scheduled.");
                            g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "The following Jobs were scheduled by this WTQ:");

                            IQueryReader m_QueryReader = m_ScheduleOutput.ResultQueryReader;
                            Result m_WTTJobResult = (Result)m_QueryReader.GetNextObject();

                            while (m_WTTJobResult != null)
                            {
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "     Job ID: " + m_WTTJobResult.JobId);
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "     Schedule Time: " + m_WTTJobResult.CreateTime.ToString());
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "     Result ID: " + m_WTTJobResult.Id);
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Message, System.Threading.Thread.CurrentThread.Name, "     ======================================================");

                                m_WTTJobResult = (Result)m_QueryReader.GetNextObject();
                            }

                            if (m_QueryReader != null)
                                m_QueryReader.Close();

                            g_ScheduleResult = true;
                        }
                        else
                        {
                            g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, "The WTQ file '" + g_WTQFileName + "' could not be scheduled.");
                            foreach (ScheduleMessage m_Message in m_ScheduleOutput.ScheduleMessageCollection)
                            {
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, "Job: " + m_Message.JobId + "-" + m_Message.JobName);
                                g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, m_Message.Message);
                            }
                        }
                    }
                }
            }
            catch (Exception Error)
            {
                g_Logger.WriteLine(DaemonLogger.LogLevel.Exception, System.Threading.Thread.CurrentThread.Name, "Error occured while trying to schedule the specified WTQ file.");
                g_Logger.WriteLine(System.Threading.Thread.CurrentThread.Name, Error);
                //throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\XSSProbe\XSSTests\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using XSSOM;
using System.Configuration;
using System.Diagnostics;
using System.IO;

namespace Test.Common.Utilities.XSSTests
{
    class Program
    {
        [STAThread]
        static int Main(string[] args)
        {
           // Console.ReadLine();
            //Storing the Threshold value of error Percentage and Errors.

            // WantToTestSingleURL : It takes single char as input .If you want to run this tool against single URL pass Y else N.

            //URLName : It takes the URL value which you wanted to test.

            //PostData: It takes the post data value if any.

            //WantToTestFromScenarioFile : It takes single char as input . If you want to run this tool against a scenario file then pass Y else N.

            //PathofTheScenarioFile: Path of the scenario file. If the above parameter is Y then provide value to it or else by default it will be none.

            //ResultPath: coantains the path where you wanted to save the result .zxml file. (default path of the result file is [systemDrive]\tools folder)

            //DoYouWantToUseLiveCred: It takes single char as input . If you want to pass the Live credentials then pass Y else N.

            //User :Takes user name . Default value is wgxtestaccount@live.com <mailto:wgxtestaccount@live.com>

            //Pwd: Takes password. Default value is b4itfun!.


            int Exitcode = 0;
            int noofParametersPassed = args.Length;
            string wantToTestSingleURL = "Y";
            string uRLName = "http://zone.msn.com";
            string postData = "";
            string wantToTestFromScenarioFile = "N";
            string pathToTheScenarioFile = "\\\\SECGMUXUTLSGA01\\Tools\\XSSResults\\XssScenario.Xml";
            string resultPath = "\\\\SECGMUXUTLSGA01\\Tools\\XSSResults";
            string doYouWantToUseLiveCred = "N";
            string user = "wgxtestaccount@live.com";
            string pwd = "b4itfun!";
            string wantToSendMail = "NO";
            string resultPathmodified = "";
            string pathofXMLresult = "";
            string pathofTheBody = "";
            string filename = "";


            if (noofParametersPassed != 0)
            {
                //Writing Help for this tool
                #region Help

                if (args[0] == "?" || args[0] == "/?" || args[0].ToLower() == "help")
                {
                    Exitcode = 100;
                    Console.WriteLine("This tool takes 10 parameters as input and all are optional parameters.");
                    Console.WriteLine("XSSTests.exe /WantToTestSingleURL: /URLName: /PostData: /WantToTestFromScenarioFile: /PathofTheScenarioFile: /ResultPath: /WantTouseLiveCred: /user: /pwd: /wantToSendMail:");
                    Console.WriteLine("Example:");
                    Console.WriteLine("XSSTests.exe /WantToTestSingleURL:Y /URLName:http://zone.msn.com /WantTouseLiveCred:Y /user:wgxtestaccount@live.com /pwd:B4itfun!");
                    Console.WriteLine("");
                    return Exitcode;

                }
                #endregion help

                else
                {
                    //Parsing the passed parameter values.
                    #region Parsing the input parameters.
                    string[] ch = new string[5];
                    string argutype;
                    char[] sep = new char[] { ':' };
                    ch = args[0].Split(sep);

                    for (int i = 0; i <= args.Length - 1; i++)
                    {
                        ch = args[i].Split(sep);
                        argutype = ch[0];

                        if (args[i].IndexOf(':') == -1)
                        {
                            Console.WriteLine("The parameter {0} has been passed in wrong format. May be it is missing the ':' or the value.", args[i]);
                            Exitcode = 4;
                            return Exitcode;
                        }
                        else
                        {
                            if (ch[1] == "")
                            {
                                Console.WriteLine("You are trying to pass {0} parameter but you forget to mention its value. If you want to use its default value then please do not specify this parameter and tool will automatically use its default value.", args[i]);
                                Exitcode = 5;
                                return Exitcode;
                            }
                        }

                        if (argutype.ToLower() == "/WantToTestSingleURL".ToLower())
                        {

                            wantToTestSingleURL = ch[1];

                        }
                        else
                        {
                            if (argutype.ToLower() == "/URLName".ToLower())
                            {
                                if (args[i].Contains("http:"))
                                {
                                    uRLName = ch[1] + ":" + ch[2];
                                }
                                else
                                {
                                    uRLName = "http://" + ch[1];
                                }


                            }
                            else
                            {
                                if (argutype.ToLower() == "/PostData".ToLower())
                                {
                                    if (ch[1].ToLower() != "none")
                                    {
                                        postData = ch[1];
                                    }
                                }
                                else
                                {
                                    if (argutype.ToLower() == "/WantToTestFromScenarioFile".ToLower())
                                    {
                                        wantToTestFromScenarioFile = ch[1];
                                    }
                                    else
                                    {
                                        if (argutype.ToLower() == "/PathofTheScenarioFile".ToLower())
                                        {
                                            if (ch.Length > 2)
                                            {
                                                pathToTheScenarioFile = ch[1] + ":" + ch[2];

                                            }
                                            else
                                            {
                                                pathToTheScenarioFile = ch[1];
                                            }
                                        }
                                        else
                                        {
                                            if (argutype.ToLower() == "/ResultPath".ToLower())
                                            {
                                                if (ch.Length > 2)
                                                {
                                                    resultPath = ch[1] + ":" + ch[2];
                                                }
                                                else
                                                {
                                                    resultPath = ch[1];
                                                }
                                            }
                                            else
                                            {
                                                if (argutype.ToLower() == "/WantTouseLiveCred".ToLower())
                                                {
                                                    doYouWantToUseLiveCred = ch[1];
                                                }
                                                else
                                                {
                                                    if (argutype.ToLower() == "/user".ToLower())
                                                    {
                                                        user = ch[1];
                                                    }
                                                    else
                                                    {
                                                        if (argutype.ToLower() == "/pwd".ToLower())
                                                        {
                                                            pwd = ch[1];
                                                        }
                                                        else
                                                        {
                                                            if (argutype.ToLower() == "/wanttosendmail".ToLower())
                                                            {
                                                                wantToSendMail = ch[1];

                                                            }

                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }

                    #endregion Parsing the input parameters.
                }
            }

            else
            {
                Console.WriteLine("None of the parameter has been passed to the XSSProbe.exe so it is running with all the default values and they are:");
                Console.WriteLine("WantToTestSingleURL:Y");
                Console.WriteLine("URLName:http://zone.msn.com");
                Console.WriteLine("PostData:");
                Console.WriteLine("WantToTestFromScenarioFile:N");
                Console.WriteLine("PathofTheScenarioFile:\\\\SECGMUXUTLSGA01\\Tools\\XSSResults\\XssScenario.Xml");
                Console.WriteLine("ResultPath:\\\\SECGMUXUTLSGA01\\Tools\\XSSResults");
                Console.WriteLine("WantTouseLiveCred:N");
                Console.WriteLine("User:wgxtestaccount@live.com");
                Console.WriteLine("PWD:b4itfun!");
                Console.WriteLine("WantToSendMail:NO");

            }

            XSSUrl xurl = new XSSUrl();
            XSSVirtualTestManager xvtm = new XSSVirtualTestManager(false);

            #region Preparing the XSS Test manager

            if (wantToTestSingleURL.ToLower() == "y" || wantToTestSingleURL.ToLower() == "yes")
            {
                xurl.m_sUrl = uRLName;

                if (postData != "" || postData.ToLower() != "none")
                {
                    xurl.m_sPostData = postData;
                }

                xvtm.AddUrl(xurl);

                if (doYouWantToUseLiveCred.ToLower() == "y" || doYouWantToUseLiveCred.ToLower() == "yes")
                {
                    xvtm.SetLiveCreds(user, pwd, "http://login.live.com", "LBI", "Production");
                }
            }
            else
            {
                if (wantToTestFromScenarioFile.ToLower() == "y" || wantToTestFromScenarioFile.ToLower() == "yes")
                {
                    xvtm.AddUrlUsingScenarioFile(pathToTheScenarioFile);
                    //Log In credential for the scenario file can be set iside the scenario file itself.
                }
            }

            #endregion Preparing the XSS Test manager

            #region executing the XSS Test


            if (xvtm.StartJob())
            {
                XSSTestResultTracker xtrt = xvtm.GetTestResults();
                int month = DateTime.Now.Month;
                int day = DateTime.Now.Day;
                int year = DateTime.Now.Year;
                int hour = DateTime.Now.Hour;
                int minute = DateTime.Now.Minute;
                int seconds = DateTime.Now.Second;


                filename = month.ToString() + "-" + day.ToString() + "-" + year.ToString() + "-" + hour.ToString() + "-" + minute.ToString() + "-" + seconds.ToString();

                if (resultPath[resultPath.Length - 1].ToString() == "\\")
                {
                    resultPathmodified = resultPath + "XSSProbeResultOn-" + filename + ".zxml";

                }
                else
                {
                    resultPathmodified = resultPath + "\\XSSProbeResultOn-" + filename + ".zxml";

                }
                XSSPersistResult.SaveToFile(resultPathmodified, xtrt, true, false);

                //resultPathmodified = resultPath + "\\XSSProbeResultOn-" + filename + ".zxml";

                #region Convert to .XML

                if (resultPath[resultPath.Length - 1].ToString() == "\\")
                {
                    pathofXMLresult = resultPath + "XSSProbeResultOn-" + filename + ".xml";

                }
                else
                {
                    pathofXMLresult = resultPath + "\\XSSProbeResultOn-" + filename + ".xml";

                }

                ZipFile zf = new ZipFile();
                zf.OpenFile(resultPathmodified, false);
                zf.SaveStream(pathofXMLresult);
                Console.WriteLine("Concerted XML file is");
                Console.WriteLine(pathofXMLresult);

                #endregion Convert to .XML

                #region PrintTheResultInConsole
                ////XSSTestResultSummarizer xtrs = new XSSTestResultSummarizer(xtrt);

                ////xtrs.Summarize();
                ////for (int i = 0; i < xtrs.Count(); i++)
                ////{
                ////    Print the Url/Param name it checked
                ////    Console.WriteLine("\n - [Tested Param]: " + xtrs.GetItem(i).m_sParamName + " [Url]: " + xtrs.GetItem(i).m_sSourceUrl);

                ////    Run through the test case that it ran through for this url/param combination
                ////    for (int j = 0; j < xtrs.GetItem(i).Count(); j++)
                ////    {
                ////        if (xtrs.GetItem(i).GetItem(j).m_bExploited)
                ////{
                ////    Test case that caused exploit
                ////    Console.WriteLine("\t- [Exploited!]");
                ////    Console.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                ////    Console.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                ////    Console.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));

                ////}

                ////        if (xtrs.GetItem(i).GetItem(j).m_bScriptError)
                ////        {
                ////            //Test case that caused script error - make sure to follow up with manual
                ////            //testing if no exploit was found!
                ////            Console.WriteLine("\t- [Script Error Found!]");
                ////            Console.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                ////            Console.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                ////            Console.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));
                ////            Console.WriteLine("\t\t- [Script Error Info]:" + xtrs.GetItem(i).GetItem(j).m_sComment);
                ////        }

                ////        if (xtrs.GetItem(i).GetItem(j).m_bTimeOut)
                ////        {
                ////            //Test case that caused timeout
                ////            Console.WriteLine("\t- [Time out when loading page detected!]");
                ////            Console.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                ////            Console.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                ////            Console.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));
                ////            Console.WriteLine("\t\t- [Comment]:" + xtrs.GetItem(i).GetItem(j).m_sComment);

                ////        }

                ////        if (xtrs.GetItem(i).GetItem(j).m_bWarningOrError)
                ////        {
                ////            //Test case that caused a warning or error
                ////            //Retrieve the warning or error comment
                ////            Console.WriteLine("\t- [Warning or Error Found]");
                ////            Console.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                ////            Console.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                ////            Console.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));
                ////            Console.WriteLine("\t\t- [Comment]:" + xtrs.GetItem(i).GetItem(j).m_sComment);
                ////        }

                ////        if (!xtrs.GetItem(i).GetItem(j).m_bExploited &&
                ////           !xtrs.GetItem(i).GetItem(j).m_bScriptError &&
                ////           !xtrs.GetItem(i).GetItem(j).m_bTimeOut &&
                ////           !xtrs.GetItem(i).GetItem(j).m_bWarningOrError)
                ////        {
                ////            Console.WriteLine("\t- [Passed]");
                ////            Console.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                ////            Console.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                ////            Console.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));
                ////            Console.WriteLine("\t\t- [Comment]:" + xtrs.GetItem(i).GetItem(j).m_sComment);

                ////        }

                ////    }
                ////}
                #endregion PrintTheResultInConsole

                #region checkforAnError

                XSSTestResultSummarizer xtrs = new XSSTestResultSummarizer(xtrt);
                xtrs.Summarize();

                for (int i = 0; i < xtrs.Count() - 1; i++)
                {

                    if (xtrs.GetItem(i).m_bExploited)
                    {
                        Exitcode = 1;
                        break;
                    }
                }

                if (Exitcode != 1)
                {
                    for (int i = 0; i < xtrs.Count() - 1; i++)
                    {

                        if (xtrs.GetItem(i).m_bWarningOrError)
                        {
                            Exitcode = 2;
                            break;
                        }
                    }
                }

                #endregion checkforAnError

                #region Create Body of the mail with Exploited URL's


                if (resultPath[resultPath.Length - 1].ToString() == "\\")
                {
                    pathofTheBody = resultPath + "\\ExploietedURLOn-" + filename + ".txt";

                }
                else
                {
                    pathofTheBody = resultPath + "\\ExploietedURLOn-" + filename + ".txt";

                }
                string body = "Here are the results on running the XSSProb tool on " + pathToTheScenarioFile + " scenario file. You can find the detail results at " + resultPathmodified + " and the .XML format of this result file at " + pathofXMLresult + " .";
                FileStream fileStream = new FileStream(pathofTheBody, FileMode.Create);
                StreamWriter streamWriter = new StreamWriter(fileStream);

                streamWriter.WriteLine(body);
                streamWriter.WriteLine();
                streamWriter.WriteLine("***********************************************************");
                streamWriter.WriteLine();


                for (int i = 0; i < xtrs.Count(); i++)
                {
                    //Print the Url/Param name it checked
                    streamWriter.WriteLine("\n" + i + " - [Tested Param]: " + xtrs.GetItem(i).m_sParamName + " [Url]: " + xtrs.GetItem(i).m_sSourceUrl);
                    streamWriter.WriteLine();
                    // Run through the test case that it ran through for this url/param combination
                    for (int j = 0; j < xtrs.GetItem(i).Count(); j++)
                    {
                        if (xtrs.GetItem(i).GetItem(j).m_bExploited)
                        {
                            //Test case that caused exploit
                            streamWriter.WriteLine("\t- [Exploited!]");
                            streamWriter.WriteLine("\t\t- [Url]:" + xtrs.GetItem(i).GetItem(j).m_sSourceUrl);
                            streamWriter.WriteLine("\t\t- [Post Data]:" + xtrs.GetItem(i).GetItem(j).m_sSourcePost);
                            streamWriter.WriteLine("\t\t- [Action Required]:" + XSSTestAction.ToStringDescription(xtrs.GetItem(i).GetItem(j).m_iActionUsed));

                            streamWriter.WriteLine();
                            streamWriter.WriteLine("=====================================================================================");
                        }
                    }

                    streamWriter.WriteLine("***********************************************************");
                }


                streamWriter.Flush();
                streamWriter.Close();
                fileStream.Close();

                #endregion Create Body of the mail with Exploited URL's

            }

            else
            {
                Console.WriteLine("Test case failed.");
                Exitcode = 3;
            }
            #endregion executing the XSS Test
            Console.WriteLine("Going to send mail now");
            Console.WriteLine(wantToSendMail);

            #region SendMail On Exploit or Update mail

            if (wantToSendMail.ToLower() == "yes" || wantToSendMail.ToLower() == "y")
            {
                clsSendmail objSendMail = new clsSendmail();
                int consumetime = 0;

                for (int i = 0; i < 50000; i++)
                { consumetime = consumetime + i; }
                if (Exitcode == 1)
                {
                    string subjectExploit = "\"XSSProbe result update mail -> An exploit has been found\"";

                    objSendMail.sendmail(subjectExploit, pathofTheBody, "exploit");
                }

                else
                {
                    string subjectInfo = "\"XSSProbe result update mail -> Informational mail.\"";

                    objSendMail.sendmail(subjectInfo, pathofTheBody, "info");
                }
               
                Console.WriteLine("mail1 has been sent");

                
            }
            else
            {
                Console.WriteLine("Can not send a mail. Because Send mail option is not been selected(/wantTosendMail:false).");
            }
            #endregion    SendMail On Exploit or Update mail

            return Exitcode;
        }
    }

    public class clsSendmail
    {
        public void sendmail(string subject, string pathofTheBody, string Towhome)
        {
            string To = ConfigurationSettings.AppSettings["To"];
            string From = ConfigurationSettings.AppSettings["From"];
            string Bcc = ConfigurationSettings.AppSettings["Bcc"];
            string ToInfo = ConfigurationSettings.AppSettings["ToInfo"];
            if (Towhome == "info")
            {
                To = ToInfo;
            }
            
            string mail = "smartmail.exe protocol:smtp auth:sspi server:smtphost.redmond.corp.microsoft.com " + "to:" + To + " bcc:" + Bcc + " from:" + From + " subject:" + subject + " body:" + pathofTheBody + " verbose:full";
            Console.WriteLine(mail);
            Process newprocess = new Process();
            newprocess.StartInfo.FileName = "cmd.exe";
            newprocess.StartInfo.Arguments = "/c " + mail;
            newprocess.Start();
            newprocess.WaitForExit();
            newprocess.Close();

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Utilities\XSSProbe\XSSTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("XSSTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("MSIT")]
//[assembly: AssemblyProduct("XSSTests")]
//[assembly: AssemblyCopyright("Copyright © MSIT 2008")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("ff4ec17b-37c8-4573-a686-3d479732cba8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\GameMetadataService.Test\GMSTestData.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Xml.Serialization;

using DataDrivenTest;

namespace GameMetadataService.Test
{
    /// <summary>
    /// Dictionary container for the game test data
    /// The Key is a string for the environment
    /// The Value is a list of GMSGameTestData objects
    /// </summary>
    public class GMSTestData : XmlSerializableDictionary<string, List<GMSGameTestData>>
    {
        public static GMSTestData Deserialize(string embeddedResourceName)
        {
            Assembly myAssembly = Assembly.GetExecutingAssembly();
            Stream xmlData = myAssembly.GetManifestResourceStream(embeddedResourceName);
            XmlSerializer serializer = new XmlSerializer(typeof(GMSTestData));

            return (GMSTestData)serializer.Deserialize(xmlData);
        }
    }

    /// <summary>
    /// Contains relevant game metadata
    /// </summary>
    public class GMSGameTestData
    {
        public uint Id { get; set; }
        public uint[] Variants { get; set; }
        public string GamerTag { get; set; }
        public string SessionId { get; set; }
        public string LCID { get; set; }
        public uint SupportPlatformsBitMask { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\GameMetadataService.Test\GMSParentClass.cs ===
﻿using GameMetadata.Client;
using GameMetadata.Common;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UnitTesting.Web;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Net;
using System.Net.Sockets;
using System.IO;

using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Core.IO;

namespace GameMetadataService.Test
{
    /// <summary>
    /// This class is designed to house all necessary elements for running test data through
    /// GMSUnitTests and GMSWebTests. The intention is to add 
    /// </summary>
    public class GMSParentClass
    {
        #region Define MEMBERS
        public enum GMSRedirectionType
        {
            Game,
            Session,
            Profile
        }

        public struct GMSStruct
        {
            private string _env;
            private string _port;
            private string _gamertag;
            private string _sessionId;
            private uint _gameid;
            private uint[] _variantids;
            private string _lcid;
            private uint _supportedPlatformsBitMask;

            public GMSRedirectionType RedirectType;

            public string BaseRedirectionUri;
            public string SessionRedirectionUri;
            public string GameRedirectionUri;
            public string ProfileRedirectionUri;

            public string WebGameRedirectionResponse;
            public string MobileGameRedirectionResponse;
            public string WebGameSessionResponse;
            public string MobileGameSessionResponse;

            public string Env
            {
                get { return _env; }
                set { _env = value; }
            }

            public string Port
            {
                get { return _port; }
                set { _port = value; }
            }

            public string Gamertag
            {
                get { return _gamertag; }
                set { _gamertag = value; }
            }

            public string SessionId
            {
                get { return _sessionId; }
                set { _sessionId = value; }
            }

            public uint Gameid
            {
                get { return _gameid; }
                set { _gameid = value; }
            }

            public uint[] Variantids
            {
                get { return _variantids; }
                set { _variantids = value; }
            }

            public string Lcid
            {
                get { return _lcid; }
                set { _lcid = value; }
            }

            public uint SupportPlatformsBitMask
            {
                get { return _supportedPlatformsBitMask; }
                set { _supportedPlatformsBitMask = value; }
            }
        }
        #endregion

        #region Define PROPERTIES
        public string gmsService = String.Empty;
        public string gmsRedirectService = String.Empty;
        public List<uint> gameidList = new List<uint>();
        public List<uint> variantidList = new List<uint>();

        public IGameMetadataClient gmclient;
        public Configuration config;
        public ExeConfigurationFileMap configFileMap = new ExeConfigurationFileMap();

        private GMSStruct _gmsStruct = new GMSStruct();
        public GMSStruct gmsStruct
        {
            get { return _gmsStruct; }
            protected set { _gmsStruct = value;  }
        }
        #endregion

        #region Initialize the GMS Interface
        internal virtual IGameMetadataClient CreateIGameMetadataClient(bool useConfigurator)
        {
            //Create an interface that tests can use to act on GameMetadata methods
            IGameMetadataClient gmclient = null;

            //Instantiate the IGameMetadataClient with data (defaults to app.config file)
            try
            {
                Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
                Container.Instance.AddService<IFileSystem, FileSystem>();
                ConfigurationSelector.RegisterProvider("GameMetadataBVT", "LEET");
                GameMetadataClient.RegisterContainerServices();

                #region Use this code when the configurator is used
                if (useConfigurator)
                {
                    gmclient = Container.Instance.GetComponent<IGameMetadataClient>();
                    gmsService = ConfigurationManager.AppSettings["interface.gamemetadata_web_service_url"];
                    gmsRedirectService = ConfigurationManager.AppSettings["interface.gamemetadata_web_redirect_url"];
                }
                #endregion
            }
            catch (System.Exception e)
            {
                throw new Exception("There was an error initializing the IGameMetadataClient interface", e.InnerException);
            }

            //Return the current metadata client
            return gmclient;
        }
        #endregion

        #region Define CONSTRUCTORS
        /*
         * Set the default test data with the constructor until we wire in the 
         * ability to scrape test data from an external file.
         */
        public GMSParentClass() : this(true) { }

        public GMSParentClass(bool useConfigurator)
            : this("", "", 1297287391, new uint[] { 0, 1, 2 }, "sirbaggypants",
                "0", CultureInfo.CurrentCulture.DisplayName, 3, useConfigurator) { }
        
        public GMSParentClass(string environment, string port, uint gid, uint[] gvariants, string gtag, string gsessionid, string glcid)
            : this(environment, port, gid, gvariants, gtag, gsessionid, glcid, 3, true) { }
        /// <summary>
        /// A constructor containing all necessary test parameters for Unit and Web tests run against the GMS service
        /// </summary>
        /// <param name="environment">String value of the envrionment name. If no value is specified then the envrionment is pulled from the app.config file</param>
        /// <param name="port">String value containing the port that the redirect server is hosted on (i.e. 65052)</param>
        /// <param name="gid">Uint value containing the GameID of the game you want to test against</param>
        /// <param name="gvariants">An array of uints that make up all variants associated with a particular GameID</param>
        /// <param name="gtag">String value containing the gamertag associated with a specific GameID</param>
        /// <param name="gsessionid">String value containing the session id you want to redirect to</param>
        /// <param name="glcid">String value containing the locale of a game you want to test for (i.e. en-US)</param>
        /// <param name="useConfigurator">Boolean to indicate whether or not to use the IoCCo.Container</param>
        public GMSParentClass(string environment, string port, uint gid, uint[] gvariants, string gtag, string gsessionid, string glcid, uint supportPlatformsBitMask, bool useConfigurator)
        {
            //Initialize the GMS client interface
            gmclient = CreateIGameMetadataClient(useConfigurator);

            #region Set the GMSClient structure to contain the GMS Data values fed in
            _gmsStruct.Gameid = gid;
            _gmsStruct.Variantids = gvariants;
            _gmsStruct.Gamertag = gtag;
            _gmsStruct.SessionId = gsessionid;
            _gmsStruct.Lcid = glcid;
            _gmsStruct.SupportPlatformsBitMask = supportPlatformsBitMask;
            #endregion

            /*
             * 
             * TODO: The following code should be refactored to use the Configurator system
             * that Daryl has created for running in different environments.
             * 
             */
            #region Set the envrionment and other values derived from the app.config file
            //Open the app config file so we can get static values from it
            configFileMap.ExeConfigFilename = Environment.CurrentDirectory + @"\gamemetadataservice.test.dll.config";
            config = ConfigurationManager.OpenMappedExeConfiguration(configFileMap, ConfigurationUserLevel.None);

            /*
             * Break out the values of the "interface.gamemetadata_web_redirect" from the app.config file so we
             * can get the port and envrionment values out of it
             */
            string[] appSettings = config.AppSettings.Settings["interface.gamemetadata_web_redirect"].Value.Split(';');


            //Get the environment from the app.config file if the user did not specify one
            if (String.IsNullOrEmpty(environment))
            {
                _gmsStruct.Env = appSettings[2];
                _gmsStruct.Env = _gmsStruct.Env.Substring(_gmsStruct.Env.IndexOf(".") + 1,
                    _gmsStruct.Env.IndexOf('.', _gmsStruct.Env.IndexOf(".") + 1) - (_gmsStruct.Env.IndexOf(".") + 1));
            }
            else
            {
                _gmsStruct.Env = environment;
            }

            //Set the port
            if (String.IsNullOrEmpty(port))
            {
                _gmsStruct.Port = appSettings[1].Substring(5);
            }
            else
            {
                _gmsStruct.Port = port;
            }

            //Set all Redirection Uris
            _gmsStruct.BaseRedirectionUri = config.AppSettings.Settings["GameMetadata_BaseRedirectionUrl"].Value.Replace(".xbox", @"." + _gmsStruct.Env + ".xbox");
            _gmsStruct.SessionRedirectionUri = _gmsStruct.BaseRedirectionUri + config.AppSettings.Settings["GameMetadata_GameSessionRedirectionUrlFormat"].Value;
            _gmsStruct.GameRedirectionUri = _gmsStruct.BaseRedirectionUri + config.AppSettings.Settings["GameMetadata_GameRedirectionUrlFormat"].Value;
            _gmsStruct.ProfileRedirectionUri = _gmsStruct.BaseRedirectionUri + config.AppSettings.Settings["GameMetadata_ProfileRedirectionUrlFormat"].Value;

            //Set all expected Response Uris
            _gmsStruct.WebGameRedirectionResponse = config.AppSettings.Settings["GameMetadata_Redirection_Game_Web"].Value.Replace(".xbox", @"." + _gmsStruct.Env + ".xbox");
            _gmsStruct.MobileGameRedirectionResponse = config.AppSettings.Settings["GameMetadata_Redirection_Game_Mobile"].Value.Replace(".xbox", @"." + _gmsStruct.Env + ".xbox");
            _gmsStruct.WebGameSessionResponse = config.AppSettings.Settings["GameMetadata_Redirection_GameSession_Web"].Value.Replace(".xbox", @"." + _gmsStruct.Env + ".xbox");
            _gmsStruct.MobileGameSessionResponse = config.AppSettings.Settings["GameMetadata_Redirection_GameSession_Mobile"].Value.Replace(".xbox", @"." + _gmsStruct.Env + ".xbox");
            #endregion

            //Set the type of redirection we're performing (if necessary)
            _gmsStruct.RedirectType = GMSRedirectionType.Game;
        }
        #endregion

        #region Define METHODS
        ///TODO: Create a method or methods that will loop over an XML file containing multiple GMS data scenarios
        ///that can be then fed into the GMSParentClass. As each GMSParentClass is generated off of the elements
        ///in the XML file Unit and Web tests can be called against the data.

        /// <summary>
        /// Creates a socket connection to a specific server and port
        /// </summary>
        /// <param name="server">The IP or server name you want the socket opened to</param>
        /// <param name="port">The port over which the socket will communicate</param>
        /// <returns>Returns a Socket object</returns>
        private static Socket ConnectSocket(string server, int port)
        {
            Socket tcpSocket = null;
            IPHostEntry hostEntry = null;

            // Get host related information.
            hostEntry = Dns.GetHostEntry(server);

            // Loop through the AddressList to obtain the supported AddressFamily. This is to avoid
            // an exception that occurs when the host IP Address is not compatible with the address family
            // (typical in the IPv6 case).
            foreach(IPAddress address in hostEntry.AddressList)
            {
                IPEndPoint ipEndpoint = new IPEndPoint(address, port);
                Socket tempSocket = 
                    new Socket(ipEndpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);

                try
                {
                    tempSocket.Connect(ipEndpoint);
                }
                catch (SocketException)
                {
                    // Ignore failure
                }

                if(tempSocket.Connected)
                {
                    tcpSocket = tempSocket;
                    break;
                }
                else
                {
                    continue;
                }
            }

            // If the tcpSocket is still null at the very end, attempt to connect to just the DNS server name & port 80
            if (tcpSocket == null)
            {
                try
                {
                    tcpSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                    tcpSocket.Connect(server, 80);
                }
                catch (SocketException)
                {
                    tcpSocket = null;
                }
            }

            return tcpSocket;
        }

        /// <summary>
        /// Performs a socket request to a specific server/port with GMS data
        /// </summary>
        /// <param name="server">The IP or server name of the GMS redirect server</param>
        /// <param name="port">The port the GMS redirect server communicates over</param>
        /// <param name="userAgentString">Can be left blank or fed in 'Windows Mobile 7.0' to perform different types of redirection</param>
        /// <param name="gmsStruct">A GMS structure containing test data for a particular scenario</param>
        /// <returns>Returns the Uri that was returned from the redirect server as a string</returns>
        public string SocketGetRedirectLocation(string server,  int port, string userAgentString, GMSStruct gmsStruct) 
        {
            int bytes = 0;
            string redirectLocation = String.Empty;
            string currentRedirectUri = String.Empty;

            switch (gmsStruct.RedirectType)
            { 
                case GMSRedirectionType.Game:
                    currentRedirectUri = String.Format(_gmsStruct.GameRedirectionUri, 
                        Convert.ToString(_gmsStruct.Gameid), _gmsStruct.Variantids[0]).Replace(_gmsStruct.BaseRedirectionUri, String.Empty);
                    break;
                case GMSRedirectionType.Session:
                    currentRedirectUri = String.Format(_gmsStruct.SessionRedirectionUri, 
                        Convert.ToString(_gmsStruct.Gameid), _gmsStruct.SessionId).Replace(_gmsStruct.BaseRedirectionUri, String.Empty);
                    break;
                case GMSRedirectionType.Profile:
                    break;
            }


            /*
             * 
             * We need to make a raw byte GET to send to the server so we can receive a raw byte response and parse
             * out the redirected location the server returns to validate GMS service redirection. Below is a sample
             * of what the 'raw' GET request should look like. If the user-agent string contains Windows Mobile 7.0 then
             * the location returned should be a XBLS:\\ Uri instead of the normal HTTP.
             * 
             * GET /g/1297287391/0/ HTTP/1.1
             * Host: redirect.storax.xboxlive.com
             * User-Agent: Mozilla/5.0
             *          --OR--
             * User-Agent: Windows Mobile 7.0
             * 
             * The following is the rest of a regular headed but hasn't been necessary in the calls I've made.
             * I'm leaving the following lines in the comments here in case it is necessary in future tests to
             * have them added back into code
             * 
             * Accept: text/html,application/xhtml+xml,application/xml;q=0.9,q=0.8
             * Accept-Language: en-us,en;q=0.5
             * Accept-Encoding: gzip,deflate
             * Accept-Charset: ISO-8859-1,utf-8;
             * Keep-Alive: 300
             * Connection: keep-alive
             * 
             */
            StringBuilder request = new StringBuilder();
            request.AppendLine(@"GET " +
                currentRedirectUri + 
                " HTTP/1.1");
            request.AppendLine(@"Host: " + _gmsStruct.BaseRedirectionUri.Replace("http://", String.Empty));
            request.AppendLine(@"User-Agent: " + userAgentString);
            request.AppendLine();

            //Set the send and receive byte arrays
            Byte[] bSent = Encoding.ASCII.GetBytes(request.ToString());
            Byte[] bReceive = new Byte[1024];

            // Create a socket connection with the specified server and port.
            Socket tcpSocket = ConnectSocket(server, port);
            if (tcpSocket == null)
                return ("Connection failed");

            // Receive the page content
            try
            {
                // Send request to the server.
                tcpSocket.Send(bSent, bSent.Length, 0);

                // Receive the response from the server
                bytes = tcpSocket.Receive(bReceive);

                //If data is returned then we will parse the necessary value, if not the value will be empty
                if (bytes > 0)
                {
                    redirectLocation = Encoding.ASCII.GetString(bReceive);
                    //Use substring to parse out the Uri Location from the raw response data returned
                    redirectLocation = redirectLocation.Substring(redirectLocation.IndexOf("Location:") + 10,
                        (redirectLocation.IndexOf("Server:") - redirectLocation.IndexOf("Location:")) - 12);
                }
                else if (bytes == 0)
                {
                    tcpSocket.Close();
                }
            }
            catch (SocketException e)
            {
                throw new Exception("There was an error ", e.InnerException);
            }

            return redirectLocation;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\GameMetadataService.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("GameMetadataService.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("aa428e46-dec1-4806-878a-f7024aef1454")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\GameMetadataService.Test\GMSUnitTests.cs ===
﻿using GameMetadata.Common;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;

using System;
using System.Collections.Generic;

namespace GameMetadataService.Test
{
    /// <summary>
    ///This is a test class for GameMetadataClientTests and is intended
    ///to contain all GMS Core Unit tests. Each unit test can have an overload that can be accessed
    ///by new functional tests that leverage the GameMetadataClientTest test class
    ///</summary>
    [TestClass()]
    public class GameMetadataClientTest
    {
        static GMSParentClass gmsParent;

        #region Define the Test Context parameters
        private TestContext _testContextInstance;
        public TestContext TestContext
        {
            get
            {
                return _testContextInstance;
            }
            set
            {
                _testContextInstance = value;
            }
        }
        #endregion

        #region Initialize Class Items
        //Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext) 
        {
            //Initialize the parent class that is shared between unit and web tests
            gmsParent = new GMSParentClass();
        }

        //Use ClassCleanup to run code after all tests in a class have run
        [ClassCleanup()]
        public static void MyClassCleanup() 
        {
            gmsParent = null;
        }

        ////Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize() { }

        ////Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup() { }
        #endregion

        #region GetProfileRedirectionUrl Tests
        [TestMethod()]
        public void GetProfileRedirectionUrl()
        {
            GetProfileRedirectionUrl(gmsParent.gmsStruct.ProfileRedirectionUri, gmsParent.gmsStruct.Gamertag);
        }

        public void GetProfileRedirectionUrl(string Uri, string Gamertag)
        {
            Uri expected = new Uri(String.Format(Uri, Gamertag));
            Uri actual = new Uri(gmsParent.gmclient.GetProfileRedirectionUrl(Gamertag));

            Assert.AreEqual(expected, actual);
        }
        #endregion

        #region GetGameSessionRedirectionUrl
        [TestMethod()]
        [Description("Verifies URL redirection for games session")]
        [TestProperty("Type", "BVT")]
        public void GetGameSessionRedirectionUrl()
        {
            GMSParentClass gmsParent = new GMSParentClass(false);            

            Uri u1 = new Uri(String.Format(gmsParent.gmsStruct.SessionRedirectionUri, Convert.ToString(gmsParent.gmsStruct.Gameid), gmsParent.gmsStruct.SessionId));

            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(u1);

            req.AllowAutoRedirect = false;

            HttpWebResponse response = (HttpWebResponse)req.GetResponse();

            Assert.AreEqual(HttpStatusCode.Found, response.StatusCode, "Response is not 302");

            string expected_uri = String.Format(gmsParent.gmsStruct.WebGameSessionResponse, gmsParent.gmsStruct.Gameid.ToString("x"), gmsParent.gmsStruct.SessionId);
                                  
            string returned_location = "";

            for (int i = 0; i < response.Headers.Count; ++i)
            {
                Console.WriteLine("\nHeader Name:{0}, Value :{1}", response.Headers.Keys[i], response.Headers[i]);
                if (response.Headers.Keys[i].Equals("Location"))
                    returned_location = response.Headers[i];
            }

            // Releases the resource.                      
            response.Close();

            Assert.AreEqual<string>(expected_uri, returned_location, "Location URI did not match");
            
        }
        #endregion

        #region GetGameRedirectionUrl Tests
        [TestMethod()]
        [Description("Verifies URL redirection for games")]
        [TestProperty("Type", "BVT")]
        public void GetGameRedirectionUrl()
        {          

            GMSParentClass gmsParent = new GMSParentClass(false);
         
            Uri u1 = new Uri(String.Format(gmsParent.gmsStruct.GameRedirectionUri, Convert.ToString(gmsParent.gmsStruct.Gameid), gmsParent.gmsStruct.Variantids[0].ToString()));

            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(u1);

            req.AllowAutoRedirect = false;

            HttpWebResponse response = (HttpWebResponse)req.GetResponse();

            Assert.AreEqual(HttpStatusCode.Found, response.StatusCode, "Response is not 302");

            string expected_uri = String.Format(gmsParent.gmsStruct.WebGameRedirectionResponse,gmsParent.gmsStruct.Gameid.ToString("x"));
            string returned_location = "" ;

            for (int i = 0; i < response.Headers.Count; ++i)
            {
                Console.WriteLine("\nHeader Name:{0}, Value :{1}", response.Headers.Keys[i], response.Headers[i]);
                if (response.Headers.Keys[i].Equals("Location"))
                    returned_location = response.Headers[i];
            }

            // Releases the resource.                      
            response.Close();

            Assert.AreEqual<string>(expected_uri, returned_location, "Location URI did not match");


        }

        [TestMethod()]
        public void GetGameRedirectionUrlWithVariant()
        {
            Uri expected = new Uri(String.Format(gmsParent.gmsStruct.GameRedirectionUri, Convert.ToString(gmsParent.gmsStruct.Gameid), Convert.ToString(gmsParent.gmsStruct.Variantids[0])));
            Uri actual = new Uri(gmsParent.gmclient.GetGameRedirectionUrl(gmsParent.gmsStruct.Gameid, gmsParent.gmsStruct.Variantids[0]));

            Assert.AreEqual(expected, actual);
        }
        #endregion

        #region GetGameVariants Tests
        [TestMethod()]
        public void GetGameVariants()
        {
            //Set the actual and expected objects
            Dictionary<uint, GameVariantComposite> expected = new Dictionary<uint, GameVariantComposite>();
            Dictionary<uint, GameVariantComposite> actual = gmsParent.gmclient.GetGameVariants(gmsParent.gmsStruct.Gameid);
            
            //Create a list of variants
            GameVariantComposite gameVariantComposite;

            /*
             * For each variant that exists create a game variant composite that holds
             * any data so we can confirm the returned array amount matches what we expect
             */
            foreach (uint variant in gmsParent.gmsStruct.Variantids)
            {
                gameVariantComposite = new GameVariantComposite();
                gameVariantComposite.GameId = gmsParent.gmsStruct.Gameid;
                gameVariantComposite.VariantId = variant;
                gameVariantComposite.StatRankings.Add("TestFillerValue", StatRanking.High);
                expected.Add(variant, gameVariantComposite);
            }

            Assert.AreEqual(expected.Values.Count, actual.Values.Count);
        }
        #endregion

        #region GetGameVariantIds Tests
        [TestMethod()]
        [Owner("leosite")]
        public void GetGameVariantIds()
        {      
            //Place the parent class default values into the test for smoke test purposes
            foreach (uint variant in gmsParent.gmsStruct.Variantids)
            {
                gmsParent.variantidList.Add(variant);
            }

            this.GetGameVariantIds(gmsParent.gmsStruct.Gameid, gmsParent.variantidList);
        }

        public void GetGameVariantIds(uint gameID, List<uint> expectedVariantIDs)
        {
            //Throw an exception if the test is given no expected lists
            if (gameID < 0 || expectedVariantIDs.Count <= 0)
            {
                throw new Exception("The game ID value or the variantIDs count is less than 0");
            }

            //Initialize the actual variant ids list for each game in the expected games
            List<uint> actualVariantIds = new List<uint>();
            actualVariantIds.AddRange(gmsParent.gmclient.GetGameVariantIds(gameID));

            //Confirm that each variant id combo returned for the current game matches the expected list
            for (int i = 0; i < actualVariantIds.Count; i++)
            {
                Assert.AreEqual(expectedVariantIDs[i], actualVariantIds[i]);
            }
        }
        #endregion

        #region GetGameVariant Tests
        [TestMethod()]
        public void GetGameVariant()
        {
            //Set the expected GameMetadataComposite
            GameVariantComposite expected = new GameVariantComposite();
            expected.GameId = gmsParent.gmsStruct.Gameid;

            //Set the actual value and compare the two
            GameVariantComposite actual = gmsParent.gmclient.GetGameVariant(gmsParent.gmsStruct.Gameid);

            Assert.AreEqual(expected.GameId, actual.GameId,
                "The GetGameVariant method failed to return the proper GameId: " +
                    "<expected>" + expected.GameId + "</expected>" +
                    "<actual>" + actual.GameId + "</actual>");
        }

        [TestMethod()]
        public void GetGameVariantWithVariant()
        {
            //Set the expected GameMetadataComposite
            GameVariantComposite expected = new GameVariantComposite();
            expected.GameId = gmsParent.gmsStruct.Gameid;
            expected.VariantId = gmsParent.gmsStruct.Variantids[0];

            //Set the actual value and compare the two
            GameVariantComposite actual = gmsParent.gmclient.GetGameVariant(gmsParent.gmsStruct.Gameid, gmsParent.gmsStruct.Variantids[0]);

            Assert.AreEqual(expected.VariantId, actual.VariantId,
                "The GetGameVariantWithVariant method failed to return the proper VariantID: " +
                    "<expected>" + expected.VariantId.ToString() + "</expected>" +
                    "<actual>" + actual.VariantId.ToString() + "</actual>");
        }
        #endregion

        #region GetGameMetadata Tests
        [TestMethod()]
        public void GetGameMetadata()
        {
            //Set the expected GameMetadataComposite
            GameMetadataComposite expected = new GameMetadataComposite();
            expected.GameId = gmsParent.gmsStruct.Gameid;
            expected.LocalizationLocale = gmsParent.gmsStruct.Lcid;

            //Set the actual value and compare the two
            GameMetadataComposite actual = gmsParent.gmclient.GetGameMetadata(gmsParent.gmsStruct.Gameid, gmsParent.gmsStruct.Lcid);

            Assert.AreEqual(expected.GameId, actual.GameId,
                "The GetGameMetadata method failed to return the proper GameID: " +
                    "<expected>" + expected.GameId.ToString() + "</expected>" +
                    "<actual>" + actual.GameId.ToString() + "</actual>");
        }

        [TestMethod()]
        public void GetGameMetadataWithVariant()
        {
            //Set the expected GameMetadataComposite
            GameMetadataComposite expected = new GameMetadataComposite();
            expected.GameId = gmsParent.gmsStruct.Gameid;
            expected.VariantId = gmsParent.gmsStruct.Variantids[0];
            expected.LocalizationLocale = gmsParent.gmsStruct.Lcid;

            //Set the actual value and compare the two
            GameMetadataComposite actual = gmsParent.gmclient.GetGameMetadata(gmsParent.gmsStruct.Gameid, gmsParent.gmsStruct.Lcid, gmsParent.gmsStruct.Variantids[0]);

            Assert.AreEqual(expected.VariantId, actual.VariantId,
                "The GetGameMetadataWithVariant method failed to return the proper VariantID: " +
                    "<expected>" + expected.VariantId + "</expected>" +
                    "<actual>" + actual.VariantId + "</actual>");
        }

        [TestMethod()]
        [Description("Verifies that the expected SupportedPlatformsBitMask value is returned")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "SAmeling")]
        public void GetGameMetadataToVerifySupportedPlatformsBitMask()
        {
            GMSTestData testData = GMSTestData.Deserialize("GameMetadataService.Test.GameTestData.xml");

            try
            {
                List<GMSGameTestData> games = testData[gmsParent.gmsStruct.Env];

                foreach (GMSGameTestData gameData in games)
                {
                    Console.WriteLine("Verifying SupportedPlatformBitMask value for game with GameId of {0}", gameData.Id.ToString());

                    //Set the expected GameMetadataComposite
                    GameMetadataComposite expected = new GameMetadataComposite();
                    expected.GameId = gameData.Id;
                    expected.LocalizationLocale = gameData.LCID;
                    expected.SupportedPlatformsBitMask = gameData.SupportPlatformsBitMask;

                    //Set the actual value and compare the two
                    GameMetadataComposite actual = gmsParent.gmclient.GetGameMetadata(gameData.Id, gameData.LCID, gameData.Variants[0]);

                    Assert.AreEqual(expected.SupportedPlatformsBitMask, actual.SupportedPlatformsBitMask,
                        "Failed to return the expected SupportedPlatformsBitMask value. Expected '{0}' | Actual '{1}'",
                        expected.SupportedPlatformsBitMask.ToString(),
                        actual.SupportedPlatformsBitMask.ToString());
                }
            }
            catch (KeyNotFoundException)
            {
                Console.WriteLine("No game data found for the currently specified environment (Env={0}).", gmsParent.gmsStruct.Env);
            }
        }
        #endregion

        #region CheckIsValidGameID Tests
        [TestMethod()]
        public void CheckIsValidGameId()
        {
            bool expected = true;
            bool actual = gmsParent.gmclient.CheckIsValidGameId(gmsParent.gmsStruct.Gameid);

            Assert.AreEqual(expected, actual,
            "The CheckIsValidGameId method expected and actual results don't match: " +
                "<expected>" + expected.ToString() + "</expected>" +
                "<actual>" + actual.ToString() + "</actual>");
        }
        #endregion

        #region Validate Mobile Game Redirection
        [TestMethod()]
        [Description("Verifies that the correct redirect url is returned when using accepted user agent strings")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "SAmeling")]
        public void ValidateMobileGameRedirection()
        {
            List<string> userAgents = new List<string>()
            {
                "Mozilla/4.0 (compatible; MSIE 7.0; Windows Mobile 7.0; Trident/3.1; IEMobile/7.0)",
                "Windows Mobile 7.0",
                "Mozilla/4.0 (compatible; MSIE 7.0; Windows Phone OS 7.0; Trident/3.1; IEMobile/7.0)",
                "Windows Phone OS 7.0"
            };

            //Set the expected result from the values passed into the parent class
            Uri expected = new Uri(String.Format(gmsParent.gmsStruct.MobileGameRedirectionResponse,
                gmsParent.gmsStruct.Gameid.ToString("x"), gmsParent.gmsStruct.Variantids[0].ToString()));

            foreach (string agent in userAgents)
            {
                Console.WriteLine("Testing valid User Agent String of '{0}'", agent);

                //Creates a socket manually and gets the redirection from the web page requested
                Uri actual = new Uri(gmsParent.SocketGetRedirectLocation(gmsParent.gmsStruct.BaseRedirectionUri.Replace("http://", String.Empty),
                    62502,
                    agent,
                    gmsParent.gmsStruct));

                Assert.AreEqual(expected, actual);
            }
        }

        [TestMethod()]
        [Description("Verifies that the mobile redirect url is not returned when using invalid user agent strings")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "SAmeling")]
        public void ValidateMobileGameRedirectionUsingInvalidAgents()
        {
            List<string> userAgents = new List<string>()
            {
                "Mozilla/4.0",
                "Windows Mobil 7.0",
                "Windows Mobile 7",
                "Windows Pone OS 7.0",
                "Windows Phone OS 7"
            };

            //Set the expected result from the values passed into the parent class
            Uri expected = new Uri(String.Format(gmsParent.gmsStruct.MobileGameRedirectionResponse,
                gmsParent.gmsStruct.Gameid.ToString("x"), gmsParent.gmsStruct.Variantids[0].ToString()));

            // check each of the invalid agents
            foreach (string agent in userAgents)
            {
                Console.WriteLine("Testing User Agent String of '{0}'", agent);

                //Creates a socket manually and gets the redirection from the web page requested
                Uri actual = new Uri(gmsParent.SocketGetRedirectLocation(gmsParent.gmsStruct.BaseRedirectionUri.Replace("http://", String.Empty),
                    62502,
                    agent,
                    gmsParent.gmsStruct));

                Assert.AreNotEqual(expected, actual);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\GMSContentCreatorForm.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Globalization;
using System.Configuration;
using System.Runtime.Serialization;

using Leet.Core.IoCCo;
using Leet.Core.Wcf;
using Leet.Core.Configuration;

using GameMetadata.Common;
using GameMetadata.Common.Mix.ContentIngestion;

using ManualIngestionTool;
using Leet.Core.IO;

namespace GMSContentCreator
{
    public enum GMSVisibilityTypes { 
        Unpublished = 1, 
        Staging = 2, 
        Live = 3,
        Withdrawn = 4,
        Deleted = 5
    };

    public partial class GMSContentCreatorForm : Form
    {
        #region Declare global variables and load the form
        private XmlDocument _GMSXMLDocument = new XmlDocument();
        public int currentVariantID = 0;
        string currentEnvrionment = EnvironmentSettings.Default.IngestionServiceHost;
        public GMSData gmsData = new GMSData();
        
        public GMSContentCreatorForm()
        {
            InitializeComponent();
        }

        private void GMSContentCreatorForm_Load(object sender, EventArgs e)
        {
            #region Populate the GameLCIDCheckbox and VariantsLCIDCheckbox with cultures
            clbGameLCID.SuspendLayout();
            clbVariantsLCID.SuspendLayout();
            bool isChecked = false;
            foreach (string localeName in new List<string>(gmsData.gmsLanguages.Keys))
            {
                if (localeName.Contains("United States"))
                {
                    isChecked = true;
                }
                else
                {
                    isChecked = false;
                }
                clbGameLCID.Items.Add(localeName, isChecked);
                clbVariantsLCID.Items.Add(localeName, isChecked);
            }
            clbGameLCID.ResumeLayout();
            clbVariantsLCID.ResumeLayout();
            #endregion

            #region Populate all the list boxes with current enum values
            //Populate the Visibilty selections radio buttons with enum values
            rbtnDeleted.Text = GMSVisibilityTypes.Deleted.ToString();
            rbtnLive.Text = GMSVisibilityTypes.Live.ToString();
            rbtnStaging.Text = GMSVisibilityTypes.Staging.ToString();
            rbtnUnpublished.Text = GMSVisibilityTypes.Unpublished.ToString();
            rbtnWithdrawn.Text = GMSVisibilityTypes.Withdrawn.ToString();

            //Populate the Platform selections checkbox with enum values
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.Mobile, true);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.Marketplace);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.PC);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.WebGames);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.Xbox1);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.Xbox360);
            clbGamePlatforms.Items.Add(Leet.Core.Platforms.PlatformType.XboxCom);

            //Populate the GameImageTypes drop down with enum values
            cmbImageTypes.Items.Add(GameMetadata.Common.ImageType.GameTile_WebSmall); //32x32
            cmbImageTypes.Items.Add(GameMetadata.Common.ImageType.GameTile_WebLarge); //64x64
            cmbImageTypes.Items.Add(GameMetadata.Common.ImageType.GameTile_MobileSmall); //99x99
            cmbImageTypes.Items.Add(GameMetadata.Common.ImageType.GameTile_MobileLarge); //179x179
            #endregion

            #region Set all initial values for elements on the form
            cmbEnvironment.Text = cmbEnvironment.Items[0].ToString();
            cmbImageTypes.Text = cmbImageTypes.Items[0].ToString();
            rbtnLive.Checked = true;
            #endregion
        }
        #endregion

        #region Perform XML related tasks
        public bool SaveXML()
        {
            return this.SaveXML(Environment.GetEnvironmentVariable("temp"), "GMSContentCreatorSample");
        }

        public bool SaveXML(string filePath, string fileName)
        {
            //Set a default result of false
            bool result = false;

            try
            {
                this.GenerateXML(fileName).Save(filePath + "\\" + fileName + ".xml");
                MessageBox.Show("Your file was successfully saved to: " + filePath + "\\" + fileName + ".xml", "GMS Content Creator", MessageBoxButtons.OK, MessageBoxIcon.Information);
                result = true;
            }
            catch (System.Xml.XmlException e)
            {
                MessageBox.Show("There was an error attempting to save your XML file to the " 
                    + filePath + " directory: " 
                    + e.InnerException.ToString(), 
                    "GMS Content Creator",
                    MessageBoxButtons.OK, 
                    MessageBoxIcon.Error);
            }

            return result;
        }

        public XmlDocument GenerateXML()
        {
            return this.GenerateXML("GMSContentCreatorSample");
        }

        public XmlDocument GenerateXML(string fileName)
        {
            XmlTextWriter writer = new XmlTextWriter(fileName, null);

            //Use indenting for readability.
            writer.Formatting = Formatting.Indented;
            writer.WriteComment("GMS Content Creator Generated XML - Filename: " + fileName);

            #region Write the root node
            writer.WriteStartElement("game");
            writer.WriteAttributeString("id", null, txtGameId.Text);
            foreach(RadioButton rbtn in grpVisibilityLevel.Controls)
            {
                if(rbtn.Checked)
                {
                    writer.WriteAttributeString("visibility", null, GetVisibilityType(rbtn.Text).ToString());
                }
            }
            writer.WriteAttributeString("usesLiveMultiplayerServices", null, Convert.ToInt32(chkUsesLiveMultiplayerServices.Checked).ToString());
            #endregion

            #region Create localizedNames node(s) for the Game Name
            //Write the localizedName element with all LCID nodes the user has selected
            writer.WriteStartElement("localizedNames");
            GMSData gmsdata = new GMSData();
            
            foreach (string gameLocale in clbGameLCID.CheckedItems)
            {
                writer.WriteStartElement("name");
                if (gameLocale.Contains("English (Hong Kong S.A.R.)"))
                {
                    writer.WriteAttributeString("locale", null, "en-HK");
                    writer.WriteString("(en-HK) " + txtGameName.Text);
                }
                else
                {
                    writer.WriteAttributeString("locale", null, CultureInfo.GetCultureInfo(gmsData.gmsLanguages[gameLocale]).Name);
                    writer.WriteString("(" + CultureInfo.GetCultureInfo(gmsData.gmsLanguages[gameLocale]).Name + ") " +
                        txtGameName.Text);
                }
                
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            #endregion

            #region Create Image Uri node(s)
            writer.WriteStartElement("images");
            foreach(string line in rtbImageUris.Lines)
            {
                //If we hit a blank line we need to exit the loop
                if (String.IsNullOrEmpty(line))
                {
                    break;
                }

                //Get the Uri and ImageType enum from the entries that the user added in the UI
                string[] images = line.Trim().Split('|');

                writer.WriteStartElement("image");
                writer.WriteAttributeString("type", getImageUriType(images[1]).ToString());
                writer.WriteString(images[0].Trim());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            #endregion

            #region Create availablePlatforms node(s)
            writer.WriteStartElement("availablePlatforms");
            foreach (Leet.Core.Platforms.PlatformType currentPlatform in clbGamePlatforms.CheckedItems)
            {
                writer.WriteStartElement("platform");
                writer.WriteAttributeString("id", null, ((int)currentPlatform).ToString());
                writer.WriteString(currentPlatform.ToString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            #endregion

            #region Create variants node(s)
            //Create the variant nodes the user is requesting
            writer.WriteStartElement("variants");
            foreach(string variant in rtbVariants.Lines)
            {
                //Ensure we don't have an invalid line entry
                if (String.IsNullOrEmpty(variant))
                {
                    break;
                }

                //Parse the line for all entries from the Variants rich text box
                string[] variants = variant.Split('|');

                writer.WriteStartElement("variant");
                writer.WriteAttributeString("id", null, variants[0].Trim());

                #region Create stat ranking(s) for each variant that exists IF any stats are included
                writer.WriteStartElement("statRankings");
                if (variants[2].Contains('-'))
                {
                    string[] stats = variants[2].Split(',');

                    foreach (string stat in stats)
                    {
                        if (!String.IsNullOrEmpty(stat.Trim()))
                        {
                            string[] statValues = stat.Split('-');

                            writer.WriteStartElement("stat");
                            writer.WriteAttributeString("name", null, statValues[0].Trim());
                            writer.WriteAttributeString("preferHighValues", null, Convert.ToInt32(Convert.ToBoolean(statValues[1].Trim())).ToString());
                            writer.WriteEndElement();
                        }
                    }
                }
                writer.WriteEndElement();
                #endregion

                #region Create all the localized names for each variant in the variants list
                writer.WriteStartElement("localizedNames");
                string[] locales = variants[3].Split(',');

                foreach (string variantLocale in locales)
                {
                    //Ensure that no leading or trailing whitespace is left behind in the split
                    writer.WriteStartElement("name");
                    if (variantLocale.Contains("English (Hong Kong S.A.R.)"))
                    {
                        writer.WriteAttributeString("locale", null, "en-HK");
                        writer.WriteString("(en-HK) " + variants[1].Trim());
                    }
                    else
                    {
                        writer.WriteAttributeString("locale", null, CultureInfo.GetCultureInfo(gmsData.gmsLanguages[variantLocale.Trim()]).Name);
                        writer.WriteString("(" + CultureInfo.GetCultureInfo(gmsData.gmsLanguages[variantLocale.Trim()]).Name + ") " +
                            variants[1].Trim());
                    }
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
                #endregion

                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            #endregion

            //Write the close tag for the root element.
            writer.WriteEndElement();

            //Write the XML to file
            writer.Flush();
            writer.Close();

            //Read the file back in and parse to ensure well formed XML.
            _GMSXMLDocument.PreserveWhitespace = true;
            _GMSXMLDocument.Load(fileName);

            //Return the XML document so it can be displayed or saved to the hard drive
            return _GMSXMLDocument;
        }
        #endregion

        #region Perform Ingestion Tasks
        public bool PerformIngestion(XmlDocument document)
        {
            // construct the interface for the client to connect to
            InterfaceInfo ingestionInterface = new InterfaceInfo();
            ingestionInterface.Name = "gamematadata_web_ingestion";
            ingestionInterface.Port = EnvironmentSettings.Default.IngestionServicePort;
            ingestionInterface.VSiteId = 1;

            //Ensure that the previous InMemoryConfigurationProvider is cleared before adding the current one
            GMSInMemoryConfigurationProvider.Clear();

            // add the interface and approprite settings for the EndpointConfiguratior
            GMSInMemoryConfigurationProvider.AddInterface(ingestionInterface);
            GMSInMemoryConfigurationProvider.AddInterfaceServer("gamematadata_web_ingestion", currentEnvrionment);//EnvironmentSettings.Default.IngestionServiceHost);
            GMSInMemoryConfigurationProvider.SetSetting("IIngestionService_Endpoint", "gamematadata_web_ingestion");
            GMSInMemoryConfigurationProvider.SetSetting("IIngestionService_Endpoint_Path", EnvironmentSettings.Default.IngestionServicePath);

            // set up the appropriate services
            Leet.Core.IoCCo.Container.Instance.AddService<IConfigurationProvider, GMSInMemoryConfigurationProvider>();
            Leet.Core.IoCCo.Container.Instance.AddService<IEndpointConfigurator<IIngestionService>, EndpointConfigurator<IIngestionService>>();
            Leet.Core.IoCCo.Container.Instance.AddService<IWcfProxyFactory<IIngestionService>, ServerProxyFactory<IIngestionService>>();
            Leet.Core.IoCCo.Container.Instance.AddService<IIngestionService, IngestionServiceShim>();

            IIngestionService service = Leet.Core.IoCCo.Container.Instance.GetComponent<IIngestionService>();
            return service.ConfigureGameViaXml(document.InnerXml);      
        }
        #endregion

        #region Perform PUBLIC form interactions
        public void setImageUriEntries()
        {
            if (!String.IsNullOrEmpty(cmbImageTypes.Text))
            {
                rtbImageUris.AppendText(txtImageUri.Text + " | " + cmbImageTypes.Text + "\r\n");
            }
        }

        public void addStatEntry()
        {
            rtbStats.AppendText(txtStatName.Text + " - " +  
                chkPreferHighValues.Checked.ToString() + "\r\n");
        }

        public void addVariantEntry()
        {
            //Create a string builder to hold all abridged checked values from the LCID list
            StringBuilder locales = new StringBuilder();
            foreach (string item in clbVariantsLCID.CheckedItems)
            {
                if (locales.Length == 0)
                {
                    locales.Append(item);
                }
                else
                {
                    locales.Append(", " + item);
                }
            }

            //Create a string builder to hold all other text values on the variants tab
            StringBuilder variants = new StringBuilder();
            variants.Append(getCurentVariantID().ToString() + " | ");
            variants.Append(txtVariantName.Text + " | ");
            if (rtbStats.Text != String.Empty)
            {
                variants.Append(Regex.Replace(rtbStats.Text, "[\r\n]", ", ") + " | ");
            }
            else
            {
                variants.Append(" | ");
            }
            variants.Append(locales.ToString());
            variants.AppendLine();

            //Push the current variants string builder values into the rich text box
            rtbVariants.AppendText(variants.ToString());

            //Clear the Stat values
            rtbStats.Clear();
        }

        public void changeEnvironment(string targetEnvironment)
        {
            //Create an array that splits up the current envrionment into its 4 parts
            string[] envArray = currentEnvrionment.Split('.');
            //Replace the portion of the environment path that specifies a server
            envArray[1] = targetEnvironment;

            //Empty out the currentEnvrionment variable and replace it with the new values
            currentEnvrionment = String.Empty;
            for (int i = 0; i < envArray.Length; i++)
            {
                if (i != envArray.Length - 1)
                    currentEnvrionment += envArray[i] + ".";
                else
                    currentEnvrionment += envArray[i];
            }
        }

        public int getImageUriType(string imgtype)
        {
            switch ((ImageType)Enum.Parse(typeof(ImageType), imgtype))
            { 
                case ImageType.GameTile_WebSmall:
                    return (int)ImageType.GameTile_WebSmall;
                case ImageType.GameTile_WebLarge:
                    return (int)ImageType.GameTile_WebLarge;
                case ImageType.GameTile_MobileSmall:
                    return (int)ImageType.GameTile_MobileSmall;
                case ImageType.GameTile_MobileLarge:
                    return (int)ImageType.GameTile_MobileLarge;
            }

            //Return web small by default
            return (int)ImageType.GameTile_WebSmall; 
        }

        public int getCurentVariantID()
        {
            //Determine if any entries are already in the Variants rich text box
            foreach (string item in rtbVariants.Lines)
            {
                if (!String.IsNullOrEmpty(item))
                {
                    /* 
                     * Split the variant items from the existing list and determine what the last sequence id
                     * is so we can append to the list safely by adding 1 to the number
                     */
                    string[] variants = item.Split('|');
                    if (!String.IsNullOrEmpty(variants[0]))
                    {
                        this.currentVariantID = Convert.ToInt32(variants[0]) + 1;
                    }
                }
                else
                {
                    break;
                }
            }

            return this.currentVariantID;
        }

        public void setAllCheckboxes(CheckedListBox comboBox, bool checkState)
        {
            //Check all checkboxes in the list fed to this method
            comboBox.BeginUpdate();
            for (int i = 0; i < comboBox.Items.Count; i++)
            {
                comboBox.SetItemChecked(i, checkState);
            }
            comboBox.EndUpdate();
        }
        #endregion

        #region Perform PRIVATE form interactions
        private void btnAddStat_Click(object sender, EventArgs e)
        {
            this.addStatEntry();
        }

        private void btnAddVariants_Click(object sender, EventArgs e)
        {
            if (clbVariantsLCID.CheckedItems.Count <= 0)
            {
                MessageBox.Show("Please select a variant culture",
                    "GMS Content Creator Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);

                clbVariantsLCID.Focus();
            }
            else
            {
                this.addVariantEntry();
            }
        }

        private void btnAddImageUri_Click(object sender, EventArgs e)
        {
            this.setImageUriEntries();
        }

        private void btnPreviewXML_Click(object sender, EventArgs e)
        {
            //Write the XML content to the form preview window.
            rtbXMLPreview.Text = this.GenerateXML("GMSSample.xml").InnerXml; 
        }

        private void btnSaveXML_Click(object sender, EventArgs e)
        {
            this.SaveXML();
        }

        private void txtVariantIDStartingSequence_TextChanged(object sender, EventArgs e)
        {
            int intValue = 0;

            //Check the variant count field
            if (!int.TryParse(txtVariantIDStartingSequence.Text, out intValue))
            {
                MessageBox.Show("Please enter a valid number", "GMS Content Creator Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtVariantIDStartingSequence.Clear();
            } 
        }

        private void txtGameId_TextChanged(object sender, EventArgs e)
        {
            int intValue = 0;
            
            //Check the variant count field
            if (!int.TryParse(txtGameId.Text, out intValue))
            {
                MessageBox.Show("Please enter a valid number", "GMS Content Creator Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtGameId.Clear();
            }
        }

        private void btnSubmitXML_Click(object sender, EventArgs e)
        {
            //Change the environment to match what the user has entered in the UI
            this.changeEnvironment(cmbEnvironment.Text);

            if (rtbXMLPreview.Text != string.Empty)
            {
                _GMSXMLDocument.LoadXml(rtbXMLPreview.Text);
            }
            else
            {
                _GMSXMLDocument.LoadXml(this.GenerateXML("GMSSample.xml").InnerXml);
            }

            if (this.PerformIngestion(_GMSXMLDocument))
            {
                MessageBox.Show("Your GMS content was successfully entered into the DB.", "GMS Content Creator", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Your GMS content failed when DB entry was attempted!", "GMS Content Creator", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Perform Translations
        public int GetVisibilityType(string visbility)
        {
            int returnInt = 0;

            switch (visbility.ToLower())
            { 
                case "deleted":
                    returnInt = (int)GMSVisibilityTypes.Deleted;
                    break;
                case "live":
                    returnInt = (int)GMSVisibilityTypes.Live;
                    break;
                case "staging":
                    returnInt = (int)GMSVisibilityTypes.Staging;
                    break;
                case "unpublished":
                    returnInt = (int)GMSVisibilityTypes.Unpublished;
                    break;
                case "withdrawn":
                    returnInt = (int)GMSVisibilityTypes.Withdrawn;
                    break;
            }

            return returnInt;
        }
        #endregion
    }

    public partial class GMSData
    {
        public Dictionary<string, int> gmsLanguages = new Dictionary<string, int>();

        public GMSData()
        {
            #region Load gmsLanguages with all languages that GMS supports
            gmsLanguages.Add("English (Hong Kong S.A.R.)", 15369);
            gmsLanguages.Add("English (Australia)", 3081);
            gmsLanguages.Add("English (Canada)", 4105);
            gmsLanguages.Add("English (United States)", 1033);
            gmsLanguages.Add("English (Singapore)", 18441);
            gmsLanguages.Add("English (India)", 16393);
            gmsLanguages.Add("English (United Kingdom)", 2057);
            gmsLanguages.Add("English (Ireland)", 6153);
            gmsLanguages.Add("English (New Zealand)", 5129);
            gmsLanguages.Add("Finnish (Finland)", 1035);
            gmsLanguages.Add("French (France)", 1036);
            gmsLanguages.Add("French (Belgium)", 2060);
            gmsLanguages.Add("French (Canada)", 3084);
            gmsLanguages.Add("French (Switzerland)", 4108);
            gmsLanguages.Add("German (Switzerland)", 2055);
            gmsLanguages.Add("German (Germany)", 1031);
            gmsLanguages.Add("German (Austria)", 3079);
            gmsLanguages.Add("Italian (Italy)",1040);
            gmsLanguages.Add("Spanish (Spain)", 3082);
            gmsLanguages.Add("Spanish (Mexico)", 2058);
            #endregion
        }
    }

    public class GMSInMemoryConfigurationProvider : ConfigurationProviderBase, IConfigurationProvider
    {
        private static Dictionary<string, string> connectionStringDictionary = new Dictionary<string, string>();
        private static Dictionary<string, string> settingDictionary = new Dictionary<string, string>();
        private static Dictionary<string, IInterfaceInfo> interfaceDictionary = new Dictionary<string, IInterfaceInfo>();
        private static Dictionary<string, string> interfaceServerDictionary = new Dictionary<string, string>();

        #region Helper Methods
        public static void SetConnectionString(string interfaceName, string connectionString)
        {
            connectionStringDictionary[interfaceName] = connectionString;
        }

        public static void SetSetting(string settingName, string value)
        {
            settingDictionary[settingName] = value;
        }

        public static void Clear()
        {
            connectionStringDictionary.Clear();
            settingDictionary.Clear();
            interfaceDictionary.Clear();
            interfaceServerDictionary.Clear();
        }

        public static void AddInterface(InterfaceInfo interfaceInfo)
        {
            interfaceDictionary.Add(interfaceInfo.Name, interfaceInfo);
        }

        public static void AddInterfaceServer(string interfaceName, string server)
        {
            interfaceServerDictionary.Add(interfaceName, server);
        }

        public void Initialize(string componentName)
        {
            ComponentName = componentName;
        }
        #endregion

        #region IConfigurationProvider Members
        public string GetConnectionString(string interfaceName)
        {
            string connectionString = null;
            if (!connectionStringDictionary.TryGetValue(interfaceName, out connectionString))
            {
                throw new ConfigurationErrorsException("Connection string for interface " + interfaceName + " has not been defined using InMemoryConfigurationProvider.AddConnectionString.");
            }

            return connectionString;
        }

        public string GetSetting(string settingName)
        {
            string setting = null;
            if (!settingDictionary.TryGetValue(settingName, out setting))
            {
                throw new ConfigurationErrorsException("Value for setting named " + settingName + " has not been defined using InMemoryConfigurationProvider.AddSetting.");
            }

            return setting;
        }

        public bool GetBoolSetting(string settingName)
        {
            bool setting = false;
            if (!Boolean.TryParse(GetSetting(settingName), out setting))
            {
                throw new ConfigurationErrorsException("Value for setting named " + settingName + " cannot be converted to a bool.");
            }

            return setting;
        }

        public int GetIntSetting(string settingName)
        {
            int setting = 0;
            if (!Int32.TryParse(GetSetting(settingName), out setting))
            {
                throw new ConfigurationErrorsException("Value for setting named " + settingName + " cannot be converted to an int.");
            }

            return setting;
        }

        public long GetLongSetting(string settingName)
        {
            long setting = 0;
            if (!Int64.TryParse(GetSetting(settingName), out setting))
            {
                throw new ConfigurationErrorsException("Value for setting named " + settingName + " cannot be converted to an long.");
            }

            return setting;
        }

        public double GetDoubleSetting(string settingName)
        {
            double setting = 0;
            if (!Double.TryParse(GetSetting(settingName), out setting))
            {
                throw new ConfigurationErrorsException("Value for setting named " + settingName + " cannot be converted to an double.");
            }

            return setting;
        }

        public IInterfaceInfo GetSingleInterface(string interfaceName)
        {
            IInterfaceInfo interfaceInfo = null;
            if (!interfaceDictionary.TryGetValue(interfaceName, out interfaceInfo))
            {
                throw new ConfigurationErrorsException("The interface named " + interfaceName + " has not been defined using InMemoryConfigurationProvider.AddInterface.");
            }

            return interfaceInfo;
        }

        public IInterfaceInfo GetInterface(string computerName, string interfaceName)
        {
            //NOTE: There is currently no need to support any server information in this call.
            return GetSingleInterface(interfaceName);
        }

        public string GetSingleServerForInterface(string interfaceName)
        {
            if (interfaceServerDictionary.ContainsKey(interfaceName))
            {
                return interfaceServerDictionary[interfaceName];
            }
            else
            {
                return String.Empty;
            }
        }

        ///TODO: Remove the suppression when implemented
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public string Environment { get; private set; }
        public string ComponentName { get; private set; }
        #endregion

        #region IConfigurationProvider Members

        public IVirtualInterfaceInfo GetVirtualInterface(string interfaceType)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region IConfigurationProvider Members

        event SettingChangedEventHandler IConfigurationProvider.SettingChanged
        {
            add { throw new NotImplementedException(); }
            remove { throw new NotImplementedException(); }
        }

        event MultiSettingChangedEventHandler IConfigurationProvider.MultiSettingChanged
        {
            add { throw new NotImplementedException(); }
            remove { throw new NotImplementedException(); }
        }

        string[] IConfigurationProvider.GetMultiSetting(string settingName)
        {
            throw new NotImplementedException();
        }

        string IConfigurationProvider.Server
        {
            get { throw new NotImplementedException(); }
        }

        IVirtualInterfaceInfo IConfigurationProvider.GetVirtualInterface(string interfaceType)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test\GameMetadataService.Test\GMSWebTests.cs ===
﻿using GameMetadata.Client;
using GameMetadata.Common;

using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Net;

using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Core.IO;

namespace GameMetadataService.Test
{
    [Owner("leosite")]
    [TestDescription("Validates that the web game session response Uri matches what is defined in the App.config")]
    public class ValidateWebGameSessionRedirection : WebTest
    {
        public ValidateWebGameSessionRedirection()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            GMSParentClass gmsParent = new GMSParentClass(false);

            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validateResponseUrl = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validateResponseUrl.Validate);
            }

            WebTestRequest webGameSessionRequest = new WebTestRequest(
                new Uri(String.Format(gmsParent.gmsStruct.SessionRedirectionUri,
                Convert.ToString(gmsParent.gmsStruct.Gameid), gmsParent.gmsStruct.SessionId)));

            webGameSessionRequest.ExpectedResponseUrl = String.Format(gmsParent.gmsStruct.WebGameSessionResponse,
                gmsParent.gmsStruct.Gameid.ToString("x"),
                gmsParent.gmsStruct.SessionId);

            webGameSessionRequest.ParseDependentRequests = false;
            webGameSessionRequest.PostRequest += new EventHandler<PostRequestEventArgs>(HandlePostRequest);

            yield return webGameSessionRequest;
        }

        void HandlePostRequest(object sender, PostRequestEventArgs e)
        {
            if (e.Response.ResponseUri == new Uri(e.Request.ExpectedResponseUrl))
            {
                e.Request.Outcome = Outcome.Pass;
            }
        }
    }

    [Owner("leosite")]
    [TestDescription("Validates that the game redirection and web game response Uri matches what is defined in the App.config")]
    public class ValidateWebGameRedirection : WebTest
    {
        public ValidateWebGameRedirection()
        {
            this.PreAuthenticate = true;
            ValidateResponseUrl validateResponseUrl = new ValidateResponseUrl();
            this.ValidateResponse += new EventHandler<ValidationEventArgs>(validateResponseUrl.Validate);
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            GMSParentClass gmsParent = new GMSParentClass(false);

            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validateResponseUrl = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validateResponseUrl.Validate);
            }

            WebTestRequest webGameRedirectionRequest = new WebTestRequest(
                new Uri(String.Format(gmsParent.gmsStruct.GameRedirectionUri,
                Convert.ToString(gmsParent.gmsStruct.Gameid), gmsParent.gmsStruct.Variantids[0].ToString())));

            webGameRedirectionRequest.ExpectedResponseUrl = String.Format(gmsParent.gmsStruct.WebGameRedirectionResponse,
                gmsParent.gmsStruct.Gameid.ToString("x"));

            webGameRedirectionRequest.ParseDependentRequests = false;
            webGameRedirectionRequest.PostRequest += new EventHandler<PostRequestEventArgs>(HandlePostRequest);
            yield return webGameRedirectionRequest;
        }

        void HandlePostRequest(object sender, PostRequestEventArgs e)
        {
            if (e.Response.ResponseUri == new Uri(e.Request.ExpectedResponseUrl))
            {
                e.Request.Outcome = Outcome.Pass;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\GMSContentCreatorForm.Designer.cs ===
﻿namespace GMSContentCreator
{
    partial class GMSContentCreatorForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.tabXML = new System.Windows.Forms.TabPage();
            this.lblEnvironment = new System.Windows.Forms.Label();
            this.cmbEnvironment = new System.Windows.Forms.ComboBox();
            this.btnPreviewXML = new System.Windows.Forms.Button();
            this.btnSaveXML = new System.Windows.Forms.Button();
            this.rtbXMLPreview = new System.Windows.Forms.RichTextBox();
            this.btnSubmitXML = new System.Windows.Forms.Button();
            this.tabVariant = new System.Windows.Forms.TabPage();
            this.grpVariant = new System.Windows.Forms.GroupBox();
            this.btnAddStat = new System.Windows.Forms.Button();
            this.rtbStats = new System.Windows.Forms.RichTextBox();
            this.chkAllVariantLCIDs = new System.Windows.Forms.CheckBox();
            this.rtbVariants = new System.Windows.Forms.RichTextBox();
            this.chkPreferHighValues = new System.Windows.Forms.CheckBox();
            this.btnAddVariants = new System.Windows.Forms.Button();
            this.txtStatName = new System.Windows.Forms.TextBox();
            this.lblVariantName = new System.Windows.Forms.Label();
            this.txtVariantName = new System.Windows.Forms.TextBox();
            this.lblStatRankings = new System.Windows.Forms.Label();
            this.lblVariantLCID = new System.Windows.Forms.Label();
            this.lblVariantIDSequence = new System.Windows.Forms.Label();
            this.txtVariantIDStartingSequence = new System.Windows.Forms.TextBox();
            this.clbVariantsLCID = new System.Windows.Forms.CheckedListBox();
            this.tabPageGame = new System.Windows.Forms.TabPage();
            this.grpMain = new System.Windows.Forms.GroupBox();
            this.grpVisibilityLevel = new System.Windows.Forms.GroupBox();
            this.rbtnWithdrawn = new System.Windows.Forms.RadioButton();
            this.rbtnUnpublished = new System.Windows.Forms.RadioButton();
            this.rbtnStaging = new System.Windows.Forms.RadioButton();
            this.rbtnLive = new System.Windows.Forms.RadioButton();
            this.rbtnDeleted = new System.Windows.Forms.RadioButton();
            this.chkAllGameLCIDs = new System.Windows.Forms.CheckBox();
            this.rtbImageUris = new System.Windows.Forms.RichTextBox();
            this.lblImageType = new System.Windows.Forms.Label();
            this.txtImageUri = new System.Windows.Forms.TextBox();
            this.btnAddImageUri = new System.Windows.Forms.Button();
            this.cmbImageTypes = new System.Windows.Forms.ComboBox();
            this.chkUsesLiveMultiplayerServices = new System.Windows.Forms.CheckBox();
            this.lblGameId = new System.Windows.Forms.Label();
            this.txtGameId = new System.Windows.Forms.TextBox();
            this.lblGameName = new System.Windows.Forms.Label();
            this.txtGameName = new System.Windows.Forms.TextBox();
            this.lblGamePlatforms = new System.Windows.Forms.Label();
            this.clbGamePlatforms = new System.Windows.Forms.CheckedListBox();
            this.lblGameLCID = new System.Windows.Forms.Label();
            this.lblImageUri = new System.Windows.Forms.Label();
            this.clbGameLCID = new System.Windows.Forms.CheckedListBox();
            this.tabParent = new System.Windows.Forms.TabControl();
            this.tabXML.SuspendLayout();
            this.tabVariant.SuspendLayout();
            this.grpVariant.SuspendLayout();
            this.tabPageGame.SuspendLayout();
            this.grpMain.SuspendLayout();
            this.grpVisibilityLevel.SuspendLayout();
            this.tabParent.SuspendLayout();
            this.SuspendLayout();
            // 
            // tabXML
            // 
            this.tabXML.Controls.Add(this.lblEnvironment);
            this.tabXML.Controls.Add(this.cmbEnvironment);
            this.tabXML.Controls.Add(this.btnPreviewXML);
            this.tabXML.Controls.Add(this.btnSaveXML);
            this.tabXML.Controls.Add(this.rtbXMLPreview);
            this.tabXML.Controls.Add(this.btnSubmitXML);
            this.tabXML.Location = new System.Drawing.Point(4, 22);
            this.tabXML.Name = "tabXML";
            this.tabXML.Padding = new System.Windows.Forms.Padding(3);
            this.tabXML.Size = new System.Drawing.Size(491, 739);
            this.tabXML.TabIndex = 2;
            this.tabXML.Text = "XMLOutput";
            this.tabXML.UseVisualStyleBackColor = true;
            // 
            // lblEnvironment
            // 
            this.lblEnvironment.AutoSize = true;
            this.lblEnvironment.Location = new System.Drawing.Point(241, 9);
            this.lblEnvironment.Name = "lblEnvironment";
            this.lblEnvironment.Size = new System.Drawing.Size(66, 13);
            this.lblEnvironment.TabIndex = 22;
            this.lblEnvironment.Text = "Environment";
            // 
            // cmbEnvironment
            // 
            this.cmbEnvironment.FormattingEnabled = true;
            this.cmbEnvironment.Items.AddRange(new object[] {
            "storax",
            "tesla"});
            this.cmbEnvironment.Location = new System.Drawing.Point(313, 6);
            this.cmbEnvironment.Name = "cmbEnvironment";
            this.cmbEnvironment.Size = new System.Drawing.Size(169, 21);
            this.cmbEnvironment.TabIndex = 21;
            // 
            // btnPreviewXML
            // 
            this.btnPreviewXML.Location = new System.Drawing.Point(6, 713);
            this.btnPreviewXML.Name = "btnPreviewXML";
            this.btnPreviewXML.Size = new System.Drawing.Size(130, 23);
            this.btnPreviewXML.TabIndex = 15;
            this.btnPreviewXML.Text = "Preview XML";
            this.btnPreviewXML.UseVisualStyleBackColor = true;
            this.btnPreviewXML.Click += new System.EventHandler(this.btnPreviewXML_Click);
            // 
            // btnSaveXML
            // 
            this.btnSaveXML.Location = new System.Drawing.Point(142, 713);
            this.btnSaveXML.Name = "btnSaveXML";
            this.btnSaveXML.Size = new System.Drawing.Size(130, 23);
            this.btnSaveXML.TabIndex = 16;
            this.btnSaveXML.Text = "Save XML";
            this.btnSaveXML.UseVisualStyleBackColor = true;
            this.btnSaveXML.Visible = false;
            // 
            // rtbXMLPreview
            // 
            this.rtbXMLPreview.BackColor = System.Drawing.SystemColors.Info;
            this.rtbXMLPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.rtbXMLPreview.Location = new System.Drawing.Point(6, 32);
            this.rtbXMLPreview.Name = "rtbXMLPreview";
            this.rtbXMLPreview.Size = new System.Drawing.Size(476, 672);
            this.rtbXMLPreview.TabIndex = 18;
            this.rtbXMLPreview.Text = "";
            this.rtbXMLPreview.WordWrap = false;
            // 
            // btnSubmitXML
            // 
            this.btnSubmitXML.Location = new System.Drawing.Point(278, 713);
            this.btnSubmitXML.Name = "btnSubmitXML";
            this.btnSubmitXML.Size = new System.Drawing.Size(130, 23);
            this.btnSubmitXML.TabIndex = 17;
            this.btnSubmitXML.Text = "Submit XML";
            this.btnSubmitXML.UseVisualStyleBackColor = true;
            this.btnSubmitXML.Click += new System.EventHandler(this.btnSubmitXML_Click);
            // 
            // tabVariant
            // 
            this.tabVariant.Controls.Add(this.grpVariant);
            this.tabVariant.Location = new System.Drawing.Point(4, 22);
            this.tabVariant.Name = "tabVariant";
            this.tabVariant.Padding = new System.Windows.Forms.Padding(3);
            this.tabVariant.Size = new System.Drawing.Size(491, 739);
            this.tabVariant.TabIndex = 1;
            this.tabVariant.Text = "Variants";
            this.tabVariant.UseVisualStyleBackColor = true;
            // 
            // grpVariant
            // 
            this.grpVariant.Controls.Add(this.btnAddStat);
            this.grpVariant.Controls.Add(this.rtbStats);
            this.grpVariant.Controls.Add(this.chkAllVariantLCIDs);
            this.grpVariant.Controls.Add(this.rtbVariants);
            this.grpVariant.Controls.Add(this.chkPreferHighValues);
            this.grpVariant.Controls.Add(this.btnAddVariants);
            this.grpVariant.Controls.Add(this.txtStatName);
            this.grpVariant.Controls.Add(this.lblVariantName);
            this.grpVariant.Controls.Add(this.txtVariantName);
            this.grpVariant.Controls.Add(this.lblStatRankings);
            this.grpVariant.Controls.Add(this.lblVariantLCID);
            this.grpVariant.Controls.Add(this.lblVariantIDSequence);
            this.grpVariant.Controls.Add(this.txtVariantIDStartingSequence);
            this.grpVariant.Controls.Add(this.clbVariantsLCID);
            this.grpVariant.Location = new System.Drawing.Point(6, 6);
            this.grpVariant.Name = "grpVariant";
            this.grpVariant.Size = new System.Drawing.Size(478, 727);
            this.grpVariant.TabIndex = 8;
            this.grpVariant.TabStop = false;
            this.grpVariant.Text = "Variant Data";
            // 
            // btnAddStat
            // 
            this.btnAddStat.Location = new System.Drawing.Point(339, 66);
            this.btnAddStat.Name = "btnAddStat";
            this.btnAddStat.Size = new System.Drawing.Size(133, 23);
            this.btnAddStat.TabIndex = 16;
            this.btnAddStat.Text = "Add New Stat";
            this.btnAddStat.UseVisualStyleBackColor = true;
            this.btnAddStat.Click += new System.EventHandler(this.btnAddStat_Click);
            // 
            // rtbStats
            // 
            this.rtbStats.Location = new System.Drawing.Point(223, 95);
            this.rtbStats.Name = "rtbStats";
            this.rtbStats.Size = new System.Drawing.Size(249, 337);
            this.rtbStats.TabIndex = 15;
            this.rtbStats.Text = "";
            this.rtbStats.WordWrap = false;
            // 
            // chkAllVariantLCIDs
            // 
            this.chkAllVariantLCIDs.AutoSize = true;
            this.chkAllVariantLCIDs.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.chkAllVariantLCIDs.Location = new System.Drawing.Point(143, 110);
            this.chkAllVariantLCIDs.Name = "chkAllVariantLCIDs";
            this.chkAllVariantLCIDs.Size = new System.Drawing.Size(68, 17);
            this.chkAllVariantLCIDs.TabIndex = 0;
            this.chkAllVariantLCIDs.Text = "Select All";
            this.chkAllVariantLCIDs.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkAllVariantLCIDs.UseVisualStyleBackColor = true;
            this.chkAllVariantLCIDs.CheckedChanged += new System.EventHandler(this.chkAllVariantLCIDs_CheckedChanged);
            // 
            // rtbVariants
            // 
            this.rtbVariants.Location = new System.Drawing.Point(6, 438);
            this.rtbVariants.Name = "rtbVariants";
            this.rtbVariants.Size = new System.Drawing.Size(466, 252);
            this.rtbVariants.TabIndex = 0;
            this.rtbVariants.Text = "";
            this.rtbVariants.WordWrap = false;
            // 
            // chkPreferHighValues
            // 
            this.chkPreferHighValues.AutoSize = true;
            this.chkPreferHighValues.Location = new System.Drawing.Point(361, 43);
            this.chkPreferHighValues.Name = "chkPreferHighValues";
            this.chkPreferHighValues.Size = new System.Drawing.Size(114, 17);
            this.chkPreferHighValues.TabIndex = 13;
            this.chkPreferHighValues.Text = "Prefer High Values";
            this.chkPreferHighValues.UseVisualStyleBackColor = true;
            // 
            // btnAddVariants
            // 
            this.btnAddVariants.Location = new System.Drawing.Point(339, 696);
            this.btnAddVariants.Name = "btnAddVariants";
            this.btnAddVariants.Size = new System.Drawing.Size(133, 23);
            this.btnAddVariants.TabIndex = 14;
            this.btnAddVariants.Text = "Add New Variant";
            this.btnAddVariants.UseVisualStyleBackColor = true;
            this.btnAddVariants.Click += new System.EventHandler(this.btnAddVariants_Click);
            // 
            // txtStatName
            // 
            this.txtStatName.Location = new System.Drawing.Point(223, 40);
            this.txtStatName.Name = "txtStatName";
            this.txtStatName.Size = new System.Drawing.Size(132, 20);
            this.txtStatName.TabIndex = 12;
            this.txtStatName.Text = "Sample Stat Ranking";
            // 
            // lblVariantName
            // 
            this.lblVariantName.AutoSize = true;
            this.lblVariantName.Location = new System.Drawing.Point(6, 24);
            this.lblVariantName.Name = "lblVariantName";
            this.lblVariantName.Size = new System.Drawing.Size(191, 13);
            this.lblVariantName.TabIndex = 13;
            this.lblVariantName.Text = "Variant Name (locale will be appended)";
            // 
            // txtVariantName
            // 
            this.txtVariantName.Location = new System.Drawing.Point(6, 40);
            this.txtVariantName.Name = "txtVariantName";
            this.txtVariantName.Size = new System.Drawing.Size(205, 20);
            this.txtVariantName.TabIndex = 11;
            this.txtVariantName.Text = "Sample Variant Name";
            this.txtVariantName.LostFocus += new System.EventHandler(this.txtVariantName_LostFocus);
            // 
            // lblStatRankings
            // 
            this.lblStatRankings.AutoSize = true;
            this.lblStatRankings.Location = new System.Drawing.Point(223, 24);
            this.lblStatRankings.Name = "lblStatRankings";
            this.lblStatRankings.Size = new System.Drawing.Size(100, 13);
            this.lblStatRankings.TabIndex = 10;
            this.lblStatRankings.Text = "Stat Ranking Name";
            // 
            // lblVariantLCID
            // 
            this.lblVariantLCID.AutoSize = true;
            this.lblVariantLCID.Location = new System.Drawing.Point(6, 112);
            this.lblVariantLCID.Name = "lblVariantLCID";
            this.lblVariantLCID.Size = new System.Drawing.Size(75, 13);
            this.lblVariantLCID.TabIndex = 6;
            this.lblVariantLCID.Text = "Variant Locale";
            // 
            // lblVariantIDSequence
            // 
            this.lblVariantIDSequence.AutoSize = true;
            this.lblVariantIDSequence.Location = new System.Drawing.Point(6, 63);
            this.lblVariantIDSequence.Name = "lblVariantIDSequence";
            this.lblVariantIDSequence.Size = new System.Drawing.Size(93, 13);
            this.lblVariantIDSequence.TabIndex = 5;
            this.lblVariantIDSequence.Text = "Variant Starting ID";
            // 
            // txtVariantIDStartingSequence
            // 
            this.txtVariantIDStartingSequence.Location = new System.Drawing.Point(6, 79);
            this.txtVariantIDStartingSequence.Name = "txtVariantIDStartingSequence";
            this.txtVariantIDStartingSequence.Size = new System.Drawing.Size(205, 20);
            this.txtVariantIDStartingSequence.TabIndex = 10;
            this.txtVariantIDStartingSequence.Text = "0";
            this.txtVariantIDStartingSequence.LostFocus += new System.EventHandler(this.txtVariantIDStartingSequence_LostFocus);
            // 
            // clbVariantsLCID
            // 
            this.clbVariantsLCID.FormattingEnabled = true;
            this.clbVariantsLCID.Location = new System.Drawing.Point(6, 128);
            this.clbVariantsLCID.Name = "clbVariantsLCID";
            this.clbVariantsLCID.Size = new System.Drawing.Size(205, 304);
            this.clbVariantsLCID.Sorted = true;
            this.clbVariantsLCID.TabIndex = 9;
            // 
            // tabPageGame
            // 
            this.tabPageGame.Controls.Add(this.grpMain);
            this.tabPageGame.Location = new System.Drawing.Point(4, 22);
            this.tabPageGame.Name = "tabPageGame";
            this.tabPageGame.Padding = new System.Windows.Forms.Padding(3);
            this.tabPageGame.Size = new System.Drawing.Size(491, 739);
            this.tabPageGame.TabIndex = 0;
            this.tabPageGame.Text = "Game";
            this.tabPageGame.UseVisualStyleBackColor = true;
            // 
            // grpMain
            // 
            this.grpMain.Controls.Add(this.grpVisibilityLevel);
            this.grpMain.Controls.Add(this.chkAllGameLCIDs);
            this.grpMain.Controls.Add(this.rtbImageUris);
            this.grpMain.Controls.Add(this.lblImageType);
            this.grpMain.Controls.Add(this.txtImageUri);
            this.grpMain.Controls.Add(this.btnAddImageUri);
            this.grpMain.Controls.Add(this.cmbImageTypes);
            this.grpMain.Controls.Add(this.chkUsesLiveMultiplayerServices);
            this.grpMain.Controls.Add(this.lblGameId);
            this.grpMain.Controls.Add(this.txtGameId);
            this.grpMain.Controls.Add(this.lblGameName);
            this.grpMain.Controls.Add(this.txtGameName);
            this.grpMain.Controls.Add(this.lblGamePlatforms);
            this.grpMain.Controls.Add(this.clbGamePlatforms);
            this.grpMain.Controls.Add(this.lblGameLCID);
            this.grpMain.Controls.Add(this.lblImageUri);
            this.grpMain.Controls.Add(this.clbGameLCID);
            this.grpMain.Location = new System.Drawing.Point(6, 6);
            this.grpMain.Name = "grpMain";
            this.grpMain.Size = new System.Drawing.Size(476, 727);
            this.grpMain.TabIndex = 19;
            this.grpMain.TabStop = false;
            this.grpMain.Text = "Game Data";
            // 
            // grpVisibilityLevel
            // 
            this.grpVisibilityLevel.Controls.Add(this.rbtnWithdrawn);
            this.grpVisibilityLevel.Controls.Add(this.rbtnUnpublished);
            this.grpVisibilityLevel.Controls.Add(this.rbtnStaging);
            this.grpVisibilityLevel.Controls.Add(this.rbtnLive);
            this.grpVisibilityLevel.Controls.Add(this.rbtnDeleted);
            this.grpVisibilityLevel.Location = new System.Drawing.Point(9, 413);
            this.grpVisibilityLevel.Name = "grpVisibilityLevel";
            this.grpVisibilityLevel.Size = new System.Drawing.Size(142, 124);
            this.grpVisibilityLevel.TabIndex = 22;
            this.grpVisibilityLevel.TabStop = false;
            this.grpVisibilityLevel.Text = "Select the visibility level";
            // 
            // rbtnWithdrawn
            // 
            this.rbtnWithdrawn.AutoSize = true;
            this.rbtnWithdrawn.Location = new System.Drawing.Point(6, 99);
            this.rbtnWithdrawn.Name = "rbtnWithdrawn";
            this.rbtnWithdrawn.Size = new System.Drawing.Size(14, 13);
            this.rbtnWithdrawn.TabIndex = 4;
            this.rbtnWithdrawn.TabStop = true;
            this.rbtnWithdrawn.UseVisualStyleBackColor = true;
            // 
            // rbtnUnpublished
            // 
            this.rbtnUnpublished.AutoSize = true;
            this.rbtnUnpublished.Location = new System.Drawing.Point(6, 79);
            this.rbtnUnpublished.Name = "rbtnUnpublished";
            this.rbtnUnpublished.Size = new System.Drawing.Size(14, 13);
            this.rbtnUnpublished.TabIndex = 3;
            this.rbtnUnpublished.TabStop = true;
            this.rbtnUnpublished.UseVisualStyleBackColor = true;
            // 
            // rbtnStaging
            // 
            this.rbtnStaging.AutoSize = true;
            this.rbtnStaging.Location = new System.Drawing.Point(6, 59);
            this.rbtnStaging.Name = "rbtnStaging";
            this.rbtnStaging.Size = new System.Drawing.Size(14, 13);
            this.rbtnStaging.TabIndex = 2;
            this.rbtnStaging.TabStop = true;
            this.rbtnStaging.UseVisualStyleBackColor = true;
            // 
            // rbtnLive
            // 
            this.rbtnLive.AutoSize = true;
            this.rbtnLive.Location = new System.Drawing.Point(6, 39);
            this.rbtnLive.Name = "rbtnLive";
            this.rbtnLive.Size = new System.Drawing.Size(14, 13);
            this.rbtnLive.TabIndex = 1;
            this.rbtnLive.TabStop = true;
            this.rbtnLive.UseVisualStyleBackColor = true;
            // 
            // rbtnDeleted
            // 
            this.rbtnDeleted.AutoSize = true;
            this.rbtnDeleted.Location = new System.Drawing.Point(6, 19);
            this.rbtnDeleted.Name = "rbtnDeleted";
            this.rbtnDeleted.Size = new System.Drawing.Size(14, 13);
            this.rbtnDeleted.TabIndex = 0;
            this.rbtnDeleted.TabStop = true;
            this.rbtnDeleted.UseVisualStyleBackColor = true;
            // 
            // chkAllGameLCIDs
            // 
            this.chkAllGameLCIDs.AutoSize = true;
            this.chkAllGameLCIDs.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.chkAllGameLCIDs.Location = new System.Drawing.Point(397, 22);
            this.chkAllGameLCIDs.Name = "chkAllGameLCIDs";
            this.chkAllGameLCIDs.Size = new System.Drawing.Size(68, 17);
            this.chkAllGameLCIDs.TabIndex = 0;
            this.chkAllGameLCIDs.Text = "Select All";
            this.chkAllGameLCIDs.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkAllGameLCIDs.UseVisualStyleBackColor = true;
            this.chkAllGameLCIDs.CheckedChanged += new System.EventHandler(this.chkAllGameLCIDs_CheckedChanged);
            // 
            // rtbImageUris
            // 
            this.rtbImageUris.Location = new System.Drawing.Point(6, 587);
            this.rtbImageUris.Name = "rtbImageUris";
            this.rtbImageUris.Size = new System.Drawing.Size(459, 134);
            this.rtbImageUris.TabIndex = 0;
            this.rtbImageUris.Text = "";
            // 
            // lblImageType
            // 
            this.lblImageType.AutoSize = true;
            this.lblImageType.Location = new System.Drawing.Point(210, 544);
            this.lblImageType.Name = "lblImageType";
            this.lblImageType.Size = new System.Drawing.Size(63, 13);
            this.lblImageType.TabIndex = 21;
            this.lblImageType.Text = "Image Type";
            // 
            // txtImageUri
            // 
            this.txtImageUri.Location = new System.Drawing.Point(6, 560);
            this.txtImageUri.Name = "txtImageUri";
            this.txtImageUri.Size = new System.Drawing.Size(201, 20);
            this.txtImageUri.TabIndex = 6;
            this.txtImageUri.Text = "http://www.bing.com";
            // 
            // btnAddImageUri
            // 
            this.btnAddImageUri.Location = new System.Drawing.Point(420, 560);
            this.btnAddImageUri.Name = "btnAddImageUri";
            this.btnAddImageUri.Size = new System.Drawing.Size(46, 20);
            this.btnAddImageUri.TabIndex = 8;
            this.btnAddImageUri.Text = "Add";
            this.btnAddImageUri.UseVisualStyleBackColor = true;
            this.btnAddImageUri.Click += new System.EventHandler(this.btnAddImageUri_Click);
            // 
            // cmbImageTypes
            // 
            this.cmbImageTypes.FormattingEnabled = true;
            this.cmbImageTypes.Location = new System.Drawing.Point(213, 560);
            this.cmbImageTypes.Name = "cmbImageTypes";
            this.cmbImageTypes.Size = new System.Drawing.Size(201, 21);
            this.cmbImageTypes.TabIndex = 7;
            // 
            // chkUsesLiveMultiplayerServices
            // 
            this.chkUsesLiveMultiplayerServices.AutoSize = true;
            this.chkUsesLiveMultiplayerServices.Checked = true;
            this.chkUsesLiveMultiplayerServices.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkUsesLiveMultiplayerServices.Location = new System.Drawing.Point(9, 740);
            this.chkUsesLiveMultiplayerServices.Name = "chkUsesLiveMultiplayerServices";
            this.chkUsesLiveMultiplayerServices.Size = new System.Drawing.Size(176, 17);
            this.chkUsesLiveMultiplayerServices.TabIndex = 9;
            this.chkUsesLiveMultiplayerServices.Text = "Uses Live Multiplayer Services?";
            this.chkUsesLiveMultiplayerServices.UseVisualStyleBackColor = true;
            // 
            // lblGameId
            // 
            this.lblGameId.AutoSize = true;
            this.lblGameId.Location = new System.Drawing.Point(415, 367);
            this.lblGameId.Name = "lblGameId";
            this.lblGameId.Size = new System.Drawing.Size(49, 13);
            this.lblGameId.TabIndex = 16;
            this.lblGameId.Text = "Game ID";
            // 
            // txtGameId
            // 
            this.txtGameId.Location = new System.Drawing.Point(415, 383);
            this.txtGameId.Name = "txtGameId";
            this.txtGameId.Size = new System.Drawing.Size(51, 20);
            this.txtGameId.TabIndex = 3;
            this.txtGameId.Text = "1";
            // 
            // lblGameName
            // 
            this.lblGameName.AutoSize = true;
            this.lblGameName.Location = new System.Drawing.Point(6, 367);
            this.lblGameName.Name = "lblGameName";
            this.lblGameName.Size = new System.Drawing.Size(66, 13);
            this.lblGameName.TabIndex = 11;
            this.lblGameName.Text = "Game Name";
            // 
            // txtGameName
            // 
            this.txtGameName.Location = new System.Drawing.Point(6, 383);
            this.txtGameName.Name = "txtGameName";
            this.txtGameName.Size = new System.Drawing.Size(403, 20);
            this.txtGameName.TabIndex = 2;
            this.txtGameName.Text = "Sample Game";
            // 
            // lblGamePlatforms
            // 
            this.lblGamePlatforms.AutoSize = true;
            this.lblGamePlatforms.Location = new System.Drawing.Point(154, 413);
            this.lblGamePlatforms.Name = "lblGamePlatforms";
            this.lblGamePlatforms.Size = new System.Drawing.Size(145, 13);
            this.lblGamePlatforms.TabIndex = 9;
            this.lblGamePlatforms.Text = "Select the available platforms";
            // 
            // clbGamePlatforms
            // 
            this.clbGamePlatforms.CheckOnClick = true;
            this.clbGamePlatforms.FormattingEnabled = true;
            this.clbGamePlatforms.Location = new System.Drawing.Point(157, 428);
            this.clbGamePlatforms.Name = "clbGamePlatforms";
            this.clbGamePlatforms.Size = new System.Drawing.Size(309, 109);
            this.clbGamePlatforms.TabIndex = 5;
            // 
            // lblGameLCID
            // 
            this.lblGameLCID.AutoSize = true;
            this.lblGameLCID.Location = new System.Drawing.Point(6, 24);
            this.lblGameLCID.Name = "lblGameLCID";
            this.lblGameLCID.Size = new System.Drawing.Size(124, 13);
            this.lblGameLCID.TabIndex = 7;
            this.lblGameLCID.Text = "Select the game cultures";
            // 
            // lblImageUri
            // 
            this.lblImageUri.AutoSize = true;
            this.lblImageUri.Location = new System.Drawing.Point(6, 544);
            this.lblImageUri.Name = "lblImageUri";
            this.lblImageUri.Size = new System.Drawing.Size(52, 13);
            this.lblImageUri.TabIndex = 5;
            this.lblImageUri.Text = "Image Uri";
            // 
            // clbGameLCID
            // 
            this.clbGameLCID.CheckOnClick = true;
            this.clbGameLCID.FormattingEnabled = true;
            this.clbGameLCID.Location = new System.Drawing.Point(6, 40);
            this.clbGameLCID.Name = "clbGameLCID";
            this.clbGameLCID.Size = new System.Drawing.Size(460, 319);
            this.clbGameLCID.Sorted = true;
            this.clbGameLCID.TabIndex = 1;
            // 
            // tabParent
            // 
            this.tabParent.Controls.Add(this.tabPageGame);
            this.tabParent.Controls.Add(this.tabVariant);
            this.tabParent.Controls.Add(this.tabXML);
            this.tabParent.Location = new System.Drawing.Point(12, 12);
            this.tabParent.Name = "tabParent";
            this.tabParent.SelectedIndex = 0;
            this.tabParent.Size = new System.Drawing.Size(499, 765);
            this.tabParent.TabIndex = 1;
            // 
            // GMSContentCreatorForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(522, 794);
            this.Controls.Add(this.tabParent);
            this.Name = "GMSContentCreatorForm";
            this.Text = "GMS Content Creator";
            this.Load += new System.EventHandler(this.GMSContentCreatorForm_Load);
            this.tabXML.ResumeLayout(false);
            this.tabXML.PerformLayout();
            this.tabVariant.ResumeLayout(false);
            this.grpVariant.ResumeLayout(false);
            this.grpVariant.PerformLayout();
            this.tabPageGame.ResumeLayout(false);
            this.grpMain.ResumeLayout(false);
            this.grpMain.PerformLayout();
            this.grpVisibilityLevel.ResumeLayout(false);
            this.grpVisibilityLevel.PerformLayout();
            this.tabParent.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        void chkAllVariantLCIDs_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkAllVariantLCIDs.Checked)
                this.setAllCheckboxes(this.clbVariantsLCID, true);
            else
                this.setAllCheckboxes(this.clbVariantsLCID, false);
        }

        void chkAllGameLCIDs_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkAllGameLCIDs.Checked)
                this.setAllCheckboxes(this.clbGameLCID, true);
            else
                this.setAllCheckboxes(this.clbGameLCID, false);
        }

        void txtVariantIDStartingSequence_LostFocus(object sender, System.EventArgs e)
        {
            //Validate that the text representation of the 
            if (!int.TryParse(txtVariantIDStartingSequence.Text, out currentVariantID))
            {
                System.Windows.Forms.MessageBox.Show("Please enter a valid int value",
                    "GMS Content Creator Error",
                    System.Windows.Forms.MessageBoxButtons.OK,
                    System.Windows.Forms.MessageBoxIcon.Error);
            }
        }

        void txtVariantName_LostFocus(object sender, System.EventArgs e)
        {
            if (string.IsNullOrEmpty(txtVariantName.Text))
            {
                System.Windows.Forms.MessageBox.Show("Please enter a Variant Name", 
                    "GMS Content Creator Error", 
                    System.Windows.Forms.MessageBoxButtons.OK, 
                    System.Windows.Forms.MessageBoxIcon.Error);
            }
        }
        #endregion

        private System.Windows.Forms.TabPage tabXML;
        private System.Windows.Forms.Button btnPreviewXML;
        private System.Windows.Forms.Button btnSaveXML;
        private System.Windows.Forms.RichTextBox rtbXMLPreview;
        private System.Windows.Forms.Button btnSubmitXML;
        private System.Windows.Forms.TabPage tabVariant;
        private System.Windows.Forms.GroupBox grpVariant;
        private System.Windows.Forms.Label lblVariantName;
        private System.Windows.Forms.TextBox txtVariantName;
        private System.Windows.Forms.Label lblStatRankings;
        private System.Windows.Forms.Label lblVariantLCID;
        private System.Windows.Forms.Label lblVariantIDSequence;
        private System.Windows.Forms.TextBox txtVariantIDStartingSequence;
        private System.Windows.Forms.CheckedListBox clbVariantsLCID;
        private System.Windows.Forms.TabPage tabPageGame;
        private System.Windows.Forms.GroupBox grpMain;
        private System.Windows.Forms.Button btnAddImageUri;
        private System.Windows.Forms.CheckBox chkUsesLiveMultiplayerServices;
        private System.Windows.Forms.Label lblGameId;
        private System.Windows.Forms.TextBox txtGameId;
        private System.Windows.Forms.Label lblGameName;
        private System.Windows.Forms.TextBox txtGameName;
        private System.Windows.Forms.Label lblGamePlatforms;
        private System.Windows.Forms.CheckedListBox clbGamePlatforms;
        private System.Windows.Forms.Label lblGameLCID;
        private System.Windows.Forms.Label lblImageUri;
        private System.Windows.Forms.CheckedListBox clbGameLCID;
        private System.Windows.Forms.TabControl tabParent;
        private System.Windows.Forms.TextBox txtStatName;
        private System.Windows.Forms.Button btnAddVariants;
        private System.Windows.Forms.TextBox txtImageUri;
        private System.Windows.Forms.ComboBox cmbImageTypes;
        private System.Windows.Forms.Label lblImageType;
        private System.Windows.Forms.RichTextBox rtbImageUris;
        private System.Windows.Forms.CheckBox chkPreferHighValues;
        private System.Windows.Forms.RichTextBox rtbVariants;
        private System.Windows.Forms.CheckBox chkAllVariantLCIDs;
        private System.Windows.Forms.CheckBox chkAllGameLCIDs;
        private System.Windows.Forms.Label lblEnvironment;
        private System.Windows.Forms.ComboBox cmbEnvironment;
        private System.Windows.Forms.RichTextBox rtbStats;
        private System.Windows.Forms.Button btnAddStat;
        private System.Windows.Forms.GroupBox grpVisibilityLevel;
        private System.Windows.Forms.RadioButton rbtnStaging;
        private System.Windows.Forms.RadioButton rbtnLive;
        private System.Windows.Forms.RadioButton rbtnDeleted;
        private System.Windows.Forms.RadioButton rbtnWithdrawn;
        private System.Windows.Forms.RadioButton rbtnUnpublished;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\EnvironmentSettings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GMSContentCreator {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class EnvironmentSettings : global::System.Configuration.ApplicationSettingsBase {
        
        private static EnvironmentSettings defaultInstance = ((EnvironmentSettings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new EnvironmentSettings())));
        
        public static EnvironmentSettings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("80")]
        public int IngestionServicePort {
            get {
                return ((int)(this["IngestionServicePort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ingestion.svc")]
        public string IngestionServicePath {
            get {
                return ((string)(this["IngestionServicePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("gms.storax.xboxlive.com")]
        public string IngestionServiceHost {
            get {
                return ((string)(this["IngestionServiceHost"]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ABCHEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace GMSContentCreator
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new GMSContentCreatorForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("GMSContentCreator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("GMSContentCreator")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f73ea103-c2bd-4104-8f7b-a60fd05d7f97")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ActiveAuthEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ActiveAuthEmulator\ActiveAuthData.cs ===
﻿using Leet.Identity.ActiveAuth;

namespace Test.Identity.Common
{
    /// <summary>
    /// ActiveAuthData class
    /// </summary>
	public class ActiveAuthData : IActiveAuthAdapter
	{
        /// <summary>
        /// Gets or sets the Cid
        /// </summary>
        public long Cid { get; set; }

		/// <summary>
		/// Gets or sets the Puid
		/// </summary>
		public long Puid { get; set; }

		/// <summary>
		/// Gets or sets the Xuid
		/// </summary>
		public ulong Xuid { get; set; }

		/// <summary>
		/// Creates an instance of the ActiveAuthData class
		/// </summary>
		public ActiveAuthData()
		{ }

        public bool HasPrivilege(int privilege)
        {
            throw new System.NotImplementedException();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GMSContentCreator.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\GameMetadataService.Test.Common\Library\GMSContentCreator\GMSContentCreator\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GMSContentCreator.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GMSContentCreator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ABCHEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ABCHEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("15bbe0a5-2916-4c9d-b91a-7ad4b4b87607")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ABCHEmulator\ABCHEmulator.cs ===
﻿using System.Collections;
using System.IO;
using System.Web;
using System.Reflection;
using Leet.Profile.Proxies;
using Leet.Profile;

namespace Test.Identity.Common
{
	/// <summary>
	/// Class created to emulate ABCH service.  Will return faked data based on XML files rather than connecting to the service itself.
	/// </summary>
	public class ABCHEmulator : BaseEmulator, IAbchContactsProvider
	{
		Hashtable results;

		/// <summary>
		/// Constructor for the ABCH Emulator.  All files in /bin/EmulatorXML/ that start with ABCH_ will be deserialized into objects to create the 'database' of users.
		/// </summary>
		public ABCHEmulator()
			: base((HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/EmulatorXML/ABCHEmulatorConfig.xml") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\EmulatorXML\ABCHEmulatorConfig.xml").Substring("file:/".Length)))
		{
			results = new Hashtable();

			string filePath = (HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/EmulatorXML/") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\EmulatorXML\").Substring("file:/".Length));
			
			string[] filenames = Directory.GetFiles(filePath, "ABCH_*.xml");
			foreach (string filename in filenames)
			{
				string puid = filename.Substring(filePath.Length).Substring("ABCH_".Length);
				puid = puid.Substring(0, puid.Length - ".xml".Length);

				results.Add(puid, (FindContactsPagedResult)LoadState(typeof(FindContactsPagedResult), filename));
			}
		}

		/// <summary>
		/// Retrieve an individual user's list of Contacts based on their PUID
		/// </summary>
		/// <param name="puid">PUID of the user to retrieve</param>
		/// <returns>Full Contact List for individual user</returns>
		public FindContactsPagedResult FindContacts(long puid)
		{
			return (FindContactsPagedResult)results[puid.ToString()];
		}

        public long FindPuid(long cid)
        {
            foreach (object obj in results)
            {
                FindContactsPagedResult pr = (FindContactsPagedResult)((System.Collections.DictionaryEntry)obj).Value;
                if (pr.Ab.abInfo.OwnerCID == cid)
                {
                    return pr.Ab.abInfo.ownerPuid;
                }
            }

            return 0;
        }

        public long FindCid(long puid)
        {
            throw new System.NotImplementedException();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ActiveAuthEmulator\ActiveAuthEmulator.cs ===
﻿using System.Web;
using Leet.Identity.ActiveAuth;

namespace Test.Identity.Common
{
    /// <summary>
    /// ActiveAuthEmulator class
    /// </summary>
    public class ActiveAuthEmulator : BaseEmulator, IActiveAuthAdapter
    {
        private long cid;
        private long puid;
        private ulong xuid;

        public long Cid
        {
            get
            {
                // If functional Execution mode, read data from file
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    ActiveAuthData data = this.GetDataFromXML();
                    return data.Cid;
                }
                else
                {
                    return this.cid;
                }
            }
        }

        /// <summary>
        /// Gets the Puid
        /// </summary>
        public long Puid
        {
            get 
            {   
                // If functional Execution mode, read data from file
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    ActiveAuthData data = this.GetDataFromXML();
                    return data.Puid;
                }
                else
                {
                    return this.puid;
                }
            }
        }

        /// <summary>
        /// Gets the Xuid
        /// </summary>
        public ulong Xuid
        {
            get 
            {
                // If functional Execution mode, read data from file
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    ActiveAuthData data = this.GetDataFromXML();
                    return data.Xuid;
                }
                else
                {
                    return this.xuid;
                }
            }
        }

        /// <summary>
        /// Deserializes and returns ActiveAuth data from ActiveAuthData.xml
        /// </summary>
        /// <returns>ActiveAuthData</returns>
        private ActiveAuthData GetDataFromXML()
        {
            string filepath = HttpContext.Current.Server.MapPath("~/EmulatorXML/ActiveAuthData.xml");
            if (System.IO.File.Exists(filepath))
            {
                ActiveAuthData data = (ActiveAuthData)LoadState(typeof(ActiveAuthData), filepath);

                return data;
            }

            return null;
        }

        /// <summary>
        /// Creates a new instance of the ActiveAuthEmulator
        /// </summary>
        public ActiveAuthEmulator()
            : base(HttpContext.Current.Server.MapPath("~/EmulatorXML/ActiveAuthEmulatorConfig.xml"))
        {
            ActiveAuthData data = this.GetDataFromXML();
            this.cid = data.Cid;
            this.puid = data.Puid;
            this.xuid = data.Xuid;
        }

        public bool HasPrivilege(int privilege)
        {
            throw new System.NotImplementedException();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\BaseEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\CloudDirectoryProfileEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\FacebookLoginHandler\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\ActiveAuthEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ActiveAuthEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("c8ceac22-8f26-4c9c-82ef-fad1ee46a324")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\BaseEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("BaseEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("BaseEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("0963b4da-b94c-4275-915e-f38d35b2beb9")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\BaseEmulator\BaseEmulator.cs ===
﻿using System;
using System.IO;
using System.Xml.Serialization;

namespace Test.Identity.Common
{
	/// <summary>
	/// Represents the base Emulator class.
	/// </summary>
	public abstract class BaseEmulator
	{
		protected EmulatorConfiguration Configuration;

		/// <summary>
		/// This will Serialize and save the supplied Object into the given File.
		/// </summary>
		/// <param name="XMLFileName">Name of XML File to save.</param>
		/// <param name="ObjectState">Object to serialize.</param>
		public virtual void SaveState(string XMLFileName, object ObjectState)
		{
			XmlSerializer m_Serializer = new XmlSerializer(ObjectState.GetType());

			using (TextWriter m_Writer = new StreamWriter(XMLFileName, false))
			{
				m_Serializer.Serialize(m_Writer, ObjectState);
			}
		}

		/// <summary>
		/// Deserialize and retrieve an object from a XML file.
		/// </summary>
		/// <param name="TypeOfObject">Type of object to retrieve.</param>
		/// <param name="XMLFileName">Name of File to retrieve object from.</param>
		/// <returns>An object which represents the deserialized xml.</returns>
		public virtual object LoadState(Type TypeOfObject, string XMLFileName)
		{
			XmlSerializer m_Serializer = new XmlSerializer(TypeOfObject);
			object m_StateObject;

			using (TextReader m_Reader = new StreamReader(XMLFileName))
			{
				m_StateObject = m_Serializer.Deserialize(m_Reader);
			}

			return m_StateObject;
		}

		/// <summary>
		/// Loads the emulator configuration.
		/// </summary>
		private void LoadConfig(string filePath)
		{
			if (System.IO.File.Exists(filePath))
			{
				Configuration = (EmulatorConfiguration)LoadState(typeof(EmulatorConfiguration), filePath);
			}
			else
			{
				Configuration = new EmulatorConfiguration()
				{
					//Default: Functional test mode.
					EmulatorMode = EmulatorConfiguration.ExecutionMode.Functional
				};
			}
		}

		/// <summary>
		/// Creates an Emulator and reads in the Emulator Configuration from file.
		/// </summary>
		/// <param name="filePath">File path for Emulator Configuration file.</param>
		protected BaseEmulator(string filePath)
		{
			LoadConfig(filePath);
		}

		/// <summary>
		/// Creates an Emulator.
		/// Note: ExecutionMode is set to Functional.
		/// </summary>
		public BaseEmulator()
		{
			Configuration = new EmulatorConfiguration()
			{
				EmulatorMode = EmulatorConfiguration.ExecutionMode.Functional
			};
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\CloudDirectoryProfileEmulator\CloudDirectoryProfileProviderEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Leet.Profile;
using Leet.Profile.Proxies;
using System.Web;

namespace Test.Identity.Common
{
	/// <summary>
	/// Class to provide Emulated functionality of Leet.Profile.CloudDirectoryProfileProvider class.
	/// </summary>
	public class CloudDirectoryProfileProviderEmulator : BaseEmulator, ICloudDirectoryProfileProvider
	{
		/// <summary>
		/// List of all CDP files stored in memory.  All retrieval is done from this Dictionary.
		/// </summary>
		Dictionary<string, GetProfileResponse> results;
		/// <summary>
		/// Default Constructor.  Populates internal memory store for retrieval.
		/// </summary>
		public CloudDirectoryProfileProviderEmulator()
			: base((HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/EmulatorXML/CloudDirectoryProfileProviderEmulatorConfig.xml") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\EmulatorXML\CloudDirectoryProfileProviderEmulatorConfig.xml").Substring("file:/".Length)))
		{
			LoadData();
		}
		/// <summary>
		/// Emulated Service call.  Will return a GetProfileResponse for the individual requested in GetProfileRequest.  request.Id must match file system completely. 
		/// </summary>
		/// <param name="applicationHeader">ignored, can use null</param>
		/// <param name="userHeader">ignored, can use null</param>
		/// <param name="request">Requested Profile.  Id property must be accurate match to data in files.</param>
		/// <returns>GetProfileResponse, Profile for requested user</returns>
		public GetProfileResponse Get(SOAPApplicationHeader applicationHeader, SOAPUserHeader userHeader, GetProfileRequest request)
		{
			if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
			{
				LoadData();
			}
			GetProfileResponse resp = new GetProfileResponse();
			if (results.ContainsKey(request.Id.V1.ToString()))
			{
				return results[request.Id.V1.ToString()];
			}
                        resp.Errors = new ErrorInfo[] { new ErrorInfo() { ExtendedInfo = new string[] { "" }, Message = request.Id.V1 + " not found!", ResultCode = ProfileErrorCodes.UserNotFound } };			
			return resp;
		}
		/// <summary>
		/// Emulated Service call.  Will return a GetProfileResponse for each individual requested in GetProfileRequest.  request.Id's must match file system completely. 
		/// </summary>
		/// <param name="applicationHeader">ignored, can use null</param>
		/// <param name="userHeader">ignored, can use null</param>
		/// <param name="request">Requested Profile.  Id property must be accurate match to data in files.</param>
		/// <returns>GetProfilesResponse, Profiles for requested users</returns>
		public GetProfilesResponse GetMany(SOAPApplicationHeader applicationHeader, SOAPUserHeader userHeader, GetProfilesRequest request)
		{
			if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
			{
				LoadData();
			}
			GetProfilesResponse resp = new GetProfilesResponse();
			List<GetProfileResponse> foundList = new List<GetProfileResponse>();
			foreach (ProfileId id in request.Ids)
			{
				if (results.ContainsKey(id.V1.ToString()))
				{
					foundList.Add(results[id.V1.ToString()]);
				}
			}
			resp.Ids = new ProfileId[foundList.Count];
			resp.Views = new View[foundList.Count];
			for (int i = 0; i < foundList.Count; i++)
			{
				resp.Ids[i] = foundList[i].Id;
				resp.Views[i] = foundList[i].View;
			}
			return resp;
		}
		/// <summary>
		/// IDisposable Member.  No logic is performed here.
		/// </summary>
		public void Dispose()
		{
			//No logic necessary here.
		}
		/// <summary>
		/// Loads all data from file system into internal results.
		/// </summary>
		void LoadData()
		{
			results = new Dictionary<string, GetProfileResponse>();

			string filePath = (HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/EmulatorXML/") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\EmulatorXML\").Substring("file:/".Length));
			
			string[] filenames = Directory.GetFiles(filePath, "CDP_*.xml");
			foreach (string filename in filenames)
			{
				GetProfileResponse file = (GetProfileResponse)LoadState(typeof(GetProfileResponse), filename);
				if (!results.ContainsKey(file.Id.V1.ToString()))
				{
					results.Add(file.Id.V1.ToString(), file);
				}
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\BaseEmulator\EmulatorConfiguration.cs ===
﻿namespace Test.Identity.Common
{
	public class EmulatorConfiguration
	{
		/// <summary>
		/// The mode of operation of the emulator.
		/// </summary>
		public ExecutionMode EmulatorMode
		{
			get;
			set;
		}

		/// <summary>
		/// Mode of operation
		/// Functional: Requests for data should be read from file on each call.
		/// Stress:  Data should be stored in memory upon construction and calls are made to memory.
		/// </summary>
		public enum ExecutionMode
		{
			Functional = 0,
			Stress
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\FacebookLoginHandler\FacebookLoginHandler\FBCredentials.cs ===
﻿using System;
using System.Text;

namespace Identity.Test.Common.FacebookLoginHandler
{
    /// <summary>
    /// Represents the credentials used to login to Facebook.
    /// </summary>
    public class FBCredentials
    {
        /// <summary>
        /// The Facebook account username.
        /// </summary>
        public string Username
        {
            get;
            set;
        }

        /// <summary>
        /// The Facebook account password.
        /// </summary>
        public string Password
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\CloudDirectoryProfileEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CloudDataProfileEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("CloudDataProfileEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("4df3d398-b45a-4437-a864-0504833b3b0a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\FacebookLoginHandler\FacebookLoginHandler\FBCredentialHandler.cs ===
﻿using System;
using System.IO;
using System.Xml.Serialization;
using System.Text;

namespace Identity.Test.Common.FacebookLoginHandler
{
    public static class FBCredentialHandler
    {
        /// <summary>
        /// Saves the Facebook credentials to a specified XML file name.
        /// </summary>
        /// <param name="Credentials">The credentials to save.</param>
        /// <param name="XMLFilename">The file name where the credentials will be saved.</param>
        public static void SaveCredentials(FBCredentials Credentials, string XMLFilename)
        {
            XmlSerializer m_Serializer = new XmlSerializer(typeof(FBCredentials));

            try
            {
                using (TextWriter m_Writer = new StreamWriter(XMLFilename, false))
                {
                    m_Serializer.Serialize(m_Writer, Credentials);
                };
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads a saved Facebook credential for the specified XML file.
        /// </summary>
        /// <param name="XMLFilename">The XML file containing the Facebook credential.</param>
        /// <returns>An object of FBCredentials which represents the Facebook credential stored in the XML file.</returns>
        public static FBCredentials LoadCredentials(string XMLFilename)
        {
            FBCredentials m_Credentials = null;
            XmlSerializer m_Serializer = new XmlSerializer(typeof(FBCredentials));

            //Check XML file
            if (!File.Exists(XMLFilename))
                throw new FileNotFoundException("The specified credential XML file was not found.");

            try
            {
                using (TextReader m_Reader = new StreamReader(XMLFilename))
                {
                    m_Credentials = (FBCredentials)m_Serializer.Deserialize(m_Reader);
                };

                return m_Credentials;
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\EmulatorConfig.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Test.Identity.Common
{
    public class EmulatorConfig
    {
        /// <summary>
        /// The mode of operation of the emulator.
        /// 1: Indicates funtional test mode.
        /// 2: Indicates stress test mode.
        /// </summary>
        public int ExecutionMode
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\FacebookLoginHandler\FacebookLoginHandler\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("FacebookLoginHandler")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft Corp")]
//[assembly: AssemblyProduct("FacebookLoginHandler")]
//[assembly: AssemblyCopyright("Copyright © Microsoft Corp 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("28f04d35-6e8e-4147-a369-a0cc653b2895")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\XboxLiveIdentityEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Authentication;

namespace Test.Identity.Common
{
    public class XboxLiveIdentityEmulator : IdentityEmulator, IXboxLiveIdentity
	{
		public ulong Xuid { get; set; }
		public string GamerTag { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\IdentityEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Authentication;

namespace Test.Identity.Common
{
	[Serializable]
	public class IdentityEmulator : BaseEmulator, System.Security.Principal.IIdentity
	{
		public string AuthenticationType { get; set; }
		public bool IsAuthenticated { get; set; }
		public string Name { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\WindowsLiveIdentityEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using Leet.Authentication;

namespace Test.Identity.Common
{
	public class WindowsLiveIdentityEmulator : IdentityEmulator, IWindowsLiveIdentity
	{
		public Puid Cid { get { return new Puid(HexCid); } }
		public string FirstName { get; set; }
		public string HexCid { get; set; }
		public string HexPuid { get; set; }
		public string LastName { get; set; }
		public string MemberName { get; set; }
		public Puid Puid { get { return new Puid(HexPuid); } }

		public bool HasProfile()
		{
			return true;
		}

        public string GetTextLinkForLoggingOnOrOff()
        {
            throw new NotImplementedException();
        }

        public string GetLogOnLogOffUrl()
        {
            throw new NotImplementedException();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\FacebookLoginHandler\FacebookLoginHandler\FBLoginUI.cs ===
﻿using System;
using System.Text;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;

namespace Identity.Test.Common.FacebookLoginHandler
{
    /// <summary>
    /// Represents the Facebook login handler.
    /// </summary>
    public static class FBLoginUI
    {
        /// <summary>
        /// Executes the Facebook login actions for the specified credentials
        /// on the main Facebook Login Page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser on which to perform the UI actions.</param>
        /// <param name="LoginCredentials">The credentials to login with.</param>
        /// <param name="IsPersisted">Indicates whether to check the persisted login check box.</param>
        public static void DoUIFacebookLogin(BrowserWindow BrowserHandle, FBCredentials LoginCredentials, bool IsPersisted)
        {
            UITestControl m_UsernameBox = null;
            UITestControl m_PasswordBox = null;
            UITestControl m_LoginButton = null;
            UITestControl m_PersistedCheckBox = null;

            //Init Username box and type username
            m_UsernameBox = new UITestControl(BrowserHandle);
            m_UsernameBox.TechnologyName = "Web";
            m_UsernameBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                               HtmlProperties.Edit.Id, "email");
            m_UsernameBox.SetFocus();
            m_UsernameBox.SetProperty(HtmlProperties.Edit.Text, LoginCredentials.Username);

            //Tab ensures that the "real" password text box is visible!!
            //NOTE: FB pass box has two text boxes, overlapped. The real pass text box
            //is revealed when you set focus on the pass container text box.
            Keyboard.SendKeys("{TAB}");

            //Init Password box and type password
            m_PasswordBox = new UITestControl(BrowserHandle);
            m_PasswordBox.TechnologyName = "Web";
            m_PasswordBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                               HtmlProperties.Edit.Id, "pass");
            m_PasswordBox.SetProperty(HtmlProperties.Edit.Text, LoginCredentials.Password);

            //Init Persisted Checkbox and check it
            if (IsPersisted)
            {
                m_PersistedCheckBox = new UITestControl(BrowserHandle);
                m_PersistedCheckBox.TechnologyName = "Web";
                m_PersistedCheckBox.SearchProperties.Add(HtmlProperties.CheckBox.ControlType, ControlType.CheckBox.Name,
                                                         HtmlProperties.CheckBox.Id, "persistent");
                m_PersistedCheckBox.SetProperty(HtmlProperties.CheckBox.Checked, true);
            }

            //Init Login button and click on it
            m_LoginButton = new UITestControl(BrowserHandle);
            m_LoginButton.TechnologyName = "Web";
            m_LoginButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                               HtmlProperties.Button.ValueAttribute, "Login");
            m_LoginButton.EnsureClickable();
            Mouse.Click(m_LoginButton);
        }

        /// <summary>
        /// Executes the Facebook logout actions.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser on which to perform the UI actions.</param>
        public static void DoUIFacebookLogout(BrowserWindow BrowserHandle)
        {
            UITestControl m_LogoutLink = null;

            try
            {
                m_LogoutLink = new UITestControl(BrowserHandle);
                m_LogoutLink.TechnologyName = "Web";
                m_LogoutLink.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name);
                m_LogoutLink.SearchProperties.Add(new PropertyExpression("href",
                                                                         "http://www.facebook.com/logout.php",
                                                                         PropertyExpressionOperator.Contains));
                m_LogoutLink.EnsureClickable();
                Mouse.Click(m_LogoutLink);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\IdentityManagerEmulator.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Web;
using Leet.Authentication;

namespace Test.Identity.Common
{
	public class IdentityManagerEmulator : IdentityEmulator, IIdentityManager
	{
        private SocialIdentity[] prvIdentities;
        private IWindowsLiveIdentity prvWindowsLiveIdentity;
        private IXboxLiveIdentity prvXboxLiveIdentity;
        private EmulatorConfig Config;

        public SocialIdentity[] Identities
        {
            get
            {
                if (Config.ExecutionMode == 1)
                {
                    string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
                    prvIdentities = null;

                    if (System.IO.File.Exists(filePath + "Identity_IDS.xml"))
                    {
                        prvIdentities = (SocialIdentity[])LoadState(typeof(SocialIdentity[]), filePath + "Identity_IDS.xml");
                    }
                }

                return prvIdentities;
            }
            set
            {
                prvIdentities = value;
            }
        }

        public SocialIdentity PrimaryIdentity
        {
            get
            {
                return Identities[0];
            }
        }

		#region Interface Members
		public IWindowsLiveIdentity WindowsLiveIdentity
		{
            get
            {
                if (Config.ExecutionMode == 1)
                {
                    string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
                    prvWindowsLiveIdentity = null;

                    if (System.IO.File.Exists(filePath + "Identity_WLID.xml"))
                    {
                        prvWindowsLiveIdentity = (IWindowsLiveIdentity)LoadState(typeof(WindowsLiveIdentityEmulator),
                                                                                 filePath + "Identity_WLID.xml");
                        base.IsAuthenticated = prvWindowsLiveIdentity.IsAuthenticated;
                        base.AuthenticationType = prvWindowsLiveIdentity.AuthenticationType;
                        base.Name = prvWindowsLiveIdentity.Name;
                    }
                }

                return prvWindowsLiveIdentity;
            }
            set
            {
                prvWindowsLiveIdentity = value;
            }
		}

		public IXboxLiveIdentity XboxLiveIdentity
		{
            get
            {
                if (Config.ExecutionMode == 1)
                {
                    string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
                    prvXboxLiveIdentity = null;

                    if (System.IO.File.Exists(filePath + "Identity_XBOX.xml"))
                    {
                        prvXboxLiveIdentity = (IXboxLiveIdentity)LoadState(typeof(XboxLiveIdentityEmulator),
                                                                           filePath + "Identity_XBOX.xml");
                    }
                }

                return prvXboxLiveIdentity;
            }
            set
            {
                prvXboxLiveIdentity = value;
            }
		}

        public SocialIdentity GetIdentity(int networkId)
		{
            SocialIdentity dead = new SocialIdentity();
			foreach (SocialIdentity socId in Identities)
			{
				if (socId.NetworkId == networkId)
				{
					return socId;
				}
			}
			return dead;
		}
		#endregion

        public IdentityManagerEmulator()
        {
            //Load the emulator configuration
            LoadConfig();

            string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
            if (System.IO.File.Exists(filePath + "Identity_WLID.xml"))
            {
                prvWindowsLiveIdentity = (IWindowsLiveIdentity)LoadState(typeof(WindowsLiveIdentityEmulator),
                                                                      filePath + "Identity_WLID.xml");
                prvXboxLiveIdentity = (IXboxLiveIdentity)LoadState(typeof(XboxLiveIdentityEmulator),
                                                                filePath + "Identity_XBOX.xml");
                prvIdentities = (SocialIdentity[])LoadState(typeof(SocialIdentity[]),
                                                            filePath + "Identity_IDS.xml");
                base.IsAuthenticated = prvWindowsLiveIdentity.IsAuthenticated;
                base.AuthenticationType = prvWindowsLiveIdentity.AuthenticationType;
                base.Name = prvWindowsLiveIdentity.Name;
            }
        }

        /// <summary>
        /// Loads the emulator configuration.
        /// </summary>
        private void LoadConfig()
        {
            string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");

            if (System.IO.File.Exists(filePath + "IdentityEmulatorConfig.xml"))
            {
                Config = (EmulatorConfig)LoadState(typeof(EmulatorConfig), filePath + "IdentityEmulatorConfig.xml");
            }
            else
            {
                Config = new EmulatorConfig()
                {
                    //Default: Functional test mode.
                    ExecutionMode = 1
                };
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\AuthTicketData.cs ===
﻿using System;
using System.Text;
using Leet.Live.Livecache.Account;

namespace Test.Identity.Common
{
    public class AuthTicketData : ILcAuthTicket
    {

        #region ILcAuthTicket Members

        public ulong Puid
        {
            get;
            set;
        }

        public uint[] Privileges
        {
            get;
            set;
        }

        public ulong LivePuid
        {
            get;
            set;
        }

        public uint Tier
        {
            get;
            set;
        }

        public string Gamertag
        {
            get;
            set;
        }

        public int ParentalControlGroup
        {
            get;
            set;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\IdentityEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IdentityEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("IdentityEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("81cbe87d-e20a-43f3-af0a-fe4cea0722fc")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\LiveCacheData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Test.Identity.Common
{
   /// <summary>
   /// Represents a LiveCache data row for a PUID.
   /// </summary>
    public class LiveCacheData
    {
       /// <summary>
       /// Represents the PUID of a user.
       /// </summary>
        public long PUID
        {
            get;
            set;
        }

        /// <summary>
        /// Represents a XCache data object which contains XUID and Gamertag.
        /// </summary>
        public XCacheData XUIDAndGamertag
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents a Data row containing XUID and Gamertag.
    /// </summary>
    public class XCacheData
    {
       /// <summary>
       /// Represents the XUID AKA LivePUID.
       /// </summary>
        public long XUID
        {
            get;
            set;
        }

        /// <summary>
        /// Represents the Gamertag.
        /// </summary>
        public string Gamertag
        {
            get;
            set;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\ROFriendData.cs ===
﻿using System;
using System.Text;
using Leet.Live.Livecache.Logic.Profile;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the Read Only Friends Info data.
    /// </summary>
    public class ROFriendData : IReadOnlyFriendInfo
    {
        public string Gamertag
        {
            get;
            set;
        }

        public ulong LivePuid
        {
            get;
            set;
        }

        public FriendState FriendState
        {
            get;
            set;
        }

        public OnlineState State
        {
            get;
            set;
        }

        public bool IsOnline
        {
            get;
            set;
        }

        public bool IsJoinable
        {
            get;
            set;
        }

        public bool IsPlaying
        {
            get;
            set;
        }

        public DateTime LastSeen
        {
            get;
            set;
        }

        public uint TitleId
        {
            get;
            set;
        }

        public string PresenceString
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents the Read Only Friends data class
    /// which will be serialized.
    /// </summary>
    public class ROFriendDataXML
    {
        public string Gamertag
        {
            get;
            set;
        }

        public ulong LivePuid
        {
            get;
            set;
        }

        public FriendState FriendState
        {
            get;
            set;
        }

        public OnlineState State
        {
            get;
            set;
        }

        public bool IsOnline
        {
            get;
            set;
        }

        public bool IsJoinable
        {
            get;
            set;
        }

        public bool IsPlaying
        {
            get;
            set;
        }

        public DateTime LastSeen
        {
            get;
            set;
        }

        public uint TitleId
        {
            get;
            set;
        }

        public string PresenceString
        {
            get;
            set;
        }

    }

    /// <summary>
    /// Represents the Read Only Presence Info data.
    /// </summary>
    public class ROPresenceData : IReadOnlyPresenceInfo
    {
        public string Gamertag
        {
            get;
            set;
        }

        public OnlineState State
        {
            get;
            set;
        }

        public ulong LivePuid
        {
            get;
            set;
        }

        public bool IsOnline
        {
            get;
            set;
        }

        public bool IsJoinable
        {
            get;
            set;
        }

        public bool IsPlaying
        {
            get;
            set;
        }

        public DateTime LastSeen
        {
            get;
            set;
        }

        public uint TitleId
        {
            get;
            set;
        }

        public string PresenceString
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\EmulatorConfig.cs ===
﻿using System;
using System.Text;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the Emulator configuration class.
    /// </summary>
    public class EmulatorConfig
    {
        /// <summary>
        /// The mode of operation of the emulator.
        /// 1: Indicates funtional test mode.
        /// 2: Indicates stress test mode.
        /// </summary>
        public int ExecutionMode
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the file containing the 
        /// Live Cache Data.
        /// </summary>
        public string LiveCacheDataXML
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the file containing the
        /// Auth Ticket data.
        /// </summary>
        public string AuthTicketXML
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the file containing the
        /// Friend data.
        /// </summary>
        public string FriendDataXML
        {
            get;
            set;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveConnectEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\LiveCacheEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Web;
using System.Reflection;
using LiveWeb.Web.Core.Livecache;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache.Account;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the LiveCache Test Emulator.
    /// </summary>
    public class LiveCacheEmulator : BaseEmulator, ILivecacheDataAccess
    {
        private readonly string g_LiveCacheDataXML = null;
        private readonly string g_AuthTicketXML = null;
        private readonly string g_FriendDataXML = null;
        private List<LiveCacheData> g_ListOfLiveCacheData = null;
        private AuthTicketData g_AuthTicket = null;
        private ROFriendDataXML[] g_FriendDataSerialized = null;
        private ROFriendData[] g_FriendData = null;
        private EmulatorConfig g_Config = null;

        /// <summary>
        /// Initializes a new instance of the LiveCacheEmulator class.
        /// </summary>
        public LiveCacheEmulator()
        {
            string m_XMLFilePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
            //Load Config
            LoadConfig();

            //Set XML names
            g_LiveCacheDataXML = m_XMLFilePath + "\\" + g_Config.LiveCacheDataXML;
            g_AuthTicketXML = m_XMLFilePath + "\\" + g_Config.AuthTicketXML;
            g_FriendDataXML = m_XMLFilePath + "\\" + g_Config.FriendDataXML;

            //Check that files exist
            if (!File.Exists(g_LiveCacheDataXML) || !File.Exists(g_AuthTicketXML) ||
                !File.Exists(g_FriendDataXML))
                throw new Exception("One or more Emulator XML file(s) were not found.");

            //Load data
            LoadLiveCacheData();
            LoadAuthTicket();
            LoadFriendData();
        }

        /// <summary>
        /// Loads the emulator configuration.
        /// </summary>
        private void LoadConfig()
        {
            string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");

            if (System.IO.File.Exists(filePath + "LiveCacheEmulatorConfig.xml"))
            {
                g_Config = (EmulatorConfig)LoadState(typeof(EmulatorConfig),
                                                     filePath + "LiveCacheEmulatorConfig.xml");
            }
            else
            {
                g_Config = new EmulatorConfig()
                {
                    //Default: Functional test mode.
                    ExecutionMode = 1,
                    LiveCacheDataXML = "Default_LiveCache.xml",
                    AuthTicketXML = "Default_AuthTicket.xml",
                    FriendDataXML = "Default_FriendData.xml"
                };
            }
        }

        /// <summary>
        /// Loads the Live Cache data from the mocked XML.
        /// </summary>
        private void LoadLiveCacheData()
        {
            g_ListOfLiveCacheData = (List<LiveCacheData>)LoadState(typeof(List<LiveCacheData>), g_LiveCacheDataXML);
        }

        /// <summary>
        /// Loads the Auth Ticket from the mocked XML.
        /// </summary>
        private void LoadAuthTicket()
        {
            g_AuthTicket = (AuthTicketData)LoadState(typeof(AuthTicketData), g_AuthTicketXML);
        }

        /// <summary>
        /// Loads the Friends data from the mocked XML.
        /// </summary>
        private void LoadFriendData()
        {
            int m_Index = 0;

            g_FriendData = null;
            g_FriendDataSerialized = (ROFriendDataXML[])LoadState(typeof(ROFriendDataXML[]),
                                                                  g_FriendDataXML);
            g_FriendData = new ROFriendData[g_FriendDataSerialized.Length];

            foreach (ROFriendDataXML m_SerializedObject in g_FriendDataSerialized)
            {
                g_FriendData[m_Index] = new ROFriendData()
                                            {
                                                FriendState = m_SerializedObject.FriendState,
                                                Gamertag = m_SerializedObject.Gamertag,
                                                LivePuid = m_SerializedObject.LivePuid,
                                                State = m_SerializedObject.State,
                                                IsOnline = m_SerializedObject.IsOnline,
                                                IsJoinable = m_SerializedObject.IsJoinable,
                                                IsPlaying = m_SerializedObject.IsPlaying,
                                                LastSeen = m_SerializedObject.LastSeen,
                                                TitleId = m_SerializedObject.TitleId,
                                                PresenceString = m_SerializedObject.PresenceString
                                            };
                m_Index++;
            }
        }

   
        #region ILivecacheDataAccess Members

        /// <summary>
        /// Returns a mocked AuthTicket read from the mocked XML.
        /// </summary>
        /// <returns></returns>
        public ILcAuthTicket GetAuthTicket()
        {
            if (g_Config.ExecutionMode == 1)
                LoadAuthTicket();

            return (ILcAuthTicket)g_AuthTicket;
        }

        /// <summary>
        /// Look for the XUID and Gamertab for the provided PUID and return True if user with provided
        /// PUID exists and has the valid XUID and Gamertag. Also returns the XUID and Gamertag as
        /// these are OUT variables.
        /// </summary>
        /// <param name="passportPuid">PUID</param>
        /// <param name="livePuid">XUID</param>
        /// <param name="gamertag">Gamertag</param>
        /// <returns></returns>
        public bool LookupWebID(long passportPuid, out long livePuid, out string gamertag)
        {
            bool m_Result = false;
            int m_Index =-1;

            //Check Execution mode.
            if (g_Config.ExecutionMode == 1)
                LoadLiveCacheData();

            m_Index = g_ListOfLiveCacheData.FindIndex(delegate(LiveCacheData compare)
            {
                bool m_IsMatch = false;
                if ((compare.PUID == passportPuid) && (compare.XUIDAndGamertag.Gamertag != null))
                    m_IsMatch = true;
                return m_IsMatch;
 
            });

            if (m_Index >= 0)
            {
                livePuid = g_ListOfLiveCacheData[m_Index].XUIDAndGamertag.XUID;
                gamertag = g_ListOfLiveCacheData[m_Index].XUIDAndGamertag.Gamertag;
                m_Result = true;
            }
            else 
            {
                livePuid = 0;
                gamertag = string.Empty;
            }

            return m_Result;
       
        }

        /// <summary>
        /// Returns the users Live XUID from the provided gamertag.
        /// </summary>
        /// <param name="gamertag">The gamertag of the user to lookup.</param>
        /// <param name="liveXuid">An "out" parameter returning the users XUID, if found.</param>
        /// <returns>true if the user is found; otherwise false.</returns>
        public bool GetXuidByGamertag(string gamertag, out long liveXuid)
        {
            liveXuid = 0;

            //Check Execution mode.
            if (g_Config.ExecutionMode == 1)
                LoadLiveCacheData();

            foreach (LiveCacheData lcData in g_ListOfLiveCacheData)
            {
                if (lcData.XUIDAndGamertag.Gamertag == gamertag)
                {
                    liveXuid = lcData.XUIDAndGamertag.XUID;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Returns the users gamertag from the provided Live XUID.
        /// </summary>
        /// <param name="gamertag">An out parameter returning the gamertag of the user, if found.</param>
        /// <param name="liveXuid">The Live XUID specifying the user to look up.</param>
        /// <returns>true if the user is found; otherwise false.</returns>
        public bool GetGamertagByXuid(long liveXuid, out string gamertag)
        {
            gamertag = string.Empty;

            //Check Execution mode.
            if (g_Config.ExecutionMode == 1)
                LoadLiveCacheData();

            foreach (LiveCacheData lcData in g_ListOfLiveCacheData)
            {
                if (lcData.XUIDAndGamertag.XUID == liveXuid)
                {
                    gamertag = lcData.XUIDAndGamertag.Gamertag;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Returns a list of friend objects that represent a user's Xbox LIVE friends.
        /// </summary>
        /// <param name="authTicket">An implmentation of the ILcAuthTicket interface with a user's Livecache credentials</param>
        /// <param name="sortAlphabetically">True to sort the list alpha by gamertag</param>
        /// <param name="includeProfileData">True to include extended profile data for each friend.  This has a large performance cost.</param>
        /// <returns></returns>
        public IReadOnlyFriendInfo[] GetFriends(ILcAuthTicket authTicket, bool sortAlphabetically, bool includeProfileData)
        {
            if (g_Config.ExecutionMode == 1)
            {
                LoadFriendData();
            }

            return (IReadOnlyFriendInfo[])g_FriendData;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveCacheEmulator\LiveCacheEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveCacheEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft Corp.")]
//[assembly: AssemblyProduct("LiveCacheEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft Corp. 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("55d311ce-f86a-437e-8a45-d7595cbcec22")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveConnectEmulator\LiveConnectEmulator\LiveConnectData.cs ===
﻿using System;
using System.Text;
using LiveConnectWeb;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents a Live Connect data row
    /// for a Social Network.
    /// </summary>
    public class LiveConnectData
    {
        /// <summary>
        /// Represents the Social Network ID.
        /// </summary>
        public short SocialNetworkId
        {
            get;
            set;
        }

        /// <summary>
        /// Represents the Live Connect settings object
        /// for this Social Network ID.
        /// </summary>
        public SNUserInfo SocialNetworkSettings
        {
            get;
            set;
        }

        /// <summary>
        /// Represents an error which can be thrown for the
        /// SetSNUserInfo method call.
        /// </summary>
        public MethodException SetSNUserInfo_Exception
        {
            get;
            set;
        }

        /// <summary>
        /// Represents an error which can be thrown for the
        /// GetSNUserInfoBySNUId method call.
        /// </summary>
        public MethodException GetSNUserInfoBySNUId_Exception
        {
            get;
            set;
        }

        /// <summary>
        /// Represents an error which can be thrown for the
        /// GetSNUserInfoByXUID method call.
        /// </summary>
        public MethodException GetSNUserInfoByXUID_Exception
        {
            get;
            set;
        }

        /// <summary>
        /// Represents an error which can be thrown for the
        /// RemoveSNUserInfo method call.
        /// </summary>
        public MethodException RemoveSNUserInfo_Exception
        {
            get;
            set;
        }

        /// <summary>
        /// Represents an error which can be thrown for the
        /// GetSNUserInfos method call.
        /// </summary>
        public MethodException GetSNUserInfos_Exception
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\MockStage\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveConnectEmulator\LiveConnectEmulator\MethodException.cs ===
﻿using System;
using System.Text;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the type of LiveConnect exception.
    /// </summary>
    public enum LiveConnectExceptionType
    {
        LiveConnectArgumentException,
        LiveConnectChannelCreationException,
        LiveConnectGenericException,
        LiveConnectSecurityException,
        LiveConnectServiceNotAvailableException
    };

    /// <summary>
    /// Represents the exception to be thrown for a method call.
    /// </summary>
    public class MethodException
    {
        /// <summary>
        /// The type of Live Connect Exception to throw.
        /// </summary>
        public LiveConnectExceptionType ExceptionType
        {
            get;
            set;
        }

        /// <summary>
        /// The Error code.
        /// </summary>
        public int ErrorCode
        {
            get;
            set;
        }

        /// <summary>
        /// Describes the error description.
        /// </summary>
        public string ErrorDescription
        {
            get;
            set;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveConnectEmulator\LiveConnectEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveWebEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("LiveWebEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("61d5c742-726f-4ead-9603-7f6c2864b55a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\LiveConnectEmulator\LiveConnectEmulator\LiveConnectEmulator.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Web;
using LiveWeb.Web.Core.LiveConnect;
using LiveConnectWeb;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the Live Connect Test Emulator.
    /// </summary>
    public class LiveConnectEmulator : BaseEmulator, ILiveConnectDataAccess
    {
        private string g_XMLFilename = String.Empty;
        private List<LiveConnectData> g_SettingsList = null;

        /// <summary>
        /// Initializes a new instance of the LiveWebEmulator class.
        /// </summary>
        public LiveConnectEmulator()
            : this("Default_LiveConnect.xml") { }

        /// <summary>
        /// Initializes a new instance of the LiveWebEmulator class
        /// loading the data from the specified XML file.
        /// </summary>
        /// <param name="XMLFilename">The XML file to load the data from.</param>
        public LiveConnectEmulator(string XMLFilename)
            : base(HttpContext.Current.Server.MapPath("~/EmulatorXML/LiveConnectEmulatorConfig.xml"))
        {
            string m_XMLFilePath = String.Empty;

            m_XMLFilePath = System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/");
            g_XMLFilename = m_XMLFilePath + "\\" + XMLFilename;

            //Load data if file exists
            if (File.Exists(g_XMLFilename))
                g_SettingsList = (List<LiveConnectData>)LoadState(typeof(List<LiveConnectData>),
                                                                  g_XMLFilename);

            switch (Configuration.EmulatorMode)
            {
                case EmulatorConfiguration.ExecutionMode.Functional:
                    if (!File.Exists(g_XMLFilename))
                        throw new Exception("Emulator XML file '" + g_XMLFilename + "' not found. XML must be present when execution mode is Functional.");
                    break;
                case EmulatorConfiguration.ExecutionMode.Stress:
                    if (!File.Exists(g_XMLFilename))
                        g_SettingsList = new List<LiveConnectData>();
                    break;
            }
        }

        #region LookUp Methods
        /// <summary>
        /// Searches the Live Connect data list for the specified LiveConnectData object
        /// and returns its index if one is found.
        /// </summary>
        /// <param name="SearchData">The data to search in the list.</param>
        /// <returns>The index of the data in the list if one is found, else -1.</returns>
        private int FindLiveConnectDataIndex(LiveConnectData SearchData)
        {
            return g_SettingsList.FindIndex(delegate(LiveConnectData Compare)
                    {
                        bool m_IsMatch = false;
                        if ((Compare.SocialNetworkId == SearchData.SocialNetworkId) &&
                            (Compare.SocialNetworkSettings.SNUserID == SearchData.SocialNetworkSettings.SNUserID) &&
                            (Compare.SocialNetworkSettings.XUID == SearchData.SocialNetworkSettings.XUID)
                           )
                            m_IsMatch = true;

                        return m_IsMatch;
                    });
        }

        /// <summary>
        /// Searches the Live Connect data list for the data row having the specified
        /// SocialNetworkId and XUID and returns its index if one is found.
        /// </summary>
        /// <param name="SocialNetworkId">The Id of the Social Network.</param>
        /// <param name="XUID">The XUID of the target user.</param>
        /// <returns>The index of the data in the list if one is found, else -1.</returns>
        private int FindLiveConnectDataIndex(short SocialNetworkId, long XUID)
        {
            return g_SettingsList.FindIndex(delegate(LiveConnectData Compare)
                    {
                        bool m_IsMatch = false;
                        if ((Compare.SocialNetworkId == SocialNetworkId) &&
                            (Compare.SocialNetworkSettings.XUID == (ulong)XUID)
                           )
                            m_IsMatch = true;

                        return m_IsMatch;
                    });
        }

        /// <summary>
        /// earches the Live Connect data list for the data row having the specified
        /// SocialNetworkId and SocialNetworkUserId and returns its index if one is found.
        /// </summary>
        /// <param name="SocialNetworkId">The Id of the Social Network.</param>
        /// <param name="SNUID">The SNUID of the target user.</param>
        /// <returns>The index of the data in the list if one is found, else -1.</returns>
        private int FindLiveConnectDataIndex(short SocialNetworkId, string SNUID)
        {
            return g_SettingsList.FindIndex(delegate(LiveConnectData Compare)
            {
                bool m_IsMatch = false;
                if ((Compare.SocialNetworkId == SocialNetworkId) &&
                    (Compare.SocialNetworkSettings.SNUserID == SNUID)
                   )
                    m_IsMatch = true;

                return m_IsMatch;
            });
        } 
        #endregion

        #region Data Load / Write Methods
        /// <summary>
        /// Loads the Live Connect data rows from the mocked XML.
        /// </summary>
        private void LoadLiveConnectData()
        {
            g_SettingsList = (List<LiveConnectData>)LoadState(typeof(List<LiveConnectData>),
                                                                      g_XMLFilename);
        }

        /// <summary>
        /// Writes the current Live Connect data rows to the mocked XML.
        /// </summary>
        private void WriteLiveConnectData()
        {
            SaveState(g_XMLFilename, g_SettingsList);
        } 
        #endregion

        /// <summary>
        /// Throws the specified Live Connect exception.
        /// </summary>
        /// <param name="LiveConnectException">The live connect method exception object
        /// which contains info on the exception to throw.</param>
        private void ThrowLiveConnectException(MethodException LiveConnectException)
        {
            switch (LiveConnectException.ExceptionType)
            {
                case LiveConnectExceptionType.LiveConnectArgumentException:
                    throw new LiveConnectArgumentException(LiveConnectException.ErrorCode,
                                                           LiveConnectException.ErrorDescription,
                                                           new Exception("Simulated Exception from Emulator.")
                                                          );
                case LiveConnectExceptionType.LiveConnectChannelCreationException:
                    throw new LiveConnectChannelCreationException(LiveConnectException.ErrorCode,
                                                                  LiveConnectException.ErrorDescription,
                                                                  new Exception("Simulated Exception from Emulator.")
                                                                 );
                case LiveConnectExceptionType.LiveConnectGenericException:
                    throw new LiveConnectGenericException(LiveConnectException.ErrorCode,
                                                          LiveConnectException.ErrorDescription,
                                                          new Exception("Simulated Exception from Emulator.")
                                                         );
                case LiveConnectExceptionType.LiveConnectSecurityException:
                    throw new LiveConnectSecurityException(LiveConnectException.ErrorCode,
                                                           LiveConnectException.ErrorDescription,
                                                           new Exception("Simulated Exception from Emulator.")
                                                          );
                case LiveConnectExceptionType.LiveConnectServiceNotAvailableException:
                    throw new LiveConnectServiceNotAvailableException(LiveConnectException.ErrorCode,
                                                                      LiveConnectException.ErrorDescription,
                                                                      new Exception("Simulated Exception from Emulator.")
                                                                     );
            }
        }

        #region ILiveConnectDataAccess Members

        public void SetSNUserInfo(short sNetworkId, SNUserInfo userInfo)
        {
            LiveConnectData m_LCData = null;
            int m_Index = -1;

            m_LCData = new LiveConnectData()
            {
                SocialNetworkId = sNetworkId,
                SocialNetworkSettings = userInfo,
                GetSNUserInfoBySNUId_Exception = null,
                GetSNUserInfoByXUID_Exception = null,
                GetSNUserInfos_Exception = null,
                RemoveSNUserInfo_Exception = null,
                SetSNUserInfo_Exception = null
            };

            #region Check if data needs to be overwritten
            //Check if account is already linked to the same XUID
            m_Index = FindLiveConnectDataIndex(m_LCData);
            if (m_Index == -1)
            {
                //Check XUID exists for the same Social Network
                m_Index = FindLiveConnectDataIndex(sNetworkId, (long)userInfo.XUID);
                if (m_Index == -1)
                {
                    //Check if the SNUID exists
                    m_Index = FindLiveConnectDataIndex(sNetworkId, userInfo.SNUserID);
                }
            } 
            #endregion

            if (m_Index == -1)
                g_SettingsList.Add(m_LCData);       //New data: Add
            else
            {
                //Check for any exception that needs to be thrown
                if (g_SettingsList[m_Index].SetSNUserInfo_Exception != null)
                    ThrowLiveConnectException(g_SettingsList[m_Index].SetSNUserInfo_Exception);

                g_SettingsList[m_Index] = m_LCData; //Update
            }

            //Check execution mode
            if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
            {
                WriteLiveConnectData();
            }
        }

        public SNUserInfo GetSNUserInfoBySNUId(short sNetworkId, string snUserId)
        {
            LiveConnectData m_LCData = null;

            //Check Execution mode
            if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
            {
                LoadLiveConnectData();
            }

            m_LCData = g_SettingsList.Find(delegate(LiveConnectData Compare)
                                {
                                    bool m_IsMatch = false;
                                    if ((Compare.SocialNetworkId == sNetworkId) &&
                                        (Compare.SocialNetworkSettings.SNUserID == snUserId)
                                       )
                                        m_IsMatch = true;

                                    return m_IsMatch;
                                });

            if (m_LCData == null)
                return null;
            else
            {
                //Check if any exception needs to be thrown
                if (m_LCData.GetSNUserInfoBySNUId_Exception != null)
                    ThrowLiveConnectException(m_LCData.GetSNUserInfoBySNUId_Exception);

                return m_LCData.SocialNetworkSettings;
            }
        }

        public SNUserInfo GetSNUserInfoByXUID(short sNetworkId, long XUID)
        {
            LiveConnectData m_LCData = null;

            //Check Execution mode
            if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
            {
                LoadLiveConnectData();
            }

            m_LCData = g_SettingsList.Find(delegate(LiveConnectData Compare)
            {
                bool m_IsMatch = false;
                if ((Compare.SocialNetworkId == sNetworkId) &&
                    (Compare.SocialNetworkSettings.XUID == (ulong)XUID)
                   )
                    m_IsMatch = true;

                return m_IsMatch;
            });

            if (m_LCData == null)
                return null;
            else
            {
                //Check if any exception needs to be thrown
                if (m_LCData.GetSNUserInfoByXUID_Exception != null)
                    ThrowLiveConnectException(m_LCData.GetSNUserInfoByXUID_Exception);

                return m_LCData.SocialNetworkSettings;
            }
        }

        public void RemoveSNUserInfo(short sNetworkId, long XUID)
        {
            int m_Index = -1;
            m_Index = FindLiveConnectDataIndex(sNetworkId, XUID);

            if (m_Index == -1)
                throw new Exception("The specified user row does not exist.");
            else
            {
                //Check if any exception needs to be thrown
                if (g_SettingsList[m_Index].RemoveSNUserInfo_Exception != null)
                    ThrowLiveConnectException(g_SettingsList[m_Index].RemoveSNUserInfo_Exception);

                g_SettingsList.RemoveAt(m_Index);

                //Check execution mode
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    WriteLiveConnectData();
                }
            }
        }

        public SNUserInfo[] GetSNUserInfos(short sNetworkId, string[] sNUserIDs)
        {
            List<SNUserInfo> m_SNUserInfoList = new List<SNUserInfo>();

            //Check Execution mode
            if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
            {
                LoadLiveConnectData();
            }

            foreach (string m_SNUID in sNUserIDs)
            {
                int m_Index = FindLiveConnectDataIndex(sNetworkId, m_SNUID);

                if (m_Index != -1)
                {
                    //Check if any exception needs to be thrown
                    if (g_SettingsList[m_Index].GetSNUserInfos_Exception != null)
                        ThrowLiveConnectException(g_SettingsList[m_Index].GetSNUserInfos_Exception);

                    m_SNUserInfoList.Add(g_SettingsList[m_Index].SocialNetworkSettings);
                }
            }

            //Return null if no users found
            if (m_SNUserInfoList.Count == 0)
                return null;
            else
                return m_SNUserInfoList.ToArray();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\MockStage\MockStage\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MockStage")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft IT")]
//[assembly: AssemblyProduct("MockStage")]
//[assembly: AssemblyCopyright("Copyright © Microsoft IT 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\MockStage\MockStage\StageLayer.cs ===
﻿using System;
using System.Web;
using System.IO;

namespace Test.Identity.Common
{
    /// <summary>
    /// Represents the Staging layer.
    /// This will perform all the staging actions.
    /// </summary>
    public class StageLayer : BaseEmulator
    {
        /// <summary>
        /// Initializes a new instance of the Stage Layer.
        /// </summary>
        public StageLayer()
        { }

        /// <summary>
        /// Writes the specified content to the specified Stage file.
        /// </summary>
        /// <param name="StageFile">The file name and path of the Stage file.</param>
        /// <param name="Content">The content to be written to the specified Stage file.</param>
        /// <param name="Append">Indicates whether to append to the Stage file, if one exists.</param>
        public void StageFile(string StageFile, string Content, bool Append)
        {
            StreamWriter m_FileWriter = new StreamWriter(StageFile, Append);

            m_FileWriter.Write(Content);
            m_FileWriter.Close();
            m_FileWriter.Dispose();
        }

        /// <summary>
        /// Reads the contents of the specified Staged file.
        /// </summary>
        /// <param name="StageFile">The name and path of the Staged file.</param>
        /// <returns>A string representing the contents of the file.</returns>
        public string ReadFile(string StageFile)
        {
            StreamReader m_FileReader = new StreamReader(StageFile);
            string m_FileContent = String.Empty;

            m_FileContent = m_FileReader.ReadToEnd();
            m_FileReader.Close();
            m_FileReader.Dispose();

            return m_FileContent;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\MockStage\MockStage\StageService.asmx.cs ===
﻿using System;
using System.Web;
using System.Web.Services;
using Test.Identity.Common;

namespace Test.Identity.Common
{
    /// <summary>
    /// Summary description for StageService
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class StageService : System.Web.Services.WebService
    {
        /// <summary>
        /// Creates a file with the specified name and relative location
        /// and fills it with the specified content.
        /// </summary>
        /// <param name="FileContent">The content to write to the file.</param>
        /// <param name="RelativeStagePath">Path relative to the web root where the file will be created.</param>
        /// <param name="FileName">The name of the file.</param>
        /// <param name="Append">Indicates whether to append to an existing file.</param>
        [WebMethod(Description = "Creates the specified file with the specified content.")]
        public bool StageFile(string FileContent, string RelativeStagePath, string FileName, bool Append)
        {
            string m_File = Server.MapPath("~/" + RelativeStagePath) + "\\" + FileName;
            StageLayer m_SLayer = null;
            bool m_IsSuccess;

            try
            {
                m_SLayer = new StageLayer();
                m_SLayer.StageFile(m_File, FileContent, Append);
                m_IsSuccess = true;
            }
            catch (Exception)
            {
                //throw;  //Probably write to event log
                m_IsSuccess = false;
            }
            finally
            {
                m_SLayer = null;
            }

            return m_IsSuccess;
        }

        /// <summary>
        /// Reads and returns the contents of the specified staged file.
        /// </summary>
        /// <param name="RelativeStagePath">Path relative to the web root where the file will be created.</param>
        /// <param name="FileName">The name of the file.</param>
        /// <returns>A string representing the contents of the Staged file.</returns>
        [WebMethod(Description="Returns the contents of the specified Staged file.")]
        public string GetStageFileContent(string RelativeStagePath, string FileName)
        {
            string m_File = Server.MapPath("~/" + RelativeStagePath) + "\\" + FileName;
            StageLayer m_SLayer = null;
            string m_StageContent = String.Empty;

            try
            {
                m_SLayer = new StageLayer();
                m_StageContent = m_SLayer.ReadFile(m_File);
            }
            catch (Exception)
            {
                m_StageContent = "";
            }
            finally
            {
                m_SLayer = null;
            }

            return m_StageContent;
        }

        /// <summary>
        /// Serializes the specified object to the specified XML file.
        /// </summary>
        /// <param name="RelativeStagePath">Path relative to the web root where the XML file will be created.</param>
        /// <param name="FileName">The name of the XML file.</param>
        /// <param name="ObjectToSerialize">The object which will be serialized to the XML file.</param>
        /// <returns></returns>
        [WebMethod(Description="Serializes the specified object to the specified XML file.")]
        public bool Serializer(string RelativeStagePath, string FileName, object ObjectToSerialize)
        {
            string m_File = Server.MapPath("~/" + RelativeStagePath) + "\\" + FileName;
            StageLayer m_SLayer=null;
            bool m_IsSuccess;

            try
            {
                m_SLayer = new StageLayer();
                m_SLayer.SaveState(m_File, ObjectToSerialize);
                m_IsSuccess = true;
            }
            catch (Exception)
            {
                m_IsSuccess = false;
            }
            finally
            {
                m_SLayer = null;
            }

            return m_IsSuccess;
        }

        /// <summary>
        /// DeSerializes an object of the specified type from the specified XML file.
        /// </summary>
        /// <param name="RelativeStagePath">Path relative to the web root where the XML file resides.</param>
        /// <param name="FileName">The name of the XML file name.</param>
        /// <param name="TypeOfObject">The type of the object.</param>
        /// <returns>An object deserialized from the XML.</returns>
        [WebMethod(Description = "DeSerializes the object of the specified type from the specified XML file.")]
        public object DeSerializer(string RelativeStagePath, string FileName, Type TypeOfObject)
        {
            string m_File = Server.MapPath("~/" + RelativeStagePath) + "\\" + FileName;
            StageLayer m_SLayer = null;
            object m_ObjectToReturn = null;

            try
            {
                m_SLayer = new StageLayer();
                m_ObjectToReturn = m_SLayer.LoadState(TypeOfObject, m_File);
            }
            catch (Exception)
            {
                m_ObjectToReturn = null;
            }
            finally
            {
                m_SLayer = null;
            }

            return m_ObjectToReturn;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\RPSAutoLogin\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\RPSAutoLogin\RPSAutoLogin.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Threading;


namespace Test.Identity.Common
{
	/// <summary>
	/// Automated Login Module for RPS.  This class will set up a RPS Ticket and connect to a particular web target, supplying said Ticket.
	/// This module will handle auto-redirects on the target, and return the HTML output as a string.
	/// </summary>
	public class RPSAutoLogin
	{
		#region Properties
		string[] _proxyBypass = { "\\.xbox\\.com", "\\.xna\\.com", "\\.zune\\.net", "\\.xboxlive\\.com", "10", "buy\\.live-int\\.com" };
		PassportEnvironment _passportEnvironment;
		string _username;
		string _password;
		bool _implementProxy;
		string _site;
		string _target;
		string _authPolicy;
		string _siteId;
		string _token;
        private static int Retry_Count = 5;
        string _proxyServer;

		TargetProperty _targetProperty;

        /// <summary>
        /// Server to use for Proxy on requests.
        /// </summary>
        public string ProxyServer
        {
            get { return _proxyServer; }
            set { _proxyServer = value; }
        }
		/// <summary>
		/// List of URLs which should bypass the Proxy
		/// </summary>
		public string[] ProxyBypass
		{
			get { return _proxyBypass; }
			set { _proxyBypass = value; }
		}
		/// <summary>
		/// RPS Environment (each environment has its own user database)
		/// </summary>
		public PassportEnvironment PassportEnvironment
		{
			get { return _passportEnvironment; }
		}
		/// <summary>
		/// Username to log into RPS with
		/// </summary>
		public string Username
		{
			get { return _username; }
			set { _username = value; }
		}
		/// <summary>
		/// Password to log into RPS with
		/// </summary>
		public string Password
		{
			get { return _password; }
			set { _password = value; }
		}
		/// <summary>
		/// Setting to Implement the Proxy on the Request
		/// </summary>
		public bool ImplementProxy
		{
			get { return _implementProxy; }
			set { _implementProxy = value; }
		}
		/// <summary>
		/// Site that requires RPS Ticket (ex: https://www.xbox.com/)
		/// </summary>
		public string Site
		{
			get { return _site; }
			set { _site = value; }
		}
		/// <summary>
		/// Target URL to return HTML from (ex: https://www.xbox.com/en-us/)
		/// </summary>
		public string Target
		{
			get { return _target; }
			set { _target = value; }
		}
		/// <summary>
		/// RPS Auth Policy.  Typically "LBI" or "MBI"
		/// </summary>
		public string AuthPolicy
		{
			get { return _authPolicy; }
			set { _authPolicy = value; }
		}
		/// <summary>
		/// RPS SiteID
		/// </summary>
		public string SiteId
		{
			get { return _siteId; }
			set { _siteId = value; }
		}
		/// <summary>
		/// RPS Token (only populated once BuildRequest is called)
		/// </summary>
		public string Token
		{
			get { return _token; }
			set { _token = value; }
		}
		/// <summary>
		/// Which E&amp;D Property to Target (Some Properties have specific RPS implementation details).
		/// </summary>
		public TargetProperty TargetProperty
		{
			get { return _targetProperty; }
			set { _targetProperty = value; }
		}
		#endregion

		#region Constructors
		/// <summary>
		/// Initializes a new instance of RPS AutoLogin with the specified authorization properties.
		/// </summary>
		/// <param name="target">Target URL to access once RPS is logged in (ex: http://www.xbox.com/en-us/)</param>
		/// <param name="site">Site to create RPS Ticket for (ex: http://www.xbox.com/)</param>
		/// <param name="username">Username (email) to log into RPS</param>
		/// <param name="password">Password to log into RPS</param>
		/// <param name="passportEnvironment">Environment for RPS Login (OneBoxINT is untested currently)</param>
		/// <param name="targetProperty">Which E&amp;D Property to Target (Some require special handling)</param>
		/// <param name="siteId">RPS SiteId for the target Site</param>
		/// <param name="authPolicy">RPS Auth Policy for the target Site (typically "LBI" or "MBI")</param>
		public RPSAutoLogin(string target, string site, string username, string password, PassportEnvironment passportEnvironment, TargetProperty targetProperty, string siteId, string authPolicy)
		{
			Target = target;
			Site = site;
			Username = username;
			Password = password;
			_passportEnvironment = passportEnvironment;
			SiteId = siteId;
			AuthPolicy = authPolicy;
			TargetProperty = targetProperty;
            ProxyServer = "http://itgproxy:80";
		}
        /// <summary>
        /// Initializes a new instance of RPS AutoLogin with the specified authorization properties.
        /// </summary>
        /// <param name="target">Target URL to access once RPS is logged in (ex: http://www.xbox.com/en-us/)</param>
        /// <param name="site">Site to create RPS Ticket for (ex: http://www.xbox.com/)</param>
        /// <param name="username">Username (email) to log into RPS</param>
        /// <param name="password">Password to log into RPS</param>
        /// <param name="passportEnvironment">Environment for RPS Login (OneBoxINT is untested currently)</param>
        /// <param name="targetProperty">Which E&amp;D Property to Target (Some require special handling)</param>
        /// <param name="siteId">RPS SiteId for the target Site</param>
        /// <param name="authPolicy">RPS Auth Policy for the target Site (typically "LBI" or "MBI")</param>
        /// <param name="proxyServer">Proxy Server to apply to each request</param>
        public RPSAutoLogin(string target, string site, string username, string password, PassportEnvironment passportEnvironment, TargetProperty targetProperty, string siteId, string authPolicy, string proxyServer)
        {
            Target = target;
            Site = site;
            Username = username;
            Password = password;
            _passportEnvironment = passportEnvironment;
            SiteId = siteId;
            AuthPolicy = authPolicy;
            TargetProperty = targetProperty;
            ProxyServer = proxyServer;
        }
		#endregion

		#region Methods
		/// <summary>
        /// Creates a HTTP Web request for the specified URL and adds the specified
        /// cookie collection to it.
		/// </summary>
        /// <param name="url">The URL to create request for.</param>
        /// <param name="hash">The cookie collection to add to the request.</param>
        /// <returns>A HTTP Web request object.</returns>
        private HttpWebRequest CreateRequest(string url, List<Cookie> hash)
		{
			HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);
			if (ImplementProxy)
			{
				WebProxy proxy = (PassportEnvironment == PassportEnvironment.INT ? new WebProxy(ProxyServer, true, ProxyBypass) : new WebProxy(ProxyServer));
				req.Proxy = proxy;
			}
			req.AllowAutoRedirect = true;
			req.MaximumAutomaticRedirections = 50;
			req.Accept = "*/*";
			req.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506; .NET CLR 3.5.21022; InfoPath.2)";
			req.Method = "POST";
			req.CookieContainer = new CookieContainer();
			foreach (Cookie cookie in hash)
			{
				req.CookieContainer.Add(cookie);
			}

			return req;
		}

		/// <summary>
        /// Creates a HTTP Web request for the specified URL and adds the specified
        /// cookie collection to it.
		/// </summary>
        /// <param name="url">The URL to create request for.</param>
        /// <param name="hash">The cookie collection to add to the request.</param>
        /// <returns>A HTTP Web request object.</returns>
        private HttpWebRequest CreateRequest(string url, Dictionary<string, Cookie> hash)
		{
			HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);
			if (ImplementProxy)
			{
				WebProxy proxy = (PassportEnvironment == PassportEnvironment.INT ? new WebProxy(ProxyServer, true, ProxyBypass) : new WebProxy(ProxyServer));
				req.Proxy = proxy;
			}
			req.AllowAutoRedirect = true;
			req.MaximumAutomaticRedirections = 50;
			req.Accept = "*/*";
			req.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506; .NET CLR 3.5.21022; InfoPath.2)";
			req.Method = "POST";
			req.CookieContainer = new CookieContainer();
			foreach (string cookiename in hash.Keys)
			{
				req.CookieContainer.Add(hash[cookiename]);
			}

			return req;
		}

		/// <summary>
		/// Creates a HTTP Web request for the specified URL and adds the specified
        /// cookie collection to it.
		/// </summary>
		/// <param name="url">The URL to create request for.</param>
		/// <param name="hash">The cookie collection to add to the request.</param>
		/// <returns>A HTTP Web request object.</returns>
        private HttpWebRequest CreateRequest(string url, CookieContainer hash)
		{
			HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);
			if (ImplementProxy)
			{
				WebProxy proxy = (PassportEnvironment == PassportEnvironment.INT ? new WebProxy(ProxyServer, true, ProxyBypass) : new WebProxy(ProxyServer));
				req.Proxy = proxy;
			}
			req.AllowAutoRedirect = true;
			req.MaximumAutomaticRedirections = 50;
			req.Accept = "*/*";
			req.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506; .NET CLR 3.5.21022; InfoPath.2)";
			req.Method = "POST";
			req.CookieContainer = new CookieContainer();
			req.CookieContainer = hash;

			return req;
		}

		/// <summary>
		/// Handles redirect requests received from response.
		/// </summary>
		/// <param name="output">The HTML source output received from a response.</param>
		/// <param name="cookies">A collection of cookies originally associated with the request and ones received from the response.</param>
		/// <param name="tries">The number of redirect attempt.</param>
        /// <remarks>
        /// If the number of redirects goes beyond 50, then this method will throw an exception.
        /// </remarks>
		/// <returns>A string representing the HTML source output.</returns>
        private string HandleRedirect(string output, CookieContainer cookies, int tries)
		{
			if (output.IndexOf("document.location.replace(") > -1)
			{
				if (tries >= 50)
				{
					throw new Exception("Attempted to redirect 50+ times!");
				}
				tries++;

				int pos = output.IndexOf("document.location.replace(");
				string rest = output.Substring(pos + 27);
				string loc = rest.Substring(0, rest.IndexOf("\""));

				HttpWebRequest req = CreateRequest(loc, cookies);
				Encoding UTFEncoding = Encoding.UTF8;
				byte[] byteArray = UTFEncoding.GetBytes("t=" + "");
				req.ContentLength = byteArray.Length;
				Stream ns = req.GetRequestStream();
				ns.Write(byteArray, 0, byteArray.Length);
				ns.Close();

				HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
				StreamReader stream = new StreamReader(resp.GetResponseStream());
				string str = stream.ReadToEnd();

				CookieContainer redirCookies = req.CookieContainer;

				foreach (Cookie cookie in resp.Cookies)
				{
					redirCookies.Add(cookie);
				}
				return HandleRedirect(str, redirCookies, tries);
			}
			else
			{
				return output;
			}
		}

        /// <summary>
        /// Handles redirect requests received from response.
        /// </summary>
        /// <param name="response">HttpWebResponse to perform redirects upon if necessary</param>
        /// <param name="cookies">A collection of cookies to be added to any redirect requests</param>
        /// <param name="tries">The number of redirect attempt.</param>
        /// <param name="output">HTML source output of final request</param>
        /// <remarks>
        /// If the number of redirects goes beyond 50, then this method will throw an exception.
        /// </remarks>
        /// <returns>Final Request after all redirects are complete</returns>
        private HttpWebResponse HandleRedirect(HttpWebResponse response, CookieContainer cookies, int tries, out string output)
        {
            StreamReader responseStream = new StreamReader(response.GetResponseStream());
            output = responseStream.ReadToEnd();

            if (output.IndexOf("document.location.replace(") > -1)
            {
                if (tries >= 50)
                {
                    throw new Exception("Attempted to redirect 50+ times!");
                }
                tries++;

                int pos = output.IndexOf("document.location.replace(");
                string rest = output.Substring(pos + 27);
                string loc = rest.Substring(0, rest.IndexOf("\""));

                HttpWebRequest req = CreateRequest(loc, cookies);
                Encoding UTFEncoding = Encoding.UTF8;
                byte[] byteArray = UTFEncoding.GetBytes("t=" + "");
                req.ContentLength = byteArray.Length;
                Stream ns = req.GetRequestStream();
                ns.Write(byteArray, 0, byteArray.Length);
                ns.Close();

                HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                CookieContainer redirCookies = req.CookieContainer;

                foreach (Cookie cookie in resp.Cookies)
                {
                    redirCookies.Add(cookie);
                }
                return HandleRedirect(resp, redirCookies, tries, out output);
            }
            else
            {
                return response;
            }
        }

        /// <summary>
        /// Converts the specified target URL to a valid
        /// encoded URL.
        /// </summary>
        /// <param name="Target">The target URL to convert.</param>
        /// <returns>A string representing the encoded target URL.</returns>
        private string ConvertTarget(string Target)
        {
            string newUrl = HttpUtility.UrlEncode(Target).Replace("%", "Z");
            newUrl = newUrl.Replace(".", "Z2E").Replace("-", "Z2D");
            newUrl += "&wa=wsignin1.0";
            return newUrl;
        }

		/// <summary>
		/// Logs into RPS and creates the request to be used by PerformRequest.
		/// </summary>
		/// <param name="method">Request Method (GET/POST/PUT/DELETE).</param>
		/// <returns>HttpWebRequest object to be used by PerformRequest.</returns>
		public HttpWebRequest BuildRequest(string method)
		{
			RPSTicketCreation.RPSTicketGeneratorConfig rpsTicketGenConfigAccount = new RPSTicketCreation.RPSTicketGeneratorConfig();
			rpsTicketGenConfigAccount.ConfigFile = @"RPSTicketGenerator.dll.config";
			rpsTicketGenConfigAccount.PPEnv = (RPSTicketCreation.PassportEnvironment)((int)PassportEnvironment);
			rpsTicketGenConfigAccount.AuthPolicy = AuthPolicy;
			rpsTicketGenConfigAccount.SiteID = SiteId;
			rpsTicketGenConfigAccount.CacheData = false;
			//XBoxCom will give incorrect tickets out if you just use 'live.xbox.com' as the Site.  You have to specify the address below.
			rpsTicketGenConfigAccount.SiteURL = (TargetProperty == TargetProperty.XBoxCom ? Site + "/xweb/live/passport/setCookies.ashx" : Site);
			RPSTicketCreation.RPSTicketGenerator TicketCreator = new RPSTicketCreation.RPSTicketGenerator(rpsTicketGenConfigAccount);

			Dictionary<string, Cookie> hash = new Dictionary<string, Cookie>();
            string tValue = string.Empty;

            int count = 0;
            while (string.IsNullOrEmpty(tValue) && count < Retry_Count)
            {
                try
                {
                    //For some reason ticket generation is inconsistent against "kdc.xblob.xboxlive.com". Hence the retry
                    TicketCreator.GetRPSCompactTicketAndRPSAuthCookies(Username, Password, out hash, out tValue);
                }
                catch
                {
                    Thread.Sleep(10000);
                }
                count++;
            }

            if (string.IsNullOrEmpty(tValue))
            {
                throw new Exception("Compact ticket value not found. Retried" + Retry_Count.ToString() + "times before closing");
            }
			
			Token = tValue;

			HttpWebRequest req = CreateRequest(Target, hash);
            req.Method = method;
			if (method.ToUpperInvariant() != "GET")
			{
				Encoding UTFEncoding = Encoding.UTF8;
				byte[] byteArray = UTFEncoding.GetBytes("t=" + tValue);
				req.ContentLength = byteArray.Length;

				Stream ns = req.GetRequestStream();
				ns.Write(byteArray, 0, byteArray.Length);
				ns.Close();
			}

			return req;
		}

		/// <summary>
		/// Performs the Web Request, handles any redirects, and returns the HTML source output.
		/// </summary>
        /// <param name="req">The HTTP Web Request object returned by BuildRequest.</param>
		/// <returns>A string representing the HTML Source output.</returns>
        public string PerformRequest(HttpWebRequest req)
        {
            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
            StreamReader stream = new StreamReader(resp.GetResponseStream());
            string output = stream.ReadToEnd();
            CookieContainer cookies = req.CookieContainer;
            foreach (Cookie cookie in resp.Cookies)
            {
                cookies.Add(cookie);
            }

            return HandleRedirect(output, cookies, 1);

        }

        /// <summary>
        /// Performs the Web Request, handles any redirects, and returns the HTML source output.
        /// </summary>
        /// <param name="req">The HttpWebRequest object returned by BuildRequest()</param>
        /// <param name="response">The HttpWebResponse of the final request after all redirections</param>
        /// <returns>A string representing the HTML Source output.</returns>
        public string PerformRequest(HttpWebRequest req, out HttpWebResponse response)
        {
            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
            
            CookieContainer cookies = req.CookieContainer;
            foreach (Cookie cookie in resp.Cookies)
            {
                cookies.Add(cookie);
            }

            string output = "";
            response = HandleRedirect(resp, cookies, 1, out output);
            return output;

        }
		#endregion

	}

	/// <summary>
	/// Indicates the E&amp;D property to target. <br/>
    /// NOTE: Some Properties have specific RPS implementation details.
	/// </summary>
	public enum TargetProperty
	{
		/// <summary>
		/// Indicates target property is XBox.com.
		/// </summary>
        XBoxCom,
        /// <summary>
        /// Indicates target is a property other than XBox.com.
        /// </summary>
		Other
	}

	/// <summary>
	/// Indicates the environment for Passport Calls.
    /// This will affect valid usernames, passwords, and sites.
	/// </summary>
	public enum PassportEnvironment
	{
		/// <summary>
		/// Indicates authentication against INT RPS Environment.
		/// </summary>
        INT = 0,
        /// <summary>
        /// Indicates authentication against Production RPS Environment.
        /// </summary>
		Production = 1,
        /// <summary>
        /// Indicates authentication against One Box INT RPS Environment.
        /// </summary>
		OneBoxINT = 2,
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveIdentityEmulator\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveLoginHandler\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\RPSAutoLogin\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("RPSAutoLogin")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("RPSAutoLogin")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("1fdc871c-4038-4f34-9a56-a9c27adc6e4f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\NonUI\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveIdentityEmulator\FakeWindowsLiveIdentityAdapter.cs ===
﻿using System;
using System.Web;
using Leet.Identity.WindowsLiveAuth;

namespace Test.Identity.Common
{
	public class FakeWindowsLiveIdentityAdapter : IWindowsLiveIdentityAdapter
	{
		public void Authenticate(HttpApplication app)
		{
		}
		public bool IsAuthenticated { get; set; }
		public bool HasTicket { get; set; }
		public string PuidHex { get; set; }
		public string CidHex { get; set; }
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string MemberName { get; set; }
		public string NetworkUrl { get; set; }
		public string TextTag { get; set; }
        public DateTime IssueInstant { get; set; }
        public DateTime NotAfter { get; set; }
        public object this[string name] { get { return ""; } }
		public void Authenticate()
		{
		}
		public string GetNetworkURL(string val)
		{
			return NetworkUrl;
		}
		public string GetTextTag()
		{
			return TextTag;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveIdentityEmulator\WindowsLiveIdentityEmulator.cs ===
﻿using System;
using System.Web;
using Leet.Identity.WindowsLiveAuth;

namespace Test.Identity.Common
{
	public class WindowsLiveIdentityEmulator : BaseEmulator, IWindowsLiveIdentityAdapter
	{
		bool isAuthenticated;
		bool hasTicket;
		string puidHex = string.Empty;
		string firstName = string.Empty;
		string lastName = string.Empty;
		string memberName = string.Empty;
		string textTag = string.Empty;
		string rpsUrl = string.Empty;
		string cidHex = string.Empty;
        DateTime issueInstant = DateTime.MinValue;
        DateTime notAfter = DateTime.MinValue;

		public bool IsAuthenticated
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.IsAuthenticated;
				}
				else { return isAuthenticated; }
			}
			set { isAuthenticated = value; }
		}
		public bool HasTicket
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.HasTicket;
				}
				else { return hasTicket; }
			}
			set { hasTicket = value; }
		}
		public string PuidHex
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.PuidHex;
				}
				else { return puidHex; }
			}
			set { puidHex = value; }
		}
		public string CidHex
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.CidHex;
				}
				return cidHex;
			}
			set { cidHex = value; }
		}
		public string FirstName
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.FirstName;
				}
				else { return firstName; }
			}
			set { firstName = value; }
		}
		public string LastName
		{
			get
			{
				if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
				{
					FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
					return wlid.LastName;
				}
				else { return lastName; }
			}
			set { lastName = value; }
		}
        public string MemberName
        {
            get
            {
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
                    return wlid.MemberName;
                }
                else { return memberName; }
            }
            set { memberName = value; }
        }

        public DateTime IssueInstant
        {
            get
            {
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
                    return wlid.IssueInstant;
                }
                else { return issueInstant; }
            }
            set { issueInstant = value; }
        }

        public DateTime NotAfter
        {
            get
            {
                if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
                {
                    FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
                    return wlid.NotAfter;
                }
                else { return notAfter; }
            }
            set { notAfter = value; }
        }

        public string GetNetworkURL(string val)
		{
			if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
			{
				FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
				return wlid.GetNetworkURL("");
			}
			else
			{
				return rpsUrl;
			}
		}

		public string GetTextTag()
		{
			if (Configuration.EmulatorMode == EmulatorConfiguration.ExecutionMode.Functional)
			{
				FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
				return wlid.GetTextTag();
			}
			else
			{
				return textTag;
			}
		}

		public object this[string name]
		{
			get { return string.Empty; }
			set { }
		}

		FakeWindowsLiveIdentityAdapter GetDataFromXml()
		{
			string filePath = HttpContext.Current.Server.MapPath("~/EmulatorXML/WLID_Data.xml");
			if (System.IO.File.Exists(filePath))
			{
				FakeWindowsLiveIdentityAdapter wlid = (FakeWindowsLiveIdentityAdapter)LoadState(typeof(FakeWindowsLiveIdentityAdapter), filePath);
				return wlid;
			}
			return null;
		}

		public void Authenticate()
		{
			FakeWindowsLiveIdentityAdapter wlid = GetDataFromXml();
			this.IsAuthenticated = wlid.IsAuthenticated;
			this.HasTicket = wlid.HasTicket;
			this.PuidHex = wlid.PuidHex;
			this.FirstName = wlid.FirstName;
			this.LastName = wlid.LastName;
			this.MemberName = wlid.MemberName;
			this.rpsUrl = wlid.NetworkUrl;
			this.textTag = wlid.TextTag;
		}

		public WindowsLiveIdentityEmulator()
			: base(System.Web.HttpContext.Current.Server.MapPath("~/EmulatorXML/WindowsLiveIdentityEmulatorConfig.xml"))
		{

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveIdentityEmulator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WindowsLiveIdentityEmulator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("WindowsLiveIdentityEmulator")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("84db271d-0f54-4f9a-99ac-c7b6e4415826")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveLoginHandler\WindowsLiveLoginHandler\WLIDCredentialHandler.cs ===
﻿using System;
using System.IO;
using System.Xml.Serialization;
using System.Text;

namespace Identity.Test.Common.WindowsLiveLoginHandler
{
    /// <summary>
    /// Represents the class to Serialize and DeSerialize the Windows
    /// Live credentials.
    /// </summary>
    public static class WLIDCredentialHandler
    {
        /// <summary>
        /// Saves the Windows Live credentials to a specified XML file name.
        /// </summary>
        /// <param name="Credentials">The credentials to save.</param>
        /// <param name="XMLFilename">The file name where the credentials will be saved.</param>
        public static void SaveCredentials(WLIDCredentials Credentials, string XMLFilename)
        {
            XmlSerializer m_Serializer = new XmlSerializer(typeof(WLIDCredentials));

            try
            {
                using (TextWriter m_Writer = new StreamWriter(XMLFilename, false))
                {
                    m_Serializer.Serialize(m_Writer, Credentials);
                };
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads a saved Facebook credential for the specified XML file.
        /// </summary>
        /// <param name="XMLFilename">The XML file containing the Windows Live credential.</param>
        /// <returns>An object of WLIDCredentials which represents the Windows Live credential stored in the XML file.</returns>
        public static WLIDCredentials LoadCredentials(string XMLFilename)
        {
            WLIDCredentials m_Credentials = null;
            XmlSerializer m_Serializer = new XmlSerializer(typeof(WLIDCredentials));

            //Check XML file
            if (!File.Exists(XMLFilename))
                throw new FileNotFoundException("The specified credential XML file was not found.");

            try
            {
                using (TextReader m_Reader = new StreamReader(XMLFilename))
                {
                    m_Credentials = (WLIDCredentials)m_Serializer.Deserialize(m_Reader);
                };

                return m_Credentials;
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\UI\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveLoginHandler\WindowsLiveLoginHandler\WLIDCredentials.cs ===
﻿using System;
using System.Text;

namespace Identity.Test.Common.WindowsLiveLoginHandler
{
    /// <summary>
    /// Represents the credentials used to login to Windows Live.
    /// </summary>
    public class WLIDCredentials
    {
        /// <summary>
        /// The Windows Live account username.
        /// </summary>
        public string Username
        {
            get;
            set;
        }

        /// <summary>
        /// The Windows Live account password.
        /// </summary>
        public string Password
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveLoginHandler\WindowsLiveLoginHandler\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WindowsLiveLoginHandler")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft IT")]
//[assembly: AssemblyProduct("WindowsLiveLoginHandler")]
//[assembly: AssemblyCopyright("Copyright © Microsoft IT 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("09547697-f5dd-4a86-b492-dc97a630e310")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\IdentityTestService\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Common\WindowsLiveLoginHandler\WindowsLiveLoginHandler\WLIDLoginUI.cs ===
﻿using System;
using System.Text;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;

namespace Identity.Test.Common.WindowsLiveLoginHandler
{
    /// <summary>
    /// Represents the Windows Live UI login handler.
    /// </summary>
    public static class WLIDLoginUI
    {
        /// <summary>
        /// Executes the Windows Live login actions using the specified credential.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser on which to perform the UI actions.</param>
        /// <param name="LoginCredentials">The Windows Live credentials to use to login.</param>
        public static void DoUIWindowsLiveLogin(BrowserWindow BrowserHandle, WLIDCredentials LoginCredentials)
        {
            UITestControl m_UsernameTextBox = null;
            UITestControl m_PasswordBox = null;
            UITestControl m_SignInButton = null;

            //Set Username
            m_UsernameTextBox = new UITestControl(BrowserHandle);
            m_UsernameTextBox.TechnologyName = "Web";
            m_UsernameTextBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                                   HtmlProperties.Edit.Id, "i0116");
            m_UsernameTextBox.SetFocus();
            m_UsernameTextBox.SetProperty(HtmlProperties.Edit.Text, LoginCredentials.Username);

            //Set Password
            m_PasswordBox = new UITestControl(BrowserHandle);
            m_PasswordBox.TechnologyName = "Web";
            m_PasswordBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                               HtmlProperties.Edit.Id, "i0118");
            m_PasswordBox.SetFocus();
            m_PasswordBox.SetProperty(HtmlProperties.Edit.Text, LoginCredentials.Password);

            //Click on Sign In
            m_SignInButton = new UITestControl(BrowserHandle);
            m_SignInButton.TechnologyName = "Web";
            m_SignInButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                                HtmlProperties.Button.Id, "i0011");
            m_SignInButton.EnsureClickable();
            Mouse.Click(m_SignInButton);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\NonUI\RenoWebAppNonUI\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("RenoWebAppNonUI")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft IT")]
//[assembly: AssemblyProduct("RenoWebAppNonUI")]
//[assembly: AssemblyCopyright("Copyright © Microsoft IT 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("563a3f5e-dbde-4de3-aaeb-c8b42adbb4b5")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\NonUI\RenoWebAppNonUI\NonUITests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Common.Library.DOMInspector;
using Test.Common.Library.HTTPWebAccessFramework;
using Test.Common.Library.UnifiedLogger;

namespace Identity.Test.FunctionalTest.RenoWebAppTests.NonUI
{
    /// <summary>
    /// Contains non UI tests for the FaceBook
    /// Reno Web Application.
    /// </summary>
    [TestClass]
    public class NonUITests
    {
        Logger g_TestLogger = null;

        public NonUITests()
        {
            //Init Logger
            g_TestLogger = new Logger(Logger.LoggingType.TRX | Logger.LoggingType.WTT);
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        /// <summary>
        /// Verifies that the TOS page can be accessed without
        /// any authentication.
        /// </summary>
        [TestMethod]
        public void CheckTOSPageAccess()
        {
            bool m_TestResult = false;
            g_TestLogger.StartTest("CheckTOSPageAccess");

            try
            {
                m_TestResult = CheckUnAuthenticatedPageAccess("ToS", "ToS");
            }
            catch (Exception Error)
            {
                g_TestLogger.AddException(Error, "An error occured while trying to access TOS Page.");
                m_TestResult = false;
            }
            finally
            {
                if (m_TestResult)
                    g_TestLogger.EndTest(Logger.TestOutcome.Pass);
                else
                {
                    g_TestLogger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// Verifies that the Help Page can be accessed without
        /// any authentication.
        /// </summary>
        [TestMethod]
        public void CheckHelpPageAccess()
        {
            bool m_TestResult = false;
            g_TestLogger.StartTest("CheckHelpPageAccess");

            try
            {
                m_TestResult = CheckUnAuthenticatedPageAccess("Help", "Help");
            }
            catch (Exception Error)
            {
                g_TestLogger.AddException(Error, "An error occured while trying to access Help Page.");
                m_TestResult = false;
            }
            finally
            {
                if (m_TestResult)
                    g_TestLogger.EndTest(Logger.TestOutcome.Pass);
                else
                {
                    g_TestLogger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// Verifies that the Privacy page can be accessed without
        /// any authentication.
        /// </summary>
        [TestMethod]
        public void CheckPrivacyPageAccess()
        {
            bool m_TestResult = false;
            g_TestLogger.StartTest("CheckPrivacyPageAccess");

            try
            {
                m_TestResult = CheckUnAuthenticatedPageAccess("Privacy", "Privacy");
            }
            catch (Exception Error)
            {
                g_TestLogger.AddException(Error, "An error occured while trying to access Privacy Page.");
                m_TestResult = false;
            }
            finally
            {
                if (m_TestResult)
                    g_TestLogger.EndTest(Logger.TestOutcome.Pass);
                else
                {
                    g_TestLogger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// Verifies that the Error page can be accessed without
        /// any authentication.
        /// </summary>
        [TestMethod]
        public void CheckErrorPageAccess()
        {
            HTTPGetAccess m_ErrorPageAccess = null;
            HTMLBaseNodeCollection m_ErrorPageDOM = null;
            HTMLElement m_ErrorLabel = null;

            g_TestLogger.StartTest("CheckErrorPageAccess");
            try
            {
                m_ErrorPageAccess = new HTTPGetAccess();
                m_ErrorPageAccess.RemoteHostName = "games.live-dev.com";
                g_TestLogger.AddMessage("RemoteHost set to: " + m_ErrorPageAccess.RemoteHostName);
                m_ErrorPageAccess.WebPageURI = "Facebook/FBWeb/Error";
                g_TestLogger.AddMessage("Relative URI set to: " + m_ErrorPageAccess.WebPageURI);

                RequestParameterCollection m_RequestParameters =
                    new RequestParameterCollection(new RequestParameter()
                    {
                        ParameterName = "errorMsg",
                        ParameterValue = "This is a test error message."
                    });
                m_ErrorPageAccess.ParameterCollection = m_RequestParameters;
                g_TestLogger.AddMessage("Error Page request parameter set.");

                //Create the GET Request
                m_ErrorPageAccess.CreateGETRequest();
                g_TestLogger.AddMessage("Error Page GET Request created.");

                //Get the response
                m_ErrorPageAccess.GetResponse();
                g_TestLogger.AddMessage("Error Page Response fetched.");

                //Create the DOM
                m_ErrorPageDOM = new HTMLDocument(m_ErrorPageAccess.HttpGetResponseData, true).GetHTMLDOMTree();
                g_TestLogger.AddMessage("Error Page DOM Tree created.");

                //Get Error Lable
                m_ErrorLabel = (HTMLElement)m_ErrorPageDOM.FindByAttributeNameValue("id", "lblErorMsg", true)[0];

                if (m_ErrorLabel.Text.Replace('+', ' ') == "This is a test error message.")
                {
                    g_TestLogger.AddMessage("Error lable text matches expected text.");
                    g_TestLogger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    g_TestLogger.AddMessage("Error lable text does not match expected text.", Logger.MessageType.Error);
                    g_TestLogger.AddMessage("Expected: 'This is a test error message.'", Logger.MessageType.Error);
                    g_TestLogger.AddMessage("Actual: '" + m_ErrorLabel.Text + "'", Logger.MessageType.Error);
                    g_TestLogger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Error lable text does not match expected text.");
                }
            }
            catch (Exception Error)
            {
                g_TestLogger.AddException(Error, "An error occured while trying to access Error Page.");
                g_TestLogger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail(Error.ToString());
            }
        }

        /// <summary>
        /// Verifies that the specified page can be accessed in Un Authenticated mode.
        /// </summary>
        /// <param name="UnAuthenticatedPage">The target page.</param>
        /// <param name="ExpectedPageTitle">The expected title of the target page.</param>
        /// <returns>True if the page can be accessed in UnAuthenticated mode, otherwise false.</returns>
        private bool CheckUnAuthenticatedPageAccess(string UnAuthenticatedPage, string ExpectedPageTitle)
        {
            bool m_Result = false;
            HTTPGetAccess m_PageAccess = null;
            HTMLBaseNodeCollection m_PageDOM = null;
            HTMLElement m_PageTitle = null;
            HTMLBaseNodeCollection m_PageJSTags = null;

            try
            {
                m_PageAccess = new HTTPGetAccess();
                m_PageAccess.RemoteHostName = "games.live-dev.com";
                g_TestLogger.AddMessage("RemoteHost set to: " + m_PageAccess.RemoteHostName);
                m_PageAccess.WebPageURI = "Facebook/FBWeb/" + UnAuthenticatedPage;
                g_TestLogger.AddMessage("Relative URI set to: " + m_PageAccess.WebPageURI);

                //Create the GET Request
                m_PageAccess.CreateGETRequest();
                g_TestLogger.AddMessage("UnAuthenticated Page GET Request created.");

                //Get the response
                m_PageAccess.GetResponse();
                g_TestLogger.AddMessage("UnAuthenticated Page Response fetched.");

                //Create the DOM
                m_PageDOM = new HTMLDocument(m_PageAccess.HttpGetResponseData, true).GetHTMLDOMTree();
                g_TestLogger.AddMessage("UnAuthenticated Page DOM Tree created.");

                //Get Page Title
                m_PageTitle = (HTMLElement)m_PageDOM.FindByName("title", true)[0];
                g_TestLogger.AddMessage("Fetched Page title: " + m_PageTitle.Text);
                g_TestLogger.AddMessage("Expected Page Title: " + ExpectedPageTitle);

                #region Check Page Title
                if (m_PageTitle.Text == ExpectedPageTitle)
                {
                    g_TestLogger.AddMessage("Page title matches expected title.");
                    g_TestLogger.AddMessage("Navigation successful to Page.");
                    m_Result = true;
                }
                else
                {
                    g_TestLogger.AddMessage("Page title does not match expected title.", Logger.MessageType.Error);
                    m_Result = false;
                }
                #endregion

                #region Check ApiLib.js call
                if (m_Result)
                {
                    m_PageJSTags = m_PageDOM.FindByName("script", true);

                    foreach (HTMLElement m_ScriptNode in m_PageJSTags)
                    {
                        HTMLAttribute m_SrcAttrib = m_ScriptNode.Attributes["src"];

                        if (m_SrcAttrib != null)
                        {
                            if (m_SrcAttrib.Value.Contains("ApiLib.js"))
                            {
                                g_TestLogger.AddMessage("ApiLib.js call found in page. Page cannot be accessed in UnAuthenticated mode.",
                                                    Logger.MessageType.Error);
                                g_TestLogger.AddMessage("JS call is following tag: " + m_ScriptNode.ToString(),
                                                    Logger.MessageType.Error);
                                m_Result = false;
                            }
                        }
                    }
                    if (m_Result)
                        g_TestLogger.AddMessage("No ApiLib.js calls were found on page. Page can be accessed in UnAuthenticated mode.");
                }
                #endregion

                return m_Result;
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\UI\RenoWebAppUI\UserAccountManagement.cs ===
﻿using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Test.Common.Library.UnifiedLogger;
using Identity.Test.Common.FacebookLoginHandler;
using Identity.Test.Common.WindowsLiveLoginHandler;
using Microsoft.WindowsLive.Test.PassportInterface;
using System.Collections;

namespace Identity.Test.FunctionalTest.RenoWebAppTests.UI
{
    /// <summary>
    /// Contains tests related to User Account Management.
    /// </summary>
    [TestClass]
    public class UserAccountManagement
    {
        public UserAccountManagement()
        { }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext) 
        {
            //Init RnP
            Playback.Initialize();
        }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        [ClassCleanup()]
        public static void MyClassCleanup() 
        {
            //Cleanup RnP
            Playback.Cleanup();
        }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        /// <summary>
        /// This test verifies that a Gold user is properly detected on the Invite
        /// friends page and can send a total of 100 requests.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User has at least 1 friend that shows up on Friend Linker page.
        /// Expected:
        /// 1. The user will link with a Gold account and land up on the Friend Linker Page.
        /// 2. The total number of allowed friends will be verified.
        /// CleanUp:
        /// 1. The user will be unlinked.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UserMgmnt_VerifyGoldUser()
        {
            //Init logger
            Logger m_Logger = new Logger(Logger.LoggingType.TRX | Logger.LoggingType.WTT | Logger.LoggingType.Text);

            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame = null;
            int m_TotalFriendCounter;
            bool m_IsTestPassed = false;

            try
            {
                m_Logger.StartTest("UserMgmnt_VerifyGoldUser");

                //Clear cache
                BrowserWindow.ClearCache();
                BrowserWindow.ClearCookies();
                m_Logger.AddMessage("Cache and cookies cleared.");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                UICommonActions.DoUIFBLoginAndRedirectToAppAction(m_Browser,
                                                                   new FBCredentials()
                                                                          {
                                                                              Username = "userwithxuid@hotmail-int.com",
                                                                              Password = "FBPa$$w0rd"
                                                                          },
                                                                   true,
                                                                   m_Logger);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");
                m_Logger.AddMessage("Application IFrame found. Setting parent to App IFrame.");

                #region Sign into XBL
                //Click on Sign In
                UICommonActions.DoUIPreLinkSignInAction(m_AppIFrame, m_Logger);

                //Sign in to Xbox Live
                UICommonActions.DoUIWindowsLiveLoginAction(m_Browser,
                                                            new WLIDCredentials()
                                                                    {
                                                                        Username = "adult_gold@hotmail-int.com",
                                                                        Password = "Pa$$w0rd"
                                                                    },
                                                            "XBL Friend Linker",
                                                            m_Logger);
                m_Logger.AddMessage("Successfully executed Passport Sign In actions."); 
                #endregion

                //Link accounts
                UICommonActions.DoUILinkAccountAction(m_AppIFrame, m_Logger);

                #region Get the allowed friend count and validate for Gold account
                m_TotalFriendCounter = GetAllowedFriendCount(m_AppIFrame, m_Logger);

                //Validate that Total Friends = 100 -> GOLD account
                if (m_TotalFriendCounter == 100)
                {
                    m_IsTestPassed = true;
                    m_Logger.AddMessage("Total friends = 100. Test passed!");
                }
                else
                {
                    m_IsTestPassed = false;
                    m_Logger.AddMessage("Total friends not equal to 100. Test failed!", Logger.MessageType.Warning);
                }
                #endregion

                #region CleanUp
                m_Logger.AddMessage("Starting Cleanup phase ...");

                //Unlink account
                UICommonActions.DoUIUnLinkAccountSignedInAction(m_AppIFrame, m_Logger);

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
                #endregion
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };
                if (m_IsTestPassed)
                {
                    m_Logger.AddMessage("Error occured in CleanUp phase.", Logger.MessageType.Error);
                    m_Logger.AddMessage(m_Error.ToString(), Logger.MessageType.Error);
                }
                else
                {
                    m_Logger.AddException(m_Error, "An error occured.");
                    m_IsTestPassed = false;
                }
                m_Browser.Close();
            }
            finally
            {
                if (!m_IsTestPassed)
                {
                    //Test Failed!!
                    m_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("GOLD Account validation failed.");
                }
                else
                {
                    //Test Passed :)
                    m_Logger.EndTest(Logger.TestOutcome.Pass);
                }

                //Close and dispose logger
                m_Logger.CloseLog();
                m_Logger.Dispose();
            }
        }

        /// <summary>
        /// This test verifies that a Silver user is properly detected on the Invite
        /// friends page and can send a total of 10 requests.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User has at least 1 friend that shows up on Friend Linker page.
        /// Expected:
        /// 1. The user will link with a Silver account and land up on the Friend Linker Page.
        /// 2. The total number of allowed friends will be verified.
        /// CleanUp:
        /// 1. The user will be unlinked.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UserMgmnt_VerifySilverUser()
        {
            //Init logger
            Logger m_Logger = new Logger(Logger.LoggingType.TRX | Logger.LoggingType.WTT | Logger.LoggingType.Text);

            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame = null;
            int m_TotalFriendCounter;
            bool m_IsTestPassed = false;

            try
            {
                m_Logger.StartTest("UserMgmnt_VerifySilverUser");

                //Clear cache
                BrowserWindow.ClearCache();
                BrowserWindow.ClearCookies();
                m_Logger.AddMessage("Cache and cookies cleared.");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                UICommonActions.DoUIFBLoginAndRedirectToAppAction(m_Browser,
                                                                   new FBCredentials()
                                                                   {
                                                                       Username = "userwithxuid@hotmail-int.com",
                                                                       Password = "FBPa$$w0rd"
                                                                   },
                                                                   true,
                                                                   m_Logger);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");
                m_Logger.AddMessage("Application IFrame found. Setting parent to App IFrame.");

                #region Sign into XBL
                //Click on Sign In
                UICommonActions.DoUIPreLinkSignInAction(m_AppIFrame, m_Logger);

                //Sign in to Xbox Live
                UICommonActions.DoUIWindowsLiveLoginAction(m_Browser,
                                                            new WLIDCredentials()
                                                            {
                                                                Username = "adult_silver@hotmail-int.com",
                                                                Password = "Pa$$w0rd"
                                                            },
                                                            "XBL Friend Linker",
                                                            m_Logger);
                m_Logger.AddMessage("Successfully executed Passport Sign In actions.");
                #endregion

                //Link accounts
                UICommonActions.DoUILinkAccountAction(m_AppIFrame, m_Logger);

                #region Get the allowed friend count and validate for Silver account
                m_TotalFriendCounter = GetAllowedFriendCount(m_AppIFrame, m_Logger);

                //Validate that Total Friends = 10 -> SILVER account
                if (m_TotalFriendCounter == 10)
                {
                    m_IsTestPassed = true;
                    m_Logger.AddMessage("Total friends = 10. Test passed!");
                }
                else
                {
                    m_IsTestPassed = false;
                    m_Logger.AddMessage("Total friends not equal to 10. Test failed!", Logger.MessageType.Warning);
                }
                #endregion

                #region CleanUp
                m_Logger.AddMessage("Starting Cleanup phase ...");

                //Unlink account
                UICommonActions.DoUIUnLinkAccountSignedInAction(m_AppIFrame, m_Logger);

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
                #endregion
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };
                if (m_IsTestPassed)
                {
                    m_Logger.AddMessage("Error occured in CleanUp phase.", Logger.MessageType.Error);
                    m_Logger.AddMessage(m_Error.ToString(), Logger.MessageType.Error);
                }
                else
                {
                    m_Logger.AddException(m_Error, "An error occured.");
                    m_IsTestPassed = false;
                }
                m_Browser.Close();
            }
            finally
            {
                if (!m_IsTestPassed)
                {
                    //Test Failed!!
                    m_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("SILVER Account validation failed.");
                }
                else
                {
                    //Test Passed :)
                    m_Logger.EndTest(Logger.TestOutcome.Pass);
                }

                //Close and dispose logger
                m_Logger.CloseLog();
                m_Logger.Dispose();
            }
        }

        /// <summary>
        /// Gets the allowed Friend count from the application page.
        /// </summary>
        /// <param name="ApplicationIFrame">The handle to the Application IFrame.</param>
        /// <param name="TestLogger">The logger which will be used to log actions.</param>
        /// <returns></returns>
        private int GetAllowedFriendCount(UITestControl ApplicationIFrame, Logger TestLogger)
        {
            UITestControl m_FriendCounter = null;
            UITestControl m_InviteFriendCounter = null;
            int m_FriendCounterValue;
            int m_InviteFriendCounterValue;

            //Get the value of the Friend Counter
            m_FriendCounter = new UITestControl(ApplicationIFrame);
            m_FriendCounter.TechnologyName = "Web";
            m_FriendCounter.SearchProperties.Add("id", "friendCounter");
            m_FriendCounter.Find();
            m_FriendCounterValue = int.Parse(m_FriendCounter.GetProperty("innertext").ToString());
            TestLogger.AddMessage("Friend counter value=" + m_FriendCounterValue.ToString());

            //Get value of the Invite Friend Counter
            m_InviteFriendCounter = new UITestControl(ApplicationIFrame);
            m_InviteFriendCounter.TechnologyName = "Web";
            m_InviteFriendCounter.SearchProperties.Add("id", "inviteFriendCounter");
            m_InviteFriendCounter.Find();
            m_InviteFriendCounterValue = int.Parse(m_InviteFriendCounter.GetProperty("innertext").ToString());
            TestLogger.AddMessage("Invite friend counter value=" + m_InviteFriendCounterValue.ToString());

            return m_FriendCounterValue + m_InviteFriendCounterValue;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\UI\RenoWebAppUI\UICommonActions.cs ===
﻿using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Test.Common.Library.UnifiedLogger;
using Identity.Test.Common.FacebookLoginHandler;
using Identity.Test.Common.WindowsLiveLoginHandler;

namespace Identity.Test.FunctionalTest.RenoWebAppTests.UI
{
    /// <summary>
    /// Represents the common UI helper class
    /// which performs various common UI actions.
    /// </summary>
    public static class UICommonActions
    {
        #region Login Actions
        /// <summary>
        /// Performs Facebook login actions with the specified credentials
        /// and optionally redirects to the application page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="RedirectToApp">Specifies whether to redirect to the application page.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIFBLoginAndRedirectToAppAction(BrowserWindow BrowserHandle, FBCredentials LoginCredentials,
            bool RedirectToApp, Logger TestLogger)
        {
            DoUIFBLoginAndRedirectToAppAction(BrowserHandle, LoginCredentials, RedirectToApp, false, TestLogger);
        }

        /// <summary>
        /// Performs Facebook login actions with the specified credentials and persistent mode
        /// and optionally redirects to the application page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="RedirectToApp">Specifies whether to redirect to the application page.</param>
        /// <param name="DoPersistedLogin">Indicates whether to perform a persisted login.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIFBLoginAndRedirectToAppAction(BrowserWindow BrowserHandle, FBCredentials LoginCredentials,
            bool RedirectToApp, bool DoPersistedLogin, Logger TestLogger)
        {
            //Open the Facebook site.
            BrowserHandle.NavigateToUrl(new Uri("http://www.facebook.com"));
            TestLogger.AddMessage("Browser window successfully navigated to 'http://www.facebook.com'");

            TestLogger.AddMessage("Performing Facebook login.");
            FBLoginUI.DoUIFacebookLogin(BrowserHandle, LoginCredentials, DoPersistedLogin);
            TestLogger.AddMessage("Successfully logged in to Facebook.");
            if (DoPersistedLogin)
                TestLogger.AddMessage("Persisted Login mode: ON.");
            else
                TestLogger.AddMessage("Persisted Login mode: OFF.");

            //Wait till the Facebook Login completed and the home page opens.
            while (!BrowserHandle.Title.StartsWith("Facebook | Home") &&
                   !BrowserHandle.Title.StartsWith("Facebook | Welcome to Facebook")) { }

            //Navigate to Application (if required)
            if (RedirectToApp)
            {
                BrowserHandle.NavigateToUrl(new Uri("http://apps.facebook.com/xblffdev"));
                TestLogger.AddMessage("Browser successfully navigated to app: http://apps.facebook.com/xblffdev");
            }
        }

        /// <summary>
        /// Performs Facebook login actions with the specified credentials on the
        /// Application login page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="AppTitle">The title of the facebook app. This will be the browser title when logged in.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIFBAppLoginAction(BrowserWindow BrowserHandle, FBCredentials LoginCredentials,
            string AppTitle, Logger TestLogger)
        {
            TestLogger.AddMessage("Performing Facebook login.");
            FBLoginUI.DoUIFacebookLogin(BrowserHandle, LoginCredentials, false);
            TestLogger.AddMessage("Successfully logged in to Facebook.");

            //Wait till the Facebook Login completed and the app page opens.
            while (!BrowserHandle.Title.StartsWith(AppTitle)) { }
        }

        /// <summary>
        /// Performs Windows Live login actions with the specified credentials
        /// on a Passport login page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Passport.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIWindowsLiveLoginAction(BrowserWindow BrowserHandle, WLIDCredentials LoginCredentials,
           Logger TestLogger)
        {
            DoUIWindowsLiveLoginAction(BrowserHandle, LoginCredentials, null, TestLogger);
        }

        /// <summary>
        /// Performs Windows Live login actions with the specified credentials
        /// on a Passport login page and optionally waits for the return page title
        /// to be valid.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Passport.</param>
        /// <param name="ReturnPageTitle">The return page title. The title of the return page should
        /// begin with this string. Return page is the page that the browser returns to after
        /// a successful passport authentication.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIWindowsLiveLoginAction(BrowserWindow BrowserHandle, WLIDCredentials LoginCredentials,
           string ReturnPageTitle, Logger TestLogger)
        {
            TestLogger.AddMessage("Performing Passport login.");
            WLIDLoginUI.DoUIWindowsLiveLogin(BrowserHandle, LoginCredentials);
            TestLogger.AddMessage("Successfully logged in to Facebook.");

            //Wait till the Return Page title is true
            if (!String.IsNullOrEmpty(ReturnPageTitle))
            {
                TestLogger.AddMessage("Waiting for return page title...");
                while (!BrowserHandle.Title.StartsWith(ReturnPageTitle)) { }
                TestLogger.AddMessage("Return page title found.");
            }
        }

        /// <summary>
        /// Performs the Pre-Link SignIn action on the Pre-Link Sign In Page.
        /// Assumes that you're on the Pre-Link Sign In page.
        /// </summary>
        /// <param name="ApplicationIFrame">A handle to the application IFrame.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIPreLinkSignInAction(UITestControl ApplicationIFrame, Logger TestLogger)
        {
            UITestControl m_PreLinkSignInLink = null;

            //Click on Pre Link Sign In
            m_PreLinkSignInLink = new UITestControl(ApplicationIFrame);
            m_PreLinkSignInLink.TechnologyName = "Web";
            m_PreLinkSignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name,
                                                     HtmlProperties.Hyperlink.Id, "lnkSignInJoinNow");
            m_PreLinkSignInLink.EnsureClickable();
            Mouse.Click(m_PreLinkSignInLink);
            TestLogger.AddMessage("Pre-Link Sign In link clicked.");
        }
        #endregion

        #region Link Actions
        /// <summary>
        /// Performs the UI Live Connect linking action on the application.
        /// Assumes that you are already on the Pre-Link page.
        /// </summary>
        /// <param name="ApplicationIFrame">A handle to the application IFrame.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUILinkAccountAction(UITestControl ApplicationIFrame, Logger TestLogger)
        {
            UITestControl m_ContinueButton = null;
            UITestControl m_Publish = null;
            UITestControl m_Finish = null;

            //Click on the Continue Link.
            m_ContinueButton = new UITestControl(ApplicationIFrame);
            m_ContinueButton.TechnologyName = "web";
            m_ContinueButton.SearchProperties.Add("id", "lnkPreLinkAccounts");
            m_ContinueButton.EnsureClickable();
            Mouse.Click(m_ContinueButton);
            TestLogger.AddMessage("Clicked on the Continue button.");

            //Select the Publish radio button
            m_Publish = new UITestControl(ApplicationIFrame);
            m_Publish.TechnologyName = "web";
            m_Publish.SearchProperties.Add("id", "publish");
            m_Publish.SearchProperties.Add(HtmlProperties.RadioButton.Value, "True");
            m_Publish.EnsureClickable();
            Mouse.Click(m_Publish);
            TestLogger.AddMessage("Publish = TRUE radio button selected.");

            //Click on the Finish button
            m_Finish = new UITestControl(ApplicationIFrame);
            m_Finish.TechnologyName = "web";
            m_Finish.SearchProperties.Add("id", "linkSubmit");
            m_Finish.EnsureClickable();
            Mouse.Click(m_Finish);
            TestLogger.AddMessage("Clicked on the Finish button. Accounts linked via UI.");
        }

        /// <summary>
        /// Performs the UI Live Connect un-linking action on the application when you're already
        /// signed into passport account. Assumes that you're on a page which has the Remove link.
        /// </summary>
        /// <param name="ApplicationIFrame">A handle to the application IFrame.</param>
        /// <param name="TestLogger">The logger object to use to log action results.</param>
        public static void DoUIUnLinkAccountSignedInAction(UITestControl ApplicationIFrame, Logger TestLogger)
        {
            UITestControl m_NotYouLink = null;
            UITestControl m_RemoveLink = null;

            //Find the Click here (not you) link.
            m_NotYouLink = new UITestControl(ApplicationIFrame);
            m_NotYouLink.TechnologyName = "web";
            m_NotYouLink.SearchProperties.Add("id", "notYouLink");
            m_NotYouLink.EnsureClickable();
            Mouse.Click(m_NotYouLink);
            TestLogger.AddMessage("Clicked on the Not You link");

            //Click the Remove link.
            m_RemoveLink = new UITestControl(ApplicationIFrame);
            m_RemoveLink.TechnologyName = "web";
            m_RemoveLink.SearchProperties.Add("id", "lnkRemoveSettings");
            m_RemoveLink.EnsureClickable();
            Mouse.Click(m_RemoveLink);
            TestLogger.AddMessage("Clicked on Remove link.");
            TestLogger.AddMessage("User has been removed from Live Connect.");
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\UI\RenoWebAppUI\UITests.cs ===
﻿using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Test.Common.Library.UnifiedLogger;
using Identity.Test.Common.FacebookLoginHandler;
using Microsoft.WindowsLive.Test.PassportInterface;
using System.Collections;
using Identity.Test.Common.WindowsLiveLoginHandler;


namespace Identity.Test.FunctionalTest.RenoWebAppTests.UI
{
    /// <summary>
    /// Summary description for FBTests
    /// </summary>
    [TestClass]
    public class UITests
    {
        Logger g_Logger = null;

        public UITests()
        {
            g_Logger = new Logger(Logger.LoggingType.TRX | Logger.LoggingType.WTT | Logger.LoggingType.Text);
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;

            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Playback.Initialize();
        }
        ////
        //// Use ClassCleanup to run code after all tests in a class have run
        [ClassCleanup()]
        public static void MyClassCleanup()
        {
            Playback.Cleanup();
        }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #region Pre-Link SignIn Flow
        /// <summary>
        /// Verfies the pre-link Sign in flow with an user having
        /// both PUID and XUID. The user does not have a linking between FBID & XUID.
        /// </summary>
        /// <remarks>
        /// Pre-Req:
        /// 1. The user must not be signed into WLID.
        /// Expected:
        /// 1. The user should be prompted to sign in with WLID.
        /// 2. After SignIn, it should detect that user already has a GamerTag.
        /// 3. It should redirect to Facebook app Pre-Link Page.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void PreLinkSignIn_UserWithPUIDandXUID()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_SingInLinkOnFaceBook = null;
            UITestControl m_XboxUserName = null;
            UITestControl m_XboxPwd = null;
            UITestControl m_XboxSignIn = null;
            UITestControl m_AppIFrame = null;
            bool m_IsTestPassed = false;

            g_Logger.StartTest("PreLinkSignIn_UserWithPUIDandXUID");
            //User used to logIn to the Xbox.com
            //user: userwithxuid@hotmail-int.com
            //PWD: b4itfun!
            try
            {
                //Open new Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true,
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");
                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //Search for the SignIn Page link.
                m_SingInLinkOnFaceBook = new UITestControl(m_AppIFrame);
                m_SingInLinkOnFaceBook.TechnologyName = "web";
                m_SingInLinkOnFaceBook.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name,
                                                            HtmlProperties.Hyperlink.Id, "lnkSignInJoinNow");
                m_SingInLinkOnFaceBook.EnsureClickable();
                Mouse.Click(m_SingInLinkOnFaceBook);
                g_Logger.AddMessage("Successfully clicked on the SignIn Page link.");

                //Verify the correct Xbox.com signIn page has been opened.
                //Wait till the Xbox SignIn page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }


                //Verify after providing the username and pwd it redirect back to Facebook app.
                m_XboxUserName = new UITestControl(m_Browser);
                m_XboxUserName.TechnologyName = "web";
                m_XboxUserName.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name, "id", "i0116");
                m_XboxUserName.SetFocus();
                //Keyboard.SendKeys("userwithxuid@hotmail-int.com");
                m_XboxUserName.SetProperty(HtmlProperties.Edit.Text, "userwithxuid@hotmail-int.com");

                //Find Password filed
                m_XboxPwd = new UITestControl(m_Browser);
                m_XboxPwd.TechnologyName = "web";
                m_XboxPwd.SearchProperties.Add("id", "i0118");
                m_XboxPwd.SetFocus();
                m_XboxPwd.SetProperty(HtmlProperties.Edit.Text, "Pa$$w0rd");

                //Find and click on the Sign In button.
                m_XboxSignIn = new UITestControl(m_Browser);
                m_XboxSignIn.TechnologyName = "web";
                m_XboxSignIn.SearchProperties.Add("id", "i0011");
                m_XboxSignIn.EnsureClickable();
                Mouse.Click(m_XboxSignIn);
                g_Logger.AddMessage("Successfully provided the Xbox User name and password and clicked on the SignIn link.");
                //Verify it get redirected to the FB landign page.
                //Check if the Facebook app landing page openes.
                while (!m_Browser.Title.StartsWith("XBL Friend Linker"))
                {
                    m_IsTestPassed = true;
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test Failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("The PreLink SignIn flow with an user with PUID and XUID failed!");
                }
            }
        }
        
        /// <summary>
        /// Verifies the pre-link Sign in flow with an user having
        /// only PUID but no XUID.
        /// </summary>
        /// <remarks>
        /// Expected:
        /// 1. The user should be prompted to sign in with WLID.
        /// 2. After SignIn, it should detect that user does not have a GamerTag.
        /// 3. The user should be redirected to the GamerTag creation page.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [DeploymentItem("XmlTemplates", "XmlTemplates")]
        [DeploymentItem("XMLUserLocalizationData", "XMLUserLocalizationData")]
        [DeploymentItem("strgenrt.dll")]
        [TestMethod]
        public void PreLinkSignIn_UserWithPUIDonly()
        {
            //string path =
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_SingInLinkOnFaceBook = null;
            UITestControl m_XboxUserName = null;
            UITestControl m_XboxPwd = null;
            UITestControl m_XboxSignIn = null;
            //UITestControl m_AppIFrame = null;
            string m_PUIDUserName = string.Empty;
            string m_PUIDUserPwd = string.Empty;
            bool m_IsTestPassed = false;

            g_Logger.StartTest("PreLinkSignIn_UserWithPUIDonly");

            try
            {
                //Create PUID user using the Passport Interface.
                CreatePassportUser(ref m_PUIDUserName, ref m_PUIDUserPwd);
                g_Logger.AddMessage(string.Format("The hotmail account in INT has been created. User name is {0} and the password is {1}",
                                                   m_PUIDUserName,
                                                   m_PUIDUserPwd));

                //Open a new browser window.
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "identitytest01@live-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //search for the SignIn Page link.
                m_SingInLinkOnFaceBook = new UITestControl(m_Browser);
                m_SingInLinkOnFaceBook.TechnologyName = "web";
                m_SingInLinkOnFaceBook.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name);
                m_SingInLinkOnFaceBook.SearchProperties.Add("id", "lnkXbcSignIn");
                m_SingInLinkOnFaceBook.EnsureClickable();
                Mouse.Click(m_SingInLinkOnFaceBook);
                g_Logger.AddMessage("Successfully clicked on the SignIn Page link on Facebook App.");

                //Verify the correct Xbox.com signIn page has been opened.
                //Wait till the Xbox SignIn page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //Find the UserName text box
                m_XboxUserName = new UITestControl(m_Browser);
                m_XboxUserName.TechnologyName = "web";
                m_XboxUserName.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name, "id", "i0116");
                m_XboxUserName.SetFocus();
                m_XboxUserName.SetProperty(HtmlProperties.Edit.Text, m_PUIDUserName);

                //Find Password filed
                m_XboxPwd = new UITestControl(m_Browser);
                m_XboxPwd.TechnologyName = "web";
                m_XboxPwd.SearchProperties.Add("id", "i0118");
                m_XboxPwd.SetFocus();
                m_XboxPwd.SetProperty(HtmlProperties.Edit.Text, m_PUIDUserPwd);

                //Find and click on the Sign In button.
                m_XboxSignIn = new UITestControl(m_Browser);
                m_XboxSignIn.TechnologyName = "web";
                m_XboxSignIn.SearchProperties.Add("id", "i0011");
                m_XboxSignIn.EnsureClickable();
                Mouse.Click(m_XboxSignIn);
                g_Logger.AddMessage("Successfully provided the hotmail User name and password and clicked on the SignIn link.");
                //It should open the Gamertag creation page. Verify and  mark the test as pass.
                while (!m_Browser.Title.StartsWith("Xbox.com | Welcome to Xbox LIVE"))
                {
                    UITestControl m_CheckAvailabilityControl = new UITestControl(m_Browser);
                    m_CheckAvailabilityControl.TechnologyName = "web";
                    m_CheckAvailabilityControl.SearchProperties.Add("id", "ctl00_MainContent_ChooseGamertag_CheckAvailabilityButton");
                    m_CheckAvailabilityControl.SetFocus();
                    m_IsTestPassed = true;
                    g_Logger.AddMessage("Gamertag creation page has been opened.");
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                g_Logger.AddException(Error, "An error occured.");
                m_IsTestPassed = false;
            }

            if (m_IsTestPassed)
            {
                //Test Passed
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
            else
            {
                //Test Failed
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("The PreLink SignIn flow with an user with PUID but no XUID failed!");
            }
        }
        #endregion

        #region Pre-Link existing SignIn Flow
        /// <summary>
        /// Verifies the pre-link Sign in flow with an user having
        /// only PUID but no XUID. User is already signed into passport.
        /// </summary>
        /// <remarks>
        /// PreReq:
        /// 1. User should be signed into WLID.
        /// 2. User should not have a XUID / GamerTag.
        /// Expected:
        /// 1. The app should detect that the user is already signed into passport.
        /// 2. The app should detect that the user does not have a GamerTag.
        /// 3. The app should redirect the user to the GamerTag creation page.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void PreLinkExistingSignIn_UserWithPUIDonly()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_XboxSignIn = null;
            UITestControl m_XboxUserName = null;
            UITestControl m_XboxPwd = null;
            UITestControl m_SingInLinkOnFaceBook = null;
            UITestControl m_GamerTagCreationTextBox = null;
            bool m_IsTestPassed = false;

            //user: UserWithNoXUID@hotmail-int.com
            //pwd: b4itfun!

            g_Logger.StartTest("PreLinkExistingSignIn_UserWithPUIDonly");

            try
            {
                //Navigate to xbox.com and login with the account which has PUID but no XUID

                m_Browser = BrowserWindow.Launch(new Uri("http://live.dev.xbox.com/en-US/default.aspx"));
                while (!m_Browser.Title.StartsWith("Xbox.com | Home")) { }
                m_XboxSignIn = new UITestControl(m_Browser);
                m_XboxSignIn.TechnologyName = "web";
                m_XboxSignIn.SearchProperties.Add("id", "ctl00_MainContent_signInLink");
                m_XboxSignIn.EnsureClickable();
                Mouse.Click(m_XboxSignIn);

                //wait till sign in page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }
                m_XboxUserName = new UITestControl(m_Browser);
                m_XboxUserName.TechnologyName = "web";
                m_XboxUserName.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name, "id", "i0116");
                m_XboxUserName.SetFocus();
                m_XboxUserName.SetProperty(HtmlProperties.Edit.Text, "UserWithNoXUID@hotmail-int.com");

                m_XboxPwd = new UITestControl(m_Browser);
                m_XboxPwd.TechnologyName = "web";
                m_XboxPwd.SearchProperties.Add("id", "i0118");
                m_XboxPwd.SetFocus();
                m_XboxPwd.SetProperty(HtmlProperties.Edit.Text, "b4itfun!");

                m_XboxSignIn = new UITestControl(m_Browser);
                m_XboxSignIn.TechnologyName = "web";
                m_XboxSignIn.SearchProperties.Add("id", "i0011");
                m_XboxSignIn.EnsureClickable();
                Mouse.Click(m_XboxSignIn);

                while (!m_Browser.Title.StartsWith("Xbox.com | Welcome")) { }
                g_Logger.AddMessage("Successfully logged in to Xbox.com with user with no XUID.");

                //Login to FB and navigate to app
                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "identitytest01@live-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //search for the SignIn Page link.
                m_SingInLinkOnFaceBook = new UITestControl(m_Browser);
                m_SingInLinkOnFaceBook.TechnologyName = "Web";
                m_SingInLinkOnFaceBook.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name,
                                                            HtmlProperties.Hyperlink.Id, "lnkSignInJoinNow");
                m_SingInLinkOnFaceBook.EnsureClickable();
                Mouse.Click(m_SingInLinkOnFaceBook);
                g_Logger.AddMessage("Successfully clicked on the SignIn Page link.");

                //Verify that the GamerTag creation text box is found and empty
                m_GamerTagCreationTextBox = new UITestControl(m_Browser);
                m_GamerTagCreationTextBox.TechnologyName = "Web";
                m_GamerTagCreationTextBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                                               HtmlProperties.Edit.Id, "ctl00_MainContent_ChooseGamertag_GamertagTextBox");
                if (m_GamerTagCreationTextBox.Exists)
                {
                    g_Logger.AddMessage("GamerTag creation text box found.");
                    if (String.IsNullOrEmpty(m_GamerTagCreationTextBox.GetProperty(HtmlProperties.Edit.Text).ToString()))
                    {
                        g_Logger.AddMessage("GamerTag text box is empty. Test passed.");
                        m_IsTestPassed = true;
                    }
                    else
                    {
                        g_Logger.AddMessage("GamerTag text box is not empty. Test failed.", Logger.MessageType.Warning);
                        m_IsTestPassed = false;
                    }
                }
                else
                {
                    g_Logger.AddMessage("GamerTag text box not found. Test failed.", Logger.MessageType.Warning);
                    m_IsTestPassed = false;
                }

                //Redirect back to FB
                m_Browser.NavigateToUrl(new Uri("http://www.facebook.com"));

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };
                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("The PreLink existing SignIn flow with an user with PUID but no XUID failed!");
                }
            }
        }
        #endregion

        #region Linking-UnLinking Flow
        /// <summary>
        /// Verifies the Facebook account linking flow to a XUID, with Publish. Test assumes
        /// that the user is already signed in with a valid WLID+XUID.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not linked.
        /// 2. User is signed into WLID.
        /// 3. User has a XUID.
        /// Expected:
        /// 1. The user is directed to the Pre-Linking page.
        /// 2. The user selects Publish and proceeds to link the account.
        /// 3. The user is linked and is marked for directory publish.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void LinkAccount_WithPublish()
        {
            //This test consider user is signed In and prompted to Link the account
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_Continue;
            UITestControl m_Publish;
            UITestControl m_Next;
            UITestControl m_SettingsPage;
            UITestControl m_ChkBox = null;
            bool m_IsTestPassed = false;

            try
            {
                g_Logger.StartTest("LinkAccount_WithPublish");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //find the Continue Link.
                m_Continue = new UITestControl(m_Browser);
                m_Continue.TechnologyName = "web";
                m_Continue.SearchProperties.Add("id", "lnkPreLinkAccounts");
                m_Continue.EnsureClickable();
                g_Logger.AddMessage("Continue Link found on the page.");
                Mouse.Click(m_Continue);
                g_Logger.AddMessage("Clicked on the Continue button.");

                //find the Publish readio button
                m_Publish = new UITestControl(m_Browser);
                m_Publish.TechnologyName = "web";
                m_Publish.SearchProperties.Add("id", "publish");
                m_Publish.SearchProperties.Add(HtmlProperties.RadioButton.Value, "True");
                m_Publish.EnsureClickable();
                Mouse.Click(m_Publish);
                g_Logger.AddMessage("Publish = TRUE radio button selected.");

                //click on the Next button
                m_Next = new UITestControl(m_Browser);
                m_Next.TechnologyName = "web";
                m_Next.SearchProperties.Add("id", "linkSubmit");
                m_Next.EnsureClickable();
                Mouse.Click(m_Next);
                g_Logger.AddMessage("Clicked on the Finish button.");

                //if it redirects to the home page which contains the settings link then go inside and 
                //verify on clicking the setting that the Pusblish radio button is checked.
                m_SettingsPage = new UITestControl(m_Browser);
                m_SettingsPage.TechnologyName = "web";
                m_SettingsPage.SearchProperties.Add("id", "lnkSettings");
                m_SettingsPage.EnsureClickable();
                Mouse.Click(m_SettingsPage);
                g_Logger.AddMessage("Navigated to Settings page to verify Publish settings.");

                //Search for the checkbox
                m_ChkBox = new UITestControl(m_Browser);
                m_ChkBox.TechnologyName = "web";
                m_ChkBox.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                              HtmlProperties.RadioButton.Id, "publish");
                m_ChkBox.FilterProperties.Add("value", "True");
                bool m_IsCheckedAfter = (bool)m_ChkBox.GetProperty("checked");
                g_Logger.AddMessage(string.Format("Found the Check box for settings and its value is {0}.",
                                                   m_IsCheckedAfter.ToString()));

                if (m_IsCheckedAfter)
                {
                    m_IsTestPassed = true;
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Linking flow with Publish failed !");
                }
            }
        }

        /// <summary>
        /// Verifies the Facebook account linking flow to a XUID, without Publish. Test assumes
        /// that the user is already signed in with a valid WLID+XUID.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not linked.
        /// 2. User is signed into WLID.
        /// 3. User has a XUID.
        /// Expected:
        /// 1. The user is directed to the Pre-Linking page.
        /// 2. The user selects NoPublish and proceeds to link the account.
        /// 3. The user is linked and is NOT marked for directory publish.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored","true")]
        [TestMethod]
        public void LinkAccount_WithoutPublish()
        {
            //This test consider user is signed In and prompted to Link the account
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_Continue;
            UITestControl m_Publish;
            UITestControl m_Next;
            UITestControl m_SettingsPage;
            UITestControl m_ChkBox = null;
            bool m_IsTestPassed = false;

            try
            {
                g_Logger.StartTest("LinkAccount_WithoutPublish");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //find the Continue Link.
                m_Continue = new UITestControl(m_Browser);
                m_Continue.TechnologyName = "web";
                m_Continue.SearchProperties.Add("id", "lnkPreLinkAccounts");
                m_Continue.EnsureClickable();
                g_Logger.AddMessage("Continue Link found on the page.");
                Mouse.Click(m_Continue);
                g_Logger.AddMessage("Clicked on the Continue button.");

                //find the Publish readio button
                m_Publish = new UITestControl(m_Browser);
                m_Publish.TechnologyName = "web";
                m_Publish.SearchProperties.Add("id", "publish");
                m_Publish.SearchProperties.Add(HtmlProperties.RadioButton.Value, "false");
                m_Publish.EnsureClickable();
                Mouse.Click(m_Publish);
                g_Logger.AddMessage("Publish = TRUE radio button selected.");

                //click on the Next button
                m_Next = new UITestControl(m_Browser);
                m_Next.TechnologyName = "web";
                m_Next.SearchProperties.Add("id", "linkSubmit");
                m_Next.EnsureClickable();
                Mouse.Click(m_Next);
                g_Logger.AddMessage("Clicked on the Finish button.");

                //if it redirects to the hope page which contains the settings link then go inside and 
                //verify on clicking the setting that the Pusblish radio button is checked.
                m_SettingsPage = new UITestControl(m_Browser);
                m_SettingsPage.TechnologyName = "web";
                m_SettingsPage.SearchProperties.Add("id", "lnkSettings");
                m_SettingsPage.EnsureClickable();
                Mouse.Click(m_SettingsPage);
                g_Logger.AddMessage("Navigated to Settings page to verify Publish settings.");

                //Search for the checkbox
                m_ChkBox = new UITestControl(m_Browser);
                m_ChkBox.TechnologyName = "web";
                m_ChkBox.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                              HtmlProperties.RadioButton.Id, "publish");
                m_ChkBox.FilterProperties.Add("value", "False");
                bool m_IsCheckedAfter = (bool)m_ChkBox.GetProperty("checked");
                g_Logger.AddMessage(string.Format("Found the Check box for settings and its value is {0}.", m_IsCheckedAfter.ToString()));

                if (m_IsCheckedAfter)
                {
                    m_IsTestPassed = true;
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };
                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Linking flow without Publish failed !");
                }
            }
        }

        /// <summary>
        /// Verifies that an user can successfully remove the Facebook to XUID link. Test assumes
        /// that the user is already signed in with a valid WLID+XUID and already linked in Live Connect.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is linked.
        /// 2. User is signed into WLID.
        /// 3. User has a XUID (but obviously!!!)
        /// Expected:
        /// 1. The user proceeds to unlink the account.
        /// 2. The user is redirected to the Pre-Link page.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void LinkAccount_Delete()
        {
            //This test consider user is signed In and prompted to Link the account
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_RemoveLink;
            UITestControl m_Continue;
            UITestControl m_AppIFrame;
            UITestControl m_ClickHere;
            bool m_IsTestPassed = false;
            try
            {
                g_Logger.StartTest("LinkAccount_Delete");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //Find the Click here link.
                m_ClickHere = new UITestControl(m_AppIFrame);
                m_ClickHere.TechnologyName = "web";
                m_ClickHere.SearchProperties.Add("id", "notYouLink");
                if (m_ClickHere.Exists)
                {
                    g_Logger.AddMessage("User is linked and Click here link has been found.");
                }
                else
                {
                    g_Logger.AddWarning("User is currently not linked to LIVE ID. In order to run this test user has to be linked first.");
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("User is currently not linked to LIVE ID. In order to run this test user has to be linked first.");
                }
                m_ClickHere.EnsureClickable();
                Mouse.Click(m_ClickHere);

                //Find the Remove link.
                m_RemoveLink = new UITestControl(m_AppIFrame);
                m_RemoveLink.TechnologyName = "web";
                m_RemoveLink.SearchProperties.Add("id", "lnkRemoveSettings");
                m_RemoveLink.EnsureClickable();
                Mouse.Click(m_RemoveLink);
                g_Logger.AddMessage("Remove link has been linked.");

                //Verify that the link has been removed and the user is redirected to the Linking page.
                //find the Continue Link.
                m_Continue = new UITestControl(m_Browser);
                m_Continue.TechnologyName = "web";
                m_Continue.SearchProperties.Add("id", "lnkPreLinkAccounts");
                m_Continue.EnsureClickable();
                g_Logger.AddMessage("Link has been removed from the LiveConnect and the user has been redirected to the Pre link page. Continue Link found on the page.");

                if (m_Continue.Exists)
                {
                    m_IsTestPassed = true;
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };
                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Delete Link flow failed !");
                }
            }
        }

        /// <summary>
        /// Verifies that an error is displayed when the user does not select
        /// any directory publishing radio button and clicks Finish.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is signed into WLID.
        /// 2. User has a XUID.
        /// 3. User is not linked in LC.
        /// Expected:
        /// 1. The user proceeds to link the account and clicks on Continue.
        /// 2. The user does not select any privacy options and clicks finish.
        /// 3. User should be prompted with an error.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void LinkAccount_VerifyNoCheckError()
        {
            //This test consider user is signed In and prompted to Link the account
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame = null;
            UITestControl m_Continue = null;
            UITestControl m_Finish = null;
            UITestControl m_ErrorSpan = null;
            bool m_IsTestPassed = false;

            try
            {
                g_Logger.StartTest("LinkAccount_VerifyNoCheckError");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //Find & click the Continue button.
                m_Continue = new UITestControl(m_AppIFrame);
                m_Continue.TechnologyName = "web";
                m_Continue.SearchProperties.Add("id", "lnkPreLinkAccounts");
                m_Continue.EnsureClickable();
                Mouse.Click(m_Continue);
                g_Logger.AddMessage("Clicked on the Continue button.");

                //Find & click the Finish button.
                m_Finish = new UITestControl(m_AppIFrame);
                m_Finish.TechnologyName = "Web";
                m_Finish.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                              HtmlProperties.Button.Id, "linkSubmit");
                m_Finish.EnsureClickable();
                Mouse.Click(m_Finish);
                g_Logger.AddMessage("Clicked on the Finish button.");

                //Find the error span
                m_ErrorSpan = new UITestControl(m_AppIFrame);
                m_ErrorSpan.TechnologyName = "Web";
                //m_ErrorSpan.SearchProperties.Add("id", "TODO:ID_HERE");
                m_ErrorSpan.SearchProperties.Add("id", "saveSettingsErrorMsg");

                if (m_ErrorSpan.Exists)
                {
                    g_Logger.AddMessage("Found the expected Error Text span.");
                    m_IsTestPassed = true;
                }
                else
                {
                    g_Logger.AddMessage("The expected Error Text span was not found. Test failed!",
                                        Logger.MessageType.Warning);
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("The expected Error Text span was not found. Test failed!");
                }
            }
        }

        #endregion

        #region Settings Page
        /// <summary>
        /// Verifies that the user is able to update the publish settings from
        /// the Settings page in the app. Test assumes that the user is already signed in
        /// and linked in Live Connect.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. The user is signed in with WLID.
        /// 2. The user is already linked.
        /// Expected:
        /// 1. User visits the Settings page and updates the publish settings.
        /// 2. The settings are saved and reflected correctly when the user revisits the settings page.
        /// </remarks>
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Refactored", "true")]
        [TestMethod]
        public void Settings_VerifyPublish()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame = null;
            UITestControl m_SettingPageLink = null;
            UITestControl m_SaveButton = null;
            UITestControl m_PrivacyRadioButton = null;
            bool m_PrivacyRadioButtonState;
            bool m_IsTest1Passed = false;
            bool m_IsTest2Passed = false;

            g_Logger.StartTest("Settings_VerifyPublish");
            try
            {
                //Open a new browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //search for the Settings Page link.
                m_SettingPageLink = new UITestControl(m_AppIFrame);
                m_SettingPageLink.TechnologyName = "web";
                m_SettingPageLink.SearchProperties.Add("id", "lnkSettings");
                m_SettingPageLink.EnsureClickable();
                Mouse.Click(m_SettingPageLink);
                g_Logger.AddMessage("Successfully clicked on the Settings Page link.");

                //Search for the "Yes" Radio Button
                m_PrivacyRadioButton = new UITestControl(m_AppIFrame);
                m_PrivacyRadioButton.TechnologyName = "web";
                m_PrivacyRadioButton.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                                          HtmlProperties.RadioButton.Id, "publish",
                                                          HtmlProperties.RadioButton.Value,"True");

                m_PrivacyRadioButton.EnsureClickable();
                Mouse.Click(m_PrivacyRadioButton);
                g_Logger.AddMessage("Publish = TRUE radio button selected.");

                //Click Save
                m_SaveButton = new UITestControl(m_AppIFrame);
                m_SaveButton.TechnologyName = "web";
                m_SaveButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                                  HtmlProperties.Button.Id, "btnSaveLcSettings");
                m_SaveButton.EnsureClickable();
                Mouse.Click(m_SaveButton);
                g_Logger.AddMessage("Save button clicked.");

                //Re-Find the "Yes" Radio Button
                m_PrivacyRadioButton = null;
                m_PrivacyRadioButton = new UITestControl(m_AppIFrame);
                m_PrivacyRadioButton.TechnologyName = "web";
                m_PrivacyRadioButton.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                                          HtmlProperties.RadioButton.Id, "publish",
                                                          HtmlProperties.RadioButton.Value, "True");
                m_PrivacyRadioButton.Find();
                m_PrivacyRadioButtonState = (bool)m_PrivacyRadioButton.GetProperty("checked");

                if (m_PrivacyRadioButtonState)
                {
                    g_Logger.AddMessage("Publish = TRUE radio button was found to be selected after page load.");
                    m_IsTest1Passed = true;
                }
                else
                {
                    g_Logger.AddMessage("Publish = TRUE radio button was not found to be selected after page load. Test failed.",
                        Logger.MessageType.Warning);
                }


                //Click on the "No" Radio Button
                m_PrivacyRadioButton = null;
                m_PrivacyRadioButton = new UITestControl(m_AppIFrame);
                m_PrivacyRadioButton.TechnologyName = "web";
                m_PrivacyRadioButton.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                                          HtmlProperties.RadioButton.Id, "publish",
                                                          HtmlProperties.RadioButton.Value, "False");

                m_PrivacyRadioButton.EnsureClickable();
                Mouse.Click(m_PrivacyRadioButton);
                g_Logger.AddMessage("Publish = FALSE radio button selected.");

                //Click Save
                m_SaveButton.EnsureClickable();
                Mouse.Click(m_SaveButton);
                g_Logger.AddMessage("Save button clicked.");


                //Re-Find the "No" Radio Button
                m_PrivacyRadioButton = null;
                m_PrivacyRadioButton = new UITestControl(m_AppIFrame);
                m_PrivacyRadioButton.TechnologyName = "web";
                m_PrivacyRadioButton.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                                          HtmlProperties.RadioButton.Id, "publish",
                                                          HtmlProperties.RadioButton.Value, "False");
                m_PrivacyRadioButton.Find();
                m_PrivacyRadioButtonState = (bool)m_PrivacyRadioButton.GetProperty("checked");

                if (m_PrivacyRadioButtonState)
                {
                    g_Logger.AddMessage("Publish = FALSE radio button was found to be selected after page load.");
                    m_IsTest2Passed = true;
                }
                else
                {
                    g_Logger.AddMessage("Publish = FALSE radio button was not found to be selected after page load. Test failed.",
                        Logger.MessageType.Warning);
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTest1Passed = false;
                m_IsTest2Passed = false;
                m_Browser.Close();
            }
            finally
            {
                if (m_IsTest1Passed && m_IsTest2Passed)
                {
                    //Test Passed
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
                else
                {
                    //Test failed
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Privacy settings not saved correctly on settings page. Test failed!");
                }
            }
        }
        #endregion

        #region Pre-Link Page
        /// <summary>
        /// This test verifies that the Gamer Tag is correctly detected
        /// on the pre-linking page. Test assumes that the user is already signed in
        /// with a valid WLID+XUID.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. The user is logged in to WLID.
        /// 2. The user has a XUID / GamerTag.
        /// 3. The user is not linked.
        /// Expected:
        /// 1. The user visits the app and is redirected to the Pre-Link page.
        /// 2. The GamerTag displayed on the page is the one associated with the logged in WLID account.
        /// </remarks>
        [TestMethod]
        [TestProperty("Refactored", "true")]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void PreLink_VerifyGamerTag()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_PreLinkPageGamerTag = null;
            UITestControl m_AppIFrame = null;
            string m_ExpectedGamerTag = "Gamertag1";
            bool m_IsTestPassed = false;

            try
            {
                g_Logger.StartTest("PreLink_VerifyGamerTag");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //Check for Linking page
                m_PreLinkPageGamerTag = new UITestControl(m_AppIFrame);
                m_PreLinkPageGamerTag.TechnologyName = "Web";
                m_PreLinkPageGamerTag.SearchProperties.Add("id", "prelinkGamertag");

                if (m_PreLinkPageGamerTag.Exists)
                {
                    //m_PreLinkPageGamerTag.DrawHighlight();

                    if (m_PreLinkPageGamerTag.GetProperty("innertext").ToString() == m_ExpectedGamerTag)
                    {
                        g_Logger.AddMessage("The pre link page gamer tag is as expected.");
                        m_IsTestPassed = true;
                    }
                    else
                    {
                        g_Logger.AddMessage("The pre link page gamer tag is not as expected. Test failed!",
                            Logger.MessageType.Warning);
                        g_Logger.AddMessage("Gamer Tag from pre link page: " + m_PreLinkPageGamerTag.GetProperty("innertext").ToString(),
                            Logger.MessageType.Warning);
                    }
                }
                else
                {
                    g_Logger.AddMessage("The pre link gamertag lable could not be found on the page. User may not have been redirected to pre linking page. Test failed!",
                        Logger.MessageType.Warning);
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            {
                if (!m_IsTestPassed)
                {
                    //Test Failed!!
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Gamer tag was not as expected or not found on page. Test failed!");
                }
                else
                {
                    //Test Passed :)
                    g_Logger.EndTest(Logger.TestOutcome.Pass);
                }
            }
        }
        #endregion

        #region Friend Management


        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestMethod]
        public void VerifyFriendListSignedOutMode()
        {
            //This test consider user is signed In and linked.
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame;
            UITestControlCollection m_FriendCollection;
            UITestControl m_FriendTile;
            bool IsPassed = true;

            g_Logger.StartTest("VerifyFriendListSignedOutMode");

            //create a collection which contains all the different users.
            Hashtable m_hashFrinds = new Hashtable();
            //Removing the user with zero friends. We are going to handle it seperately.
            //FBCredentials user1 = new FBCredentials()
            //                        {
            //                            Username = "fbuserwith0Friends@hotmail-int.com",
            //                            Password = "FBPa$$w0rd"
            //                        };
            FBCredentials user2 = new FBCredentials()
            {
                Username = "fbuserwith1Friend@hotmail-int.com",
                Password = "FBPa$$w0rd"
            };
            FBCredentials user3 = new FBCredentials()
            {
                Username = "fbuserwith5friends@hotmail-int.com",
                Password = "FBPa$$w0rd"
            };

            m_hashFrinds.Add(user3, 5);
            m_hashFrinds.Add(user2, 1);


            foreach (object user in m_hashFrinds.Keys)
            {
                try
                {
                    int temp = (int)m_hashFrinds[user];
                    g_Logger.StartTest("User with " + (Int32)m_hashFrinds[user] + " friends.");

                    //Launch Browser
                    m_Browser = BrowserWindow.Launch();

                    //Open Facebook, login and launch app
                    FBCredentials f = (FBCredentials)user;
                    DoFBLoginAndRedirectToApp(m_Browser, (FBCredentials)user, true);

                    //Get the App IFrame
                    m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                    m_AppIFrame.TechnologyName = "Web";
                    m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                     HtmlProperties.Frame.Name, "iframe_canvas");

                    m_AppIFrame.Find();
                    g_Logger.AddMessage("Application IFrame found on page.");

                    //find all the Friends Tile
                    m_FriendCollection = new UITestControlCollection();
                    m_FriendTile = new UITestControl(m_AppIFrame);
                    m_FriendTile.TechnologyName = "web";
                    m_FriendTile.SearchProperties.Add("id", "divFbXliveAppUserTile");
                    m_FriendCollection = m_FriendTile.FindMatchingControls();

                    // Console.WriteLine(m_FriendCollection.Count.ToString());

                    g_Logger.AddMessage("The number of friends found are " + m_FriendCollection.Count + " and expected friends are " + (Int32)m_hashFrinds[user]);

                    if (m_FriendCollection.Count == (Int32)m_hashFrinds[user])
                    {
                        g_Logger.EndTest(Logger.TestOutcome.Pass);
                        // g_Logger.EndTest("User with " + (int)m_hashFrinds[user] + "friends.", Logger.TestOutcome.Pass);
                        FBLoginUI.DoUIFacebookLogout(m_Browser);
                        m_Browser.Close();
                    }
                    else
                    {
                        IsPassed = false;
                        g_Logger.EndTest("User with " + (int)m_hashFrinds[user] + "friends.", Logger.TestOutcome.Fail);
                        //Assert.Fail(string.Format("Numuber of friends are {0} which is not equal to the expected numbers which is {1} .", m_FriendCollection.Count, (Int32)m_hashFrinds[user]));
                        FBLoginUI.DoUIFacebookLogout(m_Browser);
                        m_Browser.Close();
                    }

                }
                catch (Exception Error)
                {
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    g_Logger.AddMessage(Error.Message);
                    m_Browser.Close();
                    Assert.Fail("Number of friends are not equal to expected Number." + Error.Message);
                }
            }

            if (IsPassed)
            {
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
            else
            {
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail();
            }

        }


        #endregion

        #region Install-UnInstall Flow
        /// <summary>
        /// Verifies that the application can be installed and uninstalled by an user.
        /// </summary>
        /// <remarks>
        /// Expected:
        /// 1. The user signs into Facebook with an account that does not have the app installed.
        /// 2. The user installs the app, via the App profile page.
        /// 3. The user is shown that Facebook standard "Authoriize App" dialog.
        /// 4. Pressing allow installs the app.
        /// 5. User then removes the app from the App profile page.
        /// 6. App is no longer installed.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void CheckApplicationInstallUninstall()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_GoToAppButton = null;
            UITestControl m_AllowButtonDiv = null;
            UITestControl m_AllowButton = null;
            UITestControl m_ShowFriendsLink = null;
            UITestControl m_RemoveAppLink = null;
            UITestControl m_RemoveButton = null;
            UITestControl m_OkayButton = null;

            try
            {
                g_Logger.StartTest("AppInstallUninstall_Install");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "identitytest01@live-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          false);

                #region Application Install
                //Navigate to Application Page
                m_Browser.NavigateToUrl(new Uri("http://www.facebook.com/apps/application.php?id=104354559838"));
                g_Logger.AddMessage("Browser window successfuly navigated to app page: http://www.facebook.com/apps/application.php?id=104354559838");
                //Click on GoTo App Button
                m_GoToAppButton = new UITestControl(m_Browser);
                m_GoToAppButton.TechnologyName = "Web";
                m_GoToAppButton.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name);
                m_GoToAppButton.SearchProperties.Add(new PropertyExpression("href",
                                                                            "http://apps.facebook.com/xblpartytime",
                                                                            PropertyExpressionOperator.Contains)
                                                    );
                m_GoToAppButton.EnsureClickable();
                Mouse.Click(m_GoToAppButton);
                g_Logger.AddMessage("Successfully clicked on the Go to Application button.");

                m_AllowButtonDiv = new UITestControl(m_Browser);
                m_AllowButton = new UITestControl(m_Browser);
                m_AllowButtonDiv.TechnologyName = "Web";
                m_AllowButton.TechnologyName = "Web";
                m_AllowButtonDiv.SearchProperties.Add(HtmlProperties.Pane.ControlType, ControlType.Pane.Name,
                                                      HtmlProperties.Pane.TagName, "div",
                                                      HtmlProperties.Pane.Id, "confirm_button");
                m_AllowButton = m_AllowButtonDiv.GetChildren()[0];
                m_AllowButton.EnsureClickable();
                Mouse.Click(m_AllowButton);
                g_Logger.AddMessage("Successfully clicked on the Application Allow button.");

                //Check existence of Show Friends link
                m_ShowFriendsLink = new UITestControl(m_Browser);
                m_ShowFriendsLink.TechnologyName = "Web";
                m_ShowFriendsLink.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name,
                                                       HtmlProperties.Hyperlink.Id, "lnkShowFriendsPage");
                m_ShowFriendsLink.EnsureClickable();
                g_Logger.AddMessage("ShowFriends link found. Application installation verified.");
                g_Logger.AddMessage("Application successfully installed.");
                g_Logger.EndTest(Logger.TestOutcome.Pass);
                #endregion

                #region Application Uninstall
                g_Logger.StartTest("AppInstallUninstall_UnInstall");
                //Navigate to App Profile Page
                m_Browser.NavigateToUrl(new Uri("http://www.facebook.com/apps/application.php?id=104354559838"));
                g_Logger.AddMessage("Successfully navigated to the App profile page.");

                //Click on Remove App Link
                m_RemoveAppLink = new UITestControl(m_Browser);
                m_RemoveAppLink.TechnologyName = "Web";
                m_RemoveAppLink.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name,
                                                     HtmlProperties.Hyperlink.InnerText, "Remove Application");
                m_RemoveAppLink.EnsureClickable();
                Mouse.Click(m_RemoveAppLink);
                g_Logger.AddMessage("Successfully clicked on the Remove Application link.");

                //Click on Remove Button
                m_RemoveButton = new UITestControl(m_Browser);
                m_RemoveButton.TechnologyName = "Web";
                m_RemoveButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                                    HtmlProperties.Button.ValueAttribute, "Remove");
                m_RemoveButton.EnsureClickable();
                Mouse.Click(m_RemoveButton);
                g_Logger.AddMessage("Successfully clicked on Remove button");

                //Click on Okay button
                m_OkayButton = new UITestControl(m_Browser);
                m_OkayButton.TechnologyName = "Web";
                m_OkayButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                                  HtmlProperties.Button.ValueAttribute, "Okay");
                m_OkayButton.EnsureClickable();
                Mouse.Click(m_OkayButton);
                g_Logger.AddMessage("Successfully clicked on the Okay button.");

                //Wait till the App Profile pages loads
                while (!m_Browser.Title.StartsWith("Facebook | XBL Party Time Excellent")) { }
                g_Logger.AddMessage("The App profile page loaded successfully. Uninstall flow successful.");

                g_Logger.EndTest(Logger.TestOutcome.Pass);
                #endregion

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
                //g_Logger.AddMessage("Logged out from Facebook.");
            }
            catch (Exception Error)
            {
                g_Logger.AddException(Error, "An error occured while trying to test App Install / Uninstall flow.");
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail(Error.ToString());
            }
        }



        /// <summary>
        /// Verifies that the unsecure uninstall of the App removes the Linking from the LiveConncet.
        /// </summary>
        /// <remarks>
        /// 1. User Sign In to the Facebook and has the Facebook App installed.
        /// 2. User have a valid linking in the LiveConnect .
        /// 3. Make sure the flag  'FacebookAppSecureUninstall' is set to 'TRUE' in the NPDB.
        /// 4. Try uninstalling the app by hitting the URL http://apps.facebook.com/xblffdev/uninstall
        /// 5. The LiveConnect Linking should be removed.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnSecureUnInstallOfTheApp()
        {
            //This test assumes that the flag 'FacebookAppSecureUninstall' is set to true and user is already linked.
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_Continue;
            UITestControl m_AppIFrame;
            UITestControl m_SignInOrJoinNow;
            UITestControl m_PrivacyRadioButton = null;
            UITestControl m_SaveButton;
            bool m_IsTestPassed = false;
            try
            {
                //Login to Facebook
                g_Logger.StartTest("UnSecureUnInstallOfTheApp");
                //Launch Browser
                m_Browser = BrowserWindow.Launch();
                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "fbuserwith5Friends@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");
                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");
                //uninstall the app
                m_Browser.NavigateToUrl(new Uri("http://apps.facebook.com/xblffdev/uninstall"));
                //verify that the linking has been removed.
                m_Browser.NavigateToUrl(new Uri("http://apps.facebook.com/xblffdev"));
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page After uninstalling the app and visiting the app again.");
                //Verify the opend IFrame contains the "Sign in or Join Now" link.
                m_SignInOrJoinNow = new UITestControl(m_AppIFrame);
                m_SignInOrJoinNow.TechnologyName = "web";
                m_SignInOrJoinNow.SearchProperties.Add("id", "lnkSignInJoinNow");
                m_SignInOrJoinNow.EnsureClickable();

                if (m_SignInOrJoinNow.Exists)
                {
                    m_IsTestPassed = true;
                }

                //Login to Passport
                Mouse.Click(m_SignInOrJoinNow);

                WLIDCredentials PassportCred = new WLIDCredentials();
                PassportCred.Username = "fbuserwith5Friends@hotmail-int.com";
                PassportCred.Password = "b4itfun!";

                WLIDLoginUI.DoUIWindowsLiveLogin(m_Browser, PassportCred);
                //link the account so that this test will pass with the same account next time.
                //click on the Continue button
                m_Continue = new UITestControl(m_AppIFrame);
                m_Continue.TechnologyName = "web";
                m_Continue.SearchProperties.Add("id", "lnkPreLinkAccounts");
                m_Continue.EnsureClickable();
                Mouse.Click(m_Continue);
                //Select the publish me option.
                m_PrivacyRadioButton = new UITestControl(m_AppIFrame);
                m_PrivacyRadioButton.TechnologyName = "web";
                m_PrivacyRadioButton.SearchProperties.Add(HtmlProperties.RadioButton.ControlType, ControlType.RadioButton.Name,
                                                          HtmlProperties.RadioButton.Id, "publish",
                                                          HtmlProperties.RadioButton.Value, "True");

                m_PrivacyRadioButton.EnsureClickable();
                Mouse.Click(m_PrivacyRadioButton);
                g_Logger.AddMessage("Publish = TRUE radio button selected.");
                
                //Click Save
                m_SaveButton = new UITestControl(m_AppIFrame);
                m_SaveButton.TechnologyName = "web";
                m_SaveButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                                  HtmlProperties.Button.Id, "btnSaveLcSettings");
                m_SaveButton.EnsureClickable();
                Mouse.Click(m_SaveButton);
                g_Logger.AddMessage("Save button clicked.");
                g_Logger.AddMessage("Account is again linked so that it can be used in the next test run.");
                
            }
            catch (Exception Error)
            {

                if (m_IsTestPassed)
                {
                    g_Logger.AddMessage("Uninstallation was successfull but the error occured after linking the account again:"+Error.Message);
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("Error occured while Linking the account again after deleting the link from LiveConnect");

                }
                else
                {
                    g_Logger.AddMessage("Uninstallation was unsuccessful:" + Error.Message);
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("UnSecure Unistall fail.");
                }
 
            }
            finally
            {
                if (m_IsTestPassed)
                {
                    //Test Passed
                    g_Logger.AddMessage("Link from the LiveConnect has been removed.");
                    g_Logger.EndTest(Logger.TestOutcome.Pass);

                }
                else
                {
                    //Test failed
                    g_Logger.AddMessage("Uninstallation was unsuccessful");
                    g_Logger.EndTest(Logger.TestOutcome.Fail);
                    Assert.Fail("UnSecure Unistall fail.");

                }
                m_Browser.Close();
            }
        }


        #endregion

        #region UnAuthorized Access Flow
        /// <summary>
        /// This test verifies that the user is redirected to the facebook authentication page when
        /// they try to hit the app url without a valid FB auth token.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not signed into FB.
        /// Expected:
        /// 1. User hits the FB App URL.
        /// 2. User is redirected to the FB auth page.
        /// 3. After login, app shows up in the IFrame.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnAuthenticatedAppAccess_Base()
        {
            g_Logger.StartTest("UnAuthenticatedAppAccess_Base");

            if (!UnAuthenticatedAccessCheck("http://apps.facebook.com/xblffdev"))
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Unauthorized access flow was not as expected. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }

        /// <summary>
        /// This test verifies that the user is redirected to the facebook authentication page when
        /// they try to hit the app PreLink page without a valid FB auth token.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not signed into FB.
        /// Expected:
        /// 1. User hits the FB App PreLink URL.
        /// 2. User is redirected to the FB auth page.
        /// 3. After login, app shows up in the IFrame.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnAuthenticatedAppAccess_PreLink()
        {
            g_Logger.StartTest("UnAuthenticatedAppAccess_PreLink");

            if (!UnAuthenticatedAccessCheck("http://games.dev.xbox.com/Facebook/FBWeb/PreLink"))
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Unauthorized access flow was not as expected. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }

        /// <summary>
        /// This test verifies that the user is redirected to the facebook authentication page when
        /// they try to hit the app ShowFriends page without a valid FB auth token.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not signed into FB.
        /// Expected:
        /// 1. User hits the FB App ShowFriends URL.
        /// 2. User is redirected to the FB auth page.
        /// 3. After login, app shows up in the IFrame.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnAuthenticatedAppAccess_ShowFriends()
        {
            g_Logger.StartTest("UnAuthenticatedAppAccess_PreLink");

            if (!UnAuthenticatedAccessCheck("http://games.dev.xbox.com/Facebook/FBWeb/ShowFriends"))
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Unauthorized access flow was not as expected. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }

        /// <summary>
        /// This test verifies that the user is redirected to the facebook authentication page when
        /// they try to hit the app LinkAccounts page without a valid FB auth token.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not signed into FB.
        /// Expected:
        /// 1. User hits the FB App LinkAccounts URL.
        /// 2. User is redirected to the FB auth page.
        /// 3. After login, app shows up in the IFrame.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnAuthenticatedAppAccess_LinkAccounts()
        {
            g_Logger.StartTest("UnAuthenticatedAppAccess_LinkAccounts");

            if (!UnAuthenticatedAccessCheck("http://games.dev.xbox.com/Facebook/FBWeb/LinkAccounts"))
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Unauthorized access flow was not as expected. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }

        /// <summary>
        /// This test verifies that the user is redirected to the facebook authentication page when
        /// they try to hit the app InviteFriends page without a valid FB auth token.
        /// </summary>
        /// <remarks>
        /// PreReqs:
        /// 1. User is not signed into FB.
        /// Expected:
        /// 1. User hits the FB App InviteFriends URL.
        /// 2. User is redirected to the FB auth page.
        /// 3. After login, app shows up in the IFrame.
        /// </remarks>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void UnAuthenticatedAppAccess_InviteFriends()
        {
            g_Logger.StartTest("UnAuthenticatedAppAccess_InviteFriends");

            if (!UnAuthenticatedAccessCheck("http://games.dev.xbox.com/Facebook/FBWeb/InviteFriends"))
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Unauthorized access flow was not as expected. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }
        #endregion

        /// <summary>
        /// This test verifies that you are redirected to the Pre Linking page
        /// if you do not have any linking.
        /// </summary>
        [TestMethod]
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        public void VerifyPreLinkPageRedirection()
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_LinkPageHeader = null;
            UITestControl m_AppIFrame = null;
            bool m_IsTestPassed = false;

            try
            {
                g_Logger.StartTest("VerifyPreLinkPageRedirection");

                //Launch Browser
                m_Browser = BrowserWindow.Launch();

                //Open Facebook, login and launch app
                DoFBLoginAndRedirectToApp(m_Browser,
                                          new FBCredentials()
                                          {
                                              Username = "userwithxuid@hotmail-int.com",
                                              Password = "FBPa$$w0rd"
                                          },
                                          true);

                //Get the App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                m_AppIFrame.Find();
                g_Logger.AddMessage("Application IFrame found on page.");

                //Check for Linking page
                m_LinkPageHeader = new UITestControl(m_AppIFrame);
                m_LinkPageHeader.TechnologyName = "Web";
                m_LinkPageHeader.SearchProperties.Add("id", "pageTitle");

                if (m_LinkPageHeader.Exists)
                {
                    m_LinkPageHeader.DrawHighlight();

                    if (m_LinkPageHeader.GetProperty("innertext").ToString() == "PreLink")
                    {
                        g_Logger.AddMessage("Pre-Link Page Header found. User has been redirected to pre-linking page as expected.");
                        m_IsTestPassed = true;
                    }
                    else
                    {
                        g_Logger.AddMessage("Pre-Link Page Header not found. User may not have been redirected to pre-linking page. Test failed!",
                            Logger.MessageType.Warning);
                    }
                }
                else
                {
                    g_Logger.AddMessage("Pre-Link Page Header not found. User may not have been redirected to pre-linking page. Test failed!",
                        Logger.MessageType.Warning);
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                g_Logger.AddException(Error, "An error occured.");
                m_IsTestPassed = false;
            }

            if (!m_IsTestPassed)
            {
                //Test Failed!!
                g_Logger.EndTest(Logger.TestOutcome.Fail);
                Assert.Fail("Pre-Link Page Header not found. User may not have been redirected to pre-linking page. Test failed!");
            }
            else
            {
                //Test Passed :)
                g_Logger.EndTest(Logger.TestOutcome.Pass);
            }
        }

        /// <summary>
        /// Checks that authenticated page access is redirected to the auth page
        /// and post login the app loads in an IFrame
        /// </summary>
        /// <param name="AppUrl">The application url to test.</param>
        /// <returns></returns>
        public bool UnAuthenticatedAccessCheck(string AppUrl)
        {
            BrowserWindow.CurrentBrowser = "ie";
            BrowserWindow m_Browser = null;
            UITestControl m_AppIFrame = null;
            bool m_IsTestPassed = false;

            try
            {
                //Launch Browser and access app
                m_Browser = BrowserWindow.Launch(new Uri(AppUrl));
                g_Logger.AddMessage("Browser navigated to '" + AppUrl + "'");

                //Perform FB login
                DoFBAppLogin(m_Browser,
                             new FBCredentials()
                             {
                                 Username = "userwithxuid@hotmail-int.com",
                                 Password = "FBPa$$w0rd"
                             },
                             "XBL Friend Linker");
                g_Logger.AddMessage("User was redirected to Facebook Auth page as expected.");

                //Look for App IFrame
                m_AppIFrame = new UITestControl(m_Browser.CurrentDocumentWindow);
                m_AppIFrame.TechnologyName = "Web";
                m_AppIFrame.SearchProperties.Add(HtmlProperties.Frame.ControlType, ControlType.Frame.Name,
                                                 HtmlProperties.Frame.Name, "iframe_canvas");

                if (m_AppIFrame.Exists)
                {
                    g_Logger.AddMessage("The app IFrame was found as expected. Test passed!");
                    m_IsTestPassed = true;
                }
                else
                {
                    g_Logger.AddMessage("The app IFrame was not found. Test failed!",
                        Logger.MessageType.Warning);
                }

                //Logout
                FBLoginUI.DoUIFacebookLogout(m_Browser);
                //Wait till the Facebook Logout completes.
                while (!m_Browser.Title.StartsWith("Welcome to Facebook!")) { }
                m_Browser.Close();
            }
            catch (Exception Error)
            {
                Exception m_Error = new Exception(Error.Message)
                {
                    Source = Error.Source,
                };

                g_Logger.AddException(m_Error, "An error occured.");
                m_IsTestPassed = false;
                m_Browser.Close();
            }
            finally
            { }

            return m_IsTestPassed;
        }

        /// <summary>
        /// Performs Facebook login actions with the specified credentials
        /// and optionally redirects to the application page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="RedirectToApp">Specifies whether to redirect to the application page.</param>
        public void DoFBLoginAndRedirectToApp(BrowserWindow BrowserHandle, FBCredentials LoginCredentials, bool RedirectToApp)
        {
            DoFBLoginAndRedirectToApp(BrowserHandle, LoginCredentials, RedirectToApp, false);
        }

        /// <summary>
        /// Performs Facebook login actions with the specified credentials and persistent mode
        /// and optionally redirects to the application page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="RedirectToApp">Specifies whether to redirect to the application page.</param>
        /// <param name="DoPersistedLogin">Indicates whether to perform a persisted login.</param>
        public void DoFBLoginAndRedirectToApp(BrowserWindow BrowserHandle, FBCredentials LoginCredentials,
            bool RedirectToApp, bool DoPersistedLogin)
        {
            //Open the Facebook site.
            BrowserHandle.NavigateToUrl(new Uri("http://www.facebook.com"));
            g_Logger.AddMessage("Browser window successfully navigated to 'http://www.facebook.com'");

            g_Logger.AddMessage("Performing Facebook login.");
            FBLoginUI.DoUIFacebookLogin(BrowserHandle, LoginCredentials, DoPersistedLogin);
            g_Logger.AddMessage("Successfully logged in to Facebook.");
            if(DoPersistedLogin)
                g_Logger.AddMessage("Persisted Login mode: ON.");
            else
                g_Logger.AddMessage("Persisted Login mode: OFF.");

            //Wait till the Facebook Login completed and the home page opens.
            while (!BrowserHandle.Title.StartsWith("Facebook | Home")) { }

            //Navigate to Application (if required)
            if (RedirectToApp)
            {
                BrowserHandle.NavigateToUrl(new Uri("http://apps.facebook.com/xblffdev"));
                g_Logger.AddMessage("Browser successfully navigated to app: http://apps.facebook.com/xblffdev");
            }
        }

        /// <summary>
        /// Performs Facebook login actions with the specified credentials on the
        /// Application login page.
        /// </summary>
        /// <param name="BrowserHandle">The handle to the browser window.</param>
        /// <param name="LoginCredentials">The credentials to use to login to Facebook.</param>
        /// <param name="AppTitle">The title of the facebook app. This will be the browser title when logged in.</param>
        public void DoFBAppLogin(BrowserWindow BrowserHandle, FBCredentials LoginCredentials, string AppTitle)
        {
            g_Logger.AddMessage("Performing Facebook login.");
            FBLoginUI.DoUIFacebookLogin(BrowserHandle, LoginCredentials, false);
            g_Logger.AddMessage("Successfully logged in to Facebook.");

            //Wait till the Facebook Login completed and the app page opens.
            while (!BrowserHandle.Title.StartsWith(AppTitle)) { }
        }

        /// <summary>
        /// Creates the specified Passport User.
        /// </summary>
        /// <param name="UserName">The username of the passport user.</param>
        /// <param name="Password">The password for the specified username.</param>
        public void CreatePassportUser(ref string UserName, ref string Password)
        {
            PassportInterface m_PassportInterface = new PassportInterface(Clusters.INT);
            PassportUser m_PassportUser = new PassportUser(Markets.en_US, Domains.Hotmail);
            m_PassportInterface.CreateUser(m_PassportUser);
            UserName = m_PassportUser.MemberName;
            Password = m_PassportUser.Password;

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\IdentityTestService\IdentityTestService\Global.asax.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Web.Security;
using System.Web.SessionState;
using System.Diagnostics;
using Leet.Identity;
using Leet.Identity.ActiveAuth;
using Leet.Core.IO;
using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Live.Livecache.DataAccess;
using xonline.common.webplatform.livecache;

namespace Test.Identity.Functional.IdentityTestService
{
    public class Global : System.Web.HttpApplication
    {
        protected void Application_Start(object sender, EventArgs e)
        {
            try
            {
                Leet.Core.IoCCo.Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
                Leet.Core.IoCCo.Container.Instance.AddService<IConfigurationProvider, NpdbConfigurationProvider>();
                ((NpdbConfigurationProvider)Container.Instance.GetComponent<IConfigurationProvider>()).Initialize("LEET", "IdentityTestService_www");
                Leet.Core.IoCCo.Container.Instance.AddEmulatableService<IXCacheDataAccess, XCacheDataAccess>();
                Leet.Core.IoCCo.Container.Instance.AddEmulatableService<ILcXCache, LcXCache>();
                Leet.Core.IoCCo.Container.Instance.AddService<IPpsaCredentialProvider, PpsaCredentialProvider>();
                Leet.Identity.ActiveAuth.AuthenticationManager.RegisterWithIocContainer(Leet.Core.IoCCo.Container.Instance);
            }
            catch (Exception ex)
            {
                EventLog.WriteEntry("w3wp", "Exception found while adding and registering services\n" + ex.ToString(), EventLogEntryType.Warning, 58589);
            }
        }

        protected void Application_Error(object sender, EventArgs e)
        {
            Exception exc = Server.GetLastError();
            EventLog.WriteEntry("w3wp", "IdentityTestService Error - Last Error: " + exc.ToString(), EventLogEntryType.Warning, 88588);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\FBRenoApp\UI\RenoWebAppUI\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IdentityTest")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("MSIT")]
//[assembly: AssemblyProduct("IdentityTest")]
//[assembly: AssemblyCopyright("Copyright © MSIT 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("ad0ee1cc-47a4-443d-91e9-ce5c5a61f4cf")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\IdentityTestService\IdentityTestService\IdentityTestHelper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Leet.Core.IoCCo;
using Leet.Core.IO;
using Leet.Core.Configuration;
using Leet.Identity;
using Leet.Identity.ActiveAuth;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Test.Identity.Functional.IdentityTestService
{
    /// <summary>
    /// Summary description for ActiveAuthTests
    /// </summary>
    public class IdentityTestHelper
    {
        #region Global Members
        string g_ServiceDirectory = "";
        static string[] g_ProxyBypass = { ".microsoft.com", ".xbox.com", ".xboxlive.com" };
        
        #endregion

        public IdentityTestHelper(string dir)
        {
            g_ServiceDirectory = dir;
        }

        public IdentityTestServiceResponse GetCidFromActiveAuth()
        {
            long cid = 0;
            IdentityTestServiceResponse responseObject = new IdentityTestServiceResponse();
            StringBuilder m_DebugInfo = new StringBuilder();
            try
            {
                m_DebugInfo.Append("Creating the IAuthenticationManager object to retrieve the current user's Cid:  ");

                 IAuthenticationManager aaAuthMgr = Container.Instance.GetComponent<IAuthenticationManager>();
                
                if (aaAuthMgr.IsAuthenticated)
                {
                    m_DebugInfo.Append("...IAuthenticationManager: User authenticated  ");
                    IUserIdentity user = aaAuthMgr.CurrentUser;
                    m_DebugInfo.Append("...ActiveAuthManager returned Cid: " + user.Cid + "  ");
                    cid = user.Cid;
                }
                else
                {
                    m_DebugInfo.Append("User not authenticated as expected! Could not return Cid.  ");
                    m_DebugInfo.Append("Test failed!  ");
                }
                
            }
            catch (Exception m_Error)
            {
                m_DebugInfo.Append("An error occured while fetching Profile data:  ");
                m_DebugInfo.Append(m_Error.ToString() + "  ");
            }
            responseObject.Value = cid.ToString();
            responseObject.DebugInfo = m_DebugInfo.ToString();
            return responseObject;
        }

        public IdentityTestServiceResponse GetPuidFromActiveAuth()
        {
            long puid = 0;
            IdentityTestServiceResponse responseObject = new IdentityTestServiceResponse();
            StringBuilder m_DebugInfo = new StringBuilder();
            
            try
            {
                m_DebugInfo.Append("Creating the IAuthenticationManager object to retrieve the current user's Puid:  ");

                IAuthenticationManager aaAuthMgr = Container.Instance.GetComponent<IAuthenticationManager>();

                if (aaAuthMgr.IsAuthenticated)
                {
                    m_DebugInfo.Append("...IAuthenticationManager: User authenticated  ");
                    IUserIdentity user = aaAuthMgr.CurrentUser;
                    m_DebugInfo.Append("...ActiveAuthManager returned Puid: " + user.Puid + "  ");
                    puid = user.Puid;
                }
                else
                {
                    m_DebugInfo.Append("User not authenticated as expected! Could not return Puid.  ");
                    m_DebugInfo.Append("Test failed!  ");
                }

            }
            catch (Exception m_Error)
            {
                m_DebugInfo.Append("An error occured while fetching Profile data:  ");
                m_DebugInfo.Append(m_Error.ToString() + "  ");
            }
            responseObject.Value = puid.ToString();
            responseObject.DebugInfo = m_DebugInfo.ToString();
            return responseObject;
        }

        public IdentityTestServiceResponse GetXuidFromActiveAuth()
        {
            ulong xuid = 0;
            IdentityTestServiceResponse responseObject = new IdentityTestServiceResponse();
            StringBuilder m_DebugInfo = new StringBuilder();

            try
            {
                m_DebugInfo.Append("Creating the IAuthenticationManager object to retrieve the current user's Xuid:  ");

                IAuthenticationManager aaAuthMgr = Container.Instance.GetComponent<IAuthenticationManager>();

                if (aaAuthMgr.IsAuthenticated)
                {
                    m_DebugInfo.Append("...IAuthenticationManager: User authenticated  ");
                    IUserIdentity user = aaAuthMgr.CurrentUser;
                    m_DebugInfo.Append("...ActiveAuthManager returned Xuid: " + user.Xuid + "  ");
                    xuid = user.Xuid;
                }
                else
                {
                    m_DebugInfo.Append("User not authenticated as expected! Could not return Xuid.  ");
                    m_DebugInfo.Append("Test failed!  ");
                }

            }
            catch (Exception m_Error)
            {
                m_DebugInfo.Append("An error occured while fetching Profile data:  ");
                m_DebugInfo.Append(m_Error.ToString() + "  ");
            }
            responseObject.Value = xuid.ToString();
            responseObject.DebugInfo = m_DebugInfo.ToString();
            return responseObject;
        }

        /// <summary>
        /// Gets list of Puids using using batch call IdentityManager.GetPuidFromEmailAddresses.
        /// </summary>
        /// <param name="Emails">Comma delimited list of email addresses.</param>
        /// <returns>IdentityTestServiceResponse object containing debug string and semi-colon delimitted string of email/puid pairs.</returns>
		public IdentityTestServiceResponse GetPuidsFromIdentityManager(string Emails)
		{
			StringBuilder m_DebugInfo = new StringBuilder();
			IdentityTestServiceResponse response = new IdentityTestServiceResponse();
			//long puid = 0;
			Dictionary<string, long> listOfPuids = new Dictionary<string,long>();
			string emailPuidPairs = "";

			m_DebugInfo.Append("Calling IdentityManager.GetPuidFromEmailAddress().");
			m_DebugInfo.Append("... Emails argument:  " + Emails + "  ");
			try
			{
				listOfPuids = (Dictionary<string,long>) IdentityManager.GetPuidFromEmailAddresses(Emails);
				emailPuidPairs = GetStringOfEmailPuidPairs(listOfPuids);
				m_DebugInfo.Append("Retrieved list of puids from GetPuidFromEmailAddresses with count " + listOfPuids.Count + ".");
			}
			catch (Exception m_Error)
			{
				m_DebugInfo.Append("An error occurred while Calling GetPuidFromEmailAddress: ");
				m_DebugInfo.Append(m_Error.ToString());
			}
			response.DebugInfo = m_DebugInfo.ToString();
			response.Value = emailPuidPairs;
			return response;
		}

		/// <summary>
		/// Gets single Puid using IdentityManager.GetPuidFromEmailAddress.
		/// </summary>
		/// <param name="Emails">Single email address.</param>
		/// <returns>IdentityTestServiceResponse object with debug string and a puid of long type.</returns>
		public IdentityTestServiceResponse GetSinglePuidFromIdentityManager(string Email)
		{
			StringBuilder m_DebugInfo = new StringBuilder();
			IdentityTestServiceResponse response = new IdentityTestServiceResponse();
			long puid = 0;


			m_DebugInfo.Append("Calling IdentityManager.GetPuidFromEmailAddress().");
			m_DebugInfo.Append("... Emails argument:  " + Email + "  ");
			try
			{
				puid = IdentityManager.GetPuidFromEmailAddress(Email);
				m_DebugInfo.Append("... Return value from GetPuidFromEmailAddress():  " + puid + "  ");
			}
			catch (Exception m_Error)
			{
				m_DebugInfo.Append("An error occurred while Calling GetPuidFromEmailAddress: ");
				m_DebugInfo.Append(m_Error.ToString());
			}
			response.DebugInfo = m_DebugInfo.ToString();
			response.Value = puid;
			return response;
		}

		/// <summary>
		/// Takes a Dictionary<string,long> object and converts it to a semi-colon delimitted string with each email/puid pair separated by a comma
		/// </summary>
		/// <param name="Emails">Dictionary of puids with email as key.</param>
		/// <returns>Semi-colon delimitted string of Email,Puid pairs.</returns>
		private string GetStringOfEmailPuidPairs(Dictionary<string, long> dict)
		{
			string emailsAndPuids = "";
			bool first = true;
			foreach(string key in dict.Keys)
			{
				if (!first)
					emailsAndPuids += ";";
				else
					first = false;
				emailsAndPuids += key + "," + dict[key].ToString();
			}
			return emailsAndPuids;
		}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\IdentityTestService\IdentityTestService\IdentityTestService.asmx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;
using Leet.Core.IoCCo;
using Leet.Core.IO;
using Leet.Core.Configuration;
using Leet.Identity.ActiveAuth;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Providers;
using Leet.Live.Livecache.DataAccess;
using xonline.common.webplatform.livecache;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
//using Leet.Identity;

namespace Test.Identity.Functional.IdentityTestService
{
    /// <summary>
    /// Summary description for ActiveAuthTestService
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class ActiveAuthTestService : System.Web.Services.WebService
    {
       
        [WebMethod]
        public  IdentityTestServiceResponse GetActiveAuthCid()
        {
            string path = Server.MapPath("");
            IdentityTestHelper aaTests = new IdentityTestHelper(path);
            return aaTests.GetCidFromActiveAuth();
        }

        [WebMethod]
        public IdentityTestServiceResponse GetActiveAuthPuid()
        {
            string path = Server.MapPath("");
            IdentityTestHelper aaTests = new IdentityTestHelper(path);
            return aaTests.GetPuidFromActiveAuth();
        }

        [WebMethod]
        public IdentityTestServiceResponse GetActiveAuthXuid()
        {
            string path = Server.MapPath("");
            IdentityTestHelper aaTests = new IdentityTestHelper(path);
            return aaTests.GetXuidFromActiveAuth();
        }

        [WebMethod]
        public IdentityTestServiceResponse GetPuidsFromEmails(string Emails, bool UseBatchMethod)
        {
            string path = Server.MapPath("");
            IdentityTestServiceResponse response;
            IdentityTestHelper aaTests = new IdentityTestHelper(path);
            if (UseBatchMethod)
            {
                response = aaTests.GetPuidsFromIdentityManager(Emails);
            }
            else
            {
                response = aaTests.GetSinglePuidFromIdentityManager(Emails);
            }
            return response;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\IdentityTestService\IdentityTestService\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IdentityTestService")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("IdentityTestService")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\Default.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Test.Identity.Functional.IdentityTestSite
{
	public partial class _Default : System.Web.UI.Page
	{
		protected void Page_Load(object sender, EventArgs e)
		{
			ProfileAPITests profileAPITests = new ProfileAPITests();
			IdentityAPITests identityAPITests = new IdentityAPITests();
			lblOutput.Text = profileAPITests.VerifyCoreProfileFieldsPopulateWithCorrectData().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + profileAPITests.VerifyFriendsListPopulatesWithCorrectData().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIdentityModuleLoginUrl().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIdentityModuleTextTag().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityCid().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityGamertag().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityTier().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityXuid().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyCreatedIUserIdentityByPuid().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityCreationByIdentityKey().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityEqualsWorksWithIdentityKeyCreation().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityEqualsWillTreatXuidAsPrimaryIdentifier().Replace(Environment.NewLine, "<br>");
			lblOutput.Text += "<br><br>" + identityAPITests.VerifyIUserIdentityEqualsWillTreatPuidAsPrimaryIdentifierIfEitherXuidIsZero().Replace(Environment.NewLine, "<br>");
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\IdentityTestResult.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Leet.Identity;

namespace Test.Identity.Functional.IdentityTestSite
{
	public class IdentityTestResult
	{
		public string SignInUrl { get; set; }
		public string SignOutUrl { get; set; }
		public string SignInTag { get; set; }
		public string SignOutTag { get; set; }
		public string Puid { get; set; }
        public long Cid { get; set; }
        public ulong Xuid { get; set; }
        public string Tier { get; set; }
        public string Gamertag { get; set; }
        public bool IsAuthenticated { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\ProfileTestResult.cs ===
﻿using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Test.Identity.Functional.IdentityTestSite
{
	[DataContract(Namespace = "")]
	public class ProfileTestResult : Leet.UserGameData.DataContracts.Profile
	{
		[DataMember]
		public string Puid { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\Default.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Identity.Functional.IdentityTestSite {
    
    
    public partial class _Default {
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
        
        /// <summary>
        /// lblOutput control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblOutput;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\ProfileAPITests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Web;
using Leet.Core.IoCCo;
using Leet.Identity;
using Leet.Identity.WindowsLiveAuth;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Profile;
using Leet.UserGameData.DataContracts;
using Test.Common.Library.UnifiedLogger;

namespace Test.Identity.Functional.IdentityTestSite
{
	/// <summary>
	/// Summary description for ProfileAPI
	/// </summary>
	public class ProfileAPITests
	{
		public ProfileAPITests()
		{
			logger = new Logger(Logger.LoggingType.Text | Logger.LoggingType.TRX | Logger.LoggingType.WTT, HttpContext.Current.Server.MapPath("~/TestLogs"), "");
			LoadData();
		}

		Logger logger;
		public Logger UnifiedLogger
		{
			get { return logger; }
			set { logger = value; }
		}

		Dictionary<string, ProfileTestResult> results;

		void LoadData()
		{
			results = new Dictionary<string, ProfileTestResult>();

			string filePath = (HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/ResultsXML/ProfileTestResults.xml") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\ResultsXML\ProfileTestResults.xml").Substring("file:/".Length));

			List<ProfileTestResult> list = (List<ProfileTestResult>)TestHelpers.LoadDataContract(typeof(List<ProfileTestResult>), filePath);

			foreach (ProfileTestResult res in list)
			{
				results.Add(res.Puid, res);
			}
		}
		
		public string VerifyCoreProfileFieldsPopulateWithCorrectData()
		{
			string output = "";
			Logger.TestOutcome outcome = Logger.TestOutcome.Pass;
			ProfileTestResult result;

			IWindowsLiveIdentity wlid = Container.Instance.GetComponent<IWindowsLiveIdentity>();
			try
			{
				UnifiedLogger.StartTest("VerifyCoreProfileFieldsPopulateWithCorrectData");

				result = results[wlid.Puid.ToString()];

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();

				IUserIdentity ident = wsAuthMgr.CurrentUser;

				ProfileProvider provider = new ProfileProvider();
				bool partialResult = true;
				long sectionFlags = result.SectionFlags;
                                IReadOnlyFriendInfo[] friendsInfoList = null;
				object data = provider.GetProfile(ident, "en-US", sectionFlags, out friendsInfoList, out partialResult);

				string message = "Profile.GetType(): " + data.GetType() + " - Expected: " + typeof(Profile);
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				if (typeof(Profile) != data.GetType())
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				if (data is Profile)
				{
					message = "Profile.ProfileProperties[ProfileProperty.WindowsLiveDisplayName]: " + ((Profile)data).ProfileProperties[ProfileProperty.WindowsLiveDisplayName] + " - Expected: " + result.ProfileProperties[ProfileProperty.WindowsLiveDisplayName];
					UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
					output += Environment.NewLine + message;
					if (result.ProfileProperties[ProfileProperty.WindowsLiveDisplayName] != ((Profile)data).ProfileProperties[ProfileProperty.WindowsLiveDisplayName])
					{
						outcome = Logger.TestOutcome.Fail;
						output += " - Failed!";
					}
					message = "Profile.ProfileProperties[ProfileProperty.WindowsLiveDisplayImageUrl]: " + ((Profile)data).ProfileProperties[ProfileProperty.WindowsLiveDisplayImageUrl] + " - Expected: " + result.ProfileProperties[ProfileProperty.WindowsLiveDisplayImageUrl];
					UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
					output += Environment.NewLine + message;
					if (result.ProfileProperties[ProfileProperty.WindowsLiveDisplayImageUrl] != ((Profile)data).ProfileProperties[ProfileProperty.WindowsLiveDisplayImageUrl])
					{
						outcome = Logger.TestOutcome.Fail;
						output += " - Failed!";
					}
					message = "Profile.SectionFlags: " + ((Profile)data).SectionFlags + " - Expected: " + result.SectionFlags;
					UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
					output += Environment.NewLine + message;
					if (result.SectionFlags != ((Profile)data).SectionFlags)
					{
						outcome = Logger.TestOutcome.Fail;
						output += " - Failed!";
					}
				}
				logger.EndTest(outcome);
				output += Environment.NewLine + outcome.ToString(); 
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + wlid.Puid.ToString() + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				logger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		public string VerifyFriendsListPopulatesWithCorrectData()
		{
			string output = "";
			Logger.TestOutcome outcome = Logger.TestOutcome.Pass;
			ProfileTestResult result;

			Leet.Identity.WindowsLiveAuth.IWindowsLiveIdentity wlid = Leet.Core.IoCCo.Container.Instance.GetComponent<Leet.Identity.WindowsLiveAuth.IWindowsLiveIdentity>();

			try
			{
				UnifiedLogger.StartTest("VerifyFriendsListPopulatesWithCorrectData");

				result = results[wlid.Puid.ToString()];

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();

				IUserIdentity ident = wsAuthMgr.CurrentUser;
				output += Environment.NewLine + "Puid: " + ident.Puid;

				ProfileProvider provider = new ProfileProvider();
				bool partialResult = true;
				long sectionFlags = result.SectionFlags;
                                IReadOnlyFriendInfo[] friendsInfoList = null;
				Profile data = provider.GetProfile(ident, "en-US", sectionFlags, out friendsInfoList, out partialResult);

				if (data is Profile)
				{
					string message = "Profile.Friends.Count: " + data.Friends.Count.ToString() + " - Expected: " + result.Friends.Count.ToString();
					if (data.Friends.Count != result.Friends.Count)
					{
						outcome = Logger.TestOutcome.Fail;
						message += " - Failed!";
					}
					UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
					output += Environment.NewLine + message;
				}
				
				logger.EndTest(outcome);
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message="Missing Key: " + wlid.Puid.ToString() + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				logger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\Global.asax.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.SessionState;
using Leet.Core.IoCCo;
using Leet.Profile;
using Leet.Profile.Proxies;
using Leet.Core.IO;
using Leet.Core.Configuration;
using Leet.Live.Livecache.Providers;
using xonline.common.webplatform.livecache;
using Leet.Live.Livecache.Account;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache;

namespace Test.Identity.Functional.IdentityTestSite
{
	public class Global : System.Web.HttpApplication
	{

		protected void Application_Start(object sender, EventArgs e)
		{

			Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
			Container.Instance.AddService<IFileSystem, FileSystem>();

			//Container.Instance.AddService<IConfigurationProvider, AppSettingsConfigurationProvider>();
            Container.Instance.AddService<Leet.Core.TestSupport.ITestImplementationProvider, Leet.Core.TestSupport.TestImplementationProvider>();
			ConfigurationSelector.RegisterProvider("identitytestsite", "LEET");

			Leet.Profile.ProfileProvider.RegisterWithIocContainer(Container.Instance, "liveweb_www");
			Leet.Identity.WindowsLiveAuth.AuthenticationManager.RegisterWithIocContainer(Container.Instance);
			
			//Update this line when the call actually works.
			Leet.Live.Livecache.LeetLivecacheClient.RegisterWebInterfacesAndInitialize("liveweb_www");
			//RegisterServiceInterfacesAndInitialize("liveweb_www");
		}

		protected void Session_Start(object sender, EventArgs e)
		{

		}

		protected void Application_BeginRequest(object sender, EventArgs e)
		{

		}

		protected void Application_AuthenticateRequest(object sender, EventArgs e)
		{

		}

		protected void Application_Error(object sender, EventArgs e)
		{

		}

		protected void Session_End(object sender, EventArgs e)
		{

		}

		protected void Application_End(object sender, EventArgs e)
		{

		}

		#region LiveCache Interface Registration (LiveCacheClient should be doing this)
		private void RegisterServiceInterfacesAndInitialize(string componentName)
		{
			Container.Instance.AddService<ILivecacheClientIdentifierProvider, XboxcomLivecacheClientIdentifierProvider>();
			Container.Instance.AddService<ILocalLivecacheContextProvider, LocalLivecacheContextProvider>();
			Container.Instance.AddService<ILivecacheLocaleProvider, DefaultLivecacheLocaleProvider>();

			// TODO:  Replace IContextItemProvider with a proper cache object once we know what that is.
			// For now, we'll use a null cache object to unblock further dev work.
			Container.Instance.AddService<IContextItemProvider, NullContextItemProvider>();
			Container.Instance.AddService<ILocalLivecacheContext, DefaultLocalLivecacheContext>();

			Container.Instance.AddService<ILivecacheLoggerProvider, LivecacheLoggerProvider>();
			Container.Instance.AddService<ILivecacheLogger, LivecacheLogger>();

			// TODO:  Replace these with final implementations of the objects once Leet.Authentication refactoring is completed
			Container.Instance.AddService<IAccountAuthDataProvider, AnonymousAuthDataProvider>();
			Container.Instance.AddService<ILcAuthManager, AnonymousLcAuthManager>();

			RegisterDataAccessInterfaces();
			Initialize(componentName);
		}

		private void RegisterDataAccessInterfaces()
		{
			Container.Instance.AddService<IXCacheDataAccess, XCacheDataAccess>();
			Container.Instance.AddService<ILcXCache, LcXCache>();

			Container.Instance.AddService<IPresenceDataAccess, PresenceDataAccess>();
			Container.Instance.AddService<ILcPresence, LcPresenceAdapter>();

			Container.Instance.AddService<IAccountCreationDataAccess, AccountCreationDataAccess>();
			Container.Instance.AddService<ILcAccountCreation, LcAccountCreationAdapter>();

			Container.Instance.AddService<IAchievementDataAccess, AchievementDataAccess>();
			Container.Instance.AddService<ILcAchievement, LcAchievementAdapter>();

			Container.Instance.AddService<ISettingsDataAccess, SettingsDataAccess>();
			Container.Instance.AddService<ILcStats, LcStatsAdapter>();
		}

		private static void Initialize(string componentName)
		{
			Container.Instance.GetComponent<ILivecacheLoggerProvider>().RegisterLogger(componentName);
			Container.Instance.GetComponent<ILocalLivecacheContextProvider>().RegisterLocalContext();
			Container.Instance.GetComponent<ILivecacheLocaleProvider>().RegisterLocaleHandler();
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\IdentityAPITests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Web;
using Leet.Core.IoCCo;
using Leet.Identity;
using Leet.Identity.WindowsLiveAuth;
using Test.Common.Library.UnifiedLogger;

namespace Test.Identity.Functional.IdentityTestSite
{
	public class IdentityAPITests
	{
		public IdentityAPITests()
		{
			logger = new Logger(Logger.LoggingType.Text | Logger.LoggingType.TRX | Logger.LoggingType.WTT, HttpContext.Current.Server.MapPath("~/TestLogs"), "");
			LoadData();
		}

		Dictionary<string, IdentityTestResult> results;
		Logger logger;
		public Logger UnifiedLogger
		{
			get { return logger; }
			set { logger = value; }
		}

		/// <summary>
		/// Verifies that the Identity Module returns the proper Login URL
		/// </summary>
		/// <returns>Test result output</returns>
		public string VerifyIdentityModuleLoginUrl()
		{
			string output = "";
			string puid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIdentityModuleLoginUrl");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;
				IWindowsLiveIdentityAdapter wlid = Container.Instance.GetComponent<IWindowsLiveIdentityAdapter>();
				string message = "IdentityType: " + wlid.GetType();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				message = "WebsiteAuthenticationManager.GetLogOnLogOffUrl(): " + wsAuthMgr.GetLogOnLogOffUrl();
				puid = wsAuthMgr.CurrentUser.Puid.ToString();
				IdentityTestResult result = results[puid];
				switch (wsAuthMgr.IsAuthenticated)
				{
					case true:
						message += " - Expected: " + result.SignOutUrl;
						if (wsAuthMgr.GetLogOnLogOffUrl() != result.SignOutUrl)
						{
							outcome = Logger.TestOutcome.Fail;
							message += " - Failed!";
						}
						break;
					case false:
						message += " - Expected: " + result.SignInUrl;
						if (wsAuthMgr.GetLogOnLogOffUrl() != result.SignInUrl)
						{
							outcome = Logger.TestOutcome.Fail;
							message += " - Failed!";
						}
						break;
				}
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;

				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Verifies that the Identity Module returns the proper TextTag for Login/Logout
		/// </summary>
		/// <returns>Test result output</returns>
		public string VerifyIdentityModuleTextTag()
		{
			string output = "";
			string puid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIdentityModuleTextTag");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;
				IWindowsLiveIdentityAdapter wlid = Container.Instance.GetComponent<IWindowsLiveIdentityAdapter>();
				string message = "IdentityType: " + wlid.GetType();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				message = "WebsiteAuthenticationManager.GetTextLinkForLoggingOnOrOff(): " + wsAuthMgr.GetTextLinkForLoggingOnOrOff();
				puid = wsAuthMgr.CurrentUser.Puid.ToString();
				IdentityTestResult result = results[puid];
				switch (wsAuthMgr.IsAuthenticated)
				{
					case true:
						message += " - Expected: " + result.SignOutTag;
						if (wsAuthMgr.GetTextLinkForLoggingOnOrOff() != result.SignOutTag)
						{
							outcome = Logger.TestOutcome.Fail;
							message += " - Failed!";
						}
						break;
					case false:
						message += " - Expected: " + result.SignInTag;
						if (wsAuthMgr.GetTextLinkForLoggingOnOrOff() != result.SignInTag)
						{
							outcome = Logger.TestOutcome.Fail;
							message += " - Failed!";
						}
						break;
				}
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Summary description for VerifyUserIdentityGamertag
		/// Validates that the current user Gamertag as pulled from IUserIndentity module is the expected Gamertag
		/// </summary>
		public string VerifyIUserIdentityGamertag()
		{
			string output = "";
			string puid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityGamertag: Verirfies the the Gamertag from the IUserIdentity module matches that of the logged in user.");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CurrentUser;
				puid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[puid];
				string message = "Expected Gamertag: " + result.Gamertag + "Gamertag returned by IUserIdentity: " + wsUserIdentity.Gamertag;
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;

				if (wsUserIdentity.Gamertag != result.Gamertag)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Summary description for VerifyUserIdentityCid
		/// Validates that the current user Cid as pulled from IUserIndentity module matches the expected Cid
		/// </summary>
		public string VerifyIUserIdentityCid()
		{
			string output = "";

			string puid = "";

			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityCid: Validates that the Cid from the IUserIdentity Module matches the current user's Cid.");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CurrentUser;
				puid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[puid];
				string message = "Expected Cid: " + result.Cid.ToString() + "Cid returned by IUserIdentity: " + wsUserIdentity.Cid.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;

				if (wsUserIdentity.Cid != result.Cid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Summary description for VerifyUserIdentityXuid
		/// Validates that the current user Xuid as pulled from IUserIndentity module matches the expected Xuid
		/// </summary>
		public string VerifyIUserIdentityXuid()
		{
			string output = "";
			string puid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityXuid: Validates that the Xuid from the IUserIdentity Module matches the current user's Xuid.");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CurrentUser;
				puid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[puid];
				string message = "Expected Xuid: " + result.Xuid.ToString() + "Xuid returned by IUserIdentity: " + wsUserIdentity.Xuid.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;

				if (wsUserIdentity.Xuid != result.Xuid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Summary description for VerifyUserIdentityTier
		/// Validates that the current user Subscription Tier as pulled from IUserIndentity module matches the expected Subscription Tier
		/// </summary>
		public string VerifyIUserIdentityTier()
		{
			string output = "";
			string puid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityTier: Validates that the Subscription Tier from the IUserIdentity Module matches the current user's Subscription Tier.");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CurrentUser;
				puid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[puid];
				string message = Environment.NewLine + "Expected Tier: " + result.Tier.ToString() + "Tier returned by IUserIdentity: " + wsUserIdentity.Tier.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = message;

				if (wsUserIdentity.Tier.ToString() != result.Tier.ToString())
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + puid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Validates that the constructed user (based on PUID) returns the correct XBoxLive details (Xuid, Gamertag, Tier)
		/// </summary>
		public string VerifyCreatedIUserIdentityByPuid()
		{
			string output = "";
			long puid = 985160277151233;
			string strPuid = puid.ToString();
			try
			{
				UnifiedLogger.StartTest("VerifyCreatedIUserIdentityByPuid");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CreateUserIdentityFromPuid(puid);
				IdentityTestResult result = results[strPuid];
				
				string message = "IUserIdentity.Xuid: " + wsUserIdentity.Xuid + " - Expected Result: " + result.Xuid.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = message;
				if (wsUserIdentity.Xuid != result.Xuid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = Environment.NewLine + "IUserIdentity.Gamertag: " + wsUserIdentity.Gamertag + " - Expected Result: " + result.Gamertag;
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				if (wsUserIdentity.Gamertag != result.Gamertag)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = Environment.NewLine + "IUserIdentity.Tier: " + wsUserIdentity.Tier.ToString() + " - Expected Result: " + result.Tier.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				if (wsUserIdentity.Tier.ToString() != result.Tier.ToString())
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + strPuid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Takes in an IdentityKey and verifies that Puid, Xuid, and Cid are properly parsed.
		/// </summary>
		/// <returns>Output of Test Results</returns>
		public string VerifyIUserIdentityCreationByIdentityKey()
		{
			string output = "";
			string identityKey = "00093CF3CF3D608A00037FFF805DCE01A4BFCF180DBACBEC";
			string strPuid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityCreationByIdentityKey");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CreateUserIdentityFromKey(identityKey);
				strPuid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[strPuid];

				string message = "IUserIdentity.Xuid: " + wsUserIdentity.Xuid + " - Expected Result: " + result.Xuid.ToString();
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = message;
				if (wsUserIdentity.Xuid != result.Xuid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = Environment.NewLine + "IUserIdentity.Puid: " + wsUserIdentity.Puid + " - Expected Result: " + result.Puid;
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				if (wsUserIdentity.Puid.ToString() != result.Puid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = Environment.NewLine + "IUserIdentity.Cid: " + wsUserIdentity.Cid + " - Expected Result: " + result.Cid;
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += message;
				if (wsUserIdentity.Cid != result.Cid)
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + strPuid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Takes in IdentityKey and verifies that .Equals, == and != properly return against a known good. If VerifyIUserIdentityCreationByIdentityKey fails, this test is invalid.
		/// </summary>
		/// <returns>Output of Test Results</returns>
		public string VerifyIUserIdentityEqualsWorksWithIdentityKeyCreation()
		{
			string output = "";
			string identityKey = "00093CF3CF3D608A00037FFF805DCE010000000000000000";
			string strPuid = "";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityEqualsWorksWithIdentityKeyCreation");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CreateUserIdentityFromKey(identityKey);
				strPuid = wsUserIdentity.Puid.ToString();
				IdentityTestResult result = results[strPuid];

				string message = "IUserIdentity.Equals: " + wsUserIdentity.Equals(result) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = "VerifyIUserIdentityEqualsWorksWithIdentityKeyCreation" + Environment.NewLine + message;
				if (wsUserIdentity.Equals(result) == false) //Yes, I know this looks weird, but since we're dealing with overloaded == and != I don't want to use !wsUserIdentity.Equals()
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed! (" + wsUserIdentity.Xuid + " - " + result.Xuid + ")";
				}

				message = "IUserIdentity ==: " + (wsUserIdentity == result) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity == result) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = "IUserIdentity !=: " + (wsUserIdentity != result) + " - Expected Result: False";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity != result) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				output += Environment.NewLine + outcome.ToString();
			}
			catch (KeyNotFoundException ex)
			{
				string message = "Missing Key: " + strPuid + " " + ex.ToString();
				logger.AddMessage(message, Logger.MessageType.Error);
				logger.EndTest(Logger.TestOutcome.Error);
				output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Take two IdentityKeys, each with matching Xuids but non-matching Puids and Cids.  We see if the Xuid matching works.
		/// </summary>
		/// <returns>Output of Test Results</returns>
		public string VerifyIUserIdentityEqualsWillTreatXuidAsPrimaryIdentifier()
		{
			string output = "";
			string identityKey1 = "00093CF3CF3D608A00037FFF805DCE01A4BFCF180DBACBEC";
			string identityKey2 = "00093CF3CF3D608A10037FFF805DCE011000000000000000";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityEqualsWillTreatXuidAsPrimaryIdentifier");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IWebsiteAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IWebsiteAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CreateUserIdentityFromKey(identityKey1);
				IUserIdentity wsUserIdentity2 = wsAuthMgr.CreateUserIdentityFromKey(identityKey2);

				string message = "IUserIdentity.Equals: " + wsUserIdentity.Equals(wsUserIdentity2) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = "VerifyIUserIdentityEqualsWillTreatXuidAsPrimaryIdentifier" + Environment.NewLine + message;
				if (wsUserIdentity.Equals(wsUserIdentity2) == false) //Yes, I know this looks weird, but since we're dealing with overloaded == and != I don't want to use !wsUserIdentity.Equals()
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed! (" + wsUserIdentity.Xuid + " - " + wsUserIdentity2.Xuid + ")";
				}

				message = "IUserIdentity ==: " + (wsUserIdentity == wsUserIdentity2) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity == wsUserIdentity2) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = "IUserIdentity !=: " + (wsUserIdentity != wsUserIdentity2) + " - Expected Result: False";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity != wsUserIdentity2) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			//This catch is invalid, we're not hitting the results collection here.
			//catch (KeyNotFoundException ex)
			//{
			//    string message = "Missing Key: " + strPuid + " " + ex.ToString();
			//    logger.AddMessage(message, Logger.MessageType.Error);
			//    logger.EndTest(Logger.TestOutcome.Error);
			//    output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			//}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		/// <summary>
		/// Take two IdentityKeys, each with matching Puids but non-matching Cids.  One of them has a Xuid of 0, which should force Equals to match based on Puid.
		/// </summary>
		/// <returns>Output of Test Results</returns>
		public string VerifyIUserIdentityEqualsWillTreatPuidAsPrimaryIdentifierIfEitherXuidIsZero()
		{
			string output = "";
			string identityKey1 = "00093CF3CF3D608A00037FFF805DCE01A4BFCF180DBACBEC";
			string identityKey2 = "000000000000000000037FFF805DCE010000000000000001";
			try
			{
				UnifiedLogger.StartTest("VerifyIUserIdentityEqualsWillTreatPuidAsPrimaryIdentifierIfEitherXuidIsZero");
				Logger.TestOutcome outcome = Logger.TestOutcome.Pass;

				IAuthenticationManager wsAuthMgr = Container.Instance.GetComponent<IAuthenticationManager>();
				IUserIdentity wsUserIdentity = wsAuthMgr.CreateUserIdentityFromKey(identityKey1);
				IUserIdentity wsUserIdentity2 = wsAuthMgr.CreateUserIdentityFromKey(identityKey2);

				string message = "IUserIdentity.Equals: " + wsUserIdentity.Equals(wsUserIdentity2) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output = "VerifyIUserIdentityEqualsWillTreatPuidAsPrimaryIdentifierIfEitherXuidIsZero" + Environment.NewLine + message;
				if (wsUserIdentity.Equals(wsUserIdentity2) == false) //Yes, I know this looks weird, but since we're dealing with overloaded == and != I don't want to use !wsUserIdentity.Equals()
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed! (" + wsUserIdentity.Puid + " - " + wsUserIdentity2.Puid + ")";
				}

				message = "IUserIdentity ==: " + (wsUserIdentity == wsUserIdentity2) + " - Expected Result: True";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity == wsUserIdentity2) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}

				message = "IUserIdentity !=: " + (wsUserIdentity != wsUserIdentity2) + " - Expected Result: False";
				UnifiedLogger.AddMessage(message, Logger.MessageType.Info);
				output += Environment.NewLine + message;
				if ((wsUserIdentity != wsUserIdentity2) == false) //This will properly trust == instead of expecting != to work properly.
				{
					outcome = Logger.TestOutcome.Fail;
					output += " - Failed!";
				}
				output += Environment.NewLine + outcome.ToString();
			}
			//This catch is invalid, we're not hitting the results collection here.
			//catch (KeyNotFoundException ex)
			//{
			//    string message = "Missing Key: " + strPuid + " " + ex.ToString();
			//    logger.AddMessage(message, Logger.MessageType.Error);
			//    logger.EndTest(Logger.TestOutcome.Error);
			//    output += Environment.NewLine + message + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			//}
			catch (Exception ex)
			{
				UnifiedLogger.AddMessage(ex.ToString(), Logger.MessageType.Error);
				UnifiedLogger.EndTest(Logger.TestOutcome.Error);
				output += ex.ToString() + Environment.NewLine + Logger.TestOutcome.Error.ToString();
			}
			return output;
		}

		void LoadData()
		{
			results = new Dictionary<string, IdentityTestResult>();

			string filePath = (HttpContext.Current != null ? HttpContext.Current.Server.MapPath("~/ResultsXML/IdentityTestResults.xml") : (Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase) + @"\ResultsXML\TestResults.xml").Substring("file:/".Length));

			List<IdentityTestResult> list = (List<IdentityTestResult>)TestHelpers.LoadState(typeof(List<IdentityTestResult>), filePath);

			foreach (IdentityTestResult res in list)
			{
				results.Add(res.Puid, res);
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\signin.aspx.designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Identity.Functional.IdentityTestSite {
    
    
    public partial class signin {
        
        /// <summary>
        /// displayExceptionInfo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal displayExceptionInfo;
        
        /// <summary>
        /// Message control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal Message;
        
        /// <summary>
        /// ShowTicketProperties control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ShowTicketProperties;
        
        /// <summary>
        /// LogoButton control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal LogoButton;
        
        /// <summary>
        /// showDateTime control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal showDateTime;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\signin.aspx.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Leet.Identity;
using Leet.Identity.WindowsLiveAuth;
using Leet.Core.IoCCo;

namespace Test.Identity.Functional.IdentityTestSite
{
	public partial class signin : System.Web.UI.Page
	{
		protected void Page_Load(object sender, EventArgs e)
		{
			//Ensure page is not cached which can result in incorrect auth state being displayed
			Response.Cache.SetCacheability(HttpCacheability.NoCache);
			showDateTime.Text = DateTime.Now.ToString();

			try
			{
				IAuthenticationManager authMgr = Container.Instance.GetComponent<IAuthenticationManager>();
				IWindowsLiveIdentity wlid=Container.Instance.GetComponent<IWindowsLiveIdentity>();
				LogoButton.Text = wlid.GetTextLinkForLoggingOnOrOff();
				if (authMgr.IsAuthenticated)
				{
					Message.Text = "You are logged in! Puid: " + authMgr.CurrentUser.Puid;
				}
				else
				{
					Message.Text = "You are not currently logged in.";
				}
			}
			catch (Exception ex)
			{
				displayExceptionInfo.Text = "<div>Exception Handler:<br>Exception.TargetSite: " + ex.TargetSite + "<br>Exception.Message: " + ex.Message + "</div>";
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IdentityTestSite")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ProfileData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Test.Identity.Functional.LiveWebTests
{
    public class ProfileData
    {
		public string GamerTag { get; set; }
        public string GamerScore { get; set; }
        public string Points { get; set; }
        public string GamerPicTileID { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\IdentityTestSite\TestHelpers.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Xml.Serialization;
using System.Xml;
using System.Runtime.Serialization;
using System.IO;

namespace Test.Identity.Functional.IdentityTestSite
{
	public static class TestHelpers
	{
		public static object LoadState(Type TypeOfObject, string XMLFileName)
		{
			XmlSerializer m_Serializer = new XmlSerializer(TypeOfObject);
			object m_StateObject;

			using (TextReader m_Reader = new StreamReader(XMLFileName))
			{
				m_StateObject = m_Serializer.Deserialize(m_Reader);
			}

			return m_StateObject;
		}

		public static object LoadDataContract(Type TypeOfObject, string XMLFileName)
		{
			DataContractSerializer m_Serializer = new DataContractSerializer(TypeOfObject);
			object m_StateObject;

			using (FileStream m_Reader = new FileStream(XMLFileName, FileMode.Open))
			{
				m_StateObject = m_Serializer.ReadObject(XmlDictionaryReader.CreateTextReader(m_Reader, XmlDictionaryReaderQuotas.Max));
			}

			return m_StateObject;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ProfileTestResult.cs ===
﻿using System.Runtime.Serialization;
using Leet.UserGameData.DataContracts;

namespace Test.Identity.Functional.LiveWebTests
{
	[DataContract(Namespace = "")]
	public class ProfileTestResult : Profile
	{
		[DataMember]
		public string UserName { get; set; }
		[DataMember]
		public string Password { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\EnvironmentData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Test.Identity.Functional.LiveWebTests
{
	public class EnvironmentData
	{
		public string ServiceTarget { get; set; }
		public string SiteURL { get; set; }
		public string SiteID { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string AuthPolicy { get; set; }
        public string EnvironmentName { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ProfileWebService.cs ===
﻿using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Common;

namespace Test.Identity.Functional.LiveWebTests
{
	/// <summary>
	/// Summary description for ProfileWebService
	/// </summary>
	[TestClass]
	public class ProfileWebService
	{
		public ProfileWebService()
		{
			LoadData();
		}

		static bool ImplementProxy = true;
		static string[] ProxyBypass = { ".microsoft.com", ".xboxlive.com", ".xbox.com" };
		static string authPolicy = "MBI";
		static PassportEnvironment passportEnvironment = PassportEnvironment.INT;
		
		static string serviceTarget = "";
		static string siteID = "";
		static string siteUrl = "";
		Dictionary<string, ProfileTestResult> results;
		string EnvironmentName = "";
		string email = "";
		string username = "";
		string password = "";
		
		public string Username
		{
			get { return (string.IsNullOrEmpty(email) ? username : results[email].UserName); }
		}
		public string Password
		{
			get { return (string.IsNullOrEmpty(email) ? password : results[email].Password); }
		}


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}

		#region Additional test attributes
		//
		// You can use the following additional attributes as you write your tests:
		//
		// Use ClassInitialize to run code before running the first test in the class
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		// Use ClassCleanup to run code after all tests in a class have run
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{			
		//}
		//
		// Use TestInitialize to run code before running each test 
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		// Use TestCleanup to run code after each test has run
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion

		#region Structure BVTs
		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyProperDataStructureFromGetProfileService()
		{
			bool outcome = true;
			string output = "";
			string token = "";
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=31", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		#endregion

		#region Xbox Profile Achievements Tests

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyAchievementsByKeyProfileService()
		{	
			bool outcome = true;
			string output = "";
			string token = "";
			List<Achievement> expectedAchievements = null;

			try
			{
				expectedAchievements = results[Username].RecentAchievements;
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=16", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!  Profile type does not match.";
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;

					int achievementsCount = (profileData.RecentAchievements == null ? 0 : profileData.RecentAchievements.Count);
					if (!(achievementsCount == 0 && expectedAchievements.Count == 0))
					{

						foreach (Achievement achievement in profileData.RecentAchievements)
						{
							bool found = false;
							foreach (Achievement expectedAchievement in expectedAchievements)
							{
								if (expectedAchievement.Key == achievement.Key)
								{
									found = true;
									break;
								}
							}

							if (found)
							{
								message += " Expected achievement key " + achievement.Key + " is in list.";
							}
							else
							{
								message += " Expected achievement key " + achievement.Key + " is not in list.";
								Debug.Write(output);
								outcome = false;
							}
						}
					}
				}
				Debug.Write(message);
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		#endregion

		#region Xbox Identity Tests

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyGamertagFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string gamertag = "";

			try
			{
				gamertag = results[Username].ProfileProperties[ProfileProperty.GamerTag].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");

				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileGamertag = (string)profileData.ProfileProperties[ProfileProperty.GamerTag];
						message += " Expected gamertag: " + gamertag + "; gamertag returned by Profile Service: " + profileGamertag;
						Debug.Write(message);
						Debug.Write(output);
						if (gamertag != profileGamertag)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXuidNotPresentInProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=31", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						if (profileData.ProfileProperties.ContainsKey(ProfileProperty.Xuid))
						{
							message += " Properties contains Xuid key. Key should not exist from Service. - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
						else
						{
							message += " Properties collection does not contain Xuid key as expected.";
							Debug.Write(message);
							Debug.Write(output);
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxNameFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxName = "";
			try
			{
				expectedXboxName = results[Username].ProfileProperties[ProfileProperty.Name].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxName = (string)profileData.ProfileProperties[ProfileProperty.Name];
						message += " Expected Xbox Name: " + expectedXboxName + "; Xbox Name returned by Profile Service: " + profileXboxName;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxName != profileXboxName)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxGamerscoreFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxGamerscore = "";

			try
			{
				expectedXboxGamerscore = results[Username].ProfileProperties[ProfileProperty.GamerScore].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxGamerscore = profileData.ProfileProperties[ProfileProperty.GamerScore].ToString();
						message += " Expected Xbox Gamerscore: " + expectedXboxGamerscore + "; Xbox Gamerscore returned by Profile Service: " + profileXboxGamerscore;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxGamerscore != profileXboxGamerscore)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("WTTLog.dll")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxMembershipLevelFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxMembershipLevel = "";

			try
			{
				expectedXboxMembershipLevel = results[Username].ProfileProperties[ProfileProperty.MembershipLevel].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxMembershipLevel = profileData.ProfileProperties[ProfileProperty.MembershipLevel].ToString();
						message += " Expected Xbox MembershipLevel: " + expectedXboxMembershipLevel + "; Xbox MembershipLevel returned by Profile Service: " + profileXboxMembershipLevel;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxMembershipLevel != profileXboxMembershipLevel)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxAvatarImageUrlProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxAvatarImageUrl = "";

			try
			{
				expectedXboxAvatarImageUrl = results[Username].ProfileProperties[ProfileProperty.AvatarImageUrl].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					// Need to replace with commented line below
					// if (profileData.ProfileProperties == null)
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						// Need to replace with commented line below
						// string profileXboxMembershipLevel = profileData.ProfileProperties[ProfileProperty.AvatarImageUrl].ToString();
						string profileXboxAvatarImageUrl = profileData.ProfileProperties[ProfileProperty.AvatarImageUrl].ToString();
						message += " Expected Xbox AvatarImageUrl: " + expectedXboxAvatarImageUrl + "; Xbox AvatarImageUrl returned by Profile Service: " + profileXboxAvatarImageUrl;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxAvatarImageUrl != profileXboxAvatarImageUrl)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[Obsolete("This property no longer exists in the Profile object")]
		public void VerifyWlidToGamertagVisibilityFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxVisibility = "Public";  // Probably Public

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin("http://leostorax02.redmond.corp.microsoft.com:62301/Profiles.svc/profile?format=xml&sectionflags=19", "http://a-chtayleet.redmond.corp.microsoft.com", "z_test1@zone.com", "Password", PassportEnvironment.INT, TargetProperty.Other, "268942", "MBI");

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxVisibility = profileData.ProfileProperties[ProfileProperty.MembershipLevel].ToString();
						message += " Expected Xbox WLID to Gamertag Visibility: " + expectedXboxVisibility + "; Xbox Xbox WLID to Gamertag Visibility returned by Profile Service: " + profileXboxVisibility;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxVisibility != profileXboxVisibility)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxBioFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxBio = "";

			try
			{
				expectedXboxBio = results[Username].ProfileProperties[ProfileProperty.Bio].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxBio = (string)profileData.ProfileProperties[ProfileProperty.Bio];
						message += " Expected Xbox Bio: " + expectedXboxBio + "; Xbox Bio returned by Profile Service: " + profileXboxBio;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxBio != profileXboxBio)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxGamerPicUrlFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxGamerPicUrl = "";

			try
			{
				expectedXboxGamerPicUrl = results[Username].ProfileProperties[ProfileProperty.GamerPicUrl].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxGamerPicUrl = (string)profileData.ProfileProperties[ProfileProperty.GamerPicUrl];
						message += " Expected Xbox GamerPicUrl: " + expectedXboxGamerPicUrl + "; Xbox GamerPicUrl returned by Profile Service: " + profileXboxGamerPicUrl;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxGamerPicUrl != profileXboxGamerPicUrl)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxGamerZoneFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxGamerZone = "";

			try
			{
				expectedXboxGamerZone = results[Username].ProfileProperties[ProfileProperty.GamerZone].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxGamerZone = (string)profileData.ProfileProperties[ProfileProperty.GamerZone];
						message += " Expected Xbox GamerZone: " + expectedXboxGamerZone + "; Xbox GamerZone returned by Profile Service: " + profileXboxGamerZone;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxGamerZone != profileXboxGamerZone)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxLocationFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxGamerLocation = "";

			try
			{
				expectedXboxGamerLocation = results[Username].ProfileProperties[ProfileProperty.Location].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxGamerLocation = (string)profileData.ProfileProperties[ProfileProperty.Location];
						message += " Expected Xbox Location: " + expectedXboxGamerLocation + "; Xbox Location returned by Profile Service: " + profileXboxGamerLocation;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxGamerLocation != profileXboxGamerLocation)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyXboxMottoFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			string expectedXboxGamerMotto = "";

			try
			{
				expectedXboxGamerMotto = results[Username].ProfileProperties[ProfileProperty.Motto].ToString();
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=1", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;
					if (profileData.ProfileProperties == null)
					{
						message += " ProfileProperties is null. - Failed!";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
					else
					{
						string profileXboxGamerMotto = (string)profileData.ProfileProperties[ProfileProperty.Motto];
						message += " Expected Xbox Motto: " + expectedXboxGamerMotto + "; Xbox Motto returned by Profile Service: " + profileXboxGamerMotto;
						Debug.Write(message);
						Debug.Write(output);
						if (expectedXboxGamerMotto != profileXboxGamerMotto)
						{
							message += " - Failed!";
							Debug.Write(message);
							Debug.Write(output);
							outcome = false;
						}
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		#endregion

		#region Xbox Recent Games tests

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyRecentGamesListPopulatedFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			int expectedNumberOfGames = 0;

			try
			{
				expectedNumberOfGames = (results[Username].RecentGames == null ? 0 : results[Username].RecentGames.Count);
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			
			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=8", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "GetProfile return type: " + data.GetType().ToString() + " - Expected: " + typeof(Profile);

				if (data.GetType() != typeof(Profile))
				{
					message += " - Failed!";
					Debug.Write(message);
					Debug.Write(output);
					outcome = false;
				}
				else
				{
					profileData = (Profile)data;


					int recentGamesCount = (((Profile)data).RecentGames == null ? 0 : ((Profile)data).RecentGames.Count);
					message += " Expected Recent Games to have " + expectedNumberOfGames + " Games in list.";
					Debug.Write(message);
					
					if (recentGamesCount != expectedNumberOfGames)
					{
						message += " - Failed! Recent Games list expected to have " + expectedNumberOfGames + " games in list; actual number of games is " + recentGamesCount + ".";
						Debug.Write(message);
						Debug.Write(output);
						outcome = false;
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}

		[TestMethod]
		[DeploymentItem("env.txt")]
		[DeploymentItem(@"ResultsXML\Environment_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Storax.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Tesla.xml")]
		[DeploymentItem(@"ResultsXML\Environment_Stress.xml")]
		[DeploymentItem(@"ResultsXML\Profile_Stress.xml")]
		[DeploymentItem("RPSTicketGenerator.dll.config")]
		public void VerifyRecentGamesTitleIdsFromProfileService()
		{
			
			bool outcome = true;
			string output = "";
			string token = "";
			List<GameInfo> expectedXboxGames = new List<GameInfo>();

			try
			{
				expectedXboxGames = results[Username].RecentGames;
			}
			catch (KeyNotFoundException)
			{
				Assert.Fail("Username " + Username + " not found!");
			}

			Profile profileData;
			IList<GameInfo> recentGames;

			try
			{
				RPSAutoLogin login = new RPSAutoLogin(serviceTarget + "/Profiles.svc/profile?format=xml&sectionflags=8", siteUrl, Username, Password, passportEnvironment, TargetProperty.Other, siteID, authPolicy);

				login.ImplementProxy = ImplementProxy;
				login.ProxyBypass = ProxyBypass;
				HttpWebRequest req = login.BuildRequest("GET");
				req.Method = "GET";
				token = login.Token;

				req.Headers.Add("X-Authorization", "WLID1.0 t=" + token);
				output = login.PerformRequest(req);

				XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
				XmlSerializer ser = new XmlSerializer(typeof(Profile));
				object data = ser.Deserialize(reader);

				string message = "";

				profileData = (Profile)data;

				recentGames = profileData.RecentGames;

				int recentGamesCount = (recentGames == null ? 0 : recentGames.Count);

				if (!(expectedXboxGames.Count == 0 && recentGamesCount == 0))
				{
					if (recentGames != null)
					{
						foreach (GameInfo gameObj in recentGames)
						{
							if (gameObj.GetType() != typeof(GameInfo))
							{
								message += " - Failed! Objects in RecentGames not of type GameInfo.";
								Debug.Write(message);
								Debug.Write(output);
								outcome = false;
							}
							else
							{
								GameInfo game = (GameInfo)gameObj;

								bool found = false;
								foreach (GameInfo expectedGame in expectedXboxGames)
								{
									if (expectedGame.Id == game.Id)
									{
										found = true;
										break;
									}
								}

								if (found)
								{
									message += " Expected title ID " + game.Id + " is in list.";
									Debug.Write(message);
									//Debug.Write(output);
								}
								else
								{
									message += " - Failed! Unexpected title ID " + game.Id + " is in list.";
									Debug.Write(message);
									Debug.Write(output);
									outcome = false;
								}
							}
						}
					}
					else
					{
						Debug.Write("Recent Games is empty when games are expected!");
						outcome = false;
					}
				}
			}
			catch (WebException ex)
			{
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				Debug.Write(stream.ReadToEnd());
				outcome = false;
			}
			catch (Exception ex)
			{
				Debug.Write("Ticket string: " + token);
				Debug.Write(output);
				Debug.Write(ex.ToString());
				outcome = false;
			}
			
			Assert.AreEqual(true, outcome);
		}


		#endregion

		#region Helper Methods
		public static object LoadDataContract(Type TypeOfObject, string XMLFileName)
		{
			DataContractSerializer m_Serializer = new DataContractSerializer(TypeOfObject);
			object m_StateObject;

			using (FileStream m_Reader = new FileStream(XMLFileName, FileMode.Open))
			{
				m_StateObject = m_Serializer.ReadObject(XmlDictionaryReader.CreateTextReader(m_Reader, XmlDictionaryReaderQuotas.Max));
			}

			return m_StateObject;
		}
		public static object LoadXmlObject(Type TypeOfObject, string XMLFileName)
		{
			XmlSerializer m_Serializer = new XmlSerializer(TypeOfObject);
			object m_StateObject;

			using (TextReader m_Reader = new StreamReader(XMLFileName))
			{
				m_StateObject = m_Serializer.Deserialize(m_Reader);
			}

			return m_StateObject;
		}
		public void LoadData()
		{
			TextReader reader = new StreamReader("env.txt");
			EnvironmentName = reader.ReadLine();
			EnvironmentName = EnvironmentName.Substring(0, 1).ToUpperInvariant() + EnvironmentName.Substring(1);
			email = reader.ReadLine();

			string environmentFilePath = @"Environment_" + EnvironmentName + ".xml";
			string profileFilePath = @"Profile_" + EnvironmentName + ".xml";

			EnvironmentData envData = (EnvironmentData)LoadXmlObject(typeof(EnvironmentData), environmentFilePath);
			serviceTarget = envData.ServiceTarget;
			siteUrl = envData.SiteURL;
			siteID = envData.SiteID;

			results = new Dictionary<string, ProfileTestResult>();
			List<ProfileTestResult> list = (List<ProfileTestResult>)LoadDataContract(typeof(List<ProfileTestResult>), profileFilePath);
			foreach (ProfileTestResult res in list)
			{
				results.Add(res.UserName, res);
			}
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\RPSLogin.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Common;

namespace Identity.Test.FunctionalTest.LiveWebTests
{
	/// <summary>
	/// Summary description for RPSLogin
	/// </summary>
	[TestClass]
	public class RPSLogin
	{
		public RPSLogin()
		{
			//
			// TODO: Add constructor logic here
			//
		}

		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}

		#region Additional test attributes
		//
		// You can use the following additional attributes as you write your tests:
		//
		// Use ClassInitialize to run code before running the first test in the class
		// [ClassInitialize()]
		// public static void MyClassInitialize(TestContext testContext) { }
		//
		// Use ClassCleanup to run code after all tests in a class have run
		// [ClassCleanup()]
		// public static void MyClassCleanup() { }
		//
		// Use TestInitialize to run code before running each test 
		// [TestInitialize()]
		// public void MyTestInitialize() { }
		//
		// Use TestCleanup to run code after each test has run
		// [TestCleanup()]
		// public void MyTestCleanup() { }
		//
		#endregion

		[Obsolete]
		public void LoginPageDisplaysPUID()
		{
			RPSAutoLogin autoLogin = new RPSAutoLogin(@"http://roymo4.live-int.com/signin.aspx", @"http://roymo4.live-int.com", "z_test1@zone.com", "password", PassportEnvironment.INT, TargetProperty.Other, "266771", "MBI");
			autoLogin.ImplementProxy = true;
			autoLogin.ProxyBypass = new string[] { "roymo4\\.live-int\\.com", "10\\.124\\.133\\.142" };
			string HTMLoutput = autoLogin.PerformRequest(autoLogin.BuildRequest("POST"));

			Assert.AreNotEqual(-1, HTMLoutput.IndexOf("00037FFF805DCE01"));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\SerializationTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Diagnostics;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Common;


namespace Test.Identity.Functional.LiveWebTests
{
    public enum TestResult { Fail, Pass, Error }

    [TestClass]
    public class SerializationTests
    {
        [TestMethod]
        public void ValidateSimpleXmlListSerialization()
        {
            TestResult result = TestResult.Pass;
            Debug.WriteLine("ValidateSimpleXmlListSerialization");
            
            XmlSerializableList<string> testList = new XmlSerializableList<string>();
            XmlWriter writer;
            TextWriter xmlOutput = new StringWriter();
            string message = "";

            try
            {
                writer = XmlWriter.Create(xmlOutput);
                testList.Add(@"<Not an element!>");
                testList.Add(@"</Not closing element>");
                testList.Add(@"<!Not a comment!!!-->");
                testList.Add(@"<This is_not_an_attribute=""with no closing tag""");
                testList.Add(@"<Not a tag with spaces and //slashes///>");
                testList.Add(@"Some text with\< backslashes\t\n in \"" them\\><");

                ((IXmlSerializable)testList).WriteXml(writer);
                writer.Flush();
                string xmlText = xmlOutput.ToString();
                TextReader tr = new StringReader(xmlText);

                XmlReader xmlReader = XmlReader.Create(tr);
                XmlSerializableList<string> resultList = new XmlSerializableList<string>();
                ((IXmlSerializable)resultList).ReadXml(xmlReader);
                if (testList.Count == resultList.Count)
                {
                    for (int i = 0; i < testList.Count; i++)
                    {
                        if (!testList[i].Equals(resultList[i]))
                        {
                            message = "Failed!  Item " + testList[i] + " from input is not the same as " + resultList[i] + " from output.";
                            Debug.WriteLine(message);
                            result = TestResult.Fail;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                message = ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        public void ValidateProfileXmlListDeserialization()
        {
            Debug.WriteLine("ValidateSimpleXmlListDeserialization");
            TestResult result = TestResult.Pass;

            XmlSerializableList<Profile> initialList = new XmlSerializableList<Profile>();
            XmlSerializableList<Profile> deserializedList = new XmlSerializableList<Profile>();

            string initialXml;
            string finalXml;
            XmlReader reader;
            XmlWriter initialWriter;
            TextReader txtReader;
            TextWriter initialTxtWriter = new StringWriter();
            XmlWriter finalWriter;
            TextWriter finalTxtWriter = new StringWriter();
            string message = "";

            // Create a set of profile objects to serialize to an xml to be used as input for deserialization
            Profile[] users = new Profile[3];
            for (int i = 0; i < users.Length; i++)
            {
                users[i] = new Profile();
                users[i].ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();
            }
            XmlSerializableDictionary<ProfileProperty, object> props0 = users[0].ProfileProperties;
            props0[ProfileProperty.Name] = @">\"" for "" <";
            props0[ProfileProperty.GamerTag] = @"<<nothing>";
            props0[ProfileProperty.AvatarImageUrl] = @"<?Wotcher!?>";
            props0[ProfileProperty.Bio] = @"outside<inside>> around <with no=""flavor""""";
            props0[ProfileProperty.GamerScore] = "int";
            props0[ProfileProperty.GamerZone] = @"<gamerzone\twith\nsome\rescape\\characters\\\";
            props0[ProfileProperty.Location] = @"<<??&&amp;!"".'<!---->>>>";

            XmlSerializableDictionary<ProfileProperty, object> props1 = users[1].ProfileProperties;
            props1[ProfileProperty.Name] = @"<good>";
            props1[ProfileProperty.GamerTag] = @"<bad>>>";
            props1[ProfileProperty.AvatarImageUrl] = @"<tag atrr=<!--this -->[]/>";
            props1[ProfileProperty.Bio] = @"_";
            props1[ProfileProperty.GamerScore] = "334";
            props1[ProfileProperty.GamerZone] = @"/>";
            props1[ProfileProperty.Location] = @"<";

            XmlSerializableDictionary<ProfileProperty, object> props2 = users[2].ProfileProperties;
            props2[ProfileProperty.Name] = @"&gt;&lt;";
            props2[ProfileProperty.GamerTag] = @"&amp;&lt;&amp;&gt;";
            props2[ProfileProperty.AvatarImageUrl] = @"&quot;thisquote&quot;";
            props2[ProfileProperty.Bio] = @"";
            props2[ProfileProperty.GamerScore] = -37;
            props2[ProfileProperty.GamerZone] = @"&reg;&svc;&exe;";
            props2[ProfileProperty.Location] = @"zzzzzzzzzzzzzzzzzzzzzzzzz<>";

            try
            {
                initialWriter = XmlWriter.Create(initialTxtWriter);
                finalWriter = XmlWriter.Create(finalTxtWriter);
                for (int i = 0; i < users.Length; i++)
                    initialList.Add(users[i]);
                ((IXmlSerializable)initialList).WriteXml(initialWriter);
                initialWriter.Flush();
                initialXml = initialTxtWriter.ToString();
                
                txtReader = new StringReader(initialXml); // Read the xml just created from the list of Profiles into the reader
                reader = XmlReader.Create(txtReader);
                ((IXmlSerializable)deserializedList).ReadXml(reader);

                ((IXmlSerializable)deserializedList).WriteXml(finalWriter);
                finalWriter.Flush();
                finalXml = finalTxtWriter.ToString();
                

            
                if (!initialXml.Equals(finalXml))
                {
                    message = "Failed!  Input Xml:\n" + initialXml + "\n is different from output Xml:\n" + finalXml;
                    
                    Debug.WriteLine(message);
                    result = TestResult.Fail;
                }
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        public void ValidateSimpleXmlDictionarySerialization()
        {
            Debug.WriteLine("ValidateSimpleXmlDictionarySerialization");
            TestResult result = TestResult.Pass;

            XmlSerializableDictionary<string, string> testDictionary = new XmlSerializableDictionary<string, string>();
            //XmlSerializableDictionary<char, List<string>> testDictionary = new XmlSerializableDictionary<char, List<string>>();
            XmlWriter writer;
            TextWriter xmlOutput = new StringWriter();
            string message = "";

            try
            {
                writer = XmlWriter.Create(xmlOutput);
                testDictionary.Add("<unsignedInt>", "232</unsingedInt>");
                testDictionary.Add("<?xml version=\"44,346.22344345\" encoding=\"Caesar's Cipher\"?>", "??<<>");
                testDictionary.Add("<!--To comment or not to comment.-->", "><");
                testDictionary.Add("&&&amp;", "&gt;&lt;&apos;&quot;!&gt;");
                
                ((IXmlSerializable)testDictionary).WriteXml(writer);
                writer.Flush();
                string xmlText = xmlOutput.ToString();
                TextReader tr = new StringReader(xmlText);

                XmlReader xmlReader = XmlReader.Create(tr);
                XmlSerializableDictionary<string, string> resultDictionary = new XmlSerializableDictionary<string, string>();
                ((IXmlSerializable)resultDictionary).ReadXml(xmlReader);
                if (testDictionary.Count == resultDictionary.Count)
                {
                    foreach (string key in testDictionary.Keys)
                    {
                        if (!resultDictionary.ContainsKey(key))
                        {
                            message = "Failed!  Deserialized dictionary does not have key " + key + ".";
                            Debug.WriteLine(message);
                            result = TestResult.Fail;
                        }
                        else
                        {
                            //if (testDictionary[key] != resultDictionary[key])
                            if (!testDictionary[key].Equals(resultDictionary[key]))
                            {
                                message = "Failed!  Test Dictionary value " + testDictionary[key] + "does not equal result dictionary value " + resultDictionary[key] + "for key " + key + ".";
                                Debug.WriteLine(message);
                                result = TestResult.Fail;
                            }
                            else
                            {
                                message = "Input item " + testDictionary[key] + "; output item: " + resultDictionary[key] + ".\n";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        [Obsolete]
        public void ValidateSimpleXmlDictionaryDeserialization()
        {
            Debug.WriteLine("ValidateSimpleXmlDictionaryDeserialization");
            TestResult result = TestResult.Pass;

            XmlSerializableDictionary<string, string> testDictionary = new XmlSerializableDictionary<string, string>();
            string inputString = "<?xml version=\"1.0\" encoding=\"utf-16\"?><items><item><string>&lt;&lt;&gt;so's</string><string>The\"&amp;&amp;=!@@@--&gt;</string></item><item><string>easy</string><string>nice</string></item><item><string>&lt;!--This is not a comment--&gt;</string><string>brown</string></item></items>";
            TextReader txtReader = new StringReader(inputString);
            TextWriter txtWriter = new StringWriter();
            XmlReader reader = XmlReader.Create(txtReader);
            XmlWriter writer = XmlWriter.Create(txtWriter);
            string resultString = "";
            string message = "";
            Profile userQ = new Profile();
            

            try
            {
                ((IXmlSerializable)testDictionary).ReadXml(reader);

                ((IXmlSerializable)testDictionary).WriteXml(writer);
                writer.Flush();
                resultString = txtWriter.ToString();

                if (!inputString.Equals(resultString))
                {
                    message = "Failed!  Input string:\n" + inputString + "\n is not equal to output string:\n" + resultString;
                    Debug.WriteLine(message);
                    result = TestResult.Fail;
                }

                XmlSerializableDictionary<string, string> resultDictionary = new XmlSerializableDictionary<string, string>();
                if (testDictionary.Count == resultDictionary.Count)
                {
                    foreach (string key in testDictionary.Keys)
                    {
                        if (!resultDictionary.ContainsKey(key))
                        {
                            message = "Failed!  Deserialized dictionary does not have key " + key + ".";
                            Debug.WriteLine(message);
                            result = TestResult.Fail;
                        }
                        else
                        {
                            if (testDictionary[key] != resultDictionary[key])
                            {
                                message = "Failed!  Test Dictionary value " + testDictionary[key] + "does not equal result dictionary value " + resultDictionary[key] + "for key " + key + ".";
                                Debug.WriteLine(message);
                                result = TestResult.Fail;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        public void ValidateProfileXmlDictionaryDeserialization()
        {
            Debug.WriteLine("ValidateProfileXmlDictionaryDeserialization");
            TestResult result = TestResult.Fail;

            XmlSerializableDictionary<string, Profile> initialDictionary = new XmlSerializableDictionary<string, Profile>();
            XmlSerializableDictionary<string, Profile> finalDictionary = new XmlSerializableDictionary<string, Profile>();
            TextReader txtReader; // = new StringReader(inputString);
            TextWriter initialTxtWriter = new StringWriter();
            TextWriter finalTxtWriter = new StringWriter();
            XmlReader reader; ;
            XmlWriter initialWriter = XmlWriter.Create(initialTxtWriter);
            XmlWriter finalWriter = XmlWriter.Create(finalTxtWriter);
            string initialXml = "";
            string finalXml = "";
            string message = "";
            bool testPasses = true;

            // Create a set of profile objects to serialize to an xml to be used as input for deserialization
            Profile[] users = new Profile[3];
            for (int i = 0; i < users.Length; i++)
            {
                users[i] = new Profile();
                users[i].ProfileProperties = new XmlSerializableDictionary<ProfileProperty, object>();
            }
            XmlSerializableDictionary<ProfileProperty, object> props0 = users[0].ProfileProperties;
            props0[ProfileProperty.Name] = @">\"" for "" <";
            props0[ProfileProperty.GamerTag] = @"<<nothing>";
            props0[ProfileProperty.AvatarImageUrl] = @"<?Wotcher!?>";
            props0[ProfileProperty.Bio] = @"outside<inside>> around <with no=""flavor""""";
            props0[ProfileProperty.GamerScore] = "int";
            props0[ProfileProperty.GamerZone] = @"<gamerzone\twith\nsome\rescape\\characters\\\";
            props0[ProfileProperty.Location] = @"<<??&&amp;!"".'<!---->>>>";

            XmlSerializableDictionary<ProfileProperty, object> props1 = users[1].ProfileProperties;
            props1[ProfileProperty.Name] = @"<good>";
            props1[ProfileProperty.GamerTag] = @"<bad>>>";
            props1[ProfileProperty.AvatarImageUrl] = @"<tag atrr=<!--this -->[]/>";
            props1[ProfileProperty.Bio] = @"_";
            props1[ProfileProperty.GamerScore] = "334";
            props1[ProfileProperty.GamerZone] = @"/>";
            props1[ProfileProperty.Location] = @"<";

            XmlSerializableDictionary<ProfileProperty, object> props2 = users[2].ProfileProperties;
            props2[ProfileProperty.Name] = @"&gt;&lt;";
            props2[ProfileProperty.GamerTag] = @"&amp;&lt;&amp;&gt;";
            props2[ProfileProperty.AvatarImageUrl] = @"&quot;thisquote&quot;";
            props2[ProfileProperty.Bio] = @"";
            props2[ProfileProperty.GamerScore] = -37;
            props2[ProfileProperty.GamerZone] = @"&reg;&svc;&exe;";
            props2[ProfileProperty.Location] = @"zzzzzzzzzzzzzzzzzzzzzzzzz<>";



            try
            {
                initialWriter = XmlWriter.Create(initialTxtWriter);
                finalWriter = XmlWriter.Create(finalTxtWriter);
                initialDictionary.Add(@">\"" for "" <", users[0]);
                initialDictionary.Add(@"<good>", users[1]);
                initialDictionary.Add(@"&gt;&lt;", users[2]);

                ((IXmlSerializable)initialDictionary).WriteXml(initialWriter);
                initialWriter.Flush();
                initialXml = initialTxtWriter.ToString();

                txtReader = new StringReader(initialXml); // Read the xml just created from the list of Profiles into the reader
                reader = XmlReader.Create(txtReader);
                ((IXmlSerializable)finalDictionary).ReadXml(reader);

                ((IXmlSerializable)finalDictionary).WriteXml(finalWriter);
                initialWriter.Flush();
                finalXml = initialTxtWriter.ToString();

                if (!initialXml.Equals(finalXml))
                {
                    message = "Failed!  Input string:\n" + initialXml + "\n is not equal to output string:\n" + finalXml;
                    Debug.WriteLine(message);
                    testPasses = false;
                    result = TestResult.Fail;
                }

                XmlSerializableDictionary<string, string> resultDictionary = new XmlSerializableDictionary<string, string>();
                if (initialDictionary.Count == resultDictionary.Count)
                {
                    foreach (string key in initialDictionary.Keys)
                    {
                        if (!resultDictionary.ContainsKey(key))
                        {
                            message = "Failed!  Deserialized dictionary does not have key " + key + ".";
                            Debug.WriteLine(message);
                            testPasses = false;
                            result = TestResult.Fail;
                        }
                        else
                        {
                            if (!initialDictionary[key].Equals(resultDictionary[key]))
                            {
                                message = "Failed!  Test Dictionary value " + initialDictionary[key] + "does not equal result dictionary value " + resultDictionary[key] + "for key " + key + ".";
                                Debug.WriteLine(message);
                                testPasses = false;
                                result = TestResult.Fail;
                            }
                            else
                            {
                                result = TestResult.Pass;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }
            if (testPasses)
                result = TestResult.Pass;
            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        public void ValidateDictionarySerializationWithMalformedXml()
        {
            Debug.WriteLine("ValidateDictionarySerializationWithMalformedXml");
            TestResult result = TestResult.Fail;  // Will assume test Fails unless exception caught

            XmlSerializableDictionary<string, string> testDictionary = new XmlSerializableDictionary<string, string>();
            string inputString = "<?xml version=\"1.0\" encoding=\"utf-16\"?><items><item><string><<&</string><string>Th>e</string></item><item><string>10\"0</string><string>doesn't</string></item><item><string>10&000</string><string>b>r&o<w'n\" i's</string></item></items>";
            TextReader txtReader = new StringReader(inputString);
            XmlReader reader = XmlReader.Create(txtReader);
            string message = "";

            try
            {
                ((IXmlSerializable)testDictionary).ReadXml(reader);
            }
            catch (InvalidOperationException ex)
            {
                message = ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Pass;
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

        [TestMethod]
        public void ValidateListSerializationWithMalformedXml()
        {
            Debug.WriteLine("ValidateListSerializationWithMalformedXml");
            TestResult result = TestResult.Fail;  // Will assume test Fails unless exception caught

            XmlSerializableList<string> testList = new XmlSerializableList<string>();
            string inputString = "<?xml version=\"1.0\" encoding=\"utf-16\"?><items><item><string><<&</string><string>Th>e</string></item><item><string>10\"0</string><string>doesn't</string></item><item><string>10&000</string><string>b>r&o<w'n\" i's</string></item></items>";
            TextReader txtReader = new StringReader(inputString);
            XmlReader reader = XmlReader.Create(txtReader);
            string message = "";

            try
            {
                ((IXmlSerializable)testList).ReadXml(reader);
            }
            catch (InvalidOperationException ex)
            {
                message = ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Pass;
            }
            catch (Exception ex)
            {
                message = " " + ex.ToString();
                Debug.WriteLine(message);
                result = TestResult.Error;
            }

            Assert.AreEqual(TestResult.Pass, result);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateErrorPage.cs ===
﻿using System.Net;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
using Test.Identity.Common;
using RPSTicketCreation;

namespace Test.Identity.Functional.LiveWebTests
{
    [TestDescription("Verify that HTTP 404s correctly load the error page")]
    [DeploymentItem(@"LiveWebTests\bin\Debug\rpsticketgenerator.dll.config")]
    [DeploymentItem(@"LiveWebTests\Storax_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Tesla_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Stress_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\env.txt")]
    public class ValidateErrorPage : WebTest
    {
        public ValidateErrorPage()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            //Test the 404 case without being logged in.
            WebTestRequest request1 = new WebTestRequest("http://games.storax.xbox.com/NoSuchPage.aspx");
            request1.ExpectedHttpStatusCode = 200;
            ValidationRuleFindText serverErrorRule = new ValidationRuleFindText();
            // default values:  IgnoreCase = false, PassIfTextFound = true, UseRegularExpression = false, ExpectedHttpStatusCode=200
            serverErrorRule.FindText = "Page Not Found.";
            request1.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request1;

            WebTestRequest request2 = new WebTestRequest("http://games.storax.xbox.com/NoSuchFolder");
            request2.ExpectedHttpStatusCode = 200;
            request2.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request2;

            WebTestRequest request3 = new WebTestRequest("http://games.storax.xbox.com/NoSuchFile.jpg");
            request3.ExpectedHttpStatusCode = 200;
            request3.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request3;

            //Log in now.
            WebTestHelpers helper = new WebTestHelpers();
            EnvironmentData data = helper.LoadEnvironmentData();
            WebTestRequest loginRequest = helper.PerformRPSLogin(data.Username, data.Password, data.EnvironmentName, data.SiteID, data.AuthPolicy);
            ValidationRuleFindText loginValidation = new ValidationRuleFindText();
            loginValidation.FindText = "Sign out";
            loginRequest.ValidateResponse += new EventHandler<ValidationEventArgs>(loginValidation.Validate);
            yield return loginRequest;

            //Test the 404 case while logged in.
            WebTestRequest request5 = new WebTestRequest("http://games.storax.xbox.com/NoSuchPage.aspx");
            request5.ExpectedHttpStatusCode = 200;
            request5.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request5;

            WebTestRequest request6 = new WebTestRequest("http://games.storax.xbox.com/NoSuchFolder");
            request6.ExpectedHttpStatusCode = 200;
            request6.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request6;

            WebTestRequest request7 = new WebTestRequest("http://games.storax.xbox.com/NoSuchFile.jpg");
            request7.ExpectedHttpStatusCode = 200;
            request7.ValidateResponse += new EventHandler<ValidationEventArgs>(serverErrorRule.Validate);
            yield return request7;

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateLocalizedStringProviderLocale.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;
using System.Web;
using System.IO;


namespace LiveWebTests1
{
    /// <summary>
    /// Summary description for ValidateLocalizedStringProviderLocale
    /// </summary>
    [TestClass]
    public class ValidateLocalizedStringProviderLocale
    {
        public ValidateLocalizedStringProviderLocale()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [TestMethod]
        [Owner("Rich Svetlik")]
        [Description("Validates that the page displays correct text for the default language")]
        public void ValidateDefaultLanguage()
        {
            // Do web request for us-en locale (no query string)
            string url = "http://achtay.redmond.corp.microsoft.com:62101/";
            
            string output = PerformRequest(url);
            StringAssert.Contains(output, "Welcome to");
            
        }

        [TestMethod]
        [Owner("Rich Svetlik")]
        [Description("Validates that the page displays correct text for the non-English locale")]
        public void ValidateLocaleChange()
        {
            // Do web request for us-en locale (no query string)
            string urlLoc = "http://achtay.redmond.corp.microsoft.com:62101/?locale=de";

            string output = PerformRequest(urlLoc);
            StringAssert.Contains(output, "Willkommen zu");
           
        }

        [TestMethod]
        [Owner("Rich Svetlik")]
        [Description("Validates that the page displays correct text for the English locale")]
        public void ValidateEnglish()
        {
            // Do web request for us-en locale (no query string)
            string urlEn = "http://achtay.redmond.corp.microsoft.com:62101/?locale=en";  // or ?locale=en-us

            string output = PerformRequest(urlEn);
            StringAssert.Contains(output, "Welcome to");
        }

        HttpWebRequest CreateRequest(string url, CookieContainer hash)
        {
            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);
            req.AllowAutoRedirect = true;
            req.MaximumAutomaticRedirections = 50;
            req.Accept = "*/*";
            req.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506; .NET CLR 3.5.21022; InfoPath.2)";
            req.Method = "POST";
            req.CookieContainer = new CookieContainer();
            
            return req;
        }

        public string PerformRequest(string Target)
		{
			
			HttpWebRequest req = CreateRequest(Target, new CookieContainer());
            Encoding UTFEncoding = Encoding.UTF8;
            byte[] byteArray = UTFEncoding.GetBytes("t=" + "");
            req.ContentLength = byteArray.Length;

			try
			{
				HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
				StreamReader stream = new StreamReader(resp.GetResponseStream());
				string output = stream.ReadToEnd();
				CookieContainer cookies = req.CookieContainer;
				foreach (Cookie cookie in resp.Cookies)
				{
					cookies.Add(cookie);
				}
                return HandleRedirect(output, cookies, 1);;
			}
			catch (WebException ex)
			{
                if (ex.Response == null)
                    return ex.Message;
				StreamReader stream = new StreamReader(ex.Response.GetResponseStream());
				return stream.ReadToEnd();
			}
		}

        string HandleRedirect(string output, CookieContainer cookies, int tries)
        {
            if (output.IndexOf("document.location.replace(") > -1)
            {
                if (tries >= 50)
                {
                    throw new Exception("Attempted to redirect 50+ times!");
                }
                tries++;

                int pos = output.IndexOf("document.location.replace(");
                string rest = output.Substring(pos + 27);
                string loc = rest.Substring(0, rest.IndexOf("\""));

                HttpWebRequest req = CreateRequest(loc, cookies);
                Encoding UTFEncoding = Encoding.UTF8;
                byte[] byteArray = UTFEncoding.GetBytes("t=" + "");
                req.ContentLength = byteArray.Length;
                Stream ns = req.GetRequestStream();
                ns.Write(byteArray, 0, byteArray.Length);
                ns.Close();

                HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                StreamReader stream = new StreamReader(resp.GetResponseStream());
                string str = stream.ReadToEnd();

                CookieContainer redirCookies = req.CookieContainer;

                foreach (Cookie cookie in resp.Cookies)
                {
                    redirCookies.Add(cookie);
                }
                return HandleRedirect(str, redirCookies, tries);
            }
            else
            {
                return output;
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateMiniProfileCard.cs ===
﻿using System.Net;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
using Test.Identity.Common;

namespace Test.Identity.Functional.LiveWebTests
{
    
    [TestDescription("Verify sign in and sign out functionality")]
    [DeploymentItem(@"LiveWebTests\bin\Debug\rpsticketgenerator.dll.config")]
    [DeploymentItem(@"LiveWebTests\Storax_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Tesla_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Stress_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\env.txt")]
    [DeploymentItem(@"LiveWebTests\profiledata.txt")]
    public class ValidateMiniProfileCard : WebTest
    {

        public ValidateMiniProfileCard()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            //this.Proxy = "127.0.0.1:8888"; // Needed to view in fiddler

            WebTestHelpers helper = new WebTestHelpers();
            EnvironmentData data = helper.LoadEnvironmentData();
            ProfileData profile = helper.LoadProfileData();

            WebTestRequest login = helper.PerformRPSLogin(data.Username, data.Password, data.EnvironmentName, data.SiteID, data.AuthPolicy);

            yield return login;
            login = null;

            WebTestRequest profileCard = new WebTestRequest("http://live.storax.xbox.com/ShellGamercardV2.ashx");
            profileCard.Timeout = 60;
            profileCard.Headers.Add(new WebTestRequestHeader("Pragma", "no-cache"));
            profileCard.QueryStringParameters.Add("culture", "en-US");

            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validateGamerTag = new ValidationRuleFindText();
                validateGamerTag.FindText = profile.GamerTag;
                validateGamerTag.IgnoreCase = false;
                validateGamerTag.UseRegularExpression = false;
                validateGamerTag.PassIfTextFound = true;
                profileCard.ValidateResponse += new EventHandler<ValidationEventArgs>(validateGamerTag.Validate);
            }

            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationPoints = new ValidationRuleFindText();
                validationPoints.FindText = profile.Points;
                validationPoints.IgnoreCase = false;
                validationPoints.UseRegularExpression = false;
                validationPoints.PassIfTextFound = true;
                profileCard.ValidateResponse += new EventHandler<ValidationEventArgs>(validationPoints.Validate);
            }

            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validateGamerPic = new ValidationRuleFindText();
                validateGamerPic.FindText = "tile/0/" + profile.GamerPicTileID;
                validateGamerPic.IgnoreCase = false;
                validateGamerPic.UseRegularExpression = false;
                validateGamerPic.PassIfTextFound = true;
                profileCard.ValidateResponse += new EventHandler<ValidationEventArgs>(validateGamerPic.Validate);
            }

            yield return profileCard;
            profileCard = null;

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateHomePage.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;

namespace Test.Identity.Functional.LiveWebTests
{
    [TestDescription("Basic BVT for LiveWeb Home Page")]
    [DeploymentItem(@"LiveWebTests\Storax_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Tesla_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Stress_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\env.txt")]
    public class ValidateHomePage : WebTest
    {
        public ValidateHomePage()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            //this.Proxy = "127.0.0.1:8888"; // Needed to view in fiddler

            WebTestHelpers helper = new WebTestHelpers();
            EnvironmentData data = helper.LoadEnvironmentData();           
            
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule1 = new ValidationRuleFindText();
                validationRule1.FindText = "Sign in";
                validationRule1.IgnoreCase = false;
                validationRule1.UseRegularExpression = false;
                validationRule1.PassIfTextFound = true;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleRequestTime validationRule2 = new ValidationRuleRequestTime();
                validationRule2.MaxRequestTime = 20000;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule3 = new ValidationRuleFindText();
                validationRule3.FindText = "Xbox Mobile Dogfood";
                validationRule3.IgnoreCase = false;
                validationRule3.UseRegularExpression = false;
                validationRule3.PassIfTextFound = true;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule3.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule4 = new ValidationRuleFindText();
                validationRule4.FindText = "Self-Host instructions";
                validationRule4.IgnoreCase = false;
                validationRule4.UseRegularExpression = false;
                validationRule4.PassIfTextFound = true;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule4.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidateResponseUrl validationRule5 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule5.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleRequiredAttributeValue validationRule6 = new ValidationRuleRequiredAttributeValue();
                validationRule6.TagName = "link";
                validationRule6.AttributeName = "href";
                validationRule6.MatchAttributeName = "";
                validationRule6.MatchAttributeValue = "";
                validationRule6.ExpectedValue = "/content/css/shell/shell_liveweb.css";
                validationRule6.IgnoreCase = false;
                validationRule6.Index = -1;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule6.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule7 = new ValidationRuleFindText();
                validationRule7.FindText = "Feedback";
                validationRule7.IgnoreCase = false;
                validationRule7.UseRegularExpression = false;
                validationRule7.PassIfTextFound = true;
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule7.Validate);
            }

            WebTestRequest request1 = new WebTestRequest(data.SiteURL);
            request1.Timeout = 60;
            request1.ExpectedHttpStatusCode = 200;
            yield return request1;
            request1 = null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateNotifications.cs ===
﻿using System.Net;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
using Test.Identity.Common;

namespace Test.Identity.Functional.LiveWebTests
{
    [TestDescription("Verify notifications display correctly")]
    [DeploymentItem(@"LiveWebTests\bin\Debug\rpsticketgenerator.dll.config")]
    [DeploymentItem(@"LiveWebTests\Storax_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Tesla_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Stress_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\env.txt")]
    public class ValidateNotifications : WebTest
    {
        public ValidateNotifications()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            //this.Proxy = "127.0.0.1:8888"; // Needed to view in fiddler
           
            WebTestHelpers helper = new WebTestHelpers();
            helper.FilterDependentRequestsThatStartWith = "http://zone.msn.com";

            EnvironmentData data = helper.LoadEnvironmentData();
            string username = "mobiledogfoodbvtuser1@live-int.com";
            string password = "Pa$$w0rd";

            WebTestRequest signin = helper.PerformRPSLogin(username, password, data.EnvironmentName, data.SiteID, data.AuthPolicy);
            signin.PostRequest += new EventHandler<PostRequestEventArgs>(helper.FilterRequest);
            yield return signin;
            signin = null;

            WebTestRequest signedIn = new WebTestRequest(data.SiteURL);

            signedIn.PostRequest += new EventHandler<PostRequestEventArgs>(helper.FilterRequest);

            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule1 = new ValidationRuleFindText();
                validationRule1.FindText = "You Win";
                validationRule1.IgnoreCase = false;
                validationRule1.UseRegularExpression = false;
                validationRule1.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule2 = new ValidationRuleFindText();
                validationRule2.FindText = "Your Turn";
                validationRule2.IgnoreCase = false;
                validationRule2.UseRegularExpression = false;
                validationRule2.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule3 = new ValidationRuleFindText();
                validationRule3.FindText = "You Lose";
                validationRule3.IgnoreCase = false;
                validationRule3.UseRegularExpression = false;
                validationRule3.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule3.Validate);
            } if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule4 = new ValidationRuleFindText();
                validationRule4.FindText = "Warning";
                validationRule4.IgnoreCase = false;
                validationRule4.UseRegularExpression = false;
                validationRule4.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule4.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule5 = new ValidationRuleFindText();
                validationRule5.FindText = "Nudge";
                validationRule5.IgnoreCase = false;
                validationRule5.UseRegularExpression = false;
                validationRule5.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule5.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule6 = new ValidationRuleFindText();
                validationRule6.FindText = "Message Waiting";
                validationRule6.IgnoreCase = false;
                validationRule6.UseRegularExpression = false;
                validationRule6.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule6.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule7 = new ValidationRuleFindText();
                validationRule7.FindText = "Game Tie";
                validationRule7.IgnoreCase = false;
                validationRule7.UseRegularExpression = false;
                validationRule7.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule7.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule8 = new ValidationRuleFindText();
                validationRule8.FindText = "Game Over";
                validationRule8.IgnoreCase = false;
                validationRule8.UseRegularExpression = false;
                validationRule8.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule8.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule9 = new ValidationRuleFindText();
                validationRule9.FindText = "Invitation";
                validationRule9.IgnoreCase = false;
                validationRule9.UseRegularExpression = false;
                validationRule9.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule9.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule10 = new ValidationRuleFindText();
                validationRule10.FindText = "Mobile Dogfood Notifications";
                validationRule10.IgnoreCase = false;
                validationRule10.UseRegularExpression = false;
                validationRule10.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule10.Validate);
            }

            yield return signedIn;
            signedIn = null;

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveWebTests1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("LiveWebTests1")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("92980fc5-cd26-4712-9961-0e22a1d3652f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebUITests\LiveWebUITests\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\WebTestHelpers.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using System.Net;
using System.Xml.Serialization;
using System.IO;

namespace Test.Identity.Functional.LiveWebTests
{
    public class WebTestHelpers
    {
        string m_startsWith;

        public string FilterDependentRequestsThatStartWith
        {

            get { return m_startsWith; }

            set { m_startsWith = value; }

        }

        public WebTestRequest PerformRPSLogin(string username, string password, string environment, string siteID, string authPolicy)
        {
            string[] ProxyBypass = { ".microsoft.com", ".xboxlive.com", ".xbox.com" };
            string siteUrl = "https://live."+ environment +".xbox.com/xweb/live/passport/setcookies.ashx";
            RPSTicketCreation.PassportEnvironment passportEnvironment = RPSTicketCreation.PassportEnvironment.INT;
            string ticket = "";

            WebTestRequest request = new WebTestRequest("https://live." + environment + ".xbox.com/xweb/live/passport/setCookies.ashx?rru=httpZ3AZ2FZ2FgamesZ2E"+environment+"Z2ExboxZ2Ecom&wa=wsignin1.0");
            request.Timeout = 60;
            request.FollowRedirects = true;
            request.Method = "POST";     

            CookieCollection collection = GetRPSTicketAndCookies(siteUrl, username, password, siteID, authPolicy, passportEnvironment, out ticket);

            FormPostHttpBody body = new FormPostHttpBody();
            body.FormPostParameters.Add("t", ticket);
            request.Body = body;

            return request;
        }

        CookieCollection GetRPSTicketAndCookies(string siteUrl, string Username, string Password, string siteID, string authPolicy, RPSTicketCreation.PassportEnvironment passportEnvironment, out string ticket)
        {
            RPSTicketCreation.RPSTicketGeneratorConfig rpsTicketGenConfigAccount = new RPSTicketCreation.RPSTicketGeneratorConfig();
            rpsTicketGenConfigAccount.ConfigFile = @"RPSTicketGenerator.dll.config";
            rpsTicketGenConfigAccount.PPEnv = RPSTicketCreation.PassportEnvironment.INT;
            rpsTicketGenConfigAccount.AuthPolicy = authPolicy;
            rpsTicketGenConfigAccount.SiteID = siteID;
            rpsTicketGenConfigAccount.CacheData = false;
            rpsTicketGenConfigAccount.SiteURL = siteUrl;
            RPSTicketCreation.RPSTicketGenerator TicketCreator = new RPSTicketCreation.RPSTicketGenerator(rpsTicketGenConfigAccount);

            Dictionary<string, Cookie> hash = new Dictionary<string, Cookie>();
            string tValue = "";
            TicketCreator.GetRPSCompactTicketAndRPSAuthCookies(Username, Password, out hash, out tValue);
            ticket = tValue;

            CookieCollection collection = new CookieCollection();

            foreach (string key in hash.Keys)
            {
                collection.Add(hash[key]);
            }

            return collection;
        }

        public static object LoadXmlObject(Type TypeOfObject, string XMLFileName)
        {
            XmlSerializer m_Serializer = new XmlSerializer(TypeOfObject);
            object m_StateObject;

            using (TextReader m_Reader = new StreamReader(XMLFileName))
            {
                m_StateObject = m_Serializer.Deserialize(m_Reader);
            }

            return m_StateObject;
        }

        public EnvironmentData LoadEnvironmentData()
        {
            string environmentFilePath;

            if (File.Exists("env.txt"))
            {
                TextReader reader = new StreamReader("env.txt");
                string EnvironmentName = reader.ReadLine();
                EnvironmentName = EnvironmentName.Substring(0, 1).ToUpperInvariant() + EnvironmentName.Substring(1).Trim();

                environmentFilePath = EnvironmentName + "_Settings.xml";
            }
            else
            {
                //Default Settings
                environmentFilePath = "Storax_Settings.xml";
            }

            return (EnvironmentData)LoadXmlObject(typeof(EnvironmentData), environmentFilePath);
        }

        public ProfileData LoadProfileData()
        {
            ProfileData profile = new ProfileData();

            if (File.Exists("profiledata.txt"))
            {
                TextReader reader = new StreamReader("profiledata.txt");
                
                string profileDataCombined = reader.ReadLine();
                char[] splitter  = {';'};

                string[] profileData = profileDataCombined.Split(splitter);

                profile.GamerTag = profileData[0].ToString();
                profile.Points = profileData[1].ToString();
                profile.GamerScore = profileData[2].ToString();
                profile.GamerPicTileID = profileData[3].ToString().Trim();             
            }
            else
            {
                //Default Settings
                profile.GamerTag = "MjhDev01";
                profile.Points = "Get Gold Today!";
                profile.GamerScore = "0";
                profile.GamerPicTileID = "10008";
            }

            return profile;
        } 

        public void FilterRequest(object sender, PostRequestEventArgs e)
        {
            WebTestRequestCollection depsToRemove = new WebTestRequestCollection();

            foreach (WebTestRequest r in e.Request.DependentRequests)
            {
                if (!string.IsNullOrEmpty(FilterDependentRequestsThatStartWith) &&
                    r.Url.StartsWith(FilterDependentRequestsThatStartWith))
                {
                    depsToRemove.Add(r);
                }
            }

            foreach (WebTestRequest r in depsToRemove)
            {
                e.Request.DependentRequests.Remove(r);
            }
        }
    }




    


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebTests\LiveWebTests\ValidateRPSSignInAndSignOut.cs ===
﻿using System.Net;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.WebTesting;
using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
using Test.Identity.Common;

namespace Test.Identity.Functional.LiveWebTests
{
    [TestDescription("Verify sign in and sign out functionality")]
    [DeploymentItem(@"LiveWebTests\bin\Debug\rpsticketgenerator.dll.config")]
    [DeploymentItem(@"LiveWebTests\Storax_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Tesla_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\Stress_Settings.xml")]
    [DeploymentItem(@"LiveWebTests\env.txt")]
    public class ValidateRPSSignInAndSignOut : WebTest
    {
        public ValidateRPSSignInAndSignOut()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            //this.Proxy = "127.0.0.1:8888"; // Needed to view in fiddler

            WebTestHelpers helper = new WebTestHelpers();
            EnvironmentData data = helper.LoadEnvironmentData();

            WebTestRequest signin = helper.PerformRPSLogin(data.Username, data.Password, data.EnvironmentName, data.SiteID, data.AuthPolicy);

            yield return signin;
            signin = null;

            WebTestRequest signedIn = new WebTestRequest(data.SiteURL);

            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule1 = new ValidationRuleFindText();
                validationRule1.FindText = "Sign out";
                validationRule1.IgnoreCase = false;
                validationRule1.UseRegularExpression = false;
                validationRule1.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule2 = new ValidationRuleFindText();
                validationRule2.FindText = "Sign in";
                validationRule2.IgnoreCase = false;
                validationRule2.UseRegularExpression = false;
                validationRule2.PassIfTextFound = false;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule3 = new ValidationRuleFindText();
                validationRule3.FindText = "Mobile Dogfood Notifications";
                validationRule3.IgnoreCase = false;
                validationRule3.UseRegularExpression = false;
                validationRule3.PassIfTextFound = true;
                signedIn.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule3.Validate);
            }

            yield return signedIn;
            signedIn = null;

            WebTestRequest request2 = new WebTestRequest("http://live.storax.xbox.com/ShellGamercardV2.ashx");
            request2.Timeout = 60;
            request2.Headers.Add(new WebTestRequestHeader("Pragma", "no-cache"));
            request2.QueryStringParameters.Add("culture", "en-US");
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest("http://10.178.184.234:13100/global/t.fffe07d1/tile/0/10001");
            request3.Timeout = 60;
            request3.Headers.Add(new WebTestRequestHeader("Pragma", "no-cache"));
            yield return request3;
            request3 = null;


            //TODO: Signout code validation is not functioning correctly

            //WebTestRequest signout = new WebTestRequest("http://login.live-int.com/logout.srf?ct=1260594452&rver=6.0.5286.0&lc=1033&id=269655&ru=http:%2F%2Flive.storax.xbox.com%2Fen-US%2Fdefault.aspx&lru=http%3a%2f%2fgames.storax.xbox.com%2f%2fhome");
            //signout.Timeout = 60;
            //signout.FollowRedirects = true;
            
            //yield return signout;
            //signout = null;


            //WebTestRequest request3 = new WebTestRequest("http://games.storax.xbox.com");
            //if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            //{
            //    ValidationRuleFindText validationRule4 = new ValidationRuleFindText();
            //    validationRule4.FindText = "Sign in";
            //    validationRule4.IgnoreCase = false;
            //    validationRule4.UseRegularExpression = false;
            //    validationRule4.PassIfTextFound = true;
            //    request3.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule4.Validate);
            //}
            //if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            //{
            //    ValidationRuleFindText validationRule5 = new ValidationRuleFindText();
            //    validationRule5.FindText = "Xbox Mobile Dogfood";
            //    validationRule5.IgnoreCase = false;
            //    validationRule5.UseRegularExpression = false;
            //    validationRule5.PassIfTextFound = true;
            //    request3.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule5.Validate);
            //}
            //yield return request3;
            //request3 = null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebUITests\LiveWebUITests\LiveWebUITests\EnvAndUserCredentials.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LiveWebUITests
{
    /// <summary>
    /// Represents the user credentials used to Login to the site.
    /// </summary>
   public class EnvAndUserCredentials
    {
        /// <summary>
        /// Environment Name. Ex. Storax, Tesla, StressNet
        /// </summary>
        public string ENV
        {
            get;
            set;
        }
        /// <summary>
        /// Browser Type. Ex. IE or FireFox.
        /// </summary>
        public string BrowserType
        {
            get;
            set;
        }


        /// <summary>
        /// Account username.
        /// </summary>
        public string UserName
        {
            get;
            set;
        }

        /// <summary>
        /// Account password.
        /// </summary>
        public string Password
        {
            get;
            set;
        }

        /// <summary>
        /// Xuid of the User, we will use it to generate the Notifications.
        /// </summary>
        public string Xuid
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebUITests\LiveWebUITests\LiveWebUITests\LogInLogOut.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Test.Common.Library.UnifiedLogger;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
using System.Diagnostics;

namespace LiveWebUITests
{
  static  class LogInLogOut
    {
      public static void DoUILogInToTheSite(BrowserWindow BrowserHandle, EnvAndUserCredentials LogInCredentials, bool IsPersisted)
      {
          UITestControl m_UsernameTextBox = null;
          UITestControl m_PasswordBox = null;
          UITestControl m_SignInButton = null;

          //Set Username
          m_UsernameTextBox = new UITestControl(BrowserHandle);
          m_UsernameTextBox.TechnologyName = "Web";
          m_UsernameTextBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                                 HtmlProperties.Edit.Id, "i0116");
          m_UsernameTextBox.SetFocus();
          m_UsernameTextBox.SetProperty(HtmlProperties.Edit.Text, LogInCredentials.UserName);

          //Set Password
          m_PasswordBox = new UITestControl(BrowserHandle);
          m_PasswordBox.TechnologyName = "Web";
          m_PasswordBox.SearchProperties.Add(HtmlProperties.Edit.ControlType, ControlType.Edit.Name,
                                             HtmlProperties.Edit.Id, "i0118");
          m_PasswordBox.SetFocus();
          m_PasswordBox.SetProperty(HtmlProperties.Edit.Text, LogInCredentials.Password);

          //Click on Sign In
          m_SignInButton = new UITestControl(BrowserHandle);
          m_SignInButton.TechnologyName = "Web";
          m_SignInButton.SearchProperties.Add(HtmlProperties.Button.ControlType, ControlType.Button.Name,
                                              HtmlProperties.Button.Id, "i0011");
          m_SignInButton.EnsureClickable();
          Mouse.Click(m_SignInButton);
          
      }

      public static void DoUILogOutFromTheSite(BrowserWindow BrowserHandle)
      {
          UITestControl m_LogoutLink = null;

          try
          {
              m_LogoutLink = new UITestControl(BrowserHandle);
              m_LogoutLink.TechnologyName = "Web";
              m_LogoutLink.SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, ControlType.Hyperlink.Name);
              m_LogoutLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkHdrSignIn");
              m_LogoutLink.EnsureClickable();
              Mouse.Click(m_LogoutLink);
              Trace.TraceInformation("User has been successfully logged out.");
          }
          catch (Exception)
          {
              throw;
          }
      }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebUITests\LiveWebUITests\LiveWebUITests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveWebUITests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft IT")]
//[assembly: AssemblyProduct("LiveWebUITests")]
//[assembly: AssemblyCopyright("Copyright © Microsoft IT 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("2fa8d66d-c801-4841-9f38-563281cd5f3a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\LiveWebUITests\LiveWebUITests\LiveWebUITests\UITests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Test.Common.Library.UnifiedLogger;
using Test.Common.Library.FakeNotificationsLib;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
using System.Xml.Serialization;
using System.IO;
namespace LiveWebUITests
{
    /// <summary>
    /// Summary description for UnitTest1
    /// </summary>

    [DeploymentItem(@"LiveWebUITests\ENVAndUser.xml")]
    [TestClass]
    public class UITests
    {
        EnvAndUserCredentials objENVAndCredentials = new EnvAndUserCredentials();
        
        public UITests()
        {
            objENVAndCredentials = GetUserInfoAndSetTheEnv();
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext) 
        {
            
        }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        [ClassCleanup()]
        public static void MyClassCleanup() 
        {
            
        }
        
        // Use TestInitialize to run code before running each test 
        [TestInitialize()]
        public void MyTestInitialize()
        {
            Playback.Initialize();
        }
        //
        // Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup() 
        {
            Playback.Cleanup();
        }
        //
        #endregion

        #region UI TESTS
        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyAllTypesOfNotificationsAreVisibleToUser()
        {

            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_InviteNotificationLink = null;
            UITestControl m_NotificatoinDiv = null;
            string m_NotificationId = string.Empty;
            int i = 0;
            Trace.TraceInformation("Running the Test in " + ENV + ".");
            try
            {
                //Delete all the exisiting Notifications for this user and then create one Invite Notification.
                Notifications objNotifications = new Notifications();
                objNotifications.DeleteNotificaiton(objENVAndCredentials.Xuid);
                objNotifications.CreateNotification(Notifications.NotificationType.GameOver, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.GameTie, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.Invitation, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.MessageWaiting, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.Nudge, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.Warning, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.YouLose, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.YourTurn, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                objNotifications.CreateNotification(Notifications.NotificationType.YouWin, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");

                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);
                //Find the Notifications Div and then locate the Invite Notification.
                m_NotificatoinDiv = new UITestControl(m_Browser);
                m_NotificatoinDiv.TechnologyName = "web";
                m_NotificatoinDiv.SearchProperties.Add("id", "divNotes");

                for (i = 0; i < 9; i++)
                {
                    m_NotificationId = "lnkNotificationTypeId" + i.ToString();
                    m_InviteNotificationLink = new UITestControl(m_NotificatoinDiv);
                    m_InviteNotificationLink.SearchProperties.Add("id", m_NotificationId);
                    m_InviteNotificationLink.EnsureClickable();
                }
                if (i == 9)
                {
                    Trace.TraceInformation("Available Notifications are " + i.ToString());
                    Trace.TraceInformation("All the Notifications are visible to the user.");
                }
                else
                {
                    Trace.TraceInformation("Available Notifications are " + i.ToString());
                    Trace.TraceWarning("Only " + i + " Notifications are visible to the user out of 9.");
                }

            }
            catch (Exception error)
            {
                Trace.TraceInformation(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed.");
            }
        }

        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyMax30NotificationsCanBeDisplayedToTheUser()
        {
            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_InviteNotificationLink = null;
            UITestControl m_NotificatoinDiv = null;
            string m_UserSendignNotification = string.Empty;
            string m_NotificationId = string.Empty;
            int i = 0;

            Trace.TraceInformation("Running the Test in " + ENV + ".");
            try
            {
                //Delete all the exisiting Notifications for this user and then create one Invite Notification.
                Notifications objNotifications = new Notifications();
                objNotifications.DeleteNotificaiton(objENVAndCredentials.Xuid);
                Trace.TraceInformation("All the existing Notifications for the User {0} has been deleted successfully.",objENVAndCredentials.UserName);

                for (int j = 0; j < 30; j++)
                {
                    m_UserSendignNotification = "Mobiledogfood" + j.ToString();
                    objNotifications.CreateNotification(Notifications.NotificationType.GameOver, objENVAndCredentials.Xuid, m_UserSendignNotification, 6, 1297287408, 0, "");
                }

                Trace.TraceInformation("30 Notifications has been successfully created for the above user.");

                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);
                
                //Find the Notifications Div and then locate the Invite Notification.
                m_NotificatoinDiv = new UITestControl(m_Browser);
                m_NotificatoinDiv.TechnologyName = "web";
                m_NotificatoinDiv.SearchProperties.Add("id", "divNotes");

                for (i = 0; i < 30; i++)
                {
                    m_NotificationId = "lnkNotificationTypeId" + i.ToString();
                    m_InviteNotificationLink = new UITestControl(m_NotificatoinDiv);
                    m_InviteNotificationLink.SearchProperties.Add("id", m_NotificationId);
                    m_InviteNotificationLink.EnsureClickable();
                }
                if (i == 30)
                {
                    Trace.TraceInformation("Available Notifications are " + i.ToString());
                    Trace.TraceInformation("All the {0} Notifications are visible to the user",i);
                }
                else
                {
                    Trace.TraceInformation("Expected Notifications are " + 30);
                    Trace.TraceWarning("Only " + i + " Notifications are visible to the user out of 30.");
                }

            }
            catch (Exception error)
            {
                Trace.TraceInformation(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed.");
            }
        }

        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyErrorMessageInCaseOfNoNotifications()
        {
            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_ErrorLable = null;
            UITestControl m_NotificatoinDiv = null;
            Trace.TraceInformation("Running the Test in " + ENV + ".");

            try
            {
                //Delete all the exisiting Notifications for this user and then create one Invite Notification.
                Notifications objNotifications = new Notifications();
                objNotifications.DeleteNotificaiton(objENVAndCredentials.Xuid);
                Trace.TraceInformation("All the Notifications for the User {0} has been deleted successfully.",objENVAndCredentials.UserName);

                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);
                //Find the Notifications Div and then locate the Error label.
                m_NotificatoinDiv = new UITestControl(m_Browser);
                m_NotificatoinDiv.TechnologyName = "web";
                m_NotificatoinDiv.SearchProperties.Add("id", "divNotes");

                //Verify the Error message 
                m_ErrorLable = new UITestControl(m_NotificatoinDiv);
                m_ErrorLable.SearchProperties.Add("id", "lblError");
                if (m_ErrorLable.Exists)
                {
                    Trace.TraceInformation("Error Lable exists.");
                }
                else
                {
                    Trace.TraceWarning("Error Lable does not exists.");
                    Assert.Fail();
                }
            }
            catch (Exception error)
            {
                Trace.TraceWarning(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed."); ;
            }
        }


        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyClickingOnTheNotificationOpensTheGamePlayer()
        {
            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_InviteNotificationLink = null;
            UITestControl m_NotificatoinDiv = null;
            Trace.TraceInformation("Running the Test in " + ENV + ".");

            try
            {
                //Delete all the exisiting Notifications for this user and then create one Invite Notification.
                Notifications objNotifications = new Notifications();
                objNotifications.DeleteNotificaiton(objENVAndCredentials.Xuid);
                Trace.TraceInformation("All the Notifications for the User {0} has been deleted successfully.", objENVAndCredentials.UserName);
                objNotifications.CreateNotification(Notifications.NotificationType.Invitation, objENVAndCredentials.Xuid, "Mobiledogfood4", 6, 1297287408, 0, "");
                Trace.TraceInformation("Invite Notifications for the User {0} has been created successfully.", objENVAndCredentials.UserName);
                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);
               
                //Find the Notifications Div and then locate the Invite Notification.
                m_NotificatoinDiv = new UITestControl(m_Browser);
                m_NotificatoinDiv.TechnologyName = "web";
                m_NotificatoinDiv.SearchProperties.Add("id", "divNotes");

                m_InviteNotificationLink = new UITestControl(m_NotificatoinDiv);
                m_InviteNotificationLink.SearchProperties.Add("id", "lnkNotificationTypeId0");
                m_InviteNotificationLink.SearchProperties.Add(HtmlProperties.Hyperlink.Name, "");
                m_InviteNotificationLink.EnsureClickable();
                Mouse.Click(m_InviteNotificationLink);
                //Wait till it opens thee Game Player page.
                while (!m_Browser.Title.StartsWith("XBOX LIVE")) { }
                Trace.TraceInformation("Clicking on the Invite Notification does opens the Game Player");
            }
            catch (Exception error)
            {
                Trace.TraceWarning(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed.");
            }
        }

        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyClickingTheGamerPicOpensTheMyXbox()
        {
            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_GamerTagLink = null;
            UITestControl m_GamerTagDiv = null;
            Trace.TraceInformation("Running the Test in " + ENV + ".");

            try
            {
                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);

                //Find the GamerTag Div.
                m_GamerTagDiv = new UITestControl(m_Browser);
                m_GamerTagDiv.TechnologyName = "web";
                m_GamerTagDiv.SearchProperties.Add("id", "XbcGamercardShell");

                //Find the GamerPic and click it.
                m_GamerTagLink = new UITestControl(m_GamerTagDiv);
                m_GamerTagLink.TechnologyName = "web";
                m_GamerTagLink.SearchProperties.Add("class", "XbcShellHeaderBrandMyXboxGamerCardPicture");
                m_GamerTagLink.EnsureClickable();
                Mouse.Click(m_GamerTagLink);

                //Wait till it opens the Xbox Live Page.
                while (!m_Browser.Title.StartsWith("Xbox.com | Home Page - My Xbox")) { }
                Trace.TraceInformation("Clicking on the Gamerpic does opens the My Xbox page.");
            }
            catch (Exception error)
            {
                Trace.TraceWarning(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed.");
            }
        }



        [DeploymentItem("WTTLog.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.dll")]
        [DeploymentItem("Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.dll")]
        [TestProperty("Owner", "v-manmal")]
        [TestMethod]
        public void VerifyClickingTheGetGoldTodayLinkOpensTheCorrectPage()
        {
            BrowserWindow.CurrentBrowser = objENVAndCredentials.BrowserType;
            string ENV = objENVAndCredentials.ENV;
            BrowserWindow m_Browser = null;
            UITestControl m_SignInLink = null;
            UITestControl m_GetGoldToday = null;
            UITestControl m_GetGoldDiv = null;
            Trace.TraceInformation("Running the Test in " + ENV + ".");

            try
            {
                //Open new Browser
                string EnvUrl = "http://games." + ENV + ".xbox.com";
                m_Browser = BrowserWindow.Launch(new Uri(EnvUrl));

                //Wait till the Home page completely loads.
                while (!m_Browser.Title.StartsWith("Xbox")) { }

                m_SignInLink = new UITestControl(m_Browser);
                m_SignInLink.TechnologyName = "web";
                m_SignInLink.SearchProperties.Add(HtmlProperties.Hyperlink.Id, "lnkSigninIndex");
                m_SignInLink.EnsureClickable();

                //Click on the Sign In link in the home page.
                Mouse.Click(m_SignInLink);

                //Wait till the Login page opens.
                while (!m_Browser.Title.StartsWith("Sign In")) { }

                //LogIn to the site.
                LogInLogOut.DoUILogInToTheSite(m_Browser, objENVAndCredentials, false);
                Trace.TraceInformation("User is signed in to " + EnvUrl + " as User: " + objENVAndCredentials.UserName + " Password: " + objENVAndCredentials.Password + " XUID: " + objENVAndCredentials.Xuid);

                //Find the GetGoldToday Div.
                m_GetGoldDiv = new UITestControl(m_Browser);
                m_GetGoldDiv.TechnologyName = "web";
                m_GetGoldDiv.SearchProperties.Add("id", "XbcGamercardShell");

                //Find the Get Gold Today link and click it.
                m_GetGoldToday = new UITestControl(m_GetGoldDiv);
                m_GetGoldToday.TechnologyName = "web";
                m_GetGoldToday.SearchProperties.Add("class", "XbcShellHeaderSilverUpsell");
                m_GetGoldToday.EnsureClickable();
                Mouse.Click(m_GetGoldToday);

                //Wait till it opens the Billing Information Page.
                while (!m_Browser.Title.StartsWith("Xbox.com | Billing Information")) { }
                Trace.TraceInformation("Clicking on the Get Gold Today! link does opens the Billing Information page.");
            }
            catch (Exception error)
            {
                Trace.TraceWarning(error.Message);
                Assert.Fail();
            }
            finally
            {
                //Log out from the site and close the browser.
                Trace.TraceInformation("Executing the Finally block.");
                LogInLogOut.DoUILogOutFromTheSite(m_Browser);
                m_Browser.Close();
                Trace.TraceInformation("Browser window has been closed.");
            }
        }

        #endregion

        #region Common functions
        public EnvAndUserCredentials GetUserInfoAndSetTheEnv()
        {
            EnvAndUserCredentials objUsercred = new EnvAndUserCredentials();
            if (File.Exists("mobiledogfoodUI.txt"))
            {
                TextReader reader = new StreamReader("mobiledogfoodUI.txt");

                string UserDataInOneRow = reader.ReadLine();
                char[] splitter = { ';' };

                string[] UserData = UserDataInOneRow.Split(splitter);

                objUsercred.ENV = UserData[0].ToString();
                objUsercred.BrowserType = UserData[1].ToString();
                objUsercred.UserName = UserData[2].ToString();
                objUsercred.Password = UserData[3].ToString();
                objUsercred.Xuid = UserData[4].ToString();
            }
            else
            {
                //Default Settings
                XmlSerializer objSerializer = new XmlSerializer(typeof(EnvAndUserCredentials));
                StreamReader objStreamReader = new StreamReader("ENVAndUser.xml");
                objUsercred = (EnvAndUserCredentials) objSerializer.Deserialize(objStreamReader);

            }

            return objUsercred;
        }
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\IdentityTestData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

namespace Test.Identity.Functional.IdentityTests
{
	public class IdentityTestData
	{
		public string UserName { get; set; }

		public string Password { get; set; }

		public long Cid { get; set; }

		public long Puid { get; set; }

		public ulong Xuid { get; set; }

		public string Gamertag { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\IdentityTestServiceResponse.cs ===
﻿using System;
using System.Text;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
    public class IdentityTestServiceResponse
    {
        public object Value { get; set; }

        public string DebugInfo { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\AvatarData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
    /// <summary>
    /// Represents the avatar data.
    /// </summary>
    public class AvatarData
    {
        /// <summary>
        /// Gets or sets the url to retrieve the avatar image.
        /// </summary>
        public string AvatarImageUrl { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\ProfileTestResult.cs ===
﻿using System;
using System.Text;
using System.Runtime.Serialization;
using Leet.UserGameData.DataContracts;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
	[DataContract(Namespace = "")]
	public class ProfileTestResult : Profile
	{
		[DataMember]
		public string UserName { get; set; }
		[DataMember]
		public string Password { get; set; }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\Environments.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
    /// <summary>
    /// Represents the all valid environment definitions.
    /// </summary>
    public class Environments
    {
        /// <summary>
        /// Indicates the environment to test on.
        /// The active environment must be part of the environment definitions.
        /// </summary>
        public string ActiveEnvironment
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the test overrides.
        /// </summary>
        public TestOverrides Overrides { get; set; }

        /// <summary>
        /// Gets or sets the authentication method to use.
        /// Can be RPS or STS.
        /// </summary>
        public string AuthenticationMethod
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies the list of all valid environments.
        /// </summary>
        public List<EnvironmentData> EnvironmentDefinitions
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Specifies the definition about an environment.
    /// </summary>
    public class EnvironmentData
    {
        /// <summary>
        /// Gets or sets the environment name.
        /// </summary>
        public string EnvironmentName { get; set; }

        /// <summary>
        /// Gets or sets the STS Authorization environment data.
        /// </summary>
        public STSAuthEnvrionment STSAuthorization { get; set; }

        /// <summary>
		/// Gets or sets the profile service URL to hit.
        /// </summary>
		public string ProfileServiceTarget { get; set; }

		/// <summary>
		/// Gets or sets the test service URL to hit.
		/// </summary>
		public string TestServiceTarget { get; set; }

		/// <summary>
        /// Gets or sets the RPS Site URL to authenticate against.
        /// </summary>
        public string SiteURL { get; set; }

        /// <summary>
        /// Gets or sets the ID of the site to authenticate against.
        /// </summary>
        public string SiteID { get; set; }

        /// <summary>
        /// Gets or sets the list of all defined Game Titles for this environment.
        /// </summary>
        public List<GameTitle> GameTitles { get; set; }
    }

    /// <summary>
    /// Represents the environment data for requesting STS tokens.
    /// </summary>
    public class STSAuthEnvrionment
    {
        /// <summary>
        /// Gets or sets the XBlob server name.
        /// </summary>
        public string XBlobName { get; set; }

        /// <summary>
        /// Gets or sets the port number for the SG service.
        /// </summary>
        public string Port { get; set; }

        /// <summary>
        /// Gets or sets the platform type.
        /// </summary>
        public string PlatformType { get; set; }

        /// <summary>
        /// Gets or sets the Title Id.
        /// </summary>
        public string TitleId { get; set; }

        /// <summary>
        /// Gets or sets the Title Version.
        /// </summary>
        public string TitleVersion { get; set; }

        /// <summary>
        /// Gets or sets the Client Version.
        /// </summary>
        public string ClientVersion { get; set; }

        /// <summary>
        /// Gets or sets the Device Id.
        /// </summary>
        public string DeviceId { get; set; }
    }

    /// <summary>
    /// Indicates the type of title.
    /// </summary>
    public enum GameTitleType
    {
        /// <summary>
        /// Indicates that the game is a XBox 360 title.
        /// </summary>
        Xbox360,
        /// <summary>
        /// Indicates that the game is a non XBox 360 title.
        /// </summary>
        Other
    }

    /// <summary>
    /// Represents a game title.
    /// </summary>
    public class GameTitle
    {
        /// <summary>
        /// Gets or sets the Id of the game title.
        /// </summary>
        public string TitleId { get; set; }

        /// <summary>
        /// Gets or sets the name of the game.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type of the game title.
        /// </summary>
        public GameTitleType TitleType { get; set; }

        /// <summary>
        /// Gets or sets a list of achievements associated with this game.
        /// </summary>
        public List<GameAchievement> GameAchievements { get; set; }
    }

    /// <summary>
    /// Represents a Game achievement.
    /// </summary>
    public class GameAchievement
    {
        /// <summary>
        /// Gets or sets the description of the achievement.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the name of the achievement.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Id of the achievement.
        /// </summary>
        public uint AchievementId { get; set; }
    }

    /// <summary>
    /// Represents the test overrides.
    /// </summary>
    public class TestOverrides
    {
        /// <summary>
        /// Gets or sets the active user credentials.
        /// </summary>
        public UserCredential ActiveUser { get; set; }

        /// <summary>
        /// Gets or sets a flag to indicate whether to use an offline account.
        /// </summary>
        public bool UseOfflineAccount { get; set; }

        /// <summary>
        /// Indicates whether to modify the profile in the constructor.
        /// </summary>
        public bool ModifyProfileAtStart { get; set; }
    }

    /// <summary>
    /// Represents a user credential.
    /// </summary>
    public class UserCredential
    {
        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        public string Password { get; set; }

        /// <summary>
        /// Checks if the credentials have valid data.
        /// </summary>
        /// <returns>True if the credentials contain valid data, otherwise false.</returns>
        public bool IsValid()
        {
            if (String.IsNullOrEmpty(Username) || String.IsNullOrEmpty(Password))
                return false;
            else
                return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\TestAccount.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using live.common;
using UserLib;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
    /// <summary>
    /// Represents a test account on an environmnet or xblob.
    /// </summary>
    public class TestAccount
    {
        /// <summary>
        /// Gets or sets the gamer profile info.
        /// </summary>
        public GamerProfileInfo GamerProfile { get; set; }

        /// <summary>
        /// Gets or sets the user info of the Xbl account.
        /// </summary>
        public XblUserInfo XblUser { get; set; }

        /// <summary>
        /// Indicates whether the account is an offline account.
        /// </summary>
        public bool IsOffline { get; set; }

        /// <summary>
        /// Clones a test account from the specified user lib account object.
        /// </summary>
        /// <param name="UserLibAccount">The user lib account object to clone from.</param>
        public void CloneFrom(Account UserLibAccount)
        {
            if (UserLibAccount == null)
                throw new Exception("Cannot clone from a null userlib account object.");

            //Clone GamerProfile
            CloneGamerProfileFrom(UserLibAccount);

            //Clone XBL User
            CloneXBLAccountInfoFrom(UserLibAccount);
        }

        /// <summary>
        /// Clones the gamerprofile from the specified user lib account object.
        /// </summary>
        /// <param name="UserLibAccount">The user lib account object to clone from.</param>
        public void CloneGamerProfileFrom(Account UserLibAccount)
        {
            if (UserLibAccount == null)
                throw new Exception("Cannot clone from a null userlib account object.");

            //Check if GamerProfile is null
            if (UserLibAccount.GamerProfile == null)
                this.GamerProfile = null;

            //Clone
            this.GamerProfile = new GamerProfileInfo()
            {
                AchievementsEarned = UserLibAccount.GamerProfile.AchievementsEarned,
                Bio = UserLibAccount.GamerProfile.Bio.Replace("\0", ""),
                GamerPicture = UserLibAccount.GamerProfile.GamerPicture.Replace("\0", ""),
                Location = UserLibAccount.GamerProfile.Location.Replace("\0", ""),
                Motto = UserLibAccount.GamerProfile.Motto.Replace("\0", ""),
                Name = UserLibAccount.GamerProfile.Name.Replace("\0", ""),
                PersonalPicture = UserLibAccount.GamerProfile.PersonalPicture.Replace("\0", ""),
                RawGamerPicture = UserLibAccount.GamerProfile.RawGamerPicture.Replace("\0", ""),
                RawRep = UserLibAccount.GamerProfile.RawRep,
                Region = UserLibAccount.GamerProfile.Region,
                Rep = UserLibAccount.GamerProfile.Rep,
                Score = UserLibAccount.GamerProfile.Score,
                TitlesPlayed = UserLibAccount.GamerProfile.TitlesPlayed,
                Zone = UserLibAccount.GamerProfile.Zone
            };
        }

        /// <summary>
        /// Clones the XBLUser info from the specified user lib account object.
        /// </summary>
        /// <param name="UserLibAccount">The user lib account object to clone from.</param>
        public void CloneXBLAccountInfoFrom(Account UserLibAccount)
        {
            if (UserLibAccount == null)
                throw new Exception("Cannot clone from a null userlib account object.");

            //Check if XBLUser is null
            if (UserLibAccount.XblUser == null)
                this.XblUser = null;

            //Clone
            this.XblUser = new XblUserInfo()
            {
                GamerTag = UserLibAccount.XblUser.Gamertag,
                OwnerPassportInfo = UserLibAccount.XblUser.Settings.OwnerPassportInfo,
                PersonalInfo = UserLibAccount.XblUser.Settings.PersonalInfo,
                Puid = UserLibAccount.XblUser.Puid,
                UserPassportInfo = UserLibAccount.XblUser.Settings.UserPassportInfo,
                UserType = UserLibAccount.XblUser.Settings.UserType
            };
        }
    }

    /// <summary>
    /// Represents the Gamer Profile.
    /// </summary>
    public class GamerProfileInfo
    {
        /// <summary>
        /// Gets or sets the number of achievements earned.
        /// </summary>
        public uint AchievementsEarned { get; set; }

        /// <summary>
        /// Gets or sets the Bio of the Gamer.
        /// </summary>
        public string Bio { get; set; }

        /// <summary>
        /// Gets or sets the picture of the Gamer.
        /// </summary>
        public string GamerPicture { get; set; }

        /// <summary>
        /// Gets or sets the location of the Gamer.
        /// </summary>
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the motto of the Gamer.
        /// </summary>
        public string Motto { get; set; }

        /// <summary>
        /// Gets or sets the name of the Gamer. 
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the personal picture of the gamer.
        /// </summary>
        public string PersonalPicture { get; set; }

        /// <summary>
        /// Gets or sets the raw picture of the Gamer.
        /// </summary>
        public string RawGamerPicture { get; set; }

        /// <summary>
        /// Gets or sets the raw rep of the Gamer.
        /// </summary>
        public double RawRep { get; set; }

        /// <summary>
        /// Gets or sets the country id of the Gamer.
        /// </summary>
        public CountryId Region { get; set; }

        /// <summary>
        /// Gets or sets the rep of the Gamer.
        /// </summary>
        public double Rep { get; set; }

        /// <summary>
        /// Gets or sets the Gamer score.
        /// </summary>
        public uint Score { get; set; }

        /// <summary>
        /// Gets or sets the number of titles played by the Gamer.
        /// </summary>
        public uint TitlesPlayed { get; set; }

        /// <summary>
        /// Gets or sets the Gamer zone.
        /// </summary>
        public GamerZone Zone { get; set; }
    }

    /// <summary>
    /// Represents the info about the Xbl user account.
    /// </summary>
    public class XblUserInfo
    {
        /// <summary>
        /// Gets or sets the gamertag of the Gamer.
        /// </summary>
        public string GamerTag { get; set; }

        /// <summary>
        /// Gets or sets the Puid of the account.
        /// </summary>
        public ulong Puid { get; set; }

        /// <summary>
        /// Gets or sets the passport info about the owner account
        /// for this offline account.
        /// </summary>
        public PassportInfo OwnerPassportInfo { get; set; }

        /// <summary>
        /// Gets or sets the personal info of this offline account.
        /// </summary>
        public PersonalInfo PersonalInfo { get; set; }

        /// <summary>
        /// Gets or sets the passport info about the user for
        /// this offline account.
        /// </summary>
        public PassportInfo UserPassportInfo { get; set; }

        /// <summary>
        /// Gets or sets the tier of the Gamer account.
        /// </summary>
        public XblUserTier UserType { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CommonObjects")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("CommonObjects")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("45283b1e-9eb1-46c6-9ddf-b1cf8b89509b")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\CommonObjects\TestHelper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using Leet.UserGameData.DataContracts;
using UserLib;
using live.common;
using live.lfm;
using live.protocol.Presence;
using live.server;
using Microsoft.WindowsLive.Test.PassportInterface;

namespace Test.Identity.Functional.ProfileServiceTests.CommonObjects
{
    /// <summary>
    /// Represents helper methods used for interacting with the configuration XMLs.
    /// </summary>
    public static class TestHelper
    {
        #region XML Serialization helper methods
        /// <summary>
        /// Loads an object using a data contract.
        /// </summary>
        /// <param name="TypeOfObject">The type of the object to load.</param>
        /// <param name="XMLFileName">The XML filename which contains the serialized object.</param>
        /// <returns>An object which is stored in the specified XML file.</returns>
        public static object LoadDataContract(Type TypeOfObject, string XMLFileName)
        {
            DataContractSerializer m_Serializer = new DataContractSerializer(TypeOfObject);
            object m_StateObject;

            using (FileStream m_Reader = new FileStream(XMLFileName, FileMode.Open))
            {
                m_StateObject = m_Serializer.ReadObject(XmlDictionaryReader.CreateTextReader(m_Reader, XmlDictionaryReaderQuotas.Max));
            }

            return m_StateObject;
        }

        
        /// <summary>
        /// Saves an object using a data contract.
        /// </summary>
        /// <param name="ObjectToSave">The object to save.</param>
        /// <param name="XMLFileName">The XML filename where the object will be saved.</param>
        public static void SaveDataContract(object ObjectToSave, string XMLFileName)
        {
            DataContractSerializer m_Serializer = new DataContractSerializer(ObjectToSave.GetType());

            using (FileStream m_Writer = new FileStream(XMLFileName, FileMode.Create))
            {
                m_Serializer.WriteObject(XmlDictionaryWriter.CreateTextWriter(m_Writer), ObjectToSave);
                m_Writer.Flush();
            }
        }

        /// <summary>
        /// Saves the specified object to the specified XML file.
        /// </summary>
        /// <param name="ObjectToSave">The object to save.</param>
        /// <param name="XMLFileName">The XML filename where the object will be saved.</param>
        public static void SaveXmlObject(object ObjectToSave, string XMLFileName)
        {
            XmlSerializer m_Serializer = new XmlSerializer(ObjectToSave.GetType());

            using (TextWriter m_Writer = new StreamWriter(XMLFileName, false))
            {
                m_Serializer.Serialize(m_Writer, ObjectToSave);
            }
        }

        /// <summary>
        /// Load an object from the specified XML file.
        /// </summary>
        /// <param name="TypeOfObject">The type of the object to load.</param>
        /// <param name="XMLFileName">The XML filename which contains the serialized object.</param>
        /// <returns>An object which is stored in the specified XML file.</returns>
        public static object LoadXmlObject(Type TypeOfObject, string XMLFileName)
        {
            XmlSerializer m_Serializer = new XmlSerializer(TypeOfObject);
            object m_StateObject;

            using (TextReader m_Reader = new StreamReader(XMLFileName))
            {
                m_StateObject = m_Serializer.Deserialize(m_Reader);
            }

            return m_StateObject;
        } 
        #endregion

        #region Randomization helper methods
        /// <summary>
        /// Generates a random alpha-numeric string of the specified length.
        /// </summary>
        /// <param name="Length">The length of the string.</param>
        /// <returns>A random alpha-numeric string.</returns>
        public static string GetRandomString(int Length)
        {
            RandomNumberGenerator m_RandGen = RandomNumberGenerator.Create();
            char[] chars = new char[Length];
            string validChars = "abcdefghijklmnopqrstuvwxyzABCEDFGHIJKLMNOPQRSTUVWXYZ1234567890";

            for (int m_Count=0; m_Count< Length; m_Count++)
            {         
                byte[] bytes = new byte[1];
                m_RandGen.GetBytes(bytes);
                Random rnd = new Random(bytes[0]);
                chars[m_Count] = validChars[rnd.Next(0,61)];
            }
            
            return (new string(chars)); 
        }

        /// <summary>
        /// Selects randomly between Gold and Silver tiers.
        /// </summary>
        /// <returns>A Xbl user tier.</returns>
        public static XblUserTier SelectRandomXblTier()
        {
            Random m_Random = new Random();

            if (m_Random.Next(1, 3) == 1)
                return XblUserTier.Gold;
            else
                return XblUserTier.Silver;
        }

        /// <summary>
        /// Selects a random gamer zone.
        /// </summary>
        /// <returns></returns>
        public static GamerZone SelectRandomZone()
        {
            Random m_Random = new Random();

            return (GamerZone)m_Random.Next(0, 5);
        }
        #endregion

        public static string g_XblobName = "";

        #region XBL Account helper methods
        /// <summary>
        /// Creates a XBL user for the specified tier.
        /// </summary>
        /// <param name="Tier">The tier of the user to create.</param>
        /// <returns>A XBL account that was created.</returns>
        public static Account CreateXBLAccount(XblUserTier Tier)
        {
            TargetEnvironment.SetEnvironment(g_XblobName);
            AccountSettings m_XBLAccSettings =
                new AccountSettings(Tier, PassportType.Real, ParentalControl.None);

            Account m_XBLAccount = new Account(m_XBLAccSettings);

            //Stall for 30 seconds
            //BUG: 1705
            Wait(30);

            return m_XBLAccount;
        }

        /// <summary>
        /// Loads an existing XBL user account.
        /// </summary>
        /// <param name="Username">The username for the account.</param>
        /// <param name="Password">The password for the account.</param>
        /// <returns>A XBL account that was created.</returns>
        public static Account LoadExistingXBLAccount(string Username, string Password)
        {
            TargetEnvironment.SetEnvironment(g_XblobName);
            return new Account(Username, Password);
        }

        /// <summary>
        /// Adds the specified game title to the user played game list.
        /// </summary>
        /// <param name="Game">The defined game title.</param>
        /// <param name="XBLUserAccount">The account for which the title will be added.</param>
        public static void AddGameHistory(GameTitle Game, ref Account XBLUserAccount)
        {
            //Check if title is a Xbox 360 title.
            //Currently we only support 360 titles, pending userlib modification.
            if (Game.TitleType == GameTitleType.Other)
                return;

            XBLUserAccount.AddTitles(new uint[] { ParseTitleId(Game.TitleId) });
        }

        /// <summary>
        /// Adds a list of defined achievements for the specified game.
        /// </summary>
        /// <param name="Game">The defined game title containing a list of achievements to award.</param>
        /// <param name="XBLUserAccount">The account for which the achievement will be added.</param>
        ///<param name="LastGameAchievement">Indicates the last achievement to be awarded.</param>
        public static void AddGameAchievements(GameTitle Game, ref Account XBLUserAccount)
        {
            //Check if title is a Xbox 360 title.
            //Currently we only support 360 titles, pending userlib modification.
            if (Game.TitleType == GameTitleType.Other)
                return;

            //Award achievements serially
            foreach (GameAchievement m_Achievement in Game.GameAchievements)
            {
                XBLUserAccount.AwardAchievements(new Title(ParseTitleId(Game.TitleId),
                                                            new uint[] { m_Achievement.AchievementId },
                                                            false)
                                                );

            }
        }

        /// <summary>
        /// Adds the specified list of users as friends of the specified account.
        /// </summary>
        /// <param name="FriendsList">The list of users to add as friends.</param>
        /// <param name="XBLUserAccount">The account to which the friends will be added.</param>
        public static void AddFriends(Collection<PassportInfo> FriendsList, ref Account XBLUserAccount)
        {
            XBLUserAccount.CreateCommunity(0, FriendsList.Count, 0, FriendsList, null);
        }

        /// <summary>
        /// Gets a list of the gamertags of the specified user's friends.
        /// </summary>
        /// <param name="XBLUserAccout">The account whose friends will be fetched.</param>
        /// <returns></returns>
        public static List<string> GetFriendsGamerTag(Account XBLUserAccout)
        {
            Xbox360 m_UserXbox360 = new Xbox360();
            GetFriendsListData[] m_FriendsList = null;
            List<string> m_FriendGamerTags = new List<string>();

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccout.XblUser);

            //Retrieve friends
            m_FriendsList = Presence.GetFriendsList(m_UserXbox360.Client, XBLUserAccout.XblUser, XBLUserAccout.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccout.XblUser);
            m_UserXbox360.ShutdownConsole();

            //Extract GamerTags
            foreach (GetFriendsListData m_FriendData in m_FriendsList)
                m_FriendGamerTags.Add(m_FriendData.szGamerTag);

            return m_FriendGamerTags;
        }

        /// <summary>
        /// Adds an individual friend, waits for request and Accepts friend
        /// </summary>
        /// <param name="XBLUserAccount">Account adding friend</param>
        /// <param name="XBLFriendAccount">Friend to add</param>
        public static void AddFriend(Account XBLUserAccount, Account XBLFriendAccount)
        {
            Xbox360 m_UserXbox360 = new Xbox360();

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccount.XblUser);

            Presence.AddFriend(m_UserXbox360.Client, XBLUserAccount.XblUser, XBLFriendAccount.XblUser);
            CheckForPendingFriendRequest(XBLUserAccount, XBLFriendAccount);
            Presence.AcceptFriend(m_UserXbox360.Client, XBLUserAccount.XblUser, XBLFriendAccount.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccount.XblUser);
            m_UserXbox360.ShutdownConsole();
        }

        /// <summary>
        /// Determines if XBL Friend has a pending Friend Request
        /// </summary>
        /// <param name="XBLUserAccount">Account making friend request.</param>
        /// <param name="XBLFriendAccount">Account waiting for pending friend request.</param>
        /// <returns>True if pending friend request, false otherwise.</returns>
        public static bool CheckForPendingFriendRequest(Account XBLUserAccount, Account XBLFriendAccount)
        {
            Xbox360 m_UserXbox360 = new Xbox360();

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLFriendAccount.XblUser);

            try
            {
                Notification.WaitForBuddyStatusRequested(m_UserXbox360.Client, XBLFriendAccount.XblUser, XBLUserAccount.XblUser);
            }
            catch(Exception err)
            {
                string foo = err.Message;
                return false;
            }
            
            //Signoff
            m_UserXbox360.Live.Logout(XBLFriendAccount.XblUser);
            m_UserXbox360.ShutdownConsole();

            return true;
        }

        /// <summary>
        /// Sets the Gamer Name.
        /// </summary>
        /// <param name="Name">The gamer name to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerName(string Name, ref Account XBLUserAccount)
        {
           
            XBLUserAccount.GamerProfile.WriteProfileSettings(null,
                                                             Name,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null);
            
        }

        /// <summary>
        /// Sets the Gamer Bio.
        /// </summary>
        /// <param name="Bio">The gamer bio to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerBio(string Bio, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(null,
                                                             null,
                                                             null,
                                                             Bio,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null);
        }

        /// <summary>
        /// Sets the Gamer Zone.
        /// </summary>
        /// <param name="Zone">The gamer zone to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerZone(GamerZone Zone, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             Zone,
                                                             null);
        }

        /// <summary>
        /// Sets the Gamer Location.
        /// </summary>
        /// <param name="Location">The gamer location to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerLocation(string Location, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(null,
                                                             null,
                                                             Location,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null);
        }

        /// <summary>
        /// Sets the Gamer Motto.
        /// </summary>
        /// <param name="Motto">The gamer motto to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerMotto(string Motto, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(Motto,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null,
                                                             null);
        }

        /// <summary>
        /// Sets the Gamer Pic.
        /// </summary>
        /// <param name="GamerPic">The gamer pic to set.</param>
        /// <param name="XBLUserAccount">The account for which the name will be set.</param>
        public static void SetGamerPicture(string GamerPic, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(null,
                                                             null,
                                                             null,
                                                             null,
                                                             GamerPic,
                                                             null,
                                                             null,
                                                             null,
                                                             null);
        }

        /// <summary>
        /// Modifies the specified Gamer Profile properties in bulk.
        /// </summary>
        /// <param name="Motto">The gamer motto to set.</param>
        /// <param name="Name">The gamer name to set.</param>
        /// <param name="Location">The gamer location to set.</param>
        /// <param name="Bio">The gamer bio to set.</param>
        /// <param name="GamerPic">The gamer pic to set.</param>
        /// <param name="Zone">The gamer zone to set.</param>
        /// <param name="XBLUserAccount">The account for which the profile properties will be set.</param>
        public static void SetGamerProfileProperties(string Motto, string Name, string Location, string Bio, string GamerPic,
            GamerZone Zone, ref Account XBLUserAccount)
        {
            XBLUserAccount.GamerProfile.WriteProfileSettings(Motto,
                                                              Name,
                                                              Location,
                                                              Bio,
                                                              GamerPic,
                                                              null,
                                                              null,
                                                              Zone,
                                                              null);
            
        }

        /// <summary>
        /// Gets the resolved Url for the specified Gamer Pic.
        /// </summary>
        /// <param name="GamerPic">The gamer pic to get the url for.</param>
        /// <param name="FriendlyName">Out parameter indicating the Gamer Pic friendly name.</param>
        /// <returns>A string representing the url for the specified gamer pic.</returns>
        public static string GetGamerPicUrl(string GamerPic, out string FriendlyName)
        {
            string m_GamerPicUrl = "http://image.xboxlive.com/global/";

            //Get rid of trailing '\0'
            if (GamerPic.Substring(GamerPic.Length - 1) == "\0")
                GamerPic = GamerPic.Substring(0, GamerPic.Length - 1);

            switch (GamerPic.ToLowerInvariant())
            {
                case "585207d10002000100010001":
                    m_GamerPicUrl += "t.585207d1/tile/0/20001";
                    FriendlyName = "Bubbles";
                    break;
                case "585207d10002000200010002":
                    m_GamerPicUrl += "t.585207d1/tile/0/20002";
                    FriendlyName = "Dragon";
                    break;
                case "585207d10002000300010003":
                    m_GamerPicUrl += "t.585207d1/tile/0/20003";
                    FriendlyName = "Blue Guy 1";
                    break;
                case "585207d10002000400010004":
                    m_GamerPicUrl += "t.585207d1/tile/0/20004";
                    FriendlyName = "Gorrilla";
                    break;
                case "585207d10002000500010005":
                    m_GamerPicUrl += "t.585207d1/tile/0/20005";
                    FriendlyName = "Fish";
                    break;
                case "585207d10002000600010006":
                    m_GamerPicUrl += "t.585207d1/tile/0/20006";
                    FriendlyName = "Kitty";
                    break;
                case "585207d10002000700010007":
                    m_GamerPicUrl += "t.585207d1/tile/0/20007";
                    FriendlyName = "Blue Guy 2";
                    break;
                case "585207d10002000800010008":
                    m_GamerPicUrl += "t.585207d1/tile/0/20008";
                    FriendlyName = "Chess";
                    break;
                case "585207d10002000900010009":
                    m_GamerPicUrl += "t.585207d1/tile/0/20009";
                    FriendlyName = "Purple Chatter";
                    break;
                case "585207d10002000a0001000a":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000a";
                    FriendlyName = "Elf Lady";
                    break;
                case "585207d10002000b0001000b":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000b";
                    FriendlyName = "Horse";
                    break;
                case "585207d10002000c0001000c":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000c";
                    FriendlyName = "Red-Haired Alien";
                    break;
                case "585207d10002000d0001000d":
                    m_GamerPicUrl += "t.585207d1/tile/0/2000d";
                    FriendlyName = "Green Monster 1";
                    break;
                case "fffe07d10002000100010001":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20001";
                    FriendlyName = "Xbox Rings";
                    break;
                case "fffe07d10002000200010002":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20002";
                    FriendlyName = "Boy";
                    break;
                case "fffe07d10002000300010003":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20003";
                    FriendlyName = "Chimp";
                    break;
                case "fffe07d10002000400010004":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20004";
                    FriendlyName = "Smiley";
                    break;
                case "fffe07d10002000500010005":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20005";
                    FriendlyName = "Pirate";
                    break;
                case "fffe07d10002000600010006":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20006";
                    FriendlyName = "Panda";
                    break;
                case "fffe07d10002000700010007":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20007";
                    FriendlyName = "Pink-Haired Girl";
                    break;
                case "fffe07d10002000800010008":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20008";
                    FriendlyName = "Dragon Sillouette";
                    break;
                case "fffe07d10002000900010009":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/20009";
                    FriendlyName = "Dog";
                    break;
                case "fffe07d10002000a0001000a":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000a";
                    FriendlyName = "Blue Guy 3";
                    break;
                case "fffe07d10002000b0001000b":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000b";
                    FriendlyName = "Soccer Ball";
                    break;
                case "fffe07d10002000c0001000c":
                    m_GamerPicUrl += "t.fffe07d1/tile/0/2000c";
                    FriendlyName = "Skull";
                    break;
                default:
                    throw new Exception("The specified Gamer Pic is unknown.");
            }
            return m_GamerPicUrl;
        }
        #endregion

        #region Passport User helper methods
        /// <summary>
        /// Gets the Cid of the specified XBL account.
        /// </summary>
        /// <param name="XBLUserAccount">The XBL account whose Cid will be fetched.</param>
        /// <returns>A string representing the Cid.</returns>
        public static string GetUserCid(Account XBLUserAccount)
        {
            PassportUser m_PUser = GetPassportUser(XBLUserAccount);
            return m_PUser.GetCID();
        }

        /// <summary>
        /// Updates the Passport first and last name of the specified XBL User account.
        /// </summary>
        /// <param name="FirstName">The first name to set.</param>
        /// <param name="LastName">The last name to set.</param>
        /// <param name="XBLUserAccount">The XBL account whose name will be set.</param>
        public static void UpdatePassportUserName(string FirstName, string LastName, Account XBLUserAccount)
        {
            PassportUser m_PUser = GetPassportUser(XBLUserAccount);

            //Set name
            m_PUser.FirstName = FirstName;
            m_PUser.LastName = LastName;

            //Reset password back to original
            m_PUser.Password = XBLUserAccount.XblUser.Settings.UserPassportInfo.Password;

            //Update user account
            UpdatePassportAccount(m_PUser);
        }

        /// <summary>
        /// Gets the passport user instance for the specified XBL account.
        /// </summary>
        /// <param name="XBLAccount">The XBL account whose passport user will be fetched.</param>
        /// <returns>A PassportUser object representing the passport user of the specified XBL account.</returns>
        private static PassportUser GetPassportUser(Account XBLUserAccount)
        {
            PassportInterface m_PInterface = new PassportInterface(Clusters.INT);
            PassportUser m_PUser = null;

            //Check if membername contains non standard domain
            if (XBLUserAccount.XblUser.Settings.UserPassportInfo.MemberName.Contains("hotmail") ||
                XBLUserAccount.XblUser.Settings.UserPassportInfo.MemberName.Contains("live") ||
                XBLUserAccount.XblUser.Settings.UserPassportInfo.MemberName.Contains("passport")
               )
            {
                m_PUser = m_PInterface.GetExistingUserByMemberName(XBLUserAccount.XblUser.Settings.UserPassportInfo.MemberName);
            }
            else
            {
                string m_PassportMemName = XBLUserAccount.XblUser.Settings.UserPassportInfo.MemberName.Replace('@', '%');
                m_PassportMemName += "@passport-int.com";
                m_PUser = m_PInterface.GetExistingUserByMemberName(m_PassportMemName);
            }

            return m_PUser;
        }

        /// <summary>
        /// Updates the specified passport account with modified values.
        /// </summary>
        /// <param name="PassportAccount">The passport account which will be updated.</param>
        private static void UpdatePassportAccount(PassportUser PassportAccount)
        {
            PassportInterface m_PInterface = new PassportInterface(Clusters.INT);

            //Check if membername contains any XBL registed domain
            //Note: We need to change any XBL domain to upper case. Currently we found this issue with XBLTEST.COM.
            //There might be other domains that need this check. If we do not supply the suffix in Upper case for these
            //domains, then PassportInterface throws an error. Not sure why!
            if (PassportAccount.MemberName.Contains("xbltest.com"))
                PassportAccount.MemberName = PassportAccount.MemberName.Replace("xbltest.com", "XBLTEST.COM");

            m_PInterface.UpdateUser(PassportAccount);
        }
        #endregion

        #region Misc helper methods
        /// <summary>
        /// Stalls the processing for the specified number of seconds.
        /// </summary>
        /// <param name="Seconds">The number of seconds to stall.</param>
        public static void Wait(int Seconds)
        {
            DateTime start = DateTime.Now;
            while (DateTime.Now.Subtract(start).Seconds < Seconds)
            { }
        }

        /// <summary>
        /// Parses a title id string specified in HEX and converts it to
        /// an uint.
        /// </summary>
        /// <param name="TitleId">A string representing the Title Id in Hex.</param>
        /// <returns>An uint representing the parsed title id.</returns>
        public static uint ParseTitleId(string TitleId)
        {
            //Remove Hex specifier, if found
            if (TitleId.IndexOf("0x") != -1)
                TitleId = TitleId.Replace("0x", "");

            return uint.Parse(TitleId, System.Globalization.NumberStyles.HexNumber);
        } 
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\IdentityTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IdentityTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("IdentityTests")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("4edd87fb-5efe-4f54-8636-a382a6206886")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\ProfileServiceTests\AvatarImageTests.cs ===
﻿using System;
using System.Text;
using System.Xml.Serialization;
using System.IO;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MS.Internal.Test.Tools;
using System.Net;
using System.Diagnostics;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Test.Identity.Functional.ProfileServiceTests
{
    /// <summary>
    /// Summary description for AvatarImageTests
    /// </summary>
    [TestClass]
    public class AvatarImageTests
    {
        private AvatarData g_Avatar = null;

        public AvatarImageTests()
        {
            LoadData();
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        /// <summary>
        /// Checks the avatar image and verifies that it is not the default silhouette image.
        /// </summary>
        [TestMethod]
        public void CheckAvatarImage()
        {
            bool m_ImageCompare;

            Trace.TraceInformation("Checking avatar image at: " + g_Avatar.AvatarImageUrl);

            try
            {
                DownloadAvatarImage();
                
                m_ImageCompare = ImageComparer.Compare("avatar.png", "avatar_default.png");
                Trace.TraceInformation("Image compare result: " + m_ImageCompare.ToString());

                if (m_ImageCompare)
                {
                    Trace.TraceWarning("Default silhouette image was returned for the avatar image url.");
                    Trace.TraceWarning("An actual avatar image was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Default silhouette image was returned for the avatar image url.");
                }
                else
                {
                    Trace.TraceInformation("Avatar image was returned as expected.");
                    Trace.TraceInformation("Test passed.");
                }
            }
            catch (ImageComparer.ImageDimensionMismatchException m_ImageError)
            {
                Trace.TraceWarning("The downloaded image dimension is incorrect.");
                Trace.TraceError(m_ImageError.ToString());
                Assert.Fail("The downloaded image dimension is incorrect.");
            }
            catch (ImageComparer.ImageMismatchException m_ImageError)
            {
                Trace.TraceWarning("An image mismatch error was encountered.");
                Trace.TraceError(m_ImageError.ToString());
                Assert.Fail("An image mismatch error was encountered.");
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching avatar image data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching avatar image data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching avatar image data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching avatar image data.");
                }
            }
        }

        /// <summary>
        /// Loads the avatar data.
        /// </summary>
        private void LoadData()
        {
            #region Check if required files are present
            if (!File.Exists("Avatar.xml"))
                throw new Exception("Avatar definition file 'Avatar.xml' does not exist.");
            if (!File.Exists("avatar_default.png"))
                throw new Exception("Default avatar pic 'avatar_default.png' does not exist."); 
            #endregion

            #region Load Avatar data
            g_Avatar = (AvatarData)TestHelper.LoadXmlObject(typeof(AvatarData), "Avatar.xml");
            #endregion
        }

        /// <summary>
        /// Downloads the avatar image.
        /// </summary>
        private void DownloadAvatarImage()
        {
            HttpWebRequest m_AvatarRequest = null;
            Stream m_ResponseStream = null;
            byte[] m_WriteBuffer = new byte[1024];
            int m_BytesRead = 0;
            FileStream m_DownloadedAvatarImage = null;

            Trace.TraceInformation("Creating avatar image request for Url: " + g_Avatar.AvatarImageUrl);
            m_AvatarRequest = (HttpWebRequest)HttpWebRequest.Create(g_Avatar.AvatarImageUrl);
            m_ResponseStream = m_AvatarRequest.GetResponse().GetResponseStream();
            m_DownloadedAvatarImage = new FileStream("avatar.png", FileMode.Create, FileAccess.Write);

            Trace.TraceInformation("Downloading avatar image to 'avatar.png'");
            while ((m_BytesRead = m_ResponseStream.Read(m_WriteBuffer, 0, 1024)) > 0)
            {
                m_DownloadedAvatarImage.Write(m_WriteBuffer, 0, m_BytesRead);
                m_DownloadedAvatarImage.Flush();
                Trace.TraceInformation("...Wrote " + m_BytesRead.ToString() + " bytes.");
            }

            m_DownloadedAvatarImage.Close();
            Trace.TraceInformation("Avatar image has been downloaded successfully.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\PropTestXml\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("PropTestXml")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("PropTestXml")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
//[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fe20f267-e070-42c5-b12e-5565683d59b7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\IdentityTests\IdentityTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
//using Leet.UserGameData.DataContracts;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using Test.Identity.Common;

namespace Test.Identity.Functional.IdentityTests
{
    /// <summary>
    ///  Contains the test methods for testing Identity
    /// </summary>
    [TestClass]
    public class IdentityTests
    {
        #region Global Members
        string g_ActiveEnvironment = "";
        string g_TestServiceTarget = "";
        string g_SiteID = "";
        string g_SiteUrl = "";
        string g_Email = "";
        string g_Username = "";
        string g_Password = "";
        STSAuthEnvrionment g_STSAuthData = null;
        
        static bool g_ImplementProxy = true;
        static string[] g_ProxyBypass = { ".microsoft.com", ".xboxlive.com", ".xbox.com", "leo.identity.activeauthtest.com" };
        static string g_AuthPolicy = "MBI";
        static PassportEnvironment g_PassportEnvironment = PassportEnvironment.INT;
        Dictionary<string, IdentityTestData> g_ExpectedIdentityProperties;
        #endregion

        public IdentityTests()
        {
            LoadData();
            g_Username = g_ExpectedIdentityProperties[g_Email].UserName;
            g_Password = g_ExpectedIdentityProperties[g_Email].Password;
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        // Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{			
        //}
        //
        // Use TestInitialize to run code before running each test 
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        // Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region ActiveAuth Tests
        /// <summary>
        /// Verifies the Cid through the ActiveAuth module.
        /// </summary>
        [TestMethod]
        public void VerifyActiveAuthCid()
        {
            string output = "";
            string STSToken = "";
            string methodName = "GetActiveAuthCid";
            long aaCid = 0;
            long expectedCid = g_ExpectedIdentityProperties[g_Username].Cid;
            IdentityTestServiceResponse responseObject;
            
            try
            {
                STSToken = GetSTSToken();
                output = GetIdentityTestServiceResponse(@"/ActiveAuthTestService.asmx/" + methodName, STSToken);
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");
                
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("...Expected Cid: " + expectedCid);
                if (data.GetType() != typeof(IdentityTestServiceResponse))
                {
                    Trace.TraceWarning("An IdentityTestServiceResponse object was expected!");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object was not as expected!");
                }
                else
                {
                    responseObject = (IdentityTestServiceResponse)data;
                    Trace.TraceInformation("Debug information from GetActiveAuthCid web method:  " + responseObject.DebugInfo);
                    aaCid = Int64.Parse((string)responseObject.Value);
                    Trace.TraceInformation("Active Auth Cid value returned from WS method is " + aaCid);
                    if (aaCid != expectedCid)
                    {
                        Trace.TraceError("Active Auth Cid was not expected value of " + expectedCid);
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Expected Cid did not match AA cid returned from Web Service.");
                    }
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }

        /// <summary>
        /// Verifies the Puid through the ActiveAuth module.
        /// </summary>
        [TestMethod]
        public void VerifyActiveAuthPuid()
        {
            string output = "";
            string STSToken = "";
            string methodName = "GetActiveAuthPuid";
            long aaPuid = 0;
            long expectedPuid = g_ExpectedIdentityProperties[g_Username].Puid;
            IdentityTestServiceResponse responseObject;

            try
            {
                STSToken = GetSTSToken();
                output = GetIdentityTestServiceResponse(@"/ActiveAuthTestService.asmx/" + methodName, STSToken);
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");

                object data = ser.Deserialize(reader);
                Trace.TraceInformation("...Expected Puid: " + expectedPuid);
                if (data.GetType() != typeof(IdentityTestServiceResponse))
                {
                    Trace.TraceWarning("An IdentityTestServiceResponse object was expected!");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object was not as expected!");
                }
                else
                {
                    responseObject = (IdentityTestServiceResponse)data;
                    Trace.TraceInformation("Debug information from GetActiveAuthPuid web method:  " + responseObject.DebugInfo);
                    aaPuid = Int64.Parse((string)responseObject.Value);
                    Trace.TraceInformation("Active Auth Puid value returned from WS method is " + aaPuid);
                    if (aaPuid != expectedPuid)
                    {
                        Trace.TraceError("Active Auth Puid was not expected value of " + expectedPuid);
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Expected Puid did not match AA Puid returned from Web Service.");
                    }
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }

        /// <summary>
        /// Verifies the Xuid through the ActiveAuth module.
        /// </summary>
        [TestMethod]
        public void VerifyActiveAuthXuid()
        {
            string output = "";
            string STSToken = "";
            string methodName = "GetActiveAuthXuid";
            ulong aaXuid = 0;
            ulong expectedXuid = g_ExpectedIdentityProperties[g_Username].Xuid;
            IdentityTestServiceResponse responseObject;

            try
            {
                STSToken = GetSTSToken();
                output = GetIdentityTestServiceResponse(@"/ActiveAuthTestService.asmx/" + methodName, STSToken);
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");

                object data = ser.Deserialize(reader);
                Trace.TraceInformation("...Expected Xuid: " + expectedXuid);
                if (data.GetType() != typeof(IdentityTestServiceResponse))
                {
                    Trace.TraceWarning("An IdentityTestServiceResponse object was expected!");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object was not as expected!");
                }
                else
                {
                    responseObject = (IdentityTestServiceResponse)data;
                    Trace.TraceInformation("Debug information from GetActiveAuthXuid web method:  " + responseObject.DebugInfo);
                    aaXuid = UInt64.Parse((string)responseObject.Value);
                    Trace.TraceInformation("Active Auth Xuid value returned from WS method is " + aaXuid);
                    if (aaXuid != expectedXuid)
                    {
                        Trace.TraceError("Active Auth Xuid was not expected value of " + expectedXuid);
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Expected Xuid did not match AA Xuid returned from Web Service.");
                    }
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }

        /// <summary>
        /// Verifies the Gamertag through the ActiveAuth module.
        /// </summary>
        [TestMethod]
        public void VerifyActiveAuthGamertag()
        {
            string output = "";
            string STSToken = "";
            string methodName = "GetActiveAuthGamertag";
            string aaGamertag = "";
            string expectedGamertag = g_ExpectedIdentityProperties[g_Username].Gamertag;
            IdentityTestServiceResponse responseObject;

            try
            {
                STSToken = GetSTSToken();
                output = GetIdentityTestServiceResponse(@"/ActiveAuthTestService.asmx/" + methodName, STSToken);
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");

                object data = ser.Deserialize(reader);
                Trace.TraceInformation("...Expected Gamertag: " + expectedGamertag);
                if (data.GetType() != typeof(IdentityTestServiceResponse))
                {
                    Trace.TraceWarning("An IdentityTestServiceResponse object was expected!");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object was not as expected!");
                }
                else
                {
                    responseObject = (IdentityTestServiceResponse)data;
                    Trace.TraceInformation("Debug information from GetActiveAuthGamertag web method:  " + responseObject.DebugInfo);
                    aaGamertag = (string)responseObject.Value;
                    Trace.TraceInformation("Active Auth Gamertag value returned from WS method is " + aaGamertag);
                    if (aaGamertag != expectedGamertag)
                    {
                        Trace.TraceError("Active Auth Gamertag was not expected value of " + expectedGamertag);
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Expected Gamertag did not match AA Gamertag returned from Web Service.");
                    }
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }

        #endregion

        #region Identity Tests
        /// <summary>
        /// Verifies the Puid returned from IdentityManager to get Puid from a single email address.
        /// </summary>
        [TestMethod]
        public void VerifySingleGetPuidFromEmail()
        {
            string output = "";
            string methodName = "GetPuidsFromEmails";
            long puidFromTestService = 0;
            string url = "";
            long expectedPuid = g_ExpectedIdentityProperties[g_Username].Puid;
            IdentityTestServiceResponse response;

            try
            {
                url = "/ActiveAuthTestService.asmx/" + methodName + "?Emails=" + g_ExpectedIdentityProperties[g_Username].UserName + "&UseBatchMethod=false";
                output = GetIdentityTestServiceResponse(url, "");
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");

                object data = ser.Deserialize(reader);
                Trace.TraceInformation("...Expected Puid: " + expectedPuid);
                
                if (data.GetType() != typeof(IdentityTestServiceResponse))
                {
                    Trace.TraceWarning("An IdentityTestServiceResponse object was expected!");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object was not as expected!");
                }
                else
                {
                    response = (IdentityTestServiceResponse)data;
                    Trace.TraceInformation("Debug information from GetActiveAuthPuid web method:  " + response.DebugInfo);
                    puidFromTestService = (long)response.Value;
                    Trace.TraceInformation("Active Auth Puid value returned from WS method is " + puidFromTestService);
                    if (puidFromTestService != expectedPuid)
                    {
                        Trace.TraceError("Active Auth Puid was not expected value of " + expectedPuid);
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Expected Puid did not match AA Puid returned from Web Service.");
                    }
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }

        /// <summary>
        /// Verifies the Puids returned from IdentityManager to get Puids from multiple email addresses.
        /// </summary>
        [TestMethod]
        public void VerifyBatchGetPuidsFromEmails()
        {
            string output = "";
            string methodName = "GetPuidsFromEmails";
            string emails= "";
            string url = "";
            bool foundFailure = false;
            IdentityTestServiceResponse response;
            Dictionary<string,long> emailsToCheck = new Dictionary<string,long>();
            Dictionary<string, long> puidsFromIdentityManager;

            // Add to dictionary each email/puid pair and create comma delimitted string of emails for service call
            bool skipComma = true;  // skip adding the comma on the first email
            string serviceDebugInfo = "";
            foreach (string emailKey in g_ExpectedIdentityProperties.Keys)
            {
                if (skipComma)
                    skipComma = false;
                else
                    emails += ",";
                emailsToCheck.Add(emailKey, g_ExpectedIdentityProperties[emailKey].Puid);
                emails += emailKey;
            }

            try
            {
                url = "/ActiveAuthTestService.asmx/" + methodName + "?Emails=" + emails + "&UseBatchMethod=true";
                output = GetIdentityTestServiceResponse(url, "");
                XmlReader reader = XmlReader.Create(new StringReader(output));
                XmlSerializer ser = new XmlSerializer(typeof(IdentityTestServiceResponse), "http://tempuri.org/");

                object responseObject = ser.Deserialize(reader);

                if (responseObject.GetType() != typeof(IdentityTestServiceResponse))
                    Assert.Fail("An IdentityTestServiceResponse object was expected!");
                else
                {
                    response = (IdentityTestServiceResponse)responseObject;
                    serviceDebugInfo = response.DebugInfo;
                    object valueObject = response.Value;
                    if (valueObject.GetType() != typeof(string))
                        Assert.Fail("The response.Value object was not of type Dictionary<string,long>!");
                    else
                    {
                        string emailToPuidList = (string) valueObject;
                        puidsFromIdentityManager = GetDictionaryFromString(emailToPuidList);
                        foreach (string key in emailsToCheck.Keys)
                        {
                            if (puidsFromIdentityManager.ContainsKey(key))
                            {
                                if (emailsToCheck[key] != puidsFromIdentityManager[key])
                                {
                                    Trace.TraceWarning("Expected puid " + emailsToCheck[key] + " did not match puid returned from IdentityManager " + puidsFromIdentityManager[key]);
                                    foundFailure = true;
                                }
                            }
                            else
                                Assert.Fail("Returned puids did not have an expected email address as key.");
                        }
                    }
                }
                if (foundFailure)
                {
                    Trace.TraceInformation("Debug information from GetActiveAuthPuid web method:  " + serviceDebugInfo);
                    Assert.Fail("Found Puids that did not match expected values!");
                }
            }
            catch (Exception m_Error)
            {
                ProcessException(m_Error);
            }
        }
        #endregion

        #region Helper Methods
        /// <summary>
        /// Returns a indented XML for the specfied XML string.
        /// </summary>
        /// <param name="XMLToTrace">The string representing the XML to format.</param>
        /// <returns>A string containing the formatted XML.</returns>
        public string GetFormattedXML(string XMLToTrace)
        {
            try
            {
                XDocument m_XML = XDocument.Parse(XMLToTrace);
                return m_XML.ToString();
            }
            catch
            {
                //Input is not an XML.
                return XMLToTrace;
            }
        }
        
        /// <summary>
        /// Loads the required environment and identity data from XML files.
        /// </summary>
        public void LoadData()
        {
            Environments m_Environments = null;

            #region Check for Environments.xml file
            if (!File.Exists("Environments.xml"))
            {
                //string info = File.
                Trace.TraceError("ERROR: The file 'Environments.xml' does not exist.");
                throw new FileNotFoundException("The file 'Environments.xml' does not exist.");
            }
            #endregion

            #region Set Environment Data
            m_Environments = (Environments)TestHelper.LoadXmlObject(typeof(Environments), "Environments.xml");
            g_ActiveEnvironment = m_Environments.ActiveEnvironment.ToLowerInvariant();
            g_Email = m_Environments.Overrides.ActiveUser.Username.ToLowerInvariant();

            foreach (EnvironmentData m_EnvData in m_Environments.EnvironmentDefinitions)
            {
                if (m_EnvData.EnvironmentName.ToLowerInvariant() == g_ActiveEnvironment)
                {
                    g_TestServiceTarget = m_EnvData.TestServiceTarget;
                    g_SiteUrl = m_EnvData.SiteURL;
                    g_SiteID = m_EnvData.SiteID;
                    g_STSAuthData = m_EnvData.STSAuthorization;
                    break;
                }
            }

            //Check if the specified active environment is valid and defined
            if (String.IsNullOrEmpty(g_TestServiceTarget))
                throw new Exception("The specified active environment name is not defined.");
            #endregion
            Trace.TraceInformation("Active environment is " + g_ActiveEnvironment);

            #region Load expected Identity Result data
            g_ExpectedIdentityProperties = new Dictionary<string, IdentityTestData>();
            List<IdentityTestData> identityList = (List<IdentityTestData>)TestHelper.LoadXmlObject(typeof(List<IdentityTestData>),
                                                                                       @"Identity.xml");
            foreach (IdentityTestData res in identityList)
            {
                g_ExpectedIdentityProperties.Add(res.UserName, res);
            }
            #endregion
        }

        /// <summary>
        /// Gets the STS Token for the current user account.
        /// </summary>
        /// <returns>A string representing the STS Token.</returns>
        private string GetSTSToken()
        {
            string m_STSToken = "";
            string m_RPSToken = "";
            HttpWebRequest m_STSServiceRequest = null;
            RPSAutoLogin m_RPSLogin = null;

            string m_STSWebServiceUrl = "";

            if (g_STSAuthData == null)
                throw new Exception("The STS Auth environment is not defined. Make sure that it is defined in the environment definition XML 'Environments.xml'.");

            m_STSWebServiceUrl = "http://" + g_STSAuthData.XBlobName;
            if (!String.IsNullOrEmpty(g_STSAuthData.Port))
                m_STSWebServiceUrl += ":" + g_STSAuthData.Port;
            m_STSWebServiceUrl += "/sts/sts.asmx/GetSecurityTicket?platformType=" +
                                 g_STSAuthData.PlatformType +
                                 "&titleId=" + g_STSAuthData.TitleId +
                                 "&titleVersion=" + g_STSAuthData.TitleVersion +
                                 "&clientVersion=" + g_STSAuthData.ClientVersion +
                                 "&deviceId=" + g_STSAuthData.DeviceId;
            m_RPSLogin = new RPSAutoLogin(m_STSWebServiceUrl,
                                          g_SiteUrl,
                                          g_Username,
                                          g_Password,
                                          g_PassportEnvironment,
                                          TargetProperty.Other,
                                          g_SiteID,
                                          g_AuthPolicy);
            m_RPSLogin.ImplementProxy = g_ImplementProxy;
            m_RPSLogin.ProxyBypass = g_ProxyBypass;

            Trace.TraceInformation("...Target: " + m_STSWebServiceUrl);
            Trace.TraceInformation("...Site: " + g_SiteUrl);
            Trace.TraceInformation("...Username: " + g_Username);
            Trace.TraceInformation("...Password: " + g_Password);
            Trace.TraceInformation("...Passport Environment: " + g_PassportEnvironment);
            Trace.TraceInformation("...Site ID: " + g_SiteID);
            Trace.TraceInformation("...Auth Policy: " + g_AuthPolicy);
            
            m_STSServiceRequest = m_RPSLogin.BuildRequest("GET");
            m_STSServiceRequest.Method = "GET";
            m_RPSToken = m_RPSLogin.Token;
            Trace.TraceInformation("RPS Auth Token: " + m_RPSToken);
            m_STSServiceRequest.Headers.Add("X-Authorization", "WLID1.0 t=" + m_RPSToken);
            m_STSToken = m_RPSLogin.PerformRequest(m_STSServiceRequest);

            if (String.IsNullOrEmpty(m_STSToken))
                throw new Exception("Null STS token received from STS Service.");
            else
            {
                Trace.TraceInformation("STS Service Response: " + m_STSToken);
                m_STSToken = GetSAMLData(m_STSToken);
            }
            return m_STSToken;
        }

        /// <summary>
        /// Gets the Test service response for the IdentityTestService method.
        /// </summary>
        /// <param name="TestServiceUrl">The Test service method Url.</param>
        /// <returns>A string representing the response text.</returns>
        private string GetIdentityTestServiceResponse(string TestServiceUrl, string STSToken)
        {
            string m_ResponseText = "";
            HttpWebRequest m_TestServiceRequest = null;
            
            StreamReader m_ResponseStream = null;

            m_TestServiceRequest = BuildTestServiceRequest(g_TestServiceTarget + TestServiceUrl);
            if (!String.IsNullOrEmpty(STSToken))
                m_TestServiceRequest.Headers.Add("X-Authorization", "XBL1.0 x=" + STSToken);
            m_ResponseStream = new StreamReader(m_TestServiceRequest.GetResponse().GetResponseStream());
            m_ResponseText = m_ResponseStream.ReadToEnd();
            Trace.TraceInformation("Response Text: " + Environment.NewLine + GetFormattedXML(m_ResponseText));
                
            return m_ResponseText;
        }

        /// <summary>
        /// Extracts the required SAML data from the STS Service response.
        /// </summary>
        /// <param name="STSServiceResponse">The STS Service response string.</param>
        /// <returns>A string representing the required SAML data.</returns>
        private string GetSAMLData(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);
                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "string").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        /// <summary>
        /// Creates an HTTP Web Request object for the specified Test Service url.
        /// </summary>
        /// <param name="TestServiceUrl">The test service url.</param>
        /// <returns>A Http Web Request object.</returns>
        private HttpWebRequest BuildTestServiceRequest(string TestServiceUrl)
        {
            HttpWebRequest m_TestServiceRequest = (HttpWebRequest)HttpWebRequest.Create(TestServiceUrl);
            if (g_ImplementProxy)
            {
                WebProxy m_Proxy = (g_PassportEnvironment == PassportEnvironment.INT ? new WebProxy("http://itgproxy:80", true, g_ProxyBypass) :
                                                                                       new WebProxy("http://itgproxy:80"));
                m_TestServiceRequest.Proxy = m_Proxy;
            }
            m_TestServiceRequest.AllowAutoRedirect = false;
            m_TestServiceRequest.Accept = "*/*";
            m_TestServiceRequest.UserAgent = "Profile Service Test Agent";
            m_TestServiceRequest.Method = "GET";

            Trace.TraceInformation("...Test Service Url: " + TestServiceUrl);
            
            return m_TestServiceRequest;
        }

        /// <summary>
        /// Creates a dictionary of Email/Puid pairs from a semi-colon delimitted string containing the pairs.
        /// </summary>
        /// <param name="TestServiceUrl">Semi-colon delimitted string of Email/Puid pairs where the pair is separated by a comma.</param>
        /// <returns>Dictionary object of the Email/Puid pairs.</returns>
        private Dictionary<string, long> GetDictionaryFromString(string emailsAndPuids)
        {
            Dictionary<string, long> dict = new Dictionary<string, long>();
            char[] separator = { ';' };
            string[] emailsAndPuidsArray = emailsAndPuids.Split(separator, StringSplitOptions.RemoveEmptyEntries);
            foreach (string pair in emailsAndPuidsArray)
            {
                string key = pair.Substring(0, pair.IndexOf(','));
                long puid = Int64.Parse(pair.Substring(pair.IndexOf(',') + 1));
                dict.Add(key, puid);
            }
            return dict;
        }

        private void ProcessException(Exception ex)
        {
            Trace.TraceError("An error occurred while calling the ActiveAuthTestService.");
            if (ex.GetType() == typeof(WebException))
            {
                WebException webException = (WebException)ex;
                Trace.TraceError(webException.ToString());
                if (webException.Response != null)
                {
                    StreamReader stream = new StreamReader(webException.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("A web exception occurred.");
            }
            else
            {
                if (ex is AssertFailedException)
                    Assert.Fail(ex.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while calling the ActiveAuthTestService:");
                    Trace.TraceError(ex.ToString());
                    Assert.Fail("An error occured while calling the ActiveAuthTestService.");
                }
            }
        }
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\ProfileServiceTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProfileServiceTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("LiveWebTests1")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("92980fc5-cd26-4712-9961-0e22a1d3652f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\PropTestXml\Propper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Test.Identity.Functional.ProfileServiceTests.PropTestXml
{
    /// <summary>
    /// Represents the Test XML Propper class.
    /// </summary>
    class Propper
    {
        static int Main(string[] args)
        {
            string m_Command = "";

            //Check arguments
            if (args.Length == 0)
            {
                Console.WriteLine("ERROR: No arguments specified!");
                PrintUsage();
                return (1);
            }

            m_Command = args[0];

            try
            {
                switch (m_Command.ToLower())
                {
                    case "propenv":
                        if (args.Length != 4)
                        {
                            Console.WriteLine("ERROR: Invalid number of arguments specified.");
                            PrintUsage();
                            return (1);
                        }
                        Console.WriteLine("INFO: Propping Environments.xml ...");
                        PropEnv(args[1], args[2], args[3]);
                        break;
                    case "propavatar":
                        if (args.Length != 2)
                        {
                            Console.WriteLine("ERROR: Invalid number of arguments specified.");
                            PrintUsage();
                            return (1);
                        }
                        Console.WriteLine("INFO: Propping Avatar.xml ...");
                        PropAvatar(args[1]);
                        break;
                    default:
                        Console.WriteLine("ERROR: Unknown command specified!");
                        PrintUsage();
                        return (1);
                }
            }
            catch (Exception m_Error)
            {
                Console.WriteLine("ERROR: Error occured while propping XML.");
                Console.WriteLine("ERROR: " + m_Error.ToString());
                return (1);
            }

            return (0);
        }

        /// <summary>
        /// Executes the propenv command.
        /// </summary>
        /// <param name="Username">The active username.</param>
        /// <param name="AuthMethod">The auth method to use.</param>
        /// <param name="TargetEnvironment">The target environment to use.</param>
        private static void PropEnv(string Username, string AuthMethod, string TargetEnvironment)
        {
            Environments m_EnvData = null;

            if (File.Exists("Environments.xml"))
            {
                Console.WriteLine("INFO: Environments.xml found. Will read environment data from this file.");
                Console.WriteLine("WARN: File will be overwritten with user specified data.");
                m_EnvData = (Environments)TestHelper.LoadXmlObject(typeof(Environments), "Environments.xml");
                Console.WriteLine("INFO: Environment data loaded from XML.");
                File.Delete("Environments.xml");
                Console.WriteLine("INFO: Environments.xml deleted.");
            }
            else
            {
                //Check Authentication Method
                if (AuthMethod == "STS" || AuthMethod == "RPS")
                {
                    m_EnvData = GetDefaultEnvironmentData();
                    Console.WriteLine("INFO: Environments.xml not found.");
                    Console.WriteLine("INFO: Loaded default environment data.");
                }
                else
                    throw new Exception("Auth Method can only be 'RPS' or 'STS'");
            }

            m_EnvData.AuthenticationMethod = AuthMethod;
            m_EnvData.ActiveEnvironment = TargetEnvironment;

            TestHelper.SaveXmlObject(m_EnvData, "Environments.xml");
            Console.WriteLine("INFO: New Environmnents.xml has been propped.");
        }

        /// <summary>
        /// Executes the propavatar command.
        /// </summary>
        /// <param name="AvatarUrl">The avatar image url to test.</param>
        private static void PropAvatar(string AvatarUrl)
        {
            AvatarData m_AData = null;

            if (File.Exists("Avatar.xml"))
            {
                Console.WriteLine("INFO: Avatar.xml found. File will be overwritten.");
                File.Delete("Avatar.xml");
                Console.WriteLine("INFO: Avatar.xml deleted.");
            }

            m_AData = new AvatarData()
            {
                AvatarImageUrl = AvatarUrl
            };

            TestHelper.SaveXmlObject(m_AData, "Avatar.xml");
            Console.WriteLine("INFO: New Avatar.xml has been propped.");
        }

        /// <summary>
        /// Gets the default environment data.
        /// </summary>
        /// <returns>An EnviornmentData object representing the default environment data.</returns>
        private static Environments GetDefaultEnvironmentData()
        {
            List<EnvironmentData> m_EnvDefinitions = new List<EnvironmentData>();
            Environments m_DefaultEnv = new Environments()
            {
                ActiveEnvironment = "",
                AuthenticationMethod = ""
            };

            #region Devnet Definition
            m_EnvDefinitions.Add(new EnvironmentData()
                {
                    EnvironmentName = "dev",
                    STSAuthorization = new STSAuthEnvrionment()
                    {
                        XBlobName = "leo-xblob-dev01",
                        PlatformType = "15",
                        TitleId = "4294838225",
                        TitleVersion = "1",
                        ClientVersion = "1",
                        DeviceId = "XEN605io6e9au47"
                    },
                    ProfileServiceTarget = "http://uds.dev.xboxlive.com",
                    SiteURL = "http://kdc.xblob.xboxlive.com",
                    SiteID = "267168"
                }); 
            #endregion

            #region Storax Definition
            m_EnvDefinitions.Add(new EnvironmentData()
              {
                  EnvironmentName = "storax",
                  STSAuthorization = new STSAuthEnvrionment()
                  {
                      XBlobName = "leo-xblob-dev01",
                      PlatformType = "15",
                      TitleId = "4294838225",
                      TitleVersion = "1",
                      ClientVersion = "1",
                      DeviceId = "XEN605io6e9au47"
                  },
                  ProfileServiceTarget = "http://uds.storax.xboxlive.com",
                  SiteURL = "http://kdc.xblob.xboxlive.com",
                  SiteID = "267168"
              }); 
            #endregion

            #region Stressnet Definition
            m_EnvDefinitions.Add(new EnvironmentData()
                {
                    EnvironmentName = "stress",
                    STSAuthorization = new STSAuthEnvrionment()
                    {
                        XBlobName = "leo-xblob-dev01",
                        PlatformType = "15",
                        TitleId = "4294838225",
                        TitleVersion = "1",
                        ClientVersion = "1",
                        DeviceId = "XEN605io6e9au47"
                    },
                    ProfileServiceTarget = "http://uds.stress.xboxlive.com",
                    SiteURL = "http://kdc.test.xboxlive.com",
                    SiteID = "64155"
                }); 
            #endregion

            #region Tesla Definition
            m_EnvDefinitions.Add(new EnvironmentData()
                {
                    EnvironmentName = "stress",
                    STSAuthorization = new STSAuthEnvrionment()
                    {
                        XBlobName = "LET-Xblob-Tesla",
                        PlatformType = "15",
                        TitleId = "4294838225",
                        TitleVersion = "1",
                        ClientVersion = "1",
                        DeviceId = "XEN605io6e9au47"
                    },
                    ProfileServiceTarget = "http://uds.tesla.xboxlive.com",
                    SiteURL = "http://kdc.xblob.xboxlive.com",
                    SiteID = "267168"
                }); 
            #endregion

            m_DefaultEnv.EnvironmentDefinitions = m_EnvDefinitions;

            return m_DefaultEnv;
        }

        /// <summary>
        /// Prints the usage.
        /// </summary>
        private static void PrintUsage()
        {
            Console.WriteLine("Usage:");
            Console.WriteLine("   PropTestXml.exe <command> <argument(s)>");
            Console.WriteLine("   Commands:");
            Console.WriteLine("      propenv - Props an environment xml for the specified user, auth method");
            Console.WriteLine("                and target environment.");
            Console.WriteLine("                Required 3 parameters:");
            Console.WriteLine("                1st parameter: This should be the user email to use.");
            Console.WriteLine("                2nd parameter: This should be the authentication method to use.");
            Console.WriteLine("                               Valid values are 'RPS' and 'STS'");
            Console.WriteLine("                3rd parameter: This should be the target environment.");
            Console.WriteLine("                E.g.:");
            Console.WriteLine("                PropTestXml.exe propenv \"test@xbluser.com\" \"STS\" \"stress\"");
            Console.WriteLine("");
            Console.WriteLine("      propavatar - Props a avatar xml for the specified avatar image url.");
            Console.WriteLine("                   Required 1 parameter:");
            Console.WriteLine("                   1st parameter: This is the avatar image url to check.");
            Console.WriteLine("                   E.g.:");
            Console.WriteLine("                   PropTestXml.exe propavatar \"<avatar_url>\"");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Test_Common.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceProcess;

namespace Infrastructure.Test.Common
{
    /// <summary>
    /// Test common code
    /// </summary>
    public class Test_Common
    {
        /// <summary>
        /// Default time to wait for the service to stop or start
        /// </summary>
        public static TimeSpan DefaultServiceWaitTime = new TimeSpan(0, 2, 0);

        /// <summary>
        /// Stops and Starts a windows service.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine which the service is on</param>
        public static void RestartService(string serviceName, string machine)
        {
            StopService(serviceName, machine);
            StartService(serviceName, machine);
        }

        /// <summary>
        /// Starts a windows service.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine which the service is on</param>
        public static void StartService(string serviceName, string machine)
        {
            StartService(serviceName, machine, null, 0, DefaultServiceWaitTime);
        }

        /// <summary>
        /// Starts a windows service.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine which the service is on</param>
        /// <param name="args">Arguments to start the service</param>
        public static void StartService(string serviceName, string machine, string[] args)
        {
            StartService(serviceName, machine, args, 0, DefaultServiceWaitTime);
        }

        /// <summary>
        /// Starts a windows service with retry abilities.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine which the service is on</param>
        /// <param name="args">Arguments to start the service</param>
        /// <param name="retries">Number of time to retry</param>
        /// <param name="t">Time to wait for the stop to happen</param>
        public static void StartService(string serviceName, string machine, string[] args, int retries, TimeSpan t)
        {
            if (string.IsNullOrEmpty(machine) || string.IsNullOrEmpty(serviceName))
            {
                return;
            }

            ServiceController sc = new ServiceController(serviceName, machine);
            while (true)
            {
                try
                {
                    sc = new ServiceController(serviceName, machine);
                    if (sc.Status == ServiceControllerStatus.Stopped)
                    {
                        if (args != null)
                        {
                            sc.Start(args);
                        }
                        else
                        {
                            sc.Start();
                        }

                        sc.WaitForStatus(ServiceControllerStatus.Running, t);
                    }
                    else if (sc.Status == ServiceControllerStatus.StartPending)
                    {
                        sc.WaitForStatus(ServiceControllerStatus.Running, t);
                    }

                    sc.Close();
                    break;
                }
                catch (System.ServiceProcess.TimeoutException e)
                {
                    retries--;
                    if (retries < 0)
                    {
                        throw new System.ServiceProcess.TimeoutException("Timed out waiting for " + serviceName + " to start.", e);
                    }
                }
                catch (Exception e)
                {
                    throw new Exception("Problems starting " + serviceName + ".", e);
                }
                finally
                {
                    sc.Close();
                }
            }
        }

        /// <summary>
        /// Stops a windows service.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine name which the service is on</param>
        public static void StopService(string serviceName, string machine)
        {
            StopService(serviceName, machine, 0, DefaultServiceWaitTime);
        }

        /// <summary>
        /// Stops a windows service with retry abilities.
        /// </summary>
        /// <param name="serviceName">Name of the service</param>
        /// <param name="machine">Machine name which the service is on</param>
        /// <param name="retries">Number of time to retry</param>
        /// <param name="t">Time to wait for the stop to happen</param>
        public static void StopService(string serviceName, string machine, int retries, TimeSpan t)
        {
            if (string.IsNullOrEmpty(machine) || string.IsNullOrEmpty(serviceName))
            {
                return;
            }

            while (true)
            {
                try
                {
                    ServiceController sc = new ServiceController(serviceName, machine);
                    if (sc.Status == ServiceControllerStatus.Running)
                    {
                        sc.Stop();
                        sc.WaitForStatus(ServiceControllerStatus.Stopped, t);
                    }
                    else if (sc.Status == ServiceControllerStatus.StopPending)
                    {
                        sc.WaitForStatus(ServiceControllerStatus.Stopped, t);
                    }

                    sc.Close();
                    break;
                }
                catch (System.ServiceProcess.TimeoutException e)
                {
                    retries--;
                    if (retries < 0)
                    {
                        throw new System.ServiceProcess.TimeoutException("Timed out waiting for " + serviceName + " to stop. " + e.Message + e.StackTrace);
                    }
                }
                catch (Exception e)
                {
                    throw new Exception("Problems stopping " + serviceName + ". " + e.Message + e.StackTrace);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Database\DatabaseExecution.cs ===
﻿using System;
using System.Data;
using System.Data.SqlClient;

using Infrastructure.Test.Common.Settings;

namespace Infrastructure.Test.Common.Database
{
    public static class DatabaseExecution
    {
        #region Public Methods
        /// <summary>
        /// Executes the passed adhoc SQL and returns the resultset
        /// </summary>
        /// <param name="sql">SQL statement to execute</param>
        /// <returns>DataTable with the results</returns>
        public static DataTable ExecuteSql(string sql)
        {
            return ExecuteSql(new SqlCommand(sql));
        }

        public static DataTable ExecuteSql(SqlCommand command)
        {
            return ExecuteSql(getConnection(), command);
        }

        public static DataTable ExecuteSql(string connectionString, string sql)
        {
            return ExecuteSql(new SqlConnection(connectionString), new SqlCommand(sql));
        }

        /// <summary>
        /// Executes the passed adhoc SQL and returns the resultset
        /// </summary>
        /// <param name="command">SQL command to execute</param>
        /// <returns>DataTable with the results</returns>
        public static DataTable ExecuteSql(SqlConnection connection, SqlCommand command)
        {
            DataSet ds = null;
            using (SqlConnection currentConnection = connection)
            {
                connection.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                adapter.SelectCommand = command;
                command.Connection = connection;
                ds = new DataSet();
                adapter.Fill(ds);
                if (ds.Tables.Count == 0)
                    return null;
            }
            return ds.Tables[0];
        }

        /// <summary>
        /// Executes the passed adhoc SQL and returns the number of records affected.
        /// Executes against the diagnostic database if a connection string is not passed in
        /// </summary>
        /// <param name="sql">SQL statement to execute</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteSqlNonQuery(string sql)
        {
            return ExecuteSqlNonQuery(getConnection(), sql);
        }

        /// <summary>
        /// Executes the passed adhoc SQL and returns the number of records affected
        /// </summary>
        /// <param name="connectionString">Connection string for the database</param>
        /// <param name="sql">SQL statement to execute</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteSqlNonQuery(string connectionString, string sql)
        {
            return ExecuteSqlNonQuery(new SqlConnection(connectionString), sql); 
        }

        /// <summary>
        /// Executes the passed adhoc SQL and returns the number of records affected
        /// </summary>
        /// <param name="connnection">Sql connection for the database</param>
        /// <param name="sql">SQL statement to execute</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteSqlNonQuery(SqlConnection connection, string sql)
        {
            using (SqlConnection currentConnection = connection)
            {
                currentConnection.Open();
                SqlCommand command = new SqlCommand(sql, currentConnection);
                command.CommandType = CommandType.Text;
                return command.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Executes the passed adhoc SQL and returns the value from the first column of the first row
        /// </summary>
        /// <typeparam name="T">Data type returned</typeparam>
        /// <param name="sql">SQL statement to execute</param>
        /// <returns>Value from the first column of the first row</returns>
        public static T ExecuteSqlScalar<T>(string sql)
        {
            using (SqlConnection connection = getConnection())
            {
                connection.Open();
                SqlCommand command = new SqlCommand(sql, connection);
                command.CommandType = CommandType.Text;
                return (T)command.ExecuteScalar();
            }
        }

        /// <summary>
        /// Executes the specified stored procedure and returns the resultset
        /// </summary>
        /// <param name="sprocName">Name of the stored procedure</param>
        /// <param name="sprocParams">Any parameters for the stored procedure</param>
        /// <returns>The DataTable with the returned results</returns>
        public static DataTable ExecuteStoredProcedure(string sprocName, params SqlParameter[] sprocParams)
        {
            DataSet ds = null;
            using (SqlConnection connection = getConnection())
            {
                connection.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                SqlCommand command = new SqlCommand(sprocName, connection);
                command.CommandType = CommandType.StoredProcedure;
                if (sprocParams.Length > 0)
                    command.Parameters.AddRange(sprocParams);
                adapter.SelectCommand = command;
                command.Connection = connection;
                ds = new DataSet();
                adapter.Fill(ds);
                if (ds.Tables.Count == 0)
                    return null;
            }
            return ds.Tables[0];
        }

        /// <summary>
        /// Executes the specified stored procedure and returns the number of records affected.
        /// Executes against the Diagnostic Database unless a connection is passed in.
        /// </summary>
        /// <param name="sprocName">Name of the stored procedure to execute</param>
        /// <param name="sprocParams">Any parameters for the stored procedure</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteStoredProcedureNonQuery(string sprocName, params SqlParameter[] sprocParams)
        {
            return ExecuteStoredProcedureNonQuery(getConnection(), sprocName, sprocParams);
        }

        /// <summary>
        /// Executes the specified stored procedure and returns the number of records affected
        /// </summary>
        /// <param name="connectionString">Connection string to use</param>
        /// <param name="sprocName">Name of the stored procedure to execute</param>
        /// <param name="sprocParams">Any parameters for the stored procedure</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteStoredProcedureNonQuery(string connectionString, string sprocName, params SqlParameter[] sprocParams)
        {
            return ExecuteStoredProcedureNonQuery(new SqlConnection(connectionString), sprocName, sprocParams); 
        }

        /// <summary>
        /// Executes the specified stored procedure and returns the number of records affected
        /// </summary>
        /// <param name="connection">Sql connection to use</param>
        /// <param name="sprocName">Name of the stored procedure to execute</param>
        /// <param name="sprocParams">Any parameters for the stored procedure</param>
        /// <returns>Number of records affected</returns>
        public static int ExecuteStoredProcedureNonQuery(SqlConnection connection, string sprocName, params SqlParameter[] sprocParams)
        {
            using (SqlConnection currentConnection = connection)
            {
                currentConnection.Open();
                SqlCommand command = new SqlCommand(sprocName, connection);
                command.CommandType = CommandType.StoredProcedure;
                if (sprocParams.Length > 0)
                    command.Parameters.AddRange(sprocParams);
                return command.ExecuteNonQuery();
            }
        }
        #endregion

        #region Private Methods
        private static SqlConnection getConnection()
        {
            return new SqlConnection(TestSettings.DiagnosticDatabaseConnectionString);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Identity.Test\Functional\ProfileServiceTests\ProfileServiceTests\ProfileWebService.cs ===
﻿using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Cache;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Linq;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Common;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;
using live.common;

namespace Test.Identity.Functional.ProfileServiceTests
{
	/// <summary>
	/// Represents the tests for Profile Web Service.
	/// </summary>
	[TestClass]
	public class ProfileWebService
	{
        #region Global Members
        static string g_ActiveEnvironment = "";
        static string g_ServiceTarget = "";
        static string g_SiteID = "";
        static string g_SiteUrl = "";
        static string g_LastGame = "";
        static bool g_ImplementProxy = true;
        static string[] g_ProxyBypass = { ".microsoft.com", ".xboxlive.com", ".xbox.com" };
        static string g_AuthPolicy = "MBI";

        static TestOverrides g_Overrides = null;
        static GameAchievement g_LastAchievement = null;
        static STSAuthEnvrionment g_STSAuthData = null;
        static AuthMethod g_AuthMode;
        static List<GameTitle> g_DefinedGames = null;
        static Account g_XBLUser = null;
        static Account g_OtherXBLUser = null;
        static PassportEnvironment g_PassportEnvironment = PassportEnvironment.INT;
        static TestAccount g_TestAccount = null;
        #endregion

		/// <summary>
		/// Creates a new instance of the Profile Web Service tests.
		/// </summary>
        public ProfileWebService()
        {
            try
            {
                //Check if it is the very first test
                if (g_TestAccount == null)
                {
                    LoadData();

                    //Check for Test Overrides
                    if (g_Overrides == null)
                    {
                        //No test overrides
                        Trace.TraceInformation("No Test Overrides found. Proceeding normally.");
                        CreateNewXBLUser(false);
                    }
                    else
                    {
                        Trace.TraceInformation("Following Test Overrides found:");
                        if (g_Overrides.UseOfflineAccount)
                        {
                            //Offline account override
                            Trace.TraceInformation("...Offline account will be used.");
                        }
                        else
                        {
                            if (g_Overrides.ActiveUser == null)
                            {
                                //No credential override
                                if (g_Overrides.ModifyProfileAtStart)
                                {
                                    Trace.TraceInformation("...Profile properties will be modified in test constructor.");
                                    CreateNewXBLUser(true);
                                }
                                else
                                {
                                    Trace.TraceInformation("...Profile properties will be modified per test.");
                                    CreateNewXBLUser(false);
                                }
                            }
                            else
                            {
                                //Credential override
                                Trace.TraceInformation("...Credential override. Will use the following existing user:");
                                Trace.TraceInformation("......Username: " + g_Overrides.ActiveUser.Username);
                                Trace.TraceInformation("......Password: " + g_Overrides.ActiveUser.Password);
                                g_XBLUser = TestHelper.LoadExistingXBLAccount(g_Overrides.ActiveUser.Username,
                                                                              g_Overrides.ActiveUser.Password);
                            }
                        }
                    }

                    #region Clone Test Account from the newly created / existing XBL account
                    if (!g_TestAccount.IsOffline)      //If offline account, then no need to clone
                    {
                        g_TestAccount.CloneFrom(g_XBLUser);
                        Trace.TraceInformation("Test account cloned successfully from UserLib account.");
                    }
                    #endregion
                }
                else
                {
                    //This is a subsequent run
                    Trace.TraceInformation("Reusing following XBL user from previous run:");
                    if (g_TestAccount.IsOffline)
                        Trace.TraceInformation("...NOTE: This is an offline account.");
                    Trace.TraceInformation("...Username: " + g_TestAccount.XblUser.UserPassportInfo.MemberName);
                    Trace.TraceInformation("...Password: " + g_TestAccount.XblUser.UserPassportInfo.Password);
                    Trace.TraceInformation("...PUID: " + g_TestAccount.XblUser.Puid.ToString());
                    Trace.TraceInformation("...Tier: " + g_TestAccount.XblUser.UserType.ToString());
                }
            }
            catch (live.common.XErrFailedException m_Error)
            {
                Trace.TraceError("Error occured while creating or reusing Xbox user account.");
                Trace.TraceError(m_Error.ToString());
                throw new Exception();
            }
            catch (Exception m_Error)
            {
                Trace.TraceError("Error occured while initializing tests.");
                Trace.TraceError(m_Error.ToString());
                throw;
            }
        }

		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}

		#region Additional test attributes
		//
		// You can use the following additional attributes as you write your tests:
		//
		// Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void ProfileSvcTestInitialize(TestContext testContext)
        //{
            
        //}

		//
		// Use ClassCleanup to run code after all tests in a class have run
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{			
		//}
		//
		// Use TestInitialize to run code before running each test 
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		// Use TestCleanup to run code after each test has run
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion

        #region Structure BVTs
        /// <summary>
        /// Verifies that a proper data structure was received from profile service.
        /// </summary>
        [TestMethod]
        public void VerifyProperDataStructureFromGetProfileService()
        {
            VerifyProperDataStructureFromGetProfileService("xml", "31", "", "");
        }

        private void VerifyProperDataStructureFromGetProfileService(string Format, string SectionFlags, string GamerTag, string CID)
        {
            string output = "";

            try
            {
                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: " + Format);
                Trace.TraceInformation("...SectionFlags: " + SectionFlags);

                string m_profileUrl = "/Profiles.svc/profile?format=" + Format + "&sectionflags=" + SectionFlags;

                if (GamerTag != "")
                {
                    Trace.TraceInformation("...GamerTag: " + GamerTag);
                    m_profileUrl += "&gamertag=" + GamerTag;
                }
                else if (CID != "")
                {
                    Trace.TraceInformation("...CID: " + CID);
                    m_profileUrl += "&cid=" + CID;
                }
                
                output = GetProfileServiceResponse(m_profileUrl);
                Trace.TraceInformation("Profile service response text fetched successfully.");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

 
		#endregion

        #region Xbox Profile Achievements Tests
        [TestMethod]
        public void VerifyAchievementsByKeyProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            int m_ExpectedAchievementCount = g_LastAchievement == null ? 0 : 1;

            try
            {
                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 16");

                output = GetProfileServiceResponse("xml", "16");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected recent achievement.");

                    m_ProfileData = (Profile)data;
                    int achievementsCount = (m_ProfileData.RecentAchievements == null ? 0 : m_ProfileData.RecentAchievements.Count);

                    #region Check if Achievement count is greater than 1
                    if (achievementsCount > 1)
                    {
                        Trace.TraceWarning("...Recent achievement count is greater than 1. Test needs to be modified.");
                        Trace.TraceError("Test failed!");
                        Assert.Fail("...Recent achievement count is greater than 1. Test needs to be modified.");
                    }
                    #endregion

                    #region Check Achievements
                    if (achievementsCount == m_ExpectedAchievementCount)
                    {
                        if (!(achievementsCount == 0 && m_ExpectedAchievementCount == 0))
                        {
                            //NOTE: Achievement call only returns the last achievement as of now.
                            Achievement m_RecentAchievement = m_ProfileData.RecentAchievements[0];

                            Trace.TraceInformation("...Expected recent achievement:");
                            Trace.TraceInformation("......Name: " + g_LastAchievement.Name);
                            Trace.TraceInformation("......Desc: " + g_LastAchievement.Description);
                            Trace.TraceInformation("......Key: " + g_LastAchievement.AchievementId.ToString());
                            Trace.TraceInformation("...Recent achievement from profile:");
                            Trace.TraceInformation("......Name: " + m_RecentAchievement.Name);
                            Trace.TraceInformation("......Desc: " + m_RecentAchievement.Description);
                            Trace.TraceInformation("......Key: " + m_RecentAchievement.Key);

                            if ((m_RecentAchievement.Description == g_LastAchievement.Description) &&
                                (m_RecentAchievement.Name == g_LastAchievement.Name) &&
                                (m_RecentAchievement.Key == g_LastAchievement.AchievementId.ToString())
                               )
                            {
                                Trace.TraceInformation("Expected recent achievement found in profile data.");
                                Trace.TraceInformation("Test Passed.");
                            }
                            else
                            {
                                Trace.TraceWarning("Expected recent achievement not found in profile data.");
                                Trace.TraceError("Test failed!");
                                Assert.Fail("Expected recent achievement not found in profile data.");
                            }
                        }
                        else
                        {
                            Trace.TraceInformation("No expected achievement data to compare.");
                            Trace.TraceInformation("Test pass by default.");
                        }
                    }
                    else
                    {
                        Trace.TraceWarning("Achievement count from profile data does not match the expected achievement count.");
                        Trace.TraceError("Test failed!");
                        Assert.Fail("Achievement count from profile data does not match the expected achievement count.");
                    }
                    #endregion
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }
        #endregion

        #region Xbox Identity Tests
        /// <summary>
        /// Verifies the Gamertag.
        /// </summary>
        [TestMethod]
        public void VerifyGamertagFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (g_TestAccount.IsOffline)
                    Trace.TraceInformation("Offline Account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Gamertag.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileGamertag = (string)m_ProfileData.ProfileProperties[ProfileProperty.GamerTag];
                        Trace.TraceInformation("Gamertag from profile: " + profileGamertag);
                        Trace.TraceInformation("Expected Gamertag: " + g_TestAccount.XblUser.GamerTag);

                        if (profileGamertag != g_TestAccount.XblUser.GamerTag)
                        {
                            Trace.TraceWarning("Profile Gamertag is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Gamertag is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that XUID is not part of the Profile data fetched from profile service.
        /// </summary>
        [TestMethod]
        public void VerifyXuidNotPresentInProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (g_TestAccount.IsOffline)
                    Trace.TraceInformation("Offline Account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 31");

                output = GetProfileServiceResponse("xml", "31");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for XUID.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        if (m_ProfileData.ProfileProperties.ContainsKey(ProfileProperty.Xuid))
                        {
                            Trace.TraceWarning("Profile data contains XUID key. XUID should not exist in profile data.");
                            Trace.TraceError("Test Failed!");
                            Assert.Fail("Profile data contains XUID key. XUID should not exist in profile data.");
                        }
                        else
                        {
                            Trace.TraceInformation("Profile data does not contain XUID key as expected.");
                            Trace.TraceInformation("Test Passed.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the XBox name from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxNameFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (!g_TestAccount.IsOffline)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        string m_NewName = TestHelper.GetRandomString(20);    //Max name is 129

                        Trace.TraceInformation("Setting Gamer Name to: " + m_NewName);
                        TestHelper.SetGamerName(m_NewName, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Name has been set to: " + g_XBLUser.GamerProfile.Name.Replace("\0", ""));

                        if (m_NewName == g_XBLUser.GamerProfile.Name.Replace("\0", ""))
                        {
                            Trace.TraceInformation("Gamer Name has been successfully set.");
                            g_TestAccount.CloneGamerProfileFrom(g_XBLUser);
                            Trace.TraceInformation("Test account gamerprofile cloned successfully.");
                        }
                        else
                        {
                            Trace.TraceWarning("Gamer Name could not be set successfully!");
                            Assert.Fail("Gamer Name could not be set successfully!");
                        }
                    }
                }
                else
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected XBox name.");
                    m_ProfileData = (Profile)data;
                    
                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxName = (string)m_ProfileData.ProfileProperties[ProfileProperty.Name];
                        Trace.TraceInformation("XBox name from profile: " + profileXboxName);
                        Trace.TraceInformation("Expected XBox name: " + g_TestAccount.GamerProfile.Name);

                        if (g_TestAccount.GamerProfile.Name != profileXboxName)
                        {
                            Trace.TraceWarning("Profile XBoxname is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile XBoxname is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Gamer Score from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxGamerscoreFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
     
            try
            {
                if (g_TestAccount.IsOffline)
                    Trace.TraceInformation("Offline Account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected GamerScore.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxGamerscore = m_ProfileData.ProfileProperties[ProfileProperty.GamerScore].ToString();
                        Trace.TraceInformation("GamerScore from profile: " + profileXboxGamerscore);
                        Trace.TraceInformation("Expected GamerScore: " + g_TestAccount.GamerProfile.Score.ToString());

                        if (g_TestAccount.GamerProfile.Score.ToString() != profileXboxGamerscore)
                        {
                            Trace.TraceWarning("Profile GamerScore is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile GamerScore is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Membership Level from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxMembershipLevelFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            string m_ExpectedLevel = "";

            try
            {
                if (g_TestAccount.IsOffline)
                    Trace.TraceInformation("Offline account in use.");

                switch (g_TestAccount.XblUser.UserType)
                {
                    case XblUserTier.Gold:
                        m_ExpectedLevel = "Gold";
                        break;
                    case XblUserTier.Silver:
                        m_ExpectedLevel = "Silver";
                        break;
                }

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Membership level.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxMembershipLevel = m_ProfileData.ProfileProperties[ProfileProperty.MembershipLevel].ToString();
                        Trace.TraceInformation("Membership level from profile: " + profileXboxMembershipLevel);
                        Trace.TraceInformation("Expected Membership level: " + m_ExpectedLevel);

                        if (m_ExpectedLevel != profileXboxMembershipLevel)
                        {
                            Trace.TraceWarning("Profile Membership level is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Membership level is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Avatar image Url from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxAvatarImageUrlProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            string expectedXboxAvatarImageUrl = String.Format("avatar/{0}/avatar-body.png", g_TestAccount.XblUser.GamerTag);

            try
            {
                if (g_TestAccount.IsOffline)
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Avatar Url.");
                    m_ProfileData = (Profile)data;
                    
                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxAvatarImageUrl = m_ProfileData.ProfileProperties[ProfileProperty.AvatarImageUrl].ToString();
                        Trace.TraceInformation("Avatar Url from profile: '" + profileXboxAvatarImageUrl + "'");
                        Trace.TraceInformation("Expected Ending for Avatar Url: '" + expectedXboxAvatarImageUrl + "'");
                        
                        if (!profileXboxAvatarImageUrl.EndsWith(expectedXboxAvatarImageUrl))
                        {
                            Trace.TraceWarning("Profile Avatar Url is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Avatar Url is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Bio from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxBioFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (!g_TestAccount.IsOffline)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        string m_NewBio = TestHelper.GetRandomString(50);      //Max Bio is 499

                        Trace.TraceInformation("Setting Gamer Bio to: " + m_NewBio);
                        TestHelper.SetGamerBio(m_NewBio, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Bio has been set to: " + g_XBLUser.GamerProfile.Bio.Replace("\0", ""));

                        if (m_NewBio == g_XBLUser.GamerProfile.Bio.Replace("\0", ""))
                        {
                            Trace.TraceInformation("Gamer Bio has been successfully set.");
                            g_TestAccount.CloneGamerProfileFrom(g_XBLUser);
                            Trace.TraceInformation("Test account gamerprofile cloned successfully.");
                        }
                        else
                        {
                            Trace.TraceWarning("Gamer Bio could not be set successfully!");
                            Assert.Fail("Gamer Bio could not be set successfully!");
                        }
                    }
                }
                else
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Bio.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxBio = (string)m_ProfileData.ProfileProperties[ProfileProperty.Bio];
                        Trace.TraceInformation("Bio from profile: " + profileXboxBio);
                        Trace.TraceInformation("Expected Bio: " + g_TestAccount.GamerProfile.Bio);

                        if (g_TestAccount.GamerProfile.Bio != profileXboxBio)
                        {
                            Trace.TraceWarning("Profile Bio is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Bio is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /*
         * Disabling the GamerPic test until we resolve the URL issue.
         * TODO: Update with Bug no.
        /// <summary>
        /// Verifies that the Gamer Pic Url from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxGamerPicUrlFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            string expectedXboxGamerPicUrl = "";
            string gamerPicFriendlyName = "";

            try
            {
                if (g_OfflineAccount == null)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        string m_NewGamerPic = g_XBLUser.GamerProfile.SelectRandomPicture();

                        Trace.TraceInformation("Setting Gamer Pic to:" + m_NewGamerPic);
                        TestHelper.SetGamerPicture(m_NewGamerPic, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Pic has been set to: " + g_XBLUser.GamerProfile.GamerPicture.Replace("\0", ""));

                        if (m_NewGamerPic == g_XBLUser.GamerProfile.GamerPicture.Replace("\0", ""))
                            Trace.TraceInformation("Gamer Pic has been successfully set.");
                        else
                        {
                            Trace.TraceWarning("Gamer Pic could not be set successfully!");
                            Assert.Fail("Gamer Pic could not be set successfully!");
                        }
                    }
                }

                if (g_OfflineAccount == null)
                    expectedXboxGamerPicUrl = TestHelper.GetGamerPicUrl(g_XBLUser.GamerProfile.GamerPicture.Replace("\0", ""),
                                                                        out gamerPicFriendlyName);
                else
                {
                    Trace.TraceInformation("Offline account in use.");
                    expectedXboxGamerPicUrl = TestHelper.GetGamerPicUrl(g_OfflineAccount.GamerProfile.GamerPicture.Replace("\0", ""),
                                                                        out gamerPicFriendlyName);
                }
                Trace.TraceInformation("Gamer Pic Friendly Name: " + gamerPicFriendlyName);

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected GamerPic Url.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        //Check if profile has a valid avatar and change expected GP url if required
                        if ((bool)m_ProfileData.ProfileProperties[ProfileProperty.HasAvatar])
                        {
                            Trace.TraceInformation("Profile has a valid avatar. Changing expected GamerPicUrl");
                            if (g_OfflineAccount == null)
                                expectedXboxGamerPicUrl = String.Format("http://avatar.test.xboxlive.com/avatar/{0}/avatarpic-l.png",
                                                                        g_XBLUser.XblUser.Gamertag);
                            else
                                expectedXboxGamerPicUrl = String.Format("http://avatar.test.xboxlive.com/avatar/{0}/avatarpic-l.png",
                                                                        g_OfflineAccount.XblUser.GamerTag);
                        }

                        string profileXboxGamerPicUrl = (string)m_ProfileData.ProfileProperties[ProfileProperty.GamerPicUrl];
                        Trace.TraceInformation("GamerPic Url from profile: " + profileXboxGamerPicUrl);
                        Trace.TraceInformation("Expected GamerPic Url: " + expectedXboxGamerPicUrl);

                        if (expectedXboxGamerPicUrl != profileXboxGamerPicUrl)
                        {
                            Trace.TraceWarning("Profile GamerPic Url is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile GamerPic Url is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }
        */

        /// <summary>
        /// Verifies that the Gamer Zone from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxGamerZoneFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (!g_TestAccount.IsOffline)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        GamerZone m_NewZone = TestHelper.SelectRandomZone();

                        Trace.TraceInformation("Setting Gamer Zone to: " + m_NewZone.ToString());
                        TestHelper.SetGamerZone(m_NewZone, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Zone has been set to: " + g_XBLUser.GamerProfile.Zone.ToString());

                        if (m_NewZone == g_XBLUser.GamerProfile.Zone)
                        {
                            Trace.TraceInformation("Gamer Zone has been successfully set.");
                            g_TestAccount.CloneGamerProfileFrom(g_XBLUser);
                            Trace.TraceInformation("Test account gamerprofile cloned successfully.");
                        }
                        else
                        {
                            Trace.TraceWarning("Gamer Zone could not be set successfully!");
                            Assert.Fail("Gamer Zone could not be set successfully!");
                        }
                    }
                }
                else
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Gamertag.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxGamerZone = (string)m_ProfileData.ProfileProperties[ProfileProperty.GamerZone];
                        Trace.TraceInformation("GamerZone from profile: " + profileXboxGamerZone);
                        Trace.TraceInformation("Expected GamerZone: " + g_TestAccount.GamerProfile.Zone.ToString());

                        //Testoverride for BUG:1898
                        if (g_TestAccount.GamerProfile.Zone == GamerZone.None || g_TestAccount.GamerProfile.Zone == GamerZone.Recreation)
                        {
                            string m_OverrideExpectedZone = "";
                            switch (g_TestAccount.GamerProfile.Zone)
                            {
                                case GamerZone.Recreation:
                                    Trace.TraceWarning("BUG_1898::Expected zone is 'Recreation'. Overriding expected zone value to 'RR'.");
                                    m_OverrideExpectedZone = "RR";
                                    break;
                                case GamerZone.None:
                                    Trace.TraceWarning("BUG_1898::Expected zone is 'None'. Overriding expected zone value to 'Xbox_1'.");
                                    m_OverrideExpectedZone = "Xbox_1";
                                    break;
                            }
                            if (m_OverrideExpectedZone != profileXboxGamerZone)
                            {
                                Trace.TraceWarning("Profile GamerZone is not as expected.");
                                Trace.TraceError("Test failed!");
                                Assert.Fail("Profile GamerZone is not as expected.");
                            }
                        }
                        else
                        {
                            if (g_TestAccount.GamerProfile.Zone.ToString() != profileXboxGamerZone)
                            {
                                Trace.TraceWarning("Profile GamerZone is not as expected.");
                                Trace.TraceError("Test failed!");
                                Assert.Fail("Profile GamerZone is not as expected.");
                            }
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Gamer Location from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxLocationFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (!g_TestAccount.IsOffline)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        string m_NewLocation = TestHelper.GetRandomString(30);      //Max location is 40

                        Trace.TraceInformation("Setting Gamer Location to: " + m_NewLocation);
                        TestHelper.SetGamerLocation(m_NewLocation, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Location has been set to: " + g_XBLUser.GamerProfile.Location.Replace("\0", ""));

                        if (m_NewLocation == g_XBLUser.GamerProfile.Location.Replace("\0", ""))
                        {
                            Trace.TraceInformation("Gamer Location has been successfully set.");
                            g_TestAccount.CloneGamerProfileFrom(g_XBLUser);
                            Trace.TraceInformation("Test account gamerprofile cloned successfully.");
                        }
                        else
                        {
                            Trace.TraceWarning("Gamer Location could not be set successfully!");
                            Assert.Fail("Gamer Location could not be set successfully!");
                        }
                    }
                }
                else
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Gamer Location.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxGamerLocation = (string)m_ProfileData.ProfileProperties[ProfileProperty.Location];
                        Trace.TraceInformation("Gamer Location from profile: " + profileXboxGamerLocation);
                        Trace.TraceInformation("Expected Gamer Location: " + g_TestAccount.GamerProfile.Location);

                        if (g_TestAccount.GamerProfile.Location != profileXboxGamerLocation)
                        {
                            Trace.TraceWarning("Profile Gamer Location is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Gamer Location is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Gamer Motto from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyXboxMottoFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";

            try
            {
                if (!g_TestAccount.IsOffline)
                {
                    if (g_Overrides == null || g_Overrides.ModifyProfileAtStart == false)
                    {
                        string m_NewMotto = TestHelper.GetRandomString(20);      //Max Motto is 21

                        Trace.TraceInformation("Setting Gamer Motto to: " + m_NewMotto);
                        TestHelper.SetGamerMotto(m_NewMotto, ref g_XBLUser);
                        Trace.TraceInformation("Gamer Motto has been set to: " + g_XBLUser.GamerProfile.Motto.Replace("\0", ""));

                        if (m_NewMotto == g_XBLUser.GamerProfile.Motto.Replace("\0", ""))
                        {
                            Trace.TraceInformation("Gamer Motto has been successfully set.");
                            g_TestAccount.CloneGamerProfileFrom(g_XBLUser);
                            Trace.TraceInformation("Test account gamerprofile cloned successfully.");
                        }
                        else
                        {
                            Trace.TraceWarning("Gamer Motto could not be set successfully!");
                            Assert.Fail("Gamer Motto could not be set successfully!");
                        }
                    }
                }
                else
                    Trace.TraceInformation("Offline account in use.");

                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");

                output = GetProfileServiceResponse("xml", "1");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Gamer Motto.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileXboxGamerMotto = (string)m_ProfileData.ProfileProperties[ProfileProperty.Motto];
                        Trace.TraceInformation("Gamer Motto from profile: " + profileXboxGamerMotto);
                        Trace.TraceInformation("Expected Gamer Motto: " + g_TestAccount.GamerProfile.Motto);

                        if (g_TestAccount.GamerProfile.Motto != profileXboxGamerMotto)
                        {
                            Trace.TraceWarning("Profile Gamer Motto is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Gamer Motto is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }
        #endregion

        #region Xbox Recent Games tests
        /// <summary>
        /// Verifies that the Recent Games count from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyRecentGamesListPopulatedFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            int expectedNumberOfGames = g_DefinedGames == null ? 0 : g_DefinedGames.Count;

            try
            {
                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 8");

                output = GetProfileServiceResponse("xml", "8");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Recent Games list.");
                    m_ProfileData = (Profile)data;

                    int recentGamesCount = m_ProfileData.RecentGames == null ? 0 : m_ProfileData.RecentGames.Count;
                    Trace.TraceInformation("Recent Games count from profile: " + recentGamesCount.ToString());
                    Trace.TraceInformation("Expected Recent Games count: " + expectedNumberOfGames.ToString());

                    if (recentGamesCount != expectedNumberOfGames)
                    {
                        Trace.TraceWarning("Profile Recent Games count is not as expected.");
                        Trace.TraceError("Test failed!");
                        Assert.Fail("Profile Recent Games count is not as expected.");
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }

        /// <summary>
        /// Verifies that the Recent Games title ids from profile data fetched from profile service
        /// is as expected.
        /// </summary>
        [TestMethod]
        public void VerifyRecentGamesTitleIdsFromProfileService()
        {
            Profile m_ProfileData = null;
            string output = "";
            bool m_AllTitleIdsFound = true;

            try
            {
                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 8");

                output = GetProfileServiceResponse("xml", "8");

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {

                    Trace.TraceInformation("Analyzing Profile data for expected Recent Games Title Ids.");
                    m_ProfileData = (Profile)data;

                    IList<GameInfo> recentGames = m_ProfileData.RecentGames;
                    int recentGamesCount = (recentGames == null ? 0 : recentGames.Count);

                    Trace.TraceInformation("Expected Recent Game count: " + g_DefinedGames.Count.ToString());
                    Trace.TraceInformation("Actual Recent Game Count: " + m_ProfileData.RecentGames.Count.ToString());

                    if (recentGamesCount == g_DefinedGames.Count)
                    {
                        if (!(g_DefinedGames.Count == 0 && recentGamesCount == 0))
                        {
                            foreach (GameTitle m_ExpectedGame in g_DefinedGames)
                            {
                                bool m_Found = false;
                                int m_ExpectedTitleId = (int)TestHelper.ParseTitleId(m_ExpectedGame.TitleId);
                                Trace.TraceInformation("Searching for expected game '" + m_ExpectedGame.Name +
                                                       "' with title id '" + m_ExpectedTitleId.ToString() + "' in profile.");

                                foreach (object m_GameObj in recentGames)
                                {
                                    if (m_GameObj.GetType() != typeof(GameInfo))
                                    {
                                        Trace.TraceWarning("An object of type other than 'GameInfo' was encountered in profile data.");
                                        Trace.TraceWarning("Object type encountered: " + m_GameObj.GetType().ToString());
                                        Trace.TraceError("Test failed!");
                                        Assert.Fail("An object of type other than 'GameInfo' was encountered in profile data.");
                                    }
                                    else
                                    {
                                        GameInfo m_ProfileGame = (GameInfo)m_GameObj;

                                        if (m_ExpectedTitleId == m_ProfileGame.Id)
                                        {
                                            Trace.TraceInformation("Expected Title Id found in recent game list.");
                                            m_Found = true;
                                            break;
                                        }
                                    }
                                }

                                //Check if game title id was found.
                                if (!m_Found)
                                {
                                    Trace.TraceWarning("Expected recent game title id '" + m_ExpectedTitleId.ToString() + "' not found in profile data.");
                                    m_AllTitleIdsFound = false;
                                }
                            }

                            if (m_AllTitleIdsFound)
                            {
                                Trace.TraceInformation("All expected recent game title ids were found in the profile data.");
                                Trace.TraceInformation("Test Passed.");
                            }
                            else
                            {
                                Trace.TraceWarning("All expected recent game title ids were not found in the profile data.");
                                Trace.TraceError("Test failed!");
                                Assert.Fail("All expected recent game title ids were not found in the profile data.");
                            }
                        }
                        else
                        {
                            Trace.TraceInformation("No expected Recent Game data to compare.");
                            Trace.TraceInformation("Test pass by default.");
                        }
                    }
                    else
                    {
                        Trace.TraceWarning("Recent Game count from profile data is not as expected.");
                        Trace.TraceError("Test failed!");
                        Assert.Fail("Recent Game count from profile data is not as expected.");
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }
        #endregion

        #region Xbox Profile Other User Tests
        /// <summary>
        /// Verifies the Gamertag of another user.
        /// </summary>
        [TestMethod]
        public void VerifyOtherUserGamertagFromProfileService()
        {
            string m_ExpectedGamertag = "";

            if (g_OtherXBLUser == null)
            {
                if (!g_TestAccount.IsOffline)
                {
                    CreateNewXBLUser(true, ref g_OtherXBLUser);
                    m_ExpectedGamertag = g_OtherXBLUser.XblUser.Gamertag;
                }
                else
                {
                    m_ExpectedGamertag = "PSTestFriend";
                }
            }
            else
            {
                m_ExpectedGamertag = g_OtherXBLUser.XblUser.Gamertag;
            }

            Profile m_ProfileData = null;
            string output = "";

            try
            {
                Trace.TraceInformation("Calling GetProfileServiceResponse with the following params:");
                Trace.TraceInformation("...Format: xml");
                Trace.TraceInformation("...SectionFlags: 1");
                Trace.TraceInformation("...gamertag: " + m_ExpectedGamertag);

                output = GetProfileServiceResponse("/Profiles.svc/profile?format=xml&sectionflags=1&gamertag=" + m_ExpectedGamertag); 

                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(Encoding.UTF8.GetBytes(output), new XmlDictionaryReaderQuotas());
                XmlSerializer ser = new XmlSerializer(typeof(Profile));
                object data = ser.Deserialize(reader);
                Trace.TraceInformation("Object created from Response text.");
                Trace.TraceInformation("Response object type was: " + data.GetType().ToString());

                if (data.GetType() != typeof(Profile))
                {
                    Trace.TraceWarning("An object of 'Profile' type was expected.");
                    Trace.TraceError("Test failed!");
                    Assert.Fail("Response object type was not as expected!");
                }
                else
                {
                    Trace.TraceInformation("Analyzing Profile data for expected Gamertag.");
                    m_ProfileData = (Profile)data;

                    if (m_ProfileData.ProfileProperties == null)
                    {
                        Trace.TraceWarning("Profile properties is null.");
                        Trace.TraceError("Test Failed!");
                        Assert.Fail("Profile properties is null.");
                    }
                    else
                    {
                        string profileGamertag = (string)m_ProfileData.ProfileProperties[ProfileProperty.GamerTag];
                        Trace.TraceInformation("Gamertag from profile: " + profileGamertag);
                        Trace.TraceInformation("Expected Gamertag: " + m_ExpectedGamertag);

                        if (profileGamertag != m_ExpectedGamertag)
                        {
                            Trace.TraceWarning("Profile Gamertag is not as expected.");
                            Trace.TraceError("Test failed!");
                            Assert.Fail("Profile Gamertag is not as expected.");
                        }
                    }
                }
            }
            catch (WebException m_WebError)
            {
                Trace.TraceError("An error occured while fetching Profile data:");
                Trace.TraceError(m_WebError.ToString());
                if (m_WebError.Response != null)
                {
                    StreamReader stream = new StreamReader(m_WebError.Response.GetResponseStream());
                    Trace.TraceError("Response Stream: " + stream.ReadToEnd());
                }
                Assert.Fail("An error occured while fetching Profile data.");
            }
            catch (Exception m_Error)
            {
                if (m_Error is AssertFailedException)
                    Assert.Fail(m_Error.Message.Substring(20));
                else
                {
                    Trace.TraceError("An error occured while fetching Profile data:");
                    Trace.TraceError(m_Error.ToString());
                    Assert.Fail("An error occured while fetching Profile data.");
                }
            }
        }


        /// <summary>
        /// Verifies that the profile service returns a proper data structure for another user's profile.
        /// </summary>
        [TestMethod]
        public void VerifyOtherUserProperDataStructureFromGetProfileService()
        {
            string m_GamerTag = "";

            if (g_OtherXBLUser == null)
            {
                if (!g_TestAccount.IsOffline)
                {
                    CreateNewXBLUser(true, ref g_OtherXBLUser);
                    m_GamerTag = g_OtherXBLUser.XblUser.Gamertag;
                }
                else
                {
                    m_GamerTag = "PSTestUser";
                }
            }
            else
            {
                m_GamerTag = g_OtherXBLUser.XblUser.Gamertag;
            }

            VerifyProperDataStructureFromGetProfileService("xml", "31", m_GamerTag, "");
        }
        
        #endregion

        #region Helper Methods
        /// <summary>
        /// Returns a indented XML for the specfied XML string.
        /// </summary>
        /// <param name="XMLToTrace">The string representing the XML to format.</param>
        /// <returns>A string containing the formatted XML.</returns>
        public string GetFormattedXML(string XMLToTrace)
        {
            try
            {
                XDocument m_XML = XDocument.Parse(XMLToTrace);
                return m_XML.ToString();
            }
            catch
            {
                //Input is not an XML.
                return XMLToTrace;
            }
        }

        /// <summary>
        /// Loads the required environment and profile data from XML files.
        /// </summary>
        public void LoadData()
        {
            Environments m_Environments = null;

            #region Check for Environments.xml file
            if (!File.Exists("Environments.xml"))
            {
                Trace.TraceError("ERROR: The file 'Environments.xml' does not exist.");
                throw new FileNotFoundException("The file 'Environments.xml' does not exist.");
            }
            #endregion

            #region Set Environment Data
            m_Environments = (Environments)TestHelper.LoadXmlObject(typeof(Environments), "Environments.xml");
            g_ActiveEnvironment = m_Environments.ActiveEnvironment.ToLowerInvariant();
            g_Overrides = m_Environments.Overrides;

            foreach (EnvironmentData m_EnvData in m_Environments.EnvironmentDefinitions)
            {
                if (m_EnvData.EnvironmentName.ToLowerInvariant() == g_ActiveEnvironment)
                {
                    g_ServiceTarget = m_EnvData.ProfileServiceTarget;
                    g_SiteUrl = m_EnvData.SiteURL;
                    g_SiteID = m_EnvData.SiteID;
                    g_STSAuthData = m_EnvData.STSAuthorization;
                    TestHelper.g_XblobName = m_EnvData.STSAuthorization.XBlobName;
                    g_DefinedGames = m_EnvData.GameTitles;
                    break;
                }
            }

            //Check if the specified active environment is valid and defined
            if (String.IsNullOrEmpty(g_ServiceTarget))
                throw new Exception("The specified active environment name is not defined.");
            
            Trace.TraceInformation("Environment data loaded.");
            Trace.TraceInformation("Active environment is " + g_ActiveEnvironment);
            #endregion

            #region Evaluate Overrides
            if (g_Overrides != null)
            {
                //Check for Offline Account Override
                if (!g_Overrides.UseOfflineAccount)
                {
                    //Check for valid credential override
                    if ((g_Overrides.ActiveUser != null) && (!g_Overrides.ActiveUser.IsValid()))
                        g_Overrides.ActiveUser = null;

                    //Init empty Test Account which will be populated later
                    g_TestAccount = new TestAccount()
                    {
                        IsOffline = false
                    };
                }
                else
                {
                    //Offline account mode
                    Trace.TraceInformation("Offline account override specified. Loading account data from 'OfflineAccount.xml' ...");
                    if (!File.Exists("OfflineAccount.xml"))
                        throw new Exception("'OfflineAccount.xml' file not found. This file should exist and contain the offline account data 'UseOfflineAccount' is true.");
                    else
                    {
                        g_TestAccount = (TestAccount)TestHelper.LoadXmlObject(typeof(TestAccount),
                                                                              "OfflineAccount.xml");
                        if (g_TestAccount == null)
                            throw new Exception("No offline account data was contained in 'OfflineAccount.xml'");
                        else
                            g_TestAccount.IsOffline = true;             //Mark as offline account
                    }
                }
            }
            else
            {
                //Init empty Test Account which will be populated later
                g_TestAccount = new TestAccount()
                {
                    IsOffline = false
                };
            }
            #endregion

            #region Set Game data
            if (g_DefinedGames == null || g_DefinedGames.Count == 0)
            {
                Trace.TraceWarning("No game titles have been defined.");
                Trace.TraceWarning("User will not have any recent games or achievements.");
            }
            else
            {
                Trace.TraceInformation("Number of Game titles defined: " + g_DefinedGames.Count.ToString());
                g_LastGame = g_DefinedGames[g_DefinedGames.Count - 1].Name;
                Trace.TraceInformation("Lastest Game set to: " + g_LastGame);

                foreach (GameTitle m_Game in g_DefinedGames)
                {
                    foreach (GameAchievement m_Achievement in m_Game.GameAchievements)
                        g_LastAchievement = m_Achievement;
                }

                if (g_LastAchievement == null)
                    Trace.TraceWarning("No Achievements defined!");
                else
                {
                    Trace.TraceInformation("Latest Achievement set to:");
                    Trace.TraceInformation("...Name: " + g_LastAchievement.Name);
                    Trace.TraceInformation("...Description: " + g_LastAchievement.Description);
                    Trace.TraceInformation("...Id: " + g_LastAchievement.AchievementId.ToString());
                }
            }
            #endregion

            #region Set Auth Mode
            switch (m_Environments.AuthenticationMethod.ToUpperInvariant())
            {
                case "RPS":
                    g_AuthMode = AuthMethod.RPS;
                    break;
                case "STS":
                    g_AuthMode = AuthMethod.STS;
                    break;
                default:
                    g_AuthMode = AuthMethod.STS;
                    break;
            }
            Trace.TraceInformation("Auth mode set to " + g_AuthMode.ToString());
            #endregion
        }

        /// <summary>
        /// Indicates the authentication method to use.
        /// </summary>
        private enum AuthMethod
        {
            /// <summary>
            /// Indicates that the authentication method is RPS ticket.
            /// </summary>
            RPS,
            /// <summary>
            /// Indicates that the authentication method is STS token.
            /// </summary>
            STS
        }

        /// <summary>
        /// Gets the Profile service response for the specified format and the section flags.
        /// </summary>
        /// <param name="Format">The format of the returned data.</param>
        /// <param name="SectionFlags">The section flags representing what profile data to return.</param>
        /// <returns>A string representing the response text.</returns>
        private string GetProfileServiceResponse(string Format, string SectionFlags)
        {
            return GetProfileServiceResponse("/Profiles.svc/profile?format=" + Format + "&sectionflags=" + SectionFlags);
        }

        /// <summary>
        /// Gets the Profile service response for the specified Profile service method Url.
        /// </summary>
        /// <param name="ProfileUrl">The Profile service method Url.</param>
        /// <returns>A string representing the response text.</returns>
        private string GetProfileServiceResponse(string ProfileUrl)
        {
            string m_ResponseText = "";
            string m_STSToken = "";
            string m_RPSToken = "";
            HttpWebRequest m_ProfileServiceRequest = null;
            HttpWebRequest m_STSServiceRequest = null;
            RPSAutoLogin m_RPSLogin = null;

            Trace.TraceInformation("GetProfileServiceRequest called with the following Profile Url:");
            Trace.TraceInformation("...Url: " + ProfileUrl);

            switch (g_AuthMode)
            {
                #region RPS
                case AuthMethod.RPS:
                    Trace.TraceInformation("Profile Service Auth mode: RPS");
                    m_RPSLogin = new RPSAutoLogin(g_ServiceTarget + ProfileUrl,
                                              g_SiteUrl,
                                              g_TestAccount.XblUser.UserPassportInfo.MemberName,
                                              g_TestAccount.XblUser.UserPassportInfo.Password,
                                              g_PassportEnvironment,
                                              TargetProperty.Other,
                                              g_SiteID,
                                              g_AuthPolicy);

                    m_RPSLogin.ImplementProxy = g_ImplementProxy;
                    m_RPSLogin.ProxyBypass = g_ProxyBypass;

                    Trace.TraceInformation("RPS Login object created for Profile Service with the following params:");
                    Trace.TraceInformation("...Target: " + g_ServiceTarget + ProfileUrl);
                    Trace.TraceInformation("...Site: " + g_SiteUrl);
                    Trace.TraceInformation("...Username: " + g_TestAccount.XblUser.UserPassportInfo.MemberName);
                    Trace.TraceInformation("...Password: " + g_TestAccount.XblUser.UserPassportInfo.Password);
                    Trace.TraceInformation("...Passport Environment: " + g_PassportEnvironment);
                    Trace.TraceInformation("...Property: Other");
                    Trace.TraceInformation("...Site ID: " + g_SiteID);
                    Trace.TraceInformation("...Auth Policy: " + g_AuthPolicy);
                    Trace.TraceInformation("...Implement Proxy: " + g_ImplementProxy);

                    m_ProfileServiceRequest = m_RPSLogin.BuildRequest("GET");
                    Trace.TraceInformation("Profile Service request created.");
                    m_ProfileServiceRequest.Method = "GET";
                    m_RPSToken = m_RPSLogin.Token;
                    Trace.TraceInformation("RPS Auth Token: " + m_RPSToken);
                    m_ProfileServiceRequest.Headers.Add("X-Authorization", "WLID1.0 t=" + m_RPSToken);
                    Trace.TraceInformation("X-Authorization header added to Profile Service request with RPS token.");
                    m_ResponseText = m_RPSLogin.PerformRequest(m_ProfileServiceRequest);
                    Trace.TraceInformation("Response Text: " + Environment.NewLine + GetFormattedXML(m_ResponseText));
                    break; 
                #endregion
                #region STS
                case AuthMethod.STS:
                    Trace.TraceInformation("Profile Service Auth mode: STS");
                    StreamReader m_ResponseStream = null;
                    string m_STSWebServiceUrl = "";

                    if (g_STSAuthData==null)
                        throw new Exception("The STS Auth environment is not defined. Make sure that it is defined in the environment definition XML 'Environments.xml'.");

                    m_STSWebServiceUrl = "http://" + g_STSAuthData.XBlobName;
                    if (!String.IsNullOrEmpty(g_STSAuthData.Port))
                        m_STSWebServiceUrl += ":" + g_STSAuthData.Port;
                    m_STSWebServiceUrl += "/sts/sts.asmx/GetSecurityTicket?platformType=" +
                                         g_STSAuthData.PlatformType +
                                         "&titleId=" + g_STSAuthData.TitleId +
                                         "&titleVersion=" + g_STSAuthData.TitleVersion +
                                         "&clientVersion=" + g_STSAuthData.ClientVersion +
                                         "&deviceId=" + g_STSAuthData.DeviceId;
                    m_RPSLogin = new RPSAutoLogin(m_STSWebServiceUrl,
                                                  g_SiteUrl,
                                                  g_TestAccount.XblUser.UserPassportInfo.MemberName,
                                                  g_TestAccount.XblUser.UserPassportInfo.Password,
                                                  g_PassportEnvironment,
                                                  TargetProperty.Other,
                                                  g_SiteID,
                                                  g_AuthPolicy);
                    m_RPSLogin.ImplementProxy = g_ImplementProxy;
                    m_RPSLogin.ProxyBypass = g_ProxyBypass;

                    Trace.TraceInformation("RPS Login object created for STS Service with the following params:");
                    Trace.TraceInformation("...Target: " + m_STSWebServiceUrl);
                    Trace.TraceInformation("...Site: " + g_SiteUrl);
                    Trace.TraceInformation("...Username: " + g_TestAccount.XblUser.UserPassportInfo.MemberName);
                    Trace.TraceInformation("...Password: " + g_TestAccount.XblUser.UserPassportInfo.Password);
                    Trace.TraceInformation("...Passport Environment: " + g_PassportEnvironment);
                    Trace.TraceInformation("...Property: Other");
                    Trace.TraceInformation("...Site ID: " + g_SiteID);
                    Trace.TraceInformation("...Auth Policy: " + g_AuthPolicy);
                    Trace.TraceInformation("...Implement Proxy: " + g_ImplementProxy);

                    m_STSServiceRequest = m_RPSLogin.BuildRequest("GET");
                    m_STSServiceRequest.Method = "GET";
                    m_RPSToken = m_RPSLogin.Token;
                    Trace.TraceInformation("RPS Auth Token: " + m_RPSToken);
                    m_STSServiceRequest.Headers.Add("X-Authorization", "WLID1.0 t=" + m_RPSToken);
                    Trace.TraceInformation("X-Authorization header added to STS Service request with RPS token.");
                    m_STSToken = m_RPSLogin.PerformRequest(m_STSServiceRequest);

                    if (String.IsNullOrEmpty(m_STSToken))
                        throw new Exception("Null STS token received from STS Service.");
                    else
                    {
                        Trace.TraceInformation("STS Service Response: " + m_STSToken);
                        Trace.TraceInformation("Getting SAML data from response.");
                        m_STSToken = GetSAMLData(m_STSToken);
                        Trace.TraceInformation("SAML data has been successfully extracted.");
                    }

                    m_ProfileServiceRequest = BuildProfileServiceRequest(g_ServiceTarget + ProfileUrl);
                    m_ProfileServiceRequest.Headers.Add("X-Authorization", "XBL1.0 x=" + m_STSToken);
                    Trace.TraceInformation("X-Authorization header added to Profile Service request with STS token.");
                    
                    m_ResponseStream = new StreamReader(m_ProfileServiceRequest.GetResponse().GetResponseStream());
                    m_ResponseText = m_ResponseStream.ReadToEnd();
                    Trace.TraceInformation("Response Text: " + Environment.NewLine + GetFormattedXML(m_ResponseText));
                    break; 
                #endregion
            }

            return m_ResponseText;
        }

        /// <summary>
        /// Extracts the required SAML data from the STS Service response.
        /// </summary>
        /// <param name="STSServiceResponse">The STS Service response string.</param>
        /// <returns>A string representing the required SAML data.</returns>
        private string GetSAMLData(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);
                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "string").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        /// <summary>
        /// Creates an HTTP Web Request object for the specified Profile service url.
        /// </summary>
        /// <param name="ProfileServiceUrl">The profile service url.</param>
        /// <returns>A Http Web Request object.</returns>
        private HttpWebRequest BuildProfileServiceRequest(string ProfileServiceUrl)
        {
            HttpWebRequest m_ProfileServiceRequest = (HttpWebRequest)HttpWebRequest.Create(ProfileServiceUrl);
            if (g_ImplementProxy)
            {
                WebProxy m_Proxy = (g_PassportEnvironment == PassportEnvironment.INT ? new WebProxy("http://itgproxy:80", true, g_ProxyBypass) :
                                                                                       new WebProxy("http://itgproxy:80"));
                m_ProfileServiceRequest.Proxy = m_Proxy;
            }
            m_ProfileServiceRequest.AllowAutoRedirect = false;
            m_ProfileServiceRequest.Accept = "*/*";
            m_ProfileServiceRequest.UserAgent = "Profile Service Test Agent";
            m_ProfileServiceRequest.Method = "GET";
            m_ProfileServiceRequest.CachePolicy = new RequestCachePolicy(RequestCacheLevel.BypassCache);

            Trace.TraceInformation("Profile Service Web Request created with the following params:");
            Trace.TraceInformation("...Url: " + ProfileServiceUrl);
            Trace.TraceInformation("...Implement Proxy: " + g_ImplementProxy);
            Trace.TraceInformation("...Method: GET");
            Trace.TraceInformation("...Allow Redirection: False");

            return m_ProfileServiceRequest;
        }

        /// <summary>
        /// Creates a new main XBL User account.
        /// </summary>
        /// <param name="UpdateProfileProperties">Indicates whether to update all the profile properties.</param>
        private void CreateNewXBLUser(bool UpdateProfileProperties)
        {
            CreateNewXBLUser(UpdateProfileProperties, ref g_XBLUser);
        }

        /// <summary>
        /// Creates a new XBL user account for the specified account object.
        /// Can be used for caller and YouView (other user) profile call tests.
        /// </summary>
        /// <param name="UpdateProfileProperties">Indicates whether to update all the profile properties.</param>
        /// <param name="XBLAccount">An account object which will be created and returned.</param>
        private void CreateNewXBLUser(bool UpdateProfileProperties, ref Account XBLAccount)
        {
            string m_Motto = "";
            string m_Location = "";
            GamerZone m_Zone;
            string m_GamerPic = "";
            string m_Bio = "";
            string m_Name = "";

            XBLAccount = TestHelper.CreateXBLAccount(TestHelper.SelectRandomXblTier());
            Trace.TraceInformation("New XBL User created with following properties:");
            Trace.TraceInformation("...Username: " + XBLAccount.XblUser.Settings.UserPassportInfo.MemberName);
            Trace.TraceInformation("...Password: " + XBLAccount.XblUser.Settings.UserPassportInfo.Password);
            Trace.TraceInformation("...PUID: " + XBLAccount.XblUser.Puid.ToString());
            Trace.TraceInformation("...Tier: " + XBLAccount.XblUser.Settings.UserType.ToString());

            #region Update Profile properties
            if (UpdateProfileProperties)
            {
                m_Motto = TestHelper.GetRandomString(20);                       //Max Motto is 21
                m_Location = TestHelper.GetRandomString(30);                    //Max location is 40
                m_Zone = TestHelper.SelectRandomZone();
                m_GamerPic = g_XBLUser.GamerProfile.SelectRandomPicture().Replace("\0", "");
                m_Bio = TestHelper.GetRandomString(50);                         //Max Bio is 499
                m_Name = TestHelper.GetRandomString(20);                        //Max name is 129

                Trace.TraceInformation("Updating profile properties with the following values:");
                Trace.TraceInformation("...Motto: " + m_Motto);
                Trace.TraceInformation("...Location: " + m_Location);
                Trace.TraceInformation("...Zone: " + m_Zone.ToString());
                Trace.TraceInformation("...GamerPic: " + m_GamerPic);
                Trace.TraceInformation("...Bio: " + m_Bio);
                Trace.TraceInformation("...Name: " + m_Name);

                TestHelper.SetGamerProfileProperties(m_Motto, m_Name, m_Location, m_Bio, m_GamerPic, m_Zone, ref XBLAccount);

                Trace.TraceInformation("Updated profile fields from User account:");
                Trace.TraceInformation("...Motto: " + XBLAccount.GamerProfile.Motto.Replace("\0", ""));
                Trace.TraceInformation("...Location: " + XBLAccount.GamerProfile.Location.Replace("\0", ""));
                Trace.TraceInformation("...Zone: " + XBLAccount.GamerProfile.Zone.ToString());
                Trace.TraceInformation("...GamerPic: " + XBLAccount.GamerProfile.GamerPicture.Replace("\0", ""));
                Trace.TraceInformation("...Bio: " + XBLAccount.GamerProfile.Bio.Replace("\0", ""));
                Trace.TraceInformation("...Name: " + XBLAccount.GamerProfile.Name.Replace("\0", ""));
                
                if ((m_Motto != XBLAccount.GamerProfile.Motto.Replace("\0", "")) ||
                    (m_Location != XBLAccount.GamerProfile.Location.Replace("\0", "")) ||
                    (m_Zone != XBLAccount.GamerProfile.Zone) ||
                    (m_GamerPic != XBLAccount.GamerProfile.GamerPicture.Replace("\0", "")) ||
                    (m_Bio != XBLAccount.GamerProfile.Bio.Replace("\0", "")) ||
                    (m_Name != XBLAccount.GamerProfile.Name.Replace("\0", ""))
                   )
                {
                    Trace.TraceWarning("One or more profile properties was not set successfully!");
                    throw new Exception("One or more profile properties was not set successfully!");
                }
                else
                {
                    Trace.TraceInformation("All profile properties were set successfully.");
                }
            } 
            #endregion

            #region Create Game History
            Trace.TraceInformation("Creating Game history ...");
            if (g_DefinedGames == null || g_DefinedGames.Count == 0)
                Trace.TraceWarning("...No defined games to create history.");
            else
            {
                foreach (GameTitle m_Game in g_DefinedGames)
                {
                    if (m_Game.TitleType == GameTitleType.Other)
                    {
                        Trace.TraceWarning("...Title ID: " + m_Game.TitleId + " is not a Xbox 360 title.");
                        Trace.TraceWarning("...Only Xbox 360 titles are supported as of now.");
                    }
                    else
                    {
                        Trace.TraceInformation("...Processing Game: " + m_Game.Name + " (" + m_Game.TitleId + ")");

                        if (m_Game.GameAchievements == null || m_Game.GameAchievements.Count == 0)
                        {
                            TestHelper.AddGameHistory(m_Game, ref XBLAccount);                            
                            Trace.TraceInformation("......Successfully adding Game Title only.");
                            Trace.TraceWarning("......No achievements were defined. None was granted.");
                        }
                        else
                        {
                            //Add Title and Achievements
                            TestHelper.AddGameHistory(m_Game, ref XBLAccount);
                            TestHelper.AddGameAchievements(m_Game, ref XBLAccount);
                            Trace.TraceInformation("......Successfully adding Game Title.");
                            Trace.TraceInformation("......All " + m_Game.GameAchievements.Count.ToString() + " defined game achievements added.");
                        }
                    }
                }
            }
            Trace.TraceInformation("Game history created successfully."); 
            #endregion            
        }
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Database\DatabaseVerification.cs ===
﻿using System;
using System.Data.SqlClient;
using System.Data;
using Infrastructure.Test.Common.Settings;

namespace Infrastructure.Test.Common.Database
{
    public static class DatabaseVerification
    {
        public enum DatabasePermission
        {
            Delete,
            Execute,
            Insert,
            Select,
            Update
        }

        // The permission states
        public enum DatabasePermissionState
        {
            Deny,
            Revoke,
            Grant,
            Grant_With_Grant_Option
        }

        private const string TableExistsQuery = "IF OBJECT_ID('{0}', 'U') IS NOT NULL SELECT 'true' ELSE SELECT 'false'";
        private const string SprocExistsQuery = "SELECT * FROM sys.objects WHERE type_desc = 'SQL_STORED_PROCEDURE' AND name = '{0}'";
        private const string SprocPermissionsQuery = "SELECT COUNT(*) FROM sys.database_principals pr INNER JOIN (sys.database_permissions pe INNER JOIN sys.all_objects o ON pe.major_id = o.object_id) ON pr.principal_id = pe.grantee_principal_id WHERE pr.name='{0}' And o.name='{1}' And pe.permission_name='{2}' And pe.state_desc='{3}'";
        private const string FunctionExistsQuery = "SELECT * FROM sys.objects WHERE type = 'FN' And name = '{0}'";


        /// <summary>
        /// Checks for existence of a table in a database
        /// </summary>
        /// <param name="tableName">Table name</param>
        /// <returns>True if table exists else false</returns>
        public static bool TableExists(string tableName, string connectionString)
        {
            bool flag = false;

            string checkTable = String.Format(TableExistsQuery, tableName);
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlCommand command = new SqlCommand(checkTable, connection);
                command.CommandType = CommandType.Text;
                flag = Convert.ToBoolean(command.ExecuteScalar());
            }
            return flag;
        }

        /// <summary>
        /// Checks if a particular stored procedure exists in a database
        /// </summary>
        /// <param name="sprocName">Stored Procedure name</param>
        /// <returns>True if Stored Procedure exist, false otherwise</returns>
        public static bool StoredProcedureExists(string sprocName, string connectionString)
        {
            bool flag = false;

            string checkSproc = String.Format(SprocExistsQuery, sprocName);
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlCommand command = new SqlCommand(checkSproc, connection);
                command.CommandType = CommandType.Text;
                SqlDataReader reader = command.ExecuteReader();
                flag = reader.HasRows;
                reader.Close();
            }

            return flag;
        }

        /// <summary>
        /// Checks if a particular function exists in a database
        /// </summary>
        /// <param name="functionName">Function name</param>
        /// <returns>True if the Function exists, false otherwise</returns>
        public static bool FunctionExists(string functionName, string connectionString)
        {
            bool flag = false;

            string checkFunction = String.Format(FunctionExistsQuery, functionName);
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlCommand command = new SqlCommand(checkFunction, connection);
                command.CommandType = CommandType.Text;
                SqlDataReader reader = command.ExecuteReader();
                flag = reader.HasRows;
                reader.Close();
            }

            return flag;
        }

        /// <summary>
        /// Returns a boolean indicating whether or not the user has the specified permissions for a given object
        /// </summary>
        /// <param name="userName">The name of the user/account to check the permissions for</param>
        /// <param name="databaseObject">The name of the object to check permissions against</param>
        /// <param name="permission">Database permission to check for</param>
        /// <param name="state">What state the permission should have</param>
        /// <returns>True if a match is found, else false</returns>
        public static bool UserHasPermissions(string userName, string databaseObject, DatabasePermission permission, DatabasePermissionState state, string connectionString)
        {
            // Get all of the permissions for the specified user for the specified object
            return (GetPermissionCountForUserForObject(userName, databaseObject, permission.ToString(), state.ToString(), connectionString) == 1 ? true : false);
        }

        // Returns the count for a given permission & state based on a user/role for a given database object
        private static int GetPermissionCountForUserForObject(string userName, string objectName, string permission, string state, string connectionString)
        {
            SqlCommand cmd = new SqlCommand()
            {
                Connection = new SqlConnection(TestSettings.DiagnosticDatabaseConnectionString),
                CommandText = String.Format(SprocPermissionsQuery, userName, objectName, permission, state),
                CommandType = CommandType.Text
            };

            cmd.Connection.Open();
            int returnValue = (int)cmd.ExecuteScalar();
            cmd.Connection.Close();
            return returnValue;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\EventLog\IEventLogAccess.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace Infrastructure.Test.Common.EventLog
{
    public interface IEventLogAccess
    {
        EventLogEntry GetLatestEntryById(int eventId, string machineName);
        List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName);
        List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName);
        List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\EventLog\EventLogAccess.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace Infrastructure.Test.Common.EventLog
{
    public class EventLogAccess : IEventLogAccess
    {
        public EventLogEntry GetLatestEntryById(int eventId, string machineName)
        {
            System.Diagnostics.EventLog log = this.getApplicationEventLog(machineName);
            EventLogEntry[] entries = new EventLogEntry[log.Entries.Count + 50];
            log.Entries.CopyTo(entries, 0);
            log.Close();
            int count = entries.Length;
            for (int i = (count - 1); i >= 0; i--)
            {
                if (entries[i] != null && entries[i].InstanceId == eventId)
                {
                    return entries[i];
                }
            }
            throw new Exception(String.Format("Event with Id {0} was not found", eventId));
        }

        public List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName)
        {
            System.Diagnostics.EventLog log = this.getApplicationEventLog(machineName);
            EventLogEntry[] entries = new EventLogEntry[log.Entries.Count + 50];
            log.Entries.CopyTo(entries, 0);
            log.Close();
            int count = entries.Length;
            List<EventLogEntry> foundEntries = new List<EventLogEntry>();
            for (int i = (count - 1); i >= (count - numberToRetrieve); i--)
            {
                if (i < 0)
                {
                    break;
                }

                if (entries[i] != null)
                {
                    foundEntries.Add(entries[i]);
                }
            }
            return foundEntries;
        }

        public List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName)
        {
            System.Diagnostics.EventLog log = this.getApplicationEventLog(machineName);
            EventLogEntry[] entries = new EventLogEntry[log.Entries.Count + 50];
            log.Entries.CopyTo(entries, 0);
            log.Close();
            int count = entries.Length;
            List<EventLogEntry> foundEntries = new List<EventLogEntry>();
            for (int i = (count-1); i >= 0; i--)
            {
                if (entries[i] != null)
                {
                    //If the entry was written between the start and end time add it to be returned
                    if ((entries[i].TimeWritten >= startTime) && (entries[i].TimeWritten <= endTime))
                    {
                        foundEntries.Add(entries[i]);
                    }
                    //If the entry was written before the start time break out and return the list because
                    //the events are listed in time order
                    else if (entries[i].TimeWritten < startTime)
                    {
                        break;
                    }
                }
            }
            return foundEntries;
        }

        public List<EventLogEntry> GetEntriesBySourceContainsWithinTimeSpan(string sourceContains, int numberOfSeconds, string machineName)
        {
            DateTime startTime = DateTime.Now.AddSeconds((-1) * numberOfSeconds);
            System.Diagnostics.EventLog log = this.getApplicationEventLog(machineName);
            EventLogEntry[] entries = new EventLogEntry[log.Entries.Count + 50];
            log.Entries.CopyTo(entries, 0);
            log.Close();
            int count = entries.Length;
            List<EventLogEntry> foundEntries = new List<EventLogEntry>();
            for (int i = (count - 1); i >= 0; i--)
            {
                if (entries[i] != null)
                {
                    //If the entry was written since the start time and has the correct event id add it to be returned
                    if ((entries[i].TimeWritten >= startTime) && entries[i].Source.Contains(sourceContains))
                    {
                        foundEntries.Add(entries[i]);
                    }
                    //If the entry was written before the start time break out and return the list because
                    //the events are listed in time order
                    else if (entries[i].TimeWritten < startTime)
                    {
                        break;
                    }
                }
            }
            return foundEntries;
        }

        public List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName)
        {
            DateTime startTime = DateTime.Now.AddSeconds((-1) * numberOfSeconds);
            System.Diagnostics.EventLog log = this.getApplicationEventLog(machineName);
            EventLogEntry[] entries = new EventLogEntry[log.Entries.Count + 50];
            log.Entries.CopyTo(entries, 0);
            log.Close();
            int count = entries.Length;
            List<EventLogEntry> foundEntries = new List<EventLogEntry>();
            for (int i = (count - 1); i >= 0; i--)
            {
                if (entries[i] != null)
                {
                    //If the entry was written since the start time and has the correct event id add it to be returned
                    if ((entries[i].TimeWritten >= startTime) && (entries[i].InstanceId == eventId))
                    {
                        foundEntries.Add(entries[i]);
                    }
                    //If the entry was written before the start time break out and return the list because
                    //the events are listed in time order
                    else if (entries[i].TimeWritten < startTime)
                    {
                        break;
                    }
                }
            }
            return foundEntries;
        }

        private System.Diagnostics.EventLog getApplicationEventLog(string machineName)
        {
            if (!String.IsNullOrEmpty(machineName))
            {
                return new System.Diagnostics.EventLog("Application", machineName);
            }
            else
            {
                return new System.Diagnostics.EventLog("Application");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Logging\ITestLogging.cs ===
﻿using Leet.Core.Diagnostics;
using System.Diagnostics;

namespace Infrastructure.Test.Common.Logging
{
    public interface ITestLogging : ILogging
    {
        string GetVersion();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Logging\SqlEvent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Data;

namespace Infrastructure.Test.Common.Logging
{
    public class SqlEvent
    {
        public SqlEvent()
        { }

        public SqlEvent(DataRow row)
        {
            this.EventId = (int)row["EventId"];
            this.Level = (TraceEventType)Enum.Parse(typeof(TraceEventType), (string)row["Level"]);
            this.Source = (string)row["Source"];
            this.Message = (string)row["Message"];
            this.EventDate = (DateTime)row["EventDate"];
        }

        public int EventId
        {
            get;
            set;
        }

        public TraceEventType Level
        {
            get;
            set;
        }

        public string Source
        {
            get;
            set;
        }

        public string Message
        {
            get;
            set;
        }

        public DateTime EventDate
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Logging\TestEvent.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.Diagnostics;
using System.Diagnostics;

namespace Infrastructure.Test.Common.Logging
{
    public class TestEvent : BaseEvent
    {
        public TestEvent()
            : this (TraceEventType.Information)
        { }

        public TestEvent(TraceEventType eventType)
            : base(999, eventType)
        {
            this.TestGuid = Guid.NewGuid();
        }

        public Guid TestGuid
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Logging\TestLogger.cs ===
﻿using System;
using Leet.Core.Diagnostics;
using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Core.IO;
using System.Reflection;
using System.Diagnostics;

namespace Infrastructure.Test.Common.Logging
{
    public class TestLogger : ITestLogging
    {
        private ILogging _logger;

        public TestLogger()
        {
            Container.Instance.AddService<ILogging, Leet.Core.Diagnostics.Logging>();
            Container.Instance.AddService<ILogFormatter, LogFormatter>();
            Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
            ConfigurationSelector.RegisterProvider("core_test_service", "LEET");
            _logger = Container.Instance.GetComponent<ILogging>();
        }

        #region ITestLogging Members
        public string GetVersion()
        {
            FileVersionInfo assemblyFileVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location);

            string formattedVersion = String.Format("{0}.{1}.{2}.{3}",
                assemblyFileVersion.FileMajorPart.ToString("00"),
                assemblyFileVersion.FileMinorPart.ToString("00"),
                assemblyFileVersion.FileBuildPart.ToString("0000"),
                assemblyFileVersion.FilePrivatePart.ToString("00"));
            return formattedVersion;
        }
        
        public void RegisterMetadata(string name, Func<String> value)
        {
            _logger.RegisterMetadata(name, value); 
        }

        public void LogEvent(BaseEvent evt)
        {
            _logger.LogEvent(evt);
        }

        public void LogEvent(BaseEvent evt, string formattedMessage, params object[] args)
        {
            _logger.LogEvent(evt, formattedMessage, args);
        }

        public void LogEvent(BaseEvent evt, Exception ex)
        {
            _logger.LogEvent(evt, ex);
        }

        public void LogEvent(BaseEvent evt, Exception ex, string formattedMessage, params object[] args)
        {
            _logger.LogEvent(evt, ex, formattedMessage, args);
        }

        public void LogTrace(TraceLevel level, string formattedMessage, params object[] args)
        {
            _logger.LogTrace(level, formattedMessage, args);
        }

        public void LogTrace(TraceLevel level, Exception ex)
        {
            _logger.LogTrace(level, ex);
        }

        public void LogTrace(TraceLevel level, Exception ex, string formattedMessage, params object[] args)
        {
            _logger.LogTrace(level, ex, formattedMessage, args);
        }

        public void LogTransaction(string transactionId, string transactionType, string action)
        {
            _logger.LogTransaction(transactionId, transactionType, action);
        }

        public void LogTransaction(string transactionId, string transactionType, string action, string formattedMessage, params object[] args)
        {
            _logger.LogTransaction(transactionId, transactionType, action, formattedMessage, args);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Factory\TestFactory.cs ===
﻿using Infrastructure.Test.Common.Logging;
using Infrastructure.Test.Common.EventLog;
using Infrastructure.Test.Common.Settings;
using Leet.Core.TestService.Client.EventLog;
using Leet.Core.TestService.Client.Logging;

namespace Infrastructure.Test.Factory
{
    public static class TestFactory
    {
        private static ITestLogging _testLogging;
        public static ITestLogging TestLogging
        {
            get
            {
                if (_testLogging == null)
                {
                    if (TestSettings.UseServiceImplementation)
                    {
                        _testLogging = new ServiceLogging(TestSettings.TestServiceBaseUrl);
                    }
                    else
                    {
                        _testLogging = new TestLogger();
                    }
                }
                return _testLogging;
            }
        }

        private static IEventLogAccess _eventLog;
        public static IEventLogAccess EventLogAccess
        {
            get
            {
                if (_eventLog == null)
                {
                    if (TestSettings.UseServiceImplementation)
                    {
                        _eventLog = new EventLogServiceAccess(TestSettings.TestServiceBaseUrl);
                    }
                    else
                    {
                        _eventLog = new EventLogAccess();
                    }
                }
                return _eventLog;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Settings\TestSettings.cs ===
﻿using System.Configuration;
using System;

namespace Infrastructure.Test.Common.Settings
{
    public static class TestSettings
    {
        private const string BaseDatabaseConnectionString = "Data Source={0};Initial Catalog={1};Integrated Security=SSPI;";
        private const string LivenNpdbDatabaseName = "LIVEN_NPDB";

        public static string TestServiceBaseUrl
        {
            get
            {
                return ConfigurationManager.AppSettings["TestServiceBaseUrl"];
            }
        }

        public static bool UseServiceImplementation
        {
            get
            {
                return bool.Parse(ConfigurationManager.AppSettings["UseServiceImplementation"]);
            }
        }

        public static string DiagnosticDatabaseConnectionString
        {
            get
            {
                return String.Format(BaseDatabaseConnectionString,
                    DiagnosticDatabaseServer,
                    DiagnosticDatabaseName);
            }
        }

        public static string DiagnosticDatabaseServer
        {
            get
            {
                return ConfigurationManager.AppSettings["DiagnosticDatabaseServer"];
            }
        }

        public static string DiagnosticDatabaseName
        {
            get
            {
                return ConfigurationManager.AppSettings["DiagnosticDatabaseName"];
            }
        }

        public static string DiagnosticDatabaseUser
        {
            get
            {
                return ConfigurationManager.AppSettings["DiagnosticDatabaseUser"];
            }
        }

        public static string LivenNpdbConnectionString
        {
            get
            {
                return String.Format(BaseDatabaseConnectionString,
                LivenNpdbServer,
                LivenNpdbDatabaseName);
            }
        }

        public static string LivenNpdbServer
        {
            get
            {
                return ConfigurationManager.AppSettings["LivenNpdbServer"];
            }
        }

        public static string Environment
        {
            get
            {
                return ConfigurationManager.AppSettings["config.environment"];
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Factory\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Infrastructure.Test.Factory")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("71f4d473-2512-4971-b171-ae9ab3b28793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Common\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Infrastructure.Test.Common")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("17ceebcc-58a2-41c3-9728-c28307202a53")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Logging\LogEvent.cs ===
﻿using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Leet.Core.Diagnostics;
using Infrastructure.Test.Common.Logging;
using Infrastructure.Test.Common.EventLog;
using System.Diagnostics;
using Infrastructure.Test.Factory;
using Infrastructure.Test.Common.Database;
using Leet.Core.TestService.Client.DiagnosticDatabase;
using Infrastructure.Test.Common.Settings;
using System.Data;

namespace Infrastructure.Test.Logging
{
    [TestClass]
    public class LogEvent
    {
        private ITestLogging logging;
        private IEventLogAccess eventLog;
        private int _numSecondsForEventLog = 60;
        private int _numMinutesForDB = 1;

        public LogEvent()
        {
            logging = TestFactory.TestLogging;
            eventLog = TestFactory.EventLogAccess;
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEvent()
        {
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            logging.LogEvent(newEvent);
            EventLogEntry matchedEntry = GetMatchingEntry(newEvent.Id, testId);
            Assert.IsNotNull(matchedEntry, "Could not find an event with Id of {0} with guid of {1}", newEvent.Id, testId);
            Assert.IsTrue(matchedEntry.Message.Contains(testId.ToString()), "Unique identifier: {0} was not found", testId);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event with an exception")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithException()
        {
            Exception ex = new Exception("Exception message");
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            logging.LogEvent(newEvent, ex);
            EventLogEntry matchedEntry = GetMatchingEntry(newEvent.Id, testId);
            Assert.IsNotNull(matchedEntry, "Could not find an event with Id of {0} with guid of {1}", newEvent.Id, testId);
            Assert.IsTrue(matchedEntry.Message.Contains(testId.ToString()), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(matchedEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event with a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithFormattedMessage()
        {
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            int number = 10;
            string formattedMessage = "This is a formatted message with an argument of {0}";
            logging.LogEvent(newEvent, formattedMessage, number);
            EventLogEntry matchedEntry = GetMatchingEntry(newEvent.Id, testId);
            Assert.IsNotNull(matchedEntry, "Could not find an event with Id of {0} with guid of {1}", newEvent.Id, testId);
            formattedMessage = String.Format(formattedMessage, number);
            Assert.IsTrue(matchedEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(matchedEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event with an exception and a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithFormattedMessageAndException()
        {
            Exception ex = new Exception("Exception message");
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            string formattedMessage = "This is a formatted message with an argument of {0}";
            int number = 10;
            logging.LogEvent(newEvent, ex, formattedMessage, number);
            EventLogEntry matchedEntry = GetMatchingEntry(newEvent.Id, testId);
            Assert.IsNotNull(matchedEntry, "Could not find an event with Id of {0} with guid of {1}", newEvent.Id, testId);
            formattedMessage = String.Format(formattedMessage, number);
            Assert.IsTrue(matchedEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(matchedEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
            Assert.IsTrue(matchedEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());            
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event to sql diagnostic database")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventToDB()
        {
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            logging.LogEvent(newEvent);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(newEvent.Id, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", newEvent.Id, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(testId.ToString()), "Unique identifier: {0} was not found", testId);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event to sql diagnostic database with an exception")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithExceptionToDB()
        {
            Exception ex = new Exception("Exception message");
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            logging.LogEvent(newEvent, ex);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(newEvent.Id, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", newEvent.Id, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(testId.ToString()), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event to sql diagnostic database with a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithFormattedMessageToDB()
        {
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            int number = 10;
            string formattedMessage = "This is a formatted message with an argument of {0}";
            logging.LogEvent(newEvent, formattedMessage, number);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(newEvent.Id, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", newEvent.Id, testId);
            formattedMessage = String.Format(formattedMessage, number);
            Assert.IsTrue(sqlEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log event properly logs an event to sql diagnostic database with an exception and a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogBaseEventWithFormattedMessageAndExceptionToDB()
        {
            Exception ex = new Exception("Exception message");
            TestEvent newEvent = new TestEvent();
            string testId = newEvent.TestGuid.ToString();
            string formattedMessage = "This is a formatted message with an argument of {0}";
            int number = 10;
            logging.LogEvent(newEvent, ex, formattedMessage, number);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(newEvent.Id, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", newEvent.Id, testId);
            formattedMessage = String.Format(formattedMessage, number);
            Assert.IsTrue(sqlEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
            Assert.IsTrue(sqlEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log trace properly logs a trace event to sql diagnostic database with an exception")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogTraceWithExceptionToDB()
        {
            int traceEventId = new TraceEvent().Id;
            string testId = Guid.NewGuid().ToString();
            Exception ex = new Exception(testId);
            TraceLevel level = TraceLevel.Verbose;
            logging.LogTrace(level, ex);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(traceEventId, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());  
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log trace properly logs a trace event to sql diagnostic database with a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogTraceWithFormattedMessageToDB()
        {
            int traceEventId = new TraceEvent().Id;
            TraceLevel level = TraceLevel.Verbose;
            string formattedMessage = "This is a formatted message with an argument of {0}";
            string testId = Guid.NewGuid().ToString();
            logging.LogTrace(level, formattedMessage, testId);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(traceEventId, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
            formattedMessage = String.Format(formattedMessage, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log trace properly logs a trace event to sql diagnostic database with a formatted message and an exception")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogTraceWithExceptionAndFormattedMessageToDB()
        {
            int traceEventId = new TraceEvent().Id;
            Exception ex = new Exception("Exception message");
            TraceLevel level = TraceLevel.Verbose;
            string formattedMessage = "This is a formatted message with an argument of {0}";
            string testId = Guid.NewGuid().ToString();
            logging.LogTrace(level, ex, formattedMessage, testId);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(traceEventId, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
            formattedMessage = String.Format(formattedMessage, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(testId), "Unique identifier: {0} was not found", testId);
            Assert.IsTrue(sqlEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
            Assert.IsTrue(sqlEntry.Message.Contains(ex.ToString()), "Exception message: {0} was not found", ex.ToString());             
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log transaction properly logs a transaction event to sql diagnostic database")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogTransactionToDB()
        {
            int transactionEventId = new TransactionEvent().Id;
            string transactionId = Guid.NewGuid().ToString();
            string transactionType = "type";
            string action = "action";
            logging.LogTransaction(transactionId, transactionType, action);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(transactionEventId, _numMinutesForDB, transactionId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", transactionEventId, transactionId);
            Assert.IsTrue(sqlEntry.Message.Contains(transactionId), "Transaction Id: {0} not found", transactionId);
            Assert.IsTrue(sqlEntry.Message.Contains(transactionType), "Transaction type: {0} not found", transactionType);
            Assert.IsTrue(sqlEntry.Message.Contains(action), "Action: {0} not found", action);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that log transaction properly logs a transaction event to sql diagnostic database with a formatted message")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        public void LogTransactionWithFormattedMessageToDB()
        {
            int transactionEventId = new TransactionEvent().Id;
            string formattedMessage = "This is a formatted message with an argument of {0}";
            string testId = Guid.NewGuid().ToString();
            string transactionId = "transactionId";
            string transactionType = "type";
            string action = "action";
            logging.LogTransaction(transactionId, transactionType, action, formattedMessage, testId);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            SqlEvent sqlEntry = diagnosticService.GetDiagnosticEntryByIdAndMessageText(transactionEventId, _numMinutesForDB, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", transactionEventId, testId);
            formattedMessage = String.Format(formattedMessage, testId);
            Assert.IsTrue(sqlEntry.Message.Contains(transactionId), "Transaction Id: {0} not found", transactionId);
            Assert.IsTrue(sqlEntry.Message.Contains(transactionType), "Transaction type: {0} not found", transactionType);
            Assert.IsTrue(sqlEntry.Message.Contains(action), "Action: {0} not found", action);
            Assert.IsTrue(sqlEntry.Message.Contains(formattedMessage), "Formatted message: {0} was not found", formattedMessage);
        }

        private EventLogEntry GetMatchingEntry(int eventId, string testId)
        {
            List<EventLogEntry> allEntries = eventLog.GetEntriesByIdWithinTimeSpan(eventId, _numSecondsForEventLog, null);
            EventLogEntry matchedEntry = null;
            foreach (EventLogEntry entry in allEntries)
            {
                if (entry.Message.Contains(testId))
                {
                    matchedEntry = entry;
                    break;
                }
            }
            return matchedEntry;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Logging\DiagnosticDatabase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Infrastructure.Test.Common.Database;
using Infrastructure.Test.Common.Settings;
using DataDrivenTest;

namespace Infrastructure.Test.Logging
{
    public class DatabaseObject : TestData
    {
        public string Name { get; set; }
        public DatabaseObjectType Type { get; set; }
    }

    public enum DatabaseObjectType
    {
        Function,
        StoredProc,
        Table
    }

    [TestClass]
    public class DiagnosticDatabase
    {
        #region Constants
        private int TEST_EVENTID = -1;
        #endregion

        public DiagnosticDatabase()
        {
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Test Methods
        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that the Database has the correct tables and stored procs, and that the stored procs have the proper permissions")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "anhampto")]
        [Timeout(60000)]
        public void DatabaseVerificationTest()
        {
            TestDataList<string, DatabaseObject> databaseObjects;
            databaseObjects = TestDataList<string, DatabaseObject>.DeserializeFromResource("Infrastructure.Test.Logging.Resources.DatabaseObjects.xml");

            foreach (DatabaseObject data in databaseObjects.Values)
            {
                try
                {
                    switch (data.Type)
                    {
                        case DatabaseObjectType.Table:
                            {
                                //Check that the table exists
                                if (DatabaseVerification.TableExists(data.Name, TestSettings.DiagnosticDatabaseConnectionString))
                                {
                                    data.Result = TestResult.Passed;
                                }
                                else
                                {
                                    data.Result = TestResult.Failed;
                                    data.ResultMessage = String.Format("Could not find table {0}", data.Name);
                                }
                                break;
                            }
                        case DatabaseObjectType.StoredProc:
                            {
                                //Check that the stored proc exists
                                if (!DatabaseVerification.StoredProcedureExists(data.Name, TestSettings.DiagnosticDatabaseConnectionString))
                                {
                                    data.Result = TestResult.Failed;
                                    data.ResultMessage = String.Format("Could not find stored proc {0}", data.Name);
                                }
                                //Check the permissions of the stored proc
                                else if (!DatabaseVerification.UserHasPermissions(
                                    TestSettings.DiagnosticDatabaseUser,
                                    data.Name,
                                    DatabaseVerification.DatabasePermission.Execute,
                                    DatabaseVerification.DatabasePermissionState.Grant,
                                    TestSettings.DiagnosticDatabaseConnectionString))
                                {
                                    data.Result = TestResult.Failed;
                                    data.ResultMessage = String.Format("User does not have permissions for stored proc {0}", data.Name);
                                }
                                else
                                {
                                    data.Result = TestResult.Passed;
                                }
                                break;
                            }
                        case DatabaseObjectType.Function:
                            {
                                if (DatabaseVerification.FunctionExists(data.Name, TestSettings.DiagnosticDatabaseConnectionString))
                                {
                                    data.Result = TestResult.Passed;
                                }
                                else
                                {
                                    data.Result = TestResult.Failed;
                                    data.ResultMessage = String.Format("Could not function {0}", data.Name);
                                }
                                break;
                            }
                    }
                }
                catch (Exception e)
                {
                    if (e.GetType() == data.ExpectedExceptionType)
                    {
                        data.Result = TestResult.Passed;
                    }
                    else
                    {
                        data.Result = TestResult.Failed;
                        data.ResultMessage = e.Message;
                    }
                }
            }
            //Report Results
            databaseObjects.ReportResults();
            //Fail test if there have been any failures
            Assert.AreEqual(TestResult.Passed, databaseObjects.MasterResult, "1 or more test variants failed. The tests MasterResult is not set to 'Passed'");
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Inserts multiple events into the database and then calls the pruning sproc to remove them all")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "sameling")]
        [Timeout(10000)]
        public void DatabasePruneEventsSproc_DeleteMultipleEvents()
        {
            // First make sure that we have a clean database
            deleteEventsByEventId(TEST_EVENTID);

            // The date that we'll make these events be from. Having them a year in the past should prevent most issues with clocks
            // being slightly off between the client and the SQL Server
            DateTime eventDate = DateTime.Now.AddYears(-1);

            // The number of events we'll insert into the table
            int numOfEvents = insertMultipleEvents(new Random().Next(3, 100), eventDate);

            // How far back will we prune
            int pruningMinutes = 1;

            // Get the number of non-test events in the system so we have an accurate count
            numOfEvents += getNonTestEventsCount(pruningMinutes);

            // Now call the pruning
            int numEventsPruned = callPruneEventsSproc(pruningMinutes);

            // Clean-up the database
            deleteEventsByEventId(TEST_EVENTID);

            Assert.AreEqual(
                numOfEvents,
                numEventsPruned,
                String.Format("Expected {0} events pruned but only {1} events were pruned", numOfEvents.ToString(), numEventsPruned.ToString()));
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Inserts multiple events with different dates into the database and then calls the pruning sproc to remove some of them")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "sameling")]
        [Timeout(10000)]
        public void DatabasePruneEventsSproc_DeleteSomeEvents()
        {
            const string KEPTEVENTSSQL = "SELECT COUNT(*) As [EventCount] FROM [Event] WHERE EventId = {0} And EventDate = '{1}'";

            // Make sure that we have a clean database
            deleteEventsByEventId(TEST_EVENTID);

            // Set the first event date
            DateTime eventDate = DateTime.Now.AddYears(-1);

            // Insert 5
            int numPrunedEvents = insertMultipleEvents(5, eventDate);

            // Set the second event date
            eventDate = DateTime.Now.AddDays(-180);

            // Insert 5 more
            numPrunedEvents += insertMultipleEvents(5, eventDate);

            // Set the event date for the events we plan to keep
            eventDate = DateTime.Now.AddDays(-1);

            // Insert 5 of them
            int numKeptEvents = insertMultipleEvents(5, eventDate);

            // Determine how far we'll prune -  2 days ago (60 minutes * 24 hours * 2 day)
            int pruningMinutes = 60 * 24 * 2;

            // Add any existing, non-test events that will be pruned to our count
            numPrunedEvents += getNonTestEventsCount(pruningMinutes);

            // Call the pruning
            int numPrunedActual = callPruneEventsSproc(pruningMinutes);

            // Get the number of events which still remain
            int numKeptActual = DatabaseExecution.ExecuteSqlScalar<int>(
                String.Format(
                    KEPTEVENTSSQL,
                    TEST_EVENTID.ToString(),
                    eventDate.ToUniversalTime().ToString()
                    )
                );

            // Clean up
            deleteEventsByEventId(TEST_EVENTID);

            // Verifications
            Assert.AreEqual(
                numPrunedEvents,
                numPrunedActual,
                String.Format("Expected {0} events pruned but {1} events were actually pruned", numPrunedEvents.ToString(), numPrunedActual.ToString()));

            Assert.AreEqual(
                numKeptEvents,
                numKeptActual,
                String.Format("Expected {0} events left but {1} events actually remained", numKeptEvents.ToString(), numKeptActual.ToString()));

        }

        [TestMethod, Owner("lesbainf")]
        [Description("Calls the PruneEvents sproc with invalid timespan values")]
        [TestProperty("Type", "BVT")]
        [TestProperty("Author", "sameling")]
        [Timeout(10000)]
        public void DatabasePruneEventsSproc_InvalidTimeSpans()
        {
            const string EXPECTED_MIN_ERROR = "You must specify a positive @TimeSpan, which represents how many minutes in the past to keep.";
            const string EXPECTED_MAX_ERROR = "@TimeSpan cannot exceed 2628000, which is roughly 5 years in the past to keep.";

            Dictionary<int, string> pruningMinutes = new Dictionary<int, string>()
            {
                { -1, EXPECTED_MIN_ERROR },
                { 0, EXPECTED_MIN_ERROR },
                { int.MinValue, EXPECTED_MIN_ERROR },
                { int.MaxValue, EXPECTED_MAX_ERROR },
                { 2628001, EXPECTED_MAX_ERROR }
            };

            foreach (KeyValuePair<int, string> pruningTime in pruningMinutes )
            {
                Console.WriteLine("Calling PruneEvents sproc using {0} as the @TimeSpan", pruningTime.Key.ToString());
                try
                {
                    // Call the pruning sproc
                    callPruneEventsSproc(pruningTime.Key);

                    // If we made it this far, then the pruning sproc was successful
                    Assert.Fail("Expected a System.Data.SqlClient.SqlExecption but the pruning sproc was successful instead");
                }
                catch (SqlException ex)
                {
                    // Verify that we got the expected error message
                    Assert.AreEqual(pruningTime.Value, ex.Message);
                }
                catch (Exception ex)
                {
                    // An exception was thrown, but not the one we expected
                    Assert.Fail("Expected a System.Data.SqlClient.SqlExecption but instead caught: {0}", ex.ToString());
                }
            }
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Calls the PruneEvents sproc with valid timespan values")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "sameling")]
        [Timeout(10000)]
        public void DatabasePruneEventsSproc_ValidTimeSpans()
        {
            List<int> pruningMinutes = new List<int>()
            {
                1,                  // min value and odd number
                2,                  // even number
                60,                 // 1 hour
                1440,               // 1 day
                10080,              // 1 week
                44640,              // 1 month/31 days
                525600,             // 1 year
                527040,             // 1 leap year
                2628000             // max value
            };

            foreach (int pruningTime in pruningMinutes)
            {
                Console.WriteLine("Calling PruneEvents sproc using {0} as the @TimeSpan", pruningTime.ToString());
                try
                {
                    // Call the pruning sproc
                    callPruneEventsSproc(pruningTime);
                }
                catch (Exception ex)
                {
                    // An exception was thrown, but not the one we expected
                    Assert.Fail("Unexpected exception caught: {0}", ex.ToString());
                }
            }
        }
        #endregion

        #region Private Methods
        private int callPruneEventsSproc(int timeSpan)
        {
            const string SPROCNAME = "PruneEvents";
            const string PARAMNAME = "TimeSpan";

            SqlParameter timeSpanParam = new SqlParameter()
            {
                ParameterName = PARAMNAME,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = timeSpan
            };

            return DatabaseExecution.ExecuteStoredProcedureNonQuery(SPROCNAME, timeSpanParam);
        }

        private void deleteEventsByEventId(int eventId)
        {
            const string DELETESQL = "DELETE FROM [Event] WHERE [EventId] = {0}";

            string sql = String.Format(DELETESQL, eventId.ToString());

            DatabaseExecution.ExecuteSqlNonQuery(sql);
        }

        private int getNonTestEventsCount(int timeSpan)
        {
            // Make sure timespan is negative
            if (timeSpan > 0)
                timeSpan *= -1;

            // Get the count of events in the database which are not test events
            const string NONTESTEVENTSSQL = "SELECT COUNT(*) As [EventCount] FROM [Event] WHERE EventId != {0} And [EventDate] <= DATEADD(mi, {1}, GetUtcDate())";

            return DatabaseExecution.ExecuteSqlScalar<int>(String.Format(NONTESTEVENTSSQL, TEST_EVENTID.ToString(), timeSpan.ToString()));
        }

        private int insertMultipleEvents(int numEvents, DateTime eventDate)
        {
            // Insert the events
            int numInserted = 0;

            for (int i = 1; i <= numEvents; i++)
            {
                if (insertEvent(TEST_EVENTID, "Testing", i.ToString(), String.Format("Test Event #{0} for {1}", i.ToString(), eventDate.ToString()), eventDate))
                    numInserted++;
            }

            return numInserted;
        }

        private bool insertEvent(int eventId, string level, string source, string message, DateTime eventDate)
        {
            const string INSERTSQL = "INSERT INTO [Event] ([EventId], [Level], [Source], [Message], [EventDate]) VALUES({0}, '{1}', '{2}', '{3}', '{4}')";

            string sql = String.Format(INSERTSQL, eventId.ToString(), level, source, message, eventDate.ToUniversalTime().ToString());

            int numInserted = DatabaseExecution.ExecuteSqlNonQuery(sql);

            return (numInserted == 1);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Logging\ConfigureLogging.cs ===
﻿using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Core.IO;
using Infrastructure.Test.Common.Database;
using System.Data.SqlClient;
using System.Diagnostics;
using Infrastructure.Test.Common.Logging;
using Leet.Core.Diagnostics;
using Infrastructure.Test.Common.Settings;
using Infrastructure.Test.Factory;
using Leet.Core.TestService.Client.DiagnosticDatabase;
using Leet.Core.TestService;

namespace Infrastructure.Test.Logging
{
    [TestClass]
    public class ConfigureLogging
    {
        private IConfigurationProvider configurationProvider;
        private ILogging loggingSource;
        private bool ConfigurationUpdated;
        private ITestLogging logging;
        private int timeoutTimeSeconds;
        private int traceEventId;

        public ConfigureLogging()
        {
            Container.Instance.AddService<ILogging, Leet.Core.Diagnostics.Logging>();
            Container.Instance.AddService<ILogFormatter, LogFormatter>();
            Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
            ConfigurationSelector.RegisterProvider("core_test_service", "LEET");
            configurationProvider = Container.Instance.GetComponent<IConfigurationProvider>();
            loggingSource = Container.Instance.GetComponent<ILogging>();
            configurationProvider.MultiSettingChanged += new MultiSettingChangedEventHandler(ConfigurationMultiSettingChanged);
            logging = TestFactory.TestLogging;
            timeoutTimeSeconds = 600;
            traceEventId = new TraceEvent().Id;
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        [TestCleanup]
        public void Cleanup()
        {
            if (ConfigurationUpdated)
            {
                RemoveDiagnosticMultisettingOverrides();
                WaitForConfigurationUpdate();
            }
        }

        private void ConfigurationMultiSettingChanged(object sender, MultiSettingChangedEventArgs args)
        {
            ConfigurationUpdated = true;
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that updating NPDB updates the logging configuration during runtime")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "anhampto")]
        public void LoggingConfigurationWorks()
        {
            string listenerName = "TestConfigurationListener";
            string multisettingValue = String.Format("<Listener name=\"{0}\" type=\"Leet.Core.Diagnostics.SqlListener, Leet.Core\" />", listenerName);
            UpdateListenerConfiguration(listenerName, multisettingValue);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that Leet Trace Filter works correctly when set to Verbose")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "anhampto")]
        public void LeetTraceFilterWorksForVerbose()
        {
            Guid testId;
            SqlEvent sqlEntry = null;

            //Set Configuration
            string listenerName = "TestTraceFilterListener";
            TraceLevel traceLevel = TraceLevel.Verbose;
            string multisettingValue = getMultisettingValue(listenerName, traceLevel);
            UpdateListenerConfiguration(listenerName, multisettingValue);

            //Test Verbose Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Verbose, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);

            //Test Informational Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Info, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);

            //Test Exceptional Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Error, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that Leet Trace Filter works correctly when set to Informational")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "anhampto")]
        public void LeetTraceFilterWorksForInformational()
        {
            Guid testId;
            SqlEvent sqlEntry = null;

            //Set Configuration
            string listenerName = "TestTraceFilterListener";
            TraceLevel traceLevel = TraceLevel.Info;
            string multisettingValue = getMultisettingValue(listenerName, traceLevel);
            UpdateListenerConfiguration(listenerName, multisettingValue);

            //Test Verbose Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Verbose, testId);
            Assert.IsNull(sqlEntry, "Incorrectly found event with Id of {0} with guid of {1} in the Sql database. Should have been filtered out", traceEventId, testId);

            //Test Informational Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Info, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);

            //Test Exceptional Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Error, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Verifies that Leet Trace Filter works correctly when set to Exceptional")]
        [TestProperty("Type", "Functional")]
        [TestProperty("Author", "anhampto")]
        public void LeetTraceFilterWorksForExceptional()
        {
            Guid testId;
            SqlEvent sqlEntry = null;

            //Set Configuration
            string listenerName = "TestTraceFilterListener";
            TraceLevel traceLevel = TraceLevel.Error;
            string multisettingValue = getMultisettingValue(listenerName, traceLevel);
            UpdateListenerConfiguration(listenerName, multisettingValue);

            //Test Verbose Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Verbose, testId);
            Assert.IsNull(sqlEntry, "Incorrectly found event with Id of {0} with guid of {1} in the Sql database. Should have been filtered out", traceEventId, testId);

            //Test Informational Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Info, testId);
            Assert.IsNull(sqlEntry, "Incorrectly found event with Id of {0} with guid of {1} in the Sql database. Should have been filtered out", traceEventId, testId);

            //Test Exceptional Trace
            testId = Guid.NewGuid();
            sqlEntry = LogAndRetrieveTrace(TraceLevel.Error, testId);
            Assert.IsNotNull(sqlEntry, "Could not find event with Id of {0} with guid of {1} in the Sql database", traceEventId, testId);
        }

        private void UpdateListenerConfiguration(string listenerName, string multisettingValue)
        {
            
            TraceSource ts = (TraceSource)loggingSource.GetType().GetField("traceSource", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(loggingSource);
            TraceListenerCollection listeners = ts.Listeners;
            Assert.IsNull(listeners[listenerName]);
            OverrideDiagnosticMultisetting(multisettingValue);
            WaitForConfigurationUpdate();
            System.Threading.Thread.Sleep(1000);
            Assert.IsNotNull(listeners[listenerName]);
        }

        private void WaitForConfigurationUpdate()
        {
            ConfigurationUpdated = false;
            DateTime timeoutTime = DateTime.Now.AddSeconds(timeoutTimeSeconds);
            while (!ConfigurationUpdated)
            {
                if (DateTime.Now > timeoutTime)
                {
                    throw new Exception("Configuration not updated");
                }
            }
        }

        private bool OverrideDiagnosticMultisetting(string settingValue)
        {
            int affectedRows;
            using (SqlConnection connection = new SqlConnection(TestSettings.LivenNpdbConnectionString))
            {
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = System.Data.CommandType.StoredProcedure;
                    command.CommandText = "p_config_add_multisetting_override";
                    //command.Parameters.AddWithValue("@Multisetting", MultiSettings.Diagnostics); TODO: Fix this test
                    command.Parameters.AddWithValue("@Component", "core_test_service");
                    command.Parameters.AddWithValue("@Environment", TestSettings.Environment);
                    command.Parameters.AddWithValue("@Value", settingValue);

                    connection.Open();
                    affectedRows = command.ExecuteNonQuery();
                }
            }
            return (affectedRows > 0);
        }

        private bool RemoveDiagnosticMultisettingOverrides()
        {
            string connectionString = TestSettings.LivenNpdbConnectionString;
            int affectedRows = 0; //TODO:MultiSettings.Diagnostics no longer exists so modify this. DatabaseExecution.ExecuteSqlNonQuery(connectionString, String.Format("delete from t_multisetting_overrides where vc_multisetting = '{0}' and vc_component = 'core_test_service'", MultiSettings.Diagnostics));
            return (affectedRows > 0); 
        }

        private string getMultisettingValue(string listenerName, TraceLevel filterLevel)
        {
            return String.Format(
                "<Listener name=\"{0}\" type=\"Leet.Core.Diagnostics.SqlListener, Leet.Core\">" +
                "<Filter type=\"Leet.Core.Diagnostics.LeetTraceLevelFilter\">" +
                "<Parameter type=\"Leet.Core.Diagnostics.LeetTraceLevel\">" +
                "<LeetTraceLevel>{1}</LeetTraceLevel>" +
                "</Parameter></Filter></Listener>", listenerName, filterLevel);
        }

        private SqlEvent LogAndRetrieveTrace(TraceLevel traceLevel, Guid testId)
        {
            int numMinutesForSqlDatabase = 1;
            string id = testId.ToString();
            Exception ex = new Exception(id);
            logging.LogTrace(traceLevel, ex);
            DiagnosticDatabaseTestService diagnosticService = new DiagnosticDatabaseTestService(TestSettings.TestServiceBaseUrl);
            return diagnosticService.GetDiagnosticEntryByIdAndMessageText(traceEventId, numMinutesForSqlDatabase, id);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\DiagnosticDatabaseService.svc.cs ===
﻿using System;
using System.Data;
using Infrastructure.Test.Common.Logging;
using Infrastructure.Test.Common.Database;
using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using Leet.Core.IO;
using System.Data.SqlClient;

namespace Leet.Core.TestService
{
    public class DiagnosticDatabaseService : IDiagnosticDatabaseService
    {
        const int _numSecondsTilTimeout = 30;

        public DiagnosticDatabaseService()
        {
            Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
            ConfigurationSelector.RegisterProvider("core_test_service", "LEET");
        }

        public SqlEvent GetDiagnosticEntryByIdAndMessageText(int eventId, int timeframe, string message)
        {
            SqlCommand command = new SqlCommand();
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = "RetrieveEvents";
            command.Parameters.AddWithValue("@EventId", eventId);
            command.Parameters.AddWithValue("@TimeSpan", timeframe);

            SqlEvent foundEvent = null;
            TryUntilTimeout(_numSecondsTilTimeout, () => SuccessfullyFoundSqlEntry(command, message, out foundEvent));
            return foundEvent;
        }

        public SqlEvent GetDiagnosticEntryBySourceAndMessageText(string source, int timeframe, string message)
        {
            SqlCommand command = new SqlCommand();
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = "RetrieveEvents";
            command.Parameters.AddWithValue("@Source", source);
            command.Parameters.AddWithValue("@TimeSpan", timeframe);

            SqlEvent foundEvent = null;
            TryUntilTimeout(_numSecondsTilTimeout, () => SuccessfullyFoundSqlEntry(command, message, out foundEvent));
            return foundEvent;
        }

        private static bool SuccessfullyFoundSqlEntry(SqlCommand command, string message, out SqlEvent foundEvent)
        {
            SqlConnection connection = new SqlConnection(IoC.Get<IConfigurationProvider>().GetConnectionString("lest_diagnostics_db"));
            DataTable table = DatabaseExecution.ExecuteSql(connection, command);
            foreach (DataRow row in table.Rows)
            {
                SqlEvent curEvent = new SqlEvent(row);
                if (curEvent.Message.Contains(message))
                {
                    foundEvent = curEvent;
                    return true;
                }
            }
            foundEvent = null;
            return false;
        }

        private static bool TryUntilTimeout(int numberOfSeconds, Func<bool> condition)
        {
            bool success = false;
            DateTime endTime = DateTime.Now.AddSeconds((double)numberOfSeconds);

            do
            {
                System.Threading.Thread.Sleep(500);
                success = condition();

            } while (!success && DateTime.Now < endTime);

            return success;
        }            
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Infrastructure.Test.Logging\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Infrastructure.Test.Logging")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("769aa54c-04d3-4579-ba12-992a94b6b9d7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\IEmulators.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache.DataAccess;

namespace Leet.Core.TestService
{
    // NOTE: If you change the interface name "IEmulators" here, you must also update the reference to "IEmulators" in Web.config.
    [ServiceContract]
    public interface IEmulators
    {
        [OperationContract]
        void AsyncRequest();

        [OperationContract]
        [NetDataContract]
        object ReturnWithSleep(object returnObject, int mseconds);

        [OperationContract]
        [NetDataContract]
        void StorageWrite(ulong userId, string pictureName, byte[] data);

        [OperationContract]
        [NetDataContract]
        IGamerProfile GetPublicGamerProfile(ulong targetLivepuid, int mseconds);

        [OperationContract]
        [NetDataContract]
        SaveSettingsResponse SyncSettings(ulong callingLivepuid, ProfileSetting[] settings, int mseconds);

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\Emulators.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Threading;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache.DataAccess;

namespace Leet.Core.TestService
{
    // NOTE: If you change the class name "Emulators" here, you must also update the reference to "Emulators" in Web.config.
    public class Emulators : IEmulators
    {
        #region IEmulators Members

        public void AsyncRequest()
        {
            // do nothing
        }

        public object ReturnWithSleep(object returnObject, int mseconds)
        {
            Thread.Sleep(mseconds);
            return returnObject;
        }

        public void StorageWrite(ulong userId, string pictureName, byte[] data)
        {
            // do nothing
        }

        public IGamerProfile GetPublicGamerProfile(ulong targetLivepuid, int mseconds)
        {
            Thread.Sleep(mseconds);
            return new TestGamerProfile();
        }

        public SaveSettingsResponse SyncSettings(ulong callingLivepuid, ProfileSetting[] settings, int mseconds)
        {
            Thread.Sleep(mseconds);
            return new SaveSettingsResponse();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\EventLogService.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Diagnostics;
using Infrastructure.Test.Common.EventLog;

namespace Leet.Core.TestService
{
    public class EventLogService : IEventLogService
    {
        public EventLogEntry GetLatestEntryById(int eventId, string machineName)
        {
            EventLogAccess access = new EventLogAccess();
            return access.GetLatestEntryById(eventId, machineName);
        }

        public List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName)
        {
            EventLogAccess access = new EventLogAccess();
            return access.GetEntriesByIdWithinTimeSpan(eventId, numberOfSeconds, machineName);
        }

        public List<EventLogEntry> GetEntriesBySourceContainsWithinTimeSpan(string sourceContains, int numberOfSeconds, string machineName)
        {
            EventLogAccess access = new EventLogAccess();
            return access.GetEntriesBySourceContainsWithinTimeSpan(sourceContains, numberOfSeconds, machineName);
        }

        public List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName)
        {
            EventLogAccess access = new EventLogAccess();
            return access.GetMostRecentEvents(numberToRetrieve, machineName);
        }

        public List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName)
        {
            EventLogAccess access = new EventLogAccess();
            return access.GetEventsByTime(startTime, endTime, machineName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\IEventLogService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Diagnostics;

namespace Leet.Core.TestService
{
    // NOTE: If you change the interface name "IEventLogService" here, you must also update the reference to "IEventLogService" in Web.config.
    [ServiceContract]
    public interface IEventLogService
    {
        [OperationContract]
        EventLogEntry GetLatestEntryById(int eventId, string machineName);

        [OperationContract]
        List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName);

        [OperationContract]
        List<EventLogEntry> GetEntriesBySourceContainsWithinTimeSpan(string sourceContains, int numberOfSeconds, string machineName);

        [OperationContract]
        List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName);

        [OperationContract]
        List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\LoggingService.svc.cs ===
﻿using System;
using Leet.Core.Diagnostics;
using Infrastructure.Test.Common.Logging;
using System.Diagnostics;

namespace Leet.Core.TestService
{
    public class LoggingService : ILoggingService
    {
        #region ILoggingService Members
        public string GetVersion()
        {
            TestLogger logger = new TestLogger();
            return logger.GetVersion();
        }

        public void LogEvent(BaseEvent evt)
        {
            TestLogger logger = new TestLogger();
            logger.LogEvent(evt);
        }

        public void LogEventFormattedMessage(BaseEvent evt, string formattedMessage, params object[] args)
        {
            TestLogger logger = new TestLogger();
            logger.LogEvent(evt, formattedMessage, args);
        }

        public void LogEventException(BaseEvent evt, Exception ex)
        {
            TestLogger logger = new TestLogger();
            logger.LogEvent(evt, ex);
        }

        public void LogEventExceptionFormattedMessage(BaseEvent evt, Exception ex, string formattedMessage, params object[] args)
        {
            TestLogger logger = new TestLogger();
            logger.LogEvent(evt, ex, formattedMessage, args);
        }

        public void LogTrace(TraceLevel level, string formattedMessage, params object[] args)
        {
            TestLogger logger = new TestLogger();
            logger.LogTrace(level, formattedMessage, args);
        }

        public void LogTraceException(TraceLevel level, Exception ex)
        {
            TestLogger logger = new TestLogger();
            logger.LogTrace(level, ex);
        }

        public void LogTraceExceptionFormattedMessage(TraceLevel level, Exception ex, string formattedMessage, params object[] args)
        {
            TestLogger logger = new TestLogger();
            logger.LogTrace(level, ex, formattedMessage, args);
        }

        public void LogTransaction(string transactionId, string transactionType, string action)
        {
            TestLogger logger = new TestLogger();
            logger.LogTransaction(transactionId, transactionType, action);
        }

        public void LogTransactionFormattedMessage(string transactionId, string transactionType, string action, string formattedMessage, params object[] args)
        {
            TestLogger logger = new TestLogger();
            logger.LogTransaction(transactionId, transactionType, action, formattedMessage, args);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\ILoggingService.cs ===
﻿using System;
using System.ServiceModel;
using Leet.Core.Diagnostics;
using System.Diagnostics;

namespace Leet.Core.TestService
{
    [ServiceContract]
    public interface ILoggingService
    {
        [OperationContract]
        [NetDataContract]
        string GetVersion();

        [OperationContract]
        [NetDataContract]
        void LogEvent(BaseEvent evt);

        [OperationContract]
        [NetDataContract]
        void LogEventFormattedMessage(BaseEvent evt, string formattedMessage, params object[] args);

        [OperationContract]
        [NetDataContract]
        void LogEventException(BaseEvent evt, Exception ex);

        [OperationContract]
        [NetDataContract]
        void LogEventExceptionFormattedMessage(BaseEvent evt, Exception ex, string formattedMessage, params object[] args);

        [OperationContract]
        [NetDataContract]
        void LogTrace(TraceLevel level, string formattedMessage, params object[] args);

        [OperationContract]
        [NetDataContract]
        void LogTraceException(TraceLevel level, Exception ex);

        [OperationContract]
        [NetDataContract]
        void LogTraceExceptionFormattedMessage(TraceLevel level, Exception ex, string formattedMessage, params object[] args);

        [OperationContract]
        [NetDataContract]
        void LogTransaction(string transactionId, string transactionType, string action);

        [OperationContract]
        [NetDataContract]
        void LogTransactionFormattedMessage(string transactionId, string transactionType, string action, string formattedMessage, params object[] args);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\IDiagnosticDatabaseService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Infrastructure.Test.Common.Logging;

namespace Leet.Core.TestService
{
    // NOTE: If you change the interface name "IDiagnosticDatabaseService" here, you must also update the reference to "IDiagnosticDatabaseService" in Web.config.
    [ServiceContract]
    public interface IDiagnosticDatabaseService
    {
        /// <summary>
        /// This method gets all events within the specified timeframe with that event id and returns the first one that contains the message.
        /// </summary>
        /// <param name="Id">Event Id</param>
        /// <param name="timeframe">Number of minutes to look</param>
        /// <param name="message">Message to find</param>
        /// <returns>Sql Event containing the message text</returns>
        [OperationContract]
        [NetDataContract]
        SqlEvent GetDiagnosticEntryByIdAndMessageText(int eventId, int timeframe, string message);

        /// <summary>
        /// This method gets all events within the specified timeframe from that source and returns the first one that contains the message.
        /// </summary>
        /// <param name="source">Source component</param>
        /// <param name="timeframe">Number of minutes to look</param>
        /// <param name="message">Message to find</param>
        /// <returns>Sql Event containing the message text</returns>
        [OperationContract]
        [NetDataContract]
        SqlEvent GetDiagnosticEntryBySourceAndMessageText(string source, int timeframe, string message);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\AvatarServices\CustomMessage.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Avatar.Services.ServerSideRenderer.Messaging;

namespace Leet.Core.TestService
{
    [Serializable]
    public class CustomMessage : BaseMessage
    {
        public CustomMessage() { }

        public CustomMessage(double data)
        {
            this.Data = data;
            this.Version = 1;
        }

        double Data { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\NetDataContractAttribute.cs ===
﻿using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using System.Xml;

namespace Leet.Core.TestService
{
    public class NetDataContractAttribute : Attribute, IOperationBehavior
    {
        public void AddBindingParameters(OperationDescription description, BindingParameterCollection parameters)
        {
        }

        public void ApplyClientBehavior(OperationDescription description, ClientOperation proxy)
        {
            if (ReplaceDataContractSerializerOperationBehavior(description))
            {
                // Reapply behaviors, with change
                for (int i = 0; i < description.Behaviors.IndexOf(this); ++i)
                {
                    description.Behaviors[i].ApplyClientBehavior(description, proxy);
                }
            }
        }

        public void ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch)
        {
            if (ReplaceDataContractSerializerOperationBehavior(description))
            {
                // Reapply behaviors, with change
                for (int i = 0; i < description.Behaviors.IndexOf(this); ++i)
                {
                    description.Behaviors[i].ApplyDispatchBehavior(description, dispatch);
                }
            }
        }

        public void Validate(OperationDescription description)
        {
        }

        private static bool ReplaceDataContractSerializerOperationBehavior(OperationDescription description)
        {
            DataContractSerializerOperationBehavior dcsOperationBehavior = description.Behaviors.Find<DataContractSerializerOperationBehavior>();
            if (dcsOperationBehavior != null)
            {
                int idx = description.Behaviors.IndexOf(dcsOperationBehavior);
                description.Behaviors.Remove(dcsOperationBehavior);
                description.Behaviors.Insert(idx, new NetDataContractSerializerOperationBehavior(description));
                return true;
            }

            return false;
        }

        public class NetDataContractSerializerOperationBehavior : DataContractSerializerOperationBehavior
        {
            public NetDataContractSerializerOperationBehavior(OperationDescription operationDescription)
                : base(operationDescription)
            {
            }

            public override XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList<Type> knownTypes)
            {
                return new NetDataContractSerializer();
            }

            public override XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList<Type> knownTypes)
            {
                return new NetDataContractSerializer();
            }
        }
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\TestGamerProfile.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Logic.Avatars;
using Microsoft.XboxLive.Avatars;
using Microsoft.XboxLive.Avatars.Internal;

namespace Leet.Core.TestService
{
    public class TestGamerProfile : IGamerProfile
    {    
        #region IGamerProfile Members

        public ulong LivePuid
        {
            get
            {
                return 1234;
            }
            set
            {
                // do nothing
            }
        }

        public string GamerTag
        {
            get
            {
                return "somegamertag";
            }
            set
            {
                // do nothing
            }
        }

        public string Bio
        {
            get
            {
                return "my bio";
            }
            set
            {
                // do nothing
            }
        }

        public string Name
        {
            get
            {
                return "my name";
            }
            set
            {
                // do nothing
            }
        }

        public string Location
        {
            get
            {
                return "my location";
            }
            set
            {
                // do nothing
            }
        }

        public string Motto
        {
            get
            {
                return "my motto";
            }
            set
            {
                // do nothing
            }
        }

        public int Gamerscore
        {
            get
            {
                return 100;
            }
            set
            {
                // do nothing
            }
        }

        public bool HasAcceptedTOU
        {
            get
            {
                return true;
            }
            set
            {
                // do nothing
            }
        }

        public int Country
        {
            get
            {
                return 103;
            }
            set
            {
                // do nothing
            }
        }

        public float Reputation
        {
            get
            {
                return 0;
            }
            set
            {
                // do nothing
            }
        }

        public int ReputationBucket
        {
            get { return 0; }
        }

        public string GamerTileUrl
        {
            get
            {
                return "http://badurl";
            }
            set
            {
                // do nothing
            }
        }

        public string SecureGamerTileUrl
        {
            get
            {
                return "http://badurl";
            }
            set
            {
                // do nothing
            }
        }

        public string SmallGamerTileUrl
        {
            get
            {
                return "http://badurl";
            }
            set
            {
                // do nothing
            }
        }

        public string SecureSmallGamerTileUrl
        {
            get
            {
                return "http://badurl";
            }
            set
            {
                // do nothing
            }
        }

        public string GamerTileId
        {
            get
            {
                return "tileid";
            }
            set
            {
                // do nothing
            }
        }

        public GamercardZone Zone
        {
            get
            {
                return GamercardZone.Family;
            }
            set
            {
                // do nothing
            }
        }

        public GamerTier Tier
        {
            get
            {
                return GamerTier.Gold;
            }
            set
            {
                // do nothing
            }
        }

        public byte[] AvatarManifest
        {
            get
            {
                return CreateRandomManifest(AvatarGender.Both).SaveToBinary();
            }
            set
            {
                // do nothing
            }
        }

        public AvatarBodyType AvatarBodyType
        {
            get { return AvatarBodyType.Male; }
        }

        public bool IsLaunchTeamMember
        {
            get { return false; }
        }

        public bool IsCheater
        {
            get { return false; }
        }

        public bool IsNXELaunchTeamMember
        {
            get { return false; }
        }

        public int ProfilePermissions
        {
            get
            {
                return 0;
            }
            set
            {
                // do nothing
            }
        }

        public PrivilegeValue ProfileActivityPrivilege
        {
            get
            {
                return PrivilegeValue.Allow;
            }
            set
            {
                // do nothing
            }
        }

        public PrivilegeValue ProfileUserCreatedContentPrivilege
        {
            get
            {
                return PrivilegeValue.Allow;
            }
            set
            {
                // do nothing
            }
        }

        public PrivilegeValue PlayedMusicSharingPrivilege
        {
            get
            {
                return PrivilegeValue.Allow;
            }
            set
            {
                // do nothing
            }
        }

        public string GamerTile
        {
            get
            {
                return "sometile";
            }
            set
            {
                // do nothing
            }
        }

        public string BlogUrl
        {
            get
            {
                return "http://badurl";
            }
            set
            {
                // do nothing
            }
        }

        public GamerTypeFlags GamerType
        {
            get
            {
                return 0;
            }
            set
            {
                // do nothing
            }
        }
        #endregion

        private static object lockObject = new object();
        private static AssetDataManager privateAssetManager;
        private static AssetDataManager assetManager
        {
            get
            {
                if (privateAssetManager == null)
                {
                    lock (lockObject)
                    {
                        if (privateAssetManager == null)
                        {
                            string stockUri = @"\\rrinfxtstcli824\AvatarResources\584d07d1\{0}.bin";
                            string nonStockUri = @"\\rrinfxtstcli824\AvatarResources\{0}\avataritems\{1}.bin";
                            privateAssetManager = new AssetDataManager();
                            privateAssetManager.AddAssetProvider(new AssetUrlDataProvider(stockUri, nonStockUri));
                        }
                    }
                }
                return privateAssetManager;
            }
        }

        private AvatarManifest CreateRandomManifest(AvatarGender gender)
        {
            return Microsoft.XboxLive.Avatars.Internal.AvatarManifest.CreateRandom(assetManager, gender, 1)[0];
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\AvatarServices\ISSRService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Avatar.Services.ServerSideRenderer.Messaging;

namespace Leet.Core.TestService
{
    // NOTE: If you change the interface name "ISSRService" here, you must also update the reference to "ISSRService" in Web.config.
    [ServiceContract]
    public interface ISSRService : IEventLogService
    {
        [OperationContract]
        [NetDataContract]
        void SendMessage(BaseMessage message);

        [OperationContract]
        [NetDataContract]
        void SendMessageWithName(BaseMessage message, string messageName);

        [OperationContract]
        [NetDataContract]
        void SendBodyShotMessage(BaseMessage message);

        [OperationContract]
        [NetDataContract]
        void SendGamerPicMessage(BaseMessage message);

        [OperationContract]
        byte[] GetBodyshotDiagnosticImage(string machineName);

        [OperationContract]
        byte[] GetLargeGamerPicDiagnosticImage(string machineName);

        [OperationContract]
        byte[] GetSmallGamerPicDiagnosticImage(string machineName);

        [OperationContract]
        byte[] GetDiagnosticImage(string fileName, string machineName);

        [OperationContract]
        string ReadGamercardTileSetting(ulong xuid);

        [OperationContract]
        void SetGamercardTileSetting(ulong xuid, string tileString);

        [OperationContract]
        void DeleteImages(string machineName);

        [OperationContract]
        void ResetImage(ulong xuid, string imageName);

        [OperationContract]
        void ResetBodyShotImage(ulong xuid);

        [OperationContract]
        void ResetGamerPicImage(ulong xuid);

        [OperationContract]
        void ResetAllImages(ulong xuid);

        [OperationContract]
        void WriteStorageImage(ulong xuid, string imageName, byte[] data);

        [OperationContract]
        void WriteBodyshotStorageImage(ulong xuid, byte[] data);

        [OperationContract]
        void WriteSmallGamerPicStorageImage(ulong xuid, byte[] data);

        [OperationContract]
        void WriteLargeGamerPicStorageImage(ulong xuid, byte[] data);

        [OperationContract]
        byte[] GetBodyshotStorageImage(ulong xuid);

        [OperationContract]
        byte[] GetLargeGamerPicStorageImage(ulong xuid);

        [OperationContract]
        byte[] GetSmallGamerPicStorageImage(ulong xuid);
        

        [OperationContract]
        int GetQueueLength();

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\AvatarServices\TestAuthProvider.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using xonline.common.webplatform.livecache;
using System.Net;
using xonline.common.service;

namespace Leet.Core.TestService
{
    public class TestAuthProvider : IExtendedAuthDataProvider
    {
        private ulong livePuid;

        public TestAuthProvider(ulong xuid)
        {
            this.livePuid = xuid;
        }

        #region IExtendedAuthDataProvider Members

        public byte ClientPlatform
        {
            get { return XOn.XPLT_WEB_GAMES; }
        }

        public ulong XboxPuid
        {
            get { return this.livePuid; }
        }

        #endregion

        #region IAccountAuthDataProvider Members

        public IPEndPoint ClientIPEndPoint
        {
            get { return new IPEndPoint(IPAddress.Parse("127.0.0.1"), 0); }
        }
        
        public ulong LivePuid
        {
            get { return this.livePuid; }
        }

        public uint[] Privileges
        {
            get
            {
                uint[] pvs = new uint[8] { 0, 0, 0, 0, 0, 0, 2415919104, 4294796541 };
                return pvs;
            }
        }

        public byte Tier
        {
            get { return 0; }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Leet.Core.TestService")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\AvatarServices\SSRService.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using Microsoft.ServiceModel.Web;
using System.Text;
using Avatar.Services.ServerSideRenderer.Messaging;
using System.IO;
using Leet.Core.Diagnostics;
using System.Net;
using System.ServiceProcess;
using Leet.Core.IoCCo;
using Leet.Core.Configuration;
using xonline.common.webplatform.livecache;
using xonline.common.service;
using System.Data.SqlClient;
using System.Data;
using xonline.common.protocol;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Account;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Profile;
using System.Diagnostics;

namespace Leet.Core.TestService
{
    // NOTE: If you change the class name "SSRService" here, you must also update the reference to "SSRService" in Web.config.
    public class SSRService : EventLogService, ISSRService
    {
        private const uint TITLE_ID = 0xfffe07d1;

        public SSRService()
            : this(Environment.UserName)
        {
        }

        public SSRService(string serviceUserName)
        {
            try
            {
                RequestorService.Instance.Initialize("core_test_service");
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error initializing RequestorService.", ex);
            }
        }

        public void SendMessage(BaseMessage message)
        {
            try
            {
                RequestorService.Instance.SendMessage(message);
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error sending the message.", ex);
            }
        }

        public void SendMessageWithName(BaseMessage message, string messageName)
        {
            try
            {
                RequestorService.Instance.SendMessageWithName(message, messageName);
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error sending the message.", ex);
            }
        }

        public void SendBodyShotMessage(BaseMessage message)
        {
            RequestorService.Instance.SendBodyShotMessage(message);
        }

        public void SendGamerPicMessage(BaseMessage message)
        {
            RequestorService.Instance.SendGamerPicMessage(message);
        }

        public byte[] GetBodyshotDiagnosticImage(string machineName)
        {
            return GetDiagnosticImage("avatar-body.png", machineName);
        }

        public byte[] GetLargeGamerPicDiagnosticImage(string machineName)
        {
            return GetDiagnosticImage("avatarpic-l.png", machineName);
        }

        public byte[] GetSmallGamerPicDiagnosticImage(string machineName)
        {
            return GetDiagnosticImage("avatarpic-s.png", machineName);
        }

        public byte[] GetDiagnosticImage(string fileName, string machineName)
        {
            IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
            String path = configSettings.GetSetting(Settings.AvatarSSRDiagnosticImageWriteUri);

            path = Path.Combine(Path.Combine(path, configSettings.Environment), fileName);

            try
            {
                FileInfo info = new FileInfo(path);

                if (info.Exists)
                {
                    // Wait until the write is complete
                    long length = 0;
                    while (info.Length != length)
                    {
                        length = info.Length;
                        System.Threading.Thread.Sleep(100);
                        info.Refresh();
                    }

                    for (int retry = 3; retry > 0; )
                    {
                        try
                        {
                            using (FileStream fs = info.OpenRead())
                            {
                                byte[] buffer = new byte[info.Length];
                                fs.Read(buffer, 0, (int)info.Length);
                                return buffer;
                            }
                        }
                        catch (Exception exc)
                        {
                            if ((retry--) > 0)
                            {
                                // Retry again as the service may have been in the middle or writing
                                System.Threading.Thread.Sleep(1000);

                                continue;
                            }

                            // That's it, get out
                            throw exc;
                        }
                    }
                }

                return new byte[0];

            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError,
                    string.Format("There was an error retrieving the image at {0}: {1}", path, ex.ToString()), ex);
            }
        }

        public void DeleteImages(string machineName)
        {
            try
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                String path = configSettings.GetSetting(Settings.AvatarSSRDiagnosticImageWriteUri);

                path = Path.Combine(path, configSettings.Environment);
                string[] filesToDelete = Directory.GetFiles(path, "avatar*.png", SearchOption.TopDirectoryOnly);
                foreach (string file in filesToDelete)
                {
                    File.Delete(file);
                }
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error deleting images.", ex);
            }
        }

        public void ResetImage(ulong xuid, string imageName)
        {
            try
            {
                LcTitleStorage lcStorage = new LcTitleStorage();
                string path = string.Format("//avatar/u:{0:x}/{1}", xuid, imageName);
                lcStorage.StorageWrite(xuid, path, new byte[0], DateTime.MaxValue, 0, LivecacheClientType.LIVEn);
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error resetting images.", ex);
            }
        }

        public void ResetBodyShotImage(ulong xuid)
        {
            ResetImage(xuid, "avatar-body.png");
        }

        public void ResetGamerPicImage(ulong xuid)
        {
            ResetImage(xuid, "avatarpic-l.png");
            ResetImage(xuid, "avatarpic-s.png");
        }

        public void ResetAllImages(ulong xuid)
        {
            ResetImage(xuid, "avatar-body.png");
            ResetImage(xuid, "avatarpic-l.png");
            ResetImage(xuid, "avatarpic-s.png");
        }

        public void WriteStorageImage(ulong xuid, string imageName, byte[] imageData)
        {
            try
            {
                LcTitleStorage lcStorage = new LcTitleStorage();
                string path = string.Format("//avatar/u:{0:x}/{1}", xuid, imageName);
                lcStorage.StorageWrite(0, path, imageData, DateTime.MaxValue, 0, LivecacheClientType.LIVEn);
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error writing image data to storage.", ex);
            }
        }

        public void WriteBodyshotStorageImage(ulong xuid, byte[] imageData)
        {
            WriteStorageImage(xuid, "avatar-body.png", imageData);
        }

        public void WriteSmallGamerPicStorageImage(ulong xuid, byte[] imageData)
        {
            WriteStorageImage(xuid, "avatarpic-s.png", imageData);
        }

        public void WriteLargeGamerPicStorageImage(ulong xuid, byte[] imageData)
        {
            WriteStorageImage(xuid, "avatarpic-l.png", imageData);
        }

        public byte[] GetBodyshotStorageImage(ulong xuid)
        {
            return GetStorageImage(xuid, "avatar-body.png");
        }

        public byte[] GetLargeGamerPicStorageImage(ulong xuid)
        {
            return GetStorageImage(xuid, "avatarpic-l.png");
        }

        public byte[] GetSmallGamerPicStorageImage(ulong xuid)
        {
            return GetStorageImage(xuid, "avatarpic-s.png");
        }

        private byte[] GetStorageImage(ulong xuid, string imageName)
        {
            byte[] image = new byte[0];
            try
            {
                LcTitleStorage lcStorage = new LcTitleStorage();
                string path = string.Format("//avatar/u:{0:x}/{1}", xuid, imageName);
                image = lcStorage.StorageRead(path, TITLE_ID, LivecacheClientType.LIVEn);
                return image;
            }
            catch (LivecacheResponseException ex)
            {
                if (ex.HResult == HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND)
                {
                    return image;
                }
                else
                {
                    Logging.TraceException(ex, "StorageRead error.");
                }
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error reading image from storage.", ex);
            }

            return image;
        }

        public string ReadGamercardTileSetting(ulong xuid)
        {
            LcStats lcStats = new LcStats(LivecacheClientType.LIVEn, XOn.WEB_TITLE_ID);
            DateTime time = new DateTime();
            Encoding unicode = Encoding.Unicode;

            try
            {
                ReadSettingsResponse response = lcStats.PublicReadSettings(xuid, new uint[] { ProfileDefs.XPROFILE_GAMERCARD_PICTURE_KEY }, out time);
                return unicode.GetString(response.Settings[0].Value);
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error reading gamer tile setting from livecache.", ex);
            }
        }

        public void SetGamercardTileSetting(ulong xuid, string tileString)
        {
            LcStats lcStats = new LcStats(LivecacheClientType.LIVEn, XOn.WEB_TITLE_ID);

            UserSettingBuilder usb = new UserSettingBuilder(xuid, 1);
            usb.AddStringSetting(ProfileDefs.XPROFILE_GAMERCARD_PICTURE_KEY, tileString);

            try
            {
                SyncSettingsResponse response = lcStats.SyncSettings(xuid, usb.ToUserSettingArray(), new TestAuthProvider(xuid));
            }
            catch (Exception ex)
            {
                throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error setting the gamer tile from livecache.", ex);
            }

        }

        private const string queueQuery = "SELECT COUNT(*) FROM [ServerSideRenderer].[dbo].[Avatar.Services.ServerSideRenderer.Messaging.RequestQueue] WITH(NOLOCK)";
        public int GetQueueLength()
        {
            string connectionString = RequestorService.Instance.GetConnectionString();

            SqlCommand sqlCommand = null;
            int length = 0;
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                try
                {
                    sqlConnection.Open();
                    sqlCommand = sqlConnection.CreateCommand();
                    sqlCommand.Transaction = sqlConnection.BeginTransaction();

                    sqlCommand.CommandText = queueQuery;

                    length = (int)sqlCommand.ExecuteScalar();

                    sqlCommand.Transaction.Commit();
                }
                catch (SqlException ex)
                {
                    if (sqlCommand != null && sqlCommand.Transaction != null)
                    {
                        sqlCommand.Transaction.Rollback();
                    }
                    throw new WebProtocolException(HttpStatusCode.InternalServerError, "There was an error querying queue length.", ex);
                }
            }
            return length;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService\AvatarServices\RequestorExtension.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Avatar.Services.ServerSideRenderer.Messaging;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Data.SqlClient;
using System.Data;
using System.Text;
using Leet.Core.Configuration;
using Leet.Core.IoCCo;

namespace Leet.Core.TestService
{
    public static class RequestorExtension
    {
        static RequestorExtension()
        {
            IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
            connectionString = configSettings.GetConnectionString("lest_SSRQueue_db");
        }

        static readonly int lifetime = 5;
        static readonly string sendString =
            "BEGIN DIALOG CONVERSATION @conversationHandle" +
                                " FROM SERVICE [Avatar.Services.ServerSideRenderer.Messaging.RequestorService]" +
                                " TO SERVICE 'Avatar.Services.ServerSideRenderer.Messaging.RendererService'" +
                                " ON CONTRACT [Avatar.Services.ServerSideRenderer.Messaging.RequestContract]" +
                                " WITH LIFETIME = @lifeTime, " +
                                " ENCRYPTION = OFF;" +
                                "SEND ON CONVERSATION @conversationHandle MESSAGE TYPE [";

        static string connectionString;

        public static void SendBodyShotMessage(this RequestorService requestorService, BaseMessage message)
        {
            SendMessageEx(message, "Avatar.Services.ServerSideRenderer.Messaging.GenerateBodyShotMessage");
        }

        public static void SendGamerPicMessage(this RequestorService requestorService, BaseMessage message)
        {
            SendMessageEx(message, "Avatar.Services.ServerSideRenderer.Messaging.GenerateGamerPictureMessage");
        }

        public static void SendMessageWithName(this RequestorService requestorService, BaseMessage message, string messageName)
        {
            SendMessageEx(message, messageName);
        }

        public static string GetConnectionString(this RequestorService requestorService)
        {
            return connectionString;
        }

        private static void SendMessageEx(BaseMessage message, string messageName)
        {
            MemoryStream memStream = new MemoryStream();
            BinaryFormatter bf = new BinaryFormatter();

            bf.Serialize(memStream, message);

            //Prepend message with the version
            byte[] bMessage = new byte[sizeof(int) + memStream.Length];
            for (int i = 0; i < sizeof(int); i++)
            {
                bMessage[i] = (byte)(message.Version >> i * 8);
            }

            //Serialize message object into message
            memStream.Position = 0;
            int bytesWritten = memStream.Read(bMessage, 4, (int)memStream.Length);

            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                StringBuilder commandString = new StringBuilder();

                commandString.Append(sendString);
                commandString.Append(messageName);
                commandString.Append("] (@messageBody);");

                commandString.Append("END CONVERSATION @conversationHandle");

                SqlCommand sqlCommand = null;

                try
                {
                    sqlConnection.Open();
                    sqlCommand = sqlConnection.CreateCommand();
                    sqlCommand.Transaction = sqlConnection.BeginTransaction();

                    sqlCommand.Parameters.Add("@conversationHandle", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters.Add("@messageBody", SqlDbType.VarBinary);
                    sqlCommand.Parameters.Add("@lifeTime", SqlDbType.Int);

                    sqlCommand.Parameters["@conversationHandle"].Direction = ParameterDirection.Output;
                    sqlCommand.Parameters["@messageBody"].Direction = ParameterDirection.Input;
                    sqlCommand.Parameters["@lifeTime"].Direction = ParameterDirection.Input;

                    sqlCommand.Parameters["@lifeTime"].Value = lifetime;
                    sqlCommand.Parameters["@messageBody"].Value = bMessage;

                    sqlCommand.CommandText = commandString.ToString();

                    sqlCommand.ExecuteNonQuery();

                    sqlCommand.Transaction.Commit();
                }
                catch (SqlException)
                {
                    if (sqlCommand != null && sqlCommand.Transaction != null)
                    {
                        sqlCommand.Transaction.Rollback();
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\AvatarServices\EmulatorClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.Wcf;
using Leet.Core.TestService;
using Leet.Core.TestService.Client;

namespace Leet.Core.TestService.Client.AvatarServices
{
    class EmulatorClientEndpointConfigurator : ClientEndpointConfigurator<IEmulators>
    {
        protected override Uri GetEndpointUri()
        {
            return new Uri(ServiceHostUri, "/Emulators.svc");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\AvatarServices\EmulatorClient.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.TestService;
using Leet.Core.Wcf;
using Avatar.Services.ServerSideRenderer.Messaging;
using Leet.Core.TestService.Client.EventLog;
using System.Diagnostics;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache.DataAccess;

namespace Leet.Core.TestService.Client.AvatarServices
{
    public class EmulatorClient : IEmulators
    {
        private IWcfProxyFactory<IEmulators> proxyFactory;

        public EmulatorClient(string serviceBaseUrl)
        {
            proxyFactory = new ClientProxyFactory<IEmulators>(new EmulatorClientEndpointConfigurator());
            proxyFactory.Configurator.ServiceHostUri = new Uri(serviceBaseUrl);
        }

        #region IEmulators Members

        public void AsyncRequest()
        {
            proxyFactory.Send(proxy => proxy.AsyncRequest());
        }

        public object ReturnWithSleep(object returnObject, int mseconds)
        {
            return proxyFactory.Send(proxy => proxy.ReturnWithSleep(returnObject, mseconds));
        }

        public void StorageWrite(ulong userId, string pictureName, byte[] data)
        {
            proxyFactory.Send(proxy => proxy.StorageWrite(userId, pictureName, data));
        }

        public IGamerProfile GetPublicGamerProfile(ulong targetLivepuid, int mseconds)
        {
            return proxyFactory.Send(proxy => proxy.GetPublicGamerProfile(targetLivepuid, mseconds));
        }

        public SaveSettingsResponse SyncSettings(ulong callingLivepuid, ProfileSetting[] settings, int mseconds)
        {
            return proxyFactory.Send(proxy => proxy.SyncSettings(callingLivepuid, settings, mseconds));
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\ClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Description;
using Leet.Core.TestService;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using Leet.Core.IoCCo;
using System.Xml;
using System.ComponentModel;
using Leet.Core.Wcf;
using System.Xml.Linq;

namespace Leet.Core.TestService.Client
{
    public abstract class ClientEndpointConfigurator<TContract> : IEndpointConfigurator<TContract> where TContract : class
    {
        private Uri serviceHostUri;
        public Uri ServiceHostUri
        {
            get
            {
                return serviceHostUri;
            }
            set
            {
                serviceHostUri = new Uri(value.GetLeftPart(UriPartial.Authority));
                OnPropertyChanged("ServiceHostUri");
            }
        }

        protected abstract Uri GetEndpointUri();

        private ClientChannelConfiguration configuration = new ClientChannelConfiguration();
        public ClientChannelConfiguration Configuration
        {
            get
            {
                return configuration;
            }
            set
            {
                if (configuration != null)
                {
                    configuration.PropertyChanged -= ClientConfigurationChanged;
                }

                configuration = value;

                if (configuration != null)
                {
                    configuration.PropertyChanged += ClientConfigurationChanged;
                }

                OnPropertyChanged("Configuration");
            }
        }

        void ClientConfigurationChanged(object sender, PropertyChangedEventArgs e)
        {
            // if the configuration changed, force the creation of a new ChannelFactory
            OnPropertyChanged(e.PropertyName);
        }

        public ServiceEndpoint GetEndpoint()
        {
            return CreateWindowsAuthenticationEndpoint();
        }

        #region Create Windows Authentication Channel Factory
        private ServiceEndpoint CreateWindowsAuthenticationEndpoint()
        {
            //<endpoint address="http://coretest.dev.xboxlive.com/LoggingService.svc"
            //    binding="wsHttpBinding" bindingConfiguration="LoggingServiceWSHttpBinding"
            //    contract="Cosmos.Core.ICosmosService" name="ICosmosService_EndPoint" >
            //</endpoint>

            ContractDescription contract = ContractDescription.GetContract(typeof(TContract));

            Binding binding = CreateWindowsAuthenticationWSHttpBinding();
            EndpointAddress address = new EndpointAddress(GetEndpointUri());

            ServiceEndpoint endpoint = new ServiceEndpoint(contract, binding, address);

            return endpoint;
        }

        private Binding CreateWindowsAuthenticationWSHttpBinding()
        {
            //<wsHttpBinding>
            //    <binding name="LoggingServiceWSHttpBinding" closeTimeout="00:01:00"
            //        openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00"
            //        maxBufferPoolSize="524288" maxReceivedMessageSize="600000">
            //        <readerQuotas maxDepth="32" maxStringContentLength="300000" maxArrayLength="16384"
            //            maxBytesPerRead="4096" maxNameTableCharCount="16384" />
            //        <reliableSession ordered="true" inactivityTimeout="00:30:00" enabled="false" />
            //        <security mode="None" />
            //    </binding>
            //</wsHttpBinding>

            WSHttpBinding binding = new WSHttpBinding()
            {
                MaxReceivedMessageSize = Configuration.MaxReceivedMessageSize,
                MaxBufferPoolSize = Configuration.MaxBufferPoolSize,
                OpenTimeout = Configuration.OpenTimeout,
                CloseTimeout = Configuration.CloseTimeout,
                ReceiveTimeout = Configuration.ReceiveTimeout,
                SendTimeout = Configuration.SendTimeout,
                ReaderQuotas = XmlDictionaryReaderQuotas.Max,
                ReliableSession =
                {
                    Enabled = Configuration.ReliableSessionEnabled,
                    InactivityTimeout = Configuration.ReliableSessionTimeout,
                    Ordered = Configuration.ReliableSessionOrdered
                },
                Security =
                {
                    Mode = SecurityMode.None
                }
            };

            return binding;
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\DiagnosticDatabase\DiagnosticDatabaseServiceClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.Wcf;
using Leet.Core.TestService;
using Leet.Core.TestService.Client;

namespace Leet.Core.TestService.Client.DiagnosticDatabase
{
    class DiagnosticDatabaseServiceClientEndpointConfigurator : ClientEndpointConfigurator<IDiagnosticDatabaseService>
    {
        protected override Uri GetEndpointUri()
        {
            return new Uri(ServiceHostUri, "/DiagnosticDatabaseService.svc");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\AvatarServices\SSRTestService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.TestService;
using Leet.Core.Wcf;
using Avatar.Services.ServerSideRenderer.Messaging;
using Leet.Core.TestService.Client.EventLog;
using System.Diagnostics;

namespace Leet.Core.TestService.Client.AvatarServices
{
    public class SSRTestService : ISSRService, IEventLogService
    {
        private IWcfProxyFactory<ISSRService> ssrProxyFactory;
        private IWcfProxyFactory<IEventLogService> eventProxyFactory;

        public SSRTestService(string serviceBaseUrl)
        {
            ssrProxyFactory = new ClientProxyFactory<ISSRService>(new SSRTestServiceClientEndpointConfigurator());
            ssrProxyFactory.Configurator.ServiceHostUri = new Uri(serviceBaseUrl);

            eventProxyFactory = new ClientProxyFactory<IEventLogService>(new EventLogClientEndpointConfigurator());
            eventProxyFactory.Configurator.ServiceHostUri = new Uri(serviceBaseUrl);
        }

        public void SendMessage(BaseMessage message)
        {
            ssrProxyFactory.Send(proxy => proxy.SendMessage(message));
        }

        public void SendMessageWithName(BaseMessage message, string messageName)
        {
            ssrProxyFactory.Send(proxy => proxy.SendMessageWithName(message, messageName));
        }

        public void SendBodyShotMessage(BaseMessage message)
        {
            ssrProxyFactory.Send(proxy => proxy.SendBodyShotMessage(message));
        }

        public void SendGamerPicMessage(BaseMessage message)
        {
            ssrProxyFactory.Send(proxy => proxy.SendGamerPicMessage(message));
        }

        public byte[] GetBodyshotDiagnosticImage(string machineName)
        {
            return ssrProxyFactory.Send<byte[]>(proxy => proxy.GetBodyshotDiagnosticImage(machineName));
        }

        public byte[] GetLargeGamerPicDiagnosticImage(string machineName)
        {
            return ssrProxyFactory.Send<byte[]>(proxy => proxy.GetLargeGamerPicDiagnosticImage(machineName));
        }

        public byte[] GetSmallGamerPicDiagnosticImage(string machineName)
        {
            return ssrProxyFactory.Send<byte[]>(proxy => proxy.GetSmallGamerPicDiagnosticImage(machineName));
        }

        public byte[] GetDiagnosticImage(string fileName, string machineName)
        {
            return ssrProxyFactory.Send<byte[]>(proxy => proxy.GetDiagnosticImage(fileName, machineName));
        }

        public void DeleteImages(string machineName)
        {
            ssrProxyFactory.Send(proxy => proxy.DeleteImages(machineName));
        }

        public void ResetImage(ulong xuid, string imageName)
        {
            ssrProxyFactory.Send(proxy => proxy.ResetImage(xuid, imageName));
        }

        public void ResetBodyShotImage(ulong xuid)
        {
            ssrProxyFactory.Send(proxy => proxy.ResetBodyShotImage(xuid));
        }

        public void ResetGamerPicImage(ulong xuid)
        {
            ssrProxyFactory.Send(proxy => proxy.ResetGamerPicImage(xuid));
        }

        public void ResetAllImages(ulong xuid)
        {
            ssrProxyFactory.Send(proxy => proxy.ResetAllImages(xuid));
        }

        public void WriteStorageImage(ulong xuid, string imageName, byte[] data)
        {
            ssrProxyFactory.Send(proxy => proxy.WriteStorageImage(xuid, imageName, data));
        }

        public void WriteBodyshotStorageImage(ulong xuid, byte[] data)
        {
            ssrProxyFactory.Send(proxy => proxy.WriteBodyshotStorageImage(xuid, data));
        }

        public void WriteSmallGamerPicStorageImage(ulong xuid, byte[] data)
        {
            ssrProxyFactory.Send(proxy => proxy.WriteSmallGamerPicStorageImage(xuid, data));
        }

        public void WriteLargeGamerPicStorageImage(ulong xuid, byte[] data)
        {
            ssrProxyFactory.Send(proxy => proxy.WriteLargeGamerPicStorageImage(xuid, data));
        }

        public byte[] GetBodyshotStorageImage(ulong xuid)
        {
            return ssrProxyFactory.Send(proxy => proxy.GetBodyshotStorageImage(xuid));
        }

        public byte[] GetLargeGamerPicStorageImage(ulong xuid)
        {
            return ssrProxyFactory.Send(proxy => proxy.GetLargeGamerPicStorageImage(xuid));
        }

        public byte[] GetSmallGamerPicStorageImage(ulong xuid)
        {
            return ssrProxyFactory.Send(proxy => proxy.GetSmallGamerPicStorageImage(xuid));
        }

        public string ReadGamercardTileSetting(ulong xuid)
        {
            return ssrProxyFactory.Send(proxy => proxy.ReadGamercardTileSetting(xuid));
        }

        public void SetGamercardTileSetting(ulong xuid, string tileString)
        {
            ssrProxyFactory.Send(proxy => proxy.SetGamercardTileSetting(xuid, tileString));
        }

        public EventLogEntry GetLatestEntryById(int eventId, string machineName)
        {
            return eventProxyFactory.Send(proxy => proxy.GetLatestEntryById(eventId, machineName));
        }

        public List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName)
        {
            return eventProxyFactory.Send(proxy => proxy.GetEntriesByIdWithinTimeSpan(eventId, numberOfSeconds, machineName));
        }

        public List<EventLogEntry> GetEntriesBySourceContainsWithinTimeSpan(string sourceContains, int numberOfSeconds, string machineName)
        {
            return eventProxyFactory.Send(proxy => proxy.GetEntriesBySourceContainsWithinTimeSpan(sourceContains, numberOfSeconds, machineName));
        }

        public List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName)
        {
            return eventProxyFactory.Send(proxy => proxy.GetMostRecentEvents(numberToRetrieve, machineName));
        }

        public List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName)
        {
            return eventProxyFactory.Send(proxy => proxy.GetEventsByTime(startTime, endTime, machineName));
        }

        public int GetQueueLength()
        {
            return ssrProxyFactory.Send(proxy => proxy.GetQueueLength());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\EventLog\EventLogClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Description;
using Leet.Core.TestService;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using Leet.Core.IoCCo;
using System.Xml;
using System.ComponentModel;
using Leet.Core.Wcf;
using System.Xml.Linq;

namespace Leet.Core.TestService.Client.EventLog
{
    public class EventLogClientEndpointConfigurator : ClientEndpointConfigurator<IEventLogService>
    {
        protected override Uri GetEndpointUri()
        {
            return new Uri(ServiceHostUri, "/EventLogService.svc");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\AvatarServices\SSRTestServiceClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.Wcf;
using Leet.Core.TestService;
using Leet.Core.TestService.Client;

namespace Leet.Core.TestService.Client.AvatarServices
{
    class SSRTestServiceClientEndpointConfigurator : ClientEndpointConfigurator<ISSRService>
    {
        protected override Uri GetEndpointUri()
        {
            return new Uri(ServiceHostUri, "/AvatarServices/SSRService.svc");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\EventLog\EventLogServiceShim.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Leet.Core.TestService;
using Leet.Core.Wcf;
using System.Diagnostics;

namespace Leet.Core.TestService.Client.EventLog
{
    public class EventLogServiceShim : IEventLogService
    {
        public EventLogServiceShim(IWcfProxyFactory<IEventLogService> factory)
        {
            if (factory == null)
            {
                throw new ArgumentNullException("factory");
            }

            Factory = factory;
        }

        public IWcfProxyFactory<IEventLogService> Factory { get; private set; }

        #region IEventLogService Members
        public EventLogEntry GetLatestEntryById(int eventId, string machineName)
        {
            return Factory.Send(proxy => proxy.GetLatestEntryById(eventId, machineName));
        }

        public List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName)
        {
            return Factory.Send(proxy => proxy.GetEntriesByIdWithinTimeSpan(eventId, numberOfSeconds, machineName));
        }

        public List<EventLogEntry> GetEntriesBySourceContainsWithinTimeSpan(string sourceContains, int numberOfSeconds, string machineName)
        {
            return Factory.Send(proxy => proxy.GetEntriesBySourceContainsWithinTimeSpan(sourceContains, numberOfSeconds, machineName));
        }

        public List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName)
        {
            return Factory.Send(proxy => proxy.GetMostRecentEvents(numberToRetrieve, machineName));
        }

        public List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName)
        {
            return Factory.Send(proxy => proxy.GetEventsByTime(startTime, endTime, machineName));
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\DiagnosticDatabase\DiagnosticDatabaseTestService.cs ===
﻿using System;
using Leet.Core.Wcf;
using Infrastructure.Test.Common.Logging;

namespace Leet.Core.TestService.Client.DiagnosticDatabase
{
    public class DiagnosticDatabaseTestService : IDiagnosticDatabaseService
    {
        private IWcfProxyFactory<IDiagnosticDatabaseService> DiagnosticDBProxyFactory;

        public DiagnosticDatabaseTestService(string serviceBaseUrl)
        {
            DiagnosticDBProxyFactory = new ClientProxyFactory<IDiagnosticDatabaseService>(new DiagnosticDatabaseServiceClientEndpointConfigurator());
            DiagnosticDBProxyFactory.Configurator.ServiceHostUri = new Uri(serviceBaseUrl);
        }

        public SqlEvent GetDiagnosticEntryByIdAndMessageText(int eventId, int timeframe, string message)
        {
            return DiagnosticDBProxyFactory.Send(proxy => proxy.GetDiagnosticEntryByIdAndMessageText(eventId, timeframe, message));
        }

        public SqlEvent GetDiagnosticEntryBySourceAndMessageText(string source, int timeframe, string message)
        {
            return DiagnosticDBProxyFactory.Send(proxy => proxy.GetDiagnosticEntryBySourceAndMessageText(source, timeframe, message));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\EventLog\EventLogServiceAccess.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using Leet.Core.Wcf;
using System.ServiceModel;
using Infrastructure.Test.Common.Settings;
using Infrastructure.Test.Common.EventLog;

namespace Leet.Core.TestService.Client.EventLog
{
    public class EventLogServiceAccess : IEventLogAccess
    {
        private string _serviceBaseUrl;
        public EventLogServiceAccess(string serviceBaseUrl)
        {
            _serviceBaseUrl = serviceBaseUrl;
        }

        private IWcfProxyFactory<IEventLogService> factory = null;
        private IWcfProxyFactory<IEventLogService> GetFactory()
        {
            if (factory == null)
            {
                factory = new ClientProxyFactory<IEventLogService>(new EventLogClientEndpointConfigurator());
                factory.Configurator.ServiceHostUri = new Uri(_serviceBaseUrl);
            }
            return factory;
        }

        private IEventLogService getService()
        {
            try
            {
                return new EventLogServiceShim(GetFactory());
            }
            catch (Exception e)
            {
                throw new CommunicationException(e.Message);
            }
        }

        public EventLogEntry GetLatestEntryById(int eventId, string machineName)
        {
            IEventLogService service = getService();
            return service.GetLatestEntryById(eventId, machineName);
        }

        public List<EventLogEntry> GetEntriesByIdWithinTimeSpan(int eventId, int numberOfSeconds, string machineName)
        {
            IEventLogService service = getService();
            return service.GetEntriesByIdWithinTimeSpan(eventId, numberOfSeconds, machineName);
        }

        public List<EventLogEntry> GetMostRecentEvents(int numberToRetrieve, string machineName)
        {
            IEventLogService service = getService();
            return service.GetMostRecentEvents(numberToRetrieve, machineName);
        }

        public List<EventLogEntry> GetEventsByTime(DateTime startTime, DateTime endTime, string machineName)
        {
            IEventLogService service = getService();
            return service.GetEventsByTime(startTime, endTime, machineName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\Logging\LoggingServiceShim.cs ===
﻿using System;
using Leet.Core.Wcf;
using Leet.Core.Diagnostics;
using System.Diagnostics;

namespace Leet.Core.TestService.Client.Logging
{
    public class LoggingServiceShim : ILoggingService
    {
        public LoggingServiceShim(IWcfProxyFactory<ILoggingService> factory)
        {
            if (factory == null)
            {
                throw new ArgumentNullException("factory");
            }

            Factory = factory;
        }

        public IWcfProxyFactory<ILoggingService> Factory { get; private set; }

        #region ILoggingService Members
        public string GetVersion()
        {
            return Factory.Send(proxy => proxy.GetVersion());
        }

        public void LogEvent(BaseEvent evt)
        {
            Factory.Send(proxy => proxy.LogEvent(evt));
        }

        public void LogEventFormattedMessage(BaseEvent evt, string formattedMessage, params object[] args)
        {
            Factory.Send(proxy => proxy.LogEventFormattedMessage(evt, formattedMessage, args));
        }

        public void LogEventException(BaseEvent evt, Exception ex)
        {
            Factory.Send(proxy => proxy.LogEventException(evt, ex));
        }

        public void LogEventExceptionFormattedMessage(BaseEvent evt, Exception ex, string formattedMessage, params object[] args)
        {
            Factory.Send(proxy => proxy.LogEventExceptionFormattedMessage(evt, ex, formattedMessage, args));
        }

        public void LogTrace(TraceLevel level, string formattedMessage, params object[] args)
        {
            Factory.Send(proxy => proxy.LogTrace(level, formattedMessage, args));
        }

        public void LogTraceException(TraceLevel level, Exception ex)
        {
            Factory.Send(proxy => proxy.LogTraceException(level, ex));
        }

        public void LogTraceExceptionFormattedMessage(TraceLevel level, Exception ex, string formattedMessage, params object[] args)
        {
            Factory.Send(proxy => proxy.LogTraceExceptionFormattedMessage(level, ex, formattedMessage, args));
        }

        public void LogTransaction(string transactionId, string transactionType, string action)
        {
            Factory.Send(proxy => proxy.LogTransaction(transactionId, transactionType, action));
        }

        public void LogTransactionFormattedMessage(string transactionId, string transactionType, string action, string formattedMessage, params object[] args)
        {
            Factory.Send(proxy => proxy.LogTransactionFormattedMessage(transactionId, transactionType, action, formattedMessage, args));
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\Logging\LoggingClientEndpointConfigurator.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Description;
using Leet.Core.TestService;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using Leet.Core.IoCCo;
using System.Xml;
using System.ComponentModel;
using Leet.Core.Wcf;
using System.Xml.Linq;
using Leet.Core.TestService.Client;

namespace Leet.Core.TestService.Client.Logging
{
    public class LoggingClientEndpointConfigurator : ClientEndpointConfigurator<ILoggingService>
    {
        protected override Uri GetEndpointUri()
        {
            return new Uri(ServiceHostUri, "/LoggingService.svc");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Leet.Core.TestService.Client")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("86df8bf1-12c6-4f8e-b42a-4c7e93db121d")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\RunTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Infrastructure.Test.RunTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("a893a349-ef8f-4e9b-840f-bf0f43718fe7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\Leet.Core.TestService.Client\Logging\ServiceLogging.cs ===
﻿using System;
using System.Diagnostics;
using System.Collections.Generic;
using Infrastructure.Test.Common.Logging;
using Leet.Core.Diagnostics;
using Leet.Core.Wcf;
using System.ServiceModel;
using Infrastructure.Test.Common.Settings;

namespace Leet.Core.TestService.Client.Logging
{
    public class ServiceLogging : ITestLogging
    {
        private Dictionary<string, Func<string>> metadata = new Dictionary<string, Func<string>>();

        private void AddMetadata(BaseEvent evt)
        {
            foreach (KeyValuePair<string, Func<string>> kvp in metadata)
            {
                evt.Metadata.Add(kvp.Key, kvp.Value());
            }
        }

        private string _serviceBaseUrl;
        public ServiceLogging(string serviceBaseUrl)
        {
            _serviceBaseUrl = serviceBaseUrl;             
        }

        #region ITestLogging Members
        public void RegisterMetadata(string name, Func<String> value)
        {
            metadata.Add(name, value);
        }

        private IWcfProxyFactory<ILoggingService> factory = null;
        private IWcfProxyFactory<ILoggingService> GetFactory()
        {
            if (factory == null)
            {
                factory = new ClientProxyFactory<ILoggingService>(new LoggingClientEndpointConfigurator());
                factory.Configurator.ServiceHostUri = new Uri(_serviceBaseUrl);
            }
            return factory;
        }

        private ILoggingService getService()
        {
            try
            {
                return new LoggingServiceShim(GetFactory());
            }
            catch (Exception e)
            {
                throw new CommunicationException(e.Message);
            }
        }

        public string GetVersion()
        {
            ILoggingService service = getService();
            return service.GetVersion();
        }

        public void LogEvent(BaseEvent evt)
        {
            ILoggingService service = getService();
            AddMetadata(evt);
            service.LogEvent(evt);
        }

        public void LogEvent(BaseEvent evt, string formattedMessage, params object[] args)
        {
            ILoggingService service = getService();
            AddMetadata(evt);
            service.LogEventFormattedMessage(evt, formattedMessage, args);
        }

        public void LogEvent(BaseEvent evt, Exception ex)
        {
            ILoggingService service = getService();
            AddMetadata(evt);
            service.LogEventException(evt, ex);
        }

        public void LogEvent(BaseEvent evt, Exception ex, string formattedMessage, params object[] args)
        {
            ILoggingService service = getService();
            AddMetadata(evt);
            service.LogEventExceptionFormattedMessage(evt, ex, formattedMessage, args);
        }

        public void LogTrace(TraceLevel level, string formattedMessage, params object[] args)
        {
            ILoggingService service = getService();
            service.LogTrace(level, formattedMessage, args);
        }

        public void LogTrace(TraceLevel level, Exception ex)
        {
            ILoggingService service = getService();
            service.LogTraceException(level, ex);
        }

        public void LogTrace(TraceLevel level, Exception ex, string formattedMessage, params object[] args)
        {
            ILoggingService service = getService();
            service.LogTraceExceptionFormattedMessage(level, ex, formattedMessage, args);
        }

        public void LogTransaction(string transactionId, string transactionType, string action)
        {
            ILoggingService service = getService();
            service.LogTransaction(transactionId, transactionType, action);
        }

        public void LogTransaction(string transactionId, string transactionType, string action, string formattedMessage, params object[] args)
        {
            ILoggingService service = getService();
            service.LogTransactionFormattedMessage(transactionId, transactionType, action, formattedMessage, args);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\infrastructure.test\RunTests\WTTInfrastructure.cs ===
﻿using System;
using System.Diagnostics;
using System.Reflection;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Infrastructure.Test.Common.Logging;
using Infrastructure.Test.Factory;

namespace Infrastructure.Test.RunTests.WTT
{
    /// <summary>
    /// Summary description for WTTInfrastructure
    /// </summary>
    [TestClass]
    public class WTTInfrastructure
    {
        public WTTInfrastructure() { }
        
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Gets the current version information from the running test assembly and then calls WTTCMD to set the correct parameter")]
        [TestProperty("Type", "Infrastructure")]
        [TestProperty("Author", "sameling")]
        [Timeout(60 * 1000)]    // 60 second timeout
        public void SetTestAutomationBuildVersionWTTParam()
        {
            FileVersionInfo assemblyFileVersion = FileVersionInfo.GetVersionInfo(
                Assembly.GetExecutingAssembly().Location);

            string formattedVersion = String.Format("{0}.{1}.{2}.{3}",
                assemblyFileVersion.FileMajorPart.ToString("00"),
                assemblyFileVersion.FileMinorPart.ToString("00"),
                assemblyFileVersion.FileBuildPart.ToString("0000"),
                assemblyFileVersion.FilePrivatePart.ToString("00"));

            SetWTTParameter("TestAutomationBuild", formattedVersion);
        }

        [TestMethod, Owner("lesbainf")]
        [Description("Gets the current version information from the ITestLogging interface (version of the service or the local binary) and then calls WTTCMD to set the correct parameter")]
        [TestProperty("Type", "Infrastructure")]
        [TestProperty("Author", "sameling")]
        [Timeout(60 * 1000)]    // 60 second timeout
        public void SetBuildVersionWTTParam()
        {
            ITestLogging logger = TestFactory.TestLogging;
            SetWTTParameter("Build", logger.GetVersion());
        }

        private void SetWTTParameter(string parameterName, string parameterValue)
        {
            // Number of milliseconds to wait for the WTT command to execute.  30 seconds should be plenty of time for WTTCMD.EXE to run
            const int waitMilliseconds = 30 * 1000;

            bool hasExited = false;
            // Launch the WTT command-line processor to set the parameter
            try
            {
                Process wttCmd = Process.Start("wttcmd.exe", String.Format("/SysInitKey /Key:{0} /Value:\"{1}\"", parameterName, parameterValue));
                hasExited = wttCmd.WaitForExit(waitMilliseconds);
                wttCmd.Close();
            }
            catch (System.IO.FileNotFoundException ex)
            {
                // WTTCMD.EXE not found on the system
                Assert.Fail("Unable to launch WTTCMD.EXE to set the '{0}' parameter to have a value of '{1}'\n\r{2}",
                    parameterName,
                    parameterValue,
                    ex.ToString());
            }
            catch (Exception ex)
            {
                Assert.Fail("Exception encountered attempting to set the '{0}' parameter to have a value of '{1}': {0}",
                    parameterName,
                    parameterValue,
                    ex.ToString());
            }

            // See if the WTTCMD.EXE process exited in a timely fashion
            Assert.IsTrue(hasExited, "The WTTCMD.EXE process did not exit within the allowed wait time.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\TestAreaBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnect.Test.Common;
using LiveConnect.Test.Data;
using LiveN.Test.Common;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class TestAreaBase
    {
        private TestContext testContextInstance; 
        private LiveConnectUtil liveConnectUtil;
        private LiveConnectTestService testService;
        private static LiveConnectDirectoryData directoryData;

        /// <summary>
        /// 
        /// </summary>
        public TestAreaBase()
        {
            if (Trace.Listeners.Count > 1)
            {
                Trace.Listeners[1].Filter = Trace.Listeners[0].Filter;
                Trace.Listeners[1].IndentLevel = Trace.Listeners[0].IndentLevel;
                Trace.Listeners[1].IndentSize = Trace.Listeners[0].IndentSize;
                Trace.Listeners[1].TraceOutputOptions = Trace.Listeners[0].TraceOutputOptions;
            }
            else
                Trace.TraceWarning("Unable to configure custom trace listening.");

            if(bool.Parse(System.Configuration.ConfigurationManager.AppSettings["IgnoreServerSSLErrors"]))
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }
            set
            {
                this.testContextInstance = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveConnectUtil LiveConnectUtil
        {
            get
            {
                if (this.liveConnectUtil == null)
                    this.liveConnectUtil = new LiveConnectUtil();
                return this.liveConnectUtil;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveConnectTestService LiveConnectTestService
        {
            get
            {
                if (this.testService == null)
                    this.testService = new LiveConnectTestService();
                return this.testService;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static LiveConnectDirectoryData DirectoryData
        {
            get
            {
                if (directoryData == null)
                    directoryData = new LiveConnectDirectoryData(System.IO.Path.Combine(Utility.CurrentDirectory, "LiveConnect-Directory-StressNet.csv"));
                return directoryData;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestInitialize]
        public void Start()
        {
            TraceEx.TraceStart("Starting test: {0}", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCleanup]
        public void Finish()
        {
            TraceEx.TraceStop("Finished test: {0}", this.testContextInstance.TestName);
            if (this.testContextInstance.CurrentTestOutcome == UnitTestOutcome.Passed)
                Trace.TraceInformation("{0} Passed!", this.testContextInstance.TestName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\LiveConnectTestFailureException.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectTestFailureException: Exception
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public LiveConnectTestFailureException(string message): base(message)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="format"></param>
        /// <param name="args"></param>
        public LiveConnectTestFailureException(string format, params object[] args): base(String.Format(format, args))
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="format"></param>
        /// <param name="args"></param>
        /// <param name="innerException"></param>
        public LiveConnectTestFailureException(Exception innerException, string format, params object[] args)
            : base(String.Format(format, args), innerException)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public LiveConnectTestFailureException(string message, Exception innerException): base(message, innerException)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\LiveAuthenticationWrapper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Configuration;
using System.Diagnostics;
using LiveConnectWeb;

using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveAuthenticationWrapper : LiveConnectWrapper
    {
        public const string BaseEndpointName = "LiveAuthentication";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNAuthInfo GetAuthInfo(ushort sNetwork, ulong xuid, string deviceId, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveAuthentication> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveAuthentication authChannel = channelFactory.CreateChannel();
                watch.Start();
                return authChannel.GetAuthInfo(sNetwork, xuid, deviceId);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetAuthInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="deviceId"></param>
        /// <param name="stsParameters"></param>
        public void RemoveAuthInfo(ushort sNetwork, ulong xuid, string deviceId, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveAuthentication> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveAuthentication authChannel = channelFactory.CreateChannel();
                watch.Start();
                authChannel.RemoveAuthInfo(sNetwork, xuid, deviceId);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("RemoveAuthInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetworkId"></param>
        /// <param name="XUID"></param>
        /// <param name="gamerTag"></param>
        /// <param name="deviceId"></param>
        /// <param name="userInfo"></param>
        /// <param name="addToDirectory"></param>
        /// <param name="visibility"></param>
        /// <param name="?"></param>
        /// <param name="stsParameters"></param>
        public void SetAuthInfo(ushort sNetworkId, ulong xuid, string gamerTag, string deviceId, SNAuthInfo userInfo, bool addToDirectory, Visibility visibility, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveAuthentication> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveAuthentication authChannel = channelFactory.CreateChannel();
                watch.Start();
                authChannel.SetAuthInfo(sNetworkId, xuid, gamerTag, deviceId, userInfo, addToDirectory, visibility);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("SetAuthInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        private ChannelFactory<ILiveAuthentication> GetChannelFactory(StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveAuthentication> channelFactory;

            if (this.AuthenticationMode == Authentication.ClientCertificate)
            {
                channelFactory = new ChannelFactory<ILiveAuthentication>("LiveAuthenticationCert");
                TraceEx.TraceVerbose("Configured {0} endpoint, using certificate authentication.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Live Connect Url: {0}.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Client Certificate: {0}, {1}.", channelFactory.Credentials.ClientCertificate.Certificate.Subject, channelFactory.Credentials.ClientCertificate.Certificate.Thumbprint);
            }
            else if (this.AuthenticationMode == Authentication.ConsoleStsToken || this.AuthenticationMode == Authentication.UserStsToken)
            {
                channelFactory = new ChannelFactory<ILiveAuthentication>("LiveAuthenticationSts");
                if (stsParameters == null)
                    throw new ApplicationException("StsTokenParameters MUST be set before making any Live Connect calls, when using STS authentication!");

                string token = null;
                if (this.AuthenticationMode == Authentication.UserStsToken)
                {
                    TraceEx.TraceVerbose("Using User token STS authentication.");
                    //set additional properties for user token
                    if (String.IsNullOrEmpty(stsParameters.PlatformType))
                        stsParameters.PlatformType = "15";   //default to mobile platform, if nothing is specified

                    if (String.IsNullOrEmpty(stsParameters.TitleVersion))
                        stsParameters.TitleVersion = "1";   //default title ID; LiveConnect shouldn't care about this...

                    token = stsToken.GenerateUserToken(stsParameters);
                }
                else
                {
                    TraceEx.TraceVerbose("Using Console token STS authentication.");
                    token = stsToken.GenerateConsoleToken(stsParameters);
                }

                channelFactory.Endpoint.Behaviors.RemoveAll<System.ServiceModel.Description.ClientCredentials>();
                channelFactory.Endpoint.Behaviors.Add(new StsClientCredentials(token));
            }
            else
            {
                TraceEx.TraceVerbose("Calling LiveConnect with no authentication (AuthenticationMode == Authentication.None)");
                channelFactory = new ChannelFactory<ILiveAuthentication>();
            }

            return channelFactory;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\LiveDirectoryWrapper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Configuration;
using System.Diagnostics;
using LiveConnectWeb;

using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveDirectoryWrapper : LiveConnectWrapper
    {
        public const string BaseEndpointName = "LiveDirectory";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNetworkInfo GetSNetworkInfo(ushort sNetwork, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                return directoryChannel.GetSNetworkInfo(sNetwork);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetSNetworkInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNetworkInfo[] GetSNetworkInfos(StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                return directoryChannel.GetSNetworkInfos();
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetSNetworkInfos completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snuid"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNUserInfo GetSNUserInfoBySNUId(ushort sNetwork, string snuid, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                return directoryChannel.GetSNUserInfoBySNUId(sNetwork, snuid);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetSNUserInfoBySNUId completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNUserInfo GetSNUserInfoByXUID(ushort sNetwork, ulong xuid, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                return directoryChannel.GetSNUserInfoByXUID(sNetwork, xuid);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetSNUserInfoByXUID completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snuids"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        public SNUserInfo[] GetSNUserInfos(ushort sNetwork, string[] snuids, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                return directoryChannel.GetSNUserInfos(sNetwork, snuids);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("GetSNUserInfos completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="stsParameters"></param>
        public void RemoveSNUserInfo(ushort sNetwork, ulong xuid, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                directoryChannel.RemoveSNUserInfo(sNetwork, xuid);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("RemoveSNUserInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="stsParameters"></param>
        public void SetSNUserInfo(ushort sNetwork, SNUserInfo userInfo, StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory = GetChannelFactory(stsParameters);
            Stopwatch watch = new Stopwatch();

            try
            {
                ILiveDirectory directoryChannel = channelFactory.CreateChannel();
                watch.Start();
                directoryChannel.SetSNUserInfo(sNetwork, userInfo);
            }
            finally
            {
                watch.Stop();
                Trace.TraceInformation("SetSNUserInfo completed in {0}ms.", watch.ElapsedMilliseconds);
                channelFactory.CloseConnection();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        private ChannelFactory<ILiveDirectory> GetChannelFactory(StsTokenParameters stsParameters)
        {
            ChannelFactory<ILiveDirectory> channelFactory;

            if (this.AuthenticationMode == Authentication.ClientCertificate)
            {
                channelFactory = new ChannelFactory<ILiveDirectory>("LiveDirectoryCert");
                TraceEx.TraceVerbose("Configured {0} endpoint, using certificate authentication.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Live Connect Url: {0}.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Client Certificate: {0}, {1}.", channelFactory.Credentials.ClientCertificate.Certificate.Subject, channelFactory.Credentials.ClientCertificate.Certificate.Thumbprint);
            }
            else if (this.AuthenticationMode == Authentication.ConsoleStsToken || this.AuthenticationMode == Authentication.UserStsToken)
            {
                channelFactory = new ChannelFactory<ILiveDirectory>("LiveDirectorySts");
                if (stsParameters == null)
                    throw new ApplicationException("LiveConnectUtil.StsTokenParameters MUST be set before making any Live Connect calls, when using STS authentication!");

                string token = null;
                if (this.AuthenticationMode == Authentication.UserStsToken)
                {
                    //if no title is specifice, use the games hub title id
                    //NOTE: this title is only provisioned for Facebook;
                    //any other social network ID will result in a security error
                    if(stsParameters.TitleId == 0)
                        stsParameters.TitleId = (uint)XboxTitle.WP7GamesHub;

                    TraceEx.TraceVerbose("Using User token STS authentication.");
                    //set additional properties for user token
                    if (String.IsNullOrEmpty(stsParameters.PlatformType))
                        stsParameters.PlatformType = "15";   //default to mobile platform, if nothing is specified

                    if (String.IsNullOrEmpty(stsParameters.TitleVersion))
                        stsParameters.TitleVersion = "1";   //default title ID; LiveConnect shouldn't care about this...

                    token = stsToken.GenerateUserToken(stsParameters);
                }
                else
                {
                    TraceEx.TraceVerbose("Using Console token STS authentication.");
                    token = stsToken.GenerateConsoleToken(stsParameters);
                }

                channelFactory.Endpoint.Behaviors.RemoveAll<System.ServiceModel.Description.ClientCredentials>();
                channelFactory.Endpoint.Behaviors.Add(new StsClientCredentials(token));
            }
            else
            {
                TraceEx.TraceVerbose("Calling LiveConnect with no authentication (AuthenticationMode == Authentication.None)");
                channelFactory = new ChannelFactory<ILiveDirectory>();
            }

            return channelFactory;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\LiveConnectWrapper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Diagnostics;
using System.Configuration;

using LiveConnectWeb;
using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public enum Authentication
    {
        None,
        ClientCertificate,
        ConsoleStsToken,
        UserStsToken,
    }

    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectWrapper
    {
        protected StsToken stsToken;

        public StsToken Token
        {
            get
            {
                return stsToken;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveConnectWrapper()
        {
            //TODO: would like to remove config data this from this layer, but not worth the effort right now
            if (bool.Parse(ConfigurationManager.AppSettings["UseCertificateAuth"]))
            {
                this.AuthenticationMode = Authentication.ClientCertificate;
            }
            else
            {
                if (bool.Parse(ConfigurationManager.AppSettings["UseUserToken"]))
                    this.AuthenticationMode = Authentication.UserStsToken;
                else
                    this.AuthenticationMode = Authentication.ConsoleStsToken;
            }

            this.stsToken = new StsToken(ConfigurationManager.AppSettings["TestCertificateSubject"]);
        }

        /// <summary>
        /// 
        /// </summary>
        public Authentication AuthenticationMode
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TChannel"></typeparam>
        /// <typeparam name="TReturn"></typeparam>
        /// <param name="code"></param>
        /// <returns></returns>
        protected TReturn CallApiWithReturnValue<TChannel, TReturn>(Func<TChannel, TReturn> code, string baseEndpointName, StsTokenParameters stsParameters)
        {
            var channelFactory = new ChannelFactory<TChannel>();
            if (this.AuthenticationMode == Authentication.ClientCertificate || (this.AuthenticationMode == Authentication.None && bool.Parse(ConfigurationManager.AppSettings["UseCertificateAuth"])))
            {
                string endpoint = baseEndpointName + "Cert";
                channelFactory = new ChannelFactory<TChannel>(endpoint);
                TraceEx.TraceVerbose("Configured {0} endpoint, using certificate authentication.", endpoint);
                TraceEx.TraceVerbose("Live Connect Url: {0}.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Client Certificate: {0}, {1}.", channelFactory.Credentials.ClientCertificate.Certificate.Subject, channelFactory.Credentials.ClientCertificate.Certificate.Thumbprint);
            }
            else if (this.AuthenticationMode == Authentication.ConsoleStsToken || this.AuthenticationMode == Authentication.UserStsToken)
            {
                string endpoint = baseEndpointName + "Sts";
                channelFactory = new ChannelFactory<TChannel>(baseEndpointName + "Sts");
                Trace.TraceInformation("Configured {0} endpoint, using STS authentication.", endpoint);
                if (stsParameters == null)
                    throw new LiveConnectTestFailureException("LiveConnectUtil.StsTokenParameters MUST be set before making any Live Connect calls, when using STS authentication!");

                string token = null;
                if (this.AuthenticationMode == Authentication.UserStsToken)
                {
                    TraceEx.TraceVerbose("Using User token STS authentication.");
                    //set additional properties for user token
                    if (String.IsNullOrEmpty(stsParameters.PlatformType))
                        stsParameters.PlatformType = "15";   //default to mobile platform, if nothing is specified

                    if (String.IsNullOrEmpty(stsParameters.TitleVersion))
                        stsParameters.TitleVersion = "1";   //default title ID; LiveConnect shouldn't care about this...

                    token = stsToken.GenerateUserToken(stsParameters);
                }
                else
                {
                    TraceEx.TraceVerbose("Using Console token STS authentication.");
                    token = stsToken.GenerateConsoleToken(stsParameters);
                }

                channelFactory.Endpoint.Behaviors.RemoveAll<System.ServiceModel.Description.ClientCredentials>();
                channelFactory.Endpoint.Behaviors.Add(new StsClientCredentials(token));
            }
            else
            {
                TraceEx.TraceVerbose("Calling LiveConnect with no authentication (AuthenticationMode == Authentication.None)");
            }

            TChannel channel = channelFactory.CreateChannel();
            bool error = true;

            try
            {
                TReturn result = code(channel);
                ((IClientChannel)channel).Close();
                error = false;
                return result;
            }
            finally
            {
                if (error && channel != null)
                {
                    ((IClientChannel)channel).Abort();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TChannel"></typeparam>
        /// <param name="code"></param>
        /// <param name="baseEndpointName"></param>
        /// <param name="stsParameters"></param>
        /// <returns></returns>
        protected void CallApi<TChannel>(Action<TChannel> code, string baseEndpointName, StsTokenParameters stsParameters)
        {
            var channelFactory = new ChannelFactory<TChannel>();
            if (this.AuthenticationMode == Authentication.ClientCertificate)
            {
                channelFactory = new ChannelFactory<TChannel>(baseEndpointName + "Cert");
                TraceEx.TraceVerbose("Configured Live Connect Authentication endpoint, using certificate authentication.");
                TraceEx.TraceVerbose("Live Connect Url: {0}.", channelFactory.Endpoint.Address.Uri);
                TraceEx.TraceVerbose("Client Certificate: {0}, {1}.", channelFactory.Credentials.ClientCertificate.Certificate.Subject, channelFactory.Credentials.ClientCertificate.Certificate.Thumbprint);
            }
            else if(this.AuthenticationMode == Authentication.ConsoleStsToken || this.AuthenticationMode == Authentication.UserStsToken)
            {
                channelFactory = new ChannelFactory<TChannel>(baseEndpointName + "Sts");
                if (stsParameters == null)
                    throw new LiveConnectTestFailureException("LiveConnectUtil.StsTokenParameters MUST be set before making any Live Connect calls, when using STS authentication!");
                
                string token = null;
                if (this.AuthenticationMode == Authentication.UserStsToken)
                {
                    //set additional properties for user token
                    if (String.IsNullOrEmpty(stsParameters.PlatformType))
                        stsParameters.PlatformType = "15";   //default to mobile platform, if nothing is specified

                    if (String.IsNullOrEmpty(stsParameters.TitleVersion))
                        stsParameters.TitleVersion = "1";   //default title ID; LiveConnect shouldn't care about this...

                    token = stsToken.GenerateUserToken(stsParameters);
                }
                else
                {
                    token = stsToken.GenerateConsoleToken(stsParameters);
                }

                channelFactory.Endpoint.Behaviors.RemoveAll<System.ServiceModel.Description.ClientCredentials>();
                channelFactory.Endpoint.Behaviors.Add(new StsClientCredentials(token));
            }
            else
            {
                TraceEx.TraceVerbose("Calling LiveConnect with no authentication (AuthenticationMode == Authentication.None)");
            }

            TChannel channel = channelFactory.CreateChannel();
            bool error = true;

            try
            {
                code(channel);
                ((IClientChannel)channel).Close();
                error = false;                
            }
            finally
            {
                if (error && channel != null)
                {
                    ((IClientChannel)channel).Abort();
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\Utility\ForceAuthenticationMode.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class ForceAuthenticationMode: IDisposable
    {
        private LiveConnectWrapper wrapperReference;
        private Authentication oldAuthMode;
        private bool disposed;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="util"></param>
        public ForceAuthenticationMode(LiveConnectWrapper wrapper, Authentication authModeToForce)
        {
            this.wrapperReference = wrapper;
            this.oldAuthMode = this.wrapperReference.AuthenticationMode;
            this.wrapperReference.AuthenticationMode = authModeToForce;
        }

        /// <summary>
        /// 
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="isDisposing"></param>
        protected void Dispose(bool isDisposing)
        {
            if (!this.disposed)
            {
                if (isDisposing)
                {
                    //restore the wrapper back to its original setting
                    this.wrapperReference.AuthenticationMode = this.oldAuthMode;
                }

                this.disposed = true;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\SocialNetworks.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public enum SocialNetworks: ushort
    {
        //NOTE: this will need to be kept in sync w/ the database bootstrap script
        WindowsLive = 1,
        Facebook = 2,
        Twitter = 3,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\XboxTitle.cs ===
﻿using System;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public enum XboxTitle: uint
    {
        Default = XboxTitle.Xbox360Dash,
        Xbox360Dash = 0xFFFE07D1,
        XboxDash = 0xFFFE0000,
        Fusion = 0xFFFE07D2,
        LiveSignup = 0xFFFE07DE,
        XDKLauncher = 0xFFFE07FF,
        XLSATTestTitle = 0xFFFF0072,
        G4WLSystemTitle = 0x585207D1,
        Halo2 = 0x4D530064,
        TexasHoldem = 0x584107F6,
        Carbon = 0x584307D1,
        CarbonCertRequestExecutable = 0x584307D3,
        CarbonSetupPackage = 0x584307D4,
        XboxOriginals_Pirates = 0x54540828,
        Facebook = 0x584807E1,
        Twitter = XboxTitle.Xbox360Dash,    //Twitter is a BDE, so its title ID is the same as the 360 dash
        LastFM = 0x584807E3,
        RenoTest = 0x584807E5,
        WP7GamesHub = 0x584D07D6,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\Utility\LiveConnectTestService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Diagnostics;

using LiveConnectWeb.Test;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectTestService
    {
        private ILiveConnectTest testChannel;

        /// <summary>
        /// 
        /// </summary>
        public ILiveConnectTest LiveConnectTest
        {
            get
            {
                if (this.testChannel == null)
                {
                    ChannelFactory<ILiveConnectTest> channelFactory = new ChannelFactory<ILiveConnectTest>("LiveConnectTest");
                    this.testChannel = channelFactory.CreateChannel();
                }

                return this.testChannel;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="titleID"></param>
        /// <returns></returns>
        public string GetStsToken(StsTokenParameters parameters)
        {
            Trace.TraceInformation("Generating console STS token for xuid0=0x{0} and Title ID=0x{1}, good for {2} minutes.", parameters.Xuid.ToString("X16"), parameters.TitleId.ToString("X8"), parameters.MinutesToExpire);
            return this.LiveConnectTest.GetSimpleStsToken(parameters.Xuid, parameters.TitleId, parameters.MachineId, parameters.MinutesToExpire);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\WCF\StsClientCredentials.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.IdentityModel.Selectors;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class StsClientCredentials: ClientCredentials
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsToken"></param>
        public StsClientCredentials(string stsToken): base()
        {
            this.StsToken = stsToken;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="other"></param>
        protected StsClientCredentials(StsClientCredentials other)
            : base(other)
        {
            this.StsToken = other.StsToken;
        }

        /// <summary>
        /// 
        /// </summary>
        public string StsToken
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override SecurityTokenManager CreateSecurityTokenManager()
        {
            return new StsTokenManager(this);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        protected override ClientCredentials CloneCore()
        {
            return new StsClientCredentials(this);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\WCF\ChannelFactoryExtensions.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public static class ChannelFactoryExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="channel"></param>
        public static void CloseConnection(this ICommunicationObject channel)
        {
            if (channel == null || channel.State != CommunicationState.Opened)
            {
                return;
            }

            try
            {
                channel.Close();
            }
            catch (CommunicationException)
            {
                channel.Abort();
            }
            catch (TimeoutException)
            {
                channel.Abort();
            }
            catch (Exception)
            {
                channel.Abort();
                throw;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\Live Connect\Utility\LiveConnectUtil.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Diagnostics;
using System.IdentityModel;
using System.IdentityModel.Tokens;
using System.Xml;
using System.IO;

using LiveConnectWeb;
using LiveN.Test.Common;
using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectUtil
    {
        public static char[] BadSnuidChars = "<>:\",\\".ToCharArray();
        private LiveConnectTestService testService;
       
        /// <summary>
        /// 
        /// </summary>
        public LiveConnectUtil()
        {
            this.LiveDirectory = new LiveDirectoryWrapper();
            this.LiveAuthentication = new LiveAuthenticationWrapper();
            InstallCertificate();
        }
        
        /// <summary>
        /// 
        /// </summary>
        public LiveDirectoryWrapper LiveDirectory
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveAuthenticationWrapper LiveAuthentication
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        protected LiveConnectTestService LiveConnectTestService
        {
            get
            {
                if (this.testService == null)
                    this.testService = new LiveConnectTestService();
                return this.testService;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        public void SetSNUserInfo(ushort sNetwork, SNUserInfo userInfo)
        {
            if(userInfo != null)
                SetSNUserInfo(sNetwork, userInfo, userInfo.XUID, Utility.GenerateRandomUInt64());
            else
                SetSNUserInfo(sNetwork, userInfo, Utility.GenerateRandomUInt64(), Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="platformType"></param>
        /// <param name="audienceUri"></param>
        /// <param name="titleId"></param>
        public void SetSNUserInfo(ushort sNetwork, SNUserInfo userInfo, string platformType, string audienceUri, uint titleId, string subject)
        {
            StsTokenParameters stsTokenParameters = new StsTokenParameters()
            {
                Xuid = userInfo.XUID,
                TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode),
                MachineId = Utility.GenerateRandomUInt64(),
                GamerTag = userInfo.GamerTag,
                                                                                PlatformType = platformType, AudienceUri = audienceUri, Subject = subject};
            if(titleId != 0)
                stsTokenParameters.TitleId = titleId;
            SetSNUserInfo(sNetwork, userInfo, stsTokenParameters);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="stsTokenXuid"></param>
        /// <param name="stsTokenMachineID"></param>
        public void SetSNUserInfo(ushort sNetwork, SNUserInfo userInfo, ulong stsTokenXuid, ulong stsTokenMachineID)
        {
            StsTokenParameters stsTokenParameters;
            if(userInfo != null)
                stsTokenParameters = new StsTokenParameters() { Xuid = stsTokenXuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode), MachineId = stsTokenMachineID, GamerTag = userInfo.GamerTag };
            else
                stsTokenParameters = new StsTokenParameters() { Xuid = stsTokenXuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode), MachineId = stsTokenMachineID, GamerTag = XboxLiveAccount.GenerateRandomGamerTag() };
            SetSNUserInfo(sNetwork, userInfo, stsTokenParameters);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="stsTokenXuid"></param>
        /// <param name="stsTokenMachineID"></param>
        /// <param name="platformType"></param>
        /// <param name="audienceUri"></param>
        /// <param name="titleId"></param>
        public void SetSNUserInfo(ushort sNetwork, SNUserInfo userInfo, StsTokenParameters stsTokenParameters)
        {
            if (userInfo != null)
            {
                Trace.TraceInformation("Calling SetSNUserInfo();");
                TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\tuserInfo.SNUserID = {1}\r\n\tuserInfo.XUID = {2}\r\n\tuserInfo.GamerTag = {3}\r\n\tuserInfo.Visibility = {4}",
                                            sNetwork,
                                            userInfo.SNUserID,
                                            userInfo.XUID.ToString("X16"),
                                            userInfo.GamerTag,
                                            userInfo.Visibility);
            }

            try
            {
                this.LiveDirectory.SetSNUserInfo(sNetwork, userInfo, stsTokenParameters);
                Trace.TraceInformation("SetSNUserInfo(); returned successfully!");
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("SetSNUserInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("SetSNUserInfo returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("SetSNUserInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("SetSNUserInfo returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! SetSNUserInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;                
            }
            catch (MessageSecurityException e)
            {
                Trace.TraceError("SetSNUserInfo returned MessageSecurityException; SOAP fault Detail: {0}", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling SetSNUserInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snUserID"></param>
        /// <returns></returns>
        public SNUserInfo GetSNUserInfoBySNUId(ushort sNetwork, string snUserID, ulong xuid)
        {
            Trace.TraceInformation("Calling GetSNUserInfoBySNUId();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\tsnUserID = {1}", sNetwork, snUserID);

            try
            {
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = xuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode) };
                SNUserInfo userInfo = this.LiveDirectory.GetSNUserInfoBySNUId(sNetwork, snUserID, stsTokenParameters);
                Trace.TraceInformation("GetSNUserInfoBySNUId(); returned successfully!");
                return userInfo;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetSNUserInfoBySNUId returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("GetSNUserInfoBySNUId returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("GetSNUserInfoBySNUId returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("GetSNUserInfoBySNUId returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! GetSNUserInfoBySNUId returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetSNUserInfoBySNUId!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <returns></returns>
        public SNUserInfo GetSNUserInfoByXUID(ushort sNetwork, ulong xuid)
        {
            return GetSNUserInfoByXUID(sNetwork, xuid, xuid);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <returns></returns>
        public SNUserInfo GetSNUserInfoByXUID(ushort sNetwork, ulong xuid, ulong stsXuid)
        {
            Trace.TraceInformation("Calling GetSNUserInfoByXUID();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\tXuid = {1}", sNetwork, xuid.ToString("X16"));

            try
            {
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = stsXuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode) };
                SNUserInfo userInfo = this.LiveDirectory.GetSNUserInfoByXUID(sNetwork, xuid, stsTokenParameters);
                Trace.TraceInformation("GetSNUserInfoByXUID(); returned successfully!");
                return userInfo;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetSNUserInfoByXUID returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("GetSNUserInfoByXUID returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("GetSNUserInfoByXUID returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! GetSNUserInfoByXUID returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetSNUserInfoByXUID!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <returns></returns>
        public SNetworkInfo[] GetSNetworkInfos()
        {
            Trace.TraceInformation("Calling GetSNetworkInfos();");
            
            try
            {
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), TitleId = SocialNetworkIdToXboxTitleId(GetRandomSocialNetwork(), this.LiveDirectory.AuthenticationMode) };
                SNetworkInfo[] networkInfos = this.LiveDirectory.GetSNetworkInfos(stsTokenParameters);
                Trace.TraceInformation("GetSNetworkInfos(); returned successfully!");
                return networkInfos;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetSNetworkInfos returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("GetSNetworkInfos returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetSNetworkInfos!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <returns></returns>
        public SNetworkInfo GetSNetworkInfo(ushort sNetwork)
        {
            Trace.TraceInformation("Calling GetSNetworkInfo();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}", sNetwork);

            try
            {
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), TitleId = SocialNetworkIdToXboxTitleId(GetRandomSocialNetwork(), this.LiveDirectory.AuthenticationMode) };
                SNetworkInfo networkInfo = this.LiveDirectory.GetSNetworkInfo(sNetwork, stsTokenParameters);
                Trace.TraceInformation("GetSNetworkInfo(); returned successfully!");
                return networkInfo;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetSNetworkInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("GetSNetworkInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("GetSNetworkInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetSNetworkInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// when using STS with this API, the xuid is NOT checked
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snUserIDs"></param>
        /// <returns></returns>
        public SNUserInfo[] GetSNUserInfos(ushort sNetwork, string[] snUserIDs)
        {
            StsTokenParameters tokenParameters = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode) };
            return GetSNUserInfos(sNetwork, snUserIDs, tokenParameters);
        }

        /// <summary>
        /// when using STS with this API, the xuid is NOT checked
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snUserIDs"></param>
        /// <returns></returns>
        public SNUserInfo[] GetSNUserInfos(ushort sNetwork, string[] snUserIDs, string platformType, string audienceUri, uint titleId, string subject)
        {
            StsTokenParameters tokenParameters = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), PlatformType = platformType, AudienceUri = audienceUri, TitleId = titleId, 
                                                                            Subject = subject};
            return GetSNUserInfos(sNetwork, snUserIDs, tokenParameters);
        }

        /// <summary>
        /// when using STS with this API, the xuid is NOT checked
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="snUserIDs"></param>
        /// <returns></returns>
        public SNUserInfo[] GetSNUserInfos(ushort sNetwork, string[] snUserIDs, StsTokenParameters tokenParameters)
        {
            if(snUserIDs != null && snUserIDs.Length > 0)
            {
                Trace.TraceInformation("Calling GetSNUserInfos();");
                TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\tsnUserIDs = {1}", sNetwork, Utility.ArrayToString(snUserIDs));
            }

            try
            {
                //NOTE: when using STS with this API, the xuid is NOT checked
                SNUserInfo[] userInfos = this.LiveDirectory.GetSNUserInfos(sNetwork, snUserIDs, tokenParameters);
                Trace.TraceInformation("GetSNUserInfos(); returned successfully!");
                return userInfos;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetSNUserInfos returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("GetSNUserInfos returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("GetSNUserInfos returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("GetSNUserInfos returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! GetSNUserInfos returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetSNUserInfos!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        public void RemoveSNUserInfo(ushort sNetwork, ulong xuid)
        {
            RemoveSNUserInfo(sNetwork, xuid, xuid, Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="stsTokenXuid"></param>
        /// <param name="stsTokenMachineID"></param>
        public void RemoveSNUserInfo(ushort sNetwork, ulong xuid, ulong stsTokenXuid, ulong stsTokenMachineID)
        {
            Trace.TraceInformation("Calling RemoveSNUserInfo();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\txuid = {1}", sNetwork, xuid);

            try
            {
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = stsTokenXuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveDirectory.AuthenticationMode), MachineId = stsTokenMachineID };
                this.LiveDirectory.RemoveSNUserInfo(sNetwork, xuid, stsTokenParameters);
                Trace.TraceInformation("RemoveSNUserInfo(); returned successfully!");
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("RemoveSNUserInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("RemoveSNUserInfo returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("RemoveSNUserInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! RemoveSNUserInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling RemoveSNUserInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="authInfo"></param>
        /// <param name="deviceId"></param>
        /// <param name="addToDirectory"></param>
        public void SetAuthInfo(ushort sNetwork, SNUserInfo userInfo, SNAuthInfo authInfo, string deviceId, bool addToDirectory)
        {
            SetAuthInfo(sNetwork, userInfo, authInfo, deviceId, addToDirectory, userInfo.XUID, Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="userInfo"></param>
        /// <param name="authInfo"></param>
        /// <param name="deviceId"></param>
        /// <param name="addToDirectory"></param>
        public void SetAuthInfo(ushort sNetwork, SNUserInfo userInfo, SNAuthInfo authInfo, string deviceId, bool addToDirectory, ulong stsTokenXuid, ulong stsTokenMachineID)
        {
            Trace.TraceInformation("Calling SetAuthInfo();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\tSNUserInfo.SNUserID = {1}\r\n\tSNUserIfno.XUID = {2}\r\n\tSNUserInfo.GamerTag = {3}\r\n\tSNUserInfo.Visibility = {4}\r\n\tSNAuthInfo.SNUserID = {5}\r\n\tSNAuthInfo.Token = {6}\r\n\tdeviceId = {7}\r\n\taddToDirectory = {8}",
                                        sNetwork,
                                        userInfo.SNUserID,
                                        userInfo.XUID,
                                        userInfo.GamerTag,
                                        userInfo.Visibility,
                                        authInfo.SNUserID,
                                        authInfo.Token,
                                        deviceId,
                                        addToDirectory);

            try
            {
                ulong machineId;
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = stsTokenXuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveAuthentication.AuthenticationMode), MachineId = stsTokenMachineID };
                if (ulong.TryParse(deviceId, out machineId))
                    stsTokenParameters.MachineId = machineId;
                this.LiveAuthentication.SetAuthInfo(sNetwork, userInfo.XUID, userInfo.GamerTag, deviceId, authInfo, addToDirectory, userInfo.Visibility, stsTokenParameters);
                Trace.TraceInformation("SetAuthInfo(); returned successfully!");
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("SetAuthInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("SetAuthInfo returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("SetAuthInfo returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("SetAuthInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! SetAuthInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling SetAuthInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        public SNAuthInfo GetAuthInfo(ushort sNetwork, ulong xuid, string deviceId)
        {
            Trace.TraceInformation("Calling GetAuthInfo();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\txuid = {1}\r\n\tdeviceId = {2}", sNetwork, xuid, deviceId);

            try
            {
                ulong machineId;
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = xuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveAuthentication.AuthenticationMode) };
                if (ulong.TryParse(deviceId, out machineId))
                    stsTokenParameters.MachineId = machineId;
                SNAuthInfo authInfo = this.LiveAuthentication.GetAuthInfo(sNetwork, xuid, deviceId, stsTokenParameters);
                Trace.TraceInformation("GetAuthInfo(); returned successfully!");
                return authInfo;
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("GetAuthInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("GetAuthInfo returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("GetAuthInfo returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("GetAuthInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! GetAuthInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling GetAuthInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="xuid"></param>
        /// <param name="deviceId"></param>
        public void RemoveAuthInfo(ushort sNetwork, ulong xuid, string deviceId)
        {
            Trace.TraceInformation("Calling RemoveAuthInfo();");
            TraceEx.TraceVerbose("Parameters:\r\n\tsNetwork = {0}\r\n\txuid = {1}\r\n\tdeviceId = {2}", sNetwork, xuid, deviceId);

            try
            {
                ulong machineId;
                StsTokenParameters stsTokenParameters = new StsTokenParameters() { Xuid = xuid, TitleId = SocialNetworkIdToXboxTitleId(sNetwork, this.LiveAuthentication.AuthenticationMode) };
                if (ulong.TryParse(deviceId, out machineId))
                    stsTokenParameters.MachineId = machineId;
                this.LiveAuthentication.RemoveAuthInfo(sNetwork, xuid, deviceId, stsTokenParameters);
                Trace.TraceInformation("RemoveAuthInfo(); returned successfully!");
            }
            catch (FaultException<SecurityAccessDeniedException> e)
            {
                Trace.TraceError("RemoveAuthInfo returned SecurityAccessDeniedException; STS or cert auth failed; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentException> e)
            {
                Trace.TraceError("RemoveAuthInfo returned ArgumentException; invalid parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentNullException> e)
            {
                Trace.TraceError("RemoveAuthInfo returned ArgumentNullException; null parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException<ArgumentOutOfRangeException> e)
            {
                Trace.TraceError("RemoveAuthInfo returned ArgumentOutOfRangeException; out-of-range parameter(s) sent; SOAP fault Detail: {0}", e.Detail.Message);
                throw;
            }
            catch (FaultException e)
            {
                Trace.TraceError("Bug! RemoveAuthInfo returned unknown Fault Exception! {0}. An unexpected, internal error occurred or the test case may need to be updated to expect other exception types.", e.Message);
                throw;
            }
            catch (Exception e)
            {
                Trace.TraceError("Unexpected exception occurred while calling RemoveAuthInfo!  This could be a timeout, communication issue, etc.  Check the availability of the service: {0}", e.ToString());
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="snUserID"></param>
        /// <param name="xuid"></param>
        /// <param name="gamerTag"></param>
        /// <param name="visibility"></param>
        /// <returns></returns>
        public static SNUserInfo CreateSNUserInfo(string snUserID, ulong xuid, string gamerTag, Visibility visibility)
        {
            return new SNUserInfo() { SNUserID = snUserID, XUID = xuid, GamerTag = gamerTag, Visibility = visibility };
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static SNUserInfo GenerateRandomSNUserInfo()
        {
            string snuid = "LCTest-" + Utility.GenerateRandomString(20, BadSnuidChars);
            return CreateSNUserInfo(snuid, Utility.GenerateRandomUInt64(), XboxLiveAccount.GenerateRandomGamerTag(), Visibility.Everyone);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        /// <param name="directoryWrapper"></param>
        public static void CompareSNUserInfo(SNUserInfo expected, SNUserInfo actual, LiveConnectWrapper directoryWrapper)
        {
            CompareSNUserInfo(expected, actual, directoryWrapper.AuthenticationMode == Authentication.UserStsToken);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        public static void CompareSNUserInfo(SNUserInfo expected, SNUserInfo actual)
        {
            CompareSNUserInfo(expected, actual, false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        public static void CompareSNUserInfo(SNUserInfo expected, SNUserInfo actual, bool expectZeroedXuids)
        {
            try
            {
                Trace.TraceInformation("Verifying expected/actual SNUserInfo...");
                if(actual == null)
                    throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expected SNUserID {0}, but the service returned no results (null).", expected.SNUserID);
                if (expected.SNUserID != actual.SNUserID)
                    throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expected SNUserID {0}, but got {1}.", expected.SNUserID, actual.SNUserID);
                if (expected.GamerTag != actual.GamerTag)
                    throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expected GamerTag {0}, but got {1}.", expected.GamerTag, actual.GamerTag);

                if (expectZeroedXuids)
                {
                    if(actual.XUID != 0)
                        throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expecting XUID to be 0 (user token case), but got {1}.", expected.XUID, actual.XUID);
                }
                else
                {
                    if (expected.XUID != actual.XUID)
                        throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expected XUID {0}, but got {1}.", expected.XUID, actual.XUID);
                }

                if (expected.Visibility != actual.Visibility)
                    throw new LiveConnectTestFailureException("SNUserInfo objects are not equal!  Expected Visibility {0}, but got {1}.", expected.Visibility, actual.Visibility);
                Trace.TraceInformation("Successfully verified expected/actual SNUserInfos!");
            }
            catch
            {
                Trace.TraceError("Expected SNUserInfo:\r\n{0}\r\n\r\nActual SNUserInfo:\r\n{1}", expected, actual);
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        public static void CompareSNUserInfo(SNUserInfo[] expected, SNUserInfo[] actual)
        {
            CompareSNUserInfo(expected, actual, false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        /// <param name="directoryWrapper"></param>
        public static void CompareSNUserInfo(SNUserInfo[] expected, SNUserInfo[] actual, LiveConnectWrapper directoryWrapper)
        {
            CompareSNUserInfo(expected, actual, directoryWrapper.AuthenticationMode == Authentication.UserStsToken);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        /// <param name="expectZeroedXuids"></param>
        public static void CompareSNUserInfo(SNUserInfo[] expected, SNUserInfo[] actual, bool expectZeroedXuids)
        {
            try
            {
                if (expected.Length != actual.Length)
                    throw new LiveConnectTestFailureException("Expected to compare {0} SNUserInfos, but only have {1}.", expected.Length, actual.Length);

                for (int i = 0; i < expected.Length; i++)
                {
                    SNUserInfo findUser = actual.FirstOrDefault<SNUserInfo>(s => (expectZeroedXuids || s.XUID == expected[i].XUID) && s.SNUserID == expected[i].SNUserID);
                    if (findUser == null)
                        throw new LiveConnectTestFailureException("Unable to find xuid {0} / SNUserId {1} in actual results!", expected[i].XUID, expected[i].SNUserID);
                    CompareSNUserInfo(expected[i], findUser, expectZeroedXuids);
                }
            }
            catch
            {
                Trace.TraceError("Expected SNUserInfo[]:\r\n{0}\r\n\r\nActual SNUserInfo[]:\r\n{1}", Utility.ArrayToString(expected, "\r\n\r\n"), Utility.ArrayToString(actual, "\r\n\r\n"));
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        public static void CompareSNAuthInfo(SNAuthInfo expected, SNAuthInfo actual)
        {
            try
            {
                Trace.TraceInformation("Verifying expected/actual SNAuthInfo...");
                if (expected.SNUserID != actual.SNUserID)
                    throw new LiveConnectTestFailureException("SNAuthInfo objects are not equal!  Expected SNUserID {0}, but got {1}.", expected.SNUserID, actual.SNUserID);
                if (expected.Token != actual.Token)
                    throw new LiveConnectTestFailureException("SNAuthInfo objects are not equal!  Expected Token {0}, but got {1}.", expected.Token, actual.Token);                
                Trace.TraceInformation("Successfully verified expected/actual SNUserInfos!");
            }
            catch
            {
                Trace.TraceError("Expected SNAuthInfo:\r\n{0}\r\n\r\nActual SNAuthInfo:\r\n{1}", expected, actual);
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetworkId"></param>
        /// <returns></returns>
        public static uint SocialNetworkIdToXboxTitleId(ushort sNetworkId, Authentication authMode)
        {
            if (sNetworkId == 2)
            {
                if (authMode == Authentication.UserStsToken)
                {
                    //return the games hub title ID when user tokens are provided
                    return (uint)XboxTitle.WP7GamesHub;
                }

                return (uint)XboxTitle.Facebook;
            }

            if (sNetworkId == 3)
            {
                return (uint)XboxTitle.Twitter;
            }

            return (uint)XboxTitle.WP7GamesHub;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ushort GetRandomSocialNetwork()
        {
            Array values = Enum.GetValues(typeof(SocialNetworks));
            //TODO: this currently excludes Windows Live Spaces (ID=1)
            return (ushort)values.GetValue(Utility.GenerateRandomNumber(1, values.Length));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        /// <param name="sNetwork"></param>
        /// <returns></returns>
        public List<SNUserInfo> PublishUsersToDirectory(int count)
        {
            return PublishUsersToDirectory(count, GetRandomSocialNetwork());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        /// <param name="sNetwork"></param>
        /// <returns></returns>
        public List<SNUserInfo> PublishUsersToDirectory(int count, ushort sNetwork)
        {
            List<SNUserInfo> publishedUsers;
            return PublishUsersToDirectory(count, sNetwork, 1, 1, out publishedUsers);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        /// <param name="sNetwork"></param>
        /// <param name="percentVisible"></param>
        /// <returns></returns>
        public List<SNUserInfo> PublishUsersToDirectory(int count, ushort sNetwork, double percentInDirectory, double percentVisible, out List<SNUserInfo> publishedUsers)
        {
            List<SNUserInfo> users = new List<SNUserInfo>(count);
            publishedUsers = new List<SNUserInfo>(count);
            int numberToPublish = (int)(count * percentInDirectory);

            for (int i = 1; i <= count; i++)
            {
                try
                {
                    SNUserInfo snUser = GenerateRandomSNUserInfo();

                    if ((i / (double)count) <= percentInDirectory)
                    {
                        if ((i / (double)numberToPublish) > percentVisible)
                        {
                            snUser.Visibility = Visibility.Me;
                        }

                        SetSNUserInfo(sNetwork, snUser);
                        publishedUsers.Add(snUser);
                    }

                    users.Add(snUser);
                }
                catch (Exception e)
                {
                    throw new LiveConnectTestFailureException(e, "An error occurred while publishing {0}, random users to the Live Connect Directory.", count);
                }
            }

            return users;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sNetwork"></param>
        /// <param name="info"></param>
        public void VerifyGamerTag(ushort sNetwork, SNUserInfo expectedUserInfo)
        {
            int attempts = 1;
            SNUserInfo userInfo = null;

            do
            {
                userInfo = this.LiveDirectory.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID, new StsTokenParameters() { Xuid = expectedUserInfo.XUID });
                if (expectedUserInfo.GamerTag.Equals(userInfo.GamerTag))
                {
                    Trace.TraceInformation("Successfully verified that the user's gamertag is {0}; took {1} attempt(s).", expectedUserInfo.GamerTag, attempts);
                    return;
                }
            }
            while (attempts++ < 5);

            throw new LiveConnectTestFailureException("Unable to verify gamertag change ({0} -> {1}) after 5 attempts, for xuid {2}.", userInfo.GamerTag, expectedUserInfo.GamerTag, expectedUserInfo.XUID);
        }

        /// <summary>
        /// 
        /// </summary>
        public static void InstallCertificate()
        {
            InstallCertificate(false);
        }

        /// <summary>
        /// 
        /// </summary>
        public static void InstallCertificate(bool selfSignedCertificate)
        {
            string testCertPath;
            if(selfSignedCertificate)
                testCertPath = Path.Combine(Utility.CurrentDirectory, ConfigurationManager.AppSettings["SelfSignedTestCertificate"]);
            else
                testCertPath = Path.Combine(Utility.CurrentDirectory, ConfigurationManager.AppSettings["TestCertificate"]);

            if (!File.Exists(testCertPath))
                throw new LiveConnectTestFailureException("Unable to find test certificate, required for mutual SSL, at: {0}", testCertPath);

            X509Certificate2 testCert = new X509Certificate2(testCertPath, System.Configuration.ConfigurationManager.AppSettings["TestCertificatePassword"], X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet);
            X509Store localMachineMy = new X509Store(StoreName.My, StoreLocation.LocalMachine);

            try
            {
                localMachineMy.Open(OpenFlags.ReadWrite);
                X509Certificate2Collection certs = localMachineMy.Certificates.Find(X509FindType.FindByThumbprint, testCert.Thumbprint, false);
                if (certs.Count == 0)
                {
                    Trace.TraceInformation("Required test certificate not found; installing CN={0} to LOCAL_MACHINE\\My", testCert.Subject);
                    localMachineMy.Add(testCert);
                    Trace.TraceInformation("Successfully installed test certificate for mutual SSL.");
                }
                else
                    Trace.TraceInformation("Verified that the expected test certificate, CN={0}, is installed, with private key, in LOCAL_MACHINE\\My", testCert.Subject);
            }
            catch (Exception e)
            {
                throw new LiveConnectTestFailureException("Error enumerating or adding required test certificate to LOCAL_MACHINE\\My.", e);
            }
            finally
            {
                if (localMachineMy != null)
                    localMachineMy.Close();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\WCF\StsTokenManager.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.IdentityModel;
using System.IdentityModel.Selectors;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class StsTokenManager : ClientCredentialsSecurityTokenManager
    {
        StsClientCredentials stsCreds;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsCreds"></param>
        public StsTokenManager(StsClientCredentials stsCreds): base(stsCreds)
        {
            this.stsCreds = stsCreds;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tokenRequirement"></param>
        /// <returns></returns>
        public override SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement)
        {
            return new StsTokenProvider(this.stsCreds.StsToken);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tokenRequirement"></param>
        /// <param name="outOfBandTokenResolver"></param>
        /// <returns></returns>
        public override SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, out SecurityTokenResolver outOfBandTokenResolver)
        {
            return base.CreateSecurityTokenAuthenticator(tokenRequirement, out outOfBandTokenResolver);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="version"></param>
        /// <returns></returns>
        public override SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version)
        {
            //return new System.IdentityModel.Tokens.SamlSerializer();
            return base.CreateSecurityTokenSerializer(version);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveAuthentication\GetAuthInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetAuthInfo API
    /// </summary>
    [TestClass]
    public class GetAuthInfo : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetAuthInfo API.")]
        public void GetAuthInfo_BVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            SNAuthInfo expectedAuthInfo = new SNAuthInfo() { SNUserID = expectedUserInfo.SNUserID, Token = Utility.GenerateRandomString() };
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            string deviceId = Utility.GenerateRandomUInt64().ToString();

            //Don't publish to everyone
            this.LiveConnectUtil.SetAuthInfo(sNetwork, expectedUserInfo, expectedAuthInfo, deviceId, false);

            SNAuthInfo actualAuthInfo = this.LiveConnectUtil.GetAuthInfo(sNetwork, expectedUserInfo.XUID, deviceId);
            LiveConnectUtil.CompareSNAuthInfo(expectedAuthInfo, actualAuthInfo);

            //validate that the user was also published to the directory...
            SNUserInfo actualUserInfo = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID);
            expectedUserInfo.Visibility = Visibility.Me;    //since we didn't want to publish to everyone, adjust visibility
            LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualUserInfo);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveAuthentication\RemoveAuthInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the RemoveAuthInfo API
    /// </summary>
    [TestClass]
    public class RemoveAuthInfo : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect RemoveAuthInfo API.")]
        public void RemoveAuthInfo_BVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            SNAuthInfo expectedAuthInfo = new SNAuthInfo() { SNUserID = expectedUserInfo.SNUserID, Token = Utility.GenerateRandomString() };
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            string deviceId = Utility.GenerateRandomUInt64().ToString();

            this.LiveConnectUtil.SetAuthInfo(sNetwork, expectedUserInfo, expectedAuthInfo, deviceId, true);

            SNAuthInfo actualAuthInfo = this.LiveConnectUtil.GetAuthInfo(sNetwork, expectedUserInfo.XUID, deviceId);
            LiveConnectUtil.CompareSNAuthInfo(expectedAuthInfo, actualAuthInfo);

            //validate that the user was also published to the directory...
            SNUserInfo actualUserInfo = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID);
            LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualUserInfo);

            this.LiveConnectUtil.RemoveAuthInfo(sNetwork, expectedUserInfo.XUID, deviceId);

            actualAuthInfo = this.LiveConnectUtil.GetAuthInfo(sNetwork, expectedUserInfo.XUID, deviceId);
            Assert.IsNull(actualAuthInfo, "Expected GetAuthInfo to return null after callng RemoveAuthInfo!");

            //validate that the user still remains in the directory though.
            actualUserInfo = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID);
            LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualUserInfo);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Data\LiveConnectDirectoryData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using LiveConnectWeb;

namespace LiveConnect.Test.Data
{
    /// <summary>
    /// 
    /// </summary>
    public class DirectoryDataRow
    {
        /// <summary>
        /// 
        /// </summary>
        public ushort SNetworkID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public ulong Xuid
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string SNUserId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string GamerTag
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public Visibility Visibility
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastAccessedTime
        {
            get;
            set;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectDirectoryData: IDisposable
    {
        private StreamReader fileReader;
        private object syncLock = new object();
        private bool disposed;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        public LiveConnectDirectoryData(string csvPath)
            : this(csvPath, 1)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        /// <param name="offset"></param>
        public LiveConnectDirectoryData(string csvPath, int offset)
        {
            this.CsvPath = csvPath;
            this.Offset = offset;
        }

        /// <summary>
        /// 
        /// </summary>
        public string CsvPath
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Offset
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        private StreamReader FileReader
        {
            get
            {
                if (this.fileReader == null)
                {
                    lock (this.syncLock)
                    {
                        this.fileReader = new StreamReader(new FileStream(this.CsvPath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024));
                        //seek to the desired offset
                        int i = 0;
                        while (i < this.Offset && !this.fileReader.EndOfStream)
                        {
                            this.fileReader.ReadLine();
                            i++;
                        }
                    }
                }

                return this.fileReader;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public DirectoryDataRow GetNextRow()
        {
            string line = String.Empty;

            lock (syncLock)
            {
                if (this.FileReader.EndOfStream)
                {
                    //throw new ApplicationException("No more Directory data to read; end of file reached!");
                    //auto reset to the beginning of the file
                    this.Offset = 0;
                    this.FileReader.BaseStream.Seek(0, SeekOrigin.Begin);
                }

                line = this.FileReader.ReadLine();
            }

            string[] parts = line.Split('\t');

            ushort sNetworkId = ushort.Parse(parts[0]);
            ulong xuid = (ulong)long.Parse(parts[1]);
            string userId = parts[2];
            string gamerTag = parts[3];
            Visibility visibility = (Visibility)int.Parse(parts[4]);
            DateTime lastAccessed = DateTime.Parse(parts[5]);

            return new DirectoryDataRow() { SNetworkID = sNetworkId, Xuid = xuid, SNUserId = userId, GamerTag = gamerTag, Visibility = visibility, LastAccessedTime = lastAccessed };
        }

        /// <summary>
        /// 
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="disposing"></param>
        protected void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    if (this.fileReader != null)
                        this.fileReader.Close();
                }
                this.disposed = true;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Common\WCF\StsTokenProvider.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IdentityModel;
using System.IdentityModel.Selectors;
using System.IdentityModel.Tokens;
using System.Xml;

namespace LiveConnect.Test.Common
{
    /// <summary>
    /// 
    /// </summary>
    public class StsTokenProvider: SecurityTokenProvider
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsToken"></param>
        public StsTokenProvider(string stsToken)
        {
            this.StsToken = stsToken;
        }

        /// <summary>
        /// 
        /// </summary>
        public string StsToken
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="timeout"></param>
        /// <returns></returns>
        protected override SecurityToken GetTokenCore(TimeSpan timeout)
        {
            XmlDocument samlXml = new XmlDocument();

            try
            {
                samlXml.LoadXml(this.StsToken);
            }
            catch (XmlException e)
            {
                throw new LiveConnectTestFailureException("the specified STS token is invalid Xml.", e);
            }
            
            SecurityToken securityToken = new GenericXmlSecurityToken(samlXml.DocumentElement, null, DateTime.MinValue, DateTime.MaxValue, null, null, null);
            return securityToken;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\GetSNetworkInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetSNetworkInfo API
    /// </summary>
    [TestClass]
    public class GetSNetworkInfo : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNetworkInfo API.")]
        public void GetSNetworkInfo_BVT()
        {
            SNetworkInfo network = this.LiveConnectUtil.GetSNetworkInfo((ushort)SocialNetworks.Facebook);
            TraceEx.TraceVerbose(network.ToString());
            Assert.IsNotNull(network, "Expected GetSNetworkInfo to return a record for Facebook!");
            Assert.AreEqual<string>("Facebook", network.Description, "Expected network description to be \"Facebook\", but got {0}.", network.Description);
            Assert.AreEqual<ushort>((ushort)SocialNetworks.Facebook, (ushort)network.Id, "Expected Facebook ID to be {0}, but got {1}.", (ushort)SocialNetworks.Facebook, network.Id);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\GetSNUserInfoByXUID.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ServiceModel;
using System.ServiceModel.Security;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetSNUserInfoByXUID API
    /// </summary>
    [TestClass]
    public class GetSNUserInfoByXUID : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNUserInfoByXUID API.")]
        public void GetSNUserInfoByXUID_BVT()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNUserInfoByXUID API, that uses the special-case inputs that the Twitter app sends.  QFE BVT.")]
        public void GetSNUserInfoByXUID_TwitterBVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            expectedUserInfo.XUID = 0;  //Twitter/Lua can't deal with ulongs, so the app sends up 0.  The actual user Xuid is plucked from the STS token
            ulong stsTokenXuid = Utility.GenerateRandomUInt64();
            ulong stsTokenMachinePuid = Utility.GenerateRandomUInt64();
            ushort sNetwork = (ushort)SocialNetworks.Twitter;

            //these calls NEED to use STS auth, as it's a key part of the special-case stuff that Twitter does
            using (ForceAuthenticationMode forcedAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, expectedUserInfo, stsTokenXuid, stsTokenMachinePuid);
                SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID, stsTokenXuid);
                //reset expected to the value in the token
                expectedUserInfo.XUID = stsTokenXuid;
                LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualSnUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong network ID.")]
        public void P_GetSNUserInfoByXUID_WrongSocialNetwork()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID((ushort)SocialNetworks.Twitter, snUser.XUID);
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoByXUID to return null, since the social network ID doesn't match.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong xuid.")]
        public void P_GetSNUserInfoByXUID_WrongSnuid()
        {
            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(LiveConnectUtil.GetRandomSocialNetwork(), Utility.GenerateRandomUInt64());
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoByXUID to return null, since the snuid doesn't match.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong xuid, but the query is for a visible snuid.")]
        public void P_GetSNUserInfoByXUID_WrongXuidButVisible()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a min xuid.")]
        public void P_GetSNUserInfoByXUID_MinXuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.XUID = 1;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a max xuid.")]
        public void P_GetSNUserInfoByXUID_MaxXuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.XUID = ulong.MaxValue;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong xuid, but the query is for a non-visible snuid.")]
        public void N_GetSNUserInfoByXUID_WrongXuidButNotVisible()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.Visibility = Visibility.Me;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, snUser.XUID, Utility.GenerateRandomUInt64());
                Assert.IsNull(actualSnUser, "Expected GetSNUserInfoByXUID to return null, since the xuid doesn't match.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using an unauthorized network ID.")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfoByXUID_UnauthorizedSocialNetwork()
        {
            //note, this will only work with cert-based auth, as an STS token will fail Title validation
            //currently only have permissions on 1,2,3, not 0
            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ClientCertificate))
            {
                this.LiveConnectUtil.GetSNUserInfoByXUID(0, Utility.GenerateRandomUInt64());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a xuid set to zero.")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_GetSNUserInfoByXUID_ZeroXuid()
        {
            this.LiveConnectUtil.GetSNUserInfoByXUID(LiveConnectUtil.GetRandomSocialNetwork(), 0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\GetSNUserInfos.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnectWeb;
using LiveN.Test.Common;
using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;
using LiveConnect.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetSNUserInfos API
    /// </summary>
    [TestClass]
    public class GetSNUserInfos : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNUserInfos API.")]
        public void GetSNUserInfos_BVT()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected = LiveConnectUtil.PublishUsersToDirectory(3, sNetwork);

            SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            LiveConnectUtil.CompareSNUserInfo(expected.ToArray(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("Verifies that an updated gamertag, in the user token, is detected and updated in the db.")]
        public void GetSNUserInfos_WP7_GamerTagRefreshBVT()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;  //Games Hub is only allowed to touch FB data
            List<SNUserInfo> expected = LiveConnectUtil.PublishUsersToDirectory(3, sNetwork);
            //skip the first element; we don't need the caller to query themselves...
            SNUserInfo userToChange = expected[0];
            expected = expected.Skip<SNUserInfo>(1).ToList<SNUserInfo>();

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                string newGamerTag = XboxLiveAccount.GenerateRandomGamerTag();
                StsTokenParameters tokenParameters = new StsTokenParameters() { Xuid = userToChange.XUID, GamerTag = newGamerTag, TitleId = (uint)XboxTitle.WP7GamesHub };

                Trace.TraceInformation("Simulating gamer tag change from {0} -> {1}...", userToChange.GamerTag, newGamerTag);                
                SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), tokenParameters);
                LiveConnectUtil.CompareSNUserInfo(expected.Where<SNUserInfo>(sn => sn.Visibility == Visibility.Everyone).ToArray<SNUserInfo>(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
                
                //verify that the db was updated
                userToChange.GamerTag = newGamerTag;
                LiveConnectUtil.VerifyGamerTag(sNetwork, userToChange);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Avg. case for facebook friend lookup.")]
        public void P_GetSNUserInfos_FBAvgFriendList()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected;
            //10% of my friends are actually in the directory, of those, 50% are public
            List<SNUserInfo> allUsers = LiveConnectUtil.PublishUsersToDirectory(150, sNetwork, 0.1F, 0.5F, out expected);

            SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, allUsers.ConvertAll<string>(user => user.SNUserID).ToArray());
            LiveConnectUtil.CompareSNUserInfo(expected.Where<SNUserInfo>(sn => sn.Visibility == Visibility.Everyone).ToArray<SNUserInfo>(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
        }


        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Max friend list lookup (1K), from the Peoples Hub.")]
        public void P_GetSNUserInfos_MaxLookup()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected;
            //10% of my friends are actually in the directory, of those, 50% are public
            List<SNUserInfo> allUsers = LiveConnectUtil.PublishUsersToDirectory(1000, sNetwork, 0.1F, 0.5F, out expected);

            SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, allUsers.ConvertAll<string>(user => user.SNUserID).ToArray());
            LiveConnectUtil.CompareSNUserInfo(expected.Where<SNUserInfo>(sn => sn.Visibility == Visibility.Everyone).ToArray<SNUserInfo>(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Max friend list lookup, plus one (1001).")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_GetSNUserInfos_MaxLookupPlusOne()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected = GenerateRandomSNUserInfos(1001);

            this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());            
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(2), Description("A very large (5K+) WP7 friend lookup, from the Peoples Hub.  Should fail, due to WCF message size quotas.")]
        [ExpectedException(typeof(ProtocolException))]
        public void N_GetSNUserInfos_FacebookCapFriendList()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected = GenerateRandomSNUserInfos(5500);

           this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());           
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(2), Description("A very large (10K) lookup.  Not a realistic scenario, currently.  Should fail, due to WCF message size quotas.")]
        [ExpectedException(typeof(ProtocolException))]
        public void N_GetSNUserInfos_ExtremeFriendList()
        {
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            List<SNUserInfo> expected = GenerateRandomSNUserInfos(10000);

            this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());           
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        public static List<SNUserInfo> GenerateRandomSNUserInfos(int count)
        {
            List<SNUserInfo> userInfos = new List<SNUserInfo>(count);
            for (int i = 0; i < count; i++)
            {
                userInfos.Add(LiveConnectUtil.GenerateRandomSNUserInfo());
            }

            return userInfos;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\GetSNUserInfoBySNUId.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ServiceModel;
using System.ServiceModel.Security;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetSNUserInfoBySNUId API
    /// </summary>
    [TestClass]
    public class GetSNUserInfoBySNUId : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNUserInfoBySNUId API.")]
        public void GetSNUserInfoBySNUId_BVT()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong network ID.")]
        public void P_GetSNUserInfoBySNUId_WrongSocialNetwork()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;    
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId((ushort)SocialNetworks.Twitter, snUser.SNUserID, snUser.XUID);
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoBySNUId to return null, since the social network ID doesn't match.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong snuid.")]
        public void P_GetSNUserInfoBySNUId_WrongSnuid()
        {
            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), Utility.GenerateRandomString(25, LiveConnectUtil.BadSnuidChars), Utility.GenerateRandomUInt64());
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoBySNUId to return null, since the snuid doesn't match.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong xuid, but the query is for a visible snuid.")]
        public void P_GetSNUserInfoBySNUId_WrongXuidButVisible()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, Utility.GenerateRandomUInt64());
                LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using the wrong xuid, but the query is for a non-visible snuid.")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfoBySNUId_WrongXuidButNotVisible()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.Visibility = Visibility.Me;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, Utility.GenerateRandomUInt64());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info, using an unauthorized network ID.")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfoBySNUId_UnauthorizedSocialNetwork()
        {
            //note, this will only work with cert-based auth, as an STS token will fail Title validation
            //currently only have permissions on 1,2,3, not 0
            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ClientCertificate))
            {
                this.LiveConnectUtil.GetSNUserInfoBySNUId(0, Utility.GenerateRandomString(25, LiveConnectUtil.BadSnuidChars), Utility.GenerateRandomUInt64());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a min length SN user ID.")]
        public void P_GetSNUserInfoBySNUId_MinSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(1, LiveConnectUtil.BadSnuidChars);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a max length SN user ID.")]
        public void P_GetSNUserInfoBySNUId_MaxSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(128, LiveConnectUtil.BadSnuidChars);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a unicode snuid.")]
        public void P_GetSNUserInfoBySNUId_UnicodeSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateUnicodeString(Utility.GenerateRandomNumber(10, 100));
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a null snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_NullSnuid()
        {
            this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), null, Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with an empty string snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_EmptySnuid()
        {
            this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), String.Empty, Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a max length + 1 snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_MaxSnuidPlusOne()
        {
            this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), Utility.GenerateRandomString(129), Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with an extremely large snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_LargeSnuid()
        {
            this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), Utility.GenerateRandomString(2500), Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a snuid that contains script injection.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_ScriptSnuid()
        {
            this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), "<script>alert('hi!')</script>", Utility.GenerateRandomUInt64());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a snuid consisting only of whitespace.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfoBySNUId_WhitespaceSnuid()
        {
            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), Utility.WhitespaceString(50), Utility.GenerateRandomUInt64());
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoBySNUId to return null, since the social network ID doesn't match.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Attempts to get user info with a snuid that contains SQL injection.")]
        public void N_GetSNUserInfoBySNUId_SqlInjectionSnuid()
        {
            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(LiveConnectUtil.GetRandomSocialNetwork(), "' alter table [authentication] modify colum xuid tinyint NOT NULL --", Utility.GenerateRandomUInt64());
            Assert.IsNull(actualSnUser, "Expected GetSNUserInfoBySNUId to return null, since the social network ID doesn't match.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\RemoveSNUserInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the RemoveSNUserInfo API
    /// </summary>
    [TestClass]
    public class RemoveSNUserInfo : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect RemoveSNUserInfo API.")]
        public void RemoveSNUserInfo_BVT()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();            
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);

            this.LiveConnectUtil.RemoveSNUserInfo(sNetwork, snUser.XUID);
            actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            Assert.IsNull(actualSnUser, "Removed user info for {0}, and expected no records to be returned by GetSNUserInfoBySNUId!", snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect RemoveSNUserInfo API, that uses the special-case inputs that the Twitter app sends.  QFE BVT.")]
        public void RemoveSNUserInfo_TwitterBVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            expectedUserInfo.XUID = 0;  //Twitter/Lua can't deal with ulongs, so the app sends up 0.  The actual user Xuid is plucked from the STS token
            ulong stsTokenXuid = Utility.GenerateRandomUInt64();
            ulong stsTokenMachinePuid = Utility.GenerateRandomUInt64();
            ushort sNetwork = (ushort)SocialNetworks.Twitter;
            SNUserInfo actualSnUser;

            //these calls NEED to use STS auth, as it's a key part of the special-case stuff that Twitter does
            using (ForceAuthenticationMode forcedAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, expectedUserInfo, stsTokenXuid, stsTokenMachinePuid);
                
                actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, expectedUserInfo.SNUserID, stsTokenXuid);
                //reset expected to the value in the token
                expectedUserInfo.XUID = stsTokenXuid; 
                LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualSnUser);
            
                this.LiveConnectUtil.RemoveSNUserInfo(sNetwork, expectedUserInfo.XUID, stsTokenXuid, stsTokenMachinePuid);
            }
            actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, expectedUserInfo.SNUserID, stsTokenXuid);
            Assert.IsNull(actualSnUser, "Removed user info for {0}, and expected no records to be returned by GetSNUserInfoBySNUId!", expectedUserInfo);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\GetSNetworkInfos.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the GetSNetworkInfos API
    /// </summary>
    [TestClass]
    public class GetSNetworkInfos : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect GetSNetworkInfos API.")]
        public void GetSNetworkInfos_BVT()
        {
            SNetworkInfo[] networks = this.LiveConnectUtil.GetSNetworkInfos();
            Assert.IsNotNull(networks, "GetSNetworkInfos returned no social networks!");
            Assert.AreEqual<int>(3, networks.Length, "Expected GetSNetworkInfos to return 3 social networks, but got {0}.", networks.Length);
            PrintNetworks(networks);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="networks"></param>
        private void PrintNetworks(SNetworkInfo[] networks)
        {
            for (int i = 0; i < networks.Length; i++)
                TraceEx.TraceVerbose(networks[i].ToString());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveAuthentication\SetAuthInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the SetAuthInfo API
    /// </summary>
    [TestClass]
    public class SetAuthInfo : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect SetAuthInfo API.")]
        public void SetAuthInfo_BVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            SNAuthInfo expectedAuthInfo = new SNAuthInfo() { SNUserID = expectedUserInfo.SNUserID, Token = Utility.GenerateRandomString() };
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            string deviceId = Utility.GenerateRandomUInt64().ToString();
            
            this.LiveConnectUtil.SetAuthInfo(sNetwork, expectedUserInfo, expectedAuthInfo, deviceId, true);

            SNAuthInfo actualAuthInfo = this.LiveConnectUtil.GetAuthInfo(sNetwork, expectedUserInfo.XUID, deviceId);
            LiveConnectUtil.CompareSNAuthInfo(expectedAuthInfo, actualAuthInfo);

            //validate that the user was also published to the directory...
            SNUserInfo actualUserInfo = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, expectedUserInfo.XUID);
            LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualUserInfo);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect SetAuthInfo API, that uses the special-case inputs that the Twitter app sends.")]
        public void SetAuthInfo_TwitterBVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            expectedUserInfo.XUID = 0;  //Twitter/Lua can't deal with ulongs, so the app sends up 0.  The actual user Xuid is plucked from the STS token
            SNAuthInfo expectedAuthInfo = new SNAuthInfo() { SNUserID = expectedUserInfo.SNUserID, Token = Utility.GenerateRandomString() };
            ulong stsTokenXuid = Utility.GenerateRandomUInt64();
            ulong stsTokenMachinePuid = Utility.GenerateRandomUInt64();
            ushort sNetwork = (ushort)SocialNetworks.Twitter;
            string deviceId = null;

            //these calls NEED to use STS auth, as it's a key part of the special-case stuff that Twitter does
            using (ForceAuthenticationMode forcedAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveAuthentication, Authentication.ConsoleStsToken))
            {
                this.LiveConnectUtil.SetAuthInfo(sNetwork, expectedUserInfo, expectedAuthInfo, deviceId, true, stsTokenXuid, stsTokenMachinePuid);

                SNAuthInfo actualAuthInfo = this.LiveConnectUtil.GetAuthInfo(sNetwork, stsTokenXuid, stsTokenMachinePuid.ToString());
                LiveConnectUtil.CompareSNAuthInfo(expectedAuthInfo, actualAuthInfo);
            }

            //validate that the user was also published to the directory...
            SNUserInfo actualUserInfo = this.LiveConnectUtil.GetSNUserInfoByXUID(sNetwork, stsTokenXuid);
            expectedUserInfo.XUID = stsTokenXuid;
            LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualUserInfo);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\Security\SetSNUserInfoSecurityTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Configuration;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class SetSNUserInfoSecurityTests : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid platform type in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_InvalidPlatformType()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, "100", null, 0, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid audience uri in user token")]
        [ExpectedException(typeof(MessageSecurityException))]
        public void N_SetSNUserInfo_InvalidAudienceUri()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, null, "http://xboxlive.com/pdlc", 0, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid title id in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_InvalidTitleId()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, null, null, (uint)584807E2, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid netword id in api call")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_SetSNUserInfo_InvalidNetworkId()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = 5;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, null, null, (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets zero for netword id in api call")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_ZeroForNetworkId()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = 0;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, null, null, (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Signs the token with a certificate not in Trusted People's cert on the server")]
        [ExpectedException(typeof(MessageSecurityException))]
        public void N_SetSNUserInfo_InvalidCertInToken()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            LiveConnectUtil.InstallCertificate(true);
            this.LiveConnectUtil.LiveDirectory.Token.CertificateSubject = ConfigurationManager.AppSettings["SelfSignedTestCertificateSubject"];
            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
            }
            this.LiveConnectUtil.LiveDirectory.Token.CertificateSubject = ConfigurationManager.AppSettings["TestCertificateSubject"];
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid subject in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_InvalidSubject()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, null, null, 0, "Random Subject");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets null for user info")]
        [ExpectedException(typeof(FaultException<ArgumentNullException>))]
        public void N_SetSNUserInfo_NullUserInfo()
        {
            SNUserInfo snUser = null;
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets console token values for audience, subject and platform in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_ConsoleTokenValues()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, string.Format("0x{0:X2}", 0x1), "http://xboxlive.com", 0, string.Format("0x{0:X16}", snUser.XUID));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Provides a user token with no device id claim, which is required.")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_SetSNUserInfo_NoDeviceIdClaim()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                StsTokenParameters stsParams = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), OmittedItems = OmittedTokenItems.DeviceId };
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser, stsParams);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\DbReader.cs ===
﻿using System;
using System.Data.SqlClient;

namespace LiveConnect_DB_Fill
{
    /// <summary>
    /// This object is intended to wrap the SQLDataReader in order to allow access
    /// to all fields through field names, rather than indices.
    /// This will prevent changes to queries from being so disruptive.  
    /// By encapsulating the SqlDataReader, we enforce that all access is by field name 
    /// (unless the object is bypassed in advanced cases by using the SqlDataReader directly).
    /// This also allows us to create methods that take default values, further improving the readability of the code.
    /// </summary>
    public class DbReader : IDisposable
    {
        private SqlDataReader reader;

        #region Constructors
        public DbReader(SqlDataReader reader)
        {
            this.reader = reader;
        }
        public static explicit operator DbReader(SqlDataReader reader)
        {
            return new DbReader(reader);
        }
        #endregion

        #region Admnin methods
        public bool Read()
        {
            return this.reader.Read();
        }
        public void Close()
        {
            this.reader.Close();
        }


        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool isDisposing)
        {
            if (isDisposing)
            {
                if (this.reader != null)
                {
                    this.reader.Dispose();
                }
            }
        }



        /// <summary>
        /// Provides direct access to the SqlDataReader if advanced functionality is needed
        /// </summary>
        public SqlDataReader SqlDataReader
        {
            get
            {
                return this.reader;
            }
        }
        #endregion

        #region Field Accessors (by FieldName only, no ordinals allowed)
        // This is the default way, so let's keep that available, but only using field names
        public object this[string field]
        {
            get { return this.reader[field]; }
        }
        // These are a new way to access fields by name that is more readable
        public bool IsDBNull(string field)
        {
            return this.reader.IsDBNull(this.reader.GetOrdinal(field));
        }
        public bool GetBoolean(string field)
        {
            return this.reader.GetBoolean(this.reader.GetOrdinal(field));
        }
        public bool GetBoolean(string field, bool defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetBoolean(this.reader.GetOrdinal(field)));
        }
        public byte GetByte(string field)
        {
            return this.reader.GetByte(this.reader.GetOrdinal(field));
        }
        public byte GetByte(string field, byte defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetByte(this.reader.GetOrdinal(field)));
        }
        public char GetChar(string field)
        {
            return this.reader.GetChar(this.reader.GetOrdinal(field));
        }
        public char GetChar(string field, char defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetChar(this.reader.GetOrdinal(field)));
        }
        public DateTime GetDateTime(string field)
        {
            return this.reader.GetDateTime(this.reader.GetOrdinal(field));
        }
        public DateTime GetDateTime(string field, DateTime defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetDateTime(this.reader.GetOrdinal(field)));
        }
        public decimal GetDecimal(string field)
        {
            return this.reader.GetDecimal(this.reader.GetOrdinal(field));
        }
        public decimal GetGetDecimalChar(string field, decimal defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetDecimal(this.reader.GetOrdinal(field)));
        }
        public double GetDouble(string field)
        {
            return this.reader.GetDouble(this.reader.GetOrdinal(field));
        }
        public double GetDouble(string field, double defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetDouble(this.reader.GetOrdinal(field)));
        }
        public float GetFloat(string field)
        {
            return this.reader.GetFloat(this.reader.GetOrdinal(field));
        }
        public float GetFloat(string field, float defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetFloat(this.reader.GetOrdinal(field)));
        }
        public Guid GetGuid(string field)
        {
            return this.reader.GetGuid(this.reader.GetOrdinal(field));
        }
        public Guid GetGuid(string field, Guid defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetGuid(this.reader.GetOrdinal(field)));
        }
        public short GetInt16(string field)
        {
            return this.reader.GetInt16(this.reader.GetOrdinal(field));
        }
        public short GetInt16(string field, short defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetInt16(this.reader.GetOrdinal(field)));
        }
        public int GetInt32(string field)
        {
            return this.reader.GetInt32(this.reader.GetOrdinal(field));
        }
        public int GetInt32(string field, int defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetInt32(this.reader.GetOrdinal(field)));
        }
        public long GetInt64(string field)
        {
            return this.reader.GetInt64(this.reader.GetOrdinal(field));
        }
        public long GetInt64(string field, long defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetInt64(this.reader.GetOrdinal(field)));
        }
        public string GetString(string field)
        {
            return this.reader.GetString(this.reader.GetOrdinal(field));
        }
        public string GetString(string field, string defaultValue)
        {
            return (IsDBNull(field) ? defaultValue :
                     this.reader.GetString(this.reader.GetOrdinal(field)));
        }
        /// <summary>
        /// Will Load the string, and if it is DBNull, returns null
        /// </summary>
        /// <param name="field">The field name</param>
        /// <returns>null if the field is DBNull, otherwise the string value</returns>
        public string GetNullableString(string field)
        {
            return GetString(field, null);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\FillDbThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LiveConnect_DB_Fill
{
    /// <summary>
    /// 
    /// </summary>
    internal class FillDbThreadState
    {
        /// <summary>
        /// 
        /// </summary>
        public int TotalRowsToInsert
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool UseStoredProc
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool AddColumnHeaders
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\LiveConnectDbQuery.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace LiveConnect_DB_Fill
{
    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectDbQuery: DbQuery
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sql"></param>
        public LiveConnectDbQuery(string sql): base(sql)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="commandType"></param>
        public LiveConnectDbQuery(string sql, CommandType commandType): base(sql, commandType)
        {
           
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        protected override string GetConnectionString()
        {
            return System.Configuration.ConfigurationManager.ConnectionStrings["LiveConnect"].ConnectionString;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using System.Diagnostics;
using System.IO;
using LiveN.Test.Common;
using LiveN.Test.Common.Forms;

namespace LiveConnect_DB_Fill
{
    /// <summary>
    /// 
    /// </summary>
    public enum SocialNetwork : ushort
    {
        WindowsLiveSpaces = 1,
        Facebook,
        Twitter,
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class MainForm : Form
    {
        private List<Thread> workerThreads = new List<Thread>();
        private System.Threading.Timer timer;

        private static char[] BadSnuidChars = "<>:\",\\".ToCharArray();
        private static char[] gamerTagChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ".ToCharArray();

        private static TimeSpan elapsedTime;
        private static int rowsInserted;
        private static int errorCount;
        private static int tpsCount;
        private static object rowsInsertedLock = new object();
        
        /// <summary>
        /// 
        /// </summary>
        public MainForm()
        {
            InitializeComponent();

            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.output;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void start_Click(object sender, EventArgs e)
        {
            //reset counters
            errorCount = 0;
            rowsInserted = 0;
            tpsCount = 0;

            //setup the UI
            this.stop.Enabled = true;
            this.start.Enabled = false;
            this.elapsedTimeText.Text = "00:00:00";

            //start timer
            elapsedTime = new TimeSpan(0, 0, 0);
            timer = new System.Threading.Timer(TimerCallback, this.autoRefreshTotalRowCountToolStripMenuItem.Checked, 1000, 1000);

            if (this.generateFileToolStripMenuItem.Checked)
            {
                Thread worker = new Thread(GenerateFileWorker);
                this.workerThreads.Add(worker);
                worker.Start(new FillDbThreadState() { TotalRowsToInsert = (int)this.rowsToInsert.Value, AddColumnHeaders=this.addColumnHeadersToolStripMenuItem.Checked });
            }
            else
            {
                for (int i = 0; i < this.workerThreadCount.Value; i++)
                {
                    Thread worker = new Thread(InsertRowsWorker);
                    worker.Start(new FillDbThreadState() { TotalRowsToInsert = (int)this.rowsToInsert.Value, UseStoredProc = this.storedProcToolStripMenuItem.Checked });
                    this.workerThreads.Add(worker);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void TimerCallback(object state)
        {
            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(1));
            UpdateElapsedTime(elapsedTime);
            UpdateStats((bool)state);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="duration"></param>
        private void UpdateElapsedTime(TimeSpan duration)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<TimeSpan>(UpdateElapsedTime), duration);
            }
            else
            {
                this.elapsedTimeText.Text = String.Format("{0}:{1}:{2}", duration.Hours.ToString("D2"), duration.Minutes.ToString("D2"), duration.Seconds.ToString("D2"));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void InsertRowsWorker(object state)
        {
            FillDbThreadState threadState = state as FillDbThreadState;
            Random rnd = new Random();

            try
            {
                while (true)
                {
                    try
                    {
                        if (threadState.UseStoredProc)
                        {
                            using (LiveConnectDbQuery query = new LiveConnectDbQuery("spSetAuthAndUserInfo", CommandType.StoredProcedure))
                            {
                                query.Parameters.Add("@sNetworkId", SqlDbType.SmallInt).Value = rnd.Next(1, 4); //1-3
                                query.Parameters.Add("@xuid", SqlDbType.BigInt).Value = (long)Utility.GenerateRandomUInt64();
                                query.Parameters.Add("@snUserId", SqlDbType.NVarChar).Value = Utility.GenerateRandomString(10, BadSnuidChars);
                                query.Parameters.Add("@gamerTag", SqlDbType.VarChar).Value = GenerateRandomGamerTag(10);
                                query.Parameters.Add("@token", SqlDbType.VarChar).Value = Utility.GenerateRandomString(150);
                                query.Parameters.Add("@deviceId", SqlDbType.VarChar).Value = Utility.GenerateRandomUInt64().ToString();
                                query.Parameters.Add("@flags", SqlDbType.Int).Value = rnd.Next(0, 2);   //0 or 1
                                query.Parameters.Add("@preserveToken", SqlDbType.SmallInt).Value = 1;

                                //one last check...
                                //lock(rowsInsertedLock)
                                //{
                                //    if ((threadState.TotalRowsToInsert == 0 || rowsInserted < threadState.TotalRowsToInsert))
                                //    {
                                //        query.Execute();
                                //        rowsInserted++;
                                //    }
                                //    else
                                //        continue;
                                //}

                                if ((threadState.TotalRowsToInsert == 0 || rowsInserted < threadState.TotalRowsToInsert))
                                {
                                    query.Execute();
                                    Interlocked.Increment(ref rowsInserted);
                                    Interlocked.Increment(ref tpsCount);
                                }
                                else
                                    break;
                            }
                        }
                        else
                        {
                            if ((threadState.TotalRowsToInsert == 0 || rowsInserted < threadState.TotalRowsToInsert))
                            {
                                ushort networkId = (ushort)rnd.Next(1, 4); //1-3
                                long xuid = (long)Utility.GenerateRandomUInt64();
                                string snUserId = Utility.GenerateRandomString(10, BadSnuidChars);

                                //Insert into Directory Table
                                using (LiveConnectDbQuery query = new LiveConnectDbQuery("INSERT INTO Directory(SNetworkId, XUID, SNUserId, GamerTag, Flags, LastAccessedTime) VALUES(@NetworkId, @Xuid, @SNUserId, @GamerTag, @Flags, GETUTCDATE())", CommandType.Text))
                                {
                                    query.Parameters.Add("@NetworkId", SqlDbType.SmallInt).Value = networkId;
                                    query.Parameters.Add("@Xuid", SqlDbType.BigInt).Value = xuid;
                                    query.Parameters.Add("@SNUserId", SqlDbType.NVarChar).Value = snUserId;
                                    query.Parameters.Add("@GamerTag", SqlDbType.VarChar).Value = GenerateRandomGamerTag(10);
                                    query.Parameters.Add("@Flags", SqlDbType.Int).Value = rnd.Next(0, 2);   //0 or 1                            
                                    if ((threadState.TotalRowsToInsert == 0 || rowsInserted < threadState.TotalRowsToInsert))
                                        query.Execute();
                                }

                                //Insert into Directory Table
                                using (LiveConnectDbQuery query = new LiveConnectDbQuery("INSERT INTO Authentication(SNetworkId, XUID, SNUserId, Token, DeviceId, LastAccessedTime) VALUES(@NetworkId, @Xuid, @SNUserId, @Token, @DeviceId, GETUTCDATE())", CommandType.Text))
                                {
                                    query.Parameters.Add("@NetworkId", SqlDbType.SmallInt).Value = networkId;
                                    query.Parameters.Add("@Xuid", SqlDbType.BigInt).Value = xuid;
                                    query.Parameters.Add("@SNUserId", SqlDbType.NVarChar).Value = snUserId;
                                    query.Parameters.Add("@Token", SqlDbType.VarChar).Value = Utility.GenerateRandomString(150);
                                    query.Parameters.Add("@DeviceId", SqlDbType.VarChar).Value = Utility.GenerateRandomUInt64().ToString();
                                    if ((threadState.TotalRowsToInsert == 0 || rowsInserted < threadState.TotalRowsToInsert))
                                        query.Execute();
                                }


                                Interlocked.Increment(ref rowsInserted);
                                Interlocked.Increment(ref tpsCount);
                            }
                            else
                                break;
                        }
                    }
                    catch(Exception e)
                    {
                        Interlocked.Increment(ref errorCount);
                        Trace.TraceError("Error inserting into database; {0}", e.ToString());
                        Thread.Sleep(100);
                    }
                }
            }
            catch (ThreadAbortException)
            {
                //cancelled in the UI
            }
            catch (Exception e)
            {
                Interlocked.Increment(ref errorCount);
                UpdateErrorCount(errorCount);
                Trace.TraceError("Unexpected exception occurred on worker thread; {0}", e.ToString());
            }
            finally
            {
                ResetUI();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void ResetUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(ResetUI));
            }
            else
            {
                //bool anyActiveThreads = this.workerThreads.Any<Thread>(t => t.IsAlive);
                //if (!anyActiveThreads )  //are they any remaining worker threads for 'Play All'?  If so, don't reset the UI...
                {
                    if (timer != null)
                    {
                        timer.Dispose();
                        timer = null;
                    }

                    this.stop.Enabled = false;
                    this.start.Enabled = true;

                    UpdateStats(this.autoRefreshTotalRowCountToolStripMenuItem.Checked);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateStats(bool updateTotalRows)
        {
            UpdateTps(tpsCount);
            tpsCount = 0;
            UpdateRowsInserted(rowsInserted);
            if(updateTotalRows)
                UpdateTotalRows(GetTotalRows());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tps"></param>
        private void UpdateTps(int tps)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<int>(UpdateTps), tps);
            }
            else
            {
                this.insertsPerSecond.Text = tps.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        private void UpdateRowsInserted(int count)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<int>(UpdateRowsInserted), count);
            }
            else
            {
                this.totalRowsInserted.Text = count.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        private void UpdateErrorCount(int count)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<int>(UpdateErrorCount), count);
            }
            else
            {
                this.errors.Text = count.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private int GetTotalRows()
        {
            using (LiveConnectDbQuery query = new LiveConnectDbQuery("SELECT COUNT(1) AS TotalRows FROM Directory WITH (NOLOCK)", CommandType.Text))
            {
                if(query.Reader.Read())
                    return query.Reader.GetInt32("TotalRows");
                return -1;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        private void UpdateTotalRows(int count)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new Action<int>(UpdateTotalRows), count);
            }
            else
            {
                this.totalRows.Text = count.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static string GenerateRandomGamerTag(int length)
        {
            System.Security.Cryptography.RNGCryptoServiceProvider rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
            byte[] randomBytes = new byte[4];
            rng.GetNonZeroBytes(randomBytes);
            int seedInt = BitConverter.ToInt32(randomBytes, 0);

            Random rnd = new Random(seedInt);
            StringBuilder gamerTag = new StringBuilder(length);
            gamerTag.Append(gamerTagChars[rnd.Next(51)]);  //first char can't be a number/space

            int i = 0;
            while (i < length)
            {
                char nextChar = gamerTagChars[rnd.Next(gamerTagChars.Length - 1)];
                if (nextChar == ' ' && gamerTag[gamerTag.Length - 1] == ' ') //can't have consecutive spaces
                    continue;
                gamerTag.Append(nextChar);
                i++;
            }

            return gamerTag.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stop_Click(object sender, EventArgs e)
        {
            if (this.workerThreads.Count > 0)
            {
                foreach (Thread thread in this.workerThreads)
                {
                    if (!thread.Join(100) && thread.IsAlive)
                        thread.Abort();
                }

                this.workerThreads.Clear();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void insertTypeMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == this.storedProcToolStripMenuItem)
                this.directTableToolStripMenuItem.Checked = false;
            else
                this.storedProcToolStripMenuItem.Checked = false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (AboutForm about = new AboutForm("Live Connec DB Fill", "P.J. Little", "peterl", this.Icon.ToBitmap()))
            {
                about.ShowDialog(this);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void refreshTotalRows_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ThreadPool.QueueUserWorkItem(UpdateTotalRowsAsync);
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateTotalRowsAsync(object state)
        {
            int count = GetTotalRows();
            UpdateTotalRows(count);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void GenerateFileWorker(object state)
        {
            FillDbThreadState threadState = state as FillDbThreadState;
            Random rnd = new Random();

            try
            {
                DateTime fileStamp = DateTime.Now;
                int fileSeed = rnd.Next(10000);

                using (StreamWriter directoryWriter = new StreamWriter(String.Format("Directory-{0}-{1}-{2}_{3}.csv", fileStamp.Month.ToString("D2"), fileStamp.Day.ToString("D2"), fileStamp.Year, fileSeed), false, Encoding.UTF8))
                using (StreamWriter authenticationWriter = new StreamWriter(String.Format("Authentication-{0}-{1}-{2}_{3}.csv", fileStamp.Month.ToString("D2"), fileStamp.Day.ToString("D2"), fileStamp.Year, fileSeed), false, Encoding.UTF8))
                {
                    if (threadState.AddColumnHeaders)
                    {
                        directoryWriter.WriteLine("SNetworkId\tXUID\tSNUserId\tGamerTag\tFlags\tLastAccessedTime");  //column headers for the first row
                        authenticationWriter.WriteLine("SNetworkId\tXUID\tSNUserId\tToken\tDeviceId\tLastAccessedTime");
                    }

                    for (int i = 0; i < threadState.TotalRowsToInsert; i++)
                    {
                        ushort networkId = (ushort)rnd.Next(1, 4); //1-3
                        long xuid = (long)Utility.GenerateRandomUInt64();
                        string snUserId = Utility.GenerateRandomString(10, BadSnuidChars);

                        if (i == threadState.TotalRowsToInsert - 1)
                        {
                            directoryWriter.Write("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", networkId, xuid, snUserId, GenerateRandomGamerTag(10), rnd.Next(0, 2), DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                            authenticationWriter.Write("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", networkId, xuid, snUserId, Utility.GenerateRandomString(128), Utility.GenerateRandomUInt64(), DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                        }
                        else
                        {
                            directoryWriter.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", networkId, xuid, snUserId, GenerateRandomGamerTag(10), rnd.Next(0, 2), DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                            authenticationWriter.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", networkId, xuid, snUserId, Utility.GenerateRandomString(128), Utility.GenerateRandomUInt64(), DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                        }

                        Interlocked.Increment(ref rowsInserted);
                        Interlocked.Increment(ref tpsCount);

                        if (i % 10000 == 0)
                        {
                            directoryWriter.Flush();
                            authenticationWriter.Flush();
                        }
                    }
                }
            }
            catch (ThreadAbortException)
            {
                //cancelled in the UI
            }
            catch (Exception e)
            {
                Trace.TraceError("Error writing out LiveConnect data; {0}", e);
            }
            finally
            {
                ResetUI();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\DbQuery.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.SqlTypes;

namespace LiveConnect_DB_Fill
{
    /// <summary>
    /// 
    /// </summary>
    public abstract class DbQuery : IDisposable
    {
        protected SqlConnection connection;
        protected SqlCommand command;
        private SqlDataReader reader;
        private bool disposed;

        public DbQuery(string sql) :
            this(sql, CommandType.StoredProcedure)
        {

        }

        public DbQuery(string sql, CommandType commandType)
        {
            connection = new SqlConnection(GetConnectionString());
            command = new SqlCommand(sql, connection);
            command.CommandType = commandType;
        }

        protected abstract string GetConnectionString();

        public SqlParameterCollection Parameters
        {
            get { return command.Parameters; }
        }

        public DbReader Reader
        {
            get
            {
                if (reader == null)
                {
                    if (connection.State != ConnectionState.Open)
                    {
                        connection.Open();
                    }
                    reader = command.ExecuteReader();
                }
                return (DbReader)reader;
            }
        }

        public int Execute()
        {
            try
            {
                connection.Open();
                return command.ExecuteNonQuery();
            }
            finally
            {
                Close();
            }
        }

        public void Close()
        {
            if (reader != null)
            {
                reader.Close();
                reader = null;
            }

            if (command != null)
            {
                command.Dispose();
                command = null;
            }

            if (connection != null)
            {
                connection.Close();
                connection = null;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    Close();
                }
            }
            this.disposed = true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\Security\GetSNUserInfosSecurityTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Configuration;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;
using LiveN.Test.Framework.Authorization;

namespace LiveConnect.Test
{
    [TestClass]
    public class GetSNUserInfosSecurityTests : TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes unicode characters for SNUserIDs in Api call")]
        public void P_GetSNUserInfos_UnicodeSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateUnicodeString(Utility.GenerateRandomNumber(10, 100));
            expected.Add(snUser);
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
                LiveConnectUtil.CompareSNUserInfo(expected.ToArray(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes min length SNUserIDs in Api call")]
        public void P_GetSNUserInfos_MinSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(1, LiveConnectUtil.BadSnuidChars);
            expected.Add(snUser);
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
                LiveConnectUtil.CompareSNUserInfo(expected.ToArray(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes max length SNUserIDs in Api call")]
        public void P_GetSNUserInfos_MaxSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(128, LiveConnectUtil.BadSnuidChars);
            expected.Add(snUser);
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
                LiveConnectUtil.CompareSNUserInfo(expected.ToArray(), actualSnUser, this.LiveConnectUtil.LiveDirectory);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid platform type in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_InvalidPlatformType()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(5);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), "10", null, (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid audience uri in user token")]
        [ExpectedException(typeof(MessageSecurityException))]
        public void N_GetSNUserInfos_InvalidAudienceUri()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(4);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), null, "xyz", (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid title id in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_InvalidTitleId()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(4);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), null, null, (uint)583807E1, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid network id")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_GetSNUserInfos_InvalidNetworkId()
        {
            ushort sNetwork = 7;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(3);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), null, null, (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets zero network id")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_ZeroForNetworkId()
        {
            ushort sNetwork = 0;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(3);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), null, null, (uint)XboxTitle.Facebook, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets invalid subject in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_InvalidSubject()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(5);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), null, null, (uint)XboxTitle.Facebook, "abc");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Signs the token with a certificate not in Trusted People's cert on the server")]
        [ExpectedException(typeof(MessageSecurityException))]
        public void N_GetSNUserInfos_InvalidCertInToken()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(5);

            LiveConnectUtil.InstallCertificate(true);
            this.LiveConnectUtil.LiveDirectory.Token.CertificateSubject = ConfigurationManager.AppSettings["SelfSignedTestCertificateSubject"];
            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
            this.LiveConnectUtil.LiveDirectory.Token.CertificateSubject = ConfigurationManager.AppSettings["TestCertificateSubject"];
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes null for SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentNullException>))]
        public void N_GetSNUserInfos_NullSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, null);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes zero length for SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentNullException>))]
        public void N_GetSNUserInfos_ZeroSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes empty SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_EmptySnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = String.Empty;
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes whitespace for SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_WhitespaceSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.WhitespaceString(60);
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes max + 1 length SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_MaxSnuidPlusOne()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(129);
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes a large SNUserID in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_LargeSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(2000);
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes a SNUserID with bad chars in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_BadCharsSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(50) + "<";
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes spaces before SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_SpaceBeforeSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.AppendWhitespace(Utility.GenerateRandomString(50, LiveConnectUtil.BadSnuidChars), true, false);
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes spaces after SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_SpaceAfterSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.AppendWhitespace(Utility.GenerateRandomString(50, LiveConnectUtil.BadSnuidChars), false, true);
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Passes spaces before and after SNUserIDs in Api call")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_GetSNUserInfos_SpaceBeforeAndAfterSnuid()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = new List<SNUserInfo>();
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.AppendWhitespace(Utility.GenerateRandomString(50, LiveConnectUtil.BadSnuidChars));
            expected.Add(snUser);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-sushah"), Priority(1), Description("Sets console token values for audience, subject and platform in user token")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_ConsoleTokenValues()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(1);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), string.Format("0x{0:X2}", 0x1), "http://xboxlive.com", (uint)XboxTitle.Facebook, string.Format("0x{0:X16}", expected[0].XUID));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Provides a user token with no device id claim, which is required.")]
        [ExpectedException(typeof(FaultException<SecurityAccessDeniedException>))]
        public void N_GetSNUserInfos_NoDeviceIdClaim()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            List<SNUserInfo> expected = GetSNUserInfos.GenerateRandomSNUserInfos(1);

            using (ForceAuthenticationMode forceAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.UserStsToken))
            {
                StsTokenParameters stsParams = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), OmittedItems = OmittedTokenItems.DeviceId };
                this.LiveConnectUtil.GetSNUserInfos(sNetwork, expected.ConvertAll<string>(user => user.SNUserID).ToArray(), stsParams);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sends a list of potential injection (SQL, XPath) inputs, as GetSNUserInfos does some xml processing.")]
        public void P_GetSNUserInfos_InjectionInputs()
        {
            ushort sNetwork = (ushort)SocialNetworks.Facebook;
            string[] injection = 
            {
                "//snuids/id/text()",
                "' OR '1' = '1",
                "x'; DROP TABLE Directory; --",
            };

            SNUserInfo[] actualSnUser = this.LiveConnectUtil.GetSNUserInfos(sNetwork, injection);
            Assert.AreEqual<int>(0, actualSnUser.Length, "");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tests\LiveDirectory\SetSNUserInfo.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ServiceModel;

using LiveConnectWeb;
using LiveConnect.Test.Common;
using LiveN.Test.Common;

namespace LiveConnect.Test
{
    /// <summary>
    /// Contains all automated tests for the SetSNUserInfo API
    /// </summary>
    [TestClass]
    public class SetSNUserInfo: TestAreaBase
    {
        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect SetSNUserInfo API.")]
        public void SetSNUserInfo_BVT()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(0), Description("BVT for LiveConnect SetSNUserInfo API, that uses the special-case inputs that the Twitter app sends.  QFE BVT.")]
        public void SetSNUserInfo_TwitterBVT()
        {
            SNUserInfo expectedUserInfo = LiveConnectUtil.GenerateRandomSNUserInfo();
            expectedUserInfo.XUID = 0;  //Twitter/Lua can't deal with ulongs, so the app sends up 0.  The actual user Xuid is plucked from the STS token
            ulong stsTokenXuid = Utility.GenerateRandomUInt64();
            ulong stsTokenMachinePuid = Utility.GenerateRandomUInt64();
            ushort sNetwork = (ushort)SocialNetworks.Twitter;

            //these calls NEED to use STS auth, as it's a key part of the special-case stuff that Twitter does
            using (ForceAuthenticationMode forcedAuth = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, expectedUserInfo, stsTokenXuid, stsTokenMachinePuid);
                SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, expectedUserInfo.SNUserID, stsTokenXuid);
                //reset expected to the value in the token
                expectedUserInfo.XUID = stsTokenXuid;
                LiveConnectUtil.CompareSNUserInfo(expectedUserInfo, actualSnUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info visibility to be Me (non-public).")]
        public void P_SetSNUserInfo_MeVisibility()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.Visibility = Visibility.Me;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);

            SNUserInfo[] userInfos = this.LiveConnectUtil.GetSNUserInfos(sNetwork, new string[] { snUser.SNUserID });
            Assert.AreEqual<int>(0, userInfos.Length, "Not expecting GetSNUserInfos to return any results, as the user's visibility is Me (non-public).");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Updates and verifies the user's visibility.")]
        public void P_SetSNUserInfo_UpdateVisibility()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);

            SNUserInfo[] userInfos = this.LiveConnectUtil.GetSNUserInfos(sNetwork, new string[] { snUser.SNUserID });
            LiveConnectUtil.CompareSNUserInfo(new SNUserInfo[] { snUser }, userInfos, this.LiveConnectUtil.LiveDirectory);

            //make the user non-public
            snUser.Visibility = Visibility.Me;
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);

            userInfos = this.LiveConnectUtil.GetSNUserInfos(sNetwork, new string[] { snUser.SNUserID });
            Assert.AreEqual<int>(0, userInfos.Length, "Not expecting GetSNUserInfos to return any results, as the user's visibility is Me (non-public).");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a min length gamertag.")]
        public void P_SetSNUserInfo_MinLengthGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = Utility.GenerateRandomString(1);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a max length gamertag.")]
        public void P_SetSNUserInfo_MaxLengthGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = Utility.GenerateRandomString(15);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a min xuid.")]
        public void P_SetSNUserInfo_MinXuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.XUID = 1;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a max xuid.")]
        public void P_SetSNUserInfo_MaxXuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.XUID = ulong.MaxValue;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a min length SN user ID.")]
        public void P_SetSNUserInfo_MinSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(1, LiveConnectUtil.BadSnuidChars);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a max length SN user ID.")]
        public void P_SetSNUserInfo_MaxSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(128, LiveConnectUtil.BadSnuidChars);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a unicode snuid.")]
        public void P_SetSNUserInfo_UnicodeSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateUnicodeString(Utility.GenerateRandomNumber(10, 100));
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a snuid that contains SQL injection.")]
        public void P_SetSNUserInfo_SqlInjectionSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = "' SELECT * FROM Authentication where 1=1; --";
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);

            SNUserInfo actualSnUser = this.LiveConnectUtil.GetSNUserInfoBySNUId(sNetwork, snUser.SNUserID, snUser.XUID);
            LiveConnectUtil.CompareSNUserInfo(snUser, actualSnUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a null gamer tag.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_NullGamerTag()
        {
            //force cert or console token auth; user token gamertag is plucked from the token itself - not the parameter
            using (ForceAuthenticationMode forced = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
                snUser.GamerTag = null;
                ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with an empty string gamer tag.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_EmptyGamerTag()
        {
            //force cert or console token auth; user token gamertag is plucked from the token itself - not the parameter
            using (ForceAuthenticationMode forced = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
                snUser.GamerTag = String.Empty;
                ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a gamer tag consisting only of whitespace.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_WhitespaceGamerTag()
        {
            //force cert or console token auth; user token gamertag is plucked from the token itself - not the parameter
            using (ForceAuthenticationMode forced = new ForceAuthenticationMode(this.LiveConnectUtil.LiveDirectory, Authentication.ConsoleStsToken))
            {
                SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
                snUser.GamerTag = Utility.WhitespaceString(10);
                ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
                this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a gamertag that contains leading/trailing whitespace.")]
        public void N_SetSNUserInfo_GamerTagWithWhitespace()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            string[] gamerTags = {  Utility.AppendWhitespace(Utility.GenerateRandomString(8), true, false),
                                    Utility.AppendWhitespace(Utility.GenerateRandomString(8), false, true),
                                    Utility.AppendWhitespace(Utility.GenerateRandomString(8), true, true)};
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            StringBuilder failures = new StringBuilder();

            foreach (string gamerTag in gamerTags)
            {
                try
                {
                    snUser.GamerTag = gamerTag;
                    this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
                }
                catch (FaultException<ArgumentException> e)
                {
                    failures.AppendFormat("Failed setting user info with gamertag with leading/trailing whitespace: \"{0}\" - {1}\r\n", gamerTag, e.Message);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a max length + 1 gamer tag.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_MaxGamerTagPlusOne()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = Utility.GenerateRandomString(16);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a very large gamer tag.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_LargeGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = Utility.GenerateRandomString(150);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);            
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a unicode gamer tag.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_UnicodeGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = Utility.GenerateUnicodeString(10);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a gamer tag that contains script.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_ScriptInjectionGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = "<script>alert('hi')</script>";
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a gamer tag that contains SQL injection.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_SqlInjectionGamerTag()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.GamerTag = "'drop database liveconnect --";
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a xuid set to zero.")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_SetSNUserInfo_ZeroXuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.XUID = 0;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a null snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_NullSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = null;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with an empty string snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_EmptySnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = String.Empty;
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a snuid consisting only of whitespace.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_WhitespaceSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.WhitespaceString(50);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a max length + 1 snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_MaxSnuidPlusOne()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(129);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with an extremely large snuid.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_LargeSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = Utility.GenerateRandomString(1500);
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with a snuid that contains script injection.")]
        [ExpectedException(typeof(FaultException<ArgumentException>))]
        public void N_SetSNUserInfo_ScriptSnuid()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            snUser.SNUserID = "<script>while(true) var i = 2399 * 235235;</script>";
            ushort sNetwork = LiveConnectUtil.GetRandomSocialNetwork();
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("peterl"), Priority(1), Description("Sets user info with an invalid social network ID.")]
        [ExpectedException(typeof(FaultException<ArgumentOutOfRangeException>))]
        public void N_SetSNUserInfo_InvalidSocialNetworkID()
        {
            SNUserInfo snUser = LiveConnectUtil.GenerateRandomSNUserInfo();
            ushort sNetwork = (ushort)Utility.GenerateRandomNumber(10, ushort.MaxValue);
            this.LiveConnectUtil.SetSNUserInfo(sNetwork, snUser);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveConnect_DB_Fill.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LiveConnect_DB_Fill.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveConnect_DB_Fill.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("LiveConnect DB Fill")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("LiveConnect DB Fill")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2010")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("6c50aa86-b22a-4f14-a2b5-a252f9b950b5")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\LiveConnectAuthenticationData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace WcfPerfUI
{
    /// <summary>
    /// 
    /// </summary>
    public class AuthenticationDataRow
    {
        /// <summary>
        /// 
        /// </summary>
        public ushort SNetworkID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public ulong Xuid
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string SNUserId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Token
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string DeviceId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastAccessedTime
        {
            get;
            set;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectAuthenticationData
    {
        private StreamReader fileReader;
        public object syncLock = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        public LiveConnectAuthenticationData(string csvPath)
            : this(csvPath, 1)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        /// <param name="offset"></param>
        public LiveConnectAuthenticationData(string csvPath, int offset)
        {
            this.CsvPath = csvPath;
            this.Offset = offset;
        }

        /// <summary>
        /// 
        /// </summary>
        public string CsvPath
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Offset
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        private StreamReader FileReader
        {
            get
            {
                if (this.fileReader == null)
                {
                    lock (this.syncLock)
                    {
                        this.fileReader = new StreamReader(new FileStream(this.CsvPath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024));
                        //seek to the desired offset
                        int i = 0;
                        while (i < this.Offset && !this.fileReader.EndOfStream)
                        {
                            this.fileReader.ReadLine();
                            i++;
                        }
                    }
                }

                return this.fileReader;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public AuthenticationDataRow GetNextRow()
        {
            string line = String.Empty;

            lock (syncLock)
            {
                if (this.FileReader.EndOfStream)
                {
                    //throw new ApplicationException("No more Authentication data to read; end of file reached!");
                    //auto reset to the beginning of the file
                    this.Offset = 0;
                    this.FileReader.BaseStream.Seek(0, SeekOrigin.Begin);
                }

                line = this.FileReader.ReadLine();
                this.Offset++;
            }

            try
            {
                string[] parts = line.Split('\t');

                ushort sNetworkId = ushort.Parse(parts[0]);
                ulong xuid = (ulong)long.Parse(parts[1]);
                string userId = parts[2];
                string token = parts[3];
                string deviceId = parts[4];
                DateTime lastAccessed = DateTime.Parse(parts[5]);

                return new AuthenticationDataRow() { SNetworkID = sNetworkId, Xuid = xuid, SNUserId = userId, Token = token, DeviceId = deviceId, LastAccessedTime = lastAccessed };
            }
            catch (Exception e)
            {
                throw new ApplicationException(String.Format("Error parsing row {0}, with data: \"{1}\".", this.Offset, line), e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace LiveConnect_DB_Fill
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\LiveConnectDBFill\MainForm.Designer.cs ===
﻿namespace LiveConnect_DB_Fill
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.elapsedTimeText = new System.Windows.Forms.ToolStripStatusLabel();
            this.start = new System.Windows.Forms.Button();
            this.stop = new System.Windows.Forms.Button();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.refreshTotalRows = new System.Windows.Forms.LinkLabel();
            this.errors = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.totalRowsInserted = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.totalRows = new System.Windows.Forms.Label();
            this.insertsPerSecond = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.workerThreadCount = new System.Windows.Forms.NumericUpDown();
            this.rowsToInsert = new System.Windows.Forms.NumericUpDown();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.output = new System.Windows.Forms.TextBox();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.insertTypeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.storedProcToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.directTableToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.autoRefreshTotalRowCountToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateFileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addColumnHeadersToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip.SuspendLayout();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.workerThreadCount)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.rowsToInsert)).BeginInit();
            this.tabPage2.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.elapsedTimeText});
            this.statusStrip.Location = new System.Drawing.Point(0, 335);
            this.statusStrip.Name = "statusStrip";
            this.statusStrip.Size = new System.Drawing.Size(303, 22);
            this.statusStrip.TabIndex = 2;
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(239, 17);
            this.toolStripStatusLabel1.Spring = true;
            this.toolStripStatusLabel1.Text = "Elapsed Time:";
            this.toolStripStatusLabel1.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // elapsedTimeText
            // 
            this.elapsedTimeText.Name = "elapsedTimeText";
            this.elapsedTimeText.Size = new System.Drawing.Size(49, 17);
            this.elapsedTimeText.Text = "00:00:00";
            // 
            // start
            // 
            this.start.Location = new System.Drawing.Point(126, 300);
            this.start.Name = "start";
            this.start.Size = new System.Drawing.Size(75, 23);
            this.start.TabIndex = 3;
            this.start.Text = "Start";
            this.start.UseVisualStyleBackColor = true;
            this.start.Click += new System.EventHandler(this.start_Click);
            // 
            // stop
            // 
            this.stop.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.stop.Enabled = false;
            this.stop.Location = new System.Drawing.Point(207, 300);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 4;
            this.stop.Text = "Stop";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // tabControl1
            // 
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Dock = System.Windows.Forms.DockStyle.Top;
            this.tabControl1.Location = new System.Drawing.Point(0, 24);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(303, 265);
            this.tabControl1.TabIndex = 5;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.groupBox2);
            this.tabPage1.Controls.Add(this.groupBox1);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(295, 239);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Setup + Stats";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.refreshTotalRows);
            this.groupBox2.Controls.Add(this.errors);
            this.groupBox2.Controls.Add(this.label7);
            this.groupBox2.Controls.Add(this.totalRowsInserted);
            this.groupBox2.Controls.Add(this.label6);
            this.groupBox2.Controls.Add(this.totalRows);
            this.groupBox2.Controls.Add(this.insertsPerSecond);
            this.groupBox2.Controls.Add(this.label3);
            this.groupBox2.Location = new System.Drawing.Point(17, 118);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(261, 108);
            this.groupBox2.TabIndex = 3;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Stats";
            // 
            // refreshTotalRows
            // 
            this.refreshTotalRows.AutoSize = true;
            this.refreshTotalRows.Location = new System.Drawing.Point(60, 58);
            this.refreshTotalRows.Name = "refreshTotalRows";
            this.refreshTotalRows.Size = new System.Drawing.Size(64, 13);
            this.refreshTotalRows.TabIndex = 11;
            this.refreshTotalRows.TabStop = true;
            this.refreshTotalRows.Text = "Total Rows:";
            this.refreshTotalRows.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.refreshTotalRows_LinkClicked);
            // 
            // errors
            // 
            this.errors.AutoSize = true;
            this.errors.Location = new System.Drawing.Point(126, 79);
            this.errors.Name = "errors";
            this.errors.Size = new System.Drawing.Size(13, 13);
            this.errors.TabIndex = 10;
            this.errors.Text = "0";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(88, 78);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(37, 13);
            this.label7.TabIndex = 9;
            this.label7.Text = "Errors:";
            // 
            // totalRowsInserted
            // 
            this.totalRowsInserted.AutoSize = true;
            this.totalRowsInserted.Location = new System.Drawing.Point(125, 40);
            this.totalRowsInserted.Name = "totalRowsInserted";
            this.totalRowsInserted.Size = new System.Drawing.Size(13, 13);
            this.totalRowsInserted.TabIndex = 8;
            this.totalRowsInserted.Text = "0";
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(19, 39);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(105, 13);
            this.label6.TabIndex = 7;
            this.label6.Text = "Total Rows Inserted:";
            // 
            // totalRows
            // 
            this.totalRows.AutoSize = true;
            this.totalRows.Location = new System.Drawing.Point(126, 60);
            this.totalRows.Name = "totalRows";
            this.totalRows.Size = new System.Drawing.Size(13, 13);
            this.totalRows.TabIndex = 6;
            this.totalRows.Text = "0";
            // 
            // insertsPerSecond
            // 
            this.insertsPerSecond.AutoSize = true;
            this.insertsPerSecond.Location = new System.Drawing.Point(125, 21);
            this.insertsPerSecond.Name = "insertsPerSecond";
            this.insertsPerSecond.Size = new System.Drawing.Size(13, 13);
            this.insertsPerSecond.TabIndex = 5;
            this.insertsPerSecond.Text = "0";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(61, 20);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(63, 13);
            this.label3.TabIndex = 3;
            this.label3.Text = "Inserts/sec:";
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.workerThreadCount);
            this.groupBox1.Controls.Add(this.rowsToInsert);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Location = new System.Drawing.Point(17, 8);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(261, 104);
            this.groupBox1.TabIndex = 2;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Setup";
            // 
            // workerThreadCount
            // 
            this.workerThreadCount.Location = new System.Drawing.Point(122, 52);
            this.workerThreadCount.Name = "workerThreadCount";
            this.workerThreadCount.Size = new System.Drawing.Size(110, 20);
            this.workerThreadCount.TabIndex = 3;
            this.workerThreadCount.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // rowsToInsert
            // 
            this.rowsToInsert.Location = new System.Drawing.Point(122, 26);
            this.rowsToInsert.Maximum = new decimal(new int[] {
            1000000000,
            0,
            0,
            0});
            this.rowsToInsert.Name = "rowsToInsert";
            this.rowsToInsert.Size = new System.Drawing.Size(110, 20);
            this.rowsToInsert.TabIndex = 2;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(32, 54);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(87, 13);
            this.label2.TabIndex = 1;
            this.label2.Text = "Worker Threads:";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(10, 28);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(109, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Total Rows To Insert:";
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.output);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(295, 239);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Output";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // output
            // 
            this.output.Dock = System.Windows.Forms.DockStyle.Fill;
            this.output.Location = new System.Drawing.Point(3, 3);
            this.output.Multiline = true;
            this.output.Name = "output";
            this.output.ReadOnly = true;
            this.output.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.output.Size = new System.Drawing.Size(289, 233);
            this.output.TabIndex = 0;
            this.output.WordWrap = false;
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(303, 24);
            this.menuStrip1.TabIndex = 6;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.insertTypeToolStripMenuItem,
            this.autoRefreshTotalRowCountToolStripMenuItem,
            this.generateFileToolStripMenuItem,
            this.addColumnHeadersToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // insertTypeToolStripMenuItem
            // 
            this.insertTypeToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.storedProcToolStripMenuItem,
            this.directTableToolStripMenuItem});
            this.insertTypeToolStripMenuItem.Name = "insertTypeToolStripMenuItem";
            this.insertTypeToolStripMenuItem.Size = new System.Drawing.Size(236, 22);
            this.insertTypeToolStripMenuItem.Text = "&Insert Type";
            // 
            // storedProcToolStripMenuItem
            // 
            this.storedProcToolStripMenuItem.Checked = true;
            this.storedProcToolStripMenuItem.CheckOnClick = true;
            this.storedProcToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.storedProcToolStripMenuItem.Name = "storedProcToolStripMenuItem";
            this.storedProcToolStripMenuItem.Size = new System.Drawing.Size(289, 22);
            this.storedProcToolStripMenuItem.Text = "&Stored Proc (spSetAuthAndUserInfo)";
            this.storedProcToolStripMenuItem.Click += new System.EventHandler(this.insertTypeMenuItem_Click);
            // 
            // directTableToolStripMenuItem
            // 
            this.directTableToolStripMenuItem.CheckOnClick = true;
            this.directTableToolStripMenuItem.Name = "directTableToolStripMenuItem";
            this.directTableToolStripMenuItem.Size = new System.Drawing.Size(289, 22);
            this.directTableToolStripMenuItem.Text = "&Direct Table (Directory + Authentication)";
            this.directTableToolStripMenuItem.Click += new System.EventHandler(this.insertTypeMenuItem_Click);
            // 
            // autoRefreshTotalRowCountToolStripMenuItem
            // 
            this.autoRefreshTotalRowCountToolStripMenuItem.CheckOnClick = true;
            this.autoRefreshTotalRowCountToolStripMenuItem.Name = "autoRefreshTotalRowCountToolStripMenuItem";
            this.autoRefreshTotalRowCountToolStripMenuItem.Size = new System.Drawing.Size(236, 22);
            this.autoRefreshTotalRowCountToolStripMenuItem.Text = "&Auto-Refresh Total Row Count";
            // 
            // generateFileToolStripMenuItem
            // 
            this.generateFileToolStripMenuItem.CheckOnClick = true;
            this.generateFileToolStripMenuItem.Name = "generateFileToolStripMenuItem";
            this.generateFileToolStripMenuItem.Size = new System.Drawing.Size(236, 22);
            this.generateFileToolStripMenuItem.Text = "&Generate File";
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutToolStripMenuItem});
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(107, 22);
            this.aboutToolStripMenuItem.Text = "&About";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // addColumnHeadersToolStripMenuItem
            // 
            this.addColumnHeadersToolStripMenuItem.CheckOnClick = true;
            this.addColumnHeadersToolStripMenuItem.Name = "addColumnHeadersToolStripMenuItem";
            this.addColumnHeadersToolStripMenuItem.Size = new System.Drawing.Size(236, 22);
            this.addColumnHeadersToolStripMenuItem.Text = "A&dd Column Headers";
            // 
            // MainForm
            // 
            this.AcceptButton = this.start;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.stop;
            this.ClientSize = new System.Drawing.Size(303, 357);
            this.Controls.Add(this.tabControl1);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.start);
            this.Controls.Add(this.statusStrip);
            this.Controls.Add(this.menuStrip1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MainMenuStrip = this.menuStrip1;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "MainForm";
            this.Text = "LiveConnect DB Fill";
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.groupBox2.PerformLayout();
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.workerThreadCount)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.rowsToInsert)).EndInit();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripStatusLabel elapsedTimeText;
        private System.Windows.Forms.Button start;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.Label errors;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label totalRowsInserted;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label totalRows;
        private System.Windows.Forms.Label insertsPerSecond;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.NumericUpDown workerThreadCount;
        private System.Windows.Forms.NumericUpDown rowsToInsert;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TextBox output;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem insertTypeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem storedProcToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem directTableToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.LinkLabel refreshTotalRows;
        private System.Windows.Forms.ToolStripMenuItem autoRefreshTotalRowCountToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem generateFileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem addColumnHeadersToolStripMenuItem;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\GetSNUserInfosThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace WcfPerfUI
{
    /// <summary>
    /// 
    /// </summary>
    public class GetSNUserInfosThreadState
    {
        /// <summary>
        /// 
        /// </summary>
        public int ExactNumberOfLookups
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int MinNumberOfLookups
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int MaxNumberOfLookups
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool UseExact
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public double PercentInDirectory
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public double PercentVisible
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public double PercentGamerTagRefresh
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace WcfPerfUI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\WorkerThreadParameters.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using LiveConnect.Test.Common;

namespace WcfPerfUI
{
    /// <summary>
    /// 
    /// </summary>
    public class WorkerThreadParameters
    {
        /// <summary>
        /// 
        /// </summary>
        public string Api
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public Authentication AuthenticationMode
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string TitleId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public ushort NetworkId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveConnectDirectoryData DirectoryData
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public LiveConnectAuthenticationData AuthenticationData
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public GetSNUserInfosThreadState GetSNUserInfosState
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AccountTransport\AccountCreationException.cs ===
﻿using System;

namespace Metroid.Test
{
    [Serializable]
    public class AccountCreationException : Exception
    {
        public AccountCreationException()
        {
        }

        public AccountCreationException(string message)
            : base(message)
        {
        }

        public AccountCreationException(string message, Exception inner)
            : base(message, inner)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\LiveConnectDirectoryData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using LiveConnectWeb;

namespace WcfPerfUI
{
    /// <summary>
    /// 
    /// </summary>
    public class DirectoryDataRow
    {
        /// <summary>
        /// 
        /// </summary>
        public ushort SNetworkID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public ulong Xuid
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string SNUserId
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string GamerTag
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public Visibility Visibility
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastAccessedTime
        {
            get;
            set;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class LiveConnectDirectoryData
    {
        private StreamReader fileReader;
        public object syncLock = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        public LiveConnectDirectoryData(string csvPath): this(csvPath, 1)
        {
         
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="csvPath"></param>
        /// <param name="offset"></param>
        public LiveConnectDirectoryData(string csvPath, int offset)
        {
            this.CsvPath = csvPath;
            this.Offset = offset;
        }

        /// <summary>
        /// 
        /// </summary>
        public string CsvPath
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Offset
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        private StreamReader FileReader
        {
            get
            {
                if (this.fileReader == null)
                {
                    lock (this.syncLock)
                    {
                        this.fileReader = new StreamReader(new FileStream(this.CsvPath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024));
                        //seek to the desired offset
                        int i = 0;
                        while (i < this.Offset && !this.fileReader.EndOfStream)
                        {
                            this.fileReader.ReadLine();
                            i++;
                        }
                    }
                }

                return this.fileReader;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificNetworkId"></param>
        /// <returns></returns>
        public DirectoryDataRow GetNextRow(ushort specificNetworkId)
        {
            while (true)
            {
                DirectoryDataRow row = GetNextRow();
                if (row.SNetworkID == specificNetworkId)
                    return row;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="visibility"></param>
        /// <returns></returns>
        public DirectoryDataRow GetNextRow(Visibility visibility)
        {
            while (true)
            {
                DirectoryDataRow row = GetNextRow();
                if (row.Visibility == visibility)
                    return row;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificNetworkId"></param>
        /// <param name="visibility"></param>
        /// <returns></returns>
        public DirectoryDataRow GetNextRow(ushort specificNetworkId, Visibility visibility)
        {
            while (true)
            {
                DirectoryDataRow row = GetNextRow();
                if (specificNetworkId == row.SNetworkID && row.Visibility == visibility)
                    return row;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public DirectoryDataRow GetNextRow()
        {
            string line = String.Empty;

            lock (syncLock)
            {
                if (this.FileReader.EndOfStream)
                {
                    //throw new ApplicationException("No more Directory data to read; end of file reached!");
                    //auto reset to the beginning of the file
                    this.Offset = 0;
                    this.FileReader.BaseStream.Seek(0, SeekOrigin.Begin);
                }

                line = this.FileReader.ReadLine();
                this.Offset++;
            }

            try
            {
                string[] parts = line.Split('\t');

                ushort sNetworkId = ushort.Parse(parts[0]);
                ulong xuid = (ulong)long.Parse(parts[1]);
                string userId = parts[2];
                string gamerTag = parts[3];
                Visibility visibility = (Visibility)int.Parse(parts[4]);
                DateTime lastAccessed = DateTime.Parse(parts[5]);

                return new DirectoryDataRow() { SNetworkID = sNetworkId, Xuid = xuid, SNUserId = userId, GamerTag = gamerTag, Visibility = visibility, LastAccessedTime = lastAccessed };
            }
            catch (Exception e)
            {
                throw new ApplicationException(String.Format("Error parsing row {0}, with data: \"{1}\".", this.Offset, line), e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\MainForm.Designer.cs ===
﻿namespace WcfPerfUI
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.start = new System.Windows.Forms.Button();
            this.stop = new System.Windows.Forms.Button();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.lastLatency = new System.Windows.Forms.Label();
            this.label15 = new System.Windows.Forms.Label();
            this.avgLatency = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.auth = new System.Windows.Forms.ComboBox();
            this.api = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.maxThreads = new System.Windows.Forms.NumericUpDown();
            this.label5 = new System.Windows.Forms.Label();
            this.targetTPS = new System.Windows.Forms.NumericUpDown();
            this.activeThreads = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.failed = new System.Windows.Forms.Label();
            this.passed = new System.Windows.Forms.Label();
            this.tps = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.tabPage4 = new System.Windows.Forms.TabPage();
            this.titleId = new System.Windows.Forms.TextBox();
            this.label18 = new System.Windows.Forms.Label();
            this.dataOffset = new System.Windows.Forms.NumericUpDown();
            this.label17 = new System.Windows.Forms.Label();
            this.label14 = new System.Windows.Forms.Label();
            this.authDataPath = new System.Windows.Forms.TextBox();
            this.label11 = new System.Windows.Forms.Label();
            this.directoryDataPath = new System.Windows.Forms.TextBox();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.maxNumberOfLookups = new System.Windows.Forms.TextBox();
            this.label16 = new System.Windows.Forms.Label();
            this.minNumberOfLookups = new System.Windows.Forms.TextBox();
            this.numberOfLookups = new System.Windows.Forms.TextBox();
            this.rangeLookups = new System.Windows.Forms.RadioButton();
            this.exactNumber = new System.Windows.Forms.RadioButton();
            this.label12 = new System.Windows.Forms.Label();
            this.percentVisible = new System.Windows.Forms.NumericUpDown();
            this.label10 = new System.Windows.Forms.Label();
            this.percentInDirectory = new System.Windows.Forms.NumericUpDown();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.label9 = new System.Windows.Forms.Label();
            this.latencies = new System.Windows.Forms.TextBox();
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreServerSSLErrorsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutLiveConnectPerfToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.networkId = new System.Windows.Forms.TextBox();
            this.label19 = new System.Windows.Forms.Label();
            this.label20 = new System.Windows.Forms.Label();
            this.errors = new System.Windows.Forms.TextBox();
            this.tabPage5 = new System.Windows.Forms.TabPage();
            this.tracing = new System.Windows.Forms.TextBox();
            this.maxLatency = new System.Windows.Forms.Label();
            this.label22 = new System.Windows.Forms.Label();
            this.minLatency = new System.Windows.Forms.Label();
            this.label23 = new System.Windows.Forms.Label();
            this.label21 = new System.Windows.Forms.Label();
            this.percentRefresh = new System.Windows.Forms.NumericUpDown();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.groupBox1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.maxThreads)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.targetTPS)).BeginInit();
            this.tabPage4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dataOffset)).BeginInit();
            this.tabPage2.SuspendLayout();
            this.groupBox2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.percentVisible)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.percentInDirectory)).BeginInit();
            this.tabPage3.SuspendLayout();
            this.menuStrip.SuspendLayout();
            this.tabPage5.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.percentRefresh)).BeginInit();
            this.SuspendLayout();
            // 
            // start
            // 
            this.start.Location = new System.Drawing.Point(16, 391);
            this.start.Name = "start";
            this.start.Size = new System.Drawing.Size(75, 23);
            this.start.TabIndex = 1;
            this.start.Text = "&Start";
            this.start.UseVisualStyleBackColor = true;
            this.start.Click += new System.EventHandler(this.start_Click);
            // 
            // stop
            // 
            this.stop.Location = new System.Drawing.Point(97, 391);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 2;
            this.stop.Text = "S&top";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // tabControl1
            // 
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage4);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Controls.Add(this.tabPage3);
            this.tabControl1.Controls.Add(this.tabPage5);
            this.tabControl1.Location = new System.Drawing.Point(12, 39);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(529, 337);
            this.tabControl1.TabIndex = 3;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.groupBox1);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(521, 311);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Main";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.minLatency);
            this.groupBox1.Controls.Add(this.label23);
            this.groupBox1.Controls.Add(this.maxLatency);
            this.groupBox1.Controls.Add(this.label22);
            this.groupBox1.Controls.Add(this.lastLatency);
            this.groupBox1.Controls.Add(this.label15);
            this.groupBox1.Controls.Add(this.avgLatency);
            this.groupBox1.Controls.Add(this.label13);
            this.groupBox1.Controls.Add(this.auth);
            this.groupBox1.Controls.Add(this.api);
            this.groupBox1.Controls.Add(this.label8);
            this.groupBox1.Controls.Add(this.label7);
            this.groupBox1.Controls.Add(this.maxThreads);
            this.groupBox1.Controls.Add(this.label5);
            this.groupBox1.Controls.Add(this.targetTPS);
            this.groupBox1.Controls.Add(this.activeThreads);
            this.groupBox1.Controls.Add(this.label6);
            this.groupBox1.Controls.Add(this.label4);
            this.groupBox1.Controls.Add(this.failed);
            this.groupBox1.Controls.Add(this.passed);
            this.groupBox1.Controls.Add(this.tps);
            this.groupBox1.Controls.Add(this.label3);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Location = new System.Drawing.Point(12, 17);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(499, 214);
            this.groupBox1.TabIndex = 4;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Stats";
            // 
            // lastLatency
            // 
            this.lastLatency.AutoSize = true;
            this.lastLatency.Location = new System.Drawing.Point(112, 136);
            this.lastLatency.Name = "lastLatency";
            this.lastLatency.Size = new System.Drawing.Size(13, 13);
            this.lastLatency.TabIndex = 19;
            this.lastLatency.Text = "0";
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Location = new System.Drawing.Point(15, 135);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(93, 13);
            this.label15.TabIndex = 18;
            this.label15.Text = "Last Latency (ms):";
            // 
            // avgLatency
            // 
            this.avgLatency.AutoSize = true;
            this.avgLatency.Location = new System.Drawing.Point(112, 115);
            this.avgLatency.Name = "avgLatency";
            this.avgLatency.Size = new System.Drawing.Size(13, 13);
            this.avgLatency.TabIndex = 17;
            this.avgLatency.Text = "0";
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(12, 114);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(95, 13);
            this.label13.TabIndex = 16;
            this.label13.Text = "Avg. Latency (ms):";
            // 
            // auth
            // 
            this.auth.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.auth.FormattingEnabled = true;
            this.auth.Items.AddRange(new object[] {
            "Client Certificate",
            "Console STS Token",
            "User STS Token"});
            this.auth.Location = new System.Drawing.Point(330, 51);
            this.auth.Name = "auth";
            this.auth.Size = new System.Drawing.Size(144, 21);
            this.auth.TabIndex = 15;
            // 
            // api
            // 
            this.api.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.api.FormattingEnabled = true;
            this.api.Items.AddRange(new object[] {
            "GetAuthInfo",
            "RemoveAuthInfo",
            "SetAuthInfo",
            "GetSNetworkInfo",
            "GetSNetworkInfos",
            "GetSNUserInfoBySNUId",
            "GetSNUserInfoByXUID",
            "GetSNUserInfos",
            "RemoveSNUserInfo",
            "SetSNUserInfo"});
            this.api.Location = new System.Drawing.Point(330, 23);
            this.api.Name = "api";
            this.api.Size = new System.Drawing.Size(144, 21);
            this.api.TabIndex = 14;
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(246, 55);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(78, 13);
            this.label8.TabIndex = 13;
            this.label8.Text = "Authentication:";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(297, 27);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(27, 13);
            this.label7.TabIndex = 12;
            this.label7.Text = "API:";
            // 
            // maxThreads
            // 
            this.maxThreads.Location = new System.Drawing.Point(330, 111);
            this.maxThreads.Name = "maxThreads";
            this.maxThreads.Size = new System.Drawing.Size(144, 20);
            this.maxThreads.TabIndex = 11;
            this.maxThreads.Value = new decimal(new int[] {
            10,
            0,
            0,
            0});
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(252, 114);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(72, 13);
            this.label5.TabIndex = 10;
            this.label5.Text = "Max Threads:";
            // 
            // targetTPS
            // 
            this.targetTPS.Location = new System.Drawing.Point(330, 81);
            this.targetTPS.Maximum = new decimal(new int[] {
            10000,
            0,
            0,
            0});
            this.targetTPS.Name = "targetTPS";
            this.targetTPS.Size = new System.Drawing.Size(144, 20);
            this.targetTPS.TabIndex = 9;
            this.targetTPS.Value = new decimal(new int[] {
            100,
            0,
            0,
            0});
            // 
            // activeThreads
            // 
            this.activeThreads.AutoSize = true;
            this.activeThreads.Location = new System.Drawing.Point(112, 45);
            this.activeThreads.Name = "activeThreads";
            this.activeThreads.Size = new System.Drawing.Size(13, 13);
            this.activeThreads.TabIndex = 8;
            this.activeThreads.Text = "0";
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(24, 45);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(82, 13);
            this.label6.TabIndex = 7;
            this.label6.Text = "Active Threads:";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(259, 84);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(65, 13);
            this.label4.TabIndex = 6;
            this.label4.Text = "Target TPS:";
            // 
            // failed
            // 
            this.failed.AutoSize = true;
            this.failed.Location = new System.Drawing.Point(112, 85);
            this.failed.Name = "failed";
            this.failed.Size = new System.Drawing.Size(13, 13);
            this.failed.TabIndex = 5;
            this.failed.Text = "0";
            // 
            // passed
            // 
            this.passed.AutoSize = true;
            this.passed.Location = new System.Drawing.Point(112, 64);
            this.passed.Name = "passed";
            this.passed.Size = new System.Drawing.Size(13, 13);
            this.passed.TabIndex = 4;
            this.passed.Text = "0";
            // 
            // tps
            // 
            this.tps.AutoSize = true;
            this.tps.Location = new System.Drawing.Point(112, 26);
            this.tps.Name = "tps";
            this.tps.Size = new System.Drawing.Size(34, 13);
            this.tps.TabIndex = 3;
            this.tps.Text = "0.000";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(68, 85);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(38, 13);
            this.label3.TabIndex = 2;
            this.label3.Text = "Failed:";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(61, 64);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(45, 13);
            this.label2.TabIndex = 1;
            this.label2.Text = "Passed:";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(38, 26);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(68, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Current TPS:";
            // 
            // tabPage4
            // 
            this.tabPage4.Controls.Add(this.networkId);
            this.tabPage4.Controls.Add(this.label19);
            this.tabPage4.Controls.Add(this.titleId);
            this.tabPage4.Controls.Add(this.label18);
            this.tabPage4.Controls.Add(this.dataOffset);
            this.tabPage4.Controls.Add(this.label17);
            this.tabPage4.Controls.Add(this.label14);
            this.tabPage4.Controls.Add(this.authDataPath);
            this.tabPage4.Controls.Add(this.label11);
            this.tabPage4.Controls.Add(this.directoryDataPath);
            this.tabPage4.Location = new System.Drawing.Point(4, 22);
            this.tabPage4.Name = "tabPage4";
            this.tabPage4.Size = new System.Drawing.Size(521, 311);
            this.tabPage4.TabIndex = 3;
            this.tabPage4.Text = "Input Data";
            this.tabPage4.UseVisualStyleBackColor = true;
            // 
            // titleId
            // 
            this.titleId.Location = new System.Drawing.Point(133, 198);
            this.titleId.Name = "titleId";
            this.titleId.Size = new System.Drawing.Size(88, 20);
            this.titleId.TabIndex = 7;
            this.titleId.Text = "584D07D6";
            // 
            // label18
            // 
            this.label18.AutoSize = true;
            this.label18.Location = new System.Drawing.Point(88, 202);
            this.label18.Name = "label18";
            this.label18.Size = new System.Drawing.Size(44, 13);
            this.label18.TabIndex = 6;
            this.label18.Text = "Title ID:";
            // 
            // dataOffset
            // 
            this.dataOffset.Location = new System.Drawing.Point(133, 166);
            this.dataOffset.Maximum = new decimal(new int[] {
            1000000,
            0,
            0,
            0});
            this.dataOffset.Name = "dataOffset";
            this.dataOffset.Size = new System.Drawing.Size(88, 20);
            this.dataOffset.TabIndex = 5;
            this.dataOffset.Value = new decimal(new int[] {
            10000,
            0,
            0,
            0});
            // 
            // label17
            // 
            this.label17.AutoSize = true;
            this.label17.Location = new System.Drawing.Point(37, 169);
            this.label17.Name = "label17";
            this.label17.Size = new System.Drawing.Size(94, 13);
            this.label17.TabIndex = 4;
            this.label17.Text = "Offset Per Thread:";
            // 
            // label14
            // 
            this.label14.AutoSize = true;
            this.label14.Location = new System.Drawing.Point(34, 101);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(169, 13);
            this.label14.TabIndex = 3;
            this.label14.Text = "Authentication Data CSV File Path";
            // 
            // authDataPath
            // 
            this.authDataPath.Location = new System.Drawing.Point(36, 118);
            this.authDataPath.Name = "authDataPath";
            this.authDataPath.Size = new System.Drawing.Size(367, 20);
            this.authDataPath.TabIndex = 2;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(35, 39);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(143, 13);
            this.label11.TabIndex = 1;
            this.label11.Text = "Directory Data CSV File Path";
            // 
            // directoryDataPath
            // 
            this.directoryDataPath.Location = new System.Drawing.Point(37, 56);
            this.directoryDataPath.Name = "directoryDataPath";
            this.directoryDataPath.Size = new System.Drawing.Size(367, 20);
            this.directoryDataPath.TabIndex = 0;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.label21);
            this.tabPage2.Controls.Add(this.percentRefresh);
            this.tabPage2.Controls.Add(this.groupBox2);
            this.tabPage2.Controls.Add(this.label12);
            this.tabPage2.Controls.Add(this.percentVisible);
            this.tabPage2.Controls.Add(this.label10);
            this.tabPage2.Controls.Add(this.percentInDirectory);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(521, 311);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "GetSNUserInfos";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.maxNumberOfLookups);
            this.groupBox2.Controls.Add(this.label16);
            this.groupBox2.Controls.Add(this.minNumberOfLookups);
            this.groupBox2.Controls.Add(this.numberOfLookups);
            this.groupBox2.Controls.Add(this.rangeLookups);
            this.groupBox2.Controls.Add(this.exactNumber);
            this.groupBox2.Location = new System.Drawing.Point(43, 22);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(255, 100);
            this.groupBox2.TabIndex = 5;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Number of Friends to Lookup";
            // 
            // maxNumberOfLookups
            // 
            this.maxNumberOfLookups.Location = new System.Drawing.Point(172, 58);
            this.maxNumberOfLookups.Name = "maxNumberOfLookups";
            this.maxNumberOfLookups.Size = new System.Drawing.Size(65, 20);
            this.maxNumberOfLookups.TabIndex = 5;
            this.maxNumberOfLookups.Text = "1000";
            // 
            // label16
            // 
            this.label16.AutoSize = true;
            this.label16.Location = new System.Drawing.Point(153, 65);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(16, 13);
            this.label16.TabIndex = 4;
            this.label16.Text = "to";
            // 
            // minNumberOfLookups
            // 
            this.minNumberOfLookups.Location = new System.Drawing.Point(83, 58);
            this.minNumberOfLookups.Name = "minNumberOfLookups";
            this.minNumberOfLookups.Size = new System.Drawing.Size(65, 20);
            this.minNumberOfLookups.TabIndex = 3;
            this.minNumberOfLookups.Text = "50";
            // 
            // numberOfLookups
            // 
            this.numberOfLookups.Location = new System.Drawing.Point(118, 29);
            this.numberOfLookups.Name = "numberOfLookups";
            this.numberOfLookups.Size = new System.Drawing.Size(65, 20);
            this.numberOfLookups.TabIndex = 2;
            this.numberOfLookups.Text = "150";
            // 
            // rangeLookups
            // 
            this.rangeLookups.AutoSize = true;
            this.rangeLookups.Location = new System.Drawing.Point(17, 58);
            this.rangeLookups.Name = "rangeLookups";
            this.rangeLookups.Size = new System.Drawing.Size(60, 17);
            this.rangeLookups.TabIndex = 1;
            this.rangeLookups.Text = "Range:";
            this.rangeLookups.UseVisualStyleBackColor = true;
            // 
            // exactNumber
            // 
            this.exactNumber.AutoSize = true;
            this.exactNumber.Checked = true;
            this.exactNumber.Location = new System.Drawing.Point(17, 29);
            this.exactNumber.Name = "exactNumber";
            this.exactNumber.Size = new System.Drawing.Size(95, 17);
            this.exactNumber.TabIndex = 0;
            this.exactNumber.TabStop = true;
            this.exactNumber.Text = "Exact Number:";
            this.exactNumber.UseVisualStyleBackColor = true;
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(52, 169);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(175, 13);
            this.label12.TabIndex = 4;
            this.label12.Text = "Percent Publicly Visible in Directory:";
            // 
            // percentVisible
            // 
            this.percentVisible.Location = new System.Drawing.Point(229, 166);
            this.percentVisible.Name = "percentVisible";
            this.percentVisible.Size = new System.Drawing.Size(69, 20);
            this.percentVisible.TabIndex = 3;
            this.percentVisible.Value = new decimal(new int[] {
            80,
            0,
            0,
            0});
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(40, 142);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(186, 13);
            this.label10.TabIndex = 1;
            this.label10.Text = "Percent in Directory (Have XBL Acct):";
            // 
            // percentInDirectory
            // 
            this.percentInDirectory.Location = new System.Drawing.Point(229, 139);
            this.percentInDirectory.Name = "percentInDirectory";
            this.percentInDirectory.Size = new System.Drawing.Size(69, 20);
            this.percentInDirectory.TabIndex = 0;
            this.percentInDirectory.Value = new decimal(new int[] {
            10,
            0,
            0,
            0});
            // 
            // tabPage3
            // 
            this.tabPage3.Controls.Add(this.label20);
            this.tabPage3.Controls.Add(this.errors);
            this.tabPage3.Controls.Add(this.label9);
            this.tabPage3.Controls.Add(this.latencies);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Size = new System.Drawing.Size(521, 311);
            this.tabPage3.TabIndex = 2;
            this.tabPage3.Text = "Output";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(23, 14);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(104, 13);
            this.label9.TabIndex = 7;
            this.label9.Text = "Client Latencies (ms)";
            // 
            // latencies
            // 
            this.latencies.Location = new System.Drawing.Point(20, 30);
            this.latencies.Multiline = true;
            this.latencies.Name = "latencies";
            this.latencies.ReadOnly = true;
            this.latencies.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.latencies.Size = new System.Drawing.Size(476, 119);
            this.latencies.TabIndex = 6;
            this.latencies.WordWrap = false;
            // 
            // menuStrip
            // 
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip.Location = new System.Drawing.Point(0, 0);
            this.menuStrip.Name = "menuStrip";
            this.menuStrip.Size = new System.Drawing.Size(560, 24);
            this.menuStrip.TabIndex = 4;
            this.menuStrip.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ignoreServerSSLErrorsToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // ignoreServerSSLErrorsToolStripMenuItem
            // 
            this.ignoreServerSSLErrorsToolStripMenuItem.CheckOnClick = true;
            this.ignoreServerSSLErrorsToolStripMenuItem.Name = "ignoreServerSSLErrorsToolStripMenuItem";
            this.ignoreServerSSLErrorsToolStripMenuItem.Size = new System.Drawing.Size(197, 22);
            this.ignoreServerSSLErrorsToolStripMenuItem.Text = "&Ignore Server SSL Errors";
            this.ignoreServerSSLErrorsToolStripMenuItem.Click += new System.EventHandler(this.ignoreServerSSLErrorsToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutLiveConnectPerfToolStripMenuItem});
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // aboutLiveConnectPerfToolStripMenuItem
            // 
            this.aboutLiveConnectPerfToolStripMenuItem.Name = "aboutLiveConnectPerfToolStripMenuItem";
            this.aboutLiveConnectPerfToolStripMenuItem.Size = new System.Drawing.Size(212, 22);
            this.aboutLiveConnectPerfToolStripMenuItem.Text = "&About Live Connect Perf...";
            this.aboutLiveConnectPerfToolStripMenuItem.Click += new System.EventHandler(this.aboutLiveConnectPerfToolStripMenuItem_Click);
            // 
            // networkId
            // 
            this.networkId.Location = new System.Drawing.Point(133, 228);
            this.networkId.Name = "networkId";
            this.networkId.Size = new System.Drawing.Size(88, 20);
            this.networkId.TabIndex = 9;
            this.networkId.Text = "2";
            // 
            // label19
            // 
            this.label19.AutoSize = true;
            this.label19.Location = new System.Drawing.Point(68, 232);
            this.label19.Name = "label19";
            this.label19.Size = new System.Drawing.Size(64, 13);
            this.label19.TabIndex = 8;
            this.label19.Text = "Network ID:";
            // 
            // label20
            // 
            this.label20.AutoSize = true;
            this.label20.Location = new System.Drawing.Point(23, 159);
            this.label20.Name = "label20";
            this.label20.Size = new System.Drawing.Size(34, 13);
            this.label20.TabIndex = 9;
            this.label20.Text = "Errors";
            // 
            // errors
            // 
            this.errors.Location = new System.Drawing.Point(20, 175);
            this.errors.Multiline = true;
            this.errors.Name = "errors";
            this.errors.ReadOnly = true;
            this.errors.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.errors.Size = new System.Drawing.Size(476, 119);
            this.errors.TabIndex = 8;
            this.errors.WordWrap = false;
            // 
            // tabPage5
            // 
            this.tabPage5.Controls.Add(this.tracing);
            this.tabPage5.Location = new System.Drawing.Point(4, 22);
            this.tabPage5.Name = "tabPage5";
            this.tabPage5.Size = new System.Drawing.Size(521, 311);
            this.tabPage5.TabIndex = 4;
            this.tabPage5.Text = "Tracing";
            this.tabPage5.UseVisualStyleBackColor = true;
            // 
            // tracing
            // 
            this.tracing.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tracing.Location = new System.Drawing.Point(0, 0);
            this.tracing.Multiline = true;
            this.tracing.Name = "tracing";
            this.tracing.ReadOnly = true;
            this.tracing.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.tracing.Size = new System.Drawing.Size(521, 311);
            this.tracing.TabIndex = 0;
            this.tracing.WordWrap = false;
            // 
            // maxLatency
            // 
            this.maxLatency.AutoSize = true;
            this.maxLatency.Location = new System.Drawing.Point(112, 158);
            this.maxLatency.Name = "maxLatency";
            this.maxLatency.Size = new System.Drawing.Size(13, 13);
            this.maxLatency.TabIndex = 21;
            this.maxLatency.Text = "0";
            // 
            // label22
            // 
            this.label22.AutoSize = true;
            this.label22.Location = new System.Drawing.Point(16, 157);
            this.label22.Name = "label22";
            this.label22.Size = new System.Drawing.Size(93, 13);
            this.label22.TabIndex = 20;
            this.label22.Text = "Max Latency (ms):";
            // 
            // minLatency
            // 
            this.minLatency.AutoSize = true;
            this.minLatency.Location = new System.Drawing.Point(112, 180);
            this.minLatency.Name = "minLatency";
            this.minLatency.Size = new System.Drawing.Size(13, 13);
            this.minLatency.TabIndex = 23;
            this.minLatency.Text = "0";
            // 
            // label23
            // 
            this.label23.AutoSize = true;
            this.label23.Location = new System.Drawing.Point(20, 179);
            this.label23.Name = "label23";
            this.label23.Size = new System.Drawing.Size(90, 13);
            this.label23.TabIndex = 22;
            this.label23.Text = "Min Latency (ms):";
            // 
            // label21
            // 
            this.label21.AutoSize = true;
            this.label21.Location = new System.Drawing.Point(68, 197);
            this.label21.Name = "label21";
            this.label21.Size = new System.Drawing.Size(159, 13);
            this.label21.TabIndex = 7;
            this.label21.Text = "Percent of Gamertag Refreshes:";
            // 
            // percentRefresh
            // 
            this.percentRefresh.Location = new System.Drawing.Point(229, 194);
            this.percentRefresh.Name = "percentRefresh";
            this.percentRefresh.Size = new System.Drawing.Size(69, 20);
            this.percentRefresh.TabIndex = 6;
            this.percentRefresh.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(560, 429);
            this.Controls.Add(this.tabControl1);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.start);
            this.Controls.Add(this.menuStrip);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MainMenuStrip = this.menuStrip;
            this.MaximizeBox = false;
            this.Name = "MainForm";
            this.Text = "Live Connect Perf";
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.maxThreads)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.targetTPS)).EndInit();
            this.tabPage4.ResumeLayout(false);
            this.tabPage4.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dataOffset)).EndInit();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.groupBox2.ResumeLayout(false);
            this.groupBox2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.percentVisible)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.percentInDirectory)).EndInit();
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.tabPage5.ResumeLayout(false);
            this.tabPage5.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.percentRefresh)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button start;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.ComboBox auth;
        private System.Windows.Forms.ComboBox api;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.NumericUpDown maxThreads;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.NumericUpDown targetTPS;
        private System.Windows.Forms.Label activeThreads;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label failed;
        private System.Windows.Forms.Label passed;
        private System.Windows.Forms.Label tps;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.TextBox latencies;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.NumericUpDown percentInDirectory;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.NumericUpDown percentVisible;
        private System.Windows.Forms.Label avgLatency;
        private System.Windows.Forms.Label label13;
        private System.Windows.Forms.Label lastLatency;
        private System.Windows.Forms.Label label15;
        private System.Windows.Forms.TabPage tabPage4;
        private System.Windows.Forms.Label label14;
        private System.Windows.Forms.TextBox authDataPath;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.TextBox directoryDataPath;
        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreServerSSLErrorsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem aboutLiveConnectPerfToolStripMenuItem;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.RadioButton exactNumber;
        private System.Windows.Forms.TextBox maxNumberOfLookups;
        private System.Windows.Forms.Label label16;
        private System.Windows.Forms.TextBox minNumberOfLookups;
        private System.Windows.Forms.TextBox numberOfLookups;
        private System.Windows.Forms.RadioButton rangeLookups;
        private System.Windows.Forms.NumericUpDown dataOffset;
        private System.Windows.Forms.Label label17;
        private System.Windows.Forms.TextBox titleId;
        private System.Windows.Forms.Label label18;
        private System.Windows.Forms.TextBox networkId;
        private System.Windows.Forms.Label label19;
        private System.Windows.Forms.Label label20;
        private System.Windows.Forms.TextBox errors;
        private System.Windows.Forms.TabPage tabPage5;
        private System.Windows.Forms.TextBox tracing;
        private System.Windows.Forms.Label minLatency;
        private System.Windows.Forms.Label label23;
        private System.Windows.Forms.Label maxLatency;
        private System.Windows.Forms.Label label22;
        private System.Windows.Forms.Label label21;
        private System.Windows.Forms.NumericUpDown percentRefresh;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\LiveConnect.Test\Tools\WcfPerfUI\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.ServiceModel;
using System.Threading;
using System.Net;
using System.IO;
using System.Configuration;
using System.Diagnostics;

using LiveConnectWeb;
using LiveN.Test.Common;
using LiveN.Test.Common.Forms;
using LiveN.Test.Framework;
using LiveN.Test.Framework.Authorization;
using LiveConnect.Test.Common;

namespace WcfPerfUI
{
    /// <summary>
    /// 
    /// </summary>
    public partial class MainForm : Form
    {
        //the min number of requests that need to go through before we keep tally of min/max latency
        private const int LatencyRequestBurnInCount = 50;

        private static long totalCalls = 0;
        private static long passCount = 0;
        private static long failCount = 0;
        private static TimeSpan lastLatencyTime;
        private static TimeSpan totalTime = new TimeSpan();
        private static double minLatencyObserved;
        private static double maxLatencyObserved;
        private Stack<Thread> workerThreads = new Stack<Thread>();
        private static object threadSyncLock = new object();
        private static object timeSpanLock = new object();
        private System.Threading.Timer updateStats;

        static char[] BadSnuidChars = "<>:\",\\".ToCharArray();

        private const string GetSNUserInfoByXuidRequest = "<s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:a=\"http://www.w3.org/2005/08/addressing\" xmlns:u=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"><s:Header><a:Action s:mustUnderstand=\"1\">http://liveconnect.xboxlive.com/ILiveDirectory/GetSNUserInfoByXUID</a:Action><a:MessageID>urn:uuid:{0}</a:MessageID><a:ReplyTo><a:Address>http://www.w3.org/2005/08/addressing/anonymous</a:Address></a:ReplyTo><a:To s:mustUnderstand=\"1\">https://10.11.240.153/LiveConnect.svc</a:To><o:Security s:mustUnderstand=\"1\" xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><u:Timestamp u:Id=\"_0\"><u:Created>{1}</u:Created><u:Expires>{2}</u:Expires></u:Timestamp>{3}</o:Security></s:Header><s:Body><GetSNUserInfoByXUID xmlns=\"http://liveconnect.xboxlive.com\"><sNetworkId>3</sNetworkId><XUID>{4}</XUID></GetSNUserInfoByXUID></s:Body></s:Envelope>";

        private delegate int GetNumericUpDownValueHandler(NumericUpDown control);
        private delegate void UpdateLabelHandler(Label control, object value);
        private delegate string GetComboBoxTextHandler(ComboBox control);
        private delegate void UpdateTextBoxHandler(TextBox control, string text);

        /// <summary>
        /// 
        /// </summary>
        public MainForm()
        {
            InitializeComponent();
            this.api.SelectedIndex = 7;
            this.auth.SelectedIndex = 2;

            (Trace.Listeners["textbox"] as TextBoxTraceListener).TextBox = this.tracing;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void start_Click(object sender, EventArgs e)
        {
            //reset UI
            this.stop.Enabled = true;
            this.start.Enabled = false;
            this.latencies.Clear();
            this.errors.Clear();
            this.tracing.Clear();
            
            //reset counters
            totalCalls = 0;
            passCount = 0;
            failCount = 0;
            totalTime = new TimeSpan();
            minLatencyObserved = Double.MaxValue;
            maxLatencyObserved = -1;

            try
            {
                LiveN.Test.Framework.Authorization.Authorization.InstallClientCertificateBySubject(
                    Path.Combine(Utility.CurrentDirectory, ConfigurationManager.AppSettings["TestCertificate"]),
                    ConfigurationManager.AppSettings["TestCertificateSubject"],
                    ConfigurationManager.AppSettings["TestCertificatePassword"],
                    "LiveConnect");
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, String.Format("Error finding or installing required client certificate to authenticate with LiveConnect; {0}", ex.Message), "Error Installing Certificate", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            lock (threadSyncLock)
            {
                //NOTE: you wouldn't want this for loop here, if Max TPS is implemented....
                for (int i = 0; i < this.maxThreads.Value; i++)
                {
                    WorkerThreadParameters workerThreadArgs = new WorkerThreadParameters()
                    {
                        Api = this.api.Text,
                        AuthenticationMode = AuthModeFromCombBox(),
                        TitleId = this.titleId.Text,
                        NetworkId = ushort.Parse(this.networkId.Text),
                        DirectoryData = new LiveConnectDirectoryData(this.directoryDataPath.Text, i + (int)this.dataOffset.Value),
                        AuthenticationData = new LiveConnectAuthenticationData(this.authDataPath.Text, i + (int)this.dataOffset.Value),
                        GetSNUserInfosState = new GetSNUserInfosThreadState()
                        {
                            ExactNumberOfLookups = int.Parse(this.numberOfLookups.Text),
                            MinNumberOfLookups = int.Parse(this.minNumberOfLookups.Text),
                            MaxNumberOfLookups = int.Parse(this.maxNumberOfLookups.Text),
                            UseExact = this.exactNumber.Checked,
                            PercentInDirectory = ((double)this.percentInDirectory.Value / (double)100),
                            PercentVisible = ((double)this.percentVisible.Value / (double)100),
                            PercentGamerTagRefresh = ((double)this.percentRefresh.Value / (double)100)
                        }
                    };
                    Thread worker = new Thread(new ParameterizedThreadStart(CallLiveConnect));
                    this.workerThreads.Push(worker);
                    worker.Start(workerThreadArgs);
                }
            }

            this.updateStats = new System.Threading.Timer(new TimerCallback(UpdateStats), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }

        /// <summary>
        /// 
        /// </summary>
        private void CallLiveConnect(object state)
        {
            WorkerThreadParameters parameters = state as WorkerThreadParameters;
            StsToken stsTokenGenerator = new StsToken(ConfigurationManager.AppSettings["TestCertificateSubject"]);
            
            LiveDirectoryWrapper directoryWrapper = new LiveDirectoryWrapper();
            directoryWrapper.AuthenticationMode = parameters.AuthenticationMode;
            
            LiveAuthenticationWrapper authWrapper = new LiveAuthenticationWrapper();
            authWrapper.AuthenticationMode = parameters.AuthenticationMode;

            double calls = 0;
            uint title;
            if (!uint.TryParse(parameters.TitleId, out title))
                title = Convert.ToUInt32(parameters.TitleId, 16);

            StsTokenParameters stsParams = new StsTokenParameters() { Xuid = Utility.GenerateRandomUInt64(), TitleId = title, MachineId = Utility.GenerateRandomUInt64(), GamerTag = XboxLiveAccount.GenerateRandomGamerTag(), MinutesToExpire = 4320 };    //token should be good for 72 hours
            string stsToken;
            if (parameters.AuthenticationMode == Authentication.ConsoleStsToken)
                stsToken = stsTokenGenerator.GenerateConsoleToken(stsParams);
            else
                stsToken = stsTokenGenerator.GenerateUserToken(stsParams);

            while (true)
            {
                Stopwatch stopWatch = new Stopwatch();

                try
                {
                    switch (parameters.Api)
                    {
                        case "GetAuthInfo":
                            {
                                AuthenticationDataRow row = parameters.AuthenticationData.GetNextRow();
                                stsParams.TitleId = NetworkToTitleID(row.SNetworkID);
                                stsParams.Xuid = row.Xuid;
                                ulong machineId;
                                if (ulong.TryParse(row.DeviceId, out machineId))
                                    stsParams.MachineId = machineId;
                                
                                stopWatch.Start();
                                SNAuthInfo actualAuthInfo = authWrapper.GetAuthInfo(row.SNetworkID, row.Xuid, row.DeviceId.Trim(), stsParams);
                                break;
                            }
                        case "RemoveAuthInfo":
                            {
                                break;
                            }
                        case "SetAuthInfo":
                            {
                                SNUserInfo userInfo = new SNUserInfo() { SNUserID = Utility.GenerateRandomString(64, BadSnuidChars), GamerTag = Utility.GenerateRandomString(10), XUID = Utility.GenerateRandomUInt64(), Visibility = Visibility.Everyone };
                                SNAuthInfo authInfo = new SNAuthInfo() { SNUserID = userInfo.SNUserID, Token = Utility.GenerateRandomString() };
                                ushort sNetwork = (ushort)Utility.GenerateRandomNumber(2, 3);
                                string deviceId = Utility.GenerateRandomUInt64().ToString();
                                stsParams.Xuid = userInfo.XUID;
                                stsParams.TitleId = NetworkToTitleID(sNetwork);
                                ulong machineId;
                                if (ulong.TryParse(deviceId, out machineId))
                                    stsParams.MachineId = machineId;

                                stopWatch.Start();
                                authWrapper.SetAuthInfo(sNetwork, userInfo.XUID, userInfo.GamerTag, deviceId, authInfo, true, userInfo.Visibility, stsParams);
                                break;
                            }
                        case "GetSNetworkInfo":
                            {
                                stopWatch.Start();
                                SNetworkInfo network = directoryWrapper.GetSNetworkInfo((ushort)Utility.GenerateRandomNumber(1, 3), stsParams);
                                break;
                            }
                        case "GetSNetworkInfos":
                            {
                                stopWatch.Start();
                                SNetworkInfo[] networks = directoryWrapper.GetSNetworkInfos(stsParams);
                                break;
                            }
                        case "GetSNUserInfoBySNUId":
                            {
                                DirectoryDataRow row = parameters.DirectoryData.GetNextRow();
                                stsParams.TitleId = NetworkToTitleID(row.SNetworkID);
                                stsParams.Xuid = row.Xuid;

                                stopWatch.Start();
                                SNUserInfo userInfo = directoryWrapper.GetSNUserInfoBySNUId(row.SNetworkID, row.SNUserId, stsParams);
                                break;
                            }
                        case "GetSNUserInfoByXUID":
                            {
                                //DirectoryDataRow row = directoryData.GetNextRow();
                                //stsParams.TitleId = NetworkToTitleID(row.SNetworkID);
                                //stsParams.Xuid = row.Xuid;
                                //SNUserInfo userInfo = directoryWrapper.GetSNUserInfoByXUID(row.SNetworkID, row.Xuid, stsParams);

                                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(System.Configuration.ConfigurationManager.AppSettings["HttpPostUrl"]);
                                request.ContentType = "application/soap+xml; charset=utf-8";
                                request.Method = "POST";
                                request.Timeout = 30000;

                                DateTime utcNow = DateTime.UtcNow;
                                string soapXml = String.Format(GetSNUserInfoByXuidRequest, Guid.NewGuid(), utcNow.ToString("o"), utcNow.AddHours(1).ToString("o"), stsToken, stsParams.Xuid);

                                using (StreamWriter writer = new StreamWriter(request.GetRequestStream()))
                                {
                                    writer.Write(soapXml);
                                }

                                HttpWebResponse response = null;

                                try
                                {
                                    string soapResponse;
                                    stopWatch.Start();
                                    response = (HttpWebResponse)request.GetResponse();
                                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                    {
                                        soapResponse = reader.ReadToEnd();
                                    }
                                }
                                catch (WebException e)
                                {
                                    string suck = e.ToString();
                                }
                                finally
                                {
                                    if (response != null)
                                        response.Close();
                                }


                                break;
                            }
                        case "GetSNUserInfos":
                            {
                                int numberOfLookups = parameters.GetSNUserInfosState.ExactNumberOfLookups;
                                if(!parameters.GetSNUserInfosState.UseExact)
                                {
                                    Random rnd = new Random(unchecked((int)DateTime.Now.Ticks));
                                    //Max is inclusive
                                    numberOfLookups = rnd.Next(parameters.GetSNUserInfosState.MinNumberOfLookups, parameters.GetSNUserInfosState.MaxNumberOfLookups + 1);
                                }

                                string[] userIds = new string[numberOfLookups];
                                int numberInDirectory = (int)(numberOfLookups * parameters.GetSNUserInfosState.PercentInDirectory);
                                int numberVisible = (int)(numberInDirectory * parameters.GetSNUserInfosState.PercentVisible);

                                int i;
                                for(i=0; i<numberOfLookups - numberInDirectory; i++)
                                {
                                    userIds[i] = Utility.GenerateRandomString(10, BadSnuidChars);
                                }

                                for(int j=0; j<numberInDirectory; j++)
                                {
                                    if(j < numberVisible)
                                        userIds[i++] = parameters.DirectoryData.GetNextRow(parameters.NetworkId, Visibility.Everyone).SNUserId;
                                    else
                                        userIds[i++] = parameters.DirectoryData.GetNextRow(parameters.NetworkId, Visibility.Me).SNUserId;
                                }

                                double updateGamertagPercent = parameters.GetSNUserInfosState.PercentGamerTagRefresh * calls;
                                if (updateGamertagPercent >= 1)
                                {
                                    string newGamerTag = XboxLiveAccount.GenerateRandomGamerTag();
                                    ulong realXuid = parameters.DirectoryData.GetNextRow(parameters.NetworkId).Xuid; //we need a real xuid (row) in order to update...
                                    Trace.TraceInformation("Simulating gamertag refresh from {0} -> {1}, for xuid {2} ({3})...", stsParams.GamerTag, newGamerTag, realXuid, (long)realXuid);
                                    stsParams.Xuid = realXuid;
                                    stsParams.GamerTag = newGamerTag;
                                    calls = 0;
                                }
                                else
                                    calls++;

                                stopWatch.Start(); 
                                SNUserInfo[] userInfos = directoryWrapper.GetSNUserInfos(parameters.NetworkId, userIds, stsParams);
                                //basic, quick validation
                                if (userInfos.Length != numberVisible)
                                    throw new LiveConnectTestFailureException("Error validating output from GetSNUserInfos; expected to find {0} users published, but found {1} instead.", numberVisible, userInfos.Length);
                                break;
                            }
                        case "RemoveSNUserInfo":
                            {
                                ushort sNetwork = (ushort)Utility.GenerateRandomNumber(2, 3);
                                SNUserInfo user = new SNUserInfo() { SNUserID = Utility.GenerateRandomString(64), GamerTag = Utility.GenerateRandomString(10), XUID = Utility.GenerateRandomUInt64(), Visibility = Visibility.Everyone };

                                stsParams.Xuid = user.XUID;
                                stsParams.TitleId = NetworkToTitleID(sNetwork);

                                stopWatch.Start();
                                directoryWrapper.SetSNUserInfo(sNetwork, user, stsParams);

                                //
                                directoryWrapper.RemoveSNUserInfo(sNetwork, user.XUID, stsParams);

                                break;
                            }
                        case "SetSNUserInfo":
                            {
                                ushort sNetwork = (ushort)Utility.GenerateRandomNumber(2, 3);
                                SNUserInfo user = new SNUserInfo() { SNUserID = Utility.GenerateRandomString(64, BadSnuidChars), GamerTag = Utility.GenerateRandomString(10), XUID = Utility.GenerateRandomUInt64(), Visibility = Visibility.Everyone };

                                stsParams.Xuid = user.XUID;
                                stsParams.TitleId = NetworkToTitleID(sNetwork);

                                stopWatch.Start(); 
                                directoryWrapper.SetSNUserInfo(sNetwork, user, stsParams);
                                break;
                            }
                    }

                    Interlocked.Increment(ref passCount);
                }
                catch (ThreadAbortException)
                {
                    //perf run is being stopped; we don't need to do anything
                }
                catch (Exception e)
                {
                    Interlocked.Increment(ref failCount);
                    UpdateTextBox(this.errors, String.Format("------------------------------------------------------------\r\n{0} - {1}\r\n------------------------------------------------------------\r\n{2}", DateTime.Now, e.Message, e.ToString()));
                }
                finally
                {
                    stopWatch.Stop();
                    
                    Interlocked.Increment(ref totalCalls);
                    lastLatencyTime = stopWatch.Elapsed;

                    if (LatencyRequestBurnInCount < totalCalls)
                    {
                        if (lastLatencyTime.TotalMilliseconds < minLatencyObserved)
                            Interlocked.Exchange(ref minLatencyObserved, lastLatencyTime.TotalMilliseconds);

                        if (lastLatencyTime.TotalMilliseconds > maxLatencyObserved)
                            Interlocked.Exchange(ref maxLatencyObserved, lastLatencyTime.TotalMilliseconds);
                    }

                    lock (timeSpanLock)
                    {
                        totalTime = totalTime.Add(stopWatch.Elapsed);
                    }                    
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="networkId"></param>
        /// <returns></returns>
        private static uint NetworkToTitleID(ushort networkId)
        {
            if (networkId == 1)
                return 0xFFFE07D2;  //fake title for Windows Live
            if (networkId == 2)
                return 0x584807E1;  //FB
            return 0xFFFE07D1;      //Twitter
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void UpdateStats(object state)
        {
            //int targetTps = GetNumericUpDownValue(this.targetTPS);
            //int maxThreads = GetNumericUpDownValue(this.maxThreads);

            //lock (threadSyncLock)
            //{
            //    if (workerThreads.Count < maxThreads)
            //    {

            //        WorkerThreadParameters workerThreadArgs = new WorkerThreadParameters() { Api = GetComboBoxText(this.api), AuthenticationMode = AuthModeFromCombBox() };
            //        Thread worker = new Thread(new ParameterizedThreadStart(CallLiveConnect));
            //        this.workerThreads.Push(worker);
            //        worker.Start(workerThreadArgs);
            //    }
            //    else if(workerThreads.Count > maxThreads)
            //    {
            //        Thread worker = workerThreads.Pop();
            //        worker.Abort();
            //    }
            //}

            //if (totalCalls < targetTps)
            //{
            //    if (workerThreads.Count < maxThreads)
            //    {
            //        lock (threadSyncLock)
            //        {
            //            WorkerThreadParameters workerThreadArgs = new WorkerThreadParameters() { Api = GetComboBoxText(this.api), AuthenticationMode = (GetComboBoxText(this.auth).Equals("Certificate", StringComparison.OrdinalIgnoreCase) ? Authentication.ClientCertificate : Authentication.Sts) };                        
            //            Thread worker = new Thread(new ParameterizedThreadStart(CallLiveConnect));
            //            this.workerThreads.Push(worker);
            //            worker.Start(workerThreadArgs);
            //        }
            //    }
            //}
            //else if (totalCalls > targetTps)
            //{
            //    double percentOver = (double)targetTps / (double)totalCalls;
            //    if (percentOver < 0.8F)
            //    {
            //        lock (threadSyncLock)
            //        {
            //            Thread worker = workerThreads.Pop();
            //            worker.Abort();
            //        }
            //    }
            //}

            UpdateLabel(this.tps, totalCalls);
            //UpdateLabel(this.activeThreads, this.workerThreads.Count);
            UpdateLabel(this.passed, passCount);
            UpdateLabel(this.failed, failCount);
            UpdateLabel(this.lastLatency, lastLatencyTime.TotalMilliseconds);
            if(minLatencyObserved == Double.MaxValue)
                UpdateLabel(this.minLatency, "N/A");
            else
                UpdateLabel(this.minLatency, minLatencyObserved);
            if(maxLatencyObserved == -1)
                UpdateLabel(this.maxLatency, "N/A");
            else
            UpdateLabel(this.maxLatency, maxLatencyObserved);

            if (totalCalls > 0)
            {
                double avgTime = totalTime.TotalMilliseconds / (double)totalCalls;
                UpdateLabel(this.avgLatency, avgTime);
                UpdateTextBox(this.latencies, avgTime.ToString());
            }

            Interlocked.Exchange(ref totalCalls, 0);
            lock (timeSpanLock)
            {
                totalTime = new TimeSpan();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="control"></param>
        /// <returns></returns>
        private int GetNumericUpDownValue(NumericUpDown control)
        {
            if (control.InvokeRequired)
            {
                return (int)this.Invoke(new GetNumericUpDownValueHandler(GetNumericUpDownValue), control);
            }
            else
            {
                return (int)control.Value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="control"></param>
        /// <returns></returns>
        private string GetComboBoxText(ComboBox control)
        {
            if (control.InvokeRequired)
            {
                return (string)this.Invoke(new GetComboBoxTextHandler(GetComboBoxText), control);
            }
            else
            {
                return control.Text;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="control"></param>
        /// <param name="value"></param>
        private void UpdateLabel(Label control, object value)
        {
            if (control.InvokeRequired)
            {
                this.BeginInvoke(new UpdateLabelHandler(UpdateLabel), control, value);
            }
            else
            {
                control.Text = value.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="control"></param>
        /// <param name="value"></param>
        private void UpdateTextBox(TextBox control, string value)
        {
            if (control.InvokeRequired)
            {
                this.BeginInvoke(new UpdateTextBoxHandler(UpdateTextBox), control, value);
            }
            else
            {
                control.AppendText(value + Environment.NewLine);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stop_Click(object sender, EventArgs e)
        {
            this.stop.Enabled = false;
            this.start.Enabled = true;

            this.updateStats.Dispose();
            this.updateStats = null;

            lock (threadSyncLock)
            {
                while(this.workerThreads.Count != 0)
                {
                    Thread worker = this.workerThreads.Pop();
                    worker.Abort();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ignoreServerSSLErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.ignoreServerSSLErrorsToolStripMenuItem.Checked)
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (objSender, certificate, chain, sslPolicyErrors) => true;
            else
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (objSender, certificate, chain, sslPolicyErrors) => false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private Authentication AuthModeFromCombBox()
        {
            if (this.InvokeRequired)
            {
                return (Authentication)this.Invoke(new Func<Authentication>(AuthModeFromCombBox));
            }
            else
            {
                switch (this.auth.SelectedIndex)
                {
                    case 0:
                        return Authentication.ClientCertificate;
                    case 1:
                        return Authentication.ConsoleStsToken;
                    case 2:
                        return Authentication.UserStsToken;
                    default:
                        return Authentication.None;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutLiveConnectPerfToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (AboutForm about = new AboutForm("Live Connect Perf", "P.J. Little", "peterl"))
            {
                about.ShowDialog(this);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AuthenticationTransport\CustomHttpRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Metroid.Test
{
    public class CustomHttpRequest
    {
        public string Method = "GET";
        public string URI = "/"; 
        public string Version = "HTTP/1.1";
        public string Host; 
        public string ContentLength;
        public LinkedList<string> OtherHeaders = new LinkedList<string>();
        public byte[] Content;

        public CustomHttpRequest()
        {
        }
        public CustomHttpRequest(string host, string path)
        {
            Host = host;
            URI = path;
        }

        protected string GetHeaderString()
        {
            CustomHttpRequest useRequest = this;
            string s = "";

            if (useRequest.Method != null) s += useRequest.Method + " ";
            if (useRequest.URI != null) s += useRequest.URI + " ";
            if (useRequest.Version != null) s += useRequest.Version;
            if (useRequest.Method != null || useRequest.URI != null || useRequest.Version != null) s += "\r\n";

            if (useRequest.Host != null) s += "Host: " + useRequest.Host + "\r\n";

            if (useRequest.ContentLength != null) s += "Content-Length: " + useRequest.ContentLength + "\r\n";

            foreach (string ext in useRequest.OtherHeaders)
            {
                s += ext + "\r\n";
            }
            s += "\r\n";
            return s;
        }

        public byte[] ToBytes()
        {
            string headers = GetHeaderString();
            int byte_count = headers.Length;
            byte[] ans = new byte[byte_count + (Content == null ? 0 : Content.Length)];

            GetBytes(headers, 0, headers.Length, ans, 0);
            if (Content != null)
            {
                Buffer.BlockCopy(Content, 0, ans, byte_count, Content.Length);
            }

            return ans;
        }

        public static int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
        {
            for (int i = 0; i < charCount; ++i)
                bytes[byteIndex + i] = (byte)s[charIndex + i];
            return charCount;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AccountTransport\AccountTransport.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using live.common;
using live.lfm;
using live.protocol.Presence;
using live.server;
using UserLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test
{
    public static class AccountTransport
    {
        static string CONFIG_FILENAME = "MetroidTransport.config.xml";

        static AccountTransport()
        {
            string liveEnv = GetCurrentXLiveEnv();
            TargetEnvironment.SetEnvironment(liveEnv);
        }

        public static string GetCurrentXLiveEnv()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            string xliveenv = (from i in XElement.Load(CONFIG_FILENAME).Elements("environment")
                               where i.Attribute("name").Value.ToLower() == env.ToLower()
                               select i.Element("xliveenv")).First().Value;

            return xliveenv;
        }

        public static string GetCurrentLIVEnEnv()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            return env;
        }

        public static Account CreateAccount()
        {
            return CreateAccount(CountryId.US, ParentalControl.None);
        }

        public static Account CreateAccount(CountryId country)
        {
            return CreateAccount(country, ParentalControl.None);
        }

        public static Account CreateAccount(ParentalControl parentalControl)
        {
            return CreateAccount(CountryId.US, parentalControl);
        }

        public static Account CreateAccount(CountryId countryId, ParentalControl parentalControl)
        {
            return CreateAccount(AccountTier.Gold, countryId, parentalControl);
        }

        public static Account CreateAccount(AccountTier accountTier, CountryId countryId, ParentalControl parentalControl)
        {
            try
            {
                Account acct = new Account(accountTier, countryId, parentalControl);
                return acct;
            }
            catch (Exception ex)
            {
                Assert.Inconclusive("Account creation failed: " + ex.ToString());
                return null;
            }
        }

        public static Account CreateAccount(PrivacyOption privacyOption)
        {
            try
            {
                Account acct = CreateAccount();
                // Constructor parameters: PrivacySettings(PrivacyOption voiceAndTest, PrivacyOption gamerProfile, PrivacyOption playedGames, 
                //                          PrivacyOption memberContent, PrivacyOption friendsList, PrivacyOption video, PrivacyOption onlineStatus)
                PrivacySettings privacySettings = new PrivacySettings(privacyOption, privacyOption, privacyOption, privacyOption, privacyOption, privacyOption, privacyOption);
                acct.ResetPrivacySettings(privacySettings);
                return acct;
            }
            catch (Exception ex)
            {
                Assert.Inconclusive("Account creation failed: " + ex.ToString());
                return null;
            }
        }

        public static void BanAccount(Account acct)
        {
            BanAccount(acct, true, true, true, true, true);
        }

        public static void BanAccount(Account acct, bool isGamertagBanned, bool isVoiceBanned, bool isLockedOut, bool isGeoFenceExempt, bool isNicknameBanned)
        {
            BanSettings set = new BanSettings(isGamertagBanned, isVoiceBanned, isLockedOut, isGeoFenceExempt, isNicknameBanned);
            acct.BanAccount(set);
        }

        public static void BlockAccount(Account acct, PrivacyOption voiceAndText, PrivacyOption gamerProfile, PrivacyOption playedGames,
            PrivacyOption memberContent, PrivacyOption friendsList, PrivacyOption video, PrivacyOption onlineStatus)
        {
            PrivacySettings set = new PrivacySettings(voiceAndText, gamerProfile, playedGames, memberContent, friendsList, video, onlineStatus);
            acct.ResetPrivacySettings(set);
        }

        public static void BlockAccount(Account acct)
        {
            BlockAccount(acct, PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked,
                 PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked);
        }

        public static Account CreateAccountWithFriends(int numberOfFriends)
        {
            Account acct = CreateAccount();
            AddFriendsForAccount(acct, numberOfFriends);

            return acct;
        }

        public static List<Account> AddFriendsForAccount(Account acct, int numberOfFriends)
        {
            List<Account> friendsList = new List<Account>(numberOfFriends);
            while (numberOfFriends > 0)
            {
                Account friend = AccountTransport.CreateAccount();
                
                friendsList.Add(friend);
                numberOfFriends--;
            }

            System.Threading.Thread.Sleep(30000);

            foreach (Account friend in friendsList)
            {
                AccountTransport.MakeFriends(acct, friend);
            }

            return friendsList;
        }

        public static void SendFriendRequest(Account acct, Account friend)
        {
            Xbox360 xbox = new Xbox360();
            xbox.Live.Logon(acct.XblUser);
            Presence.AddFriend(xbox.Client, acct.XblUser, friend.XblUser);

            xbox.Live.Logout(acct.XblUser);
            xbox.ShutdownConsole();

        }

        public static void MakeFriends(Account acct, Account friend)
        {
            Xbox360 m_UserXbox360 = new Xbox360();
            m_UserXbox360.Live.Logon(acct.XblUser);

            Presence.AddFriend(m_UserXbox360.Client, acct.XblUser, friend.XblUser);
            CheckForPendingFriendRequest(acct, friend);
            m_UserXbox360.Live.Logout(acct.XblUser);
            m_UserXbox360.ShutdownConsole();

            Xbox360 m_FriendXbox360 = new Xbox360();
            m_FriendXbox360.Live.Logon(friend.XblUser);
            Presence.AcceptFriend(m_FriendXbox360.Client, friend.XblUser, acct.XblUser);
            m_FriendXbox360.Live.Logout(friend.XblUser);
            m_FriendXbox360.ShutdownConsole();
        }

        /// <summary>
        /// Determines if XBL Friend has a pending Friend Request
        /// </summary>
        /// <param name="XBLUserAccount">Account making friend request.</param>
        /// <param name="XBLFriendAccount">Account waiting for pending friend request.</param>
        /// <returns>True if pending friend request, false otherwise.</returns>
        public static bool CheckForPendingFriendRequest(Account XBLUserAccount, Account XBLFriendAccount)
        {
            Xbox360 m_UserXbox360 = new Xbox360();

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLFriendAccount.XblUser);

            Notification.WaitForBuddyStatusRequested(m_UserXbox360.Client, XBLFriendAccount.XblUser, XBLUserAccount.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLFriendAccount.XblUser);
            m_UserXbox360.ShutdownConsole();

            return true;
        }

        /// <summary>
        /// Gets a list of the gamertags of the specified user's friends.
        /// </summary>
        /// <param name="XBLUserAccout">The account whose friends will be fetched.</param>
        /// <returns></returns>
        public static List<string> GetFriendsGamerTag(Account XBLUserAccout)
        {
            List<string> m_FriendGamerTags = new List<string>();

            Xbox360 m_UserXbox360 = new Xbox360();
            GetFriendsListData[] m_FriendsList = ReturnFriendsListData(XBLUserAccout);

            foreach (GetFriendsListData m_FriendData in m_FriendsList)
                m_FriendGamerTags.Add(m_FriendData.szGamerTag);

            return m_FriendGamerTags;
        }

        /// <summary>
        /// Gets a list of the gamertags of the specified user's friends.
        /// </summary>
        /// <param name="XBLUserAccout">The account whose friends will be fetched.</param>
        /// <returns></returns>
        public static GetFriendsListData[] ReturnFriendsListData(Account XBLUserAccout)
        {
            Xbox360 m_UserXbox360 = new Xbox360();
            GetFriendsListData[] m_FriendsList = null;

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccout.XblUser);

            //Retrieve friends
            m_FriendsList = Presence.GetFriendsList(m_UserXbox360.Client, XBLUserAccout.XblUser, XBLUserAccout.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccout.XblUser);
            m_UserXbox360.ShutdownConsole();

            return m_FriendsList;
        }

        public static Account CreateNamedAccount(string userName, string password)
        {
            Account acct = new Account(userName, password);
            return acct;
        }

        /// <summary>
        /// Writes Xbox LIVE Profile properties to Xbox LIVE account
        /// </summary>
        /// <param name="acct">UserLib account to modify</param>
        /// <param name="motto">Updated User Motto</param>
        /// <param name="name">Updated User Name</param>
        /// <param name="location">Updated User Location</param>
        /// <param name="bio">Updated User Bio</param>
        /// <param name="gamerPic">Updated User GamerPic Url</param>
        /// <param name="personalPic">Updated User Personal Pic Url</param>
        /// <param name="avatar">Updated User Avatar image</param>
        /// <param name="zone">Updated User GamerZone</param>
        /// <param name="region">Updated User Region</param>
        public static void WriteProfileSettings(Account acct, string motto, string name, string location, string bio, string gamerPic, string personalPic, byte[] avatar, GamerZone zone, CountryId region)
        {
            acct.GamerProfile.WriteProfileSettings(motto, name, location, bio, gamerPic, personalPic, avatar, zone, region);
        }

        /// <summary>
        /// Returns a list of titles that have been played by the account passed in
        /// </summary>
        /// <param name="XBLUserAccount">Account to get list from</param>
        /// <returns>Array of UserTitles</returns>
        public static UserTitle[] GetUsersGamesPlayed(Account XBLUserAccount)
        {
            UserTitle[] userTitles = null;

            Xbox360 m_UserXbox360 = new Xbox360();
            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccount.XblUser);

            //Retrieve Titles
            userTitles = Presence.GetPresence(XBLUserAccount.XblUser).EnumerateTitles();

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccount.XblUser);
            m_UserXbox360.ShutdownConsole();

            return userTitles;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AuthenticationTransport\AuthenticationCache.cs ===
﻿using System;
using System.Web;
using System.Web.Caching;
using System.Xml.Linq;
using System.Xml;

namespace Metroid.Test
{
    /// <summary>
    /// Caches authorization information, on a per credential basis, to avoid repeat/superfluous authentications.
    /// Currently hardcoded to cache authorization data for 30 mins.
    /// </summary>
    public static class AuthenticationCache
    {
        private static HttpRuntime httpRuntime;
        private static object syncLock = new object();

        /// <summary>
        /// 
        /// </summary>
        static AuthenticationCache()
        {
            //this ensures that the HttpRuntime cache is available,
            //irrespective of environment (console, web app, winform, etc.)
            if (httpRuntime == null)
            {
                lock (syncLock)
                {
                    if (httpRuntime == null)
                        httpRuntime = new HttpRuntime();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private static Cache AuthCache
        {
            get
            {
                return HttpRuntime.Cache;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public static string GenerateRpsTicket(string username, string password)
        {
            string key = username.ToLower() + "WLID";
            string loginTicket = AuthCache.Get(key) as string;
            if (loginTicket == null)
            {
                loginTicket = AuthenticationTransport.GenerateRpsTicket(username, password);
                AuthCache.Add(key, loginTicket, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return loginTicket;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="loginTicket"></param>
        /// <returns></returns>
        public static string GenerateStsToken(string username, string password, uint titleID, uint platformID)
        {
            string loginTicket = GenerateRpsTicket(username, password);
            string key = username.ToLower() + "_" + titleID.ToString() + "_" + platformID.ToString() + "_STS";
            string stsToken = AuthCache.Get(key) as string;

            if (stsToken == null)
            {
                stsToken = AuthenticationTransport.GenerateStsTicket(loginTicket, titleID, platformID);
                AuthCache.Add(key, stsToken, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return stsToken;
        }

        /// <summary>
        /// Generates and returns the STS Partner Ticke with the values passed in.
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        /// <returns></returns>
        public static string GenerateStsPartnerTicket(string username, string password, uint titleID, uint platformID)
        {
            string loginTicket = GenerateRpsTicket(username, password);

            string key = string.Format("{0}_{1}_{2}_STSParnerTicket", username.ToLower(), titleID, platformID);
            string stsUserToken = AuthenticationCache.GenerateStsToken(username, password, titleID, platformID);

            string stsPartnerTicket = AuthCache.Get(key) as string;

            if (stsPartnerTicket == null)
            {
                stsPartnerTicket = AuthenticationTransport.GeneratePartnerSTSTicket(stsUserToken, titleID.ToString());
                AuthCache.Add(key, stsPartnerTicket, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return stsPartnerTicket;
        }

        public static string GetGamertag(string stsToken)
        {
            stsToken = stsToken.Replace("saml:", "");
            XmlDocument doc = new XmlDocument();

            try
            {
                doc.LoadXml(stsToken);
                XmlNode node = doc.SelectSingleNode("Assertion/AttributeStatement/Attribute[@AttributeName='Gamertag0']/AttributeValue");
                return node.InnerText;
            }
            catch
            {
                return null;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AccountTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AccountTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("8d1518ce-d2d1-4142-9573-e11b993212e6")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AuthenticationTransport\AuthenticationTransport.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Xml;
using System.Xml.Linq;
using RPSTicketCreation;
using System.Threading;
using System.Web.Caching;
using System.Web;
using System.Diagnostics;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;

namespace Metroid.Test
{
    public static class AuthenticationTransport
    {

        private static RPSTicketGeneratorConfig ticketConfig;
        private static RPSTicketGenerator ticketGenerator;
        private static readonly string MetroidConfig = "MetroidTransport.config.xml";
        private static TestUser primaryUser = null;
        private static List<string> friendsGTs = null;
        private static int Retry_Count = 5;
        private static string SecurityTicketQuery = "/GetSecurityTicket?platformType={platformId}&titleId={titleId}&titleVersion={titleVersion}&clientVersion={clientVersion}&deviceId={deviceId}";
        private const string PartnerSecurityTicketQuery = "/GetPartnerSecurityTicket?xuid={xuid}&titleId={titleId}&titleVersion={titleVersion}&audience={audience}";
        private const string UserDataAudience = "http%3A%2F%2Fxboxlive.com/userdata";
        private static X509Certificate certificate;
        private static RemoteCertificateValidationCallback ignoreAll = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            return true;
        };
        private static LocalCertificateSelectionCallback localCert = delegate(object sender, string targetHost,
            X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers)
            {
                return certificate;
            };

        static AuthenticationTransport()
        {
            Init(GetActiveRpsSite(), PassportEnvironment.INT, false);
        }

        static void Init(string siteUrl, PassportEnvironment ppe, bool cacheData)
        {
            ticketConfig = new RPSTicketGeneratorConfig();
            ticketConfig.SiteURL = siteUrl;
            ticketConfig.PPEnv = ppe;
            ticketConfig.CacheData = cacheData;
            ticketGenerator = new RPSTicketGenerator(ticketConfig);
        }
                
        public static TestUser PrimaryUser
        {
            get
            {
                if (primaryUser == null)
                {
                    LoadUsers();
                }
                return primaryUser;
            }
        }

        public static List<string> FriendsGamertags
        {
            get
            {
                if (friendsGTs == null)
                {
                    friendsGTs = PrimaryUser.Friends.Select(t => t.Gamertag).ToList();
                }
                return friendsGTs;
            }
        }
               
        public static string GetCurrentEnvironment()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(MetroidConfig);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;
            return env;
        }

        public static string GenerateRpsTicket(string username, string password)
        {
            string ticket = string.Empty;

            int count = 0;
            while (string.IsNullOrEmpty(ticket) && count < Retry_Count)
            {
                try
                {
                    //For some reason ticket generation is inconsistent against "kdc.xblob.xboxlive.com". Hence the retry
                    Trace.TraceInformation("Requesting RPS compact ticket for user: {0} password {1}..", username, password);
                    ticket = ticketGenerator.GetRPSCompactTicket(username, password);
                }
                catch
                {
                    Trace.TraceInformation("TicketGeneration failed. Attempting again");
                    Thread.Sleep(10000);
                }
                count++;
            }

            if (string.IsNullOrEmpty(ticket))
            {
                throw new Exception("Compact ticket value not found. Retried " + Retry_Count.ToString() + " times before closing");
            }

            Trace.TraceInformation("RPS ticket creation successful");
            return ticket;

        }

        public static string GenerateRpsTicket(string username, string password, string siteUrl, string siteId)
        {
            RPSTicketGeneratorConfig r_config = new RPSTicketGeneratorConfig();
            r_config.CacheData = false;
            r_config.SiteID = siteId;
            r_config.PPEnv = PassportEnvironment.INT;
            r_config.SiteURL = siteUrl;
            RPSTicketGenerator r_gen = new RPSTicketGenerator(r_config);

            string ticket = r_gen.GetRPSCompactTicket(username, password);
            return ticket;
        }

        /// <summary>
        /// This method creates a http web request based on http 
        /// or https. If it is https, it will attach client certificate
        /// </summary>
        public static HttpWebRequest GetWebRequest(string serviceUrl, HttpWebRequest optionalRequest, bool useClientCert)
        {
            if (serviceUrl.StartsWith("https") && useClientCert)
            {
                // Load the certificate from store
                X509Store certStore = new X509Store("My", StoreLocation.LocalMachine);
                certStore.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
                certificate = certStore.Certificates.Find(X509FindType.FindByThumbprint, GetCertThumbprint(), false)[0];
                certStore.Close();

                Uri url = new Uri(serviceUrl);
                               
                TcpClient tcp = new TcpClient(url.Host, url.Port);
                SslStream ssl = new SslStream(tcp.GetStream(), false, ignoreAll, localCert);
                ssl.AuthenticateAsClient(
                    url.Host,
                    new X509CertificateCollection(new X509Certificate[] { certificate }),
                    SslProtocols.Default,
                    false);

                CustomHttpRequest req = new CustomHttpRequest(url.Host + ":" + url.Port, url.PathAndQuery);

                ssl.Write(req.ToBytes());
                ssl.Flush();
                ssl.Read(new byte[1], 0, 1);
                ssl.Close();
            }

            HttpWebRequest request = optionalRequest;

            if (optionalRequest == null)
            {
                request = (HttpWebRequest)WebRequest.Create(serviceUrl);
            }

            if (serviceUrl.StartsWith("https") && useClientCert)
            {
                request.ClientCertificates.Add(certificate);
                ServicePointManager.ServerCertificateValidationCallback += ignoreAll;
            }

            return request;
        }

        public static string GenerateStsTicket(string RpsTicket, uint titleID, uint platformID)
        {
            //Our platformId values are different from what is used by the STS service.
            if (platformID == (uint)5)
            {
                platformID = 15;
            }
            else if (platformID == (uint)6)
            {
                platformID = 16;
            }

            string environment = GetCurrentEnvironment();
            string stsUrl = (from i in XElement.Load(MetroidConfig).Elements("environment")
                             where i.Attribute("name").Value.ToLower() == environment.ToLower()
                             select i.Element("sts")).First().Value;

            string fullUri = SecurityTicketQuery;
            fullUri = LoadStsAttributes(fullUri, titleID, platformID);

            HttpWebRequest request = AuthenticationTransport.GetWebRequest(stsUrl + fullUri, null, true);

            ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
            {
                return true; 
            };

            request.Headers.Add("Authorization", FixRPSTicket(RpsTicket));
            
            HttpWebResponse response = null;
            Trace.TraceInformation("Requesting STS token..");

            try
            {
                response = (HttpWebResponse)request.GetResponse();
            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (Stream stream = ex.Response.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(stream))
                        {
                            string responseBody = sr.ReadToEnd();
                            Trace.TraceError(responseBody);
                        }
                    }
                }

                throw;
            }
            finally
            {
                AuthenticationTransport.CloseWebRequest(stsUrl, request);
            }

            Stream dataStream = response.GetResponseStream();
            StreamReader reader = new StreamReader(dataStream);
            string result = reader.ReadToEnd();
            result = GetSAMLData(result);
            dataStream.Close();
            Trace.TraceInformation("STS token received");

            return result;
        }

        /// <summary>
        /// Generates partner sts token. 
        /// </summary>
        /// <param name="stsUserTicket">The sts user token. </param>
        /// <param name="titleId">The title id. </param>
        /// <returns>Partnertoken string. </returns>
        public static string GeneratePartnerSTSTicket(string stsUserTicket, string titleId)
        {
            string xuid = GetSAMLXuid(stsUserTicket);

            string environment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(MetroidConfig).Elements("environment");

            XElement envElement = (from i in elements
                                    where i.Attribute("name").Value.ToLower() == environment.ToLower()
                                    select i.Element("sts")).First();

            string stsUrl = envElement.Value;
            string titleVersion = envElement.Attribute("titleVersion").Value;

            string fullUri = PartnerSecurityTicketQuery;

            fullUri = fullUri.Replace("{xuid}", xuid);

            fullUri = fullUri.Replace("{titleId}", titleId);

            fullUri = fullUri.Replace("{titleVersion}", titleVersion);

            fullUri = fullUri.Replace("{audience}", UserDataAudience);
            
            // Get a http web request
            HttpWebRequest request = AuthenticationTransport.GetWebRequest(stsUrl + fullUri, null, true);

            // Add auth header
            request.Headers.Add("X-Authorization", "XBL1.0 x=" + stsUserTicket);
            string stsPartnerTicket;
            try
            {
                // Issue the request and get the response
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                // Get the ticket
                Stream dataStream = response.GetResponseStream();
                StreamReader reader = new StreamReader(dataStream);
                stsPartnerTicket = reader.ReadToEnd();
                stsPartnerTicket = GetSAMLData(stsPartnerTicket);
            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (Stream stream = ex.Response.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(stream))
                        {
                            string responseBody = sr.ReadToEnd();
                            Trace.TraceError(responseBody);
                        }
                    }
                }

                throw;
            }
            finally
            {
                AuthenticationTransport.CloseWebRequest(stsUrl, request);               
            }

            return stsPartnerTicket;
        }

        private static string LoadStsAttributes(string uri, uint titleID, uint platformID)
        {
            string currentEnvironment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(MetroidConfig).Elements("environment");

            uri = uri.Replace("{platformId}", platformID.ToString());
            uri = uri.Replace("{titleId}", titleID.ToString());

            XElement envElement = (from i in elements
                                   where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                   select i.Element("sts")).First();

            uri = uri.Replace("{titleVersion}", envElement.Attribute("titleVersion").Value);
            uri = uri.Replace("{clientVersion}", envElement.Attribute("clientVersion").Value);
            uri = uri.Replace("{deviceId}", envElement.Attribute("deviceId").Value);

            return uri;
        }

        private static string GetActiveRpsSite()
        {
            string env = GetCurrentEnvironment();

            string rpssite = (from i in XElement.Load(MetroidConfig).Elements("environment")
                              where i.Attribute("name").Value.ToLower() == env.ToLower()
                              select i.Element("rpsserver")).First().Value;

            return rpssite;
        }

        public static TestUser GetUsers()
        {
            TestUser primaryUser = new TestUser();

            string env = GetCurrentEnvironment();

            IEnumerable<XElement> elements = (from i in XElement.Load(MetroidConfig).Elements("environment")
                                              where i.Attribute("name").Value.ToLower() == env.ToLower()
                                              select i.DescendantsAndSelf()).First();
            foreach (XElement x in elements)
            {
                if (x.Name.LocalName == "account")
                {
                    primaryUser.Username = x.Attribute("username").Value;
                    primaryUser.Password = x.Attribute("password").Value;
                    primaryUser.Gamertag = x.Attribute("gamertag").Value;                    
                }
                if (x.Name.LocalName == "friend")
                {
                    TestUser tu = new TestUser
                    (x.Attribute("username").Value,
                     x.Attribute("password").Value,
                     x.Attribute("gamertag").Value);
                    primaryUser.Friends.Add(tu);
                }
            }

            return primaryUser;
        }

        private static void LoadUsers()
        {
            if (primaryUser == null)
            {
                primaryUser = new TestUser();

                string env = GetCurrentEnvironment();

                IEnumerable<XElement> elements = (from i in XElement.Load(MetroidConfig).Elements("environment")
                                                  where i.Attribute("name").Value.ToLower() == env.ToLower()
                                                  select i.DescendantsAndSelf()).First();
                foreach (XElement x in elements)
                {
                    if (x.Name.LocalName == "account")
                    {
                        primaryUser.Username = x.Attribute("username").Value;
                        primaryUser.Password = x.Attribute("password").Value;
                        primaryUser.Gamertag = x.Attribute("gamertag").Value;
                    }
                    if (x.Name.LocalName == "friend")
                    {
                        TestUser tu = new TestUser
                        (x.Attribute("username").Value,
                         x.Attribute("password").Value,
                         x.Attribute("gamertag").Value);
                        primaryUser.Friends.Add(tu);
                    }
                }
                if (String.IsNullOrEmpty(primaryUser.RpsTicket))
                {
                    primaryUser.RpsTicket = GenerateRpsTicket(primaryUser.Username, primaryUser.Password);
                }
            }
        }

        private static string GetCertThumbprint()
        {
            string currentEnvironment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(MetroidConfig).Elements("environment");

            string certThumbprint = (from i in elements
                                     where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                     select i.Element("sts")).First().Attribute("thumbprint").Value;

            return certThumbprint;
        }

        public static string FixRPSTicket(string rpsTicket)
        {
            string ticket = rpsTicket;
            ticket = ticket.Remove(0, 1);
            ticket = ticket.Remove(ticket.Length - 1);
            ticket = "WLID1.0 t=" + ticket;

            return ticket;
        }

        public static string GetSAMLData(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);
                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "string").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        public static string GetSAMLXuid(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);

                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "Attribute").Where(n => n.FirstAttribute.Value == "Xuid0").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        public static void CloseWebRequest(string url, HttpWebRequest request)
        {
            if (url.StartsWith("https"))
            {
                ServicePointManager.ServerCertificateValidationCallback -= ignoreAll;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AuthenticationTransport\TestUser.cs ===
﻿using System.Collections.Generic;

namespace Metroid.Test
{
    public class TestUser
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string RpsTicket { get; set; }
        public string Gamertag { get; set; }
        public List<TestUser> Friends { get; set; }

        public TestUser()
        {
            Username = "";
            Password = "";
            RpsTicket = "";
            Friends = new List<TestUser>();

        }

        /// <summary>
        /// Creates a test user using the provided values
        /// </summary>
        /// <param name="user"></param>
        /// <param name="pw"></param>
        /// <param name="gt"></param>
        public TestUser(string user, string pw, string gt)
        {
            Username = user;
            Password = pw;
            Gamertag = gt;
            RpsTicket = "";
            Friends = new List<TestUser>();
        }

        public TestUser(string user, string pw, string gt, List<TestUser> friends)
        {
            Username = user;
            Password = pw;
            Gamertag = gt;
            RpsTicket = "";
            Friends = friends;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\MetroidTransport\MetroidEnvironment.cs ===
﻿
namespace Metroid.Test
{
    public class MetroidEnvironment
    {
        public string EnvironmentName;
        public string RewardsUri;
        public string UdsUri;
        public string UdsPartnerUri;
        public string RpsServerUrl;
        public string Sts;
        public string XLiveEnvironment;        
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\AuthenticationTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AuthenticationTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("7592c7f2-c2cd-4184-b20f-daf4741c0a98")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\MetroidTransport\MetroidTransport.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using Microsoft.TestTools;

namespace Metroid.Test
{
    public partial class MetroidTransport
    {
        #region Private Members
        private string StsTicket;
        private string currentUser;
        private string password;
        private XmlHelper xhelp = new XmlHelper();
        private string env;

        private Uri RewardsUri;
        private Uri UdsUri;
        private Uri UdsPartnerUri;
        private string RewardsService_baseUri { get { return RewardsUri.AbsoluteUri; } }
        private string UdsService_baseUri { get { return UdsUri.AbsoluteUri; } }
        private string UdsPartnerService_baseUri { get { return UdsPartnerUri.AbsoluteUri; } }
        #endregion Private Members

        #region Constructor and properties
        public string CurrentUser { get { return this.currentUser; } }
        public string CurrentUserPassword { get { return this.password; } }

        public string RewardsService_fullUri { get { return RewardsService_baseUri + Constants.RewardsService; } }
        public string GameDataService_fullUri { get { return UdsService_baseUri + Constants.GameDataService; } }
        public string ProfileService_fullUri { get { return UdsService_baseUri + Constants.ProfileService; } }

        public string CurrentStsTicket { get { return this.StsTicket; } }
        public string Env { get { return this.env; } }

        public MetroidTransport() 
            : this(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password)
        {
        }

        public MetroidTransport(string username, string password)
        {
            this.Initialize();
            this.currentUser = username;
            this.password = password;
        }

        public MetroidTransport(string username, string password, uint titleID, uint platformID)
        {
            this.Initialize();
            this.currentUser = username;
            this.password = password;
            this.StsTicket = AuthenticationCache.GenerateStsToken(username, password, titleID, platformID);
        }

        /// <summary>
        /// Updates the STS Token with the TitleID and PlatformID passed in.
        /// </summary>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        public void UpdateStsToken(uint titleID, uint platformID)
        {
            Trace.TraceInformation("Update Sts Token TitleId {0}", titleID);
            Trace.TraceInformation("Update Sts Token PlatformID {0}", platformID);
            this.StsTicket = AuthenticationCache.GenerateStsToken(this.currentUser, this.password, titleID, platformID);

            MetroidTestUtil.AuthorizationType = "X-Authorization";
        }

        /// <summary>
        /// Updates the STS Partner Token with the TitleID and PlatformID passed in.
        /// </summary>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        public void UpdateStsPartnerTicket(uint titleID, uint platformID)
        {
            Trace.TraceInformation("Update PartnerTicket TitleId {0}", titleID);
            Trace.TraceInformation("Update PartnerTicket PlatformID {0}", platformID);
            this.StsTicket = AuthenticationCache.GenerateStsPartnerTicket(this.currentUser, this.password, titleID, platformID);

            MetroidTestUtil.AuthorizationType = "X-PartnerAuthorization";
        }
        
        private void Initialize()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(Constants.METROID_CONFIG);

            this.env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;
            MetroidEnvironment environment = this.GetEnvironmentValues(env);

            RewardsUri = new Uri(environment.RewardsUri);
            UdsUri = new Uri(environment.UdsUri);
            UdsPartnerUri = new Uri(environment.UdsPartnerUri);
        }

        private MetroidEnvironment GetEnvironmentValues(string currentEnvironment)
        {
            if (string.IsNullOrEmpty(currentEnvironment))
            {
                throw new ArgumentNullException("The current environment cannot be empty. Please verify values in " + Constants.METROID_CONFIG);
            }
            Trace.TraceInformation("Current environment: {0}", currentEnvironment);
            XmlDocument doc = new XmlDocument();
            doc.Load(Constants.METROID_CONFIG);
            IEnumerable<XElement> elements = (from i in XElement.Load(Constants.METROID_CONFIG).Elements("environment")
                                              where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                              select i.Descendants()).First();
            MetroidEnvironment metroidEnvironment = new MetroidEnvironment();
            metroidEnvironment.EnvironmentName = currentEnvironment;
            List<TestUser> metroidUsers = new List<TestUser>();
            foreach (XElement s in elements)
            {
                switch (s.Name.LocalName)
                {
                    case "RewardsUrl":
                        metroidEnvironment.RewardsUri = s.Value;
                        break;
                    case "UdsUrl":
                        metroidEnvironment.UdsUri = s.Value;
                        break;
                    case "UdsPartnerUrl":
                        metroidEnvironment.UdsPartnerUri = s.Value;
                        break;
                    case "rpsserver":
                        metroidEnvironment.RpsServerUrl = s.Value;
                        break;
                    case "xliveenv":
                        metroidEnvironment.XLiveEnvironment = s.Value;
                        break;
                    case "sts":
                        metroidEnvironment.Sts = s.Value;
                        break;
                    default:
                        break;
                }
            }
            return metroidEnvironment;
        }

        #endregion Constructor and endpoints
        #region Helpers

        private Response ExecutePOSTCall(string body, string requestUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting POST operation {0}", requestUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = MetroidTestUtil.ExecutePOSTCallXml(body, requestUri, locale, platformId, this.CurrentStsTicket);
            return response;
        }

        private Response ExecuteWebServiceCall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting GET operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = MetroidTestUtil.ExecuteGETCallXml(null, fullUri, locale, platformId, this.CurrentStsTicket);
            return response;
        }

        private Response ExecuteDELETECall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting DELETE operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = MetroidTestUtil.ExecuteDELETECallXml(null, fullUri, locale, platformId, this.CurrentStsTicket);
            return response;
        }
             
        #endregion Helpers
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\BVT.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class BVT
    {
        private MetroidTestScenarioLibrary testScenarios = new MetroidTestScenarioLibrary();
        private TestGame bvtTestGame = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private TestUser tu = AuthenticationTransport.PrimaryUser;
        private readonly string us_locale = "en-US";
        private readonly string blob = "I can haz more achievements";       

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(0)]
        public void GetLeaderboardBVT()
        {
            LeaderboardResult initialLeaderboard = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            if (initialLeaderboard.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                initialLeaderboard = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            }

            LeaderboardResult newLeaderboard = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bvtTestGame, us_locale, blob, "Win", 1);

            long initialScore = long.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.BestScore));
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.BestScore));
            long expectedScore = initialScore + 1;

            Assert.AreEqual<long>(expectedScore, actualScore, "Leaderboard was not updated with high score");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(0)]
        public void PostGameResult_BVT()
        {
            Response result = testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(0)]
        public void GetDatablob_BVT()
        {
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            if (result.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            }

            string datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            if (string.IsNullOrEmpty(datablobId))
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
                datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            }

            DatablobResult blobresult = testScenarios.GetDatablobXml(datablobId, us_locale, bvtTestGame.PlatformId, bvtTestGame.GameId);
            Assert.IsNotNull(Encoding.UTF8.GetString(blobresult.Blob), "Blob was null or empty");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(0)]
        public void GrantAchievementsBVT()
        {
            MetroidTestScenarioLibrary lib = testScenarios;
            try
            {
                lib = new MetroidTestScenarioLibrary(true);
            }
            catch (AssertInconclusiveException) { }

            GrantAchievements achievements = lib.GetFirstAchievement(bvtTestGame.GameId, "c203973c-fd2b-4b8c-b785-5e38b3e35dec", DateTime.Now, true, us_locale, bvtTestGame.PlatformId);
            Response resp = lib.GrantAchievements(achievements, us_locale, bvtTestGame.PlatformId);
            if (!String.IsNullOrEmpty(resp.Error))
            {
                throw new WebException(resp.Error);
            }
            AchievementsResult result = lib.GetAchievementsXml(bvtTestGame.GameId, us_locale, bvtTestGame.PlatformId);
            Assert.IsTrue(lib.VerifyAchievementGranted(result, achievements.Achievements[0].Key));
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\MetroidTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MetroidTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("9831035b-b2ca-4494-82c8-f04477348db8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\ErrorCodes.cs ===
﻿using System;
using System.Linq;
using Gds.Contracts;
using Leet.Core.Platforms;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test.Tests
{
    /// <summary>
    /// Summary description for ErrorCodes
    /// </summary>
    [TestClass]
    public class ErrorCodes
    {
        private static MetroidTransport metroidTransport = new MetroidTransport();
        private static MetroidTestScenarioLibrary testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
        private static TestGame achievementGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private XmlHelper xhelp = new XmlHelper();

        private string AppID = Guid.NewGuid().ToString();
        private string us_locale = "en-US";
        
        #region GrantAchievements tests
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AppId and verify the error XML")]
        public void ErrorXML_GrantAchievement_InvalidAppID()
        {
            string appID = "0";
            string achievementID = "1";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (!result.Body.Contains("Guid should contain 32 digits with 4 dashes"))
                Assert.Fail("GrantAchievements XML error not found for invalid AppId");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementsList and verify the error XML")]
        public void ErrorXML_GrantAchievement_EmptyAchievementList()
        {
            string achievementID = "0";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Remove the achievements list
            grantAchievements.Achievements.Clear();

            //Grant the achievements
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("No achievements found"))
                Assert.Fail("GrantAchievements XML error not found for empty AchievementsList");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementId and verify the error XML")]
        public void ErrorXML_GrantAchievement_EmptyAchievementID()
        {
            string achievementID = string.Empty;
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("Invalid Achievement key"))
                Assert.Fail("GrantAchievements XML error not found for empty AchievementId");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId and verify the error XML")]
        public void ErrorXML_GrantAchievement_InvalidAchievementID()
        {
            string achievementID = "X";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("Invalid Achievement key")) 
                Assert.Fail("GrantAchievements XML error not found for invalid AchievementId");
        }

        #endregion GrantAchievement tests

        /// <summary>
        /// Ensures the current user has a given number of unearned achievements and if not, creates and loads a new user
        /// </summary>
        /// <param name="achievementNeededCount">How many unearned achievements are needed</param>
        private void GuaranteeAchievementsAvailable(int achievementNeededCount, TestGame tg)
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, tg.PlatformId);
            int achievementsAvailable = (from a in results.Achievements
                                         where a.IsEarned == false
                                         select a).Count();
            if (achievementsAvailable < achievementNeededCount)
            {
                testScenarios = new MetroidTestScenarioLibrary(true);
            }
        }

    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\MetroidTransport\SynchronousCalls.cs ===
﻿using System;
using System.Diagnostics;
using System.Threading;
using Gds.Contracts;

namespace Metroid.Test
{
    public partial class MetroidTransport
    {
        public Response PostGameResult(string gameResultString, string locale, string platformId, uint titleId)
        {
            this.UpdateStsToken(titleId, uint.Parse(platformId));

            string uri = this.RewardsService_fullUri + Constants.PostGameResult_RelativePathAndQuery;

            Trace.TraceInformation("Submitting a GameResult with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(MetroidTestUtil.GetXML(gameResultString));
            Trace.TraceInformation("Posting game result with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(gameResultString, uri, locale, platformId);
            return response;
        }

        public Response PostGrantAchievements(string grantAchievementsString, string locale, string platformId)
        {
            GrantAchievements ga = xhelp.LoadXml<GrantAchievements>(xhelp.StripNamespaces(grantAchievementsString));
            this.UpdateStsToken(ga.GameId, uint.Parse(platformId));

            string uri = this.RewardsService_fullUri + Constants.GrantAchievements_RelativePathAndQuery;

            Trace.TraceInformation("Submitting list of GrantAchievements with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(MetroidTestUtil.GetXML(grantAchievementsString));
            Trace.TraceInformation("Posting Achievements with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(grantAchievementsString, uri, locale, platformId);
            return response;
        }

        public Response GetDatablob(string datablobId, string locale, string platformId, string gameId)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetDataBlob_RelativePathAndQuery;
            fullUri = fullUri.Replace("{DataBlobId}", datablobId);
            Trace.TraceInformation("Calling GetDatablob with values: {0}", fullUri);
            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response GetAchievements(string gameId, string locale, string platformId)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetAchievements_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gameId}", gameId);

            Trace.TraceInformation("Calling GetAchievements with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string locale, string platformId, string socialGraph)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetLeaderBoard_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gameId}", gameId);
            fullUri = fullUri.Replace("{variant}", variant);
            fullUri = fullUri.Replace("{property}", property);
            fullUri = fullUri.Replace("{datagroup}", dataGroup);
            fullUri = fullUri.Replace("{numRows}", numRows);
            fullUri = fullUri.Replace("{rankStart}", rankStart);
            fullUri = fullUri.Replace("{socialGraph}", socialGraph);

            Trace.TraceInformation("Calling GetLeaderboard with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId.ToString());
            return response;
        }

        public Response GetProfile(string locale, uint titleId, string platformId, string sectionFlags)
        {
            Response response = this.GetProfile(locale, titleId, platformId, sectionFlags, null);
            return response;
        }

        public Response GetProfile(string locale, uint titleId, string platformId, string sectionFlags, string gamertag)
        {
            this.UpdateStsToken(titleId, uint.Parse(platformId));

            string fullUri = this.ProfileService_fullUri + Constants.GetProfile_RelativePathAndQuery;
            fullUri = fullUri.Replace("{sectionflags}", sectionFlags);
            fullUri = ReplaceOptionalQueryParams(fullUri, "gamertag", gamertag);

            Trace.TraceInformation("Calling GetProfile with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        /// <summary>
        /// Used to replace or remove optional query string params
        /// </summary>
        private string ReplaceOptionalQueryParams(string fullUri, string param, string value)
        {
            if (!String.IsNullOrEmpty(value))
            {
                fullUri = fullUri.Replace("{" + param + "}", value);
            }
            else
            {
                if (fullUri.Contains("&"))
                {
                    fullUri = fullUri.Replace("&" + param + "={" + param + "}", "");
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}&", "?"); //this will catch it if it's the first parameter on the query string
                }
                else // this case if for only one parameter on the query string
                {
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}", "");
                }
            }
            return fullUri;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Metroid.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("717e838e-5587-4ef6-80e3-de0f0c3682e8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\FeatureVerificationTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Metroid.Test
{
    /// <summary>
    /// These tests should be run after BVTs to sign off against an environment. The tests will have deeper verification and scenario level testing
    /// </summary>
    [TestClass]
    public class FeatureVerificationTests
    {
        private TestGame testGame = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private readonly string us_locale = "en-US";
        private readonly string blob = "I won";
        private MetroidTestScenarioLibrary testScenarios = new MetroidTestScenarioLibrary();

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_RankUp()
        {
            TestUser primaryUser = AuthenticationTransport.PrimaryUser;
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(primaryUser.Username, primaryUser.Password);

            //Get the best score
            long bestScore = 0;
            LeaderboardResult leaderboardResult = scenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                GameResult gr = scenarios.CreateGameResult(testGame, 1, 1, "blob", "Win");
                scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                string score = scenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
                bestScore = long.Parse(score);
            }
            else
            {
                bestScore = leaderboardResult.Leaderboard[0].Value;
            }

            //Post higher scores for each of the primary user's friends
            GameResult result = new GameResult();
            result.GameId = testGame.GameId;
            result.Outcome = "Win";
            result.Time = 100;
            result.TimeStamp = DateTime.Now;
            result.Variant = testGame.Variant;

            int i = primaryUser.Friends.Count;

            foreach (TestUser friend in primaryUser.Friends)
            {
                result.Score = bestScore + i;
                result.GameResultId = Guid.NewGuid();
                scenarios.PostGameResultForUser(result, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
                i--;
            }

            //Post highest score for primary user
            result.Score = bestScore + primaryUser.Friends.Count + 1;
            result.GameResultId = Guid.NewGuid();
            scenarios.PostGameResult(result, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult res = scenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Make sure leaderboard ranks are in order
            //Primary user should be above all
            Assert.AreEqual(primaryUser.Gamertag, res.Leaderboard[0].User.GamerTag, "Leaderboard ranked incorrectly");

            int j = 1;
            foreach (TestUser friend in primaryUser.Friends)
            {
                Assert.AreEqual(friend.Gamertag, res.Leaderboard[j].User.GamerTag, "Leaderboard ranked incorrectly");
                j++;
            }
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        [Description("Feature: All expected leaderboard stats are populated")]
        public void GetLeaderboard_VerifyAllStatsReturned()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            testScenarios.PostGameResultWithDefaultStats(tg, us_locale);

            //Post a win
            testScenarios.PostHigherScoreAndRetrieveLeaderboard(tg, us_locale, blob, "win", 20);

            //Post a loss
            testScenarios.PostGameResultWithDefaultStatsAndLoss(tg, us_locale);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", 100, us_locale, tg.PlatformId);

            Assert.AreEqual<string>(AuthenticationTransport.PrimaryUser.Gamertag, result.Leaderboard[0].User.GamerTag, "Invalid user was on leaderboard");

            string[] enums = Enum.GetNames(typeof(LeaderboardPropertyType));

            foreach (Entry entry in result.Leaderboard[0].Statistics)
            {
                Assert.IsTrue(enums.Contains(entry.Name), "Stat {0} is not a valid leaderboard stat", entry.Name);
                Assert.IsFalse(String.IsNullOrEmpty(entry.Value));
            }

            foreach (string item in enums)
            {
                bool foundStat = false;
                foreach (Entry entry in result.Leaderboard[0].Statistics)
                {
                    if (item == entry.Name)
                    {
                        foundStat = true;
                        break;
                    }
                }
                if (!foundStat)
                    Assert.Fail("Leaderboard stat {0} was not found in the returned leaderboard", item);
            }
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        [Description("Feature: Best time datablob is stored")]
        public void GetDatablob_BestTimeDatablob_VerifyBlobAccurate()
        {
            TestGame testgame2 = TestGameUtility.BestTimeGame;

            GameResult gr = testScenarios.CreateGameResult(testgame2, null, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testgame2.PlatformId, testgame2.GameId);

            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testgame2, us_locale, blob, "Win", 1);
            Guid bestTimeId = new Guid(testScenarios.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));

            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, testgame2.PlatformId, testgame2.GameId);
            string actualBlob = Encoding.UTF8.GetString(result.Blob);

            Assert.AreEqual(blob, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        [Description("Feature: Single achievement is granted")]
        public void GrantAchievements_SingleAchievement_VerifyGranted()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);
            TestGame hexicRush = TestGameUtility.GetTestGame("HexicRush");
            GrantAchievements toGrant = lib.CreateAchievements_SingleUnearned(hexicRush, Guid.NewGuid().ToString(), us_locale);
            lib.GrantAchievements(toGrant, us_locale, hexicRush.PlatformId);

            AchievementsResult result = lib.GetEarnedAchievements(hexicRush.GameId, us_locale, hexicRush.PlatformId);
            bool hasAchievement = false;

            foreach (var item in result.Achievements)
            {
                if (item.Key.Equals(toGrant.Achievements[0].Key, StringComparison.OrdinalIgnoreCase))
                {
                    hasAchievement = true;
                    break;
                }
            }

            Assert.IsTrue(hasAchievement, "Achievement was not granted");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\GetDatablob.cs ===
﻿using System;
using System.Net;
using System.Text;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class GetDatablob
    {
        private static MetroidTestScenarioLibrary testScenarios = new MetroidTestScenarioLibrary();
        private static readonly string BestScoreDatablobString = "Congratulations new high score";
        private static readonly string BestTimeDatablobString = "Congratulations new best time";
        static Guid bestScoreId;
        static Guid bestTimeId;
        static Encoding encoding = Encoding.UTF8;
        private static TestGame bestScoreTestGame = TestGameUtility.BestScoreGame;
        private static TestGame bestTimeTestGame = TestGameUtility.BestTimeGame;
        private static readonly string us_locale = "en-US";

        [ClassInitialize]
        public static void PostDatablobs(TestContext testContext)
        {
            LeaderboardResult bestScoreResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bestScoreTestGame, us_locale, BestScoreDatablobString, "Win", 1);
            bestScoreId = new Guid(testScenarios.CheckLeaderboardResult(bestScoreResult, LeaderboardPropertyType.BestScoreDataBlobId));

            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(bestTimeTestGame, us_locale, BestTimeDatablobString, "Win", 1);
            bestTimeId = new Guid(testScenarios.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the datablob is updated when a new best low time is posted")]
        public void GetDatablob_BestLowTime_Updated()
        {
            string blobtext1 = "New low time!";
            string blobtext2 = "New even lower time!";

            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            TestGame testGame = TestGameUtility.BestTimeGameReverse;

            GameResult gr = lib.CreateGameResult(testGame, 10, 10, blobtext1, "Win");
            Response response = lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            gr = lib.CreateGameResult(testGame, 10, 5, blobtext2, "Win");
            response = lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult bestTimeResult = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "LifeTime", 100, us_locale, testGame.PlatformId);
            Guid bestLowTimeId = new Guid(lib.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));

            DatablobResult result = lib.GetDatablobXml(bestLowTimeId.ToString(), us_locale, testGame.PlatformId, testGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);
            Assert.AreEqual(blobtext2, actualBlob, "Blob wasn't updated");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the service returns the expected result for the best score datablob")]
        public void GetDatablob_BestScore_VerifyReturned()
        {
            DatablobResult result = testScenarios.GetDatablobXml(bestScoreId.ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);

            Assert.AreEqual(BestScoreDatablobString, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the service returns the expected result for the best time datablob")]
        public void GetDatablob_BestTime_VerifyReturned()
        {
            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, bestTimeTestGame.PlatformId, bestTimeTestGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);

            Assert.AreEqual(BestTimeDatablobString, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with a null blobID")]
        public void GetDatablob_NullBlobId()
        {
            Response result = testScenarios.GetDatablobXml(null, us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with an empty string blobID")]
        public void GetDatablob_EmptyBlobId()
        {
            Response result = testScenarios.GetDatablobXml(String.Empty, us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with an empty Guid blobID")]
        public void GetDatablob_EmptyGuidBlobId()
        {
            Response result = testScenarios.GetDatablobXml(Guid.Empty.ToString(), us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with an invalid blobID")]
        public void GetDatablob_InvalidBlobId()
        {
            Response result = testScenarios.GetDatablobXml("foo", us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a random blobID doesn't have a length of 0")]
        public void GetDatablob_RandomBlobId()
        {
            DatablobResult result = testScenarios.GetDatablobXml(Guid.NewGuid().ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            Assert.AreEqual(result.Blob.Length, 0, "Unexpected blob returned");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify blobID is unchanged when a new best score is submitted")]
        public void GetDatablob_VerifyBlobIdUnchangedForNewBestScore()
        {
            LeaderboardResult bestScoreResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bestScoreTestGame, us_locale, BestScoreDatablobString, "Win", 1);
            DatablobResult result = testScenarios.GetDatablobXml(bestScoreId.ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            Assert.AreEqual(bestScoreId, result.DatablobId, "Incorrect Id returned");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify blobID is unchanged when a new best time is submitted")]
        public void GetDatablob_VerifyBlobIdUnchangedForNewBestTime()
        {
            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(bestTimeTestGame, us_locale, BestTimeDatablobString, "Win", 1);
            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, bestTimeTestGame.PlatformId, bestTimeTestGame.GameId);
            Assert.AreEqual(bestTimeId, result.DatablobId, "Incorrect Id returned");
        }

        
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetDatablob_Locale_Unsupported()
        {
            Response response = testScenarios.GetDatablobXml(bestScoreId.ToString(), Constants.UnsupportedLocale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [TestProperty("BugId", "8021")]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]               
        [Description("Verify 400 is returned when no locale is set")]
        public void GetDatablob_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetDatablobXml(bestScoreId.ToString(), emptyLocale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8021");
        }

        [TestMethod]
        [TestProperty("BugId", "9828")]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify format is a required variable")]
        public void GetDatablob_Variable_Format()
        {
            string query = "/Datablob?datablobId=" + bestScoreId.ToString();
            Response ret = testScenarios.ExecuteCustomQuery("GetDatablob", query, null, bestScoreTestGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify datablobId is a required variable")]
        public void GetDatablob_Variable_DatablobId()
        {
            string query = "/Datablob?format=xml";
            Response ret = testScenarios.ExecuteCustomQuery("GetDatablob", query, null, bestScoreTestGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\GrantAchievement.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class GrantAchievement
    {
        private static MetroidTransport metroidTransport;
        private static MetroidTestScenarioLibrary testScenarios;
        private static TestGame achievementGame = TestGameUtility.GetFirstGameWithAchievements();

        private uint PlatformId = achievementGame.PlatformId;
        private string AppID = Guid.NewGuid().ToString();
        private string us_locale = "en-US";

        #region "GameId tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a valid GameId")]
        public void GrantAchievement_ValidGameID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Verify the achievement was granted
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "GameId tests"
        #region "AppId tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with no AppId")]
        public void GrantAchievement_MalformedRequest_NoAppID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("appId", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a zero AppId")]
        public void GrantAchievement_ZeroAppID()
        {
            GuaranteeAchievementsAvailable(1);
            string appID = "0";
            string achievementID = "1";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AppId")]
        public void GrantAchievement_InvalidAppID()
        {
            GuaranteeAchievementsAvailable(1);
            string appID = "Invalid-app-ID";
            string achievementID = "1";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a valid AppId")]
        public void GrantAchievement_ValidAppID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "AppId tests"
        #region "AchievementsList tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementsList")]
        public void GrantAchievement_EmptyAchievementList()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "0";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Remove the achievements list
            grantAchievements.Achievements.Clear();

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing one achievement")]
        public void GrantAchievement_SingleAchievement()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing multiple achievements")]
        public void GrantAchievement_MultipleAchievements()
        {
            int achievementCount = 3;
            GuaranteeAchievementsAvailable(achievementCount);
            List<string> achievementIDs = new List<string>(achievementCount);

            //Create achievements
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleUnearned(achievementCount, achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "Not enough achievements were available to grant");
            for (int i = 0; i < achievementCount; i++)
            {
                achievementIDs.Add(grantAchievements.Achievements[i].Key);
            }

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            foreach (string achievementID in achievementIDs)
            {
                bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
            }
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievementsList containing one valid and then one invalid AchievementId")]
        public void GrantAchievement_ValidInvalidAchievements()
        {
            GuaranteeAchievementsAvailable(2);
            List<string> achievementIDs = new List<string>(2);

            //Create a valid achievementID
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            string validAchievementID = (from achievement in results.Achievements
                                         where achievement.IsEarned == false
                                         select achievement.Key).First();
            achievementIDs.Add(validAchievementID);

            //Create an invalid achievementID
            achievementIDs.Add("X");
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achievementGame.GameId, AppID);

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an AchievemenstList containing one invalid and then one valid AchievementId")]
        public void GrantAchievement_InvalidValidAchievements()
        {
            GuaranteeAchievementsAvailable(2);
            List<string> achievementIDs = new List<string>(2);

            //Create an invalid achievementID
            achievementIDs.Add("X");

            //Create a valid achievementID
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            string validAchievementID = (from achievement in results.Achievements
                             where achievement.IsEarned == false
                             select achievement.Key).First();
            achievementIDs.Add(validAchievementID);

            //Create a new achievement list with the invalid and valid achievements
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achievementGame.GameId, AppID);

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        #endregion // "AchievementsList tests"
        #region "Achievement tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementId")]
        public void GrantAchievement_EmptyAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = string.Empty;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with no AchievementId")]
        public void GrantAchievement_MalformedRequest_NoAchievementID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("achievementId", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [TestProperty("BugId", "9828")]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with no format on the query string")]
        public void GrantAchievement_MalformedRequest_NoFormat()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            string requestBody = MetroidTestUtil.GetGrantAchievementsString(grantAchievements);
            string query = "/GrantAchievements";

            //Grant the achievement
            Response ret = testScenarios.ExecuteCustomQuery("GrantAchievements", query, requestBody, achievementGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a zero AchievementId")]
        public void GrantAchievement_ZeroAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "0";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected - bug #2325");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId")]
        public void GrantAchievement_InvalidAchievementID()
        {
            GuaranteeAchievementsAvailable(1);
            string achievementID = "X";

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId with a boundary condition")]
        public void GrantAchievement_InvalidAchievementID_Boundary()
        {
            GuaranteeAchievementsAvailable(1);

            //Get the highest-numbered key for this game and increment it
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            int maxKey = 0;
            foreach (Achievement a in results.Achievements)
            {
                int key = Int16.Parse(a.Key);
                if (key > maxKey)
                    maxKey = key;
            }
            string achievementID = (maxKey + 1).ToString();

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID); 

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsFalse(achievementGranted, "Achievement [{0}] was granted", achievementID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a valid AchievementId")]
        public void GrantAchievement_ValidAchievementID()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a valid timestamp")]
        public void GrantAchievement_ValidTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a future timestamp")]
        public void GrantAchievement_FutureTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //A year and a day from today in the future
            earnedDate = earnedDate.AddYears(1);
            earnedDate = earnedDate.AddDays(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with a past timestamp")]
        public void GrantAchievement_PastTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //A year and a day from today in the past
            earnedDate = earnedDate.AddYears(-1);
            earnedDate = earnedDate.AddDays(-1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with no timestamp")]
        public void GrantAchievement_MalformedRequest_NoTimestamp()
        {
            GuaranteeAchievementsAvailable(1);
            DateTime earnedDate = DateTime.Now;

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, earnedDate, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");

            //Get the GrantAchievements string
            string grantAchievementsString = MetroidTestUtil.GetGrantAchievementsString(grantAchievements);

            //Remove the earneddatetime
            int start = grantAchievementsString.IndexOf("<EarnedDateTime>");
            int end = grantAchievementsString.IndexOf("</EarnedDateTime>") + "</EarnedDateTime>".Length;
            int count = end - start;
            grantAchievementsString = grantAchievementsString.Remove(start, count);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievementsString, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.InternalServerError, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with no earnedOnline value - should be accepted because a default is used")]
        public void GrantAchievement_MalformedRequest_NoEarnedOnline()
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MalformedAchievement("earnedOnline", achievementGame.GameId);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with PlayerOnline = false")]
        public void GrantAchievement_PlayerNotOnline()
        {
            GuaranteeAchievementsAvailable(1);
            bool playerOnline = false;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, playerOnline, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant an achievement with PlayerOnline = true")]
        public void GrantAchievement_PlayerOnline()
        {
            GuaranteeAchievementsAvailable(1);
            bool playerOnline = true;

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, playerOnline, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "GrantAchievements failed");

            //Check the outcome
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        #endregion // "Achievement tests"
        #region "Gamerscore tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant one achievement and verify the Gamerscore")]
        public void GrantAchievement_Gamerscore_OneAchievement()
        {
            GuaranteeAchievementsAvailable(1);

            //Get the user's initial Gamerscore
            int initialGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleUnearned(achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant");
            string achievementID = grantAchievements.Achievements[0].Key;

            //Get the G for this achievement
            int achvGamerscore = testScenarios.GetGamerscoreForAchievement(achievementID, achievementGame.GameId, us_locale, PlatformId);
            if (achvGamerscore == -1)
                Assert.Inconclusive("Test cannot complete: no Gamerscore found for achievement {0}", achievementID);

            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test cannot complete: GrantAchievements call failed");

            //Verify the achievement was granted
            bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);

            //Check the user's Gamerscore
            int currentGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);
            Assert.AreEqual(initialGamerscore + achvGamerscore, currentGamerscore, "Gamerscore is not correct");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Grant three achievements and verify the Gamerscore")]
        public void GrantAchievement_Gamerscore_ThreeAchievements()
        {
            int achievementCount = 3;
            GuaranteeAchievementsAvailable(achievementCount);
            List<string> achievementIDs = new List<string>(achievementCount);

            //Get the user's initial Gamerscore
            int initialGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);

            //Create an achievement list
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_MultipleUnearned(achievementCount, achievementGame.GameId, AppID, us_locale, PlatformId);
            Assert.IsNotNull(grantAchievements, "Not enough achievements were available to grant");
            for (int i = 0; i < achievementCount; i++)
            {
                achievementIDs.Add(grantAchievements.Achievements[i].Key);
            }

            //Get the G for these achievements
            int newGamerscore = 0;
            int achvGamerscore;
            foreach (string achievementID in achievementIDs)
            {
                achvGamerscore = testScenarios.GetGamerscoreForAchievement(achievementID, achievementGame.GameId, us_locale, PlatformId);
                if (achvGamerscore == -1)
                    Assert.Inconclusive("Test cannot complete: no Gamerscore found for achievement {0}", achievementID);
                else
                    newGamerscore += achvGamerscore;
            }

            //Grant the achievements
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("Test cannot complete: GrantAchievements call failed");

            //Verify the achievements were granted
            foreach (string achievementID in achievementIDs)
            {
                bool achievementGranted = testScenarios.CheckAchievementForGame(achievementID, achievementGame.GameId, us_locale, PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
            }

            //Check the user's Gamerscore
            int currentGamerscore = testScenarios.GetGamerscore(us_locale, PlatformId);
            Assert.AreEqual(initialGamerscore + newGamerscore, currentGamerscore, "Gamerscore is not correct");
        }

        #endregion "Gamerscore tests"
        #region "SQL injection tests"
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 1 - 'use master \n drop database LIVEN_NPDB'")]
        public void GrantAchievement_SQLInjection_AchievementID1()
        {
            SQL_Injection_Test("use master \n drop database LIVEN_NPDB");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 2 - 'use LIVEN_NPDB \n delete table t_servers'")]
        public void GrantAchievement_SQLInjection_AchievementID2()
        {
            SQL_Injection_Test("use LIVEN_NPDB \n delete table t_servers");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 3 - 'use master \n drop database RewardsDB'")]
        public void GrantAchievement_SQLInjection_AchievementID3()
        {
            SQL_Injection_Test("use master \n drop database RewardsDB");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 4 - 'use master \n drop database RewardsQueueDb'")]
        public void GrantAchievement_SQLInjection_AchievementID4()
        {
            SQL_Injection_Test("use master \n drop database RewardsQueueDb");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 5 - '1=1'")]
        public void GrantAchievement_SQLInjection_AchievementID5()
        {
            SQL_Injection_Test("1=1");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("SQL Injection AchievementID 6 - '=achievementid'")]
        public void GrantAchievement_SQLInjection_AchievementID6()
        {
            SQL_Injection_Test("=achievementid");
        }

        private void SQL_Injection_Test(string text)
        {
            GuaranteeAchievementsAvailable(1);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(text, achievementGame.GameId, AppID);
            
            //Grant the achievement
            Response ret = testScenarios.GrantAchievements(grantAchievements, us_locale, PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "GrantAchievements failed - Http response status was not as expected");
        }

        #endregion // "SQL injection tests"

        #region Locale tests

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GrantAchievements_Locale_Unsupported()
        {
            GuaranteeAchievementsAvailable(1);

            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement("1", achievementGame.GameId, AppID);
            Response response = testScenarios.GrantAchievements(grantAchievements, Constants.UnsupportedLocale, achievementGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GrantAchievements_Locale_None()
        {
            GuaranteeAchievementsAvailable(1);

            string emptyLocale = string.Empty;
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement("1", achievementGame.GameId, AppID);
            Response response = testScenarios.GrantAchievements(grantAchievements, emptyLocale, achievementGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }

        #endregion Locale tests

        #region Support functions

        /// <summary>
        /// Ensures the current user has a given number of unearned achievements and if not, creates and loads a new user
        /// </summary>
        /// <param name="achievementNeededCount">How many unearned achievements are needed</param>
        private void GuaranteeAchievementsAvailable(int achievementNeededCount)
        {
            if (testScenarios == null)
            {
                metroidTransport = new MetroidTransport();
                testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
            }
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, PlatformId);
            int achievementsAvailable = (from a in results.Achievements
                                         where a.IsEarned == false
                                         select a).Count();
            if (achievementsAvailable < achievementNeededCount)
            {
                testScenarios = new MetroidTestScenarioLibrary(true);
            }
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\JsonTests.cs ===
﻿using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Text;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class JsonTests
    {
        private MetroidTransport metroidTransport;
        private MetroidTestScenarioLibrary testScenarios;
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private static TestGame achGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestGame allStatsGame = TestGameUtility.GetFirstGameWithAllStats();
        private readonly string us_locale = "en-US";

        public JsonTests()
        {
            metroidTransport = new MetroidTransport();
            testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
        }

        #region Json tests
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Call GetLeaderboard with content type application/json")]
        public void Json_GetLeaderboard()
        {
            //Example Uri: gamedata.svc/leaderboard?format=json&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}
            string query = "gameId=" + testGame.GameId.ToString() + "&variant=" + testGame.Variant.ToString() + "&property=BestScore&datagroup=W1&numRows=100&rankStart=1&socialGraph=2";
            metroidTransport.UpdateStsToken(testGame.GameId, testGame.PlatformId);
            string fullUri = metroidTransport.GameDataService_fullUri + "/leaderboard?format=json&" + query;
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            LeaderboardResult initialLeaderboard = GetObjectFromJson<LeaderboardResult>(ret);
            long initialScore = long.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.BestScore));
            long newHighScore = initialScore + 1;

            //Post a higher score
            string fullPostGameResultUri = metroidTransport.RewardsService_fullUri + "/GameResult?format=json";
            GameResult gameResult = testScenarios.CreateGameResult(testGame, newHighScore, 1, "blob", "Win");
            string gameResultString = GetPostBodyStringJson(gameResult);
            ExecutePOSTCall(gameResultString, fullPostGameResultUri, us_locale, testGame.PlatformId.ToString());

            // Get the new high score
            ret = ExecuteWebServiceCall(fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");
            LeaderboardResult currentLeaderboard = GetObjectFromJson<LeaderboardResult>(ret);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(currentLeaderboard, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newHighScore, actualScore, "Leaderboard was not updated with high score");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Call GetDatablob with content type application/json")]
        public void Json_GetDatablob()
        {
            string datablobId = string.Empty;
            datablobId = testScenarios.GetStatValue(allStatsGame, us_locale, LeaderboardPropertyType.BestScoreDataBlobId, "BestScore");

            if (string.IsNullOrEmpty(datablobId))
            {
                LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(allStatsGame, us_locale, "I can haz more achievements", "Win", 1);
                datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            }

            //Example Uri: gamedata.svc/Datablob?format=json&DatablobId={DatablobId}
            string fullUri = metroidTransport.GameDataService_fullUri + "/Datablob?format=json&" + "DatablobId=" + datablobId;
            metroidTransport.UpdateStsToken(allStatsGame.GameId, allStatsGame.PlatformId);
            Response ret = ExecuteWebServiceCall(fullUri, us_locale, allStatsGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");

            DatablobResult blobresult = GetObjectFromJson<DatablobResult>(ret);
            Assert.IsNotNull(Encoding.UTF8.GetString(blobresult.Blob), "Blob was null or empty");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Call PostGameResult with content type application/json")]
        public void Json_PostGameResult()
        {
            //Example Uri: RewardsService.svc/GameResult?format=json 
            string fullUri = metroidTransport.RewardsService_fullUri + "/GameResult?format=json";

            GameResult gameResult = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = GetPostBodyStringJson(gameResult);

            metroidTransport.UpdateStsToken(testGame.GameId, testGame.PlatformId);
            Response ret = ExecutePOSTCall(gameResultString, fullUri, us_locale, testGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.Accepted, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Call GrantAchievements with content type application/json")]
        public void Json_GrantAchievements()
        {
            MetroidTestScenarioLibrary lib = testScenarios;
            try
            {
                lib = new MetroidTestScenarioLibrary(true);
            }
            catch (AssertInconclusiveException) { }

            //Example Uri: RewardsService.svc/GrantAchievements?format=json
            string fullUri = metroidTransport.RewardsService_fullUri + "/GrantAchievements?format=json";

            GrantAchievements grantAchievements = lib.CreateAchievements_SingleUnearned(achGame.GameId, Guid.NewGuid().ToString(), us_locale, achGame.PlatformId);
            Assert.IsNotNull(grantAchievements, "No achievements found that we can grant - bug #5500");
            string grantAchString = GetPostBodyStringJson(grantAchievements);

            metroidTransport.UpdateStsToken(achGame.GameId, achGame.PlatformId);
            Response ret = ExecutePOSTCall(grantAchString, fullUri, us_locale, achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status code is not as expected");
        }

        #endregion Json tests
        #region Support functions
        private Response ExecutePOSTCall(string body, string requestUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting POST operation {0}", requestUri);
            Trace.TraceInformation("Username: {0}", metroidTransport.CurrentUser);
            Trace.TraceInformation("Password: {0}", metroidTransport.CurrentUserPassword);

            Response response = MetroidTestUtil.ExecutePOSTCallJson(body, requestUri, locale, platformId, metroidTransport.CurrentStsTicket);
            return response;
        }

        private Response ExecuteWebServiceCall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting GET operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", metroidTransport.CurrentUser);
            Trace.TraceInformation("Password: {0}", metroidTransport.CurrentUserPassword);

            Response response = MetroidTestUtil.ExecuteGETCallJson(fullUri, locale, platformId, metroidTransport.CurrentStsTicket);
            return response;
        }

        private string GetPostBodyStringJson(object postBodyObject)
        {
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(postBodyObject.GetType());
            using (MemoryStream ms = new MemoryStream())
            {
                serializer.WriteObject(ms, postBodyObject);
                ms.Position = 0;
                byte[] buffer = ms.GetBuffer();
                return Encoding.UTF8.GetString(buffer, 0, (int)ms.Length);
            }
        }

        /// <summary>
        /// Deserializes a Json string to an object of specific type
        /// </summary>
        private static T GetObjectFromJson<T>(Response resp)
        {
            if (!String.IsNullOrEmpty(resp.Error))
            {
                throw new WebException(resp.Error);
            }

            T result = MetroidTestUtil.GetObjectFromJson<T>(resp.Body);
            return result;
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utilities\TestGame.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using Leet.Core.Platforms;

namespace Metroid.Test
{

    public class TestGame
    {
        public string Name { get; set; }
        public uint PlatformId { get; set; }
        public uint GameId { get; set; }
        public uint Variant { get; set; }
        public uint Type { get; set; } // Unknown = 0, Mobile = 1, Web = 2, Console = 4, PC = 8 - see UserData Partner Services spec
        public bool AllStats { get; set; }
        public bool HasAchievements { get; set; }

        public TestGame(string name, uint platformId, uint gameId, uint variant, uint type, bool allStats, bool hasAchievements)
        {
            Name = name;
            PlatformId = platformId;
            GameId = gameId;
            Variant = variant;
            Type = type;
            AllStats = allStats;
            HasAchievements = hasAchievements;
        }

        public TestGame()
        {
            Name = "";
            PlatformId = 0;
            GameId = 0;
            Variant = 0;
            Type = 0;
            AllStats = false;
            HasAchievements = false;
        }
    }

    public static class TestGameUtility
    {

        private static string ConfigFile = "TestData.xml";
        private static List<TestGame> allGames;

        static TestGameUtility()
        {
            allGames = GetAllGames();
        }

        //Hardcoding values here, since these are ingested in GMS and are available across all environments

        /// <summary>
        /// Returns a game with all leaderboard stats(score,time and wins) with high values as best
        /// </summary>
        public static TestGame AllStatsGame 
        { 
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 0, 3, true, false);
                return tg;
            }
        }
        
        /// <summary>
        /// Returns a game with all leaderboard stats(score,time and wins) with low values as best
        /// </summary>
        public static TestGame AllStatsGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 1, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stats with high values as best
        /// </summary>
        public static TestGame BestScoreTimeGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 2, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stats with low values as best
        /// </summary>
        public static TestGame BestScoreTimeGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 3, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score stat with high values as best
        /// </summary>
        public static TestGame BestScoreGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 4, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score stat with low values as best
        /// </summary>
        public static TestGame BestScoreGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 5, 3, true, false);
                return tg;
            }
        }
        
        /// <summary>
        /// Returns a game with time stat with high values as best
        /// </summary>
        public static TestGame BestTimeGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 6, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with time stat with low values as best
        /// </summary>
        public static TestGame BestTimeGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 7, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with wins stat with most wins as best
        /// </summary>
        public static TestGame WinsGame
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 8, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with time stat with least wins as best
        /// </summary>
        public static TestGame WinsGameReverse
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 9, 3, true, false);
                return tg;
            }
        }

        /// <summary>
        /// Returns a game with score and time stat with high score as best and low score as best
        /// </summary>
        public static TestGame BestScoreLowestTime
        {
            get
            {
                TestGame tg = new TestGame("Sealegend", 5, 1179582721, 10, 3, true, false);
                return tg;
            }
        }

        public static List<TestGame> AllGames
        {
            get
            {
                if (allGames == null)
                {
                    allGames = GetAllGames();
                }
                return allGames;
            }

        }

        public static List<TestGame> GetAllGames()
        {
            XElement xe = XElement.Load(ConfigFile);
            var games = xe.Descendants("Game");
            List<TestGame> allGames = new List<TestGame>();

            foreach (var game in games)
            {
                TestGame tg = new TestGame();

                tg.Name = game.Attribute("name").Value;
                tg.GameId = uint.Parse(game.Attribute("id").Value);
                tg.Variant = uint.Parse(game.Attribute("variant").Value);
                tg.PlatformId = uint.Parse(game.Attribute("platformId").Value);
                tg.Type = uint.Parse(game.Attribute("type").Value);
                tg.AllStats = bool.Parse(game.Attribute("allstats").Value);
                tg.HasAchievements = bool.Parse(game.Attribute("HasAchievements").Value);

                allGames.Add(tg);
            }

            return allGames;
        }

        public static List<TestGame> GetGamesForVariant(uint variant)
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.Variant == variant)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static List<TestGame> GetGamesForPlatformId(uint platformId)
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.PlatformId == platformId)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static List<TestGame> GetGamesWithAchievements()
        {
            List<TestGame> reqGames = new List<TestGame>();

            foreach (var game in AllGames)
            {
                if (game.HasAchievements)
                {
                    reqGames.Add(game);
                }
            }

            return reqGames;
        }

        public static TestGame GetFirstGameWithAchievements()
        {
            List<TestGame> testGames = GetGamesWithAchievements();
            return testGames[0];
        }

        public static TestGame GetFirstGameWithAllStats()
        {
            return AllGames.Where(game => game.AllStats == true).First();
        }

        public static List<TestGame> GetAllGamesWithAllStats()
        {
            return AllGames.Where(game => game.AllStats == true).ToList<TestGame>();
        }

        public static TestGame GetTestGame(string name)
        {
            TestGame tg = GetAllGames().Where(g => g.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).First();
            return tg;
        }

        public static TestGame GetTestGame(string name, uint variant)
        {
            TestGame tg = GetAllGames().Where(g => g.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).First();
            tg.Variant = variant;
            return tg;
        }

        public static TestGame GetTestGame(uint gameId)
        {
            TestGame tg = GetAllGames().Where(g => g.GameId == gameId).First();
            return tg;
        }

        public static TestGame VivaPinata
        {
            get
            {
                TestGame tg = new TestGame("Viva Piñata", (uint)PlatformType.Xbox360, 1297287233, 0, 4, true, true);
                return tg;
            }
        }

        /// <summary>
        /// Returns information for GamesHub Title
        /// </summary>
        public static TestGame GamesHubTitle
        {
            get
            {
                TestGame tg = new TestGame("GamesHub", 5, 1481443286, 0, 3, false, false); // TODO: type correct?
                return tg;
            }
        }

        /// <summary>
        /// Returns information for LiveApp Title
        /// </summary>
        public static TestGame LiveAppTitle
        {
            get
            {
                string env = AccountTransport.GetCurrentLIVEnEnv();
                TestGame tg;
                if (env.Equals("int2") ||
                    env.Equals("certnet") ||
                    env.Equals("partnernet"))
                {
                    tg = new TestGame("LIVEMobileApp", 5, 1297287404, 0, 1, false, false);
                }
                else
                {
                    //HACK: using Games Hub titleId -- Live Mobile App will not be propped to TestNet/Dev
                    tg = new TestGame("LIVEMobileApp", 5, 1481443286, 0, 1, false, false);
                }
                return tg;
            }
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\HealthCheck.cs ===
﻿using System.Net;
using Leet.Core.Platforms;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class HealthCheck
    {
        private MetroidTransport metroidTransport;
        private MetroidTestScenarioLibrary testScenarios;
        private string us_locale = "en-US";
        private int platformId = (int)PlatformType.Mobile;

        public HealthCheck()
        {
            metroidTransport = new MetroidTransport();
            testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
        }

        #region Help page test cases
        [TestMethod]
        [Owner("hbkdal")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://uds.<dev>.xboxlive.com/GameData.svc")]
        public void CheckGameDataService_Help()
        {
            CheckService_Help(metroidTransport.GameDataService_fullUri + "/help");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify auto-generated schema is returned for https://rewards.<dev>.xboxlive.com/RewardsService.svc")]
        public void CheckRewardsService_Help()
        {
            CheckService_Help(metroidTransport.RewardsService_fullUri + "/help");
        }        
        #endregion Help page test cases

        private void CheckService_Help(string fullUri)
        {
            Response resp = MetroidTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, platformId.ToString(), metroidTransport.CurrentStsTicket);
            Assert.AreEqual(HttpStatusCode.OK, resp.StatusCode, "Http response status was not as expected");
            Assert.IsTrue(resp.Body.ToLower().Contains("service help page"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\PostGameResult.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using live.common;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class PostGameResult
    {
        private static MetroidTransport metroidTransport = new MetroidTransport();
        private MetroidTestScenarioLibrary testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
        private static TestGame testGame = TestGameUtility.AllStatsGame;
        private XmlHelper xhelp = new XmlHelper();
        private readonly string us_locale = "en-US";

        #region "GameID tests"

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify failure on titleId mismatch in the token")]
        public void PostGameResult_Verify_TitleId()
        {
            TestGame tgFlowerz = TestGameUtility.GetTestGame("Flowerz");
            TestGame tgHexic = TestGameUtility.GetTestGame("HexicRush");

            GameResult gameResult = testScenarios.CreateGameResult(tgFlowerz, 1, 1, null, null);
            string requestBody = MetroidTestUtil.GetPostGameResultString(gameResult);
            string fullUri = metroidTransport.RewardsService_fullUri + "/GameResult";

            metroidTransport.UpdateStsToken(tgHexic.GameId, tgHexic.PlatformId);
            Response ret = MetroidTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tgFlowerz.PlatformId.ToString(), metroidTransport.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify failure on platformId mismatch in the token")]
        public void PostGameResult_Verify_PlatformId()
        {
            TestGame tgFlowerz = TestGameUtility.GetTestGame("Flowerz");
            string wrongPlatformId = "4";

            GameResult gameResult = testScenarios.CreateGameResult(tgFlowerz, 1, 1, null, null);
            string requestBody = MetroidTestUtil.GetPostGameResultString(gameResult);
            string fullUri = metroidTransport.RewardsService_fullUri + "/GameResult";

            metroidTransport.UpdateStsToken(tgFlowerz.GameId, tgFlowerz.PlatformId);
            Response ret = MetroidTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, wrongPlatformId, metroidTransport.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a valid gameID")]
        public void PostGameResult_GameID_Valid()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        #endregion "GameID tests"
        #region "GameResult tests"
        [TestMethod]
        [TestProperty("BugId", "8849")]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an null game result and verify the status code")]
        public void PostGameResult_NullGameResult()
        {
            GameResult gr = null;
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match - #8849");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a blank game result and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBlankGameResultAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for blank GameResult");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a new best score and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBestScoreAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));
            long score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Score = score + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestScore"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best score GameResult");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a new best time and verify the LastPlayedDateTime was updated")]
        public void PostGameResult_GameResult_PostBestTimeAndVerifyLastPlayedDateTimeUpdated()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));
            long time = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Time = time + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best time GameResult");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result for a newly created user")]
        public void PostGameResult_ForNewUser()
        {
            Account acct = AccountTransport.CreateAccount();
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(acct);
            Response result = scenarios.PostGameResultWithDefaultStats(testGame, us_locale);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a valid GameResultID")]
        public void PostGameResult_GameResultID_Valid()
        {
            Guid grId = Guid.NewGuid();
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, grId, DateTime.Now, 1, 1, "Win", string.Empty, testGame.Variant);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an existing GameResultId")]
        public void PostGameResult_GameResultID_AlreadyExistingGameResultId()
        {
            Guid grId = Guid.NewGuid();
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, grId, DateTime.Now, 1, 1, "Win", string.Empty, testGame.Variant);
            testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Response response = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, response.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no GameResultID")]
        public void PostGameResult_GameResultID_Empty()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("gameResultId", testGame.GameId, Guid.Empty, DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        #endregion "GameResult tests"
        #region "Locale tests"

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an empty locale")]
        public void PostGameResult_Locale_EmptyString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, string.Empty, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a null locale")]
        public void PostGameResult_Locale_Null()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, null, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: ma-MA")]
        public void PostGameResult_Locale_Invalid()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "ma-MA", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result for a user from a non-US locale")]
        public void PostGameResult_Locale_ForeignUser()
        {
            Account ukUser = AccountTransport.CreateAccount(CountryId.GB);
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(ukUser);
            Response result = scenarios.PostGameResultWithDefaultStats(testGame, "en-GB");
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a valid but unsupported locale")]
        public void PostGameResult_Locale_ValidButUnsupported()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "sv-SE", testGame.PlatformId, testGame.GameId); //Swedish locale
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: en-Us")]
        public void PostGameResult_Locale_Malformed1()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "en-Us", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: En-uS")]
        public void PostGameResult_Locale_Malformed2()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "En-uS", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with unusual case: EN-US")]
        public void PostGameResult_Locale_Malformed3()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "EN-US", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: long string")]
        public void PostGameResult_Locale_LongString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "I want to be a locale", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: short string")]
        public void PostGameResult_Locale_ShortString()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "sh", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an invalid locale: special characters")]
        public void PostGameResult_Locale_SpecialCharacters()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "#$@#$@%", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database LIVEN_NPDB")]
        public void PostGameResult_Locale_SQLInjection1()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database LIVEN_NPDB", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string:use LIVEN_NPDB \n delete table t_servers ")]
        public void PostGameResult_Locale_SQLInjection2()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use LIVEN_NPDB \n delete table t_servers", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database RewardsDB")]
        public void PostGameResult_Locale_SQLInjection3()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database RewardsDB", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: use master \n drop database RewardsQueueDb")]
        public void PostGameResult_Locale_SQLInjection4()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "use master \n drop database RewardsQueueDb", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: 1=1")]
        public void PostGameResult_Locale_SQLInjection5()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "1=1", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a locale with a SQL injection string: =locale")]
        public void PostGameResult_Locale_SQLInjection6()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, "=locale", testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        #endregion "Locale tests"
        #region Platform tests"
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with platform = Mobile")]
        public void PostGameResult_Platform_Mobile()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with platform = WebGames")]
        public void PostGameResult_Platform_WebGames()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, PlatformType.WebGames, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }
        #endregion "Platform tests"

        #region "Time tests"
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a negative time should return a BadRequest")]
        public void PostGameResult_Time_NegativeTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, -1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with zero time")]
        public void PostGameResult_Time_ZeroTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a random time")]
        public void PostGameResult_Time_RandomTime()
        {
            Random rand = new Random();
            long time = (long)(rand.Next(1, int.MaxValue));
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, time, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with time = long.MaxValue")]
        public void PostGameResult_Time_MaxTime()
        {
            Account acct = AccountTransport.CreateAccount();
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(acct);
            GameResult gr = scenarios.CreateGameResult(testGame, 1, long.MaxValue, null, null);
            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no time (an optional parameter)")]
        public void PostGameResult_Time_NoTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, null, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil score (an optional parameter)")]
        public void PostGameResult_Time_NilTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify graceful failure when time is long.MaxValue + 1")]
        public void PostGameResult_Time_OverBoundaryHighTime()
        {
            string newTime = MetroidTestUtil.GetMaxLongPlusOne();

            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gr);
            gameResultString = gameResultString.Replace("<Time>1</Time>", "<Time>" + newTime + "</Time>");

            Response ret = testScenarios.PostGameResult(gameResultString, us_locale, testGame.PlatformId.ToString(), testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Expected BadRequest for a time of {0}", newTime);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify that a value of min DateTime is accepted and GameResult is processed")]
        public void PostGameResult_MinDateTime_VerifyGameResultAccepted()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));
            long time = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.MinValue;
            gr.Time = time + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best time GameResult");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify that a value of max DateTime is accepted and GameResult is processed")]
        public void PostGameResult_MaxDateTime_VerifyGameResultAccepted()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));
            long time = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.MaxValue;
            gr.Time = time + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best time GameResult");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Verify that GameResult is processed when no date time is supplied")]
        public void PostGameResult_NoDateTime_VerifyGameResultAccepted()
        {
            DateTime dateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));
            long time = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.Variant = testGame.Variant;
            gr.GameResultId = Guid.NewGuid();
            //gr.TimeStamp = DateTime.MinValue;
            gr.Time = time + 1;
            gr.Outcome = "Win";

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            DateTime newDateTime = DateTime.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.LastPlayedDateTime, "BestTime"));

            Assert.IsTrue(newDateTime.CompareTo(dateTime) > 0, "DateTime was not updated for best time GameResult");
        }

        #endregion "Time tests"
        #region "Score tests"
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a negative score")]
        public void PostGameResult_Score_NegativeScore()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, -1, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a zero score")]
        public void PostGameResult_Score_ZeroScore()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a random score")]
        public void PostGameResult_Score_RandomScore()
        {
            Random rand = new Random();
            long score = (long)(rand.Next(int.MinValue, int.MaxValue));
            GameResult gr = testScenarios.CreateGameResult(testGame, score, 1, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a score = long.MaxValue")]
        public void PostGameResult_Score_MaxScore()
        {
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = scenarios.CreateGameResult(testGame, long.MaxValue, 1, null, null);
            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no score (an optional parameter)")]
        public void PostGameResult_Score_NoScore()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, 1, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil score (an optional parameter)")]
        public void PostGameResult_Score_NilScore()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with negative score and time")]
        public void PostGameResult_Score_NegativeScoreAndTime()
        {
            TestGame tg = TestGameUtility.BestScoreTimeGame;
            GameResult gr = testScenarios.CreateGameResult(tg, -11, -12, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            
            Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with zero score and time")]
        public void PostGameResult_Score_ZeroScoreAndTime()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 0, null, null);
            Response result = testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with No score and time")]
        public void PostGameResult_Score_NoScoreAndTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, null, "blob", "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("Post a game result with No score, time or outcome")]
        public void PostGameResult_Score_NoScoreAndTimeAndOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, null, null, "blob", null);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil score and time")]
        public void PostGameResult_Score_NilScoreAndTime()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil score, time, and outcome and verify failure")]
        public void PostGameResult_Score_NilScoreAndTimeAndOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Score>1</Score>", @"<Score i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Time>1</Time>", @"<Time i:nil=""true"" />");
            gameResultString = gameResultString.Replace("<Outcome>Win</Outcome>", @"<Outcome i:nil=""true"" />");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a higher best score and verify the BestScore was updated")]
        public void PostGameResult_Score_UpdateBestScoreAndVerifyUpdated()
        {
            long score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, null, null, 1);
            long newscore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newscore, score + 1, "BestScore was not updated");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify graceful failure when score is long.MaxValue + 1")]
        public void PostGameResult_Score_OverBoundaryHighScore()
        {
            string newScore = MetroidTestUtil.GetMaxLongPlusOne();

            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gr);
            gameResultString = gameResultString.Replace("<Score>1</Score>", "<Score>" + newScore + "</Score>");

            Response ret = testScenarios.PostGameResult(gameResultString, us_locale, testGame.PlatformId.ToString(), testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Expected BadRequest for a score of {0}", newScore);
        }

        #endregion "Score tests"
        #region "Outcome tests"
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a loss and score = long.MaxValue")]
        public void PostGameResult_Outcome_PostLossWithHighestScore()
        {
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Loss";
            gr.Score = long.MaxValue;
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a win and score = long.MinValue")]
        public void PostGameResult_Outcome_PostWinWithLowestScore()
        {
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";
            gr.Score = long.MinValue;
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a win and no score")]
        public void PostGameResult_Outcome_NoScoreGameResultWithWin()
        {
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.TimeStamp = DateTime.Now;
            gr.Outcome = "Win";
            gr.Time = 1;

            Response result = scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result where outcome = Win")]
        public void PostGameResult_Outcome_Win()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result where outcome = Loss")]
        public void PostGameResult_Outcome_Loss()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Loss");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result where outcome = Tie")]
        public void PostGameResult_Outcome_Tie()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Tie");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result where outcome = None")]
        public void PostGameResult_Outcome_None()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "None");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result where outcome is an invalid string")]
        public void PostGameResult_Outcome_Invalid()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "ghuygwyg");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no outcome (an optional parameter)")]
        public void PostGameResult_Outcome_NoOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Outcome>Win</Outcome>", "");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil outcome (an optional parameter)")]
        public void PostGameResult_Outcome_NilOutcome()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, null, "blob", 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }
        #endregion "Outcome tests"
        #region "Timestamp tests"
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with an empty timestamp")]
        public void PostGameResult_TimeStamp_Empty()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("timestamp", testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }
        #endregion "Timestamp tests"
        #region "Blob tests"

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no blob (an optional parameter)")]
        public void PostGameResult_Blob_NoBlob()
        {
            GameResult gameResult = testScenarios.CreateGameResult_MalformedResult("blob", testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", string.Empty, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with nil blob (an optional parameter)")]
        public void PostGameResult_Blob_NilBlob()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame, 1, 1, null, "Win");
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a blob at the maximum size limit")]
        public void PostGameResult_Blob_Limit()
        {
            int length = 10240;
            string blob = new string('?', length);
            byte[] blobArray = Encoding.UTF8.GetBytes(blob);
            Trace.TraceInformation("Blob size: {0}", blobArray.Length);

            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", blob, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "Status code did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with a blob over the maximum size limit")]
        public void PostGameResult_Blob_OverLimit()
        {
            int length = 10241;
            string blob = new string('?', length);
            byte[] blobArray = Encoding.UTF8.GetBytes(blob);
            Trace.TraceInformation("Blob size: {0}", blobArray.Length);

            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", blob, 0);
            Response result = testScenarios.PostGameResult(gameResult, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }

        #endregion "Blob tests"
        #region Variant tests
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no variant set")]
        public void PostGameResult_Variant_NoVariant()
        {
            GameResult gameResult = testScenarios.CreateGameResult(testGame.GameId, Guid.NewGuid(), DateTime.Now, 1, 1, "Win", "blob", 0);
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            gameResultString = gameResultString.Replace("<Variant>0</Variant>", "");

            Response result = testScenarios.PostGameResult(gameResultString, us_locale, PlatformType.Mobile, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode, "Status code did not match");
        }
        #endregion Variant tests
        #region Query tests
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Post a game result with no format on the query string")]
        public void PostGameResult_MalformedRequest_NoFormat()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 10, 10, null, null);
            string requestBody = MetroidTestUtil.GetPostGameResultString(gr);
            string query = "/GameResult";

            Response ret = testScenarios.ExecuteCustomQuery("PostGameResult", query, requestBody, testGame);
            Assert.AreEqual(HttpStatusCode.Accepted, ret.StatusCode, "PostGameResult failed - Http response status was not as expected");
        }
        #endregion Query tests
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utility\Constants.cs ===
﻿using System.Collections.Generic;

namespace Metroid.Test
{
    public class Constants
    {
        // Config files
        public const string METROID_CONFIG = "MetroidTransport.config.xml";
        public const string PROFILEUSER_CONFIG = "ProfileUser.Config.xml";

        // URLs
        public const string GdsNamespaceUri = "xmlns=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"";
        public const string GdsContractsNamespaceUri = "xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"";
        public const string DefaultXmlNamespace = "xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"";

        // Services
        public const string RewardsService = "RewardsService.svc"; //rewards
        public const string GameDataService = "Gamedata.svc"; //uds
        public const string ProfileService = "Profiles.svc"; //uds

        // RewardsService path and queries
        public const string PostGameResult_RelativePathAndQuery = "/GameResult?format=xml";

        // GameDataService path and queries
        public const string GrantAchievements_RelativePathAndQuery = "/GrantAchievements?format=xml";
        public const string GetLeaderBoard_RelativePathAndQuery = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
        public const string GetAchievements_RelativePathAndQuery = "/achievements?format=xml&gameId={gameId}";
        public const string GetDataBlob_RelativePathAndQuery = "/Datablob?format=xml&datablobId={DataBlobId}";

        // ProfileService path and queries
        public const string GetProfile_RelativePathAndQuery = "/profile?format=xml&sectionflags={sectionflags}&gamertag={gamertag}";
        
        // AppIDs and TitleIDs
        public const string BACKGAMMON_APPID = "c203973c-fd2b-4b8c-b785-5e38b3e35dec";
        public const string HEXICRUSH_APPID = "55755a91-2b4a-4879-969f-f4be081a8d13";

        //Profile sections
        public const SectionFlags AllProfileSections = SectionFlags.XboxLiveProperties | SectionFlags.Friends | SectionFlags.RecentGames | SectionFlags.RecentAchievements | SectionFlags.PresenceInfo | SectionFlags.PrivacySettings;
        public const SectionFlags RecentGamesAndAchievementsSections = SectionFlags.RecentGames | SectionFlags.RecentAchievements;

        //LIVEn Error Codes
        public const uint LIVEnErrorCode_InvalidArgumentOrBadRequest = 2151475810;
        public const uint LIVEnErrorCode_UserNotEligibleForFreeGamertagChange = 2151475812;
        public const uint LIVEnErrorCode_GamertagIsInvalid = 2151475813;
        public const uint LIVEnErrorCode_ErrorOccurredChangingGamertag = 2151475814;

        // Locales
        public const string UnsupportedLocale = "pt-BR";
    }

    /// <summary>
    /// Section flags used for Profile and ProfileEx calls
    /// </summary>
    public enum SectionFlags : uint
    {
        XboxLiveProperties = 1,
        WindowsLiveProperties = 2,  // Deprecated Windows Live Section
        Friends = 4,
        RecentGames = 8,
        RecentAchievements = 16,
        PresenceInfo = 32,
        PrivacySettings = 64
    }

    /// <summary>
    /// Presence onlineStatus values
    /// </summary>
    public enum PresenceStatus : uint
    {
        Online = 0,
        Offline = 1,
        Away = 2,
        Busy = 3,
        Unknown = 4
    }

    /// <summary>
    /// Privacy settings values
    /// </summary>
    public enum PrivacySettings : uint
    {
        Everyone = 0,
        FriendsOnly = 1,
        Blocked = 2
    }

    /// <summary>
    /// Used to determine what property the Leaderboard should rank itself on
    /// Currently, only BestScore and BestTime are supported
    /// </summary>
    public enum LeaderboardPropertyType
    {
        BestScore = 0,
        BestTime,
        CumulativeScore,
        CumulativeTime,
        GamesPlayed,
        Wins,
        Losses,
        LastPlayedDateTime,
        BestScoreDataBlobId,
        BestTimeDataBlobId,
        AverageScore,
        AverageTime
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utilities\TestScenarioLibrary.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml.Linq;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Metroid.Test
{
    public class MetroidTestScenarioLibrary
    {
        private MetroidTransport metroidTransport;

        private static XmlHelper xhelp = new XmlHelper();
        private static TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private static string us_locale = "en-US";

        #region Constructors

        public MetroidTestScenarioLibrary()
        {
            this.metroidTransport = new MetroidTransport();
        }

        public MetroidTestScenarioLibrary(MetroidTransport rTransport)
        {
            this.metroidTransport = rTransport;
        }

        public MetroidTestScenarioLibrary(string username, string password)
        {
            this.metroidTransport = new MetroidTransport(username, password);
        }

        public MetroidTestScenarioLibrary(Account acct)
        {
            this.metroidTransport = new MetroidTransport(acct.XblUser.Settings.UserPassportInfo.MemberName, acct.XblUser.Settings.UserPassportInfo.Password);
        }

        public MetroidTestScenarioLibrary(bool createNewAccount)
        {
            if (createNewAccount)
            {
                try
                {
                    Account acct = AccountTransport.CreateAccount();
                    this.metroidTransport = new MetroidTransport(acct.XblUser.Settings.PersonalInfo.Email, acct.XblUser.Settings.UserPassportInfo.Password);
                }
                catch (Exception err)
                {
                    Assert.Inconclusive("Account creation unsuccessful " + err.ToString());
                }
            }
        }

        #endregion Constructors
        #region FullResponse

        public Response PostGameResult(string gameResultString, string locale, string platformId, uint titleId)
        {
            Response result = this.metroidTransport.PostGameResult(gameResultString, locale, platformId, titleId);
            Thread.Sleep(2000);
            return result;
        }

        public Response GetLeaderboardXml(string gameID, string variant, string property, string rankStart, string dataGroup, string rows, string locale, string platformId, string socialGraph)
        {
            Response result = this.metroidTransport.GetLeaderboard(gameID, variant, property, rankStart, dataGroup, rows, locale, platformId, socialGraph);
            return result;
        }

        public Response GetDatablobXml(string datablobID, string locale, string platformId, string gameId)
        {
            Response result = this.metroidTransport.GetDatablob(datablobID, locale, platformId, gameId);
            return result;
        }

        public Response GetAchievementsXml(string gameId, string locale, string platformId)
        {
            Response result = this.metroidTransport.GetAchievements(gameId, locale, platformId);
            return result;
        }

        public Response GetProfileMyView(string locale, string platformId, SectionFlags sectionFlags)
        {
            uint titleId = TestGameUtility.GamesHubTitle.GameId;

            Response response = this.metroidTransport.GetProfile(locale, titleId, platformId, ((uint)sectionFlags).ToString());
            return response;
        }
       
        public Response ExecuteCustomQuery(string service, string query, string requestBody, TestGame tg)
        {
            string fullUri = string.Empty;
            Response resp = new Response();

            switch (service.ToLower())
            {
                case "getleaderboard":
                case "getdatablob":
                case "getachievements":
                    fullUri = metroidTransport.GameDataService_fullUri + query;
                    metroidTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = MetroidTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, tg.PlatformId.ToString(), metroidTransport.CurrentStsTicket);
                    break;

                case "grantachievements":
                    fullUri = metroidTransport.GameDataService_fullUri + query;
                    metroidTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = MetroidTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tg.PlatformId.ToString(), metroidTransport.CurrentStsTicket);
                    break;

                case "postgameresult":
                    fullUri = metroidTransport.RewardsService_fullUri + query;
                    metroidTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = MetroidTestUtil.ExecuteHttpWebRequestXml("POST", requestBody, fullUri, us_locale, tg.PlatformId.ToString(), metroidTransport.CurrentStsTicket);
                    break;

                case "getprofile":
                    fullUri = metroidTransport.ProfileService_fullUri + query;
                    metroidTransport.UpdateStsToken(tg.GameId, tg.PlatformId);
                    resp = MetroidTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, tg.PlatformId.ToString(), metroidTransport.CurrentStsTicket);
                    break;

                default:
                    Assert.Fail("Service name mismatch-- please check the service name used in the method call.");
                    break;
            }

            return resp;
        }

        #endregion FullResponse
        #region Basic API wrappers
        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResultString"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public Response PostGameResult(string gameResultString, string locale, PlatformType platformId, uint titleId)
        {
            Response result = this.metroidTransport.PostGameResult(gameResultString, locale, ((uint)platformId).ToString(), titleId);
            Thread.Sleep(2000);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GetLeaderboards API with the provided values. 
        /// </summary>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="gameID">the ID of the game</param>
        /// <param name="variant">variant</param>
        /// <param name="property">the property name to rank</param>
        /// <param name="rankStart">the rank to start at (1-based index)</param>
        /// <param name="dataGroup">datagroup (Lifetime, W1, W2, W3, W4, W5, All)</param>
        /// <param name="rows">the maximum number of rows to return</param>
        /// <returns>a valid LeaderboardResult object containing the relevant stats</returns>
        public LeaderboardResult GetLeaderboardXml(uint gameID, uint variant, string property, uint rankStart, string dataGroup, uint rows, string locale, uint platformId)
        {
            Response response = this.GetLeaderboardXml(gameID.ToString(), variant.ToString(), property, rankStart.ToString(), dataGroup, rows.ToString(), locale, platformId.ToString(), "2");

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            LeaderboardResult result = MetroidTestUtil.DeserializeLeaderboardResponseToObject<LeaderboardResult>(response.Body);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GetDatablobXml API with the provided values. 
        /// </summary>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="datablobID">the ID of the datablob to get</param>
        /// <returns>a valid DatablobResult object</returns>
        public DatablobResult GetDatablobXml(string datablobID, string locale, uint platformId, uint gameId)
        {
            Response response = this.GetDatablobXml(datablobID, locale, platformId.ToString(), gameId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            response.Body = xhelp.StripNamespaces(response.Body);
            DatablobResult result = xhelp.LoadXml<DatablobResult>(response.Body);
            return result;
        }

        /// <summary>
        /// Calls the GetAchievements API with the specified values
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <returns>AchievementResult</returns>
        public AchievementsResult GetAchievementsXml(uint gameId, string locale, uint platformId)
        {
            Response response = this.GetAchievementsXml(gameId.ToString(), locale, platformId.ToString());

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }
            string responseBody = response.Body;
            responseBody = responseBody.Replace("xmlns=\"http://schemas.datacontract.org/2004/07/GDS.Contracts\"", "");
            AchievementsResult result = xhelp.LoadXml<AchievementsResult>(responseBody);
            return result;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="rpsTicket">the RPS ticket of the user</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(string grantAchievements, string locale, string platformId)
        {
            Response result = metroidTransport.PostGrantAchievements(grantAchievements, locale, platformId);
            Thread.Sleep(2000);
            return result;
        }

        /// <summary>
        /// Returns the profile information for the current user
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags"></param>
        /// <returns></returns>
        public Profile GetProfileMyView(string locale, uint platformId, SectionFlags sectionFlags)
        {
            Response response = this.GetProfileMyView(locale, platformId.ToString(), sectionFlags);

            if (!String.IsNullOrEmpty(response.Error))
            {
                throw new WebException(response.Error);
            }

            Profile pro = xhelp.LoadXml<Profile>(response.Body);
            return pro;
        }

        

        #endregion Basic API wrappers
        #region PostGameResult helpers

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, PlatformType platformId, uint titleId)
        {
            return this.PostGameResult(gameResult, locale, (uint)platformId, titleId);
        }

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. 
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, uint platformId, uint titleId)
        {
            return this.PostGameResult(gameResult, locale, platformId.ToString(), titleId);
        }

        /// <summary>
        /// Uses the transport class to call the POST GameResult API with the provided values. Use for non-uint invalid PlatformId's.
        /// </summary>
        /// <param name="gameResult">the game result to save</param>
        public Response PostGameResult(GameResult gameResult, string locale, string platformId, uint titleId)
        {
            string gameResultString = MetroidTestUtil.GetPostGameResultString(gameResult);
            return this.PostGameResult(gameResultString, locale, platformId, titleId);
        }

        public Response PostGameResultWithDefaultStats(TestGame tg, string locale)
        {
            GameResult gameResult = this.CreateGameResult(tg.GameId,
                                                          Guid.NewGuid(),
                                                          DateTime.Now,
                                                          1,
                                                          1,
                                                          "Win",
                                                          "blob",
                                                          tg.Variant);

            return this.PostGameResult(gameResult, locale, tg.PlatformId, tg.GameId);
        }

        public GameResult CreateGameResult(uint gameId, Guid gameResultId, DateTime timeStamp, long score, long time, string outcome, string blob, uint variant)
        {
            GameResult gameResult = new GameResult();
            gameResult.GameId = gameId;
            gameResult.GameResultId = gameResultId;
            gameResult.TimeStamp = timeStamp;
            gameResult.Score = score;
            gameResult.Time = time;
            gameResult.Outcome = outcome;
            gameResult.Blob = Encoding.UTF8.GetBytes(blob);
            gameResult.Variant = variant;

            return gameResult;
        }

        /// <summary>
        /// Create a GameResult object for a given game with a malfomed game result
        /// </summary>
        /// <param name="missingParam">The param to leave off ("gameId", "gameResultId", "timeStamp", "score", "time", "outcome", "blob", "variant")</param>
        public GameResult CreateGameResult_MalformedResult(string missingParam, uint gameId, Guid gameResultId, DateTime timeStamp, long score, long time, string outcome, string blob, uint variant)
        {
            GameResult gameResult = new GameResult();
            if (missingParam.ToLower() != "gameid") { gameResult.GameId = gameId; }
            if (missingParam.ToLower() != "gameresultid") { gameResult.GameResultId = gameResultId; }
            if (missingParam.ToLower() != "timestamp") { gameResult.TimeStamp = timeStamp; }
            if (missingParam.ToLower() != "score") { gameResult.Score = score; }
            if (missingParam.ToLower() != "time") { gameResult.Time = time; }
            if (missingParam.ToLower() != "outcome") { gameResult.Outcome = outcome; }
            if (missingParam.ToLower() != "blob") { gameResult.Blob = Encoding.UTF8.GetBytes(blob); }
            if (missingParam.ToLower() != "variant") { gameResult.Variant = variant; }

            return gameResult;
        }

        public GameResult CreateGameResultWithDefaultStats(TestGame tg, string locale)
        {
            return this.CreateGameResult(tg.GameId,
                                        Guid.NewGuid(),
                                        DateTime.Now,
                                        1,
                                        1,
                                        "Win",
                                        "blob",
                                        tg.Variant);

        }

        public Response PostGameResultWithDefaultStatsAndLoss(TestGame tg, string locale)
        {

            GameResult gameResult = this.CreateGameResult(tg.GameId,
                                                          Guid.NewGuid(),
                                                          DateTime.Now,
                                                          1,
                                                          1,
                                                          "Loss",
                                                          "blob",
                                                          tg.Variant);

            return this.PostGameResult(gameResult, locale, tg.PlatformId, tg.GameId);
        }

        public Response PostGameResult(TestGame testGame, string locale, long score, long time, string outcome, string blob)
        {
            GameResult gr = this.CreateGameResult(testGame, score, time, blob, outcome);
            return this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
        }

        public Response PostGameResultForUser(GameResult gameResult, string username, string password, string locale, uint platformId, uint titleId)
        {
            MetroidTransport transport = new MetroidTransport(username, password);
            string gameResultSting = MetroidTestUtil.GetPostGameResultString(gameResult);
            return transport.PostGameResult(gameResultSting, locale, platformId.ToString(), titleId);
        }

        public Response PostGameResultForUser(GameResult gameResult, Account acct, string locale, uint platformId, uint titleId)
        {
            return this.PostGameResultForUser(gameResult,
                                              acct.XblUser.Settings.UserPassportInfo.MemberName,
                                              acct.XblUser.Settings.UserPassportInfo.Password,
                                              locale, platformId, titleId);
        }

        #endregion PostGameResult helpers
        #region GetLeaderboard helpers

        public LeaderboardResult PostGameResultAndRetrieveLeaderboard(GameResult gr, string leaderboardProperty, string locale, uint platformId, out LeaderboardResult initialLeaderboard)
        {
            initialLeaderboard = this.GetLeaderboardXml(gr.GameId, gr.Variant, leaderboardProperty, 1, "W1", 100, locale, platformId);
            this.PostGameResult(gr, locale, platformId, gr.GameId);
            LeaderboardResult newLeaderboard = this.GetLeaderboardXml(gr.GameId, gr.Variant, leaderboardProperty, 1, "W1", 100, locale, platformId);

            return newLeaderboard;
        }

        /// <summary>
        /// Posts a score that is [scoreIncrement] higher than the current BestScore, or posts a score of [scoreIncrement] if the user has no score in the game
        /// </summary>
        public LeaderboardResult PostHigherScoreAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long scoreIncrement)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);
            
            if (result.TotalNumberOfRows == 0)
            {
                GameResult gr = this.CreateGameResult(testGame, scoreIncrement, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }
            else
            {
                string statValue = this.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore);

                long newScore = long.Parse(statValue) + scoreIncrement;
                GameResult gr = this.CreateGameResult(testGame, newScore, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);
            return newResult;
        }

        public LeaderboardResult PostHigherScoreAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long scoreIncrement, uint rankStart, uint rows)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", rankStart, "W1", rows, locale, testGame.PlatformId);

            if (result.TotalNumberOfRows == 0)
            {
                GameResult gr = this.CreateGameResult(testGame, scoreIncrement, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }
            else
            {
                string statValue = this.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore);

                long newScore = long.Parse(statValue) + scoreIncrement;
                GameResult gr = this.CreateGameResult(testGame, newScore, null, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", rankStart, "W1", rows, locale, testGame.PlatformId);
            return newResult;
        }

        public LeaderboardResult PostHigherScoreAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long scoreIncrement, out LeaderboardResult originalLeaderboard)
        {
            originalLeaderboard = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);
            string statValue = this.CheckLeaderboardResult(originalLeaderboard, LeaderboardPropertyType.BestScore);

            long newScore = long.Parse(statValue) + scoreIncrement;
            GameResult gr = this.CreateGameResult(testGame, newScore, null, blob, outcome);
            this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, locale, testGame.PlatformId);

            return newResult;
        }

        /// <summary>
        /// Posts a time that is [timeIncrement] higher than the current BestTime, or posts a time of [timeIncrement] if the user has no time in the game
        /// </summary>
        public LeaderboardResult PostHigherTimeAndRetrieveLeaderboard(TestGame testGame, string locale, string blob, string outcome, long timeIncrement)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, locale, testGame.PlatformId);

            if (result.TotalNumberOfRows == 0)
            {
                GameResult gr = this.CreateGameResult(testGame, null, timeIncrement, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }
            else
            {
                string statValue = this.CheckLeaderboardResult(result, LeaderboardPropertyType.BestTime);

                long newTime = long.Parse(statValue) + timeIncrement;
                GameResult gr = this.CreateGameResult(testGame, null, newTime, blob, outcome);
                this.PostGameResult(gr, locale, testGame.PlatformId, testGame.GameId);
            }

            LeaderboardResult newResult = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, locale, testGame.PlatformId);
            return newResult;
        }

        /// <summary>
        /// Get the value of a given stat in a leaderboard
        /// </summary>
        /// <param name="stat">Property the leaderboard should rank itself on</param>
        /// <param name="leaderboardProperty">"BestScore", "BestTime", "CumulativeScore Score", "CumulativeTime", "GamesPlayed", "AverageScore", "AverageTime", "Wins", "Losses", "BestScoreDatablobId", "BestTimeDatablobId", "LastPlayedDateTime"</param>
        /// <returns></returns>
        public string GetStatValue(TestGame testGame, string locale, LeaderboardPropertyType stat, string leaderboardProperty)
        {
            LeaderboardResult result = this.GetLeaderboardXml(testGame.GameId, testGame.Variant, leaderboardProperty, 1, "W1", 100, locale, testGame.PlatformId);
            string statValue = this.CheckLeaderboardResult(result, stat);

            return statValue;
        }

        public GameResult CreateGameResult(TestGame testGame, long? score, long? time, string blob, string outcome)
        {
            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Variant = testGame.Variant;
            gr.TimeStamp = DateTime.Now;

            if (!string.IsNullOrEmpty(outcome)) { gr.Outcome = outcome; }
            if (!string.IsNullOrEmpty(blob)) { gr.Blob = Encoding.UTF8.GetBytes(blob); }

            if (score.HasValue) { gr.Score = score.Value; }
            if (time.HasValue) { gr.Time = time.Value; }

            return gr;
        }

        /// <summary>
        /// Returns the rank of the given user in the leaderboard, or 0 if the user doesn't appear in the leaderboard
        /// </summary>
        public static uint GetRankForUserInLeaderboard(LeaderboardResult result, string gamertag)
        {
            try
            {
                uint rank = (from t in result.Leaderboard
                        where t.User.GamerTag.Equals(gamertag, StringComparison.OrdinalIgnoreCase)
                        select t.Rank).First();
                return rank;
            }
            catch (System.InvalidOperationException)
            {
                return 0;
            }
        }

        /// <summary>
        /// Returns the TestUser for the user at the given rank spot in the leaderboard (only works for users defined in MetroidTransport.config.xml)
        /// </summary>
        /// <param name="result">Leaderboard result</param>
        /// <param name="rank">Rank</param>
        public TestUser GetRankedUserInLeaderboard(LeaderboardResult result, uint rank)
        {
            string gamertag = string.Empty;
            for (int i = 0; i < result.TotalNumberOfRows; i++)
            {
                if (result.Leaderboard[i].Rank == rank)
                {
                    gamertag = result.Leaderboard[i].User.GamerTag;
                    break;
